{"version":3,"file":"pdp10.js","lineCount":311,"mappings":"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","sources":["versions/pdpjs/1.50.3/pdp10-uncompiled.js"," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:es6/symbol] "," [synthetic:util/objectcreate] "," [synthetic:es6/util/setprototypeof] "," [synthetic:es6/util/inherits] "," [synthetic:util/polyfill] "," [synthetic:es6/math/trunc] "," [synthetic:es6/math/log2] "," [synthetic:es6/util/makeiterator] "],"names":["$jscomp.defineProperty","$jscomp.global","$jscomp.initSymbol","$jscomp.Symbol","$jscomp.SYMBOL_PREFIX","$jscomp.arrayIterator","$jscomp.initSymbolIterator","$jscomp.iteratorPrototype","$jscomp.objectCreate","$jscomp.setPrototypeOf","$jscomp.polyfill","ASCII","BREAK","CTRL_A","CTRL_B","CTRL_C","CTRL_D","CTRL_E","CTRL_F","CTRL_G","CTRL_H","CTRL_I","CTRL_J","CTRL_K","CTRL_L","CTRL_M","CTRL_N","CTRL_O","CTRL_P","CTRL_Q","CTRL_R","CTRL_S","CTRL_T","CTRL_U","CTRL_V","CTRL_W","CTRL_X","CTRL_Y","CTRL_Z","ESC","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","DEL","parseInt","base","chPrefix","fCommas","indexOf","replace","ch","charAt","substr","chSuffix","slice","shift","match","isNaN","Math","pow","trunc","value","toBase","radix","cch","sPrefix","nGrouping","ceil","log","String","fromCharCode","toOct","fPrefix","abs","Str.toBase","toDec","toHex","getBaseName","sFileName","sBaseName","lastIndexOf","getExtension","sExtension","toLowerCase","endsWith","sSuffix","length","escapeHTML","sHTML","Str.HTMLEscapeMap","pad","sPadding","trim","prototype","binarySearch","fnCompare","left","right","found","undefined","middle","compareResult","formatDate","date","sDate","Date","iHour","getHours","iDay","getDate","iMonth","getMonth","sFormat","Usr.asDays","getDay","Usr.asMonths","getMinutes","getSeconds","getFullYear","getResource","sURL","type","fAsync","done","callback","request","readyState","resource","fArrayBuffer","response","responseText","err","status","window","location","protocol","nErrorCode","resources","XMLHttpRequest","ActiveXObject","fXHR2","responseType","onreadystatechange","sPost","hasOwnProperty","encodeURIComponent","open","setRequestHeader","send","overrideMimeType","parseMemoryResource","sData","aBytes","aSymbols","addrLoad","addrExec","ib","Error","data","JSON","parse","eval","Array","aData","Component.alertUser","message","ab","asHexData","sHexData","split","push","getHost","host","SITEHOST","hasLocalStorage","Web.fLocalStorage","localStorage","setItem","Web.sLocalStorageTest","getItem","removeItem","getLocalStorageItem","sKey","sValue","setLocalStorageItem","isUserAgent","userAgent","navigator","getURLParm","sParm","Web.parmsURL","sParms","aParms","search","pl","exec","decodeURIComponent","onCountRepeat","fnRepeat","fnComplete","fnTimeout","doCountRepeat","setTimeout","onClickRepeat","fn","doClickRepeat","msRepeat","ms","timer","fIgnoreMouseEvents","onmousedown","e.onmousedown","msDelay","ontouchstart","e.ontouchstart","onmouseup","onmouseout","e.onmouseout","clearTimeout","ontouchend","ontouchcancel","e.ontouchcancel","onPageEvent","sFunc","fnPrev","onInit","Web.aPageEventHandlers","doPageEvent","afn","Web.fPageEventsEnabled","enablePageEvents","fEnable","Web.fPageLoaded","Web.sendPageEvent","Web.fPageShowed","sendPageEvent","sEvent","Web.doPageEvent","Web.onPageEvent","onPageLoad","onPageShow","Web.isUserAgent","onPageUnload","constructor","Component","parms","bitsMessage","id","name","comment","bindings","idComponent","idMachine","flags","ready","busy","busyCancel","initDone","powered","unloading","error","fnReady","clearError","dbg","cpu","bus","cmp","Component.components.push","component","addMachineResource","sName","Component.machines","getTime","now","alertUser","sMessage","alert","confirmUser","sPrompt","fResponse","confirm","appendControl","control","sText","scrollTop","scrollHeight","bindComponentControls","element","sAppClass","PDP10.APPCLASS","aeControls","Component.getElementsByClass","parentNode","iControl","aeChildNodes","childNodes","iNode","nodeType","sClass","getAttribute","aClasses","iClass","Component.getComponentParms","setBinding","getComponents","idRelated","aComponents","Component.components.length","Component.components","getComponentByID","getComponentByType","sType","componentPrev","getComponentParms","getElementsByClass","sObjClass","getElementsByClassName","ae","aeAll","getElementsByTagName","re","RegExp","test","className","processCommands","fSuccess","aCommands","Component.commands","aTokens","splice","sCommand","fnCallReady","Component.asyncCommands.indexOf","processNextCommand","Component.processCommands","fnCommand","Component.globalCommands","Component.getComponentByType","Component.componentCommands","exports","call","Component.prototype","?.prototype","toString","sHTMLType","sBinding","onclick","clearControl","notice","this.notice","println","print","printControl","Component.appendControl","printlnControl","Component.PRINT.PROGRESS","fPrintOnly","computer","console","setError","isError","isReady","setReady","isBusy","fCancel","setBusy","fBusy","powerUp","powerDown","fSave","fShutdown","messageEnabled","bitsEnabled","printMessage","fAddress","PROGRESS","Component.asyncCommands","scriptAlert","scriptSleep","fnCallback","sDelay","scriptSelect","aBindings","options","textContent","selectedIndex","Array.prototype.indexOf","obj","start","isArray","Array.isArray","arg","Object","Function","bind","Function.prototype.bind","fnBound","fToBind","apply","fnNOP","args","concat","arguments","TypeError","APPCLASS","APPNAME","ADDR_MASK","ADDR_LIMIT","HINT_MASK","HINT_LIMIT","HALF_MASK","HALF_SHIFT","INT_MASK","INT_LIMIT","WORD_MASK","WORD_LIMIT","TWO_POW32","TWO_POW34","TWO_POW36","OP_SCALE","OPCODE","IO_SCALE","A_SCALE","P_SCALE","PDP10.APPNAME","MessagesPDP10.CATEGORIES","CPU","TRAP","FAULT","INT","BUS","MEMORY","MMU","ROM","DEVICE","PANEL","KEYBOARD","KEYS","PAPER","READ","WRITE","SERIAL","TIMER","SPEAKER","COMPUTER","LOG","WARN","BUFFER","HALT","PanelPDP10","parmsPanel","fBindings","nDisplayCount","cLiveRegs","regAddr","regData","regSwitches","regDisplay","ledAddr","ledData","fDeposit","fExamine","fLEDTest","nAddrSel","PanelPDP10.ADDRSEL.CONS_PHY","leds","switches","processStart","processStep","processEnable","processContinue","processDeposit","processExamine","processLoadAddr","processLEDTest","processSRSwitch","holdSwitch","toggleSwitch","resetSwitches","setSwitch","$jscomp.inherits","PanelPDP10.prototype","reset","fPowerUp","stop","updateData","setDR","parent","parentElement","panel","onPressSwitch","pressSwitch","onReleaseSwitch","releaseSwitch","event","preventDefault","initBus","displayLEDs","displaySwitches","fRepower","PanelPDP10.init","restore","save","state","State","set","getAR","getDR","getSR","updateAddr","setAR","setSRSwitches","setSR","sw","displayLED","style","backgroundColor","override","displaySwitch","marginTop","Str.parseInt","PanelPDP10.SWITCH.STEP","PanelPDP10.SWITCH.DEP","PanelPDP10.SWITCH.EXAM","running","setPC","getSwitch","PanelPDP10.SWITCH.ENABLE","startCPU","stopCPU","stepCPU","nCyclesStep","updateTimers","addCycles","updateChecksum","exception","stack","updateDisplays","advanceAddr","setWordDirect","writeWord","getWordDirect","readWord","index","inc","mask","nBusMask","nLEDs","updateLEDArray","PDP10.WORD_LIMIT","regPC","init","aePanels","document","iPanel","ePanel","Component.getComponentByID","Component.bindComponentControls","CONS_PHY","DEP","ENABLE","EXAM","STEP","Web.onInit","BusPDP10","parmsBus","nBusWidth","addrTotal","nBlockShift","log2","nBlockSize","nBlockTotal","nDisableFaults","aBusBlocks","block","MemoryPDP10","initMemory","copyBreakpoints","iBlock","BusPDP10.prototype","saveMemory","adw","nBlockLen","iDst","aDst","iComp","aComp","restoreMemory","addMemory","addr","size","addrNext","sizeLeft","addrBlock","sizeBlock","used","sizeAvail","reportError","BusPDP10.ERROR.RANGE_INUSE","blockNew","MemoryPDP10.TYPE_NAMES","Str.toOct","BusPDP10.ERROR.RANGE_INVALID","getBlockDirect","readWordDirect","nBlockLimit","writeWordDirect","removeMemBreak","fWrite","removeBreakpoint","cWriteBreakpoints","resetWriteAccess","fReadOnly","writeNone","cReadBreakpoints","resetReadAccess","fDirty","fDirtyEver","iSrc","aSrc","iCompare","fault","toStrBase","errNum","Str.toHex","RANGE_INUSE","RANGE_INVALID","DevicePDP10","parmsDevice","DevicePDP10.prototype","aeDevice","iDevice","eDevice","device","MemoryPDP10.idBlock","MemoryPDP10.TYPE.NONE","MemoryPDP10.TYPE.ROM","readNone","aw","setAccess","MemoryPDP10.afnMemory","MemoryPDP10.prototype","MemoryPDP10.afnNone","setReadAccess","fDirect","setWriteAccess","addBreakpoint","off","MemoryPDP10.afnChecked","mem","WORD_INVALID","readWordMemory","writeWordMemory","readWordChecked","checkBreakpoint","nb","aBreakRead","writeWordChecked","aBreakWrite","NONE","CPUPDP10","parmsCPU","nCyclesDefault","nCycles","nMultiplier","nCyclesPerSecond","nCyclesMultiplier","mhzDefault","round","mhzTarget","msPerYield","nCyclesPerYield","nCyclesNextYield","nCyclesRecalc","starting","autoStart","checksum","nChecksum","nCyclesChecksumNext","nCyclesChecksumStart","nCyclesChecksumInterval","nCyclesChecksumStop","aTimers","onRunTimeout","runCPU","nTotalCycles","nRunCycles","nBurstCycles","nStepCycles","msStartRun","msStartThisRun","msEndThisRun","nCyclesThisRun","nYieldsSinceStatusUpdate","mhz","CPUPDP10.prototype","CPUPDP10.BUTTONS.length","CPUPDP10.BUTTONS","sAutoStart","getMachineParm","resetCycles","resetChecksum","fInit","updateStatus","fAutoStart","setFocus","sInitCommands","sCmds","doCommands","getChecksum","fDisplay","getCycles","displayChecksum","control.onclick","iComponent","Component.getComponents","setSpeed","getSpeedTarget","toFixed","fEndStep","calcCycles","fRecalc","vMultiplier","CPUPDP10.YIELDS_PER_SECOND","floor","fUpdateFocus","sSpeed","controlSpeed","Component.getTime","getBurstCycles","saveTimers","aTimerCycles","endBurst","fReset","calcStartTime","msDelta","CPUPDP10.YIELDS_PER_STATUS","nUpdate","calcRemainingTime","msYield","msRemainsThisRun","msElapsed","controlRun","CPUPDP10_prototype$stepCPU","fComplete","fStopped","complete","CPUStatePDP10","model","MODEL_KA10","addrReset","opDecode","PDP10.opKA10.bind","opUndefined","PDP10.opUndefined.bind","irqNext","aIRQs","CPUStatePDP10.prototype","initCPU","regLA","regOP","regEA","regRA","lastPC","regBP","regXC","regEX","regPS","regRes","regPow","regDiv","regRem","addrLast","opFlags","readWordFromPhysical","writeWordToPhysical","getSpeed","saveIRQs","aIRQVectors","irq","restoreIRQs","vector","next","restoreTimers","setPS","PSFLAG","advancePC","pc","PDP10.ADDR_LIMIT","getXC","nMinCycles","nDebugCheck","checksEnabled","nDebugState","OPFLAG","checkInstruction","fInterrupt","getOpcode","PDP10.ADDR_MASK","PDP10.OPCODE.A_SCALE","op","aeCPUs","iCPU","eCPU","PDP10.opKA10","PDP10.aOpXXX_KA10","PDP10.opUUO","PDP10.opIBP","PDP10.OPCODE.P_SCALE","PDP10.opLDB","ac","PDP10.opDPB","PDP10.opMOVE","PDP10.opMOVEI","PDP10.opMOVEM","PDP10.opSETZ","PDP10.opSETCA","PDP10.WORD_MASK","PDP10.opSETO","PDP10.opHLL","src","dst","PDP10.GETHR","PDP10.HALF_MASK","PDP10.opHLLI","PDP10.opHLLM","PDP10.opHLLS","PDP10.INT_MASK","PDP10.opHRL","PDP10.HALF_SHIFT","PDP10.opHRLI","PDP10.opHRLM","PDP10.opHRLS","PDP10.opHRR","PDP10.GETHL","PDP10.opHRRI","PDP10.opHRRM","PDP10.opHRRS","PDP10.HINT_MASK","PDP10.opHLR","PDP10.opHLRI","PDP10.opHLRM","PDP10.opHLRS","PDP10.opIO","PDP10.aOpIO_KA10","PDP10.opNOP","PDP10.opNOPM","PDP10.opUndefined","PDP10.doABS","PDP10.INT_LIMIT","PDP10.TWO_POW36","PDP10.doADD","res","PDP10.setAddFlags.call","PDP10.doDIV","ext","fNegQ","fNegR","extAbs","srcAbs","sign","dDst","lo","hi","PDP10.CMPD","PDP10.ADDD","dSrc","PDP10.ZEROD","PDP10.SHRD","PDP10.doMUL","fTruncate","fExternal","n1","n2","fNeg","n1d1","n1d2","n2d1","n2d2","m1d1","m1d2","PDP10.doNEG","PDP10.doSUB","PDP10.setAddFlags","dst01","PDP10.TWO_POW34","src01","res01","bitsCarry","PDP10.AND","PDP10.TWO_POW32","PDP10.CLR","PDP10.CMP","PDP10.EQV","PDP10.IOR","PDP10.SIGN","PDP10.XOR","PDP10.SWAP","result","PDP10.opUFA","PDP10.opDFN","PDP10.opFSC","PDP10.opILDB","PDP10.opIBP.call","PDP10.opLDB.call","PDP10.opIDPB","PDP10.opDPB.call","PDP10.opFAD","PDP10.opFADI","PDP10.opFADM","PDP10.opFADB","PDP10.opFADR","PDP10.opFADRI","PDP10.opFADRM","PDP10.opFADRB","PDP10.opFSB","PDP10.opFSBI","PDP10.opFSBM","PDP10.opFSBB","PDP10.opFSBR","PDP10.opFSBRI","PDP10.opFSBRM","PDP10.opFSBRB","PDP10.opFMP","PDP10.opFMPI","PDP10.opFMPM","PDP10.opFMPB","PDP10.opFMPR","PDP10.opFMPRI","PDP10.opFMPRM","PDP10.opFMPRB","PDP10.opFDV","PDP10.opFDVI","PDP10.opFDVM","PDP10.opFDVB","PDP10.opFDVR","PDP10.opFDVRI","PDP10.opFDVRM","PDP10.opFDVRB","PDP10.opMOVES","PDP10.opMOVS","PDP10.opMOVSI","PDP10.opMOVSM","PDP10.opMOVSS","PDP10.opMOVN","PDP10.doNEG.call","PDP10.opMOVNI","PDP10.opMOVNM","PDP10.opMOVNS","PDP10.opMOVM","PDP10.doABS.call","PDP10.opMOVMI","PDP10.opMOVMM","PDP10.opMOVMS","PDP10.opIMUL","PDP10.doMUL.call","PDP10.opIMULI","PDP10.opIMULM","PDP10.opIMULB","PDP10.opMUL","PDP10.opMULI","PDP10.opMULM","PDP10.opMULB","PDP10.opIDIV","PDP10.doDIV.call","PDP10.opIDIVI","PDP10.opIDIVM","PDP10.opIDIVB","PDP10.opDIV","PDP10.opDIVI","PDP10.opDIVM","PDP10.opDIVB","PDP10.opASH","PDP10.HINT_LIMIT","bits","PDP10.opROT","PDP10.opLSH","PDP10.opJFFO","PDP10.opASHC","wLeft","wRight","wLeftOrig","PDP10.opROTC","PDP10.opLSHC","PDP10.opEXCH","tmp","PDP10.opBLT","fUpdate","fDone","addrDst","addrSrc","isRunning","PDP10.opAOBJP","PDP10.opAOBJN","PDP10.opJRST","setUserMode","PDP10.opJFCL","bitsPS","PDP10.opXCT","PDP10.opPUSHJ","getPS","getPC","PDP10.opPUSH","PDP10.opPOP","PDP10.opPOPJ","PDP10.opJSR","PDP10.opJSP","PDP10.opJSA","PDP10.opJRA","acc","PDP10.opADD","PDP10.doADD.call","PDP10.opADDI","PDP10.opADDM","PDP10.opADDB","PDP10.opSUB","PDP10.doSUB.call","PDP10.opSUBI","PDP10.opSUBM","PDP10.opSUBB","PDP10.opCAIL","PDP10.opCAIE","PDP10.opCAILE","PDP10.opCAIA","PDP10.opCAIGE","PDP10.opCAIN","PDP10.opCAIG","PDP10.opCAML","PDP10.opCAME","PDP10.opCAMLE","PDP10.opCAMA","PDP10.opCAMGE","PDP10.opCAMN","PDP10.opCAMG","PDP10.opJUMPL","PDP10.opJUMPE","PDP10.opJUMPLE","PDP10.opJUMPA","PDP10.opJUMPGE","PDP10.opJUMPN","PDP10.opJUMPG","PDP10.opSKIP","PDP10.opSKIPL","PDP10.opSKIPE","PDP10.opSKIPLE","PDP10.opSKIPA","PDP10.opSKIPGE","PDP10.opSKIPN","PDP10.opSKIPG","PDP10.opAOJ","PDP10.opAOJL","PDP10.opAOJE","PDP10.opAOJLE","PDP10.opAOJA","PDP10.opAOJGE","PDP10.opAOJN","PDP10.opAOJG","PDP10.opAOS","PDP10.opAOSL","PDP10.opAOSE","PDP10.opAOSLE","PDP10.opAOSA","PDP10.opAOSGE","PDP10.opAOSN","PDP10.opAOSG","PDP10.opSOJ","PDP10.opSOJL","PDP10.opSOJE","PDP10.opSOJLE","PDP10.opSOJA","PDP10.opSOJGE","PDP10.opSOJN","PDP10.opSOJG","PDP10.opSOS","PDP10.opSOSL","PDP10.opSOSE","PDP10.opSOSLE","PDP10.opSOSA","PDP10.opSOSGE","PDP10.opSOSN","PDP10.opSOSG","PDP10.opSETZM","PDP10.opSETZB","PDP10.opAND","PDP10.opANDI","PDP10.opANDM","PDP10.opANDB","PDP10.opANDCA","PDP10.opANDCAI","PDP10.opANDCAM","PDP10.opANDCAB","PDP10.opANDCM","PDP10.opANDCMI","PDP10.opANDCMM","PDP10.opANDCMB","PDP10.opXOR","PDP10.opXORI","PDP10.opXORM","PDP10.opXORB","PDP10.opIOR","PDP10.opIORI","PDP10.opIORM","PDP10.opIORB","PDP10.opANDCB","PDP10.opANDCBI","PDP10.opANDCBM","PDP10.opANDCBB","PDP10.opEQV","PDP10.opEQVI","PDP10.opEQVM","PDP10.opEQVB","PDP10.opSETCAM","PDP10.opSETCAB","PDP10.opORCA","PDP10.opORCAI","PDP10.opORCAM","PDP10.opORCAB","PDP10.opSETCM","PDP10.opSETCMI","PDP10.opSETCMM","PDP10.opSETCMB","PDP10.opORCM","PDP10.opORCMI","PDP10.opORCMM","PDP10.opORCMB","PDP10.opORCB","PDP10.opORCBI","PDP10.opORCBM","PDP10.opORCBB","PDP10.opSETOM","PDP10.opSETOB","PDP10.opTRNE","PDP10.opTLNE","PDP10.opTRNA","PDP10.opTLNA","PDP10.opTRNN","PDP10.opTLNN","PDP10.opTDNE","PDP10.opTSNE","PDP10.opTDNA","PDP10.opTSNA","PDP10.opTDNN","PDP10.opTSNN","PDP10.opTRZ","PDP10.opTLZ","PDP10.opTRZE","PDP10.opTLZE","PDP10.opTRZA","PDP10.opTLZA","PDP10.opTRZN","PDP10.opTLZN","PDP10.opTDZ","PDP10.opTSZ","PDP10.opTDZE","PDP10.opTSZE","PDP10.opTDZA","PDP10.opTSZA","PDP10.opTDZN","PDP10.opTSZN","PDP10.opTRC","PDP10.opTLC","PDP10.opTRCE","PDP10.opTLCE","PDP10.opTRCA","PDP10.opTLCA","PDP10.opTRCN","PDP10.opTLCN","PDP10.opTDC","PDP10.opTSC","PDP10.opTDCE","PDP10.opTSCE","PDP10.opTDCA","PDP10.opTSCA","PDP10.opTDCN","PDP10.opTSCN","PDP10.opTRO","PDP10.opTLO","PDP10.opTROE","PDP10.opTLOE","PDP10.opTROA","PDP10.opTLOA","PDP10.opTRON","PDP10.opTLON","PDP10.opTDO","PDP10.opTSO","PDP10.opTDOE","PDP10.opTSOE","PDP10.opTDOA","PDP10.opTSOA","PDP10.opTDON","PDP10.opTSON","PDP10.opBLKI","PDP10.opDATAI","PDP10.opBLKO","PDP10.opDATAO","PDP10.opCONO","dev","DEVICES","WFLAG","writeFlags","PDP10.opCONI","readFlags","RFLAG","PDP10.opCONSZ","PDP10.opCONSO","ROMPDP10","parmsROM","abInit","addrROM","sizeROM","addrAlias","sFilePath","Str.getBaseName","sFileURL","sFileExt","Str.getExtension","FORMAT","Web.getHost","rom","Web.getResource","doneLoad","sResponse","Component.addMachineResource","Web.parseMemoryResource","initROM","addSymbols","addROM","aliases","cloneROM","aBlocks","aeROM","iROM","eROM","RAMPDP10","parmsRAM","addrRAM","sizeRAM","fAllocated","ram","initRAM","RAM","loadImage","zero","pattern","len","addrInit","fStart","fLoaded","aeRAM","iRAM","eRAM","SerialPortPDP10","parmsSerial","fUpperCase","fNullModem","abReceive","SerialPortPDP10.sIOBuffer","target","eBinding","connection","sendData","initConnection","receiveData","receiveStatus","setConnection","SerialPortPDP10.prototype","serial","onkeydown","control.onkeydown","bASCII","keyCode","KEYCODE","altKey","Keys.ASCII.CTRL_H","Keys.ASCII.DEL","ctrlKey","Keys.ASCII.A","Keys.ASCII.Z","Keys.ASCII.CTRL_A","onkeypress","control.onkeypress","metaKey","which","Keys.ASCII.CTRL_M","Keys.ASCII.CTRL_J","onpaste","control.onpaste","stopPropagation","clipboardData","getData","removeAttribute","sConnection","asParts","sSourceID","Str.trim","sTargetID","fnConnect","bASCIIPrev","charCodeAt","LF","CR","aeSerial","iSerial","eSerial","Debugger","parmsDbg","nBase","nBits","achGroup","achAddress","fAssemble","iPrevCmd","aPrevCmds","aVariables","getRegIndex","getRegValue","parseCommand","sCmd","chSep","iPrev","chQuote","substring","evalAND","truncate","Debugger.TWO_POW32","evalXOR","evalMUL","fUnsigned","vNew","limit","evalOps","aVals","aOps","cOps","chOp","pop","val2","val1","valNew","evalIOR","parseArray","asValues","iValue","iLimit","aUndefined","fError","nUnary","nBasePrev","sOp","parseValue","cOpen","iStart","parseUnary","aBinOp","Debugger.aDECOpPrecedence","Debugger.aBinOpPrecedence","parseASCII","sExp","chDelim","cchMax","parseExpression","fQuiet","fPrint","join","regExp","printValue","bit","iReg","getVariable","sVar","sUndefined","getVariableFixup","valueUndefined","fDefined","resetVariables","printVariable","cVariables","aVars","keys","sort","Str.toDec","DebuggerPDP10","dbgAddrAcc","newAddr","dbgAddrCode","dbgAddrData","dbgAddrAssemble","aSymbolTable","aBreakExec","clearBreakpoints","iInstructionHistory","nBreakInstructions","aInstructionHistory","nextHistory","historyInit","afnDumpers","sMessagePrev","aMessageBuffer","messageInit","nStep","sCmdDumpPrev","sCmdTracePrev","nCyclesStart","msStart","cInstructions","nSuppressBreaks","macro10","controlDebug","global","getAddr","dbgAddr","ADDR_INVALID","fPhysical","fTemporary","setAddr","packAddr","unpackAddr","aAddr","aCmds","DebuggerPDP10.prototype","sMessages","sCommands","messageDump","onDumpBus","asArgs","sAddr","parseAddr","typePrev","cPrev","setSelectionRange","Web.onClickRepeat","onClickDebugEnter","onClickStep","fRepeat","fCompleted","scrollX","scrollY","focus","scrollTo","DebuggerPDP10_prototype$getWord","getWord","DebuggerPDP10_prototype$setWord","setWord","chOpen","parseReference","chClose","chEscape","chInnerEscape","reSubExp","sReplace","dbgAddrTmp","sSymbol","sUpperCase","iTable","toUpperCase","findSymbolAddr","symbol","symbolTable","offSymbol","validateWord","parseAddrOptions","sOptions","toStrWord","sEnable","aEnable","fnDumper","sReg","DebuggerPDP10.REGNAMES.indexOf","DebuggerPDP10.REGS.PC","DebuggerPDP10.REGS.RA","DebuggerPDP10.REGS.EA","DebuggerPDP10.REGS.PS","DebuggerPDP10.REGS.OV","DebuggerPDP10.REGS.C0","DebuggerPDP10.REGS.C1","DebuggerPDP10.REGS.BI","DebuggerPDP10.REGS.ND","DebuggerPDP10.REGS.PD","toStrAddr","fRunning","DebuggerPDP10.HISTORY_LIMIT","checkCPU","fRegs","fUpdateDisplays","DebuggerPDP10.PROMPT","doRegisters","doUnassemble","clearTempBreakpoint","sStopped","msTotal","nState","opCode","getInstruction","sComment","nSequence","dbgAddrOp","opNum","iMode","PDP10.OPCODE.OP_SCALE","DebuggerPDP10.OPTABLE","opMasks","opMask","aModes","DebuggerPDP10.OPMODES","DebuggerPDP10.OPCOMPS","DebuggerPDP10.OPTESTS","sMode","DebuggerPDP10.OPS.MOVM","sOperation","DebuggerPDP10.OPNAMES","PDP10.OPCODE.IO_SCALE","sOperand","findInstruction","DebuggerPDP10.ALTOPS.length","DebuggerPDP10.ALTOPS","opAlt","Str.pad","sOpcodes","sLine","parseInstruction","sOpcode","sOperands","sMnemonic","opMode","aOperands","operand","toStrOffset","aBreak","findBreakpoint","printBreakpoint","fFound","dbgAddrBreak","listBreakpoints","sAction","fBreak","addrBreak","doCommand","getRegDump","fMisc","sDump","getAccOutput","DebuggerPDP10.REGNAMES.length","DebuggerPDP10.REGNAMES","getMiscDump","comparePairs","p1","p2","sModule","aOffsets","sAnnotation","Usr.binarySearch","findSymbol","fNearest","aSymbol","addrSymbol","returnSymbol","aWords","addrStart","nWords","addrLo","addrHi","forEach","sStart","iOffset","offset","doAssemble","sFile","Macro10","assembleFiles","doneMacro10","doVar","delVariable","setVariable","doList","nDelta","sDelta","fInstruction","flag","setRegValue","doPrint","doTrace","sCount","nCount","Web.onCountRepeat","onCountStep","onCountStepComplete","sAddrEnd","nLines","nBytes","dbgAddrEnd","nPrinted","sLabel","dbgCopy","sDelim","iLast","s0","ch0","unshift","doBreak","cBreaks","doClear","controlPrint","sLen","sBytes","sDumpers","doDump","sState","powerOff","sSymbolOrig","sMore","cHistory","iHistory","aHistory","nPrev","sPrev","sLines","aFilters","dbgAddrNew","sInstruction","cOverrides","fJSON","nWordsPerLine","sChars","fnGet","doEdit","fnSet","doRun","doHalt","doIf","doStackTrace","cFrames","dbgAddrCall","dbgAddrStack","nFrames","sCall","cTests","addrOrig","sCallPrev","fCriteria","sCategory","doMessages","sCategories","fEnabled","bitMessage","nRegs","sOption","doStep","doOptions","DebuggerPDP10.COMMANDS","doHelp","MOVM","PC","RA","EA","PS","OV","C0","C1","BI","ND","PD","UUO","UFA","DFN","FSC","IBP","ILDB","LDB","IDPB","DPB","ASH","ROT","LSH","JFFO","ASHC","ROTC","LSHC","EXCH","BLT","AOBJP","AOBJN","JRST","JFCL","XCT","PUSHJ","PUSH","POP","POPJ","JSR","JSP","JSA","JRA","FAD","FADR","FSB","FSBR","FMP","FMPR","FDV","FDVR","MOVE","MOVS","MOVN","IMUL","MUL","IDIV","DIV","ADD","SUB","SETZ","AND","ANDCA","SETM","ANDCM","SETA","XOR","IOR","ANDCB","EQV","SETCA","ORCA","SETCM","ORCM","ORCB","SETO","HLL","HRL","HLLZ","HRLZ","HLLO","HRLO","HLLE","HRLE","HRR","HLR","HRRZ","HLRZ","HRRO","HLRO","HRRE","HLRE","CAI","CAM","JUMP","SKIP","AOJ","AOS","SOJ","SOS","TR","TL","TD","TS","BLKI","DATAI","BLKO","DATAO","CONO","CONI","CONSZ","CONSO","DebuggerPDP10.JFCL","JOV","JCRY0","JCRY1","JCRY","JFOV","DebuggerPDP10.JRST","JRSTF","JEN","aeDbg","iDbg","eDbg","iURL","aURLs","anLines","asLines","tblMacros","tblSymbols","aLiterals","aFixups","aLineRefs","nLine","nError","nLiteral","nLocation","nLocationScope","stackScopes","sOperator","nMacroDef","sMacroDef","chMacroOpen","chMacroClose","reLine","macroCall","chASCII","sASCII","assembleString","parseResources","loadNextResource","sExt","processMacro10","sResource","Str.endsWith","warning","addSymbol","getLineRef","parseLine","doLiterals","doVariables","processFixup","aValues","aDefaults","defASCII","fParse","matchLine","Macro10.PSEUDO_OP.IRP","Macro10.PSEUDO_OP.IRPC","iParm","macroDef","iSearch","iMatch","iMatchEnd","chPre","chPost","appendMacro","sSeparator","sRemainder","Macro10.SYMTYPE.LABEL","matchOp","nType","PRIVATE","Macro10.SYMTYPE.INTERNAL","sLiteral","getLiteral","defMacro","Macro10.PSEUDO_OP.LITERAL","getReserved","parseMacro","Macro10.PSEUDO_OP.ASCII","Macro10.PSEUDO_OP.ASCIZ","Macro10.PSEUDO_OP.SIXBIT","Macro10.PSEUDO_OP.BLOCK","defBLOCK","Macro10.PSEUDO_OP.BYTE","nValue","nBitsRemaining","getExpression","defBYTE","genWord","Macro10.PSEUDO_OP.END","defEND","Macro10.PSEUDO_OP.EXP","defWord","Macro10.PSEUDO_OP.LIT","Macro10.PSEUDO_OP.LOC","defLocation","Macro10.PSEUDO_OP.VAR","Macro10.PSEUDO_OP.XWD","defXWD","Macro10.PSEUDO_OP.DEFINE","Macro10.PSEUDO_OP.IF1","Macro10.PSEUDO_OP.IFDEF","Macro10.PSEUDO_OP.IFDIF","Macro10.PSEUDO_OP.IFE","Macro10.PSEUDO_OP.IFG","Macro10.PSEUDO_OP.IFGE","Macro10.PSEUDO_OP.IFIDN","Macro10.PSEUDO_OP.IFL","Macro10.PSEUDO_OP.IFLE","Macro10.PSEUDO_OP.IFN","Macro10.PSEUDO_OP.IFNDEF","Macro10.PSEUDO_OP.OPDEF","Macro10.PSEUDO_OP.REPEAT","Macro10.PSEUDO_OP.PURGE","getValues","delSymbols","Macro10.PSEUDO_OP.LALL","Macro10.PSEUDO_OP.LIST","Macro10.PSEUDO_OP.NOSYM","Macro10.PSEUDO_OP.PAGE","Macro10.PSEUDO_OP.SUBTTL","Macro10.PSEUDO_OP.TITLE","Macro10.PSEUDO_OP.XALL","Macro10.PSEUDO_OP.XLIST","macro","nOperand","Macro10.MACRO_OP.OPDEF","parseText","pushScope","sFixup","popScope","macroPrev","parseLiteral","iLine","scope","fQuotes","cNesting","sEval","iBegin","iEnd","sReserved","Macro10.MACRO_OP.RESERVED","fParens","cchPrefix","nConversion","getString","sRemain","genASCII","Macro10.MACRO_OP.DEFINE","Macro10.MACRO_OP.LITERAL","sOperand2","isDefined","sym","nLocationLiterals","lit","sError","sWarning","LABEL","INTERNAL","ASCIZ","BLOCK","BYTE","DEFINE","END","EXP","IF1","IFDEF","IFDIF","IFE","IFG","IFGE","IFIDN","IFL","IFLE","IFN","IFNDEF","IRP","IRPC","LALL","LIT","LITERAL","LIST","LOC","NOSYM","OPDEF","PAGE","PURGE","REPEAT","SIXBIT","SUBTTL","TITLE","VAR","XALL","XWD","XLIST","RESERVED","ComputerPDP10","parmsComputer","parmsMachine","fSuspended","setMachineParms","fAutoPower","BOOLEAN","nPowerChange","sStateData","sResumePath","sStatePath","fServerState","fStateData","stateComputer","stateFailSafe","fInitialized","fRestoreError","url","random","sUserID","queryUserID","LICENSE","sResume","resume","fAllowResume","ComputerPDP10.RESUME_NONE","APPVERSION","load","getServerStatePath","doneStateLoad","wait","powerOn","parmsComponent","sParmLC","Web.getURLParm","defaultValue","NUMBER","ComputerPDP10.prototype","onComponentReady","validateState","stateValidate","ComputerPDP10.STATE_VALIDATE","sTimestampValidate","get","ComputerPDP10.STATE_TIMESTAMP","sTimestampComputer","clear","ComputerPDP10.RESUME_AUTO","fRestore","ComputerPDP10.RESUME_REPOWER","ComputerPDP10.STATE_FAILSAFE","powerReport","ComputerPDP10.RESUME_PROMPT","unload","Usr.formatDate","store","fValidate","Component.confirmUser","sCode","RES","CODE","FAIL","Web.setLocalStorageItem","ComputerPDP10.STATE_USERID","resetUserID","powerRestore","donePowerOn","reload","asComments","controlPower","getUserID","dataPost","sUser","TYPE","sReport","sReportURL","sTimestamp","ComputerPDP10.STATE_VERSION","ComputerPDP10.STATE_HOSTURL","href","ComputerPDP10.STATE_BROWSER","fClearAll","fClear","saveServerState","ComputerPDP10.RESUME_DELETE","nDisplayLimit","getSpeedCurrent","fWaiting","displayValue","sVal","removeChild","fPrompt","Web.getLocalStorageItem","prompt","verifyUserID","code","State.key","QUERY","REQ","storeServerState","ENDPOINT","fScroll","aeMachines","iMachine","eMachine","aeComputers","iComputer","eComputer","show","exit","sVersion","json","fParsed","key","State.prototype","Web.hasLocalStorage","stringify","fAll","cAsyncMachines","loadXML","sXMLFile","fResolve","display","doneLoadXML","sURLName","sXML","parseXML","buildXML","pathname","xmlDoc","async","parseFromString","DOMParser","resolveXML","matchRef","reRef","sRefFile","doneReadXML","sXMLRef","sRefAttrs","aXMLRefTag","sXMLNewTag","matchAttr","reAttr","embedMachine","sXSLFile","displayMessage","eWarning","aeWarning","innerHTML","Str.escapeHTML","displayError","Web.enablePageEvents","getElementById","css","head","createElement","styleSheet","cssText","appendChild","createTextNode","sAppFolder","processXML","xml","transformXML","sXSL","xsl","sFragment","outerHTML","implementation","createDocument","xsltProcessor","XSLTProcessor","eFragment","replaceChild","embedPDP10","embedPDP11","commandMachine","fSingle","sComponent","sToken","disabled"],"sourcesContent":["\"use strict\";\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/defines.js (C) Jeff Parsons 2012-2018\n */\n\n/**\n * @define {string}\n */\nvar APPVERSION = \"1.x.x\";       // this @define is overridden by the Closure Compiler with the version in package.json\n\nvar XMLVERSION = null;          // this is set in non-COMPILED builds by embedMachine() if a version number was found in the machine XML\n\nvar COPYRIGHT = \"Copyright © 2012-2018 Jeff Parsons <Jeff@pcjs.org>\";\n\nvar LICENSE = \"License: GPL version 3 or later <http://gnu.org/licenses/gpl.html>\";\n\nvar CSSCLASS = \"pcjs\";\n\n/**\n * @define {string}\n */\nvar SITEHOST = \"localhost:8088\";// this @define is overridden by the Closure Compiler with \"www.pcjs.org\"\n\n/**\n * @define {boolean}\n */\nvar COMPILED = false;           // this @define is overridden by the Closure Compiler (to true)\n\n/**\n * @define {boolean}\n */\nvar DEBUG = true;               // this @define is overridden by the Closure Compiler (to false) to remove DEBUG-only code\n\n/**\n * @define {boolean}\n */\nvar MAXDEBUG = false;           // this @define is overridden by the Closure Compiler (to false) to remove MAXDEBUG-only code\n\n/**\n * @define {boolean}\n */\nvar PRIVATE = false;            // this @define is overridden by the Closure Compiler (to false) to enable PRIVATE code\n\n/*\n * RS-232 DB-25 Pin Definitions, mapped to bits 1-25 in a 32-bit status value.\n *\n * SerialPorts in PCjs machines are considered DTE (Data Terminal Equipment), which means they should be \"virtually\"\n * connected to each other via a null-modem cable, which assumes the following cross-wiring:\n *\n *     G       1  <->  1        G       (Ground)\n *     TD      2  <->  3        RD      (Received Data)\n *     RD      3  <->  2        TD      (Transmitted Data)\n *     RTS     4  <->  5        CTS     (Clear To Send)\n *     CTS     5  <->  4        RTS     (Request To Send)\n *     DSR   6+8  <->  20       DTR     (Data Terminal Ready)\n *     SG      7  <->  7        SG      (Signal Ground)\n *     DTR    20  <->  6+8      DSR     (Data Set Ready + Carrier Detect)\n *     RI     22  <->  22       RI      (Ring Indicator)\n *\n * TODO: Move these definitions to a more appropriate shared file at some point.\n */\nvar RS232 = {\n    RTS: {\n        PIN:  4,\n        MASK: 0x00000010\n    },\n    CTS: {\n        PIN:  5,\n        MASK: 0x00000020\n    },\n    DSR: {\n        PIN:  6,\n        MASK: 0x00000040\n    },\n    CD: {\n        PIN:  8,\n        MASK: 0x00000100\n    },\n    DTR: {\n        PIN:  20,\n        MASK: 0x00100000\n    },\n    RI: {\n        PIN:  22,\n        MASK: 0x00400000\n    }\n};\n\n/*\n * NODE should be true if we're running under NodeJS (eg, command-line), false if not (eg, web browser)\n */\nvar NODE = false;\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/dumpapi.js (C) Jeff Parsons 2012-2018\n */\n\n/*\n * Our \"DiskDump API\", such as it was, used to look like:\n *\n *      http://jsmachines.net/bin/convdisk.php?disk=/disks/pc/dos/ibm/2.00/PCDOS200-DISK1.json&format=img\n *\n * To make it (a bit) more \"REST-like\", the above request now looks like:\n *\n *      http://www.pcjs.org/api/v1/dump?disk=/disks/pc/dos/ibm/2.00/PCDOS200-DISK1.json&format=img\n *\n * Similarly, our \"FileDump API\" used to look like:\n *\n *      http://jsmachines.net/bin/convrom.php?rom=/devices/pc/rom/5150/1981-04-24/PCBIOS-REV1.rom&format=json\n *\n * and that request now looks like:\n *\n *      http://www.pcjs.org/api/v1/dump?file=/devices/pc/rom/5150/1981-04-24/PCBIOS-REV1.rom&format=json\n *\n * I don't think it makes sense to avoid \"query\" parameters, because blending the path of a disk image with the\n * the rest of the URL would be (a) confusing, and (b) more work to parse.\n */\nvar DumpAPI = {\n    ENDPOINT:       \"/api/v1/dump\",\n    QUERY: {\n        DIR:        \"dir\",      // value is path of a directory (DiskDump only)\n        DISK:       \"disk\",     // value is path of a disk image (DiskDump only)\n        FILE:       \"file\",     // value is path of a ROM image file (FileDump only)\n        IMG:        \"img\",      // alias for DISK\n        PATH:       \"path\",     // value is path of a one or more files (DiskDump only)\n        FORMAT:     \"format\",   // value is one of FORMAT values below\n        COMMENTS:   \"comments\", // value is either \"true\" or \"false\"\n        DECIMAL:    \"decimal\",  // value is either \"true\" to force all numbers to decimal, \"false\" or undefined otherwise\n        MBHD:       \"mbhd\",     // value is hard drive size in Mb (formerly \"mbsize\") (DiskDump only) (DEPRECATED)\n        SIZE:       \"size\"      // value is target disk size in Kb (supersedes \"mbhd\") (DiskDump only)\n    },\n    FORMAT: {\n        JSON:       \"json\",     // default\n        JSON_GZ:    \"gz\",       // gzip is currently used ONLY for compressed JSON\n        DATA:       \"data\",     // same as \"json\", but built without JSON.stringify() (DiskDump only)\n        HEX:        \"hex\",      // deprecated\n        OCTAL:      \"octal\",    // displays data as octal words\n        BYTES:      \"bytes\",    // displays data as hex bytes; normally used only when comments are enabled\n        WORDS:      \"words\",    // displays data as hex words; normally used only when comments are enabled\n        LONGS:      \"longs\",    // displays data as dwords\n        IMG:        \"img\",      // returns the raw disk data (ie, using a Buffer object) (DiskDump only)\n        ROM:        \"rom\"       // returns the raw file data (ie, using a Buffer object) (FileDump only)\n    }\n};\n\n/*\n * Because we use an overloaded API endpoint (ie, one that's shared with the FileDump module), we must\n * also provide a list of commands which, when combined with the endpoint, define a unique request.\n */\nDumpAPI.asDiskCommands = [DumpAPI.QUERY.DIR, DumpAPI.QUERY.DISK, DumpAPI.QUERY.PATH];\nDumpAPI.asFileCommands = [DumpAPI.QUERY.FILE];\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/reportapi.js (C) Jeff Parsons 2012-2018\n */\n\nvar ReportAPI = {\n    ENDPOINT:       \"/api/v1/report\",\n    QUERY: {\n        APP:        \"app\",\n        VER:        \"ver\",\n        URL:        \"url\",\n        USER:       \"user\",\n        TYPE:       \"type\",\n        DATA:       \"data\"\n    },\n    TYPE: {\n        BUG:        \"bug\"\n    },\n    RES: {\n        OK:         \"Thank you\"\n    }\n};\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/userapi.js (C) Jeff Parsons 2012-2018\n */\n\n/*\n * Examples of User API requests:\n *\n *      web.getHost() + UserAPI.ENDPOINT + '?' + UserAPI.QUERY.REQ + '=' + UserAPI.REQ.VERIFY + '&' + UserAPI.QUERY.USER + '=' + sUser;\n */\nvar UserAPI = {\n    ENDPOINT:       \"/api/v1/user\",\n    QUERY: {\n        REQ:        \"req\",      // specifies a request\n        USER:       \"user\",     // specifies a user ID\n        STATE:      \"state\",    // specifies a state ID\n        DATA:       \"data\"      // specifies state data\n    },\n    REQ: {\n        CREATE:     \"create\",   // creates a user ID\n        VERIFY:     \"verify\",   // requests verification of a user ID\n        STORE:      \"store\",    // stores a machine state on the server\n        LOAD:       \"load\"      // loads a machine state from the server\n    },\n    RES: {\n        CODE:       \"code\",\n        DATA:       \"data\"\n    },\n    CODE: {\n        OK:         \"ok\",\n        FAIL:       \"error\"\n    },\n    FAIL: {\n        DUPLICATE:  \"user already exists\",\n        VERIFY:     \"unable to verify user\",\n        BADSTATE:   \"invalid state parameter\",\n        NOSTATE:    \"no machine state\",\n        BADLOAD:    \"unable to load machine state\",\n        BADSTORE:   \"unable to save machine state\"\n    }\n};\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/keys.js (C) Jeff Parsons 2012-2018\n */\n\nvar Keys = {\n    /*\n     * Keys and/or key combinations that generate common ASCII codes.\n     *\n     * NOTE: If you're looking for a general-purpose ASCII code table, see Str.ASCII in strlib.js;\n     * if something's missing, that's probably the more appropriate table to add it to.\n     *\n     * TODO: The Closure Compiler doesn't inline all references to these values, at least those with\n     * quoted property names, which is why I've 'unquoted' as many of them as possible.  One solution\n     * would be to add mnemonics for all of them, not just the non-printable ones (eg, SPACE instead\n     * of ' ', AMP instead of '&', etc.)\n     */\n    ASCII: {\n          BREAK:  0, CTRL_A:  1, CTRL_B:  2, CTRL_C:  3, CTRL_D:  4, CTRL_E:  5, CTRL_F:  6, CTRL_G:  7,\n         CTRL_H:  8, CTRL_I:  9, CTRL_J: 10, CTRL_K: 11, CTRL_L: 12, CTRL_M: 13, CTRL_N: 14, CTRL_O: 15,\n         CTRL_P: 16, CTRL_Q: 17, CTRL_R: 18, CTRL_S: 19, CTRL_T: 20, CTRL_U: 21, CTRL_V: 22, CTRL_W: 23,\n         CTRL_X: 24, CTRL_Y: 25, CTRL_Z: 26, ESC:    27,\n            ' ': 32,    '!': 33,    '\"': 34,    '#': 35,    '$': 36,    '%': 37,    '&': 38,    \"'\": 39,\n            '(': 40,    ')': 41,    '*': 42,    '+': 43,    ',': 44,    '-': 45,    '.': 46,    '/': 47,\n            '0': 48,    '1': 49,    '2': 50,    '3': 51,    '4': 52,    '5': 53,    '6': 54,    '7': 55,\n            '8': 56,    '9': 57,    ':': 58,    ';': 59,    '<': 60,    '=': 61,    '>': 62,    '?': 63,\n            '@': 64,     A:  65,     B:  66,     C:  67,     D:  68,     E:  69,     F:  70,     G:  71,\n             H:  72,     I:  73,     J:  74,     K:  75,     L:  76,     M:  77,     N:  78,     O:  79,\n             P:  80,     Q:  81,     R:  82,     S:  83,     T:  84,     U:  85,     V:  86,     W:  87,\n             X:  88,     Y:  89,     Z:  90,    '[': 91,    '\\\\':92,    ']': 93,    '^': 94,    '_': 95,\n            '`': 96,     a:  97,     b:  98,     c:  99,     d: 100,     e: 101,     f: 102,     g: 103,\n             h:  104,    i: 105,     j: 106,     k: 107,     l: 108,     m: 109,     n: 110,     o: 111,\n             p:  112,    q: 113,     r: 114,     s: 115,     t: 116,     u: 117,     v: 118,     w: 119,\n             x:  120,    y: 121,     z: 122,    '{':123,    '|':124,    '}':125,    '~':126,   DEL: 127\n    },\n    /*\n     * Browser keyCodes we must pay particular attention to.  For the most part, these are non-alphanumeric\n     * or function keys, some which may require special treatment (eg, preventDefault() if returning false on\n     * the initial keyDown event is insufficient).\n     *\n     * keyCodes for most common ASCII keys can simply use the appropriate ASCII code above.\n     *\n     * Most of these represent non-ASCII keys (eg, the LEFT arrow key), yet for some reason, browsers defined\n     * them using ASCII codes (eg, the LEFT arrow key uses the ASCII code for '%' or 37).\n     */\n    KEYCODE: {\n        /* 0x08 */ BS:          8,          // BACKSPACE        (ASCII.CTRL_H)\n        /* 0x09 */ TAB:         9,          // TAB              (ASCII.CTRL_I)\n        /* 0x0A */ LF:          10,         // LINE-FEED        (ASCII.CTRL_J) (Some Windows-based browsers used to generate this via CTRL-ENTER)\n        /* 0x0D */ CR:          13,         // CARRIAGE RETURN  (ASCII.CTRL_M)\n        /* 0x10 */ SHIFT:       16,\n        /* 0x11 */ CTRL:        17,\n        /* 0x12 */ ALT:         18,\n        /* 0x13 */ PAUSE:       19,         // PAUSE/BREAK\n        /* 0x14 */ CAPS_LOCK:   20,\n        /* 0x1B */ ESC:         27,\n        /* 0x20 */ SPACE:       32,\n        /* 0x21 */ PGUP:        33,\n        /* 0x22 */ PGDN:        34,\n        /* 0x23 */ END:         35,\n        /* 0x24 */ HOME:        36,\n        /* 0x25 */ LEFT:        37,\n        /* 0x26 */ UP:          38,\n        /* 0x27 */ RIGHT:       39,\n        /* 0x27 */ FF_QUOTE:    39,\n        /* 0x28 */ DOWN:        40,\n        /* 0x2C */ FF_COMMA:    44,\n        /* 0x2C */ PRTSC:       44,\n        /* 0x2D */ INS:         45,\n        /* 0x2E */ DEL:         46,\n        /* 0x2E */ FF_PERIOD:   46,\n        /* 0x2F */ FF_SLASH:    47,\n        /* 0x30 */ ZERO:        48,\n        /* 0x31 */ ONE:         49,\n        /* 0x32 */ TWO:         50,\n        /* 0x33 */ THREE:       51,\n        /* 0x34 */ FOUR:        52,\n        /* 0x35 */ FIVE:        53,\n        /* 0x36 */ SIX:         54,\n        /* 0x37 */ SEVEN:       55,\n        /* 0x38 */ EIGHT:       56,\n        /* 0x39 */ NINE:        57,\n        /* 0x3B */ FF_SEMI:     59,\n        /* 0x3D */ FF_EQUALS:   61,\n        /* 0x5B */ CMD:         91,         // aka WIN\n        /* 0x5B */ FF_LBRACK:   91,\n        /* 0x5C */ FF_BSLASH:   92,\n        /* 0x5D */ RCMD:        93,         // aka MENU\n        /* 0x5D */ FF_RBRACK:   93,\n        /* 0x60 */ NUM_0:       96,\n        /* 0x60 */ NUM_INS:     96,\n        /* 0x60 */ FF_BQUOTE:   96,\n        /* 0x61 */ NUM_1:       97,\n        /* 0x61 */ NUM_END:     97,\n        /* 0x62 */ NUM_2:       98,\n        /* 0x62 */ NUM_DOWN:    98,\n        /* 0x63 */ NUM_3:       99,\n        /* 0x63 */ NUM_PGDN:    99,\n        /* 0x64 */ NUM_4:       100,\n        /* 0x64 */ NUM_LEFT:    100,\n        /* 0x65 */ NUM_5:       101,\n        /* 0x65 */ NUM_CENTER:  101,\n        /* 0x66 */ NUM_6:       102,\n        /* 0x66 */ NUM_RIGHT:   102,\n        /* 0x67 */ NUM_7:       103,\n        /* 0x67 */ NUM_HOME:    103,\n        /* 0x68 */ NUM_8:       104,\n        /* 0x68 */ NUM_UP:      104,\n        /* 0x69 */ NUM_9:       105,\n        /* 0x69 */ NUM_PGUP:    105,\n        /* 0x6A */ NUM_MUL:     106,\n        /* 0x6B */ NUM_ADD:     107,\n        /* 0x6D */ NUM_SUB:     109,\n        /* 0x6E */ NUM_DEL:     110,        // aka PERIOD\n        /* 0x6F */ NUM_DIV:     111,\n        /* 0x70 */ F1:          112,\n        /* 0x71 */ F2:          113,\n        /* 0x72 */ F3:          114,\n        /* 0x73 */ F4:          115,\n        /* 0x74 */ F5:          116,\n        /* 0x75 */ F6:          117,\n        /* 0x76 */ F7:          118,\n        /* 0x77 */ F8:          119,\n        /* 0x78 */ F9:          120,\n        /* 0x79 */ F10:         121,\n        /* 0x7A */ F11:         122,\n        /* 0x7B */ F12:         123,\n        /* 0x90 */ NUM_LOCK:    144,\n        /* 0x91 */ SCROLL_LOCK: 145,\n        /* 0xAD */ FF_DASH:     173,\n        /* 0xBA */ SEMI:        186,        // Firefox:  59 (FF_SEMI)\n        /* 0xBB */ EQUALS:      187,        // Firefox:  61 (FF_EQUALS)\n        /* 0xBC */ COMMA:       188,\n        /* 0xBD */ DASH:        189,        // Firefox: 173 (FF_DASH)\n        /* 0xBE */ PERIOD:      190,\n        /* 0xBF */ SLASH:       191,\n        /* 0xC0 */ BQUOTE:      192,\n        /* 0xDB */ LBRACK:      219,\n        /* 0xDC */ BSLASH:      220,\n        /* 0xDD */ RBRACK:      221,\n        /* 0xDE */ QUOTE:       222,\n        /* 0xE0 */ FF_CMD:      224,        // Firefox only (used for both CMD and RCMD)\n        //\n        // The following biases use what I'll call Decimal Coded Binary or DCB (the opposite of BCD),\n        // where the thousands digit is used to store the sum of \"binary\" digits 1 and/or 2 and/or 4.\n        //\n        // Technically, that makes it DCO (Decimal Coded Octal), but then again, BCD should have really\n        // been called HCD (Hexadecimal Coded Decimal), so if \"they\" can take liberties, so can I.\n        //\n        // ONDOWN is a bias we add to browser keyCodes that we want to handle on \"down\" rather than on \"press\".\n        //\n        ONDOWN:                 1000,\n        //\n        // ONRIGHT is a bias we add to browser keyCodes that need to check for a \"right\" location (default is \"left\")\n        //\n        ONRIGHT:                2000,\n        //\n        // FAKE is a bias we add to signal these are fake keyCodes corresponding to internal keystroke combinations.\n        // The actual values are for internal use only and merely need to be unique and used consistently.\n        //\n        FAKE:                   4000\n    },\n    /*\n     * The set of values that a browser may store in the 'location' property of a keyboard event object\n     * which we also support.\n     */\n    LOCATION: {\n        LEFT:                   1,\n        RIGHT:                  2,\n        NUMPAD:                 3\n    }\n};\n\n/*\n * Check the event object's 'location' property for a non-zero value for the following ONRIGHT keys.\n */\nKeys.KEYCODE.NUM_CR = Keys.KEYCODE.CR + Keys.KEYCODE.ONRIGHT;\n\n\n/*\n * Maps Firefox keyCodes to their more common keyCode counterparts; a number of entries in this table\n * are no longer valid (if indeed they ever were), so they've been commented out.  It's likely that I\n * simply extended this table to resolve additional differences in other browsers (ie, Opera), but without\n * browser-specific checks, it's not safe to perform all the mappings shown below.\n */\nKeys.FF_KEYCODES = {};\nKeys.FF_KEYCODES[Keys.KEYCODE.FF_SEMI]   = Keys.KEYCODE.SEMI;           //  59 -> 186\nKeys.FF_KEYCODES[Keys.KEYCODE.FF_EQUALS] = Keys.KEYCODE.EQUALS;         //  61 -> 187\nKeys.FF_KEYCODES[Keys.KEYCODE.FF_DASH]   = Keys.KEYCODE.DASH;           // 173 -> 189\nKeys.FF_KEYCODES[Keys.KEYCODE.FF_CMD]    = Keys.KEYCODE.CMD;            // 224 -> 91\n// Keys.FF_KEYCODES[Keys.KEYCODE.FF_COMMA]  = Keys.KEYCODE.COMMA;       //  44 -> 188\n// Keys.FF_KEYCODES[Keys.KEYCODE.FF_PERIOD] = Keys.KEYCODE.PERIOD;      //  46 -> 190\n// Keys.FF_KEYCODES[Keys.KEYCODE.FF_SLASH]  = Keys.KEYCODE.SLASH;       //  47 -> 191\n// Keys.FF_KEYCODES[Keys.KEYCODE.FF_BQUOTE] = Keys.KEYCODE.BQUOTE;      //  96 -> 192\n// Keys.FF_KEYCODES[Keys.KEYCODE.FF_LBRACK  = Keys.KEYCODE.LBRACK;      //  91 -> 219\n// Keys.FF_KEYCODES[Keys.KEYCODE.FF_BSLASH] = Keys.KEYCODE.BSLASH;      //  92 -> 220\n// Keys.FF_KEYCODES[Keys.KEYCODE.FF_RBRACK] = Keys.KEYCODE.RBRACK;      //  93 -> 221\n// Keys.FF_KEYCODES[Keys.KEYCODE.FF_QUOTE]  = Keys.KEYCODE.QUOTE;       //  39 -> 222\n\n/*\n * Maps non-ASCII keyCodes to their ASCII counterparts\n */\nKeys.NONASCII_KEYCODES = {};\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.FF_DASH] = Keys.ASCII['-'];         // 173 -> 45\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.SEMI]    = Keys.ASCII[';'];         // 186 -> 59\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.EQUALS]  = Keys.ASCII['='];         // 187 -> 61\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.DASH]    = Keys.ASCII['-'];         // 189 -> 45\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.COMMA]   = Keys.ASCII[','];         // 188 -> 44\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.PERIOD]  = Keys.ASCII['.'];         // 190 -> 46\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.SLASH]   = Keys.ASCII['/'];         // 191 -> 47\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.BQUOTE]  = Keys.ASCII['`'];         // 192 -> 96\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.LBRACK]  = Keys.ASCII['['];         // 219 -> 91\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.BSLASH]  = Keys.ASCII['\\\\'];        // 220 -> 92\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.RBRACK]  = Keys.ASCII[']'];         // 221 -> 93\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.QUOTE]   = Keys.ASCII[\"'\"];         // 222 -> 39\n\n/*\n * Maps unshifted keyCodes to their shifted counterparts; to be used when a shift-key is down.\n * Alphabetic characters are handled in code, since they must also take CAPS_LOCK into consideration.\n */\nKeys.SHIFTED_KEYCODES = {};\nKeys.SHIFTED_KEYCODES[Keys.ASCII['1']]     = Keys.ASCII['!'];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['2']]     = Keys.ASCII['@'];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['3']]     = Keys.ASCII['#'];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['4']]     = Keys.ASCII['$'];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['5']]     = Keys.ASCII['%'];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['6']]     = Keys.ASCII['^'];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['7']]     = Keys.ASCII['&'];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['8']]     = Keys.ASCII['*'];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['9']]     = Keys.ASCII['('];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['0']]     = Keys.ASCII[')'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.SEMI]   = Keys.ASCII[':'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.EQUALS] = Keys.ASCII['+'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.COMMA]  = Keys.ASCII['<'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.DASH]   = Keys.ASCII['_'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.PERIOD] = Keys.ASCII['>'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.SLASH]  = Keys.ASCII['?'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.BQUOTE] = Keys.ASCII['~'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.LBRACK] = Keys.ASCII['{'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.BSLASH] = Keys.ASCII['|'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.RBRACK] = Keys.ASCII['}'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.QUOTE]  = Keys.ASCII['\"'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.FF_DASH]   = Keys.ASCII['_'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.FF_EQUALS] = Keys.ASCII['+'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.FF_SEMI]   = Keys.ASCII[':'];\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/strlib.js (C) Jeff Parsons 2012-2018\n */\n\nclass Str {\n    /**\n     * isValidInt(s, base)\n     *\n     * The built-in parseInt() function has the annoying feature of returning a partial value (ie,\n     * up to the point where it encounters an invalid character); eg, parseInt(\"foo\", 16) returns 0xf.\n     *\n     * So it's best to use our own Str.parseInt() function, which will in turn use this function to\n     * validate the entire string.\n     *\n     * @param {string} s is the string representation of some number\n     * @param {number} [base] is the radix to use (default is 10); only 2, 8, 10 and 16 are supported\n     * @return {boolean} true if valid, false if invalid (or the specified base isn't supported)\n     */\n    static isValidInt(s, base)\n    {\n        if (!base || base == 10) return s.match(/^-?[0-9]+$/) !== null;\n        if (base == 16) return s.match(/^-?[0-9a-f]+$/i) !== null;\n        if (base == 8) return s.match(/^-?[0-7]+$/) !== null;\n        if (base == 2) return s.match(/^-?[01]+$/) !== null;\n        return false;\n    }\n\n    /**\n     * parseInt(s, base)\n     *\n     * This is a wrapper around the built-in parseInt() function.  Our wrapper recognizes certain prefixes\n     * ('$' or \"0x\" for hex, '#' or \"0o\" for octal) and suffixes ('.' for decimal, 'h' for hex, 'y' for\n     * binary), and then calls isValidInt() to ensure we don't convert strings that contain partial values;\n     * see isValidInt() for details.\n     *\n     * The use of multiple prefix/suffix combinations is undefined (although for the record, we process\n     * prefixes first).  We do NOT support the \"0b\" prefix to indicate binary UNLESS one or more commas are\n     * also present (because \"0b\" is also a valid hex sequence), and we do NOT support a single leading zero\n     * to indicate octal (because such a number could also be decimal or hex).  Any number of commas are\n     * allowed; we remove them all before calling the built-in parseInt().\n     *\n     * More recently, we've added support for \"^D\", \"^O\", and \"^B\" prefixes to accommodate the base overrides\n     * that the PDP-10's MACRO-10 assembly language supports (decimal, octal, and binary, respectively).\n     * If this support turns out to adversely affect other debuggers, then it will have to be \"conditionalized\".\n     * Similarly, we've added support for \"K\", \"M\", and \"G\" MACRO-10-style suffixes that add 3, 6, or 9 zeros\n     * to the value to be parsed, respectively.\n     *\n     * @param {string} s is the string representation of some number\n     * @param {number} [base] is the radix to use (default is 10); can be overridden by prefixes/suffixes\n     * @return {number|undefined} corresponding value, or undefined if invalid\n     */\n    static parseInt(s, base)\n    {\n        var value;\n\n        if (s) {\n            if (!base) base = 10;\n\n            var ch, chPrefix, chSuffix;\n            var fCommas = (s.indexOf(',') > 0);\n            if (fCommas) s = s.replace(/,/g, '');\n\n            ch = chPrefix = s.charAt(0);\n            if (chPrefix == '#') {\n                base = 8;\n                chPrefix = '';\n            }\n            else if (chPrefix == '$') {\n                base = 16;\n                chPrefix = '';\n            }\n            if (ch != chPrefix) {\n                s = s.substr(1);\n            }\n            else {\n                ch = chPrefix = s.substr(0, 2);\n                if (chPrefix == '0b' && fCommas || chPrefix == '^B') {\n                    base = 2;\n                    chPrefix = '';\n                }\n                else if (chPrefix == '0o' || chPrefix == '^O') {\n                    base = 8;\n                    chPrefix = '';\n                }\n                else if (chPrefix == '^D') {\n                    base = 10;\n                    chPrefix = '';\n                }\n                else if (chPrefix == '0x') {\n                    base = 16;\n                    chPrefix = '';\n                }\n                if (ch != chPrefix) s = s.substr(2);\n            }\n            ch = chSuffix = s.slice(-1);\n            if (chSuffix == 'Y' || chSuffix == 'y') {\n                base = 2;\n                chSuffix = '';\n            }\n            else if (chSuffix == '.') {\n                base = 10;\n                chSuffix = '';\n            }\n            else if (chSuffix == 'H' || chSuffix == 'h') {\n                base = 16;\n                chSuffix = '';\n            }\n            else if (chSuffix == 'K') {\n                chSuffix = '000';\n            }\n            else if (chSuffix == 'M') {\n                chSuffix = '000000';\n            }\n            else if (chSuffix == 'G') {\n                chSuffix = '000000000';\n            }\n            if (ch != chSuffix) s = s.slice(0, -1) + chSuffix;\n            /*\n             * This adds support for the MACRO-10 binary shifting (Bn) suffix, which must be stripped from the\n             * number before parsing, and then applied to the value after parsing.  If n is omitted, 35 is assumed,\n             * which is a net shift of zero.  If n < 35, then a left shift of (35 - n) is required; if n > 35, then\n             * a right shift of -(35 - n) is required.\n             */\n            var v, shift = 0;\n            if (base <= 10) {\n                var match = s.match(/(-?[0-9]+)B([0-9]*)/);\n                if (match) {\n                    s = match[1];\n                    shift = 35 - ((match[2] || 35) & 0xff);\n                }\n            }\n            if (Str.isValidInt(s, base) && !isNaN(v = parseInt(s, base))) {\n                /*\n                 * With the need to support larger (eg, 36-bit) integers, truncating to 32 bits is no longer helpful.\n                 *\n                 *      value = v|0;\n                 */\n                if (shift) {\n                    /*\n                     * Since binary shifting is a logical operation, and since shifting by division only works properly\n                     * with positive numbers, we must convert a negative value to a positive value, by computing the two's\n                     * complement.\n                     */\n                    if (v < 0) v += Math.pow(2, 36);\n                    if (shift > 0) {\n                        v *= Math.pow(2, shift);\n                    } else {\n                        v = Math.trunc(v / Math.pow(2, -shift));\n                    }\n                }\n                value = v;\n            }\n        }\n        return value;\n    }\n\n    /**\n     * toBase(n, radix, cch, sPrefix, nGrouping)\n     *\n     * Displays the given number as an unsigned integer using the specified radix and number of digits.\n     *\n     * @param {number|null|undefined} n\n     * @param {number} radix (ie, the base)\n     * @param {number} cch (the desired number of digits)\n     * @param {string} [sPrefix] (default is none)\n     * @param {number} [nGrouping]\n     * @return {string}\n     */\n    static toBase(n, radix, cch, sPrefix = \"\", nGrouping = 0)\n    {\n        /*\n         * An initial \"falsey\" check for null takes care of both null and undefined;\n         * we can't rely entirely on isNaN(), because isNaN(null) returns false, oddly enough.\n         *\n         * Alternatively, we could mask and shift n regardless of whether it's null/undefined/NaN,\n         * since JavaScript coerces such operands to zero, but I think there's \"value\" in seeing those\n         * values displayed differently.\n         */\n        var s = \"\";\n        if (isNaN(n)) {\n            n = null;\n        } else if (n != null) {\n            /*\n             * Callers that produced an input by dividing by a power of two rather than shifting (in order\n             * to access more than 32 bits) may produce a fractional result, which ordinarily we would simply\n             * ignore, but if the integer portion is zero and the sign is negative, we should probably treat\n             * this value as a sign-extension.\n             */\n            if (n < 0 && n > -1) n = -1;\n            /*\n             * Negative values should be two's complemented according to the number of digits; for example,\n             * 12 octal digits implies an upper limit 8^12.\n             */\n            if (n < 0) {\n                n += Math.pow(radix, cch);\n            }\n            if (n >= Math.pow(radix, cch)) {\n                cch = Math.ceil(Math.log(n) / Math.log(radix));\n            }\n        }\n        var g = nGrouping || -1;\n        while (cch-- > 0) {\n            if (!g) {\n                s = ',' + s;\n                g = nGrouping;\n            }\n            if (n == null) {\n                s = '?' + s;\n            } else {\n                var d = n % radix;\n                d += (d >= 0 && d <= 9? 0x30 : 0x41 - 10);\n                s = String.fromCharCode(d) + s;\n                n = Math.trunc(n / radix);\n            }\n            g--;\n        }\n        return sPrefix + s;\n    }\n\n    /**\n     * toBin(n, cch, nGrouping)\n     *\n     * Converts an integer to binary, with the specified number of digits (up to a maximum of 36).\n     *\n     * @param {number|null|undefined} n (supports integers up to 36 bits now)\n     * @param {number} [cch] is the desired number of binary digits (0 or undefined for default of either 8, 18, or 36)\n     * @param {number} [nGrouping]\n     * @return {string} the binary representation of n\n     */\n    static toBin(n, cch, nGrouping)\n    {\n        if (!cch) {\n            // cch = Math.ceil(Math.log(Math.abs(n) + 1) / Math.LN2) || 1;\n            var v = Math.abs(n);\n            if (v <= 0b11111111) {\n                cch = 8;\n            } else if (v <= 0b111111111111111111) {\n                cch = 18;\n            } else {\n                cch = 36;\n            }\n        } else if (cch > 36) cch = 36;\n        return Str.toBase(n, 2, cch, \"\", nGrouping);\n    }\n\n    /**\n     * toBinBytes(n, cb, fPrefix)\n     *\n     * Converts an integer to binary, with the specified number of bytes (up to the default of 4).\n     *\n     * @param {number|null|undefined} n (interpreted as a 32-bit value)\n     * @param {number} [cb] is the desired number of binary bytes (4 is both the default and the maximum)\n     * @param {boolean} [fPrefix]\n     * @return {string} the binary representation of n\n     */\n    static toBinBytes(n, cb, fPrefix)\n    {\n        var s = \"\";\n        if (!cb || cb > 4) cb = 4;\n        for (var i = 0; i < cb; i++) {\n            if (s) s = ',' + s;\n            s = Str.toBin(n & 0xff, 8) + s;\n            n >>= 8;\n        }\n        return (fPrefix? \"0b\" : \"\") + s;\n    }\n\n    /**\n     * toOct(n, cch, fPrefix)\n     *\n     * Converts an integer to octal, with the specified number of digits (default of 6; max of 12)\n     *\n     * You might be tempted to use the built-in n.toString(8) instead, but it doesn't zero-pad and it\n     * doesn't properly convert negative values.  Moreover, if n is undefined, n.toString() will throw\n     * an exception, whereas this function will return '?' characters.\n     *\n     * @param {number|null|undefined} n (supports integers up to 36 bits now)\n     * @param {number} [cch] is the desired number of octal digits (0 or undefined for default of either 6, 8, or 12)\n     * @param {boolean} [fPrefix]\n     * @return {string} the octal representation of n\n     */\n    static toOct(n, cch, fPrefix)\n    {\n        if (!cch) {\n            // cch = Math.ceil(Math.log(Math.abs(n) + 1) / Math.log(8)) || 1;\n            var v = Math.abs(n);\n            if (v <= 0o777777) {\n                cch = 6;\n            } else if (v <= 0o77777777) {\n                cch = 8;\n            } else {\n                cch = 12;\n            }\n        } else if (cch > 12) cch = 12;\n        return Str.toBase(n, 8, cch, fPrefix? \"0o\" : \"\");\n    }\n\n    /**\n     * toDec(n, cch)\n     *\n     * Converts an integer to decimal, with the specified number of digits (default of 5; max of 11)\n     *\n     * You might be tempted to use the built-in n.toString(10) instead, but it doesn't zero-pad and it\n     * doesn't properly convert negative values.  Moreover, if n is undefined, n.toString() will throw\n     * an exception, whereas this function will return '?' characters.\n     *\n     * @param {number|null|undefined} n (supports integers up to 36 bits now)\n     * @param {number} [cch] is the desired number of decimal digits (0 or undefined for default of either 5 or 11)\n     * @return {string} the decimal representation of n\n     */\n    static toDec(n, cch)\n    {\n        if (!cch) {\n            // cch = Math.ceil(Math.log(Math.abs(n) + 1) / Math.LN10) || 1;\n            var v = Math.abs(n);\n            if (v <= 99999) {\n                cch = 5;\n            } else {\n                cch = 11;\n            }\n        } else if (cch > 11) cch = 11;\n        return Str.toBase(n, 10, cch);\n    }\n\n    /**\n     * toHex(n, cch, fPrefix)\n     *\n     * Converts an integer to hex, with the specified number of digits (default of 4 or 8, max of 9).\n     *\n     * You might be tempted to use the built-in n.toString(16) instead, but it doesn't zero-pad and it\n     * doesn't properly convert negative values; for example, if n is -2147483647, then n.toString(16)\n     * will return \"-7fffffff\" instead of \"80000001\".  Moreover, if n is undefined, n.toString() will\n     * throw an exception, whereas this function will return '?' characters.\n     *\n     * NOTE: The following work-around (adapted from code found on StackOverflow) would be another solution,\n     * taking care of negative values, zero-padding, and upper-casing, but not null/undefined/NaN values:\n     *\n     *      s = (n < 0? n + 0x100000000 : n).toString(16);\n     *      s = \"00000000\".substr(0, 8 - s.length) + s;\n     *      s = s.substr(0, cch).toUpperCase();\n     *\n     * @param {number|null|undefined} n (supports integers up to 36 bits now)\n     * @param {number} [cch] is the desired number of hex digits (0 or undefined for default of either 4, 8, or 9)\n     * @param {boolean} [fPrefix]\n     * @return {string} the hex representation of n\n     */\n    static toHex(n, cch, fPrefix)\n    {\n        if (!cch) {\n            // cch = Math.ceil(Math.log(Math.abs(n) + 1) / Math.log(16)) || 1;\n            var v = Math.abs(n);\n            if (v <= 0xffff) {\n                cch = 4;\n            } else if (v <= 0xffffffff) {\n                cch = 8;\n            } else {\n                cch = 9;\n            }\n        } else if (cch > 9) cch = 9;\n        return Str.toBase(n, 16, cch, fPrefix? \"0x\" : \"\");\n    }\n\n    /**\n     * toHexByte(b)\n     *\n     * Alias for Str.toHex(b, 2, true)\n     *\n     * @param {number|null|undefined} b is a byte value\n     * @return {string} the hex representation of b\n     */\n    static toHexByte(b)\n    {\n        return Str.toHex(b, 2, true);\n    }\n\n    /**\n     * toHexWord(w)\n     *\n     * Alias for Str.toHex(w, 4, true)\n     *\n     * @param {number|null|undefined} w is a word (16-bit) value\n     * @return {string} the hex representation of w\n     */\n    static toHexWord(w)\n    {\n        return Str.toHex(w, 4, true);\n    }\n\n    /**\n     * toHexLong(l)\n     *\n     * Alias for Str.toHex(l, 8, true)\n     *\n     * @param {number|null|undefined} l is a dword (32-bit) value\n     * @return {string} the hex representation of w\n     */\n    static toHexLong(l)\n    {\n        return Str.toHex(l, 8, true);\n    }\n\n    /**\n     * getBaseName(sFileName, fStripExt)\n     *\n     * This is a poor-man's version of Node's path.basename(), which Node-only components should use instead.\n     *\n     * Note that if fStripExt is true, this strips ANY extension, whereas path.basename() strips the extension only\n     * if it matches the second parameter (eg, path.basename(\"/foo/bar/baz/asdf/quux.html\", \".html\") returns \"quux\").\n     *\n     * @param {string} sFileName\n     * @param {boolean} [fStripExt]\n     * @return {string}\n     */\n    static getBaseName(sFileName, fStripExt)\n    {\n        var sBaseName = sFileName;\n\n        var i = sFileName.lastIndexOf('/');\n        if (i >= 0) sBaseName = sFileName.substr(i + 1);\n\n        /*\n         * This next bit is a kludge to clean up names that are part of a URL that includes unsightly query parameters.\n         */\n        i = sBaseName.indexOf('&');\n        if (i > 0) sBaseName = sBaseName.substr(0, i);\n\n        if (fStripExt) {\n            i = sBaseName.lastIndexOf(\".\");\n            if (i > 0) {\n                sBaseName = sBaseName.substring(0, i);\n            }\n        }\n        return sBaseName;\n    }\n\n    /**\n     * getExtension(sFileName)\n     *\n     * This is a poor-man's version of Node's path.extname(), which Node-only components should use instead.\n     *\n     * Note that we EXCLUDE the period from the returned extension, whereas path.extname() includes it.\n     *\n     * @param {string} sFileName\n     * @return {string} the filename's extension (in lower-case and EXCLUDING the \".\"), or an empty string\n     */\n    static getExtension(sFileName)\n    {\n        var sExtension = \"\";\n        var i = sFileName.lastIndexOf(\".\");\n        if (i >= 0) {\n            sExtension = sFileName.substr(i + 1).toLowerCase();\n        }\n        return sExtension;\n    }\n\n    /**\n     * endsWith(s, sSuffix)\n     *\n     * @param {string} s\n     * @param {string} sSuffix\n     * @return {boolean} true if s ends with sSuffix, false if not\n     */\n    static endsWith(s, sSuffix)\n    {\n        return s.indexOf(sSuffix, s.length - sSuffix.length) !== -1;\n    }\n\n    /**\n     * escapeHTML(sHTML)\n     *\n     * @param {string} sHTML\n     * @return {string} with HTML entities \"escaped\", similar to PHP's htmlspecialchars()\n     */\n    static escapeHTML(sHTML)\n    {\n        return sHTML.replace(/[&<>\"']/g, function(m)\n        {\n            return Str.HTMLEscapeMap[m];\n        });\n    }\n\n    /**\n     * replace(sSearch, sReplace, s)\n     *\n     * The JavaScript replace() function ALWAYS interprets \"$\" specially in replacement strings, even when\n     * the search string is NOT a RegExp; specifically:\n     *\n     *      $$  Inserts a \"$\"\n     *      $&  Inserts the matched substring\n     *      $`  Inserts the portion of the string that precedes the matched substring\n     *      $'  Inserts the portion of the string that follows the matched substring\n     *      $n  Where n is a positive integer less than 100, inserts the nth parenthesized sub-match string,\n     *          provided the first argument was a RegExp object\n     *\n     * So, if a replacement string containing dollar signs passes through a series of replace() calls, untold\n     * problems could result.  Hence, this function, which simply uses the replacement string as-is.\n     *\n     * Similar to the JavaScript replace() method (when sSearch is a string), this replaces only ONE occurrence\n     * (ie, the FIRST occurrence); it might be nice to add options to replace the LAST occurrence and/or ALL\n     * occurrences, but we'll revisit that later.\n     *\n     * @param {string} sSearch\n     * @param {string} sReplace\n     * @param {string} s\n     * @return {string}\n     */\n    static replace(sSearch, sReplace, s)\n    {\n        var i = s.indexOf(sSearch);\n        if (i >= 0) {\n            s = s.substr(0, i) + sReplace + s.substr(i + sSearch.length);\n        }\n        return s;\n    }\n\n    /**\n     * replaceAll(sSearch, sReplace, s)\n     *\n     * @param {string} sSearch\n     * @param {string} sReplace\n     * @param {string} s\n     * @return {string}\n     */\n    static replaceAll(sSearch, sReplace, s)\n    {\n        var a = {};\n        a[sSearch] = sReplace;\n        return Str.replaceArray(a, s);\n    }\n\n    /**\n     * replaceArray(a, s)\n     *\n     * @param {Object} a\n     * @param {string} s\n     * @return {string}\n     */\n    static replaceArray(a, s)\n    {\n        var sMatch = \"\";\n        for (var k in a) {\n            /*\n             * As noted in:\n             *\n             *      http://www.regexguru.com/2008/04/escape-characters-only-when-necessary/\n             *\n             * inside character classes, only backslash, caret, hyphen and the closing bracket need to be\n             * escaped.  And in fact, if you ensure that the closing bracket is first, the caret is not first,\n             * and the hyphen is last, you can avoid escaping those as well.\n             */\n            k = k.replace(/([\\\\[\\]*{}().+?|$])/g, \"\\\\$1\");\n            sMatch += (sMatch? '|' : '') + k;\n        }\n        return s.replace(new RegExp('(' + sMatch + ')', \"g\"), function(m)\n        {\n            return a[m];\n        });\n    }\n\n    /**\n     * pad(s, cch, fPadLeft)\n     *\n     * NOTE: the maximum amount of padding currently supported is 40 spaces.\n     *\n     * @param {string} s is a string\n     * @param {number} cch is desired length\n     * @param {boolean} [fPadLeft] (default is padding on the right)\n     * @return {string} the original string (s) with spaces padding it to the specified length\n     */\n    static pad(s, cch, fPadLeft)\n    {\n        var sPadding = \"                                        \";\n        return fPadLeft? (sPadding + s).slice(-cch) : (s + sPadding).slice(0, cch);\n    }\n\n    /**\n     * sprintf(format, ...args)\n     *\n     * Copied from the CCjs project (/ccjs/lib/stdio.js) and extended.  Far from complete let alone sprintf-compatible,\n     * but it's a start.\n     *\n     * @param {string} format\n     * @param {...} args\n     * @return {string}\n     */\n    static sprintf(format, ...args)\n    {\n        var parts = format.split(/%([-+ 0#]?)([0-9]*)(\\.?)([0-9]*)([hlL]?)([A-Za-z%])/);\n        var buffer = \"\";\n        var partIndex = 0;\n        for (var i = 0; i < args.length; i++) {\n\n            var arg = args[i], d, s;\n            buffer += parts[partIndex++];\n            var flags = parts[partIndex];\n            var minimum = +parts[partIndex+1] || 0;\n            var precision = +parts[partIndex+3] || 0;\n            var conversion = parts[partIndex+5];\n\n            switch(conversion) {\n            case 'd':\n            case 'f':\n                d = Math.trunc(arg);\n                s = d + \"\";\n                if (precision) {\n                    minimum -= (precision + 1);\n                }\n                if (s.length < minimum) {\n                    if (flags == '0') {\n                        if (d < 0) minimum--;\n                        s = (\"0000000000\" + Math.abs(d)).slice(-minimum);\n                        if (d < 0) s = '-' + s;\n                    } else {\n                        s = (\"          \" + s).slice(-minimum);\n                    }\n                }\n                if (precision) {\n                    d = Math.trunc((arg - Math.trunc(arg)) * Math.pow(10, precision));\n                    s += '.' + (\"0000000000\" + Math.abs(d)).slice(-precision);\n                }\n                buffer += s;\n                break;\n            case 's':\n                buffer += arg;\n                break;\n            default:\n                /*\n                 * The supported ANSI C set of conversions: \"dioxXucsfeEgGpn%\"\n                 */\n                buffer += \"(unrecognized printf conversion %\" + conversion + \")\";\n                break;\n            }\n\n            partIndex += 6;\n        }\n        buffer += parts[partIndex];\n        return buffer;\n    }\n\n    /**\n     * stripLeadingZeros(s, fPad)\n     *\n     * @param {string} s\n     * @param {boolean} [fPad]\n     * @return {string}\n     */\n    static stripLeadingZeros(s, fPad)\n    {\n        var cch = s.length;\n        s = s.replace(/^0+([0-9A-F]+)$/i, \"$1\");\n        if (fPad) s = Str.pad(s, cch, true);\n        return s;\n    }\n\n    /**\n     * trim(s)\n     *\n     * @param {string} s\n     * @return {string}\n     */\n    static trim(s)\n    {\n        if (String.prototype.trim) {\n            return s.trim();\n        }\n        return s.replace(/^\\s+|\\s+$/g, \"\");\n    }\n\n    /**\n     * toASCIICode(b)\n     *\n     * @param {number} b\n     * @return {string}\n     */\n    static toASCIICode(b)\n    {\n        var s;\n        if (b != Str.ASCII.CR && b != Str.ASCII.LF) {\n            s = Str.ASCIICodeMap[b];\n        }\n        if (s) {\n            s = '<' + s + '>';\n        } else {\n            s = String.fromCharCode(b);\n        }\n        return s;\n    }\n}\n\n/*\n * Map special characters to their HTML escape sequences.\n */\nStr.HTMLEscapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#039;'\n};\n\n/*\n * Map \"unprintable\" ASCII codes to mnemonics, to more clearly see what's being printed.\n */\nStr.ASCIICodeMap = {\n    0x00:   \"NUL\",\n    0x01:   \"SOH\",      // (CTRL_A) Start of Heading\n    0x02:   \"STX\",      // (CTRL_B) Start of Text\n    0x03:   \"ETX\",      // (CTRL_C) End of Text\n    0x04:   \"EOT\",      // (CTRL_D) End of Transmission\n    0x05:   \"ENQ\",      // (CTRL_E) Enquiry\n    0x06:   \"ACK\",      // (CTRL_F) Acknowledge\n    0x07:   \"BEL\",      // (CTRL_G) Bell\n    0x08:   \"BS\",       // (CTRL_H) Backspace\n    0x09:   \"TAB\",      // (CTRL_I) Horizontal Tab (aka HT)\n    0x0A:   \"LF\",       // (CTRL_J) Line Feed (New Line)\n    0x0B:   \"VT\",       // (CTRL_K) Vertical Tab\n    0x0C:   \"FF\",       // (CTRL_L) Form Feed (New Page)\n    0x0D:   \"CR\",       // (CTRL_M) Carriage Return\n    0x0E:   \"SO\",       // (CTRL_N) Shift Out\n    0x0F:   \"SI\",       // (CTRL_O) Shift In\n    0x10:   \"DLE\",      // (CTRL_P) Data Link Escape\n    0x11:   \"XON\",      // (CTRL_Q) Device Control 1 (aka DC1)\n    0x12:   \"DC2\",      // (CTRL_R) Device Control 2\n    0x13:   \"XOFF\",     // (CTRL_S) Device Control 3 (aka DC3)\n    0x14:   \"DC4\",      // (CTRL_T) Device Control 4\n    0x15:   \"NAK\",      // (CTRL_U) Negative Acknowledge\n    0x16:   \"SYN\",      // (CTRL_V) Synchronous Idle\n    0x17:   \"ETB\",      // (CTRL_W) End of Transmission Block\n    0x18:   \"CAN\",      // (CTRL_X) Cancel\n    0x19:   \"EM\",       // (CTRL_Y) End of Medium\n    0x1A:   \"SUB\",      // (CTRL_Z) Substitute\n    0x1B:   \"ESC\",      // Escape\n    0x1C:   \"FS\",       // File Separator\n    0x1D:   \"GS\",       // Group Separator\n    0x1E:   \"RS\",       // Record Separator\n    0x1F:   \"US\",       // Unit Separator\n    0x7F:   \"DEL\"\n};\n\n/*\n * Refer to: https://en.wikipedia.org/wiki/Code_page_437\n */\nStr.CP437ToUnicode = [\n    '\\u0000', '\\u263A', '\\u263B', '\\u2665', '\\u2666', '\\u2663', '\\u2660', '\\u2022',\n    '\\u25D8', '\\u25CB', '\\u25D9', '\\u2642', '\\u2640', '\\u266A', '\\u266B', '\\u263C',\n    '\\u25BA', '\\u25C4', '\\u2195', '\\u203C', '\\u00B6', '\\u00A7', '\\u25AC', '\\u21A8',\n    '\\u2191', '\\u2193', '\\u2192', '\\u2190', '\\u221F', '\\u2194', '\\u25B2', '\\u25BC',\n    '\\u0020', '\\u0021', '\\u0022', '\\u0023', '\\u0024', '\\u0025', '\\u0026', '\\u0027',\n    '\\u0028', '\\u0029', '\\u002A', '\\u002B', '\\u002C', '\\u002D', '\\u002E', '\\u002F',\n    '\\u0030', '\\u0031', '\\u0032', '\\u0033', '\\u0034', '\\u0035', '\\u0036', '\\u0037',\n    '\\u0038', '\\u0039', '\\u003A', '\\u003B', '\\u003C', '\\u003D', '\\u003E', '\\u003F',\n    '\\u0040', '\\u0041', '\\u0042', '\\u0043', '\\u0044', '\\u0045', '\\u0046', '\\u0047',\n    '\\u0048', '\\u0049', '\\u004A', '\\u004B', '\\u004C', '\\u004D', '\\u004E', '\\u004F',\n    '\\u0050', '\\u0051', '\\u0052', '\\u0053', '\\u0054', '\\u0055', '\\u0056', '\\u0057',\n    '\\u0058', '\\u0059', '\\u005A', '\\u005B', '\\u005C', '\\u005D', '\\u005E', '\\u005F',\n    '\\u0060', '\\u0061', '\\u0062', '\\u0063', '\\u0064', '\\u0065', '\\u0066', '\\u0067',\n    '\\u0068', '\\u0069', '\\u006A', '\\u006B', '\\u006C', '\\u006D', '\\u006E', '\\u006F',\n    '\\u0070', '\\u0071', '\\u0072', '\\u0073', '\\u0074', '\\u0075', '\\u0076', '\\u0077',\n    '\\u0078', '\\u0079', '\\u007A', '\\u007B', '\\u007C', '\\u007D', '\\u007E', '\\u2302',\n    '\\u00C7', '\\u00FC', '\\u00E9', '\\u00E2', '\\u00E4', '\\u00E0', '\\u00E5', '\\u00E7',\n    '\\u00EA', '\\u00EB', '\\u00E8', '\\u00EF', '\\u00EE', '\\u00EC', '\\u00C4', '\\u00C5',\n    '\\u00C9', '\\u00E6', '\\u00C6', '\\u00F4', '\\u00F6', '\\u00F2', '\\u00FB', '\\u00F9',\n    '\\u00FF', '\\u00D6', '\\u00DC', '\\u00A2', '\\u00A3', '\\u00A5', '\\u20A7', '\\u0192',\n    '\\u00E1', '\\u00ED', '\\u00F3', '\\u00FA', '\\u00F1', '\\u00D1', '\\u00AA', '\\u00BA',\n    '\\u00BF', '\\u2310', '\\u00AC', '\\u00BD', '\\u00BC', '\\u00A1', '\\u00AB', '\\u00BB',\n    '\\u2591', '\\u2592', '\\u2593', '\\u2502', '\\u2524', '\\u2561', '\\u2562', '\\u2556',\n    '\\u2555', '\\u2563', '\\u2551', '\\u2557', '\\u255D', '\\u255C', '\\u255B', '\\u2510',\n    '\\u2514', '\\u2534', '\\u252C', '\\u251C', '\\u2500', '\\u253C', '\\u255E', '\\u255F',\n    '\\u255A', '\\u2554', '\\u2569', '\\u2566', '\\u2560', '\\u2550', '\\u256C', '\\u2567',\n    '\\u2568', '\\u2564', '\\u2565', '\\u2559', '\\u2558', '\\u2552', '\\u2553', '\\u256B',\n    '\\u256A', '\\u2518', '\\u250C', '\\u2588', '\\u2584', '\\u258C', '\\u2590', '\\u2580',\n    '\\u03B1', '\\u00DF', '\\u0393', '\\u03C0', '\\u03A3', '\\u03C3', '\\u00B5', '\\u03C4',\n    '\\u03A6', '\\u0398', '\\u03A9', '\\u03B4', '\\u221E', '\\u03C6', '\\u03B5', '\\u2229',\n    '\\u2261', '\\u00B1', '\\u2265', '\\u2264', '\\u2320', '\\u2321', '\\u00F7', '\\u2248',\n    '\\u00B0', '\\u2219', '\\u00B7', '\\u221A', '\\u207F', '\\u00B2', '\\u25A0', '\\u00A0'\n];\n\n/*\n * TODO: Future home of a complete ASCII table.\n */\nStr.ASCII = {\n    LF:     0x0A,\n    CR:     0x0D\n};\n\nStr.TYPES = {\n    NULL:       0,\n    BYTE:       1,\n    WORD:       2,\n    DWORD:      3,\n    NUMBER:     4,\n    STRING:     5,\n    BOOLEAN:    6,\n    OBJECT:     7,\n    ARRAY:      8\n};\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/usrlib.js (C) Jeff Parsons 2012-2018\n */\n\n/**\n * @typedef {{\n *  mask:       number,\n *  shift:      number\n * }}\n */\nvar BitField;\n\n/**\n * @typedef {Object.<BitField>}\n */\nvar BitFields;\n\nclass Usr {\n    /**\n     * binarySearch(a, v, fnCompare)\n     *\n     * @param {Array} a is an array\n     * @param {number|string|Array|Object} v\n     * @param {function((number|string|Array|Object), (number|string|Array|Object))} [fnCompare]\n     * @return {number} the index of matching entry if non-negative, otherwise the index of the insertion point\n     */\n    static binarySearch(a, v, fnCompare)\n    {\n        var left = 0;\n        var right = a.length;\n        var found = 0;\n        if (fnCompare === undefined) {\n            fnCompare = function(a, b)\n            {\n                return a > b ? 1 : a < b ? -1 : 0;\n            };\n        }\n        while (left < right) {\n            var middle = (left + right) >> 1;\n            var compareResult;\n            compareResult = fnCompare(v, a[middle]);\n            if (compareResult > 0) {\n                left = middle + 1;\n            } else {\n                right = middle;\n                found = !compareResult;\n            }\n        }\n        return found ? left : ~left;\n    }\n\n    /**\n     * binaryInsert(a, v, fnCompare)\n     *\n     * If element v already exists in array a, the array is unchanged (we don't allow duplicates); otherwise, the\n     * element is inserted into the array at the appropriate index.\n     *\n     * @param {Array} a is an array\n     * @param {number|string|Array|Object} v is the value to insert\n     * @param {function((number|string|Array|Object), (number|string|Array|Object))} [fnCompare]\n     */\n    static binaryInsert(a, v, fnCompare)\n    {\n        var index = Usr.binarySearch(a, v, fnCompare);\n        if (index < 0) {\n            a.splice(-(index + 1), 0, v);\n        }\n    }\n\n    /**\n     * getTimestamp()\n     *\n     * @return {string} timestamp containing the current date and time (\"yyyy-mm-dd hh:mm:ss\")\n     */\n    static getTimestamp()\n    {\n        return Usr.formatDate(\"Y-m-d H:i:s\");\n    }\n\n    /**\n     * getMonthDays(nMonth, nYear)\n     *\n     * Note that if we're being called on behalf of the RTC, its year is always truncated to two digits (mod 100),\n     * so we have no idea what century the year 0 might refer to.  When using the normal leap-year formula, 0 fails\n     * the mod 100 test but passes the mod 400 test, so as far as the RTC is concerned, every century year is a leap\n     * year.  Since we're most likely dealing with the year 2000, that's fine, since 2000 was also a leap year.\n     *\n     * TODO: There IS a separate CMOS byte that's supposed to be set to CMOS_ADDR.CENTURY_DATE; it's always BCD,\n     * so theoretically it will contain values like 0x19 or 0x20 (for the 20th and 21st centuries, respectively), and\n     * we could add that as another parameter to this function, to improve the accuracy, but that would go beyond what\n     * a real RTC actually does.\n     *\n     * @param {number} nMonth (1-12)\n     * @param {number} nYear (normally a 4-digit year, but it may also be mod 100)\n     * @return {number} the maximum (1-based) day allowed for the specified month and year\n     */\n    static getMonthDays(nMonth, nYear)\n    {\n        var nDays = Usr.aMonthDays[nMonth - 1];\n        if (nDays == 28) {\n            if ((nYear % 4) === 0 && ((nYear % 100) || (nYear % 400) === 0)) {\n                nDays++;\n            }\n        }\n        return nDays;\n    }\n\n    /**\n     * formatDate(sFormat, date)\n     *\n     * @param {string} sFormat (eg, \"F j, Y\", \"Y-m-d H:i:s\")\n     * @param {Date} [date] (default is the current time)\n     * @return {string}\n     *\n     * Supported identifiers in sFormat include:\n     *\n     *      a:  lowercase ante meridiem and post meridiem (am or pm)\n     *      d:  day of the month, 2 digits with leading zeros (01,02,...,31)\n     *      D:  3-letter day of the week (\"Sun\",\"Mon\",...,\"Sat\")\n     *      F:  month (\"January\",\"February\",...,\"December\")\n     *      g:  hour in 12-hour format, without leading zeros (1,2,...,12)\n     *      h:  hour in 24-hour format, without leading zeros (0,1,...,23)\n     *      H:  hour in 24-hour format, with leading zeros (00,01,...,23)\n     *      i:  minutes, with leading zeros (00,01,...,59)\n     *      j:  day of the month, without leading zeros (1,2,...,31)\n     *      l:  day of the week (\"Sunday\",\"Monday\",...,\"Saturday\")\n     *      m:  month, with leading zeros (01,02,...,12)\n     *      M:  3-letter month (\"Jan\",\"Feb\",...,\"Dec\")\n     *      n:  month, without leading zeros (1,2,...,12)\n     *      s:  seconds, with leading zeros (00,01,...,59)\n     *      y:  2-digit year (eg, 14)\n     *      Y:  4-digit year (eg, 2014)\n     *\n     * For more inspiration, see: http://php.net/manual/en/function.date.php (of which we support ONLY a subset).\n     */\n    static formatDate(sFormat, date)\n    {\n        var sDate = \"\";\n        if (!date) date = new Date();\n        var iHour = date.getHours();\n        var iDay = date.getDate();\n        var iMonth = date.getMonth() + 1;\n        for (var i = 0; i < sFormat.length; i++) {\n            var ch;\n            switch ((ch = sFormat.charAt(i))) {\n            case 'a':\n                sDate += (iHour < 12 ? \"am\" : \"pm\");\n                break;\n            case 'd':\n                sDate += ('0' + iDay).slice(-2);\n                break;\n            case 'D':\n                sDate += Usr.asDays[date.getDay()].substr(0, 3);\n                break;\n            case 'F':\n                sDate += Usr.asMonths[iMonth - 1];\n                break;\n            case 'g':\n                sDate += (!iHour ? 12 : (iHour > 12 ? iHour - 12 : iHour));\n                break;\n            case 'h':\n                sDate += iHour;\n                break;\n            case 'H':\n                sDate += ('0' + iHour).slice(-2);\n                break;\n            case 'i':\n                sDate += ('0' + date.getMinutes()).slice(-2);\n                break;\n            case 'j':\n                sDate += iDay;\n                break;\n            case 'l':\n                sDate += Usr.asDays[date.getDay()];\n                break;\n            case 'm':\n                sDate += ('0' + iMonth).slice(-2);\n                break;\n            case 'M':\n                sDate += Usr.asMonths[iMonth - 1].substr(0, 3);\n                break;\n            case 'n':\n                sDate += iMonth;\n                break;\n            case 's':\n                sDate += ('0' + date.getSeconds()).slice(-2);\n                break;\n            case 'y':\n                sDate += (\"\" + date.getFullYear()).slice(-2);\n                break;\n            case 'Y':\n                sDate += date.getFullYear();\n                break;\n            default:\n                sDate += ch;\n                break;\n            }\n        }\n        return sDate;\n    }\n\n    /**\n     * defineBitFields(bfs)\n     *\n     * Prepares a bit field definition for use with getBitField() and setBitField(); eg:\n     *\n     *      var bfs = Usr.defineBitFields({num:20, count:8, btmod:1, type:3});\n     *\n     * The above defines a set of bit fields containing four fields: num (bits 0-19), count (bits 20-27), btmod (bit 28), and type (bits 29-31).\n     *\n     *      Usr.setBitField(bfs.num, n, 1);\n     *\n     * The above set bit field \"bfs.num\" in numeric variable \"n\" to the value 1.\n     *\n     * @param {Object} bfs\n     * @return {BitFields}\n     */\n    static defineBitFields(bfs)\n    {\n        var bit = 0;\n        for (var f in bfs) {\n            var width = bfs[f];\n            var mask = ((1 << width) - 1) << bit;\n            bfs[f] = {mask: mask, shift: bit};\n            bit += width;\n        }\n        return bfs;\n    }\n\n    /**\n     * initBitFields(bfs, ...)\n     *\n     * @param {BitFields} bfs\n     * @param {...number} var_args\n     * @return {number} a value containing all supplied bit fields\n     */\n    static initBitFields(bfs, var_args)\n    {\n        var v = 0, i = 1;\n        for (var f in bfs) {\n            if (i >= arguments.length) break;\n            v = Usr.setBitField(bfs[f], v, arguments[i++]);\n        }\n        return v;\n    }\n\n    /**\n     * getBitField(bf, v)\n     *\n     * @param {BitField} bf\n     * @param {number} v is a value containing bit fields\n     * @return {number} the value of the bit field in v defined by bf\n     */\n    static getBitField(bf, v)\n    {\n        return (v & bf.mask) >> bf.shift;\n    }\n\n    /**\n     * setBitField(bf, v, n)\n     *\n     * @param {BitField} bf\n     * @param {number} v is a value containing bit fields\n     * @param {number} n is a value to store in v in the bit field defined by bf\n     * @return {number} updated v\n     */\n    static setBitField(bf, v, n)\n    {\n        return (v & ~bf.mask) | ((n << bf.shift) & bf.mask);\n    }\n\n    /**\n     * indexOf(a, t, i)\n     *\n     * Use this instead of Array.prototype.indexOf() if you can't be sure the browser supports it.\n     *\n     * @param {Array} a\n     * @param {*} t\n     * @param {number} [i]\n     * @returns {number}\n     */\n    static indexOf(a, t, i)\n    {\n        if (Array.prototype.indexOf) {\n            return a.indexOf(t, i);\n        }\n        i = i || 0;\n        if (i < 0) i += a.length;\n        if (i < 0) i = 0;\n        for (var n = a.length; i < n; i++) {\n            if (i in a && a[i] === t) return i;\n        }\n        return -1;\n    }\n}\n\nUsr.asDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nUsr.asMonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nUsr.aMonthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n/**\n * getTime()\n *\n * @return {number} the current time, in milliseconds\n */\nUsr.getTime = Date.now || function() { return +new Date(); };\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/weblib.js (C) Jeff Parsons 2012-2018\n */\n\n\n/*\n * According to http://www.w3schools.com/jsref/jsref_obj_global.asp, these are the *global* properties\n * and functions of JavaScript-in-the-Browser:\n *\n * Property             Description\n * ---\n * Infinity             A numeric value that represents positive/negative infinity\n * NaN                  \"Not-a-Number\" value\n * undefined            Indicates that a variable has not been assigned a value\n *\n * Function             Description\n * ---\n * decodeURI()          Decodes a URI\n * decodeURIComponent() Decodes a URI component\n * encodeURI()          Encodes a URI\n * encodeURIComponent() Encodes a URI component\n * escape()             Deprecated in version 1.5. Use encodeURI() or encodeURIComponent() instead\n * eval()               Evaluates a string and executes it as if it was script code\n * isFinite()           Determines whether a value is a finite, legal number\n * isNaN()              Determines whether a value is an illegal number\n * Number()             Converts an object's value to a number\n * parseFloat()         Parses a string and returns a floating point number\n * parseInt()           Parses a string and returns an integer\n * String()             Converts an object's value to a string\n * unescape()           Deprecated in version 1.5. Use decodeURI() or decodeURIComponent() instead\n *\n * And according to http://www.w3schools.com/jsref/obj_window.asp, these are the properties and functions\n * of the *window* object.\n *\n * Property             Description\n * ---\n * closed               Returns a Boolean value indicating whether a window has been closed or not\n * defaultStatus        Sets or returns the default text in the statusbar of a window\n * document             Returns the Document object for the window (See Document object)\n * frames               Returns an array of all the frames (including iframes) in the current window\n * history              Returns the History object for the window (See History object)\n * innerHeight          Returns the inner height of a window's content area\n * innerWidth           Returns the inner width of a window's content area\n * length               Returns the number of frames (including iframes) in a window\n * location             Returns the Location object for the window (See Location object)\n * name                 Sets or returns the name of a window\n * navigator            Returns the Navigator object for the window (See Navigator object)\n * opener               Returns a reference to the window that created the window\n * outerHeight          Returns the outer height of a window, including toolbars/scrollbars\n * outerWidth           Returns the outer width of a window, including toolbars/scrollbars\n * pageXOffset          Returns the pixels the current document has been scrolled (horizontally) from the upper left corner of the window\n * pageYOffset          Returns the pixels the current document has been scrolled (vertically) from the upper left corner of the window\n * parent               Returns the parent window of the current window\n * screen               Returns the Screen object for the window (See Screen object)\n * screenLeft           Returns the x coordinate of the window relative to the screen\n * screenTop            Returns the y coordinate of the window relative to the screen\n * screenX              Returns the x coordinate of the window relative to the screen\n * screenY              Returns the y coordinate of the window relative to the screen\n * self                 Returns the current window\n * status               Sets or returns the text in the statusbar of a window\n * top                  Returns the topmost browser window\n *\n * Method               Description\n * ---\n * alert()              Displays an alert box with a message and an OK button\n * atob()               Decodes a base-64 encoded string\n * blur()               Removes focus from the current window\n * btoa()               Encodes a string in base-64\n * clearInterval()      Clears a timer set with setInterval()\n * clearTimeout()       Clears a timer set with setTimeout()\n * close()              Closes the current window\n * confirm()            Displays a dialog box with a message and an OK and a Cancel button\n * createPopup()        Creates a pop-up window\n * focus()              Sets focus to the current window\n * moveBy()             Moves a window relative to its current position\n * moveTo()             Moves a window to the specified position\n * open()               Opens a new browser window\n * print()              Prints the content of the current window\n * prompt()             Displays a dialog box that prompts the visitor for input\n * resizeBy()           Resizes the window by the specified pixels\n * resizeTo()           Resizes the window to the specified width and height\n * scroll()             This method has been replaced by the scrollTo() method.\n * scrollBy()           Scrolls the content by the specified number of pixels\n * scrollTo()           Scrolls the content to the specified coordinates\n * setInterval()        Calls a function or evaluates an expression at specified intervals (in milliseconds)\n * setTimeout()         Calls a function or evaluates an expression after a specified number of milliseconds\n * stop()               Stops the window from loading\n */\n\nclass Web {\n    /**\n     * log(s, type)\n     *\n     * For diagnostic output only.  DEBUG must be true (or \"--debug\" specified via the command-line)\n     * for Component.log() to display anything.\n     *\n     * @param {string} [s] is the message text\n     * @param {string} [type] is the message type\n     */\n    static log(s, type)\n    {\n        Component.log(s, type);\n    }\n\n    /**\n     * notice(s, fPrintOnly, id)\n     *\n     * @param {string} s is the message text\n     * @param {boolean} [fPrintOnly]\n     * @param {string} [id] is the caller's ID, if any\n     */\n    static notice(s, fPrintOnly, id)\n    {\n        Component.notice(s, fPrintOnly, id);\n    }\n\n    /**\n     * alertUser(sMessage)\n     * \n     * NOTE: Legacy function for older modules (eg, DiskDump); see Component.alertUser().\n     *\n     * @param {string} sMessage\n     */\n    static alertUser(sMessage)\n    {\n        if (window) {\n            window.alert(sMessage);\n        } else {\n            Web.log(sMessage);\n        }\n    }\n\n    /**\n     * getResource(sURL, type, fAsync, done, progress)\n     *\n     * Request the specified resource (sURL), and once the request is complete, notify done().\n     *\n     * If fAsync is true, a done() callback should ALWAYS be supplied; otherwise, you'll have no\n     * idea when the request is complete or what the response was.  done() is passed three parameters:\n     *\n     *      done(sURL, resource, nErrorCode)\n     *\n     * If nErrorCode is zero, resource should contain the requested data; otherwise, an error occurred.\n     *\n     * If type is set to a string, that string can be used to control the response format;\n     * by default, the response format is plain text, but you can specify \"arraybuffer\" to request arbitrary\n     * binary data, in which case the returned resource will be a ArrayBuffer rather than a string.\n     *\n     * @param {string} sURL\n     * @param {string|Object|null} [type] (object for POST request, otherwise type of GET request)\n     * @param {boolean} [fAsync] is true for an asynchronous request; false otherwise (MUST be set for IE)\n     * @param {function(string,string,number)} [done]\n     * @param {function(number)} [progress]\n     * @return {Array|null} Array containing [resource, nErrorCode], or null if no response available (yet)\n     */\n    static getResource(sURL, type = \"text\", fAsync = false, done, progress)\n    {\n        var nErrorCode = 0, resource = null, response = null;\n\n        if (typeof resources == 'object' && (resource = resources[sURL])) {\n            if (done) done(sURL, resource, nErrorCode);\n            return [resource, nErrorCode];\n        }\n        else if (fAsync && typeof resources == 'function') {\n            resources(sURL, function(resource, nErrorCode)\n            {\n                if (done) done(sURL, resource, nErrorCode);\n            });\n            return response;\n        }\n\n        if (DEBUG) {\n            /*\n             * The larger resources we put on archive.pcjs.org should also be available locally.\n             *\n             * NOTE: \"http://archive.pcjs.org\" is now \"https://s3-us-west-2.amazonaws.com/archive.pcjs.org\"\n             */\n            sURL = sURL.replace(/^(http:\\/\\/archive\\.pcjs\\.org|https:\\/\\/s3-us-west-2\\.amazonaws\\.com\\/archive\\.pcjs\\.org)(\\/.*)\\/([^\\/]*)$/, \"$2/archive/$3\");\n        }\n\n\n        var request = (window.XMLHttpRequest? new window.XMLHttpRequest() : new window.ActiveXObject(\"Microsoft.XMLHTTP\"));\n        var fArrayBuffer = false, fXHR2 = (typeof request.responseType === 'string');\n        \n        var callback = function() {\n            if (request.readyState !== 4) {\n                if (progress) progress(1);\n                return null;\n            }\n            /*\n             * The following line was recommended for WebKit, as a work-around to prevent the handler firing multiple\n             * times when debugging.  Unfortunately, that's not the only XMLHttpRequest problem that occurs when\n             * debugging, so I think the WebKit problem is deeper than that.  When we have multiple XMLHttpRequests\n             * pending, any debugging activity means most of them simply get dropped on floor, so what may actually be\n             * happening are mis-notifications rather than redundant notifications.\n             *\n             *      request.onreadystatechange = undefined;\n             */\n            /*\n             * If the request failed due to, say, a CORS policy denial; eg:\n             * \n             *      Failed to load http://www.allbootdisks.com/downloads/Disks/Windows_95_Boot_Disk_Download48/Diskette%20Images/Windows95a.img:\n             *      Redirect from 'http://www.allbootdisks.com/downloads/Disks/Windows_95_Boot_Disk_Download48/Diskette%20Images/Windows95a.img' to\n             *      'http://www.allbootdisks.com/' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.\n             *      Origin 'http://pcjs:8088' is therefore not allowed access.\n             *      \n             * and our request type was \"arraybuffer\", attempting to access responseText may trigger an exception; eg:\n             * \n             *      Uncaught DOMException: Failed to read the 'responseText' property from 'XMLHttpRequest': The value is only accessible if the object's\n             *      'responseType' is '' or 'text' (was 'arraybuffer').\n             * \n             * We could tiptoe around these potential landmines, but the safest thing to do is wrap this code with try/catch.\n             */\n            try {\n                resource = fArrayBuffer? request.response : request.responseText;\n            } catch(err) {\n                if (MAXDEBUG) Web.log(\"xmlHTTPRequest(\" + sURL + \") exception: \" + err.message);\n            }\n            /*\n             * The normal \"success\" case is a non-null resource and an HTTP status code of 200, but when loading files from the\n             * local file system (ie, when using the \"file:\" protocol), we have to be a bit more flexible.\n             */\n            if (resource != null && (request.status == 200 || !request.status && resource.length && Web.getHostProtocol() == \"file:\")) {\n                if (MAXDEBUG) Web.log(\"xmlHTTPRequest(\" + sURL + \"): returned \" + resource.length + \" bytes\");\n            }\n            else {\n                nErrorCode = request.status || -1;\n                Web.log(\"xmlHTTPRequest(\" + sURL + \"): error code \" + nErrorCode);\n            }\n            if (progress) progress(2);\n            if (done) done(sURL, resource, nErrorCode);\n            return [resource, nErrorCode];\n        };\n        \n        if (fAsync) {\n            request.onreadystatechange = callback;\n        }\n\n        if (progress) progress(0);\n\n        if (type && typeof type == \"object\") {\n            var sPost = \"\";\n            for (var p in type) {\n                if (!type.hasOwnProperty(p)) continue;\n                if (sPost) sPost += \"&\";\n                sPost += p + '=' + encodeURIComponent(type[p]);\n            }\n            sPost = sPost.replace(/%20/g, '+');\n            if (MAXDEBUG) Web.log(\"Web.getResource(POST \" + sURL + \"): \" + sPost.length + \" bytes\");\n            request.open(\"POST\", sURL, fAsync);\n            request.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n            request.send(sPost);\n        } else {\n            if (MAXDEBUG) Web.log(\"Web.getResource(GET \" + sURL + \")\");\n            request.open(\"GET\", sURL, fAsync);\n            if (type == \"arraybuffer\") {\n                if (fXHR2) {\n                    fArrayBuffer = true;\n                    request.responseType = type;\n                } else {\n                    request.overrideMimeType(\"text/plain; charset=x-user-defined\");\n                }\n            }\n            request.send();\n        }\n\n        if (!fAsync) {\n            request.readyState = 4;     // this may already be set for synchronous requests, but I don't want to take any chances \n            response = callback();\n        }\n        return response;\n    }\n\n    /**\n     * parseMemoryResource(sURL, sData)\n     *\n     * This converts a variety of JSON-style data streams into an Object with the following properties:\n     *\n     *      aBytes\n     *      aSymbols\n     *      addrLoad\n     *      addrExec\n     *\n     * If the source data contains a 'bytes' array, it's passed through to 'aBytes'; alternatively, if\n     * it contains a 'words' array, the values are converted from 16-bit to 8-bit and stored in 'aBytes',\n     * and if it contains a 'longs' array, the values are converted from 32-bit longs into bytes and\n     * stored in 'aBytes'.\n     *\n     * Alternatively, if the source data contains a 'data' array, we simply pass that through to the output\n     * object as:\n     *\n     *      aData\n     *\n     * @param {string} sURL\n     * @param {string} sData\n     * @return {Object|null} (resource)\n     */\n    static parseMemoryResource(sURL, sData)\n    {\n        var i;\n        var resource = {\n            aBytes: null,\n            aSymbols: null,\n            addrLoad: null,\n            addrExec: null\n        };\n\n        if (sData.charAt(0) == \"[\" || sData.charAt(0) == \"{\") {\n            try {\n                var a, ib, data;\n\n                if (sData.substr(0, 1) == \"<\") {    // if the \"data\" begins with a \"<\"...\n                    /*\n                     * Early server configs reported an error (via the nErrorCode parameter) if a tape URL was invalid,\n                     * but more recent server configs now display a somewhat friendlier HTML error page.  The downside,\n                     * however, is that the original error has been buried, and we've received \"data\" that isn't actually\n                     * tape data.  So if the data we've received appears to be \"HTML-like\", we treat it as an error message.\n                     */\n                    throw new Error(sData);\n                }\n\n                /*\n                 * TODO: IE9 is rather unfriendly and restrictive with regard to how much data it's willing to\n                 * eval().  In particular, the 10Mb disk image we use for the Windows 1.01 demo config fails in\n                 * IE9 with an \"Out of memory\" exception.  One work-around would be to chop the data into chunks\n                 * (perhaps one track per chunk, using regular expressions) and then manually re-assemble it.\n                 *\n                 * However, it turns out that using JSON.parse(sDiskData) instead of eval(\"(\" + sDiskData + \")\")\n                 * is a much easier fix. The only drawback is that we must first quote any unquoted property names\n                 * and remove any comments, because while eval() was cool with them, JSON.parse() is more particular;\n                 * the following RegExp replacements take care of those requirements.\n                 *\n                 * The use of hex values is something else that eval() was OK with, but JSON.parse() is not, and\n                 * while I've stopped using hex values in DumpAPI responses (at least when \"format=json\" is specified),\n                 * I can't guarantee they won't show up in \"legacy\" images, and there's no simple RegExp replacement\n                 * for transforming hex values into decimal values, so I cop out and fall back to eval() if I detect\n                 * any hex prefixes (\"0x\") in the sequence.  Ditto for error messages, which appear like so:\n                 *\n                 *      [\"unrecognized disk path: test.img\"]\n                 */\n                if (sData.indexOf(\"0x\") < 0 && sData.indexOf(\"0o\") < 0 && sData.substr(0, 2) != '[\"') {\n                    data = JSON.parse(sData.replace(/([a-z]+):/gm, '\"$1\":').replace(/\\/\\/[^\\n]*/gm, \"\"));\n                } else {\n                    data = eval(\"(\" + sData + \")\");\n                }\n\n                resource.addrLoad = data['load'];\n                resource.addrExec = data['exec'];\n\n                if (a = data['bytes']) {\n                    resource.aBytes = a;\n                }\n                else if (a = data['words']) {\n                    /*\n                     * Convert all words into bytes\n                     */\n                    resource.aBytes = new Array(a.length * 2);\n                    for (i = 0, ib = 0; i < a.length; i++) {\n                        resource.aBytes[ib++] = a[i] & 0xff;\n                        resource.aBytes[ib++] = (a[i] >> 8) & 0xff;\n\n                    }\n                }\n                else if (a = data['longs']) {\n                    /*\n                     * Convert all dwords (longs) into bytes\n                     */\n                    resource.aBytes = new Array(a.length * 4);\n                    for (i = 0, ib = 0; i < a.length; i++) {\n                        resource.aBytes[ib++] = a[i] & 0xff;\n                        resource.aBytes[ib++] = (a[i] >> 8) & 0xff;\n                        resource.aBytes[ib++] = (a[i] >> 16) & 0xff;\n                        resource.aBytes[ib++] = (a[i] >> 24) & 0xff;\n                    }\n                }\n                else if (a = data['data']) {\n                    resource.aData = a;\n                }\n                else {\n                    resource.aBytes = data;\n                }\n\n                if (resource.aBytes) {\n                    if (!resource.aBytes.length) {\n                        Component.error(\"Empty resource: \" + sURL);\n                        resource = null;\n                    }\n                    else if (resource.aBytes.length == 1) {\n                        Component.error(resource.aBytes[0]);\n                        resource = null;\n                    }\n                }\n                resource.aSymbols = data['symbols'];\n\n            } catch (e) {\n                Component.error(\"Resource data error (\" + sURL + \"): \" + e.message);\n                resource = null;\n            }\n        }\n        else {\n            /*\n             * Parse the data manually; we assume it's a series of hex byte-values separated by whitespace.\n             */\n            var ab = [];\n            var sHexData = sData.replace(/\\n/gm, \" \").replace(/ +$/, \"\");\n            var asHexData = sHexData.split(\" \");\n            for (i = 0; i < asHexData.length; i++) {\n                var n = parseInt(asHexData[i], 16);\n                if (isNaN(n)) {\n                    Component.error(\"Resource data error (\" + sURL + \"): invalid hex byte (\" + asHexData[i] + \")\");\n                    break;\n                }\n                ab.push(n & 0xff);\n            }\n            if (i == asHexData.length) resource.aBytes = ab;\n        }\n        return resource;\n    }\n\n    /**\n     * sendReport(sApp, sVer, sURL, sUser, sType, sReport, sHostName)\n     *\n     * Send a report (eg, bug report) to the server.\n     *\n     * @param {string} sApp (eg, \"PCjs\")\n     * @param {string} sVer (eg, \"1.02\")\n     * @param {string} sURL (eg, \"/devices/pc/machine/5150/mda/64kb/machine.xml\")\n     * @param {string} sUser (ie, the user key, if any)\n     * @param {string} sType (eg, \"bug\"); one of ReportAPI.TYPE.*\n     * @param {string} sReport (eg, unparsed state data)\n     * @param {string} [sHostName] (default is http://SITEHOST)\n     */\n    static sendReport(sApp, sVer, sURL, sUser, sType, sReport, sHostName)\n    {\n        var dataPost = {};\n        dataPost[ReportAPI.QUERY.APP] = sApp;\n        dataPost[ReportAPI.QUERY.VER] = sVer;\n        dataPost[ReportAPI.QUERY.URL] = sURL;\n        dataPost[ReportAPI.QUERY.USER] = sUser;\n        dataPost[ReportAPI.QUERY.TYPE] = sType;\n        dataPost[ReportAPI.QUERY.DATA] = sReport;\n        var sReportURL = (sHostName? sHostName : \"http://\" + SITEHOST) + ReportAPI.ENDPOINT;\n        Web.getResource(sReportURL, dataPost, true);\n    }\n\n    /**\n     * getHost()\n     *\n     * @return {string}\n     */\n    static getHost()\n    {\n        return (\"http://\" + (window? window.location.host : SITEHOST));\n    }\n\n    /**\n     * getHostURL()\n     *\n     * @return {string|null}\n     */\n    static getHostURL()\n    {\n        return (window? window.location.href : null);\n    }\n\n    /**\n     * getHostProtocol()\n     *\n     * @return {string}\n     */\n    static getHostProtocol()\n    {\n        return (window? window.location.protocol : \"file:\");\n    }\n\n    /**\n     * getUserAgent()\n     *\n     * @return {string}\n     */\n    static getUserAgent()\n    {\n        return (window? window.navigator.userAgent : \"\");\n    }\n\n    /**\n     * hasLocalStorage\n     *\n     * true if localStorage support exists, is enabled, and works; false otherwise\n     *\n     * @return {boolean}\n     */\n    static hasLocalStorage()\n    {\n        if (Web.fLocalStorage == null) {\n            var f = false;\n            if (window) {\n                try {\n                    window.localStorage.setItem(Web.sLocalStorageTest, Web.sLocalStorageTest);\n                    f = (window.localStorage.getItem(Web.sLocalStorageTest) == Web.sLocalStorageTest);\n                    window.localStorage.removeItem(Web.sLocalStorageTest);\n                } catch (e) {\n                    Web.logLocalStorageError(e);\n                    f = false;\n                }\n            }\n            Web.fLocalStorage = f;\n        }\n        return Web.fLocalStorage;\n    }\n\n    /**\n     * logLocalStorageError(e)\n     *\n     * @param {Error} e is an exception\n     */\n    static logLocalStorageError(e)\n    {\n        Web.log(e.message, \"localStorage error\");\n    }\n\n    /**\n     * getLocalStorageItem(sKey)\n     *\n     * Returns the requested key value, or null if the key does not exist, or undefined if localStorage is not available\n     *\n     * @param {string} sKey\n     * @return {string|null|undefined} sValue\n     */\n    static getLocalStorageItem(sKey)\n    {\n        var sValue;\n        if (window) {\n            try {\n                sValue = window.localStorage.getItem(sKey);\n            } catch (e) {\n                Web.logLocalStorageError(e);\n            }\n        }\n        return sValue;\n    }\n\n    /**\n     * setLocalStorageItem(sKey, sValue)\n     *\n     * @param {string} sKey\n     * @param {string} sValue\n     * @return {boolean} true if localStorage is available, false if not\n     */\n    static setLocalStorageItem(sKey, sValue)\n    {\n        try {\n            window.localStorage.setItem(sKey, sValue);\n            return true;\n        } catch (e) {\n            Web.logLocalStorageError(e);\n        }\n        return false;\n    }\n\n    /**\n     * removeLocalStorageItem(sKey)\n     *\n     * @param {string} sKey\n     */\n    static removeLocalStorageItem(sKey)\n    {\n        try {\n            window.localStorage.removeItem(sKey);\n        } catch (e) {\n            Web.logLocalStorageError(e);\n        }\n    }\n\n    /**\n     * getLocalStorageKeys()\n     *\n     * @return {Array}\n     */\n    static getLocalStorageKeys()\n    {\n        var a = [];\n        try {\n            for (var i = 0, c = window.localStorage.length; i < c; i++) {\n                a.push(window.localStorage.key(i));\n            }\n        } catch (e) {\n            Web.logLocalStorageError(e);\n        }\n        return a;\n    }\n\n    /**\n     * reloadPage()\n     */\n    static reloadPage()\n    {\n        if (window) window.location.reload();\n    }\n\n    /**\n     * isUserAgent(s)\n     *\n     * Check the browser's user-agent string for the given substring; \"iOS\" and \"MSIE\" are special values you can\n     * use that will match any iOS or MSIE browser, respectively (even IE11, in the case of \"MSIE\").\n     *\n     * 2013-11-06: In a questionable move, MSFT changed the user-agent reported by IE11 on Windows 8.1, eliminating\n     * the \"MSIE\" string (which MSDN calls a \"version token\"; see http://msdn.microsoft.com/library/ms537503.aspx);\n     * they say \"public websites should rely on feature detection, rather than browser detection, in order to design\n     * their sites for browsers that don't support the features used by the website.\" So, in IE11, we get a user-agent\n     * that tries to fool apps into thinking the browser is more like WebKit or Gecko:\n     *\n     *      Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko\n     *\n     * That's a nice idea, but in the meantime, they hosed the XSL transform code in embed.js, which contained\n     * some very critical browser-specific code; turning on IE's \"Compatibility Mode\" didn't help either, because\n     * that's a sledgehammer solution which restores the old user-agent string but also disables other features like\n     * HTML5 canvas support. As an interim solution, I'm treating any \"MSIE\" check as a check for either \"MSIE\" or\n     * \"Trident\".\n     *\n     * UPDATE: I've since found ways to make the code in embed.js more browser-agnostic, so for now, there's isn't\n     * any code that cares about \"MSIE\", but I've left the change in place, because I wouldn't be surprised if I'll\n     * need more IE-specific code in the future, perhaps for things like copy/paste functionality, or mouse capture.\n     *\n     * @param {string} s is a substring to search for in the user-agent; as noted above, \"iOS\" and \"MSIE\" are special values\n     * @return {boolean} is true if the string was found, false if not\n     */\n    static isUserAgent(s)\n    {\n        if (window) {\n            var userAgent = Web.getUserAgent();\n            /*\n             * Here's one case where we have to be careful with Component, because when isUserAgent() is called by\n             * the init code below, component.js hasn't been loaded yet.  The simple solution for now is to remove the call.\n             *\n             *      Web.log(\"agent: \" + userAgent);\n             *\n             * And yes, it would be pointless to use the conditional (?) operator below, if not for the Google Closure\n             * Compiler (v20130823) failing to detect the entire expression as a boolean.\n             */\n            return s == \"iOS\" && !!userAgent.match(/(iPod|iPhone|iPad)/) && !!userAgent.match(/AppleWebKit/) || s == \"MSIE\" && !!userAgent.match(/(MSIE|Trident)/) || (userAgent.indexOf(s) >= 0);\n        }\n        return false;\n    }\n\n    /**\n     * isMobile()\n     *\n     * Check the browser's user-agent string for the substring \"Mobi\", as per Mozilla recommendation:\n     *\n     *      https://developer.mozilla.org/en-US/docs/Browser_detection_using_the_user_agent\n     *\n     * @return {boolean} is true if the browser appears to be a mobile (ie, non-desktop) web browser, false if not\n     */\n    static isMobile()\n    {\n        return Web.isUserAgent(\"Mobi\");\n    }\n\n    /**\n     * findProperty(obj, sProp, sSuffix)\n     *\n     * If both sProp and sSuffix are set, then any browser-specific prefixes are inserted between sProp and sSuffix,\n     * and if a match is found, it is returned without sProp.\n     *\n     * For example, if findProperty(document, 'on', 'fullscreenchange') discovers that 'onwebkitfullscreenchange' exists,\n     * it will return 'webkitfullscreenchange', in preparation for an addEventListener() call.\n     *\n     * More commonly, sSuffix is not used, so whatever property is found is returned as-is.\n     *\n     * @param {Object|null|undefined} obj\n     * @param {string} sProp\n     * @param {string} [sSuffix]\n     * @return {string|null}\n     */\n    static findProperty(obj, sProp, sSuffix)\n    {\n        if (obj) {\n            for (var i = 0; i < Web.asBrowserPrefixes.length; i++) {\n                var sName = Web.asBrowserPrefixes[i];\n                if (sSuffix) {\n                    sName += sSuffix;\n                    var sEvent = sProp + sName;\n                    if (sEvent in obj) return sName;\n                } else {\n                    if (!sName) {\n                        sName = sProp[0];\n                    } else {\n                        sName += sProp[0].toUpperCase();\n                    }\n                    sName += sProp.substr(1);\n                    if (sName in obj) return sName;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * getURLParm(sParm)\n     *\n     * First looks for sParm exactly as specified, then looks for the lower-case version.\n     *\n     * @param {string} sParm\n     * @return {string|undefined}\n     */\n    static getURLParm(sParm)\n    {\n        if (!Web.parmsURL) {\n            Web.parmsURL = Web.parseURLParms();\n        }\n        return Web.parmsURL[sParm] || Web.parmsURL[sParm.toLowerCase()];\n    }\n\n    /**\n     * parseURLParms(sParms)\n     *\n     * @param {string} [sParms] containing the parameter portion of a URL (ie, after the '?')\n     * @return {Object} containing properties for each parameter found\n     */\n    static parseURLParms(sParms)\n    {\n        var aParms = {};\n        if (window) {       // an alternative to \"if (typeof module === 'undefined')\" if require(\"defines\") was used\n            if (!sParms) {\n                /*\n                 * Note that window.location.href returns the entire URL, whereas window.location.search\n                 * returns only the parameters, if any (starting with the '?', which we skip over with a substr() call).\n                 */\n                sParms = window.location.search.substr(1);\n            }\n            var match;\n            var pl = /\\+/g; // RegExp for replacing addition symbol with a space\n            var search = /([^&=]+)=?([^&]*)/g;\n            var decode = function(s)\n            {\n                return decodeURIComponent(s.replace(pl, \" \"));\n            };\n\n            while ((match = search.exec(sParms))) {\n                aParms[decode(match[1])] = decode(match[2]);\n            }\n        }\n        return aParms;\n    }\n\n    /**\n     * downloadFile(sData, sType, fBase64, sFileName)\n     *\n     * @param {string} sData\n     * @param {string} sType\n     * @param {boolean} [fBase64]\n     * @param {string} [sFileName]\n     */\n    static downloadFile(sData, sType, fBase64, sFileName)\n    {\n        var link = null, sAlert;\n        var sURI = \"data:application/\" + sType + (fBase64? \";base64\" : \"\") + \",\";\n\n        if (!Web.isUserAgent(\"Firefox\")) {\n            sURI += (fBase64? sData : encodeURI(sData));\n        } else {\n            sURI += (fBase64? sData : encodeURIComponent(sData));\n        }\n        if (sFileName) {\n            link = document.createElement('a');\n            if (typeof link.download != 'string') link = null;\n        }\n        if (link) {\n            link.href = sURI;\n            link.download = sFileName;\n            document.body.appendChild(link);    // Firefox allegedly requires the link to be in the body\n            link.click();\n            document.body.removeChild(link);\n            sAlert = 'Check your Downloads folder for ' + sFileName + '.';\n        } else {\n            window.open(sURI);\n            sAlert = 'Check your browser for a new window/tab containing the requested data' + (sFileName? (' (' + sFileName + ')') : '') + '.';\n        }\n        return sAlert;\n    }\n\n    /**\n     * onCountRepeat(n, fnRepeat, fnComplete, msDelay)\n     *\n     * Call fnRepeat() n times with an msDelay millisecond delay between calls,\n     * then call fnComplete() when n has been exhausted OR fnRepeat() returns false.\n     *\n     * @param {number} n\n     * @param {function()} fnRepeat\n     * @param {function()} fnComplete\n     * @param {number} [msDelay]\n     */\n    static onCountRepeat(n, fnRepeat, fnComplete, msDelay)\n    {\n        var fnTimeout = function doCountRepeat()\n        {\n            n -= 1;\n            if (n >= 0) {\n                if (!fnRepeat()) n = 0;\n            }\n            if (n > 0) {\n                setTimeout(fnTimeout, msDelay || 0);\n                return;\n            }\n            fnComplete();\n        };\n        fnTimeout();\n    }\n\n    /**\n     * onClickRepeat(e, msDelay, msRepeat, fn)\n     *\n     * Repeatedly call fn() with an initial msDelay, and an msRepeat delay thereafter,\n     * as long as HTML control Object e has an active \"down\" event and fn() returns true.\n     *\n     * @param {Object} e\n     * @param {number} msDelay\n     * @param {number} msRepeat\n     * @param {function(boolean)} fn is passed false on the first call, true on all repeated calls\n     */\n    static onClickRepeat(e, msDelay, msRepeat, fn)\n    {\n        var ms = 0, timer = null, fIgnoreMouseEvents = false;\n\n        var fnRepeat = function doClickRepeat()\n        {\n            if (fn(ms === msRepeat)) {\n                timer = setTimeout(fnRepeat, ms);\n                ms = msRepeat;\n            }\n        };\n        e.onmousedown = function()\n        {\n            // Web.log(\"onMouseDown()\");\n            if (!fIgnoreMouseEvents) {\n                if (!timer) {\n                    ms = msDelay;\n                    fnRepeat();\n                }\n            }\n        };\n        e.ontouchstart = function()\n        {\n            // Web.log(\"onTouchStart()\");\n            if (!timer) {\n                ms = msDelay;\n                fnRepeat();\n            }\n        };\n        e.onmouseup = e.onmouseout = function()\n        {\n            // Web.log(\"onMouseUp()/onMouseOut()\");\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n        };\n        e.ontouchend = e.ontouchcancel = function()\n        {\n            // Web.log(\"onTouchEnd()/onTouchCancel()\");\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            /*\n             * Devices that generate ontouch* events ALSO generate onmouse* events,\n             * and generally do so immediately after all the touch events are complete,\n             * so unless we want double the action, we need to ignore mouse events.\n             */\n            fIgnoreMouseEvents = true;\n        };\n    }\n\n    /**\n     * onPageEvent(sName, fn)\n     *\n     * For 'onload', 'onunload', and 'onpageshow' events, most callers should NOT use this function, but\n     * instead use Web.onInit(), Web.onShow(), and Web.onExit(), respectively.\n     *\n     * The only components that should still use onPageEvent() are THIS component (see the bottom of this file)\n     * and components that need to capture other events (eg, the 'onresize' event in the Video component).\n     *\n     * This function creates a chain of callbacks, allowing multiple JavaScript modules to define handlers\n     * for the same event, which wouldn't be possible if everyone modified window['onload'], window['onunload'],\n     * etc, themselves.  However, that's less of a concern now, because assuming everyone else is now using\n     * onInit(), onExit(), etc, then there really IS only one component setting the window callback: this one.\n     *\n     * NOTE: It's risky to refer to obscure event handlers with \"dot\" names, because the Closure Compiler may\n     * erroneously replace them (eg, window.onpageshow is a good example).\n     *\n     * @param {string} sFunc\n     * @param {function()} fn\n     */\n    static onPageEvent(sFunc, fn)\n    {\n        if (window) {\n            var fnPrev = window[sFunc];\n            if (typeof fnPrev !== 'function') {\n                window[sFunc] = fn;\n            } else {\n                /*\n                 * TODO: Determine whether there's any value in receiving/sending the Event object that the\n                 * browser provides when it generates the original event.\n                 */\n                window[sFunc] = function onWindowEvent()\n                {\n                    if (fnPrev) fnPrev();\n                    fn();\n                };\n            }\n        }\n    };\n\n    /**\n     * onInit(fn)\n     *\n     * Use this instead of setting window.onload.  Allows multiple JavaScript modules to define their own 'onload' event handler.\n     *\n     * @param {function()} fn\n     */\n    static onInit(fn)\n    {\n        Web.aPageEventHandlers['init'].push(fn);\n    };\n\n    /**\n     * onShow(fn)\n     *\n     * @param {function()} fn\n     *\n     * Use this instead of setting window.onpageshow.  Allows multiple JavaScript modules to define their own 'onpageshow' event handler.\n     */\n    static onShow(fn)\n    {\n        Web.aPageEventHandlers['show'].push(fn);\n    };\n\n    /**\n     * onExit(fn)\n     *\n     * @param {function()} fn\n     *\n     * Use this instead of setting window.onunload.  Allows multiple JavaScript modules to define their own 'onunload' event handler.\n     */\n    static onExit(fn)\n    {\n        Web.aPageEventHandlers['exit'].push(fn);\n    };\n\n    /**\n     * doPageEvent(afn)\n     *\n     * @param {Array.<function()>} afn\n     */\n    static doPageEvent(afn)\n    {\n        if (Web.fPageEventsEnabled) {\n            try {\n                for (var i = 0; i < afn.length; i++) {\n                    afn[i]();\n                }\n            } catch (e) {\n                Web.notice(\"An unexpected error occurred: \" + e.message + \"\\n\\nIf it happens again, please send this information to support@pcjs.org. Thanks.\");\n            }\n        }\n    };\n\n    /**\n     * enablePageEvents(fEnable)\n     *\n     * @param {boolean} fEnable is true to enable page events, false to disable (they're enabled by default)\n     */\n    static enablePageEvents(fEnable)\n    {\n        if (!Web.fPageEventsEnabled && fEnable) {\n            Web.fPageEventsEnabled = true;\n            if (Web.fPageLoaded) Web.sendPageEvent('init');\n            if (Web.fPageShowed) Web.sendPageEvent('show');\n            return;\n        }\n        Web.fPageEventsEnabled = fEnable;\n    }\n\n    /**\n     * sendPageEvent(sEvent)\n     *\n     * This allows us to manually trigger page events.\n     *\n     * @param {string} sEvent (one of 'init', 'show' or 'exit')\n     */\n    static sendPageEvent(sEvent)\n    {\n        if (Web.aPageEventHandlers[sEvent]) {\n            Web.doPageEvent(Web.aPageEventHandlers[sEvent]);\n        }\n    }\n}\n\nWeb.parmsURL = null;            // initialized on first call to parseURLParms()\n\nWeb.aPageEventHandlers = {\n    'init': [],                 // list of window 'onload' handlers\n    'show': [],                 // list of window 'onpageshow' handlers\n    'exit': []                  // list of window 'onunload' handlers (although we prefer to use 'onbeforeunload' if possible)\n};\n\nWeb.asBrowserPrefixes = ['', 'moz', 'ms', 'webkit'];\n\nWeb.fPageLoaded = false;        // set once the page's first 'onload' event has occurred\nWeb.fPageShowed = false;        // set once the page's first 'onpageshow' event has occurred\nWeb.fPageEventsEnabled = true;  // default is true, set to false (or true) by enablePageEvents()\n\n/**\n * fLocalStorage\n *\n * true if localStorage support exists, is enabled, and works; \"falsey\" otherwise\n *\n * @type {boolean|null}\n */\nWeb.fLocalStorage = null;\n\n/**\n * TODO: Is there any way to get the Closure Compiler to stop inlining this string?  This isn't cutting it.\n *\n * @const {string}\n */\nWeb.sLocalStorageTest = \"PCjs.localStorage\";\n\nWeb.onPageEvent('onload', function onPageLoad() {\n    Web.fPageLoaded = true;\n    Web.doPageEvent(Web.aPageEventHandlers['init']);\n});\n\nWeb.onPageEvent('onpageshow', function onPageShow() {\n    Web.fPageShowed = true;\n    Web.doPageEvent(Web.aPageEventHandlers['show']);\n});\n\nWeb.onPageEvent(Web.isUserAgent(\"iOS\")? 'onpagehide' : (Web.isUserAgent(\"Opera\")? 'onunload' : 'onbeforeunload'), function onPageUnload() {\n    Web.doPageEvent(Web.aPageEventHandlers['exit']);\n});\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/component.js (C) Jeff Parsons 2012-2018\n */\n\n/*\n * All PCjs components now use JSDoc types, primarily so that Google's Closure Compiler will compile\n * everything with zero warnings when ADVANCED_OPTIMIZATIONS are enabled.  For more information about\n * the JSDoc types supported by the Closure Compiler:\n *\n *      https://developers.google.com/closure/compiler/docs/js-for-compiler#types\n *\n * I also attempted to validate this code with JSLint, but it complained too much; eg, it didn't like\n * \"while (true)\", a tried and \"true\" programming convention for decades, and it wanted me to replace\n * all \"++\" and \"--\" operators with \"+= 1\" and \"-= 1\", use \"(s || '')\" instead of \"(s? s : '')\", etc.\n *\n * I prefer sticking with traditional C-style idioms, in part because they are more portable.  That\n * does NOT mean I'm trying to write \"portable JavaScript,\" but some of this code was ported from C code\n * I'd written long ago, so portability is good, and I'm not going to throw that away if there's no need.\n *\n * UPDATE: I've since switched from JSLint to JSHint, which seems to have more reasonable defaults.\n * And for new code, I have adopted some popular JavaScript idioms, like \"(s || '')\", although the need\n * for those kinds of expressions will be reduced as I also start adopting some ES6 features, like\n * default parameters.\n */\n\n\n/**\n * Since the Closure Compiler treats ES6 classes as @struct rather than @dict by default,\n * it deters us from defining named properties on our components; eg:\n *\n *      this['exports'] = {...}\n *\n * results in an error:\n *\n *      Cannot do '[]' access on a struct\n *\n * So, in order to define 'exports', we must override the @struct assumption by annotating\n * the class as @unrestricted (or @dict).  Note that this must be done both here and in the\n * subclass (eg, SerialPort), because otherwise the Compiler won't allow us to *reference*\n * the named property either.\n *\n * TODO: Consider marking ALL our classes unrestricted, because otherwise it forces us to\n * define every single property the class uses in its constructor, which results in a fair\n * bit of redundant initialization, since many properties aren't (and don't need to be) fully\n * initialized until the appropriate init(), reset(), restore(), etc. function is called.\n *\n * The upside, however, may be that since the structure of the class is completely defined by\n * the constructor, JavaScript engines may be able to optimize and run more efficiently.\n *\n * @unrestricted\n */\nclass Component {\n    /**\n     * Component(type, parms, bitsMessage)\n     *\n     * A Component object requires:\n     *\n     *      type: a user-defined type name (eg, \"CPU\")\n     *\n     * and accepts any or all of the following (parms) properties:\n     *\n     *      id: component ID (default is \"\")\n     *      name: component name (default is \"\"; if blank, toString() will use the type name only)\n     *      comment: component comment string (default is undefined)\n     *\n     * Component subclasses will usually have additional (parms) properties.\n     *\n     * @param {string} type\n     * @param {Object} [parms]\n     * @param {number} [bitsMessage] selects message(s) that the component wants to enable (default is 0)\n     */\n    constructor(type, parms, bitsMessage)\n    {\n        this.type = type;\n\n        if (!parms) parms = {'id': \"\", 'name': \"\"};\n\n        this.id = parms['id'] || \"\";\n        this.name = parms['name'];\n        this.comment = parms['comment'];\n        this.parms = parms;\n\n        /*\n         * The following Component properties need to be accessible by other machines and/or command scripts;\n         * well, OK, or we could have exported some new functions to walk the contents of these properties, as we\n         * did with findMachineComponent(), but this works just as well.\n         *\n         * Also, while the double-assignment looks silly (ie, using both dot and bracket property notation), it\n         * resolves a complaint from the Closure Compiler, because if we use ONLY bracket notation here, then the\n         * Compiler wants us to change all the other references to bracket notation as well.\n         */\n        this.exports = this['exports'] = {};\n        this.bindings = this['bindings'] = {};\n\n        var i = this.id.indexOf('.');\n        if (i < 0) {\n            this.idComponent = this.id;\n        } else {\n            this.idMachine = this.id.substr(0, i);\n            this.idComponent = this.id.substr(i + 1);\n        }\n\n        /*\n         * Gather all the various component flags (booleans) into a single \"flags\" object, and encourage\n         * subclasses to do the same, to reduce the property clutter we have to wade through while debugging.\n         */\n        this.flags = {\n            ready:      false,\n            busy:       false,\n            busyCancel: false,\n            initDone:   false,\n            powered:    false,\n            unloading:  false,\n            error:      false\n        };\n\n        this.fnReady = null;\n        this.clearError();\n        this.bitsMessage = bitsMessage || 0;\n\n        this.cmp = null;\n        this.bus = null;\n        this.cpu = null;\n        this.dbg = null;\n\n        /*\n         * TODO: Consider adding another parameter to the Component() constructor that allows components to tell\n         * us if they support single or multiple instances per machine.  For example, there can be multiple SerialPort\n         * components per machine, but only one CPU component (some machines also support an FPU, but that component\n         * is considered separate from the CPU).\n         *\n         * It's not critical, but it would help catch machine configuration errors; for example, a machine that mistakenly\n         * includes two CPU components may, aside from wasting memory, end up with odd side-effects, like unresponsive\n         * CPU controls.\n         */\n        Component.add(this);\n    }\n\n    /**\n     * Component.add(component)\n     *\n     * @param {Component} component\n     */\n    static add(component)\n    {\n        /*\n         * This just generates a lot of useless noise, handy in the early days, not so much these days....\n         *\n         *      if (DEBUG) Component.log(\"Component.add(\" + component.type + \",\" + component.id + \")\");\n         */\n        Component.components.push(component);\n    }\n\n    /**\n     * Component.addMachine(idMachine)\n     *\n     * @param {string} idMachine\n     */\n    static addMachine(idMachine)\n    {\n        Component.machines[idMachine] = {};\n    }\n\n    /**\n     * Component.addMachineResource(idMachine, sName, data)\n     *\n     * @param {string} idMachine\n     * @param {string|null} sName (name of the resource)\n     * @param {*} data\n     */\n    static addMachineResource(idMachine, sName, data)\n    {\n        /*\n         * I used to assert(Component.machines[idMachine]), but when we're running as a Node app, embed.js is not used,\n         * so addMachine() is never called, so resources do not need to be recorded.\n         */\n        if (Component.machines[idMachine] && sName) {\n            Component.machines[idMachine][sName] = data;\n        }\n    }\n\n    /**\n     * Component.getMachineResources(idMachine)\n     *\n     * @param {string} idMachine\n     * @return {Object|undefined}\n     */\n    static getMachineResources(idMachine)\n    {\n        return Component.machines[idMachine];\n    }\n\n    /**\n     * Component.getTime()\n     *\n     * @return {number} the current time, in milliseconds\n     */\n    static getTime()\n    {\n        return Date.now() || +new Date();\n    }\n\n    /**\n     * Component.log(s, type)\n     *\n     * For diagnostic output only.\n     *\n     * @param {string} [s] is the message text\n     * @param {string} [type] is the message type\n     */\n    static log(s, type)\n    {\n        if (!COMPILED) {\n            if (s) {\n                var sElapsed = \"\", sMsg = (type? (type + \": \") : \"\") + s;\n                if (typeof Usr != \"undefined\") {\n                    if (Component.msStart === undefined) {\n                        Component.msStart = Component.getTime();\n                    }\n                    sElapsed = (Component.getTime() - Component.msStart) + \"ms: \";\n                }\n                sMsg = sMsg.replace(/\\r/g, '\\\\r').replace(/\\n/g, ' ');\n                if (window && window.console) console.log(sElapsed + sMsg);\n            }\n        }\n    }\n\n    /**\n     * Component.assert(f, s)\n     *\n     * Verifies conditions that must be true (for DEBUG builds only).\n     *\n     * The Closure Compiler should automatically remove all references to Component.assert() in non-DEBUG builds.\n     * TODO: Add a task to the build process that \"asserts\" there are no instances of \"assertion failure\" in RELEASE builds.\n     *\n     * @param {boolean} f is the expression we are asserting to be true\n     * @param {string} [s] is description of the assertion on failure\n     */\n    static assert(f, s)\n    {\n        if (DEBUG) {\n            if (!f) {\n                if (!s) s = \"assertion failure\";\n                Component.log(s);\n                throw new Error(s);\n            }\n        }\n    }\n\n    /**\n     * Component.print(s)\n     *\n     * Components that inherit from this class should use this.print(), rather than Component.print(), because\n     * if a Control Panel is loaded, it will override only the instance method, not the class method (overriding the\n     * class method would improperly affect any other machines loaded on the same page).\n     *\n     * @this {Component}\n     * @param {string} s\n     */\n    static print(s)\n    {\n        if (!COMPILED) {\n            var i = s.lastIndexOf('\\n');\n            if (i >= 0) {\n                Component.println(s.substr(0, i));\n                s = s.substr(i + 1);\n            }\n            Component.printBuffer += s;\n        }\n    }\n\n    /**\n     * Component.println(s, type, id)\n     *\n     * Components that inherit from this class should use this.println(), rather than Component.println(), because\n     * if a Control Panel is loaded, it will override only the instance method, not the class method (overriding the\n     * class method would improperly affect any other machines loaded on the same page).\n     *\n     * @param {string} [s] is the message text\n     * @param {string} [type] is the message type\n     * @param {string} [id] is the caller's ID, if any\n     */\n    static println(s, type, id)\n    {\n        if (!COMPILED) {\n            s = Component.printBuffer + (s || \"\");\n            Component.log((id? (id + \": \") : \"\") + (s? (\"\\\"\" + s + \"\\\"\") : \"\"), type);\n            Component.printBuffer = \"\";\n        }\n    }\n\n    /**\n     * Component.notice(s, fPrintOnly, id)\n     *\n     * notice() is like println() but implies a need for user notification, so we alert() as well.\n     *\n     * @param {string} s is the message text\n     * @param {boolean} [fPrintOnly]\n     * @param {string} [id] is the caller's ID, if any\n     * @return {boolean}\n     */\n    static notice(s, fPrintOnly, id)\n    {\n        if (!COMPILED) {\n            Component.println(s, Component.PRINT.NOTICE, id);\n        }\n        if (!fPrintOnly) Component.alertUser((id? (id + \": \") : \"\") + s);\n        return true;\n    }\n\n    /**\n     * Component.warning(s)\n     *\n     * @param {string} s describes the warning\n     */\n    static warning(s)\n    {\n        if (!COMPILED) {\n            Component.println(s, Component.PRINT.WARNING);\n        }\n        Component.alertUser(s);\n    }\n\n    /**\n     * Component.error(s)\n     *\n     * @param {string} s describes the error; an alert() is displayed as well\n     */\n    static error(s)\n    {\n        if (!COMPILED) {\n            Component.println(s, Component.PRINT.ERROR);\n        }\n        Component.alertUser(s);\n    }\n\n    /**\n     * Component.alertUser(sMessage)\n     *\n     * @param {string} sMessage\n     */\n    static alertUser(sMessage)\n    {\n        if (window) {\n            window.alert(sMessage);\n        } else {\n            Component.log(sMessage);\n        }\n    }\n\n    /**\n     * Component.confirmUser(sPrompt)\n     *\n     * @param {string} sPrompt\n     * @returns {boolean} true if the user clicked OK, false if Cancel/Close\n     */\n    static confirmUser(sPrompt)\n    {\n        var fResponse = false;\n        if (window) {\n            fResponse = window.confirm(sPrompt);\n        }\n        return fResponse;\n    }\n\n    /**\n     * Component.promptUser()\n     *\n     * @param {string} sPrompt\n     * @param {string} [sDefault]\n     * @returns {string|null}\n     */\n    static promptUser(sPrompt, sDefault)\n    {\n        var sResponse = null;\n        if (window) {\n            sResponse = window.prompt(sPrompt, sDefault === undefined? \"\" : sDefault);\n        }\n        return sResponse;\n    }\n\n    /**\n     * Component.appendControl(control, sText)\n     *\n     * @param {Object} control\n     * @param {string} sText\n     */\n    static appendControl(control, sText)\n    {\n        control.value += sText;\n        /*\n         * Prevent the <textarea> from getting too large; otherwise, printing becomes slower and slower.\n         */\n        if (COMPILED) {\n            sText = control.value;\n            if (sText.length > 8192) control.value = sText.substr(sText.length - 4096);\n        }\n        control.scrollTop = control.scrollHeight;\n    }\n\n    /**\n     * Component.replaceControl(control, sSearch, sReplace)\n     *\n     * @param {Object} control\n     * @param {string} sSearch\n     * @param {string} sReplace\n     */\n    static replaceControl(control, sSearch, sReplace)\n    {\n        var sText = control.value;\n        var i = sText.lastIndexOf(sSearch);\n        if (i < 0) {\n            sText += sSearch + '\\n';\n        } else {\n            sText = sText.substr(0, i) + sReplace + sText.substr(i + sSearch.length);\n        }\n        /*\n         * Prevent the <textarea> from getting too large; otherwise, printing becomes slower and slower.\n         */\n        if (COMPILED && sText.length > 8192) sText = sText.substr(sText.length - 4096);\n        control.value = sText;\n        control.scrollTop = control.scrollHeight;\n    }\n\n    /**\n     * Component.bindExternalControl(component, sControl, sBinding, sType)\n     *\n     * @param {Component} component\n     * @param {string} sControl\n     * @param {string} sBinding\n     * @param {string} [sType] is the external component type\n     */\n    static bindExternalControl(component, sControl, sBinding, sType)\n    {\n        if (sControl) {\n            if (sType === undefined) sType = \"Panel\";\n            var target = Component.getComponentByType(sType, component.id);\n            if (target) {\n                var eBinding = target.bindings[sControl];\n                if (eBinding) {\n                    component.setBinding(null, sBinding, eBinding);\n                }\n            }\n        }\n    }\n\n    /**\n     * Component.bindComponentControls(component, element, sAppClass)\n     *\n     * @param {Component} component\n     * @param {HTMLElement} element from the DOM\n     * @param {string} sAppClass\n     */\n    static bindComponentControls(component, element, sAppClass)\n    {\n        var aeControls = Component.getElementsByClass(element.parentNode, sAppClass + \"-control\");\n\n        for (var iControl = 0; iControl < aeControls.length; iControl++) {\n\n            var aeChildNodes = aeControls[iControl].childNodes;\n\n            for (var iNode = 0; iNode < aeChildNodes.length; iNode++) {\n                var control = aeChildNodes[iNode];\n                if (control.nodeType !== 1 /* document.ELEMENT_NODE */) {\n                    continue;\n                }\n                var sClass = control.getAttribute(\"class\");\n                if (!sClass) continue;\n                var aClasses = sClass.split(\" \");\n                for (var iClass = 0; iClass < aClasses.length; iClass++) {\n                    var parms;\n                    sClass = aClasses[iClass];\n                    switch (sClass) {\n                        case sAppClass + \"-binding\":\n                            parms = Component.getComponentParms(/** @type {HTMLElement} */(control));\n                            if (parms && parms['binding']) {\n                                component.setBinding(parms['type'], parms['binding'], /** @type {HTMLElement} */(control), parms['value']);\n                            } else if (!parms || parms['type'] != \"description\") {\n                                Component.log(\"Component '\" + component.toString() + \"' missing binding\" + (parms? \" for \" + parms['type'] : \"\"), \"warning\");\n                            }\n                            iClass = aClasses.length;\n                            break;\n                        default:\n                            // if (DEBUG) Component.log(\"Component.bindComponentControls(\" + component.toString() + \"): unrecognized control class \\\"\" + sClass + \"\\\"\", \"warning\");\n                            break;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Component.getComponents(idRelated)\n     *\n     * We could store components as properties, using the component's ID, and change\n     * this linear lookup into a property lookup, but some components may have no ID.\n     *\n     * @param {string} [idRelated] of related component\n     * @return {Array} of components\n     */\n    static getComponents(idRelated)\n    {\n        var i;\n        var aComponents = [];\n        /*\n         * getComponentByID(id, idRelated)\n         *\n         * If idRelated is provided, we check it for a machine prefix, and use any\n         * existing prefix to constrain matches to IDs with the same prefix, in order to\n         * avoid matching components belonging to other machines.\n         */\n        if (idRelated) {\n            if ((i = idRelated.indexOf('.')) > 0)\n                idRelated = idRelated.substr(0, i + 1);\n            else\n                idRelated = \"\";\n        }\n        for (i = 0; i < Component.components.length; i++) {\n            var component = Component.components[i];\n            if (!idRelated || !component.id.indexOf(idRelated)) {\n                aComponents.push(component);\n            }\n        }\n        return aComponents;\n    }\n\n    /**\n     * Component.getComponentByID(id, idRelated)\n     *\n     * We could store components as properties, using the component's ID, and change\n     * this linear lookup into a property lookup, but some components may have no ID.\n     *\n     * @param {string} id of the desired component\n     * @param {string} [idRelated] of related component\n     * @return {Component|null}\n     */\n    static getComponentByID(id, idRelated)\n    {\n        if (id !== undefined) {\n            var i;\n            /*\n             * If idRelated is provided, we check it for a machine prefix, and use any\n             * existing prefix to constrain matches to IDs with the same prefix, in order to\n             * avoid matching components belonging to other machines.\n             */\n            if (idRelated && (i = idRelated.indexOf('.')) > 0) {\n                id = idRelated.substr(0, i + 1) + id;\n            }\n            for (i = 0; i < Component.components.length; i++) {\n                if (Component.components[i].id === id) {\n                    return Component.components[i];\n                }\n            }\n            if (Component.components.length) {\n                Component.log(\"Component ID '\" + id + \"' not found\", \"warning\");\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Component.getComponentByType(sType, idRelated, componentPrev)\n     *\n     * @param {string} sType of the desired component\n     * @param {string} [idRelated] of related component\n     * @param {Component|null} [componentPrev] of previously returned component, if any\n     * @return {Component|null}\n     */\n    static getComponentByType(sType, idRelated, componentPrev)\n    {\n        if (sType !== undefined) {\n            var i;\n            /*\n             * If idRelated is provided, we check it for a machine prefix, and use any\n             * existing prefix to constrain matches to IDs with the same prefix, in order to\n             * avoid matching components belonging to other machines.\n             */\n            if (idRelated) {\n                if ((i = idRelated.indexOf('.')) > 0) {\n                    idRelated = idRelated.substr(0, i + 1);\n                } else {\n                    idRelated = \"\";\n                }\n            }\n            for (i = 0; i < Component.components.length; i++) {\n                if (componentPrev) {\n                    if (componentPrev == Component.components[i]) componentPrev = null;\n                    continue;\n                }\n                if (sType == Component.components[i].type && (!idRelated || !Component.components[i].id.indexOf(idRelated))) {\n                    return Component.components[i];\n                }\n            }\n            Component.log(\"Component type '\" + sType + \"' not found\", \"warning\");\n        }\n        return null;\n    }\n\n    /**\n     * Component.getComponentParms(element)\n     *\n     * @param {HTMLElement} element from the DOM\n     */\n    static getComponentParms(element)\n    {\n        var parms = null;\n        var sParms = element.getAttribute(\"data-value\");\n        if (sParms) {\n            try {\n                parms = eval('(' + sParms + ')');   // jshint ignore:line\n                /*\n                 * We can no longer invoke removeAttribute() because some components (eg, Panel) need\n                 * to run their initXXX() code more than once, to avoid initialization-order dependencies.\n                 *\n                 *      if (!DEBUG) {\n                 *          element.removeAttribute(\"data-value\");\n                 *      }\n                 */\n            } catch(e) {\n                Component.error(e.message + \" (\" + sParms + \")\");\n            }\n        }\n        return parms;\n    }\n\n    /**\n     * Component.getElementsByClass(element, sClass, sObjClass)\n     *\n     * This is a cross-browser helper function, since not all browser's support getElementsByClassName()\n     *\n     * TODO: This should probably be moved into weblib.js at some point, along with the control binding functions above,\n     * to keep all the browser-related code together.\n     *\n     * @param {HTMLDocument|HTMLElement|Node} element from the DOM\n     * @param {string} sClass\n     * @param {string} [sObjClass]\n     * @return {Array|NodeList}\n     */\n    static getElementsByClass(element, sClass, sObjClass)\n    {\n        if (sObjClass) sClass += '-' + sObjClass + \"-object\";\n        /*\n         * Use the browser's built-in getElementsByClassName() if it appears to be available\n         * (for example, it's not available in IE8, but it should be available in IE9 and up)\n         */\n        if (element.getElementsByClassName) {\n            return element.getElementsByClassName(sClass);\n        }\n        var i, j, ae = [];\n        var aeAll = element.getElementsByTagName(\"*\");\n        var re = new RegExp('(^| )' + sClass + '( |$)');\n        for (i = 0, j = aeAll.length; i < j; i++) {\n            if (re.test(aeAll[i].className)) {\n                ae.push(aeAll[i]);\n            }\n        }\n        if (!ae.length) {\n            Component.log('No elements of class \"' + sClass + '\" found');\n        }\n        return ae;\n    }\n\n    /**\n     * Component.getScriptCommands(sScript)\n     *\n     * This is a simple parser that breaks sScript into an array of commands, where each command\n     * is an array of tokens, where tokens are sequences of characters separated by any of: tab, space,\n     * carriage-return (CR), line-feed (LF), semicolon, single-quote, or double-quote; if a quote is\n     * used, all characters up to the next matching quote become part of the token, allowing any of the\n     * other separators to be part of the token.  CR, LF and semicolon also serve to terminate a command,\n     * with semicolon being preferred, because it's 1) more visible, and 2) essential when the entire\n     * script is a multi-line string where all CR/LF were replaced by spaces (which is what Jekyll does,\n     * and since we can't change Jekyll, it's what our own MarkDown Front Matter parser does as well;\n     * see convertMD() in markout.js, where the aCommandDefs array is built).\n     *\n     * Backslash sequences like \\n, \\r, and \\\\ have already been converted to LF, CR and backslash\n     * characters, since the entire script string is injected into a JavaScript function call, so any\n     * backslash sequence that JavaScript supports is automatically converted:\n     *\n     *      \\0  \\'  \\\"  \\\\  \\n  \\r  \\v  \\t  \\b  \\f  \\uXXXX \\xXX\n     *                      ^J  ^M  ^K  ^I  ^H  ^L\n     *\n     * To support any other non-printable 8-bit character, such as ESC, you should use \\xXX, where XX\n     * is the ASCII code in hex.  For ESC, that would be \\x1B.\n     *\n     * @param {string} sScript\n     * @return {Array}\n     */\n    static getScriptCommands(sScript)\n    {\n        var cch = sScript.length;\n        var aCommands = [], aTokens = [], sToken = \"\", chQuote = null;\n        for (var i = 0; i < cch; i++) {\n            var ch = sScript[i];\n            if (ch == '\"' || ch == \"'\") {\n                if (chQuote && ch != chQuote) {\n                    sToken += ch;\n                    continue;\n                }\n                if (!chQuote) {\n                    chQuote = ch;\n                } else {\n                    chQuote = null;\n                }\n                if (sToken) {\n                    aTokens.push(sToken);\n                    sToken = \"\";\n                }\n                continue;\n            }\n            if (!chQuote) {\n                if (ch == '\\r' || ch == '\\n') {\n                    ch = ';';\n                }\n                if (ch == ' ' || ch == '\\t' || ch == ';') {\n                    if (sToken) {\n                        aTokens.push(sToken);\n                        sToken = \"\";\n                    }\n                    if (ch == ';' && aTokens.length) {\n                        aCommands.push(aTokens);\n                        aTokens = [];\n                    }\n                    continue;\n                }\n            }\n            sToken += ch;\n        }\n        if (sToken) {\n            aTokens.push(sToken);\n        }\n        if (aTokens.length) {\n            aCommands.push(aTokens);\n        }\n        return aCommands;\n    }\n\n    /**\n     * Component.processScript(idMachine, sScript)\n     *\n     * @param {string} idMachine\n     * @param {string} [sScript]\n     * @return {boolean}\n     */\n    static processScript(idMachine, sScript)\n    {\n        var fSuccess = false;\n        idMachine += \".machine\";\n        if (!sScript) {\n            delete Component.commands[idMachine];\n            fSuccess = true;\n        }\n        else if (typeof sScript == \"string\" && !Component.commands[idMachine]) {\n            fSuccess = true;\n            Component.commands[idMachine] = Component.getScriptCommands(sScript);\n            if (!Component.processCommands(idMachine)) {\n                fSuccess = false;\n            }\n        }\n        return fSuccess;\n    }\n\n    /**\n     * Component.processCommands(idMachine)\n     *\n     * @param {string} idMachine\n     * @return {boolean}\n     */\n    static processCommands(idMachine)\n    {\n        var fSuccess = true;\n        var aCommands = Component.commands[idMachine];\n\n     // var dbg = Component.getComponentByType(\"Debugger\", idMachine);\n\n        while (aCommands && aCommands.length) {\n\n            var aTokens = aCommands.splice(0, 1)[0];\n            var sCommand = aTokens[0];\n\n            /*\n             * It's possible to route this output to the Debugger window with dbg.println()\n             * instead, but it's a bit too confusing mingling script output in a window that\n             * already mingles Debugger and machine output.\n             */\n            Component.println(aTokens.join(' '), Component.PRINT.SCRIPT);\n\n            var fnCallReady = null;\n            if (Component.asyncCommands.indexOf(sCommand) >= 0) {\n                fnCallReady = function processNextCommand() {\n                    return function() {\n                        Component.processCommands(idMachine);\n                    }\n                }();\n            }\n\n            var fnCommand = Component.globalCommands[sCommand];\n            if (fnCommand) {\n                if (!fnCallReady) {\n                    fSuccess = fnCommand(aTokens[1], aTokens[2], aTokens[3]);\n                } else {\n                    if (!fnCommand(fnCallReady, aTokens[1], aTokens[2], aTokens[3])) break;\n                }\n            }\n            else {\n                fSuccess = false;\n                var component = Component.getComponentByType(aTokens[1], idMachine);\n                if (component) {\n                    fnCommand = Component.componentCommands[sCommand];\n                    if (fnCommand) {\n                        fSuccess = fnCommand(component, aTokens[2], aTokens[3]);\n                    }\n                    else {\n                        var exports = component['exports'];\n                        if (exports) {\n                            fnCommand = exports[sCommand];\n                            if (fnCommand) {\n                                fSuccess = true;\n                                if (!fnCallReady) {\n                                    fSuccess = fnCommand.call(component, aTokens[2], aTokens[3]);\n                                } else {\n                                    if (!fnCommand.call(component, fnCallReady, aTokens[2], aTokens[3])) break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (!fSuccess) {\n                Component.alertUser(\"Script error: '\" + sCommand + (fnCommand? \" failed\" : \" unrecognized\"));\n                break;\n            }\n        }\n\n        if (aCommands && !aCommands.length) {\n            delete Component.commands[idMachine];\n        }\n\n        return fSuccess;\n    }\n\n    /**\n     * Component.scriptAlert(sMessage)\n     *\n     * @param {string} sMessage\n     * @return {boolean}\n     */\n    static scriptAlert(sMessage)\n    {\n        Component.alertUser(sMessage);\n        return true;\n    }\n\n    /**\n     * Component.scriptSelect(component, sBinding, sValue)\n     *\n     * @param {Component} component\n     * @param {string} sBinding\n     * @param {string} sValue\n     * @return {boolean}\n     */\n    static scriptSelect(component, sBinding, sValue)\n    {\n        var fSuccess = false;\n        var aBindings = component['bindings'];\n        var control = aBindings[sBinding];\n        if (control) {\n            for (var i = 0; i < control.options.length; i++) {\n                if (control.options[i].textContent == sValue) {\n                    if (control.selectedIndex != i) {\n                        control.selectedIndex = i;\n                    }\n                    fSuccess = true;\n                    break;\n                }\n            }\n        }\n        return fSuccess;\n    }\n\n    /**\n     * Component.scriptSleep(fnCallback, sDelay)\n     *\n     * @param {function()} fnCallback\n     * @param {string} sDelay (in milliseconds)\n     * @return {boolean}\n     */\n    static scriptSleep(fnCallback, sDelay)\n    {\n        setTimeout(fnCallback, +sDelay);\n        return false;\n    }\n\n    /**\n     * toString()\n     *\n     * @this {Component}\n     * @return {string}\n     */\n    toString()\n    {\n        return (this.name? this.name : (this.id || this.type));\n    }\n\n    /**\n     * getMachineNum()\n     *\n     * @this {Component}\n     * @return {number} unique machine number\n     */\n    getMachineNum()\n    {\n        var nMachine = 1;\n        if (this.idMachine) {\n            var aDigits = this.idMachine.match(/\\d+/);\n            if (aDigits !== null)\n                nMachine = parseInt(aDigits[0], 10);\n        }\n        return nMachine;\n    }\n\n    /**\n     * setBinding(sHTMLType, sBinding, control, sValue)\n     *\n     * Component's setBinding() method is intended to be overridden by subclasses.\n     *\n     * @this {Component}\n     * @param {string|null} sHTMLType is the type of the HTML control (eg, \"button\", \"list\", \"text\", \"submit\", \"textarea\", \"canvas\")\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, 'print')\n     * @param {HTMLElement} control is the HTML control DOM object (eg, HTMLButtonElement)\n     * @param {string} [sValue] optional data value\n     * @return {boolean} true if binding was successful, false if unrecognized binding request\n     */\n    setBinding(sHTMLType, sBinding, control, sValue)\n    {\n        switch (sBinding) {\n        case 'clear':\n            if (!this.bindings[sBinding]) {\n                this.bindings[sBinding] = control;\n                control.onclick = (function(component) {\n                    return function clearControl() {\n                        if (component.bindings['print']) {\n                            component.bindings['print'].value = \"\";\n                        }\n                    };\n                }(this));\n            }\n            return true;\n        case 'print':\n            if (!this.bindings[sBinding]) {\n                var controlTextArea = /** @type {HTMLTextAreaElement} */(control);\n                this.bindings[sBinding] = controlTextArea;\n                /**\n                 * Override this.notice() with a replacement function that eliminates the Component.alertUser() call.\n                 *\n                 * @this {Component}\n                 * @param {string} s\n                 * @return {boolean}\n                 */\n                this.notice = function noticeControl(s /*, fPrintOnly, id*/) {\n                    this.println(s, this.type);\n                    return true;\n                };\n                /*\n                 * This was added for Firefox (Safari will clear the <textarea> on a page reload, but Firefox does not).\n                 */\n                controlTextArea.value = \"\";\n                this.print = function(control) {\n                    return function printControl(s) {\n                        Component.appendControl(control, s);\n                    };\n                }(controlTextArea);\n                this.println = function(component, control) {\n                    return function printlnControl(s, type, id) {\n                        if (!s) s = \"\";\n                        if (type != Component.PRINT.PROGRESS || s.slice(-3) != \"...\") {\n                            if (type) s = type + \": \" + s;\n                            Component.appendControl(control, s + '\\n');\n                        } else {\n                            Component.replaceControl(control, s, s + '.');\n                        }\n                        if (!COMPILED && window && window.console) Component.println(s, type, id);\n                    };\n                }(this, controlTextArea);\n            }\n            return true;\n        default:\n            return false;\n        }\n    }\n\n    /**\n     * log(s, type)\n     *\n     * For diagnostic output only.\n     *\n     * WARNING: Even though this function's body is completely wrapped in DEBUG, that won't prevent the Closure Compiler\n     * from including it, so all calls must still be prefixed with \"if (DEBUG) ....\".  For this reason, the class method,\n     * Component.log(), is preferred, because the compiler IS smart enough to remove those calls.\n     *\n     * @this {Component}\n     * @param {string} [s] is the message text\n     * @param {string} [type] is the message type\n     */\n    log(s, type)\n    {\n        if (!COMPILED) {\n            Component.log(s, type || this.id || this.type);\n        }\n    }\n\n    /**\n     * assert(f, s)\n     *\n     * Verifies conditions that must be true (for DEBUG builds only).\n     *\n     * WARNING: Make sure you preface all calls to this.assert() with \"if (DEBUG)\", because unlike Component.assert(),\n     * the Closure Compiler can't be sure that this instance method hasn't been overridden, so it refuses to treat it as\n     * dead code in non-DEBUG builds.\n     *\n     * TODO: Add a task to the build process that \"asserts\" there are no instances of \"assertion failure\" in RELEASE builds.\n     *\n     * @this {Component}\n     * @param {boolean|number} f is the expression asserted to be true\n     * @param {string} [s] is a description of the assertion to be displayed or logged on failure\n     */\n    assert(f, s)\n    {\n        if (DEBUG) {\n            if (!f) {\n                s = \"assertion failure in \" + (this.id || this.type) + (s? \": \" + s : \"\");\n                if (DEBUGGER && this.dbg) {\n                    this.dbg.stopCPU();\n                    /*\n                     * Why do we throw an Error only to immediately catch and ignore it?  Simply to give\n                     * any IDE the opportunity to inspect the application's state.  Even when the IDE has\n                     * control, you should still be able to invoke Debugger commands from the IDE's REPL,\n                     * using the global function that the Debugger constructor defines; eg:\n                     *\n                     *      pcx86('r')\n                     *      pcx86('dw 0:0')\n                     *      pcx86('h')\n                     *      ...\n                     *\n                     * If you have no desire to stop on assertions, consider this a no-op.  However, another\n                     * potential benefit of creating an Error object is that, for browsers like Chrome, we get\n                     * a stack trace, too.\n                     */\n                    try {\n                        throw new Error(s);\n                    } catch(e) {\n                        this.println(e.stack || e.message);\n                    }\n                    return;\n                }\n                this.log(s);\n                throw new Error(s);\n            }\n        }\n    }\n\n    /**\n     * print(s)\n     *\n     * Components using this.print() should wait until after their constructor has run to display any messages, because\n     * if a Control Panel has been loaded, its override will not take effect until its own constructor has run.\n     *\n     * @this {Component}\n     * @param {string} s\n     */\n    print(s)\n    {\n        Component.print(s);\n    }\n\n    /**\n     * println(s, type, id)\n     *\n     * Components using this.println() should wait until after their constructor has run to display any messages, because\n     * if a Control Panel has been loaded, its override will not take effect until its own constructor has run.\n     *\n     * @this {Component}\n     * @param {string} [s] is the message text\n     * @param {string} [type] is the message type\n     * @param {string} [id] is the caller's ID, if any\n     */\n    println(s, type, id)\n    {\n        Component.println(s, type, id || this.id);\n    }\n\n    /**\n     * status(s)\n     *\n     * status() is like println() but it also includes information about the component (ie, the component type),\n     * which is why there is no corresponding Component.status() function.\n     *\n     * @this {Component}\n     * @param {string} s is the message text\n     */\n    status(s)\n    {\n        this.println(this.type + \": \" + s);\n    }\n\n    /**\n     * notice(s, fPrintOnly, id)\n     *\n     * notice() is like println() but implies a need for user notification, so we alert() as well; however, if this.println()\n     * is overridden, this.notice will be replaced with a similar override, on the assumption that the override is taking care\n     * of alerting the user.\n     *\n     * @this {Component}\n     * @param {string} s is the message text\n     * @param {boolean} [fPrintOnly]\n     * @param {string} [id] is the caller's ID, if any\n     * @return {boolean}\n     */\n    notice(s, fPrintOnly, id)\n    {\n        if (!fPrintOnly) {\n            /*\n             * See if the associated computer, if any, is \"unloading\"....\n             */\n            var computer = Component.getComponentByType(\"Computer\", this.id);\n            if (computer && computer.flags.unloading) {\n                console.log(\"ignoring notice during unload: \" + s);\n                return false;\n            }\n        }\n        Component.notice(s, fPrintOnly, id || this.type);\n        return true;\n    }\n\n    /**\n     * setError(s)\n     *\n     * Set a fatal error condition\n     *\n     * @this {Component}\n     * @param {string} s describes a fatal error condition\n     */\n    setError(s)\n    {\n        this.flags.error = true;\n        this.notice(s);         // TODO: Any cases where we should still prefix this string with \"Fatal error: \"?\n    }\n\n    /**\n     * clearError()\n     *\n     * Clear any fatal error condition\n     *\n     * @this {Component}\n     */\n    clearError() {\n        this.flags.error = false;\n    }\n\n    /**\n     * isError()\n     *\n     * Report any fatal error condition\n     *\n     * @this {Component}\n     * @return {boolean} true if a fatal error condition exists, false if not\n     */\n    isError()\n    {\n        if (this.flags.error) {\n            this.println(this.toString() + \" error\");\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * isReady(fnReady)\n     *\n     * Return the \"ready\" state of the component; if the component is not ready, it will queue the optional\n     * notification function, otherwise it will immediately call the notification function, if any, without queuing it.\n     *\n     * NOTE: Since only the Computer component actually cares about the \"readiness\" of other components, the so-called\n     * \"queue\" of notification functions supports exactly one function.  This keeps things nice and simple.\n     *\n     * @this {Component}\n     * @param {function()} [fnReady]\n     * @return {boolean} true if the component is in a \"ready\" state, false if not\n     */\n    isReady(fnReady)\n    {\n        if (fnReady) {\n            if (this.flags.ready) {\n                fnReady();\n            } else {\n                if (MAXDEBUG) this.log(\"NOT ready\");\n                this.fnReady = fnReady;\n            }\n        }\n        return this.flags.ready;\n    }\n\n    /**\n     * setReady(fReady)\n     *\n     * Set the \"ready\" state of the component to true, and call any queued notification functions.\n     *\n     * @this {Component}\n     * @param {boolean} [fReady] is assumed to indicate \"ready\" unless EXPLICITLY set to false\n     */\n    setReady(fReady)\n    {\n        if (!this.flags.error) {\n            this.flags.ready = (fReady !== false);\n            if (this.flags.ready) {\n                if (MAXDEBUG /* || this.name */) this.log(\"ready\");\n                var fnReady = this.fnReady;\n                this.fnReady = null;\n                if (fnReady) fnReady();\n            }\n        }\n    }\n\n    /**\n     * isBusy(fCancel)\n     *\n     * Return the \"busy\" state of the component\n     *\n     * @this {Component}\n     * @param {boolean} [fCancel] is set to true to cancel a \"busy\" state\n     * @return {boolean} true if \"busy\", false if not\n     */\n    isBusy(fCancel)\n    {\n        if (this.flags.busy) {\n            if (fCancel) {\n                this.flags.busyCancel = true;\n            } else if (fCancel === undefined) {\n                this.println(this.toString() + \" busy\");\n            }\n        }\n        return this.flags.busy;\n    }\n\n    /**\n     * setBusy(fBusy)\n     *\n     * Update the current busy state; if a busyCancel request is pending, it will be honored now.\n     *\n     * @this {Component}\n     * @param {boolean} fBusy\n     * @return {boolean}\n     */\n    setBusy(fBusy)\n    {\n        if (this.flags.busyCancel) {\n            this.flags.busy = false;\n            this.flags.busyCancel = false;\n            return false;\n        }\n        if (this.flags.error) {\n            this.println(this.toString() + \" error\");\n            return false;\n        }\n        this.flags.busy = fBusy;\n        return this.flags.busy;\n    }\n\n    /**\n     * powerUp(fSave)\n     *\n     * @this {Component}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower] is true if this is \"repower\" notification\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        this.flags.powered = true;\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {Component}\n     * @param {boolean} fSave\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        if (fShutdown) this.flags.powered = false;\n        return true;\n    }\n\n    /**\n     * messageEnabled(bitsMessage)\n     *\n     * If bitsMessage is not specified, the component's MESSAGE category is used.\n     *\n     * @this {Component}\n     * @param {number} [bitsMessage] is zero or more MESSAGE_* category flag(s)\n     * @return {boolean} true if all specified message enabled, false if not\n     */\n    messageEnabled(bitsMessage = 0)\n    {\n        if (DEBUGGER && this.dbg) {\n            if (this !== this.dbg) {\n                bitsMessage = bitsMessage || this.bitsMessage;\n            }\n            var bitsEnabled = this.dbg.bitsMessage & bitsMessage;\n            /*\n             * This next \"bit\" of logic is for PCx86 and any other machine where we've expanded the set of\n             * messages by reusing bits in the low nibbles in combination with different bits in the high nibble.\n             * If the input bits adhere to that format, then the mask we just produced must adhere to it as well,\n             * and if it doesn't, zero the mask, ensuring that the test will return false.\n             */\n            if ((bitsMessage & 0xf0000000) && (bitsMessage & 0x0fffffff)) {\n                if (!(bitsEnabled & 0xf0000000) || !(bitsEnabled & 0x0fffffff)) bitsEnabled = 0;\n            }\n            if (bitsMessage && bitsEnabled === bitsMessage) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * printf(format, ...args)\n     *\n     * @this {Component} (imported from Device)\n     * @param {string} format\n     * @param {...} args\n     */\n    printf(format, ...args)\n    {\n        /*\n         * Callers often check messageEnabled() themselves, but for those that don't, check it now.\n         */\n        if (DEBUGGER && this.dbg && this.messageEnabled()) {\n            /*\n             * TODO: If/when dbg.message() is replaced with print(), remove the following linefeed removal.\n             */\n            this.dbg.message(this.sprintf(format, ...args).replace(/\\n$/,\"\"));\n        }\n    }\n\n    /**\n     * printMessage(sMessage, bitsMessage, fAddress)\n     *\n     * If bitsMessage is not specified, the component's MESSAGE category is used.\n     * If bitsMessage is true, the message is displayed regardless.\n     *\n     * @this {Component}\n     * @param {string} sMessage is any caller-defined message string\n     * @param {number|boolean} [bitsMessage] is zero or more MESSAGE_* category flag(s)\n     * @param {boolean} [fAddress] is true to display the current address\n     */\n    printMessage(sMessage, bitsMessage, fAddress)\n    {\n        if (DEBUGGER && this.dbg) {\n            if (bitsMessage === true || this.messageEnabled(bitsMessage | 0)) {\n                this.dbg.message(sMessage, fAddress);\n            }\n        }\n    }\n\n    /**\n     * printMessageIO(port, bOut, addrFrom, name, bIn, bitsMessage)\n     *\n     * If bitsMessage is not specified, the component's MESSAGE category is used.\n     * If bitsMessage is true, the message is displayed as long as MESSAGE.PORT is enabled.\n     *\n     * @this {Component}\n     * @param {number} port\n     * @param {number|null} bOut if an output operation\n     * @param {number|null} [addrFrom]\n     * @param {string|null} [name] of the port, if any\n     * @param {number|null} [bIn] is the input value, if known, on an input operation\n     * @param {number|boolean} [bitsMessage] is zero or more MESSAGE_* category flag(s)\n     */\n    printMessageIO(port, bOut, addrFrom, name, bIn, bitsMessage)\n    {\n        if (DEBUGGER && this.dbg) {\n            if (bitsMessage === true) {\n                bitsMessage = 0;\n            } else if (bitsMessage == null) {\n                bitsMessage = this.bitsMessage;\n            }\n            this.dbg.messageIO(this, port, bOut, addrFrom, name, bIn, bitsMessage);\n        }\n    }\n\n    /**\n     * sprintf(format, ...args)\n     *\n     * Copied from the CCjs project (https://github.com/jeffpar/ccjs/blob/master/lib/stdio.js) and extended.\n     *\n     * Far from complete, let alone sprintf-compatible, but it's adequate for the handful of sprintf-style format\n     * specifiers that I use.\n     *\n     * @this {Component} (imported from Device)\n     * @param {string} format\n     * @param {...} args\n     * @returns {string}\n     */\n    sprintf(format, ...args)\n    {\n        let buffer = \"\";\n        let aParts = format.split(/%([-+ 0#]?)([0-9]*)(\\.?)([0-9]*)([hlL]?)([A-Za-z%])/);\n\n        let iArg = 0, iPart;\n        for (iPart = 0; iPart < aParts.length - 7; iPart += 7) {\n\n            buffer += aParts[iPart];\n\n            let arg = args[iArg++];\n            let flags = aParts[iPart+1];\n            let minimum = +aParts[iPart+2] || 0;\n            let precision = +aParts[iPart+4] || 0;\n            let conversion = aParts[iPart+6];\n            let ach = null, s;\n\n            switch(conversion) {\n            case 'd':\n                /*\n                 * We could use \"arg |= 0\", but there may be some value to supporting integers > 32 bits.\n                 */\n                arg = Math.trunc(arg);\n                /* falls through */\n\n            case 'f':\n                s = Math.trunc(arg) + \"\";\n                if (precision) {\n                    minimum -= (precision + 1);\n                }\n                if (s.length < minimum) {\n                    if (flags == '0') {\n                        if (arg < 0) minimum--;\n                        s = (\"0000000000\" + Math.abs(arg)).slice(-minimum);\n                        if (arg < 0) s = '-' + s;\n                    } else {\n                        s = (\"          \" + s).slice(-minimum);\n                    }\n                }\n                if (precision) {\n                    arg = Math.trunc((arg - Math.trunc(arg)) * Math.pow(10, precision));\n                    s += '.' + (\"0000000000\" + Math.abs(arg)).slice(-precision);\n                }\n                buffer += s;\n                break;\n\n            case 'c':\n                arg = String.fromCharCode(arg);\n                /* falls through */\n\n            case 's':\n                while (arg.length < minimum) {\n                    if (flags == '-') {\n                        arg += ' ';\n                    } else {\n                        arg = ' ' + arg;\n                    }\n                }\n                buffer += arg;\n                break;\n\n            case 'X':\n                ach = \"0123456789ABCDEF\";\n                /* falls through */\n\n            case 'x':\n                if (!ach) ach = \"0123456789abcdef\";\n                s = \"\";\n                do {\n                    s = ach[arg & 0xf] + s;\n                    arg >>>= 4;\n                } while (--minimum > 0 || arg);\n                buffer += s;\n                break;\n\n            default:\n                /*\n                 * The supported ANSI C set of conversions: \"dioxXucsfeEgGpn%\"\n                 */\n                buffer += \"(unrecognized printf conversion %\" + conversion + \")\";\n                break;\n            }\n        }\n\n        buffer += aParts[iPart];\n        return buffer;\n    }\n}\n\n/*\n * Types recognized and supported by selected functions (eg, Computer.getMachineParm())\n */\nComponent.TYPE = {\n    NUMBER:     \"number\",\n    OBJECT:     \"object\",\n    STRING:     \"string\"\n};\n\n/*\n * These are the standard PRINT values you can pass as an optional argument to println(); in reality,\n * you can pass anything you want, because they are simply prepended to the message, although PROGRESS\n * messages may also be merged with earlier similar messages to keep the output buffer under control.\n */\nComponent.PRINT = {\n    ERROR:      \"error\",\n    NOTICE:     \"notice\",\n    PROGRESS:   \"progress\",\n    SCRIPT:     \"script\",\n    WARNING:    \"warning\"\n};\n\n/*\n * Every component created on the current page is recorded in this array (see Component.add()),\n * enabling any component to locate another component by ID (see Component.getComponentByID())\n * or by type (see Component.getComponentByType()).\n *\n * Every machine on the page are now recorded as well, by their machine ID.  We then record the\n * various resources used by that machine.\n *\n * Includes a fallback for non-browser-based environments (ie, Node).  TODO: This will need to be\n * tailored to Node, probably using the global object instead of the window object, if we ever want\n * to support multi-machine configs in that environment.\n */\nif (window) {\n    if (!window['PCjs']) window['PCjs'] = {};\n    if (!window['PCjs']['Machines']) window['PCjs']['Machines'] = {};\n    if (!window['PCjs']['Components']) window['PCjs']['Components'] = [];\n    if (!window['PCjs']['Commands']) window['PCjs']['Commands'] = {};\n}\nComponent.machines = window? window['PCjs']['Machines'] : {};\nComponent.components = window? window['PCjs']['Components'] : [];\nComponent.commands = window? window['PCjs']['Commands'] : {};\n\nComponent.asyncCommands = [\n    'hold', 'sleep', 'wait'\n];\nComponent.globalCommands = {\n    'alert': Component.scriptAlert,\n    'sleep': Component.scriptSleep\n};\nComponent.componentCommands = {\n    'select':   Component.scriptSelect\n};\nComponent.printBuffer = \"\";\n\n/*\n * The following polyfills provide ES5 functionality that's missing in older browsers (eg, IE8),\n * allowing PCjs apps to run without slamming into exceptions; however, due to the lack of HTML5 canvas\n * support in those browsers, all you're likely to see are \"soft\" errors (eg, \"Missing <canvas> support\").\n *\n * Perhaps we can implement a text-only faux video display for a fun retro-browser experience someday.\n *\n * TODO: Come up with a better place to put these polyfills.  We will likely have more if we decide to\n * make the leap from ES5 to ES6 features.\n */\n\n/*\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n */\nif (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function(obj, start) {\n        for (var i = (start || 0), j = this.length; i < j; i++) {\n            if (this[i] === obj) { return i; }\n        }\n        return -1;\n    }\n}\n\n/*\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\n */\nif (!Array.isArray) {\n    Array.isArray = function(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    };\n}\n\n/*\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n */\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function(obj) {\n        if (typeof this != \"function\") {\n            // Closest thing possible to the ECMAScript 5 internal IsCallable function\n            throw new TypeError(\"Function.prototype.bind: non-callable object\");\n        }\n        var args = Array.prototype.slice.call(arguments, 1);\n        var fToBind = this;\n        var fnNOP = /** @constructor */ (function() {});\n        var fnBound = function() {\n            return fToBind.apply(this instanceof fnNOP && obj? this : obj, args.concat(/** @type {Array} */(Array.prototype.slice.call(arguments))));\n        };\n        fnNOP.prototype = this.prototype;\n        fnBound.prototype = new fnNOP();\n        return fnBound;\n    };\n}\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp10/lib/defines.js (C) Jeff Parsons 2012-2018\n */\n\n/**\n * @define {string}\n */\nvar APPCLASS = \"pdp10\";         // this @define is the default application class (eg, \"pcx86\", \"c1pjs\")\n\n/**\n * APPNAME is used more for display purposes than anything else now.  APPCLASS is what matters in terms\n * of folder and file names, CSS styles, etc.\n *\n * @define {string}\n */\nvar APPNAME = \"PDPjs\";          // this @define is the default application name (eg, \"PCx86\", \"C1Pjs\")\n\n/**\n * WARNING: DEBUGGER needs to accurately reflect whether or not the Debugger component is (or will be) loaded.\n * In the compiled case, we rely on the Closure Compiler to override DEBUGGER as appropriate.  When it's *false*,\n * nearly all of debugger.js will be conditionally removed by the compiler, reducing it to little more than a\n * \"type skeleton\", which also solves some type-related warnings we would otherwise have if we tried to remove\n * debugger.js from the compilation process altogether.\n *\n * However, when we're in \"development mode\" and running uncompiled code in debugger-less configurations,\n * I would like to skip loading debugger.js altogether.  When doing that, we must ALSO arrange for an additional file\n * (nodebugger.js) to be loaded immediately after this file, which *explicitly* overrides DEBUGGER with *false*.\n *\n * @define {boolean}\n */\nvar DEBUGGER = true;            // this @define is overridden by the Closure Compiler to remove Debugger-related support\n\n/*\n * Set this to true to enable behavior compatible with SIMH.\n */\nvar SIMH = false;\n\n/*\n * Combine all the shared globals and machine-specific globals into one machine-specific global object,\n * which all machine components should start using; eg: \"if (PDP10.DEBUG) ...\" instead of \"if (DEBUG) ...\".\n */\nvar PDP10 = {\n    APPCLASS:   APPCLASS,\n    APPNAME:    APPNAME,\n    APPVERSION: APPVERSION,     // shared\n    COMPILED:   COMPILED,       // shared\n    CSSCLASS:   CSSCLASS,       // shared\n    DEBUG:      DEBUG,          // shared\n    DEBUGGER:   DEBUGGER,\n    MAXDEBUG:   MAXDEBUG,       // shared\n    PRIVATE:    PRIVATE,        // shared\n    SITEHOST:   SITEHOST,       // shared\n    XMLVERSION: XMLVERSION,     // shared\n\n    /*\n     * CPU model numbers (supported)\n     */\n    MODEL_KA10: 1001,\n\n    /*\n     * ADDR_INVALID is used to mark points in the code where the physical address being returned\n     * is invalid and should not be used.\n     *\n     * In a 32-bit CPU, -1 (ie, 0xffffffff) could actually be a valid address, so consider changing\n     * ADDR_INVALID to NaN or null (which is also why all ADDR_INVALID tests should use strict equality\n     * operators).\n     *\n     * The main reason I'm NOT using NaN or null now is my concern that, by mixing non-numbers\n     * (specifically, values outside the range of signed 32-bit integers), performance may suffer.\n     *\n     * WARNING: Like many of the properties defined here, ADDR_INVALID is a common constant, which the\n     * Closure Compiler will happily inline (with or without @const annotations; in fact, I've yet to\n     * see a @const annotation EVER improve automatic inlining).  However, if you don't make ABSOLUTELY\n     * certain that this file is included BEFORE the first reference to any of these properties, that\n     * automatic inlining will no longer occur.\n     */\n    ADDR_INVALID:   -1,\n    ADDR_MASK:      Math.pow(2, 18) - 1,\n    ADDR_LIMIT:     Math.pow(2, 18),\n\n    /*\n     * 18-bit and 36-bit largest positive (and smallest negative) values; however, since we store all\n     * values as unsigned quantities, these are the unsigned equivalents.\n     */\n    WORD_INVALID:   -1,\n    HINT_MASK:      Math.pow(2, 17) - 1,        //         131,071          (377777)  signed half-word (half-int) mask\n    HINT_LIMIT:     Math.pow(2, 17),            //         131,072          (400000)  signed half-word (half-int) limit\n    HALF_MASK:      Math.pow(2, 18) - 1,        //         262,143   (000000 777777): unsigned half-word mask\n    HALF_SHIFT:     Math.pow(2, 18),            //         262,144   (000001 000000): unsigned half-word shift\n    INT_MASK:       Math.pow(2, 35) - 1,        //  34,359,738,367   (377777 777777): signed word (magnitude) mask\n    INT_LIMIT:      Math.pow(2, 35),            //  34,359,738,368   (400000 000000): signed word (magnitude) limit\n    WORD_MASK:      Math.pow(2, 36) - 1,        //  68,719,476,735   (777777 777777): unsigned word mask\n    WORD_LIMIT:     Math.pow(2, 36),            //  68,719,476,736 (1 000000 000000): unsigned word limit\n\n    TWO_POW32:      Math.pow(2, 32),\n    TWO_POW34:      Math.pow(2, 34),\n    TWO_POW36:      Math.pow(2, 36),            // the two's complement of a 36-bit value is (value? TWO_POW36 - value : 0)\n\n    /*\n     * PDP-10 opcodes are 36-bit values, most of which use the following layout:\n     *\n     *                          1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3\n     *      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n     *      O O O O O O O M M A A A A I X X X X Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y\n     *\n     * or using modern bit-numbering:\n     *\n     *      3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1\n     *      5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0\n     *      O O O O O O O M M A A A A I X X X X Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y\n     *\n     * where OOOOOOOMM represents the operation, and MM (if used) represents the mode:\n     *\n     *      Mode        Suffix      Source  Destination\n     *      ----        ------      -----   -----------\n     *  0:  Basic       None        E       AC\n     *  1:  Immediate   I           0,E     AC\n     *  2:  Memory      M           AC      E\n     *  3:  Self/Both   S or B      E       E (and AC if A is non-zero)\n     *\n     * Input-output instructions look like:\n     *\n     *      3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1\n     *      5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0\n     *      1 1 1 D D D D D D D O O O I X X X X Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y\n     *\n     * Bits 0-22 (I,X,Y) contain what we call a \"reference address\" (R), which is used to calculate the\n     * \"effective address\" (E).  To determine E from R, we must extract I, X, and Y from R, set E to Y,\n     * then add [X] to E if X is non-zero.  If I is zero, then we're done; otherwise, we must set R to [E]\n     * and repeat the process.\n     */\n    OPCODE: {\n        OPMASK:     0o77700,            // operation mask\n        OPMODE:     0o77400,            // operation with mode\n        OPCOMP:     0o77000,            // operation with compare\n        OPTEST:     0o71100,            // operation with test\n        OPIO:       0o70034,            // input-output operation\n        OPUUO:      0o70000,            // unimplemented user operation (UUO) mask\n        OP_SCALE:   Math.pow(2, 21),    // operation scale\n        IO_SCALE:   Math.pow(2, 26),    // input-output device code scale\n        IO_MASK:    0o177,              // input-output device code mask (after descale)\n        A_SCALE:    Math.pow(2, 23),    // used to shift down the high 13 bits, with A starting at bit 0\n        P_SCALE:    Math.pow(2, 30),    // P scale\n        P_MASK:     0o77,               // P mask (after descale)\n        S_SHIFT:    24,                 // S shift\n        S_MASK:     0o77,               // S mask (after shift)\n        A_SHIFT:    23,                 // A shift\n        A_MASK:     0o17,               // A mask (after shift)\n        A_FIELD:    0o740000000,        // A field mask\n        I_FIELD:    0o20000000,         // indirect bit mask\n        X_SHIFT:    18,                 // X shift\n        X_MASK:     0o17,               // X mask (after shift)\n        X_FIELD:    0o17000000,         // X field mask\n        Y_SHIFT:    0,                  // Y shift\n        Y_MASK:     0o777777,           // Y mask (after shift)\n        Y_FIELD:    0o777777,           // Y field mask\n        R_MASK:     0o37777777,         // used to isolate the low 23 bits (I,X,Y)\n        PTR_MASK:   0o77777777,         // used to isolate the low 24 bits (?,I,X,Y) of a byte pointer\n        HALT:       0o5304              // operation code for HALT\n    },\n\n    /*\n     * Internal operation state flags\n     */\n    OPFLAG: {\n        IRQ_DELAY:  0x0001,             // incremented until it becomes IRQ\n        IRQ:        0x0002,             // time to call checkInterrupts()\n        IRQ_MASK:   0x0003,\n        DEBUGGER:   0x0004,             // set if the Debugger wants to perform checks\n        WAIT:       0x0008,             // WAIT operation in progress\n        PRESERVE:   0x000F              // OPFLAG bits to preserve prior to the next instruction\n    },\n\n    /*\n     * Flags returned by getPS() for various program control operations.\n     *\n     * NOTE: I see SIMH setting PS bits like 0o000200 and 0o000400, which are not documented for the KA10.\n     * The SIMH docs only refer to the KS10 (\"KS10 CPU with 1MW of memory\"), so I'm guessing it doesn't have\n     * a KA10 emulation option.  The `pdp10` SIMH binary does have some SET CPU options, but unlike the `pdp11`\n     * binary, the only options you can set relate to the operating system to be run -- which seems very hacky.\n     */\n    PSFLAG: {\n        AROV:       0o400000,           // Arithmetic Overflow\n        CRY0:       0o200000,           // Carry 0\n        CRY1:       0o100000,           // Carry 1\n        FOV:        0o040000,           // Floating-Point Overflow\n        BIS:        0o020000,           // Byte Interrupt\n        USERF:      0o010000,           // User Mode Flag\n        EXIOT:      0o004000,           // User Privileged I/O Flag\n        FXU:        0o000100,           // Floating-Point Underflow\n        DCK:        0o000040,           // Divide Check (aka No Divide)\n        /*\n         * Only the low 18 bits (above) are returned by getPS(); the following (bits 18 to 31)\n         * are defined for internal use only.\n         */\n        PDOV:      0o1000000,           // Pushdown Overflow\n        SET_MASK:  0o0760140            // flags that are always settable/clearable\n    },\n\n    /*\n     * Readable CPU (or APR for \"Arithmetic Processor\") flags provided by the \"CONI APR,\" instruction; see opCONI().\n     */\n    RFLAG: {\n        PIA:        0o000007,           // Priority Interrupt Assignment\n        AROV:       0o000010,           // Arithmetic Overflow\n        AROV_IE:    0o000020,           // Arithmetic Overflow Interrupt Enabled\n        TRAP_OFF:   0o000040,           // Trap Offset\n        FOV:        0o000100,           // Floating-Point Overflow\n        FOV_IE:     0o000200,           // Floating-Point Overflow Interrupt Enabled\n        CLK:        0o001000,           // Clock Flag\n        CLK_IE:     0o002000,           // Clock Interrupt Enabled\n        NXM:        0o010000,           // Non-Existent Memory\n        PRM:        0o020000,           // Memory Protection\n        ADB:        0o040000,           // Address Break\n        UIO:        0o100000,           // User In-Out\n        PDOV:       0o200000            // Pushdown Overflow (TODO: Verify this is correct; the May 1968 doc may have a typo)\n    },\n\n    /*\n     * Writable CPU (or APR for \"Arithmetic Processor\") flags provided by the \"CONO APR,\" instruction; see opCONO().\n     *\n     * A set bit performs the function shown below, a clear bit does nothing.\n     */\n    WFLAG: {\n        PIA:        0o000007,           // Priority Interrupt Assignment\n        AROV_CL:    0o000010,           // Clear Overflow\n        AROV_IE:    0o000020,           // Enable Overflow Interrupt\n        AROV_ID:    0o000040,           // Disable Overflow Interrupt\n        FOV_CL:     0o000100,           // Clear Floating-Point Overflow\n        FOV_IE:     0o000200,           // Enable Floating-Point Overflow Interrupt\n        FOV_ID:     0o000400,           // Disable Floating-Point Overflow Interrupt\n        CLK_CL:     0o001000,           // Clear Clock Flag\n        CLK_IE:     0o002000,           // Enable Clock Interrupt\n        CLK_ID:     0o004000,           // Disable Clock Interrupt\n        NXM_CL:     0o010000,           // Clear Non-Existent Memory\n        PRM_CL:     0o020000,           // Clear Memory Protection\n        ADB_CL:     0o040000,           // Clear Address Break\n        UIO_CL:     0o200000,           // Clear All In-Out Devices\n        PDOV_CL:    0o400000            // Clear Pushdown Overflow\n    },\n\n    /*\n     * 7-bit device codes used by Input-Output instructions; see opIO().\n     */\n    DEVICES: {\n        APR:        0o000,              // Arithmetic Processor\n        PI:         0o001               // Priority Interrupt\n    }\n};\n\n/*\n * Combine all the shared globals and machine-specific globals into one machine-specific global object,\n * which all machine components should start using; eg: \"if (PDP10.DEBUGGER)\" instead of \"if (DEBUGGER)\".\n */\nPDP10.APPCLASS          = APPCLASS;\nPDP10.APPNAME           = APPNAME;\nPDP10.DEBUGGER          = DEBUGGER;\nPDP10.SIMH              = SIMH;\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp10/lib/messages.js (C) Jeff Parsons 2012-2018\n */\n\nvar MessagesPDP10 = {\n    CPU:        0x00000001,\n    TRAP:       0x00000002,\n    FAULT:      0x00000004,\n    INT:        0x00000008,\n    BUS:        0x00000010,\n    MEMORY:     0x00000020,\n    MMU:        0x00000040,\n    ROM:        0x00000080,\n    DEVICE:     0x00000100,\n    PANEL:      0x00000200,\n    KEYBOARD:   0x00000400,\n    KEYS:       0x00000800,\n    PAPER:      0x00001000,\n    READ:       0x00004000,\n    WRITE:      0x00008000,\n    SERIAL:     0x00100000,\n    TIMER:      0x00200000,\n    SPEAKER:    0x01000000,\n    COMPUTER:   0x02000000,\n    LOG:        0x10000000,\n    WARN:       0x20000000,\n    BUFFER:     0x40000000,\n    HALT:       0x80000000|0\n};\n\n/*\n * Message categories supported by the messageEnabled() function and other assorted message\n * functions. Each category has a corresponding bit value that can be combined (ie, OR'ed) as\n * needed.  The Debugger's message command (\"m\") is used to turn message categories on and off,\n * like so:\n *\n *      m port on\n *      m port off\n *      ...\n *\n * NOTE: The order of these categories can be rearranged, alphabetized, etc, as desired; just be\n * aware that changing the bit values could break saved Debugger states (not a huge concern, just\n * something to be aware of).\n */\nMessagesPDP10.CATEGORIES = {\n    \"cpu\":      MessagesPDP10.CPU,\n    \"trap\":     MessagesPDP10.TRAP,\n    \"fault\":    MessagesPDP10.FAULT,\n    \"int\":      MessagesPDP10.INT,\n    \"bus\":      MessagesPDP10.BUS,\n    \"memory\":   MessagesPDP10.MEMORY,\n    \"mmu\":      MessagesPDP10.MMU,\n    \"rom\":      MessagesPDP10.ROM,\n    \"device\":   MessagesPDP10.DEVICE,\n    \"panel\":    MessagesPDP10.PANEL,\n    \"keyboard\": MessagesPDP10.KEYBOARD, // \"kbd\" is also allowed as shorthand for \"keyboard\"; see doMessages()\n    \"key\":      MessagesPDP10.KEYS,     // using \"key\" instead of \"keys\", since the latter is a method on JavasScript objects\n    \"paper\":    MessagesPDP10.PAPER,\n    \"read\":     MessagesPDP10.READ,\n    \"write\":    MessagesPDP10.WRITE,\n    \"serial\":   MessagesPDP10.SERIAL,\n    \"timer\":    MessagesPDP10.TIMER,\n    \"speaker\":  MessagesPDP10.SPEAKER,\n    \"computer\": MessagesPDP10.COMPUTER,\n    \"log\":      MessagesPDP10.LOG,\n    \"warn\":     MessagesPDP10.WARN,\n    /*\n     * Now we turn to message actions rather than message types; for example, setting \"halt\"\n     * on or off doesn't enable \"halt\" messages, but rather halts the CPU on any message above.\n     *\n     * Similarly, \"m buffer on\" turns on message buffering, deferring the display of all messages\n     * until \"m buffer off\" is issued.\n     */\n    \"buffer\":   MessagesPDP10.BUFFER,\n    \"halt\":     MessagesPDP10.HALT\n};\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp10/lib/panel.js (C) Jeff Parsons 2012-2018\n */\n\n\n/**\n * Since the Closure Compiler treats ES6 classes as @struct rather than @dict by default,\n * it deters us from defining named properties on our components; eg:\n *\n *      this['exports'] = {...}\n *\n * results in an error:\n *\n *      Cannot do '[]' access on a struct\n *\n * So, in order to define 'exports', we must override the @struct assumption by annotating\n * the class as @unrestricted (or @dict).  Note that this must be done both here and in the\n * Component class, because otherwise the Compiler won't allow us to *reference* the named\n * property either.\n *\n * TODO: Consider marking ALL our classes unrestricted, because otherwise it forces us to\n * define every single property the class uses in its constructor, which results in a fair\n * bit of redundant initialization, since many properties aren't (and don't need to be) fully\n * initialized until the appropriate init(), reset(), restore(), etc. function is called.\n *\n * The upside, however, may be that since the structure of the class is completely defined by\n * the constructor, JavaScript engines may be able to optimize and run more efficiently.\n *\n * @unrestricted\n */\nclass PanelPDP10 extends Component {\n    /**\n     * PanelPDP10(parmsPanel)\n     *\n     * The PanelPDP10 component has no required (parmsPanel) properties.\n     *\n     * @param {Object} parmsPanel\n     * @param {boolean} fBindings (true if panel may have bindings, otherwise not)\n     */\n    constructor(parmsPanel, fBindings)\n    {\n        super(\"Panel\", parmsPanel, MessagesPDP10.PANEL);\n\n        /*\n         * If there are any live registers, LEDs, etc, to display, this will provide a count.\n         * TODO: Add some UI for fDisplayLiveRegs (either an XML property, or a UI checkbox, or both).\n         */\n        this.cLiveRegs = 0;\n        this.nDisplayCount = 0;\n        this.nDisplayLimit = 60;\n        this.fDisplayLiveRegs = true;\n        this.fBindings = fBindings;\n\n        /*\n         * regSwitches contains the Front Panel (aka Console) SWITCH register, which is also available\n         * as a read-only register at 177570 (but only the low 16 bits).  regDisplay contains the DISPLAY\n         * register, a write-only register at the same address.\n         *\n         * regAddr is an internal register containing the contents of the Front Panel's ADDRESS display,\n         * and regData corresponds to the DATA display.  They are updated by updateAddr() and updateData(),\n         * which in turn take care of calling updateLEDArray().\n         *\n         * The state of ALL switches is maintained in this.switches, and likewise all LED states are\n         * maintained in this.leds, but for convenience, we also mirror some of those states in dedicated\n         * variables (eg, regSwitches for the SWITCH register, fLEDTest for the 'TEST' switch, etc).\n         */\n        this.regDisplay = 0;\n        this.regSwitches = 0;\n        this.regAddr = this.regData = 0;\n        this.ledAddr = this.ledData = -1;\n\n        /*\n         * The panel hardware has the following additional (supported) state; note that there are several\n         * settings on a real Front Panel that we don't support (eg, stepping one cycle vs. one instruction).\n         *\n         * While my initial intent is to eventually support all the ADDRSEL switch settings, I probably\n         * won't bother with any DATASEL switch settings; instead, I will automatically display the DISPLAY\n         * register (regDisplay) [the equivalent of selecting 'DISPLAY REGISTER'] except when data is being\n         * examined or deposited [the equivalent of selecting 'DATA PATHS'].\n         */\n        this.fLEDTest = false;              // LED (lamp) test in progress\n        this.fExamine = false;              // true if the previously pressed switch was the 'EXAM' switch\n        this.fDeposit = false;              // true if the previously pressed switch was the 'DEP' switch\n        this.nAddrSel = PanelPDP10.ADDRSEL.CONS_PHY;\n\n        /*\n         * Every LED has a simple numeric value, assigned when setBinding() is called:\n         *\n         *      zero if \"off\", non-zero if \"on\"\n         *\n         * initBus() will call displayLEDs() to ensure that every LED is set to its initial value.\n         */\n        this.leds = {};\n\n        /*\n         * Every switch has an array associated with it:\n         *\n         *      [0]: initial value of switch (0 if \"down\", 1 if \"up\")\n         *      [1]: current value of switch\n         *      [2]: true if the switch is momentary, false if not\n         *      [3]: true if the switch is currently pressed, false if released\n         *      [4]: optional handler to call whenever the switch is pressed or released\n         *      [5]: optional switch index (used with CNSW switches 'S0' through 'S21')\n         *\n         * initBus() will call displaySwitches() to ensure that every switch is the position represented below.\n         *\n         * NOTE: Not all switches have the same \"process\" criteria.  For example, 'TEST' will perform a LED test\n         * when it is momentarily pressed \"up\", whereas 'LOAD [ADRS]' will load the ADDRESS register from the\n         * SWITCH register when it is momentarily pressed \"down\".\n         *\n         * This means that processLEDTest(value) must act when value == 1 (\"up\"), whereas processLoadAddr(value)\n         * must act when value == 0 (\"down\").  You can infer all this from the table below, because the initial value\n         * of any momentary switch is its \"inactive\" value, so the opposite is its \"active\" value.\n         */\n        this.switches = {\n            'START':    [1, 1, true,  false, this.processStart],\n            'STEP':     [1, 1, false, false, this.processStep],\n            'ENABLE':   [1, 1, false, false, this.processEnable],\n            'CONT':     [1, 1, true,  false, this.processContinue],\n            'DEP':      [0, 0, true,  false, this.processDeposit],\n            'EXAM':     [1, 1, true,  false, this.processExamine],\n            'LOAD':     [1, 1, true,  false, this.processLoadAddr],\n            'TEST':     [0, 0, true,  false, this.processLEDTest]\n        };\n        for (var i = 0; i < 22; i++) {\n            this.switches['S'+i] = [0, 0, false, false, this.processSRSwitch, i];\n        }\n\n        /** @type {ComputerPDP10} */\n        this.cmp = null;\n\n        /** @type {BusPDP10} */\n        this.bus = null;\n\n        /** @type {CPUStatePDP10} */\n        this.cpu = null;\n\n        /** @type {DebuggerPDP10} */\n        this.dbg = null;\n\n        /*\n         * The 'hold' and 'toggle' exports, which map to holdSwitch() and toggleSwitch(), both press and release\n         * the specified switch, but processCommands() considers a 'hold' function to be asynchronous, which means\n         * that holdSwitch() will be passed a callback function that can be used to implement a delay between the\n         * press and the release, whereas toggleSwitch() will not.\n         *\n         * holdSwitch() only makes sense for momentary switches (eg, 'TEST'), where a visual delay might be nice.\n         * If the switch isn't momentary, or no delay is desired, then use toggleSwitch(); it will be more efficient.\n         *\n         * Finally, for switches that are toggles (eg, 'ENABLE'), you can use setSwitch() to set it to a specific\n         * state: zero for \"off\" and non-zero for \"on\".  setSwitch() also supports meta-switches like \"SR\", using\n         * the entire value to set a series of switches at once; the value is assumed to be octal unless overridden\n         * by a prefix (eg, \"0x\") or suffix (eg, \".\").\n         */\n        this['exports'] = {\n            'hold': this.holdSwitch,\n            'toggle': this.toggleSwitch,\n            'reset': this.resetSwitches,\n            'set': this.setSwitch\n        };\n\n        this.setReady();\n    }\n\n    /**\n     * getAR()\n     *\n     * @this {PanelPDP10}\n     * @return {number} (current ADDRESS register)\n     */\n    getAR()\n    {\n        return this.regAddr;\n    }\n\n    /**\n     * setAR(value)\n     *\n     * @this {PanelPDP10}\n     * @param {number} value (new ADDRESS register)\n     */\n    setAR(value)\n    {\n        this.updateAddr(this.regAddr = value);\n    }\n\n    /**\n     * getDR()\n     *\n     * @this {PanelPDP10}\n     * @return {number} (current DISPLAY register)\n     */\n    getDR()\n    {\n        return this.regDisplay;\n    }\n\n    /**\n     * setDR(value)\n     *\n     * @this {PanelPDP10}\n     * @param {number} value (new DISPLAY register)\n     * @return {number}\n     */\n    setDR(value)\n    {\n        return this.updateData(this.regDisplay = value);\n    }\n\n    /**\n     * getSR()\n     *\n     * @this {PanelPDP10}\n     * @return {number} (current SWITCH register)\n     */\n    getSR()\n    {\n        return this.regSwitches;\n    }\n\n    /**\n     * setSR(value)\n     *\n     * @this {PanelPDP10}\n     * @param {number} value (new SWITCH register)\n     */\n    setSR(value)\n    {\n        this.setSRSwitches(value);\n    }\n\n    /**\n     * getSwitch(name)\n     *\n     * @this {PanelPDP10}\n     * @param {string} name\n     * @return {number|undefined} 0 if switch is off (\"down\"), 1 if on (\"up\"), or undefined if unrecognized\n     */\n    getSwitch(name)\n    {\n        return this.switches[name] && this.switches[name][1];\n    }\n\n    /**\n     * reset(fPowerUp)\n     *\n     * NOTE: Since we've registered our handler with the Bus component, we will be called twice whenever\n     * the entire machine is reset: once when the Computer's reset() handler calls the Bus's reset() handler,\n     * and again when the Computer's reset() handler calls us directly.  Multiple resets should be harmless.\n     *\n     * @this {PanelPDP10}\n     * @param {boolean} [fPowerUp]\n     */\n    reset(fPowerUp)\n    {\n        /*\n         * Simulate a call to our stop() handler, to update the panel's ADDRESS register with the current PC.\n         */\n        this.stop();\n        if (fPowerUp) this.setDR(0);\n    }\n\n    /**\n     * setBinding(sType, sBinding, control, sValue)\n     *\n     * Some panel layouts don't have bindings of their own, and even when they do, there may still be some\n     * components (eg, the CPU) that prefer to update their own bindings, so we pass along all binding requests\n     * to the Computer, CPU, Keyboard and Debugger components first.  The order shouldn't matter, since any\n     * component that doesn't recognize the specified binding should simply ignore it.\n     *\n     * @this {PanelPDP10}\n     * @param {string|null} sType is the type of the HTML control (eg, \"button\", \"textarea\", \"register\", \"flag\", \"rled\", etc)\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"reset\")\n     * @param {HTMLElement} control is the HTML control DOM object (eg, HTMLButtonElement)\n     * @param {string} [sValue] optional data value\n     * @return {boolean} true if binding was successful, false if unrecognized binding request\n     */\n    setBinding(sType, sBinding, control, sValue)\n    {\n        if (this.cmp && this.cmp.setBinding(sType, sBinding, control, sValue)) {\n            return true;\n        }\n        if (this.cpu && this.cpu.setBinding(sType, sBinding, control, sValue)) {\n            return true;\n        }\n        if (DEBUGGER && this.dbg && this.dbg.setBinding(sType, sBinding, control, sValue)) {\n            return true;\n        }\n\n        switch (sBinding) {\n        case 'PC':\n            this.bindings[sBinding] = control;\n            this.cLiveRegs++;\n            return true;\n\n        default:\n            /*\n             * Square (\"led\") or round (\"rled\") LEDs are defined in machine XML files like so:\n             *\n             *      <control type=\"rled\" binding=\"A3\" value=\"1\" width=\"100%\" container=\"center\"/>\n             *\n             * Only *type* and *binding* attributes are required; if *value* is omitted, the default value is 0 (\"off\").\n             */\n            if (sType == \"led\" || sType == \"rled\") {\n                this.bindings[sBinding] = control;\n                this.leds[sBinding] = sValue? 1 : 0;\n                this.cLiveRegs++;\n                return true;\n            }\n            /*\n             * Switches are defined in machine XML files like so:\n             *\n             *      <control type=\"switch\" binding=\"S3\" value=\"1\" width=\"100%\" container=\"center\"/>\n             *\n             * Only *type* and *binding* attributes are required; if *value* is omitted, the default value is 0 (\"down\").\n             *\n             * Currently, there is no XML attribute to indicate whether a switch is \"momentary\"; only recognized switches\n             * in our internal table can have that attribute.\n             */\n            if (sType == \"switch\") {\n                /*\n                 * Like LEDs, we allow unrecognized switches to be defined as well, but they won't do anything useful,\n                 * since only recognized switches will have handlers that perform the appropriate operations.\n                 */\n                if (this.switches[sBinding] === undefined) {\n                    this.switches[sBinding] = [sValue? 1 : 0, sValue? 1 : 0];\n                }\n                this.bindings[sBinding] = control;\n                var parent = control.parentElement || control;\n                parent = parent.parentElement || parent;\n                parent.onmousedown = function(panel, sBinding) {\n                    return function onPressSwitch() {\n                        panel.pressSwitch(sBinding);\n                    };\n                }(this, sBinding);\n                parent.onmouseup = parent.onmouseout = function(panel, sBinding) {\n                    return function onReleaseSwitch() {\n                        panel.releaseSwitch(sBinding);\n                    };\n                }(this, sBinding);\n                parent.ontouchstart = function(panel, sBinding) {\n                    return function onPressSwitch(event) {\n                        panel.pressSwitch(sBinding);\n                        event.preventDefault();\n                    };\n                }(this, sBinding);\n                parent.ontouchend = function(panel, sBinding) {\n                    return function onReleaseSwitch() {\n                        panel.releaseSwitch(sBinding);\n                    };\n                }(this, sBinding);\n                return true;\n            }\n            return super.setBinding(sType, sBinding, control, sValue);\n        }\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * @this {PanelPDP10}\n     * @param {ComputerPDP10} cmp\n     * @param {BusPDP10} bus\n     * @param {CPUStatePDP10} cpu\n     * @param {DebuggerPDP10} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.cmp = cmp;\n        this.bus = bus;\n        this.cpu = cpu;\n        this.dbg = dbg;\n\n        this.displayLEDs();\n        this.displaySwitches();\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {PanelPDP10}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        if (!fRepower) {\n            /*\n             * As noted in init(), our powerUp() method gives us a second opportunity to notify any\n             * components that that might care (eg, CPU, Keyboard, and Debugger) that we have some controls\n             * (ie, bindings) they might want to use.\n             */\n            if (this.fBindings) PanelPDP10.init();\n\n            if (!data) {\n                this.reset(true);\n            } else {\n                if (!this.restore(data)) return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {PanelPDP10}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        return fSave? this.save() : true;\n    }\n\n    /**\n     * save()\n     *\n     * This implements save support for the PanelPDP10 component.\n     *\n     * @this {PanelPDP10}\n     * @return {Object}\n     */\n    save()\n    {\n        var state = new State(this);\n        state.set(0, [\n            this.getAR(),\n            this.getDR(),\n            this.getSR()\n        ]);\n        return state.data();\n    }\n\n    /**\n     * restore(data)\n     *\n     * This implements restore support for the PanelPDP10 component.\n     *\n     * @this {PanelPDP10}\n     * @param {Object} data\n     * @return {boolean} true if successful, false if failure\n     */\n    restore(data)\n    {\n        var a = data[0];\n        if (a) {\n            this.setAR(a[0]);\n            this.setDR(a[1]);\n            this.setSR(a[2]);\n        }\n        return true;\n    }\n\n    /**\n     * resetSwitches()\n     *\n     * @this {PanelPDP10}\n     * @return {boolean}\n     */\n    resetSwitches()\n    {\n        for (var sBinding in this.switches) {\n            var sw = this.switches[sBinding];\n            sw[1] = sw[0];\n        }\n        this.displaySwitches();\n        return true;\n    }\n\n    /**\n     * displayLED(sBinding, value)\n     *\n     * @this {PanelPDP10}\n     * @param {string} sBinding\n     * @param {boolean|number} value (true or non-zero if the LED should be on, false or zero if off)\n     */\n    displayLED(sBinding, value)\n    {\n        var control = this.bindings[sBinding];\n        if (control) {\n            /*\n             * TODO: Add support for user-definable LED colors?\n             */\n            control.style.backgroundColor = (value? \"#ff0000\" : \"#000000\");\n        }\n    }\n\n    /**\n     * displayLEDs(override)\n     *\n     * @this {PanelPDP10}\n     * @param {boolean|number|null} [override] (true turn on all LEDs, false to turn off all LEDs, null or undefined for normal LED activity)\n     */\n    displayLEDs(override)\n    {\n        for (var sBinding in this.leds) {\n            this.displayLED(sBinding, override != null? override : this.leds[sBinding]);\n        }\n    }\n\n    /**\n     * displaySwitch(sBinding, value)\n     *\n     * @this {PanelPDP10}\n     * @param {string} sBinding\n     * @param {boolean|number} value (true if the switch should be \"up\" (on), false if \"down\" (off))\n     */\n    displaySwitch(sBinding, value)\n    {\n        var control = this.bindings[sBinding];\n        if (control) {\n            control.style.marginTop = (value? \"0px\" : \"20px\");\n            control.style.backgroundColor = (value? \"#00ff00\" : \"#228B22\");\n        }\n    }\n\n    /**\n     * displaySwitches()\n     *\n     * @this {PanelPDP10}\n     */\n    displaySwitches()\n    {\n        for (var sBinding in this.switches) {\n            this.displaySwitch(sBinding, this.switches[sBinding][1]);\n        }\n    }\n\n    /**\n     * displayValue(sLabel, nValue, cch)\n     *\n     * This is principally for displaying register values, but in reality, it can be used to display any\n     * numeric value bound to the given label.\n     *\n     * @this {PanelPDP10}\n     * @param {string} sLabel\n     * @param {number} nValue\n     * @param {number} [cch]\n     */\n    displayValue(sLabel, nValue, cch)\n    {\n        if (this.bindings[sLabel]) {\n            var sVal;\n            var nBase = this.dbg && this.dbg.nBase || 8;\n            nValue = nValue || 0;\n            if (!this.cpu.isRunning() || this.fDisplayLiveRegs) {\n                sVal = nBase == 8? Str.toOct(nValue, cch) : Str.toHex(nValue, cch);\n            } else {\n                sVal = \"--------\".substr(0, cch || 4);\n            }\n            /*\n             * TODO: Determine if this test actually avoids any redrawing when a register hasn't changed, and/or if\n             * we should maintain our own (numeric) cache of displayed register values (to avoid creating these temporary\n             * string values that will have to garbage-collected), and/or if this is actually slower, and/or if I'm being\n             * too obsessive.\n             */\n            if (this.bindings[sLabel].textContent != sVal) this.bindings[sLabel].textContent = sVal;\n        }\n    }\n\n    /**\n     * holdSwitch(fnCallback, sBinding, sDelay)\n     *\n     * @this {PanelPDP10}\n     * @param {function()|null} fnCallback\n     * @param {string} sBinding\n     * @param {string} [sDelay]\n     * @return {boolean} false if wait required, true otherwise\n     */\n    holdSwitch(fnCallback, sBinding, sDelay)\n    {\n        if (this.pressSwitch(sBinding)) {\n            if (sDelay) {\n                var panel = this;\n                setTimeout(function() {\n                    panel.releaseSwitch(sBinding);\n                    if (fnCallback) fnCallback();\n                }, +sDelay);\n                return false;\n            } else {\n                this.releaseSwitch(sBinding);\n            }\n        }\n        return true;\n    }\n\n    /**\n     * setSwitch(sBinding, sValue)\n     *\n     * @this {PanelPDP10}\n     * @param {string} sBinding\n     * @param {string} sValue\n     * @return {boolean}\n     */\n    setSwitch(sBinding, sValue)\n    {\n        if (sBinding == \"SR\") {\n            return this.setSRSwitches(Str.parseInt(sValue, 8))\n        }\n        var sw = this.switches[sBinding];\n        if (sw) {\n            sw[1] = +sValue? 1 : 0;\n            this.displaySwitch(sBinding, sw[1]);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * toggleSwitch(sBinding)\n     *\n     * @this {PanelPDP10}\n     * @param {string} sBinding\n     * @return {boolean}\n     */\n    toggleSwitch(sBinding)\n    {\n        if (this.pressSwitch(sBinding)) {\n            this.releaseSwitch(sBinding);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * pressSwitch(sBinding)\n     *\n     * @this {PanelPDP10}\n     * @param {string} sBinding\n     * @return {boolean}\n     */\n    pressSwitch(sBinding)\n    {\n        var sw = this.switches[sBinding];\n        if (sw) {\n            /*\n             * Set the new switch value in sw[1] and then immediately display it\n             */\n            this.displaySwitch(sBinding, (sw[1] = 1 - sw[1]));\n\n            /*\n             * Mark the switch as \"pressed\"\n             */\n            sw[3] = true;\n\n            /*\n             * Call the appropriate process handler with the current switch value (sw[1])\n             */\n            if (sw[4]) sw[4].call(this, sw[1], sw[5]);\n\n            /*\n             * This helps the next 'DEP' or 'EXAM' press determine if the previous press was the same,\n             * while also ignoring any intervening 'STEP' presses (see processStep() for why we do that).\n             */\n            if (sBinding != PanelPDP10.SWITCH.STEP) {\n                this.fDeposit = (sBinding == PanelPDP10.SWITCH.DEP);\n                this.fExamine = (sBinding == PanelPDP10.SWITCH.EXAM);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * releaseSwitch(sBinding)\n     *\n     * @this {PanelPDP10}\n     * @param {string} sBinding\n     * @return {boolean}\n     */\n    releaseSwitch(sBinding)\n    {\n        /*\n         * pressSwitch() is simple: flip the switch's current value in sw[1] and marked it \"pressed\" in sw[3].\n         *\n         * releaseSwitch() is more complicated, because we must handle both mouseUp and mouseOut events.  The first time\n         * we receive EITHER of those events AND the switch is marked momentary (sw[2]) AND the switch is pressed (sw[3]),\n         * then we must flip the switch back to its original value.\n         *\n         * Otherwise, the only thing we have to do is mark the switch as \"released\" (ie, set sw[3] to false).\n         */\n        var sw = this.switches[sBinding];\n        if (sw) {\n            if (sw[2] && sw[3]) {\n                /*\n                 * Set the new switch value in sw[1] and then immediately display it\n                 */\n                this.displaySwitch(sBinding, (sw[1] = sw[0]));\n\n                /*\n                 * Call the appropriate process handler with the current switch value (sw[1])\n                 */\n                if (sw[4]) sw[4].call(this, sw[1], sw[5]);\n            }\n            /*\n             * Mark the switch as \"released\"\n             */\n            sw[3] = false;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * processStart(value, index)\n     *\n     * @this {PanelPDP10}\n     * @param {number} value\n     * @param {number} [index]\n     */\n    processStart(value, index)\n    {\n        if (!value && !this.cpu.isRunning()) {\n\n            this.cpu.setPC(this.regAddr);\n\n            /*\n             * The PDP-11/70 Handbook goes on to say: \"If the system needs to be initialized but execution\n             * is not wanted, the START switch should be depressed while the HALT/ENABLE switch is in the HALT\n             * position.\"\n             */\n            if (this.getSwitch(PanelPDP10.SWITCH.ENABLE)) {\n                this.cpu.startCPU();\n            }\n        }\n    }\n\n    /**\n     * processStep(value, index)\n     *\n     * If value == 1 (our initial value), then the 'STEP' switch is set to \"S INST\" (step one instruction);\n     * otherwise, it's set to \"S BUS CYCLE\" (step one bus cycle).\n     *\n     * However, since we can't currently support cycle-stepping, I've decided to innovate a little and\n     * change the meaning of this switch: the normal (\"up\") position means that successive 'EXAM' and 'DEP'\n     * operations will first add 2 to the ADDRESS register, while the opposite (\"down\") position means\n     * they will first subtract 2.\n     *\n     * See processLEDTest() for more of these exciting \"innovations\".  ;-)\n     *\n     * @this {PanelPDP10}\n     * @param {number} value\n     * @param {number} [index]\n     */\n    processStep(value, index)\n    {\n        /*\n         * There's really nothing for us to do here, because the normal press and release handlers\n         * already record the state of this switch, so it can be queried as needed, using getSwitch().\n         */\n    }\n\n    /**\n     * processEnable(value, index)\n     *\n     * If value == 1 (our initial value), then the 'ENABLE'/'HALT' switch is set to 'ENABLE', otherwise 'HALT'.\n     *\n     * @this {PanelPDP10}\n     * @param {number} value\n     * @param {number} [index]\n     */\n    processEnable(value, index)\n    {\n        /*\n         * The \"down\" (0) position is 'HALT', which stops the CPU; however, the \"up\" (1) position ('ENABLE')\n         * does NOT start the CPU.  You must press 'CONT' to continue execution, which will either continue for\n         * one instruction if this switch to set to 'HALT' or indefinitely if it is set to 'ENABLE'.\n         */\n        if (!value) {\n            this.cpu.stopCPU();\n        }\n    }\n\n    /**\n     * processContinue(value, index)\n     *\n     * @this {PanelPDP10}\n     * @param {number} value\n     * @param {number} [index]\n     */\n    processContinue(value, index)\n    {\n        if (!value && !this.cpu.isRunning()) {\n            /*\n             * TODO: Technically, we're also supposed to check the 'STEP' switch to determine if we should\n             * step one instruction or just one cycle, but we don't currently have the ability to do the latter.\n             */\n            if (!this.getSwitch(PanelPDP10.SWITCH.ENABLE)) {\n                /*\n                 * Using the Debugger's stepCPU() function is more convenient, and has the pleasant side-effect\n                 * of updating the debugger's display; however, not all machines with a Front Panel will necessarily\n                 * also have the Debugger loaded.\n                 */\n                var dbg = this.dbg;\n                if (dbg && !dbg.isBusy(true)) {\n                    dbg.setBusy(true);\n                    dbg.stepCPU(0, null);\n                    dbg.setBusy(false);\n                }\n                else {\n                    /*\n                     * For this tiny single-instruction burst, mimic what runCPU() does.\n                     */\n                    try {\n                        var nCyclesStep = this.cpu.stepCPU(1);\n                        if (nCyclesStep > 0) {\n                            this.cpu.updateTimers(nCyclesStep);\n                            this.cpu.addCycles(nCyclesStep, true);\n                            this.cpu.updateChecksum(nCyclesStep);\n                        }\n                    }\n                    catch(exception) {\n                        /*\n                         * We assume that any numeric exception was explicitly thrown by the CPU to interrupt the\n                         * current instruction.  For all other exceptions, we attempt a stack dump.\n                         */\n                        if (typeof exception != \"number\") {\n                            var e = exception;\n                            this.cpu.setError(e.stack || e.message);\n                        }\n                    }\n                }\n\n                /*\n                 * Simulate a call to our stop() handler, to update the panel's ADDRESS register with the new PC.\n                 */\n                this.stop();\n\n                /*\n                 * Going through the normal channels (ie, the Computer's updateDisplays() interface) ensures that\n                 * ALL updateDisplay() handlers will be called, including ours.\n                 *\n                 * NOTE: If we used the Debugger's stepCPU() function, then that includes a call to updateDisplay();\n                 * unfortunately, it will have happened BEFORE we called stop() to update the ADDRESS register, so\n                 * we still need to call it again.\n                 */\n                if (this.cmp) this.cmp.updateDisplays();\n            }\n            else {\n                this.cpu.startCPU();\n            }\n        }\n    }\n\n    /**\n     * processDeposit(value, index)\n     *\n     * @this {PanelPDP10}\n     * @param {number} value\n     * @param {number} [index]\n     */\n    processDeposit(value, index)\n    {\n        if (value && !this.cpu.isRunning()) {\n            if (this.fDeposit) this.advanceAddr();\n            /*\n             * This used to be updateData(), but that only updates regData, whereas setDR() updates both regData and regDisplay,\n             * and for these kinds of explicit Front Panel operations, I'm assuming the values should be synced.\n             */\n            var w = this.setDR(this.regSwitches);\n\n            if (this.nAddrSel == PanelPDP10.ADDRSEL.CONS_PHY) {\n                /*\n                 * TODO: Determine if this needs to take the UNIBUS map into consideration.\n                 */\n                this.bus.setWordDirect(this.regAddr, w);\n            } else {\n                /*\n                 * TODO: This code is obviously incomplete, since it doesn't take into account the precise ADDRSEL mode.\n                 */\n                this.cpu.writeWord(this.regAddr, w);\n            }\n        }\n    }\n\n    /**\n     * processExamine(value, index)\n     *\n     * @this {PanelPDP10}\n     * @param {number} value\n     * @param {number} [index]\n     */\n    processExamine(value, index)\n    {\n        if (!value && !this.cpu.isRunning()) {\n            var w;\n            if (this.fExamine) this.advanceAddr();\n            if (this.nAddrSel == PanelPDP10.ADDRSEL.CONS_PHY) {\n                /*\n                 * TODO: Determine if this needs to take the UNIBUS map into consideration.\n                 */\n                w = this.bus.getWordDirect(this.regAddr);\n            } else {\n                /*\n                 * TODO: This code is obviously incomplete, since it doesn't take into account the precise ADDRSEL mode.\n                 */\n                w = this.cpu.readWord(this.regAddr);\n            }\n            /*\n             * This used to be updateData(), but that only updates regData, whereas setDR() updates both regData and regDisplay,\n             * and for these kinds of explicit Front Panel operations, I'm assuming the values should be synced.\n             */\n            this.setDR(w);\n        }\n    }\n\n    /**\n     * processLoadAddr(value, index)\n     *\n     * @this {PanelPDP10}\n     * @param {number} value\n     * @param {number} [index]\n     */\n    processLoadAddr(value, index)\n    {\n        if (!value && !this.cpu.isRunning()) {\n            this.updateAddr(this.regSwitches);\n        }\n    }\n\n    /**\n     * processLEDTest(value, index)\n     *\n     * @this {PanelPDP10}\n     * @param {number} value\n     * @param {number} [index]\n     */\n    processLEDTest(value, index)\n    {\n        if (value) {\n            this.fLEDTest = true;\n            this.displayLEDs(true);\n        } else {\n            this.fLEDTest = false;\n            this.displayLEDs();\n            /*\n             * This is another one of my \"innovations\": when you're done testing the LEDs, all the switches reset as well.\n             */\n            this.setSRSwitches(0);\n        }\n    }\n\n    /**\n     * processSRSwitch(value, index)\n     *\n     * @this {PanelPDP10}\n     * @param {number} value (normally 0 or 1, but we only depend on it being zero or non-zero)\n     * @param {number} index\n     */\n    processSRSwitch(value, index)\n    {\n        if (value) {\n            this.regSwitches |= 1 << index;\n        } else {\n            this.regSwitches &= ~(1 << index);\n        }\n    }\n\n    /**\n     * advanceAddr()\n     *\n     * This should also take care of the following Front Panel behaviors when the accessing the general-purpose\n     * registers:\n     *\n     *      1) ADDRESS display incremented by 1 (instead of 2)\n     *      2) The STEP after the last register is 177700, such that the addresses are looped\n     *\n     * A third behavior is NOT emulated: preventing the ADDRESS from stepping to the first General Register (177700)\n     * from 177676.\n     *\n     * @this {PanelPDP10}\n     * @return {number}\n     */\n    advanceAddr()\n    {\n        var inc = 1;\n        var mask = this.bus.nBusMask;\n        if (!this.getSwitch(PanelPDP10.SWITCH.STEP)) inc = -inc;\n        return this.updateAddr((this.regAddr & ~mask) | ((this.regAddr + inc) & mask));\n    }\n\n    /**\n     * updateAddr(value)\n     *\n     * @this {PanelPDP10}\n     * @param {number} value\n     * @return {number}\n     */\n    updateAddr(value)\n    {\n        this.regAddr = value & this.bus.nBusMask;\n        if (this.ledAddr !== this.regAddr) {\n            this.ledAddr = this.regAddr;\n            this.updateLEDArray(\"A\", this.ledAddr, 22);\n        }\n        return this.regAddr;\n    }\n\n    /**\n     * updateData(value)\n     *\n     * @this {PanelPDP10}\n     * @param {number} value\n     * @return {number}\n     */\n    updateData(value)\n    {\n        this.regData = value % PDP10.WORD_LIMIT;\n        if (this.ledData !== this.regData) {\n            this.ledData = this.regData;\n            this.updateLEDArray(\"D\", this.ledData, 16);\n        }\n        return this.regData;\n    }\n\n    /**\n     * updateLED(sBinding, value)\n     *\n     * @this {PanelPDP10}\n     * @param {string} sBinding\n     * @param {number} value\n     * @return {number}\n     */\n    updateLED(sBinding, value)\n    {\n        this.leds[sBinding] = value;\n        if (!this.fLEDTest) this.displayLED(sBinding, value);\n        return value;\n    }\n\n    /**\n     * updateLEDArray(sPrefix, value, nLEDs)\n     *\n     * @this {PanelPDP10}\n     * @param {string} sPrefix\n     * @param {number} value\n     * @param {number} nLEDs\n     */\n    updateLEDArray(sPrefix, value, nLEDs)\n    {\n        for (var i = 0; i < nLEDs; i++) {\n            var sBinding = sPrefix + i;\n            this.updateLED(sBinding, value & (1 << i));\n        }\n    }\n\n    /**\n     * setSRSwitches(value)\n     *\n     * @this {PanelPDP10}\n     * @param {number|undefined} value\n     * @return {boolean}\n     */\n    setSRSwitches(value)\n    {\n        this.regSwitches = value | 0;\n        for (var i = 0; i < 22; i++) {\n            this.switches['S'+i][1] = (this.regSwitches & (1 << i))? 1 : 0;\n        }\n        /*\n         * This (re)displays ALL switches, not merely the SR switches, but that's OK.\n         */\n        this.displaySwitches();\n        return true;\n    }\n\n    /**\n     * stop(ms, nCycles)\n     *\n     * This is a notification handler, called by the Computer, to inform us the CPU has now stopped.\n     *\n     * @this {PanelPDP10}\n     * @param {number} [ms]\n     * @param {number} [nCycles]\n     */\n    stop(ms, nCycles)\n    {\n        this.updateAddr(this.cpu.getPC());\n    }\n\n    /**\n     * setAddr(value, fActive)\n     *\n     * This interface is for passing new addresses to the Front Panel.  However, whether or not this will become the\n     * ADDRESS actually displayed will depend on other settings (see updateStatus() for details).\n     *\n     * @this {PanelPDP10}\n     * @param {number} value\n     * @param {boolean} [fActive] (true if this should become the \"active\" ADDRESS regardless of other settings)\n     */\n    setAddr(value, fActive)\n    {\n        this.regAddr = value;\n    }\n\n    /**\n     * setData(value, fActive)\n     *\n     * This interface is for passing new data to the Front Panel.  However, whether or not this will become the\n     * DATA actually displayed will depend on the Front Panel's DATASEL switch setting, as well as the fActive flag.\n     *\n     * @this {PanelPDP10}\n     * @param {number} value\n     * @param {boolean} [fActive] (true if this should become the \"active\" DATA regardless of the DATASEL switch setting)\n     */\n    setData(value, fActive)\n    {\n        if (!fActive) {\n            this.regData = value;\n        } else {\n            this.regDisplay = value;\n        }\n    }\n\n    /**\n     * updateDisplay(nUpdate)\n     *\n     * Called by the Computer component at intervals to update registers, LEDs, etc.\n     *\n     * @this {PanelPDP10}\n     * @param {number} [nUpdate] (-2 for power on, -1 for forced, > 0 for periodic, 0 or undefined otherwise)\n     */\n    updateDisplay(nUpdate)\n    {\n        if (this.cLiveRegs) {\n\n            var fRunning = this.cpu.isRunning();\n            var fWaiting = this.cpu.isWaiting();\n\n            if (nUpdate < 0 || !fRunning || this.fDisplayLiveRegs) {\n\n                /*\n                 * We arbitrarily separate the display elements into two categories: cheap and expensive.\n                 *\n                 * LEDs are considered cheap, register displays are not.  So we'll skip the latter if this\n                 * is a periodic update AND our periodic update counter hasn't reached the periodic update limit.\n                 */\n                if (nUpdate <= 0 || (this.nDisplayCount += nUpdate) >= this.nDisplayLimit) {\n                    this.displayValue(\"PC\", this.cpu.getPC());\n                    this.nDisplayCount = 0;\n                }\n\n                /*\n                 * Update the ADDRESS and DATA LEDs by selecting the appropriate values.\n                 *\n                 * TODO: There is currently no mechanism for selecting regData over regDisplay;\n                 * we are acting as if the DATASEL switch setting is locked to \"DISPLAY REGISTER\".\n                 */\n                if (nUpdate < -1) {\n                    this.regAddr = this.cpu.getPC();\n                } else if (nUpdate > 0 && fRunning && !fWaiting) {\n                    this.regAddr = this.cpu.getLastAddr();\n                }\n\n                this.updateAddr(this.regAddr);\n                this.updateData(this.regDisplay);\n            }\n        }\n    }\n\n    /**\n     * PanelPDP10.init()\n     *\n     * This function operates on every HTML element of class \"panel\", extracting the\n     * JSON-encoded parameters for the PanelPDP10 constructor from the element's \"data-value\"\n     * attribute, invoking the constructor to create a PanelPDP10 component, and then binding\n     * any associated HTML controls to the new component.\n     *\n     * NOTE: Unlike most other component init() functions, this one is designed to be\n     * called multiple times: once at load time, so that we can bind our print()\n     * function to the panel's output control ASAP, and again when the Computer component\n     * is verifying that all components are ready and invoking their powerUp() functions.\n     *\n     * Our powerUp() method gives us a second opportunity to notify any components that\n     * that might care (eg, CPU, Keyboard, and Debugger) that we have some controls they\n     * might want to use.\n     */\n    static init()\n    {\n        var aePanels = Component.getElementsByClass(document, PDP10.APPCLASS, \"panel\");\n        for (var iPanel=0; iPanel < aePanels.length; iPanel++) {\n            var ePanel = aePanels[iPanel];\n            var parmsPanel = Component.getComponentParms(ePanel);\n            var panel = Component.getComponentByID(parmsPanel['id']);\n            if (!panel) panel = new PanelPDP10(parmsPanel, true);\n            Component.bindComponentControls(panel, ePanel, PDP10.APPCLASS);\n        }\n    }\n}\n\nPanelPDP10.ADDRSEL = {\n    CONS_PHY:   7       // use a physical address to perform console operations (e.g., LOAD ADRS, EXAM, & DEP)\n};\n\n/*\n * To get the current state of a switch; eg::\n *\n *      this.getSwitch(PanelPDP10.SWITCH.ENABLE)\n *\n * I haven't filled out this table, primarily it only needs to list switches we actually query\n * (eg, non-momentary ones like 'ENABLE' and 'STEP', and 'EXAM' and 'DEP' since they have special\n * \"step\" behavior when pressed more than once in a row).  Ditto for the LED table.\n */\nPanelPDP10.SWITCH = {\n    DEP:    'DEP',\n    ENABLE: 'ENABLE',\n    EXAM:   'EXAM',\n    STEP:   'STEP'\n};\n\n/*\n * Initialize every Panel module on the page.\n */\nWeb.onInit(PanelPDP10.init);\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp10/lib/bus.js (C) Jeff Parsons 2012-2018\n */\n\n\n/*\n * Data types used by scanMemory()\n */\n\n/**\n * This defines the BlockInfo bit fields used by scanMemory() when it creates the aBlocks array.\n *\n * @typedef {{\n *  num:    BitField,\n *  count:  BitField,\n *  btmod:  BitField,\n *  type:   BitField\n * }}\n */\nvar BlockInfoPDP10 = Usr.defineBitFields({num:20, count:8, btmod:1, type:3});\n\n/**\n * BusInfoPDP10 object definition (returned by scanMemory())\n *\n *  cbTotal:    total bytes allocated\n *  cBlocks:    total Memory blocks allocated\n *  aBlocks:    array of allocated Memory block numbers\n *\n * @typedef {{\n *  cbTotal:    number,\n *  cBlocks:    number,\n *  aBlocks:    Array.<BlockInfoPDP10>\n * }}\n */\nvar BusInfoPDP10;\n\nclass BusPDP10 extends Component {\n    /**\n     * BusPDP10(parmsBus, cpu, dbg)\n     *\n     * The BusPDP10 component manages physical memory and I/O address spaces.\n     *\n     * The BusPDP10 component has no UI elements, so it does not require an init() handler,\n     * but it still inherits from the Component class and must be allocated like any\n     * other device component.  It's currently allocated by the Computer's init() handler,\n     * which then calls the initBus() method of all the other components.\n     *\n     * For memory beyond the simple needs of the ROM and RAM components (ie, memory-mapped\n     * devices), the address space must still be allocated through the BusPDP10 component via\n     * addMemory().  If the component needs something more than simple read/write storage,\n     * it must provide a custom controller.\n     *\n     * @param {Object} parmsBus\n     * @param {CPUStatePDP10} cpu\n     * @param {DebuggerPDP10} dbg\n     */\n    constructor(parmsBus, cpu, dbg)\n    {\n        super(\"Bus\", parmsBus, MessagesPDP10.BUS);\n\n        this.cpu = cpu;\n        this.dbg = dbg;\n\n        /*\n         * Supported values for nBusWidth: 18 (default).  This represents the maximum size of the bus for the\n         * life of the machine, regardless what memory management mode the CPU has enabled.\n         */\n        this.nBusWidth = +parmsBus['busWidth'] || 18;\n\n        /*\n         * Compute all BusPDP10 memory block parameters now, based on the width of the bus.\n         *\n         * Note that all PCjs machines divide their address space into blocks, using a block size appropriate for\n         * the machine's bus width.  This allows us to efficiently allocate the entire address space, by reusing blocks\n         * as appropriate, and to define to different address behaviors on a block-granular level.\n         */\n        this.addrTotal = 1 << this.nBusWidth;\n        this.nBusMask = (this.addrTotal - 1);\n        this.nBlockSize = 16384;\n        this.nBlockShift = Math.log2(this.nBlockSize);      // ES6 ALERT (alternatively: Math.log(this.nBlockSize) / Math.LN2)\n        this.nBlockLen = this.nBlockSize >> 2;\n        this.nBlockLimit = this.nBlockSize - 1;\n        this.nBlockTotal = (this.addrTotal / this.nBlockSize) | 0;\n        this.nBlockMask = this.nBlockTotal - 1;\n\n\n        this.nDisableFaults = 0;\n        this.fFault = false;\n\n        /*\n         * Define all the properties to be initialized by initMemory()\n         */\n        this.aBusBlocks = [];\n\n        /*\n         * We're ready to allocate empty Memory blocks to span the entire physical address space.\n         */\n        this.initMemory();\n\n        this.setReady();\n    }\n\n    /**\n     * initMemory()\n     *\n     * Allocate enough (empty) Memory blocks to span the entire physical address space.\n     *\n     * @this {BusPDP10}\n     */\n    initMemory()\n    {\n        var block = new MemoryPDP10(this);\n        block.copyBreakpoints(this.dbg);\n\n        this.aBusBlocks = new Array(this.nBlockTotal);\n        for (var iBlock = 0; iBlock < this.nBlockTotal; iBlock++) {\n            this.aBusBlocks[iBlock] = block;\n        }\n    }\n\n    /**\n     * reset()\n     *\n     * @this {BusPDP10}\n     */\n    reset()\n    {\n    }\n\n    /**\n     * getWidth()\n     *\n     * @this {BusPDP10}\n     * @return {number}\n     */\n    getWidth()\n    {\n        return this.nBusWidth;\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {BusPDP10}\n     * @param {Object|null} data (always null because we supply no powerDown() handler)\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        if (!fRepower) {\n            if (!data) {\n                this.reset();\n            } else {\n                if (!this.restore(data)) return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {BusPDP10}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        return fSave? this.save() : true;\n    }\n\n    /**\n     * save()\n     *\n     * @this {BusPDP10}\n     * @return {Object|null}\n     */\n    save()\n    {\n        var state = new State(this);\n        state.set(0, this.saveMemory());\n        return state.data();\n    }\n\n    /**\n     * restore(data)\n     *\n     * @this {BusPDP10}\n     * @param {Object} data\n     * @return {boolean} true if restore successful, false if not\n     */\n    restore(data)\n    {\n        return this.restoreMemory(data[0]);\n    }\n\n    /**\n     * addMemory(addr, size, type)\n     *\n     * Adds new Memory blocks to the specified address range.  Any Memory blocks previously\n     * added to that range must first be removed via removeMemory(); otherwise, you'll get\n     * an allocation conflict error.  This helps prevent address calculation errors, redundant\n     * allocations, etc.\n     *\n     * We've relaxed some of the original requirements (ie, that addresses must start at a\n     * block-granular address, or that sizes must be equal to exactly one or more blocks),\n     * because machines with large block sizes can make it impossible to load certain ROMs at\n     * their required addresses.  Every allocation still allocates a whole number of blocks.\n     *\n     * Even so, BusPDP10 memory management does NOT provide a general-purpose heap.  Most memory\n     * allocations occur during machine initialization and never change.  In particular, there\n     * is NO support for removing partial-block allocations.\n     *\n     * Each Memory block keeps track of a start address (addr) and length (used), indicating\n     * the used space within the block; any free space that precedes or follows that used space\n     * can be allocated later, by simply extending the beginning or ending of the previously used\n     * space.  However, any holes that might have existed between the original allocation and an\n     * extension are subsumed by the extension.\n     *\n     * @this {BusPDP10}\n     * @param {number} addr is the starting physical address of the request\n     * @param {number} size of the request, in bytes\n     * @param {number} type is one of the MemoryPDP10.TYPE constants\n     * @return {boolean} true if successful, false if not\n     */\n    addMemory(addr, size, type)\n    {\n        var addrNext = addr;\n        var sizeLeft = size;\n        var iBlock = addrNext >>> this.nBlockShift;\n\n        while (sizeLeft > 0 && iBlock < this.aBusBlocks.length) {\n\n            var block = this.aBusBlocks[iBlock];\n            var addrBlock = iBlock * this.nBlockSize;\n            var sizeBlock = this.nBlockSize - (addrNext - addrBlock);\n            if (sizeBlock > sizeLeft) sizeBlock = sizeLeft;\n\n            if (block && block.size) {\n                if (block.type == type) {\n                    /*\n                     * Where there is already a similar block with a non-zero size, we allow the allocation only if:\n                     *\n                     *   1) addrNext + sizeLeft <= block.addr (the request precedes the used portion of the current block), or\n                     *   2) addrNext >= block.addr + block.used (the request follows the used portion of the current block)\n                     */\n                    if (addrNext + sizeLeft <= block.addr) {\n                        block.used += (block.addr - addrNext);\n                        block.addr = addrNext;\n                        return true;\n                    }\n                    if (addrNext >= block.addr + block.used) {\n                        var sizeAvail = block.size - (addrNext - addrBlock);\n                        if (sizeAvail > sizeLeft) sizeAvail = sizeLeft;\n                        block.used = addrNext - block.addr + sizeAvail;\n                        addrNext = addrBlock + this.nBlockSize;\n                        sizeLeft -= sizeAvail;\n                        iBlock++;\n                        continue;\n                    }\n                }\n                return this.reportError(BusPDP10.ERROR.RANGE_INUSE, addrNext, sizeLeft);\n            }\n\n            var blockNew = new MemoryPDP10(this, addrNext, sizeBlock, this.nBlockSize, type);\n            blockNew.copyBreakpoints(this.dbg, block);\n            this.aBusBlocks[iBlock++] = blockNew;\n\n            addrNext = addrBlock + this.nBlockSize;\n            sizeLeft -= sizeBlock;\n        }\n\n        if (sizeLeft <= 0) {\n            this.status(\"Added \" + (size >> 10) + \"Kb \" + MemoryPDP10.TYPE_NAMES[type] + \" at \" + Str.toOct(addr));\n            return true;\n        }\n\n        return this.reportError(BusPDP10.ERROR.RANGE_INVALID, addr, size);\n    }\n\n    /**\n     * cleanMemory(addr, size)\n     *\n     * @this {BusPDP10}\n     * @param {number} addr\n     * @param {number} size\n     * @return {boolean} true if all blocks were clean, false if dirty; all blocks are cleaned in the process\n     */\n    cleanMemory(addr, size)\n    {\n        var fClean = true;\n        var iBlock = addr >>> this.nBlockShift;\n        var sizeBlock = this.nBlockSize - (addr & this.nBlockLimit);\n        while (size > 0 && iBlock < this.aBusBlocks.length) {\n            if (this.aBusBlocks[iBlock].fDirty) {\n                this.aBusBlocks[iBlock].fDirty = fClean = false;\n                this.aBusBlocks[iBlock].fDirtyEver = true;\n            }\n            size -= sizeBlock;\n            sizeBlock = this.nBlockSize;\n            iBlock++;\n        }\n        return fClean;\n    }\n\n    /**\n     * zeroMemory(addr, size, pattern)\n     *\n     * @this {BusPDP10}\n     * @param {number} addr\n     * @param {number} size\n     * @param {number} [pattern]\n     */\n    zeroMemory(addr, size, pattern)\n    {\n        var off = addr & this.nBlockLimit;\n        var iBlock = addr >>> this.nBlockShift;\n        while (size > 0 && iBlock < this.aBusBlocks.length) {\n            this.aBusBlocks[iBlock].zero(off, size, pattern);\n            size -= this.nBlockSize;\n            iBlock++;\n            off = 0;\n        }\n    }\n\n    /**\n     * scanMemory(info, addr, size)\n     *\n     * Returns a BusInfoPDP10 object for the specified address range.\n     *\n     * @this {BusPDP10}\n     * @param {BusInfoPDP10} [info] previous BusInfoPDP10, if any\n     * @param {number} [addr] starting address of range (0 if none provided)\n     * @param {number} [size] size of range, in bytes (up to end of address space if none provided)\n     * @return {BusInfoPDP10} updated info (or new info if no previous info provided)\n     */\n    scanMemory(info, addr, size)\n    {\n        if (addr == null) addr = 0;\n        if (size == null) size = (this.addrTotal - addr) | 0;\n        if (info == null) info = {cbTotal: 0, cBlocks: 0, aBlocks: []};\n\n        var iBlock = addr >>> this.nBlockShift;\n        var iBlockMax = ((addr + size - 1) >>> this.nBlockShift);\n\n        info.cbTotal = 0;\n        info.cBlocks = 0;\n        while (iBlock <= iBlockMax) {\n            var block = this.aBusBlocks[iBlock];\n            info.cbTotal += block.size;\n            if (block.size) {\n                info.aBlocks.push(/** @type {BlockInfoPDP10} */ (Usr.initBitFields(BlockInfoPDP10, iBlock, 0, 0, block.type)));\n                info.cBlocks++\n            }\n            iBlock++;\n        }\n        return info;\n    }\n\n    /**\n     * removeMemory(addr, size)\n     *\n     * Replaces every block in the specified address range with empty Memory blocks that ignore all reads/writes.\n     *\n     * TODO: Update the removeMemory() interface to reflect the relaxed requirements of the addMemory() interface.\n     *\n     * @this {BusPDP10}\n     * @param {number} addr\n     * @param {number} size\n     * @return {boolean} true if successful, false if not\n     */\n    removeMemory(addr, size)\n    {\n        if (!(addr & this.nBlockLimit) && size && !(size & this.nBlockLimit)) {\n            var iBlock = addr >>> this.nBlockShift;\n            while (size > 0) {\n                var blockOld = this.aBusBlocks[iBlock];\n                var blockNew = new MemoryPDP10(this, addr);\n                blockNew.copyBreakpoints(this.dbg, blockOld);\n                this.aBusBlocks[iBlock++] = blockNew;\n                addr = iBlock * this.nBlockSize;\n                size -= this.nBlockSize;\n            }\n            return true;\n        }\n        return this.reportError(BusPDP10.ERROR.RANGE_INVALID, addr, size);\n    }\n\n    /**\n     * getMemoryBlocks(addr, size)\n     *\n     * @this {BusPDP10}\n     * @param {number} addr is the starting physical address\n     * @param {number} size of the request, in bytes\n     * @return {Array} of Memory blocks\n     */\n    getMemoryBlocks(addr, size)\n    {\n        var aBlocks = [];\n        var iBlock = addr >>> this.nBlockShift;\n        while (size > 0 && iBlock < this.aBusBlocks.length) {\n            aBlocks.push(this.aBusBlocks[iBlock++]);\n            size -= this.nBlockSize;\n        }\n        return aBlocks;\n    }\n\n    /**\n     * setMemoryBlocks(addr, size, aBlocks, type)\n     *\n     * If no type is specified, then specified address range uses all the provided blocks as-is;\n     * this form of setMemoryBlocks() is used for complete physical aliases.\n     *\n     * Otherwise, new blocks are allocated with the specified type; the underlying memory from the\n     * provided blocks is still used, but the new blocks may have different access to that memory.\n     *\n     * @this {BusPDP10}\n     * @param {number} addr is the starting physical address\n     * @param {number} size of the request, in bytes\n     * @param {Array} aBlocks as returned by getMemoryBlocks()\n     * @param {number} [type] is one of the MemoryPDP10.TYPE constants\n     */\n    setMemoryBlocks(addr, size, aBlocks, type)\n    {\n        var i = 0;\n        var iBlock = addr >>> this.nBlockShift;\n        while (size > 0 && iBlock < this.aBusBlocks.length) {\n            var block = aBlocks[i++];\n\n            if (!block) break;\n            if (type !== undefined) {\n                var blockNew = new MemoryPDP10(this, addr);\n                blockNew.clone(block, type, this.dbg);\n                block = blockNew;\n            }\n            this.aBusBlocks[iBlock++] = block;\n            size -= this.nBlockSize;\n        }\n    }\n\n    /**\n     * getWord(addr)\n     *\n     * @this {BusPDP10}\n     * @param {number} addr is a physical address\n     * @return {number} word (36-bit) value at that address\n     */\n    getWord(addr)\n    {\n        var off = addr & this.nBlockLimit;\n        var iBlock = (addr & this.nBusMask) >>> this.nBlockShift;\n        return this.aBusBlocks[iBlock].readWord(off, addr);\n    }\n\n    /**\n     * setWord(addr, w)\n     *\n     * @this {BusPDP10}\n     * @param {number} addr is a physical address\n     * @param {number} w is the word (36-bit) value to write\n     */\n    setWord(addr, w)\n    {\n        var off = addr & this.nBlockLimit;\n        var iBlock = (addr & this.nBusMask) >>> this.nBlockShift;\n        this.aBusBlocks[iBlock].writeWord(w, off, addr);\n    }\n\n    /**\n     * getBlockDirect(addr)\n     *\n     * @this {BusPDP10}\n     * @param {number} addr is a physical address\n     * @return {MemoryPDP10}\n     */\n    getBlockDirect(addr)\n    {\n        return this.aBusBlocks[(addr & this.nBusMask) >>> this.nBlockShift];\n    }\n\n    /**\n     * getWordDirect(addr)\n     *\n     * This is used for device I/O and Debugger physical memory requests, not the CPU.\n     *\n     * @this {BusPDP10}\n     * @param {number} addr is a physical address\n     * @return {number} word (36-bit) value at that address\n     */\n    getWordDirect(addr)\n    {\n        var w;\n        var off = addr & this.nBlockLimit;\n        var block = this.getBlockDirect(addr);\n        this.nDisableFaults++;\n        w = block.readWordDirect(off, addr);\n        this.nDisableFaults--;\n        return w;\n    }\n\n    /**\n     * setWordDirect(addr, w)\n     *\n     * This is used for device I/O and Debugger physical memory requests, not the CPU.\n     *\n     * @this {BusPDP10}\n     * @param {number} addr is a physical address\n     * @param {number} w is the word (36-bit) value to write\n     */\n    setWordDirect(addr, w)\n    {\n        var off = addr & this.nBlockLimit;\n        var block = this.getBlockDirect(addr);\n        this.nDisableFaults++;\n        block.writeWordDirect(w, off, addr);\n        this.nDisableFaults--;\n    }\n\n    /**\n     * addMemBreak(addr, fWrite)\n     *\n     * @this {BusPDP10}\n     * @param {number} addr\n     * @param {boolean} fWrite is true for a memory write breakpoint, false for a memory read breakpoint\n     */\n    addMemBreak(addr, fWrite)\n    {\n        if (DEBUGGER) {\n            var iBlock = addr >>> this.nBlockShift;\n            this.aBusBlocks[iBlock].addBreakpoint(addr & this.nBlockLimit, fWrite);\n        }\n    }\n\n    /**\n     * removeMemBreak(addr, fWrite)\n     *\n     * @this {BusPDP10}\n     * @param {number} addr\n     * @param {boolean} fWrite is true for a memory write breakpoint, false for a memory read breakpoint\n     */\n    removeMemBreak(addr, fWrite)\n    {\n        if (DEBUGGER) {\n            var iBlock = addr >>> this.nBlockShift;\n            this.aBusBlocks[iBlock].removeBreakpoint(addr & this.nBlockLimit, fWrite);\n        }\n    }\n\n    /**\n     * saveMemory(fAll)\n     *\n     * The only memory blocks we save are those marked as dirty, but most likely all of RAM will have been marked dirty,\n     * and even if our dirty-memory flags were as smart as our dirty-sector flags (ie, were set only when a write changed\n     * what was already there), it's unlikely that would reduce the number of RAM blocks we must save/restore.  At least\n     * all the ROM blocks should be clean (except in the unlikely event that the Debugger was used to modify them).\n     *\n     * All dirty blocks will be stored in a single array, as pairs of block numbers and data arrays, like so:\n     *\n     *      [iBlock0, [dw0, dw1, ...], iBlock1, [dw0, dw1, ...], ...]\n     *\n     * In a normal 4Kb block, there will be 1K DWORD values in the data array.  Remember that each DWORD is a signed 32-bit\n     * integer (because they are formed using bitwise operator rather than floating-point math operators), so don't be\n     * surprised to see negative numbers in the data.\n     *\n     * The above example assumes \"uncompressed\" data arrays.  If we choose to use \"compressed\" data arrays, the data arrays\n     * will look like:\n     *\n     *      [count0, dw0, count1, dw1, ...]\n     *\n     * where each count indicates how many times the following DWORD value occurs.  A data array length less than 1K indicates\n     * that it's compressed, since we'll only store them in compressed form if they actually shrank, and we'll use State\n     * helper methods compress() and decompress() to create and expand the compressed data arrays.\n     *\n     * @this {BusPDP10}\n     * @param {boolean} [fAll] (true to save all non-ROM memory blocks, regardless of their dirty flags)\n     * @return {Array} a\n     */\n    saveMemory(fAll)\n    {\n        var i = 0;\n        var a = [];\n\n        for (var iBlock = 0; iBlock < this.nBlockTotal; iBlock++) {\n            var block = this.aBusBlocks[iBlock];\n            /*\n             * We have to check both fDirty and fDirtyEver, because we may have called cleanMemory() on some of\n             * the memory blocks (eg, video memory), and while cleanMemory() will clear a dirty block's fDirty flag,\n             * it also sets the dirty block's fDirtyEver flag, which is left set for the lifetime of the machine.\n             */\n            if (fAll && block.type != MemoryPDP10.TYPE.ROM || block.fDirty || block.fDirtyEver) {\n                a[i++] = iBlock;\n                a[i++] = State.compress(block.save());\n            }\n        }\n\n        return a;\n    }\n\n    /**\n     * restoreMemory(a)\n     *\n     * This restores the contents of all Memory blocks; called by CPUState.restore().\n     *\n     * In theory, we ONLY have to save/restore block contents.  Other block attributes,\n     * like the type, the memory controller (if any), and the active memory access functions,\n     * should already be restored, since every component (re)allocates all the memory blocks\n     * it was using when it's restored.  And since the CPU is guaranteed to be the last\n     * component to be restored, all those blocks (and their attributes) should be in place now.\n     *\n     * See saveMemory() for more information on how the memory block contents are saved.\n     *\n     * @this {BusPDP10}\n     * @param {Array} a\n     * @return {boolean} true if successful, false if not\n     */\n    restoreMemory(a)\n    {\n        var i;\n        for (i = 0; i < a.length - 1; i += 2) {\n            var iBlock = a[i];\n            var adw = a[i+1];\n            if (adw && adw.length < this.nBlockLen) {\n                adw = State.decompress(adw, this.nBlockLen);\n            }\n            var block = this.aBusBlocks[iBlock];\n            if (!block || !block.restore(adw)) {\n                /*\n                 * Either the block to restore hasn't been allocated, indicating a change in the machine\n                 * configuration since it was last saved (the most likely explanation) or there's some internal\n                 * inconsistency (eg, the block size is wrong).\n                 */\n                Component.error(\"Unable to restore memory block \" + iBlock);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * getMemoryLimit(type)\n     *\n     * @this {BusPDP10}\n     * @param {number} type is one of the MemoryPDP10.TYPE constants\n     * @return {number} (the limiting address of the specified memory type, zero if none)\n     */\n    getMemoryLimit(type)\n    {\n        var addr = 0;\n        for (var iBlock = 0; iBlock < this.aBusBlocks.length; iBlock++) {\n            var block = this.aBusBlocks[iBlock];\n            if (block.type == type) {\n                addr = block.addr + block.used;\n            }\n        }\n        return addr;\n    }\n\n    /**\n     * fault(addr, err, access)\n     *\n     * Bus interface for signaling alignment errors, invalid memory, etc.\n     *\n     * @this {BusPDP10}\n     * @param {number} addr\n     * @param {number} [err]\n     * @param {number} [access] (for diagnostic purposes only)\n     */\n    fault(addr, err, access)\n    {\n        this.fFault = true;\n        if (!this.nDisableFaults) {\n            if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP10.FAULT)) {\n                this.dbg.printMessage(\"memory fault on \" + this.dbg.toStrBase(addr), true, true);\n            }\n            this.cpu.haltCPU();\n        }\n    }\n\n    /**\n     * checkFault()\n     *\n     * This also serves as a clearFault() function.\n     *\n     * @this {BusPDP10}\n     * @return {boolean}\n     */\n    checkFault()\n    {\n        var f = this.fFault;\n        this.fFault = false;\n        return f;\n    }\n\n    /**\n     * reportError(errNum, addr, size, fQuiet)\n     *\n     * @this {BusPDP10}\n     * @param {number} errNum\n     * @param {number} addr\n     * @param {number} size\n     * @param {boolean} [fQuiet] (true if any error should be quietly logged)\n     * @return {boolean} false\n     */\n    reportError(errNum, addr, size, fQuiet)\n    {\n        var sError = \"Memory block error (\" + errNum + \": \" + Str.toHex(addr) + \",\" + Str.toHex(size) + \")\";\n        if (fQuiet) {\n            if (this.dbg) {\n                this.dbg.message(sError);\n            } else {\n                this.log(sError);\n            }\n        } else {\n            Component.error(sError);\n        }\n        return false;\n    }\n}\n\nBusPDP10.ERROR = {\n    RANGE_INUSE:        1,\n    RANGE_INVALID:      2\n};\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp10/lib/device.js (C) Jeff Parsons 2012-2018\n */\n\n\nclass DevicePDP10 extends Component {\n    /**\n     * DevicePDP10(parmsDevice)\n     *\n     * @param {Object} parmsDevice\n     */\n    constructor(parmsDevice)\n    {\n        super(\"Device\", parmsDevice, MessagesPDP10.DEVICE);\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * @this {DevicePDP10}\n     * @param {ComputerPDP10} cmp\n     * @param {BusPDP10} bus\n     * @param {CPUStatePDP10} cpu\n     * @param {DebuggerPDP10} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.bus = bus;\n        this.cmp = cmp;\n        this.cpu = cpu;\n        this.dbg = dbg;\n\n        this.setReady();\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {DevicePDP10}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        if (!fRepower) {\n            if (!data) {\n                this.reset();\n            } else {\n                if (!this.restore(data)) return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {DevicePDP10}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        return fSave? this.save() : true;\n    }\n\n    /**\n     * reset()\n     *\n     * @this {DevicePDP10}\n     */\n    reset()\n    {\n    }\n\n    /**\n     * save()\n     *\n     * This implements save support for the DevicePDP10 component.\n     *\n     * @this {DevicePDP10}\n     * @return {Object}\n     */\n    save()\n    {\n        var state = new State(this);\n        return state.data();\n    }\n\n    /**\n     * restore(data)\n     *\n     * This implements restore support for the DevicePDP10 component.\n     *\n     * @this {DevicePDP10}\n     * @param {Object} data\n     * @return {boolean} true if successful, false if failure\n     */\n    restore(data)\n    {\n        return true;\n    }\n\n    /**\n     * DevicePDP10.init()\n     *\n     * This function operates on every HTML element of class \"device\", extracting the\n     * JSON-encoded parameters for the DevicePDP10 constructor from the element's \"data-value\"\n     * attribute, invoking the constructor to create a DevicePDP10 component, and then binding\n     * any associated HTML controls to the new component.\n     */\n    static init()\n    {\n        var aeDevice = Component.getElementsByClass(document, PDP10.APPCLASS, \"device\");\n        for (var iDevice = 0; iDevice < aeDevice.length; iDevice++) {\n            var device;\n            var eDevice = aeDevice[iDevice];\n            var parmsDevice = Component.getComponentParms(eDevice);\n            switch(parmsDevice['type']) {\n            case 'default':\n                device = new DevicePDP10(parmsDevice);\n                Component.bindComponentControls(device, eDevice, PDP10.APPCLASS);\n                break;\n            }\n        }\n    }\n}\n\n/*\n * Initialize all the DevicePDP10 modules on the page.\n */\nWeb.onInit(DevicePDP10.init);\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp10/lib/memory.js (C) Jeff Parsons 2012-2018\n */\n\n\n/**\n * @class DataView\n * @property {function(number,boolean):number} getUint8\n * @property {function(number,number,boolean)} setUint8\n * @property {function(number,boolean):number} getUint16\n * @property {function(number,number,boolean)} setUint16\n * @property {function(number,boolean):number} getInt32\n * @property {function(number,number,boolean)} setInt32\n */\nclass MemoryPDP10 {\n    /**\n     * MemoryPDP10(bus, addr, used, size, type)\n     *\n     * The Bus component allocates Memory objects so that each has a memory buffer with a\n     * block-granular starting address and an address range equal to bus.nBlockSize; however,\n     * the size of any given Memory object's underlying buffer can be either zero or bus.nBlockSize;\n     * memory read/write functions for empty (buffer-less) blocks are mapped to readNone/writeNone.\n     *\n     * The Bus allocates empty blocks for the entire address space during initialization, so that\n     * any reads/writes to undefined addresses will have no effect.  Later, the ROM and RAM\n     * components will ask the Bus to allocate memory for specific ranges, and the Bus will allocate\n     * as many new blockSize Memory objects as the ranges require.  Partial Memory blocks could\n     * also be supported in theory, but in practice, they're not.\n     *\n     * WARNING: Since Memory blocks are low-level objects that have no UI requirements, they\n     * do not inherit from the Component class, so if you want to use any Component class methods,\n     * such as Component.assert(), use the corresponding Debugger methods instead (assuming a debugger\n     * is available).\n     *\n     * @param {BusPDP10} bus\n     * @param {number|null} [addr] of lowest used address in block\n     * @param {number} [used] portion of block in words (0 for none)\n     * @param {number} [size] of block's buffer in words (0 for none)\n     * @param {number} [type] is one of the MemoryPDP10.TYPE constants (default is MemoryPDP10.TYPE.NONE)\n     */\n    constructor(bus, addr, used, size, type)\n    {\n        var a, i;\n        this.bus = bus;\n        this.id = (MemoryPDP10.idBlock += 2);\n        this.adw = null;\n        this.offset = 0;\n        this.addr = addr;\n        this.used = used;\n        this.size = size || 0;\n        this.type = type || MemoryPDP10.TYPE.NONE;\n        this.fReadOnly = (type == MemoryPDP10.TYPE.ROM);\n        this.dbg = null;\n        this.readWord = this.readWordDirect = this.readNone;\n        this.writeWord = this.writeWordDirect = this.writeNone;\n        this.cReadBreakpoints = this.cWriteBreakpoints = 0;\n        this.copyBreakpoints();     // initialize the block's Debugger info; the caller will reinitialize\n\n        /*\n         * TODO: Study the impact of dirty block tracking.  The original purposes were to allow saveMemory()\n         * to save only dirty blocks, and to enable the Video component to quickly detect changes to the video buffer.\n         *\n         * However, a quick test with dirty block tracking disabled didn't yield a noticeable improvement in performance,\n         * so I think the overhead of our block-based architecture is swamping the impact of these micro-updates.\n         */\n        this.fDirty = this.fDirtyEver = false;\n\n        /*\n         * For empty memory blocks, all we need to do is ensure all access functions are mapped to \"none\" handlers.\n         */\n        if (!this.size) {\n            this.setAccess();\n            return;\n        }\n\n        /*\n         * This is the normal case: allocate a buffer that provides a word of data per address;\n         * no controller is required because our default memory access functions (see afnMemory)\n         * know how to deal with this simple 1-1 mapping of addresses to words.\n         *\n         * TODO: Consider initializing the memory array to random (or pseudo-random) values in DEBUG\n         * mode; pseudo-random might be best, to help make any bugs reproducible.\n         */\n        a = this.aw = new Array(this.size);\n        for (i = 0; i < a.length; i++) a[i] = 0;\n        this.setAccess(MemoryPDP10.afnMemory);\n    }\n\n    /**\n     * init(addr)\n     *\n     * Quick reinitializer when reusing a Memory block.\n     *\n     * @this {MemoryPDP10}\n     * @param {number} addr\n     */\n    init(addr)\n    {\n        this.addr = addr;\n    }\n\n    /**\n     * clone(mem, type, dbg)\n     *\n     * Converts the current Memory block (this) into a clone of the given Memory block (mem),\n     * and optionally overrides the current block's type with the specified type.\n     *\n     * @this {MemoryPDP10}\n     * @param {MemoryPDP10} mem\n     * @param {number} [type]\n     * @param {DebuggerPDP10} [dbg]\n     */\n    clone(mem, type, dbg)\n    {\n        /*\n         * Original memory block IDs are even; cloned memory block IDs are odd;\n         * the original ID of the current block is lost, but that's OK, since it was presumably\n         * produced merely to become a clone.\n         */\n        this.id = mem.id | 0x1;\n        this.used = mem.used;\n        this.size = mem.size;\n        if (type) {\n            this.type = type;\n            this.fReadOnly = (type == MemoryPDP10.TYPE.ROM);\n        }\n        this.aw = mem.aw;\n        this.setAccess(MemoryPDP10.afnMemory);\n        this.copyBreakpoints(dbg, mem);\n    }\n\n    /**\n     * save()\n     *\n     * This gets the contents of a Memory block as an array of numeric values; used by Bus.saveMemory(),\n     * which in turn is called by CPUState.save().\n     *\n     * @this {MemoryPDP10}\n     * @return {Array.<number>|null}\n     */\n    save()\n    {\n        return this.aw;\n    }\n\n    /**\n     * restore(aw)\n     *\n     * This restores the contents of a Memory block from an array of numeric values; used by Bus.restoreMemory(),\n     * which is called by CPUState.restore(), after all other components have been restored and thus all Memory\n     * blocks have been allocated by their respective components.\n     *\n     * @this {MemoryPDP10}\n     * @param {Array.<number>|null} aw\n     * @return {boolean} true if successful, false if block size mismatch\n     */\n    restore(aw)\n    {\n        if (aw && this.size == aw.length) {\n            this.aw = aw;\n            this.fDirty = true;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * zero(off, len, pattern)\n     *\n     * @this {MemoryPDP10}\n     * @param {number} [off] (optional starting word offset within block)\n     * @param {number} [len] (optional maximum number of words; default is the entire block)\n     * @param {number} [pattern] (default is zero)\n     */\n    zero(off, len, pattern = 0)\n    {\n        /*\n         * NOTE: If len is larger than the block, that's OK, because we also bounds-check the index.\n         */\n        off = off || 0;\n        if (len === undefined) len = this.size;\n\n\n        /*\n         * Although it's expected that most callers will supply unsigned 36-bit values, we're nice about\n         * converting any signed values to their unsigned (two's complement) counterpart, provided they are\n         * within the acceptable range.  Any values outside that range will be dealt with afterward.\n         */\n        if (pattern < 0 && pattern >= -PDP10.INT_LIMIT) {\n            pattern += PDP10.WORD_LIMIT;\n        }\n        pattern = Math.trunc(Math.abs(pattern)) % PDP10.WORD_LIMIT;\n\n        for (var i = off; len-- && i < this.size; i++) this.writeWordDirect(pattern, off, this.addr + off);\n    }\n\n    /**\n     * setAccess(afn, fDirect)\n     *\n     * The afn parameter should be a 2-entry function table containing word read and write handlers.\n     * See the static afnMemory table for an example.\n     *\n     * If no function table is specified, a default is selected based on the Memory type; similarly,\n     * any undefined entries in the table are filled with default handlers.\n     *\n     * fDirect indicates that both the default AND the direct handlers should be updated.  Direct\n     * handlers normally match the default handlers, except when \"checked\" handlers are installed;\n     * this allows \"checked\" handlers to know where to dispatch the call after performing checks.\n     * Examples of checks are read/write breakpoints, but it's really up to the Debugger to decide\n     * what the check consists of.\n     *\n     * @this {MemoryPDP10}\n     * @param {Array.<function()>} [afn] function table\n     * @param {boolean} [fDirect] (true to update direct access functions as well; default is true)\n     */\n    setAccess(afn, fDirect)\n    {\n        if (!afn) {\n\n            afn = MemoryPDP10.afnNone;\n        }\n        this.setReadAccess(afn, fDirect);\n        this.setWriteAccess(afn, fDirect);\n    }\n\n    /**\n     * setReadAccess(afn, fDirect)\n     *\n     * @this {MemoryPDP10}\n     * @param {Array.<function()>} afn\n     * @param {boolean} [fDirect]\n     */\n    setReadAccess(afn, fDirect)\n    {\n        if (!fDirect || !this.cReadBreakpoints) {\n            this.readWord = afn[0] || this.readNone;\n        }\n        if (fDirect || fDirect === undefined) {\n            this.readWordDirect = afn[0] || this.readNone;\n        }\n    }\n\n    /**\n     * setWriteAccess(afn, fDirect)\n     *\n     * @this {MemoryPDP10}\n     * @param {Array.<function()>} afn\n     * @param {boolean} [fDirect]\n     */\n    setWriteAccess(afn, fDirect)\n    {\n        if (!fDirect || !this.cWriteBreakpoints) {\n            this.writeWord = !this.fReadOnly && afn[1] || this.writeNone;\n        }\n        if (fDirect || fDirect === undefined) {\n            this.writeWordDirect = afn[1] || this.writeNone;\n        }\n    }\n\n    /**\n     * resetReadAccess()\n     *\n     * @this {MemoryPDP10}\n     */\n    resetReadAccess()\n    {\n        this.readWord = this.readWordDirect;\n    }\n\n    /**\n     * resetWriteAccess()\n     *\n     * @this {MemoryPDP10}\n     */\n    resetWriteAccess()\n    {\n        this.writeWord = this.fReadOnly? this.writeNone : this.writeWordDirect;\n    }\n\n    /**\n     * printAddr(sMessage)\n     *\n     * @this {MemoryPDP10}\n     * @param {string} sMessage\n     */\n    printAddr(sMessage)\n    {\n        if (DEBUG && this.dbg && this.dbg.messageEnabled(MessagesPDP10.MEMORY)) {\n            this.dbg.printMessage(sMessage + ' ' + (this.addr != null? ('@' + this.dbg.toStrBase(this.addr)) : '#' + this.id), true);\n        }\n    }\n\n    /**\n     * addBreakpoint(off, fWrite)\n     *\n     * @this {MemoryPDP10}\n     * @param {number} off\n     * @param {boolean} fWrite\n     */\n    addBreakpoint(off, fWrite)\n    {\n        if (!fWrite) {\n            if (this.cReadBreakpoints++ === 0) {\n                this.setReadAccess(MemoryPDP10.afnChecked, false);\n            }\n            if (DEBUG) this.printAddr(\"read breakpoint added to memory block\");\n        }\n        else {\n            if (this.cWriteBreakpoints++ === 0) {\n                this.setWriteAccess(MemoryPDP10.afnChecked, false);\n            }\n            if (DEBUG) this.printAddr(\"write breakpoint added to memory block\");\n        }\n    }\n\n    /**\n     * removeBreakpoint(off, fWrite)\n     *\n     * @this {MemoryPDP10}\n     * @param {number} off\n     * @param {boolean} fWrite\n     */\n    removeBreakpoint(off, fWrite)\n    {\n        if (!fWrite) {\n            if (--this.cReadBreakpoints === 0) {\n                this.resetReadAccess();\n                if (DEBUG) this.printAddr(\"all read breakpoints removed from memory block\");\n            }\n\n        }\n        else {\n            if (--this.cWriteBreakpoints === 0) {\n                this.resetWriteAccess();\n                if (DEBUG) this.printAddr(\"all write breakpoints removed from memory block\");\n            }\n\n        }\n    }\n\n    /**\n     * copyBreakpoints(dbg, mem)\n     *\n     * @this {MemoryPDP10}\n     * @param {DebuggerPDP10} [dbg]\n     * @param {MemoryPDP10} [mem] (outgoing MemoryPDP10 block to copy breakpoints from, if any)\n     */\n    copyBreakpoints(dbg, mem)\n    {\n        this.dbg = dbg;\n        this.cReadBreakpoints = this.cWriteBreakpoints = 0;\n        if (mem) {\n            if ((this.cReadBreakpoints = mem.cReadBreakpoints)) {\n                this.setReadAccess(MemoryPDP10.afnChecked, false);\n            }\n            if ((this.cWriteBreakpoints = mem.cWriteBreakpoints)) {\n                this.setWriteAccess(MemoryPDP10.afnChecked, false);\n            }\n        }\n    }\n\n    /**\n     * readNone(off, addr)\n     *\n     * @this {MemoryPDP10}\n     * @param {number} off\n     * @param {number} addr\n     * @return {number}\n     */\n    readNone(off, addr)\n    {\n        if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP10.MEMORY) /* && !off */) {\n            this.dbg.printMessage(\"attempt to read invalid address \" + this.dbg.toStrBase(addr), true);\n        }\n        this.bus.fault(addr);\n        return PDP10.WORD_INVALID;\n    }\n\n    /**\n     * writeNone(v, off, addr)\n     *\n     * @this {MemoryPDP10}\n     * @param {number} v\n     * @param {number} off\n     * @param {number} addr\n     */\n    writeNone(v, off, addr)\n    {\n        if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP10.MEMORY) /* && !off */) {\n            this.dbg.printMessage(\"attempt to write \" + this.dbg.toStrBase(v) + \" to invalid addresses \" + this.dbg.toStrBase(addr), true);\n        }\n        this.bus.fault(addr);\n    }\n\n    /**\n     * readWordMemory(off, addr)\n     *\n     * @this {MemoryPDP10}\n     * @param {number} off\n     * @param {number} addr\n     * @return {number}\n     */\n    readWordMemory(off, addr)\n    {\n        var w = this.aw[off];\n\n        return w;\n    }\n\n    /**\n     * writeWordMemory(w, off, addr)\n     *\n     * @this {MemoryPDP10}\n     * @param {number} w\n     * @param {number} off\n     * @param {number} addr\n     */\n    writeWordMemory(w, off, addr)\n    {\n\n        if (this.aw[off] != w) {\n            this.aw[off] = w;\n            this.fDirty = true;\n        }\n    }\n\n    /**\n     * readWordChecked(off, addr)\n     *\n     * @this {MemoryPDP10}\n     * @param {number} off\n     * @param {number} addr\n     * @return {number}\n     */\n    readWordChecked(off, addr)\n    {\n        if (DEBUGGER && this.dbg && this.addr != null) {\n            this.dbg.checkMemoryRead(this.addr + off, 2);\n        }\n        return this.readWordDirect(off, addr);\n    }\n\n    /**\n     * writeWordChecked(w, off, addr)\n     *\n     * @this {MemoryPDP10}\n     * @param {number} w\n     * @param {number} off\n     * @param {number} addr\n     */\n    writeWordChecked(w, off, addr)\n    {\n        if (DEBUGGER && this.dbg && this.addr != null) {\n            this.dbg.checkMemoryWrite(this.addr + off, 2)\n        }\n        if (this.fReadOnly) this.writeNone(w, off, addr); else this.writeWordDirect(w, off, addr);\n    }\n}\n\n/*\n * Basic memory types\n *\n * RAM is the most conventional memory type, providing full read/write capability.  ROM is equally\n * conventional, except that the fReadOnly property is set.  ROM can be written using the Bus setWordDirect()\n * interface (which in turn uses the Memory writeWordDirect() interface), allowing the ROM component to\n * initialize its own memory.\n */\nMemoryPDP10.TYPE = {\n    NONE:       0,\n    RAM:        1,\n    ROM:        2\n};\nMemoryPDP10.TYPE_COLORS = [\"black\", \"blue\", \"green\"];\nMemoryPDP10.TYPE_NAMES  = [\"NONE\",  \"RAM\",  \"ROM\"];\n\n/*\n * Last used block ID (used for debugging only)\n */\nMemoryPDP10.idBlock = 0;\n\n/*\n * This is the effective definition of afnNone, but we need not fully define it, because setAccess()\n * uses these defaults when any of the handlers are undefined.\n *\nMemoryPDP10.afnNone = [\n    MemoryPDP10.prototype.readNone,\n    MemoryPDP10.prototype.writeNone\n];\n */\nMemoryPDP10.afnNone = [];\n\nMemoryPDP10.afnMemory = [\n    MemoryPDP10.prototype.readWordMemory,\n    MemoryPDP10.prototype.writeWordMemory\n];\n\nMemoryPDP10.afnChecked = [\n    MemoryPDP10.prototype.readWordChecked,\n    MemoryPDP10.prototype.writeWordChecked\n];\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp10/lib/cpu.js (C) Jeff Parsons 2012-2018\n */\n\n\n/**\n * @class CPUPDP10\n * @unrestricted\n */\nclass CPUPDP10 extends Component {\n    /**\n     * CPUPDP10(parmsCPU, nCyclesDefault)\n     *\n     * The CPUPDP10 class supports the following (parmsCPU) properties:\n     *\n     *      cycles: the machine's base cycles per second; the CPUStatePDP10 constructor\n     *      will provide us with a default (based on the CPU model) to use as a fallback.\n     *\n     *      multiplier: base cycle multiplier; default is 1.\n     *\n     *      autoStart: true to automatically start, false to not, or null if \"it depends\";\n     *      null is the default, which means do not autostart UNLESS there is no Debugger\n     *      and no \"Run\" button (ie, no way to manually start the machine).\n     *\n     *      csStart: the number of cycles that runCPU() must wait before generating\n     *      checksum records; -1 if disabled. checksum records are a diagnostic aid\n     *      used to help compare one CPU run to another.\n     *\n     *      csInterval: the number of cycles that runCPU() must execute before generating\n     *      a checksum record; -1 if disabled.\n     *\n     *      csStop: the number of cycles to stop generating checksum records.\n     *\n     * This component is primarily responsible for interfacing the CPU with the outside\n     * world (eg, Panel and Debugger components), and managing overall CPU operation.\n     *\n     * It is extended by the CPUStatePDP10 component, where the simulation control logic resides.\n     *\n     * @param {Object} parmsCPU\n     * @param {number} nCyclesDefault\n     */\n    constructor(parmsCPU, nCyclesDefault)\n    {\n        super(\"CPU\", parmsCPU, MessagesPDP10.CPU);\n\n        var nCycles = +parmsCPU['cycles'] || nCyclesDefault;\n\n        var nMultiplier = +parmsCPU['multiplier'] || 1;\n\n        this.nDisplayCount = 0;\n        this.nDisplayLimit = 30;\n        this.nCyclesPerSecond = nCycles;\n\n        /*\n         * nCyclesMultiplier replaces the old \"speed\" variable (0, 1, 2) and eliminates the need for\n         * the constants (SPEED_SLOW, SPEED_FAST and SPEED_MAX).  The UI simply doubles the multiplier\n         * until we've exceeded the host's speed limit and then starts the multiplier over at 1.\n         */\n        this.nCyclesMultiplier = nMultiplier;\n        this.mhzDefault = Math.round(this.nCyclesPerSecond / 10000) / 100;\n        this.mhzTarget = this.mhzDefault * this.nCyclesMultiplier;\n        this.msPerYield = this.nCyclesPerYield = this.nCyclesNextYield = this.nCyclesRecalc = 0;\n\n        /*\n         * We add a number of flags to the set initialized by Component\n         */\n        this.flags.running = this.flags.starting = false;\n        this.flags.autoStart = parmsCPU['autoStart'];\n        if (typeof this.flags.autoStart == \"string\") this.flags.autoStart = (this.flags.autoStart == \"true\");\n\n        /*\n         * Get checksum parameters, if any. runCPU() behavior is not affected until fChecksum\n         * is true, which won't happen until resetChecksum() is called with nCyclesChecksumInterval\n         * (\"csInterval\") set to a positive value.\n         *\n         * As above, any of these parameters can also be set with the Debugger's execution options\n         * command (\"x\"); for example, \"x cs int 5000\" will set nCyclesChecksumInterval to 5000\n         * and call resetChecksum().\n         */\n        this.flags.checksum = false;\n        this.nChecksum = this.nCyclesChecksumNext = 0;\n        this.nCyclesChecksumStart = +parmsCPU[\"csStart\"];\n        this.nCyclesChecksumInterval = +parmsCPU[\"csInterval\"];\n        this.nCyclesChecksumStop = +parmsCPU[\"csStop\"];\n\n        /*\n         * Array of countdown timers managed by addTimer() and setTimer().\n         */\n        this.aTimers = [];\n\n        this.onRunTimeout = this.runCPU.bind(this); // function onRunTimeout() { cpu.runCPU(); };\n\n        /*\n         * Define the rest of the properties used by the class\n         */\n        this.mhz = 0;\n        this.nYieldsSinceStatusUpdate = 0;\n        this.msStartRun = this.msStartThisRun = this.msEndThisRun = this.nCyclesThisRun = 0;\n        this.nTotalCycles = this.nRunCycles = this.nBurstCycles = this.nStepCycles = this.nSnapCycles = 0;\n        this.panel = null;\n\n        this.setReady();\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * @this {CPUPDP10}\n     * @param {ComputerPDP10} cmp\n     * @param {BusPDP10} bus\n     * @param {CPUPDP10} cpu\n     * @param {DebuggerPDP10} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.cmp = cmp;\n        this.bus = bus;\n        this.dbg = dbg;\n        this.panel = cmp.panel;\n        for (var i = 0; i < CPUPDP10.BUTTONS.length; i++) {\n            var control = this.bindings[CPUPDP10.BUTTONS[i]];\n            if (control) this.cmp.setBinding(null, CPUPDP10.BUTTONS[i], control);\n        }\n        this.setReady();\n    }\n\n    /**\n     * reset()\n     *\n     * Stub for reset notification (overridden by the CPUStatePDP10 component).\n     *\n     * @this {CPUPDP10}\n     */\n    reset()\n    {\n    }\n\n    /**\n     * save()\n     *\n     * Stub for save support (overridden by the CPUStatePDP10 component).\n     *\n     * @this {CPUPDP10}\n     * @return {Object|null}\n     */\n    save()\n    {\n        return null;\n    }\n\n    /**\n     * restore(data)\n     *\n     * Stub for restore support (overridden by the CPUStatePDP10 component).\n     *\n     * @this {CPUPDP10}\n     * @param {Object} data\n     * @return {boolean} true if restore successful, false if not\n     */\n    restore(data)\n    {\n        return false;\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {CPUPDP10}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        /*\n         * We've already saved the parmsCPU 'autoStart' setting, but there may be a machine (or URL) override.\n         */\n        var sAutoStart = this.cmp.getMachineParm('autoStart');\n        if (sAutoStart != null) {\n            this.flags.autoStart = (sAutoStart == \"true\"? true : (sAutoStart  == \"false\"? false : !!sAutoStart));\n        }\n        else if (this.flags.autoStart == null) {\n            /*\n             * If there's no explicit parmsCPU setting either, then we will autoStart if there's no Debugger and\n             * no \"Run\" button.\n             */\n            this.flags.autoStart = ((!DEBUGGER || !this.dbg) && this.bindings[\"run\"] === undefined);\n        }\n\n        if (!fRepower) {\n            if (!data) {\n                this.reset();\n            } else {\n                this.resetCycles();\n                if (!this.restore(data)) return false;\n                this.resetChecksum();\n            }\n            /*\n             * Give the Debugger a chance to do/print something once we've powered up.\n             */\n            if (DEBUGGER && this.dbg) {\n                this.dbg.init(this.flags.autoStart);\n            } else {\n                this.status(\"No debugger detected\");\n            }\n            if (!this.flags.autoStart) {\n                this.println(\"CPU will not be auto-started \" + (this.panel? \"(click Run to start)\" : \"(type 'go' to start)\"));\n            }\n        }\n        /*\n         * The Computer component (which is responsible for all powerDown and powerUp notifications)\n         * is now responsible for managing a component's fPowered flag, not us.\n         *\n         *      this.flags.powered = true;\n         */\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {CPUPDP10}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        return fSave? this.save() : true;\n    }\n\n    /**\n     * autoStart()\n     *\n     * @this {CPUPDP10}\n     * @return {boolean} true if started, false if not\n     */\n    autoStart()\n    {\n        if (this.flags.running) {\n            return true;\n        }\n        if (this.flags.autoStart) {\n            /*\n             * We used to also set fUpdateFocus when calling startCPU(), on the assumption that in the \"auto-starting\"\n             * context, a machine without focus is like a day without sunshine, but in reality, focus should only be\n             * forced when the user takes some other machine-related action.\n             */\n            this.startCPU();\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * isPowered()\n     *\n     * @this {CPUPDP10}\n     * @return {boolean}\n     */\n    isPowered()\n    {\n        if (!this.flags.powered) {\n            this.println(this.toString() + \" not powered\");\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * isRunning()\n     *\n     * @this {CPUPDP10}\n     * @return {boolean}\n     */\n    isRunning()\n    {\n        return this.flags.running;\n    }\n\n    /**\n     * getChecksum()\n     *\n     * This will be implemented by the CPUStatePDP10 component.\n     *\n     * @this {CPUPDP10}\n     * @return {number} a 32-bit summation of key elements of the current CPU state (used by the CPU checksum code)\n     */\n    getChecksum()\n    {\n        return 0;\n    }\n\n    /**\n     * resetChecksum()\n     *\n     * If checksum generation is enabled (fChecksum is true), this resets the running 32-bit checksum and the\n     * cycle counter that will trigger the next displayChecksum(); called by resetCycles(), which is called whenever\n     * the CPU is reset or restored.\n     *\n     * @this {CPUPDP10}\n     * @return {boolean} true if checksum generation enabled, false if not\n     */\n    resetChecksum()\n    {\n        if (this.nCyclesChecksumStart === undefined) this.nCyclesChecksumStart = 0;\n        if (this.nCyclesChecksumInterval === undefined) this.nCyclesChecksumInterval = -1;\n        if (this.nCyclesChecksumStop === undefined) this.nCyclesChecksumStop = -1;\n        this.flags.checksum = (this.nCyclesChecksumStart >= 0 && this.nCyclesChecksumInterval > 0);\n        if (this.flags.checksum) {\n            this.nChecksum = 0;\n            this.nCyclesChecksumNext = this.nCyclesChecksumStart - this.nTotalCycles;\n            /*\n             *  this.nCyclesChecksumNext = this.nCyclesChecksumStart + this.nCyclesChecksumInterval -\n             *      (this.nTotalCycles % this.nCyclesChecksumInterval);\n             */\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * updateChecksum(nCycles)\n     *\n     * When checksum generation is enabled (fChecksum is true), runCPU() asks stepCPU() to execute a minimum\n     * number of cycles (1), effectively limiting execution to a single instruction, and then we're called with\n     * the exact number cycles that were actually executed.  This should give us instruction-granular checksums\n     * at precise intervals that are 100% repeatable.\n     *\n     * @this {CPUPDP10}\n     * @param {number} nCycles\n     */\n    updateChecksum(nCycles)\n    {\n        if (this.flags.checksum) {\n            /*\n             * Get a 32-bit summation of the current CPU state and add it to our running 32-bit checksum\n             */\n            var fDisplay = false;\n            this.nChecksum = (this.nChecksum + this.getChecksum())|0;\n            this.nCyclesChecksumNext -= nCycles;\n            if (this.nCyclesChecksumNext <= 0) {\n                this.nCyclesChecksumNext += this.nCyclesChecksumInterval;\n                fDisplay = true;\n            }\n            if (this.nCyclesChecksumStop >= 0) {\n                if (this.nCyclesChecksumStop <= this.getCycles()) {\n                    this.nCyclesChecksumInterval = this.nCyclesChecksumStop = -1;\n                    this.resetChecksum();\n                    this.stopCPU();\n                    fDisplay = true;\n                }\n            }\n            if (fDisplay) this.displayChecksum();\n        }\n    }\n\n    /**\n     * displayChecksum()\n     *\n     * When checksum generation is enabled (fChecksum is true), this is called to provide a crude log of all\n     * checksums generated at the specified cycle intervals, as specified by the \"csStart\" and \"csInterval\" parmsCPU\n     * properties).\n     *\n     * @this {CPUPDP10}\n     */\n    displayChecksum()\n    {\n        this.println(this.getCycles() + \" cycles: \" + \"checksum=\" + Str.toHex(this.nChecksum));\n    }\n\n    /**\n     * setBinding(sType, sBinding, control, sValue)\n     *\n     * @this {CPUPDP10}\n     * @param {string|null} sType is the type of the HTML control (eg, \"button\", \"textarea\", \"register\", \"flag\", \"rled\", etc)\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"run\")\n     * @param {Object} control is the HTML control DOM object (eg, HTMLButtonElement)\n     * @param {string} [sValue] optional data value\n     * @return {boolean} true if binding was successful, false if unrecognized binding request\n     */\n    setBinding(sType, sBinding, control, sValue)\n    {\n        var cpu = this;\n\n        switch (sBinding) {\n        case \"power\":\n        case \"reset\":\n            /*\n             * The \"power\" and \"reset\" buttons are functions of the entire computer, not just the CPU,\n             * but it's not always convenient to stick a power button in the Computer component definition,\n             * so we record those bindings here and pass them on to the Computer component in initBus().\n             */\n            this.bindings[sBinding] = control;\n            return true;\n\n        case \"run\":\n            this.bindings[sBinding] = control;\n            control.onclick = function onClickRun() {\n                if (!cpu.cmp || !cpu.cmp.checkPower()) return;\n                /*\n                 * We no longer pass true to these startCPU()/stopCPU() calls, on the theory that if the \"run\"\n                 * control is visible, then the computer is probably sufficiently visible as well; the problem\n                 * with setting fUpdateFocus to true is that it can jerk the web page around in annoying ways.\n                 */\n                if (!cpu.flags.running)\n                    cpu.startCPU();\n                else\n                    cpu.stopCPU();\n            };\n            return true;\n\n        case \"speed\":\n            this.bindings[sBinding] = control;\n            return true;\n\n        case \"setSpeed\":\n            this.bindings[sBinding] = control;\n            control.onclick = function onClickSetSpeed() {\n                cpu.setSpeed(cpu.nCyclesMultiplier << 1, true);\n            };\n            control.textContent = this.getSpeedTarget();\n            return true;\n\n        default:\n            break;\n        }\n        return false;\n    }\n\n    /**\n     * updateDisplays(nUpdate)\n     *\n     * Simpler wrapper around the Computer's updateDisplays() method.\n     *\n     * @this {CPUPDP10}\n     * @param {number} [nUpdate] (1 for periodic, -1 for forced, 0 or undefined otherwise)\n     */\n    updateDisplays(nUpdate)\n    {\n        if (this.cmp) this.cmp.updateDisplays(nUpdate);\n    }\n\n    /**\n     * updateDisplay(nUpdate)\n     *\n     * Some of the CPU bindings provide feedback and therefore need to be updated periodically.\n     * However, this should be called via the Computer's updateDisplays() interface, not directly.\n     *\n     * @this {CPUPDP10}\n     * @param {number} [nUpdate] (1 for periodic, -1 for forced, 0 otherwise)\n     */\n    updateDisplay(nUpdate)\n    {\n        var controlSpeed = this.bindings[\"speed\"];\n        if (controlSpeed) {\n            if (nUpdate <= 0 || (this.nDisplayCount += nUpdate) >= this.nDisplayLimit) {\n                controlSpeed.textContent = this.getSpeedCurrent();\n                this.nDisplayCount = 0;\n            }\n        }\n    }\n\n    /**\n     * addCycles(nCycles, fEndStep)\n     *\n     * @this {CPUPDP10}\n     * @param {number} nCycles\n     * @param {boolean} [fEndStep]\n     */\n    addCycles(nCycles, fEndStep)\n    {\n        this.nTotalCycles += nCycles;\n        if (fEndStep) {\n            this.nBurstCycles = this.nStepCycles = this.nSnapCycles = 0;\n        }\n    }\n\n    /**\n     * calcCycles(fRecalc)\n     *\n     * Calculate the number of cycles to process for each \"burst\" of CPU activity.  The size of a burst\n     * is driven by YIELDS_PER_SECOND (eg, 30).\n     *\n     * At the end of each burst, we subtract burst cycles from the yield cycle \"threshold\" counter.\n     * Whenever the \"next yield\" cycle counter goes to (or below) zero, we compare elapsed time to the time\n     * we expected the virtual hardware to take (eg, 1000ms/50 or 20ms), and if we still have time remaining,\n     * we sleep the remaining time (or 0ms if there's no remaining time), and then restart runCPU().\n     *\n     * @this {CPUPDP10}\n     * @param {boolean} [fRecalc] is true if the caller wants to recalculate thresholds based on the most recent\n     * speed calculation (see calcSpeed).\n     */\n    calcCycles(fRecalc)\n    {\n        /*\n         * Calculate \"per\" yield values.\n         */\n        var vMultiplier = 1;\n        if (fRecalc) {\n            if (this.nCyclesMultiplier > 1 && this.mhz) {\n                vMultiplier = (this.mhz / this.mhzDefault);\n            }\n        }\n\n        this.msPerYield = Math.round(1000 / CPUPDP10.YIELDS_PER_SECOND);\n        this.nCyclesPerYield = Math.floor(this.nCyclesPerSecond / CPUPDP10.YIELDS_PER_SECOND * vMultiplier);\n\n        /*\n         * And initialize \"next\" yield values to the \"per\" values.\n         */\n        if (!fRecalc) this.nCyclesNextYield = this.nCyclesPerYield;\n        this.nCyclesRecalc = 0;\n    }\n\n    /**\n     * getCycles(fScaled)\n     *\n     * getCycles() returns the number of cycles executed so far.  Note that we can be called after\n     * runCPU() OR during runCPU(), perhaps from a handler triggered during the current run's stepCPU(),\n     * so nRunCycles must always be adjusted by number of cycles stepCPU() was asked to run (nBurstCycles),\n     * less the number of cycles it has yet to run (nStepCycles).\n     *\n     * nRunCycles is zeroed whenever the CPU is halted or the CPU speed is changed, which is why we also\n     * have nTotalCycles, which accumulates all nRunCycles before we zero it.  However, nRunCycles and\n     * nTotalCycles eventually get reset by calcSpeed(), to avoid overflow, so components that rely on\n     * getCycles() returning steadily increasing values should also be prepared for a reset at any time.\n     *\n     * @this {CPUPDP10}\n     * @param {boolean} [fScaled] is true if the caller wants a cycle count relative to a multiplier of 1\n     * @return {number}\n     */\n    getCycles(fScaled)\n    {\n        var nCycles = this.nTotalCycles + this.nRunCycles + this.nBurstCycles - this.nStepCycles;\n        if (fScaled && this.nCyclesMultiplier > 1 && this.mhz > this.mhzDefault) {\n            /*\n             * We could scale the current cycle count by the current effective speed (this.mhz); eg:\n             *\n             *      nCycles = Math.round(nCycles / (this.mhz / this.mhzDefault));\n             *\n             * but that speed will fluctuate somewhat: large fluctuations at first, but increasingly smaller\n             * fluctuations after each burst of instructions that runCPU() executes.\n             *\n             * Alternatively, we can scale the cycle count by the multiplier, which is good in that the\n             * multiplier doesn't vary once the user changes it, but a potential downside is that the\n             * multiplier might be set too high, resulting in a target speed that's higher than the effective\n             * speed is able to reach.\n             *\n             * Also, if multipliers were always limited to a power-of-two, then this could be calculated\n             * with a simple shift.  However, only the \"setSpeed\" UI binding limits it that way; the Debugger\n             * interface allows any value, as does the CPU \"multiplier\" parmsCPU property (from the machine's\n             * XML file).\n             */\n            nCycles = Math.round(nCycles / this.nCyclesMultiplier);\n        }\n        return nCycles;\n    }\n\n    /**\n     * getCyclesPerSecond()\n     *\n     * This returns the CPU's \"base\" speed (ie, the original cycles per second defined for the machine)\n     *\n     * @this {CPUPDP10}\n     * @return {number}\n     */\n    getCyclesPerSecond()\n    {\n        return this.nCyclesPerSecond;\n    }\n\n    /**\n     * resetCycles()\n     *\n     * Resets speed and cycle information as part of any reset() or restore(); this typically occurs during powerUp().\n     * It's important that this be called BEFORE the actual restore() call, because restore() may want to call setSpeed(),\n     * which in turn assumes that all the cycle counts have been initialized to sensible values.\n     *\n     * @this {CPUPDP10}\n     */\n    resetCycles()\n    {\n        this.mhz = 0;\n        this.nYieldsSinceStatusUpdate = 0;\n        this.nTotalCycles = this.nRunCycles = this.nBurstCycles = this.nStepCycles = this.nSnapCycles = 0;\n        this.resetChecksum();\n        this.setSpeed(1);\n    }\n\n    /**\n     * getSpeed()\n     *\n     * @this {CPUPDP10}\n     * @return {number} the current speed multiplier\n     */\n    getSpeed()\n    {\n        return this.nCyclesMultiplier;\n    }\n\n    /**\n     * getSpeedCurrent()\n     *\n     * @this {CPUPDP10}\n     * @return {string} the current speed, in mhz, as a string formatted to two decimal places\n     */\n    getSpeedCurrent()\n    {\n        /*\n         * TODO: Has toFixed() been \"fixed\" in all browsers (eg, IE) to return a rounded value now?\n         */\n        return ((this.flags.running)? (this.mhz.toFixed(2) + \"Mhz\") : \"Stopped\");\n    }\n\n    /**\n     * getSpeedTarget()\n     *\n     * @this {CPUPDP10}\n     * @return {string} the target speed, in mhz, as a string formatted to two decimal places\n     */\n    getSpeedTarget()\n    {\n        /*\n         * TODO: Has toFixed() been \"fixed\" in all browsers (eg, IE) to return a rounded value now?\n         */\n        return this.mhzTarget.toFixed(2) + \"Mhz\";\n    }\n\n    /**\n     * setSpeed(nMultiplier, fUpdateFocus)\n     *\n     * NOTE: This used to return the target speed, in mhz, but no callers appear to care at this point.\n     *\n     * @desc Whenever the speed is changed, the running cycle count and corresponding start time must be reset,\n     * so that the next effective speed calculation obtains sensible results.  In fact, when runCPU() initially calls\n     * setSpeed() with no parameters, that's all this function does (it doesn't change the current speed setting).\n     *\n     * @this {CPUPDP10}\n     * @param {number} [nMultiplier] is the new proposed multiplier (reverts to 1 if the target was too high)\n     * @param {boolean} [fUpdateFocus] is true to update Computer focus\n     * @return {boolean} true if successful, false if not\n     */\n    setSpeed(nMultiplier, fUpdateFocus)\n    {\n        var fSuccess = false;\n        if (nMultiplier !== undefined) {\n            /*\n             * If we haven't reached 80% (0.8) of the current target speed, revert to a multiplier of one (1).\n             */\n            if (this.mhz / this.mhzTarget < 0.8) {\n                nMultiplier = 1;\n            } else {\n                fSuccess = true;\n            }\n            this.nCyclesMultiplier = nMultiplier;\n            var mhz = this.mhzDefault * this.nCyclesMultiplier;\n            if (this.mhzTarget != mhz) {\n                this.mhzTarget = mhz;\n                var sSpeed = this.getSpeedTarget();\n                var controlSpeed = this.bindings[\"setSpeed\"];\n                if (controlSpeed) controlSpeed.textContent = sSpeed;\n                this.println(\"target speed: \" + sSpeed);\n            }\n            if (fUpdateFocus && this.cmp) this.cmp.setFocus();\n        }\n        this.addCycles(this.nRunCycles);\n        this.nRunCycles = 0;\n        this.msStartRun = Component.getTime();\n        this.msEndThisRun = 0;\n        this.calcCycles();\n        return fSuccess;\n    }\n\n    /**\n     * calcSpeed(nCycles, msElapsed)\n     *\n     * @this {CPUPDP10}\n     * @param {number} nCycles\n     * @param {number} msElapsed\n     */\n    calcSpeed(nCycles, msElapsed)\n    {\n        if (msElapsed) {\n            this.mhz = Math.round(nCycles / (msElapsed * 10)) / 100;\n            if (msElapsed >= 86400000) {\n                this.nTotalCycles = 0;\n                this.setSpeed();        // reset all counters once per day so that we never have to worry about overflow\n            }\n        }\n    }\n\n    /**\n     * calcStartTime()\n     *\n     * @this {CPUPDP10}\n     */\n    calcStartTime()\n    {\n        if (this.nCyclesRecalc >= this.nCyclesPerSecond) {\n            this.calcCycles(true);\n        }\n        this.nCyclesThisRun = 0;\n        this.msStartThisRun = Component.getTime();\n\n        /*\n         * Try to detect situations where the browser may have throttled us, such as when the user switches\n         * to a different tab; in those situations, Chrome and Safari may restrict setTimeout() callbacks\n         * to roughly one per second.\n         *\n         * Another scenario: the user resizes the browser window.  setTimeout() callbacks are not throttled,\n         * but there can still be enough of a lag between the callbacks that CPU speed will be noticeably\n         * erratic if we don't compensate for it here.\n         *\n         * We can detect throttling/lagging by verifying that msEndThisRun (which was set at the end of the\n         * previous run and includes any requested sleep time) is comparable to the current msStartThisRun;\n         * if the delta is significant, we compensate by bumping msStartRun forward by that delta.\n         *\n         * This shouldn't be triggered when the Debugger halts the CPU, because setSpeed() -- which is called\n         * whenever the CPU starts running again -- zeroes msEndThisRun.\n         *\n         * This also won't do anything about other internal delays; for example, Debugger message() calls.\n         * By the time the message() function has called yieldCPU(), the cost of the message has already been\n         * incurred, so it will be end up being charged against the instruction(s) that triggered it.\n         *\n         * TODO: Consider calling yieldCPU() sooner from message(), so that it can arrange for the msEndThisRun\n         * \"snapshot\" to occur sooner; it's unclear, however, whether that will really improve the CPU's ability\n         * to hit its target speed, since you would expect any instruction that displays a message to be an\n         * EXTREMELY slow instruction.\n         */\n        if (this.msEndThisRun) {\n            var msDelta = this.msStartThisRun - this.msEndThisRun;\n            if (msDelta > this.msPerYield) {\n                if (MAXDEBUG) this.println(\"large time delay: \" + msDelta + \"ms\");\n                this.msStartRun += msDelta;\n                /*\n                 * Bumping msStartRun forward should NEVER cause it to exceed msStartThisRun; however, just\n                 * in case, I make absolutely sure it cannot happen, since doing so could result in negative\n                 * speed calculations.\n                 */\n\n                if (this.msStartRun > this.msStartThisRun) {\n                    this.msStartRun = this.msStartThisRun;\n                }\n            }\n        }\n    }\n\n    /**\n     * calcRemainingTime()\n     *\n     * @this {CPUPDP10}\n     * @return {number}\n     */\n    calcRemainingTime()\n    {\n        this.msEndThisRun = Component.getTime();\n\n        var msYield = this.msPerYield;\n        if (this.nCyclesThisRun) {\n            /*\n             * Normally, we would assume we executed a full quota of work over msPerYield, but since the CPU\n             * now has the option of calling yieldCPU(), that might not be true.  If nCyclesThisRun is correct, then\n             * the ratio of nCyclesThisRun/nCyclesPerYield should represent the percentage of work we performed,\n             * and so applying that percentage to msPerYield should give us a better estimate of work vs. time.\n             */\n            msYield = Math.round(msYield * this.nCyclesThisRun / this.nCyclesPerYield);\n        }\n\n        var msElapsedThisRun = this.msEndThisRun - this.msStartThisRun;\n        var msRemainsThisRun = msYield - msElapsedThisRun;\n\n        /*\n         * We could pass only \"this run\" results to calcSpeed():\n         *\n         *      nCycles = this.nCyclesThisRun;\n         *      msElapsed = msElapsedThisRun;\n         *\n         * but it seems preferable to use longer time periods and hopefully get a more accurate speed.\n         *\n         * Also, if msRemainsThisRun >= 0 && this.nCyclesMultiplier == 1, we could pass these results instead:\n         *\n         *      nCycles = this.nCyclesThisRun;\n         *      msElapsed = this.msPerYield;\n         *\n         * to insure that we display a smooth, constant N Mhz.  But for now, I prefer seeing any fluctuations.\n         */\n        var nCycles = this.nRunCycles;\n        var msElapsed = this.msEndThisRun - this.msStartRun;\n\n        if (MAXDEBUG && msRemainsThisRun < 0 && this.nCyclesMultiplier > 1) {\n            this.println(\"warning: updates @\" + msElapsedThisRun + \"ms (prefer \" + Math.round(msYield) + \"ms)\");\n        }\n\n        this.calcSpeed(nCycles, msElapsed);\n\n        if (msRemainsThisRun < 0 || this.mhz < this.mhzTarget) {\n            /*\n             * Try \"throwing out\" the effects of large anomalies, by moving the overall run start time up;\n             * ordinarily, this should only happen when the someone is using an external Debugger or some other\n             * tool or feature that is interfering with our overall execution.\n             */\n            if (msRemainsThisRun < -1000) {\n                this.msStartRun -= msRemainsThisRun;\n            }\n            /*\n             * If the last burst took MORE time than we allotted (ie, it's taking more than 1 second to simulate\n             * nCyclesPerSecond), all we can do is yield for as little time as possible (ie, 0ms) and hope that the\n             * simulation is at least usable.\n             */\n            msRemainsThisRun = 0;\n        }\n\n        /*\n         * Last but not least, update nCyclesRecalc, so that when runCPU() starts up again and calls calcStartTime(),\n         * it'll be ready to decide if calcCycles() should be called again.\n         */\n        this.nCyclesRecalc += this.nCyclesThisRun;\n\n        if (DEBUG && this.messageEnabled(MessagesPDP10.LOG) && msRemainsThisRun) {\n            this.log(\"calcRemainingTime: \" + msRemainsThisRun + \"ms to sleep after \" + this.msEndThisRun + \"ms\");\n        }\n\n        this.msEndThisRun += msRemainsThisRun;\n        return msRemainsThisRun;\n    }\n\n    /**\n     * addTimer(callBack)\n     *\n     * Components that want to have timers that periodically fire after some number of milliseconds call\n     * addTimer() to create the timer, and then setTimer() every time they want to arm it.  There is currently\n     * no removeTimer() because these are generally used for the entire lifetime of a component.\n     *\n     * Internally, each timer entry is a preallocated Array with two entries: a cycle countdown in element [0]\n     * and a callback function in element [1].  A timer is initially dormant; dormant timers have a countdown\n     * value of -1 (although any negative number will suffice) and active timers have a non-negative value.\n     *\n     * Why not use JavaScript's setTimeout() instead?  Good question.  For a good answer, see setTimer() below.\n     *\n     * TODO: Consider making the addTimer() and setTimer() interfaces more like the addIRQ() and setIRQ()\n     * interfaces (which return the underlying object instead of an array index) and maintaining a separate list\n     * of active timers, in order of highest to lowest cycle countdown values, as this could speed up\n     * getBurstCycles() and updateTimers() functions ever so slightly.\n     *\n     * @this {CPUPDP10}\n     * @param {function()} callBack\n     * @return {number} timer index\n     */\n    addTimer(callBack)\n    {\n        var iTimer = this.aTimers.length;\n        this.aTimers.push([-1, callBack]);\n        return iTimer;\n    }\n\n    /**\n     * setTimer(iTimer, ms, fReset)\n     *\n     * Using the timer index from a previous addTimer() call, this sets that timer to fire after the\n     * specified number of milliseconds.\n     *\n     * This is preferred over JavaScript's setTimeout(), because all our timers are effectively paused when\n     * the CPU is paused (eg, when the Debugger halts execution).  Moreover, setTimeout() handlers only run after\n     * runCPU() yields, which is far too granular for some components (eg, when the SerialPort tries to simulate\n     * interrupts at 9600 baud).\n     *\n     * Ideally, the only function that would use setTimeout() is runCPU(), while the rest of the components\n     * use setTimer(); however, due to legacy code (ie, code that predates these functions) and/or laziness,\n     * that may not be the case.\n     *\n     * @this {CPUPDP10}\n     * @param {number} iTimer\n     * @param {number} ms (converted into a cycle countdown internally)\n     * @param {boolean} [fReset] (true if the timer should be reset even if already armed)\n     * @return {number} (number of cycles used to arm timer, or -1 if error)\n     */\n    setTimer(iTimer, ms, fReset)\n    {\n        var nCycles = -1;\n        if (iTimer >= 0 && iTimer < this.aTimers.length) {\n            if (fReset || this.aTimers[iTimer][0] < 0) {\n                nCycles = this.getMSCycles(ms);\n                /*\n                 * We must now confront the following problem: if the CPU is currently executing a burst of cycles,\n                 * the number of cycles it has executed in that burst so far must NOT be charged against the cycle\n                 * timeout we're about to set.  The simplest way to resolve that is to immediately call endBurst()\n                 * and bias the cycle timeout by the number of cycles that the burst executed.\n                 */\n                if (this.flags.running) {\n                    nCycles += this.endBurst();\n                }\n                this.aTimers[iTimer][0] = nCycles;\n            }\n        }\n        return nCycles;\n    }\n\n    /**\n     * getMSCycles(ms)\n     *\n     * @this {CPUPDP10}\n     * @param {number} ms\n     * @return {number} number of corresponding cycles\n     */\n    getMSCycles(ms)\n    {\n        return ((this.nCyclesPerSecond * this.nCyclesMultiplier) / 1000 * ms)|0;\n    }\n\n    /**\n     * getBurstCycles(nCycles)\n     *\n     * Used by runCPU() to get min(nCycles,[timer cycle counts])\n     *\n     * @this {CPUPDP10}\n     * @param {number} nCycles (number of cycles about to execute)\n     * @return {number} (either nCycles or less if a timer needs to fire)\n     */\n    getBurstCycles(nCycles)\n    {\n        for (var i = this.aTimers.length - 1; i >= 0; i--) {\n            var timer = this.aTimers[i];\n\n            if (timer[0] < 0) continue;\n            if (nCycles > timer[0]) {\n                nCycles = timer[0];\n            }\n        }\n        return nCycles;\n    }\n\n    /**\n     * saveTimers()\n     *\n     * @this {CPUPDP10}\n     * @return {Array.<number>}\n     */\n    saveTimers()\n    {\n        var aTimerCycles = [];\n        for (var i = 0; i < this.aTimers.length; i++) {\n            var timer = this.aTimers[i];\n            aTimerCycles.push(timer[0]);\n        }\n        return aTimerCycles;\n    }\n\n    /**\n     * restoreTimers(aTimerCycles)\n     *\n     * @this {CPUPDP10}\n     * @param {Array.<number>} aTimerCycles\n     */\n    restoreTimers(aTimerCycles)\n    {\n\n        for (var i = 0; i < this.aTimers.length && i < aTimerCycles.length; i++) {\n            var timer = this.aTimers[i];\n            timer[0] = aTimerCycles[i];\n        }\n    }\n\n    /**\n     * updateTimers(nCycles)\n     *\n     * Used by runCPU() to reduce all active timer countdown values by the number of cycles just executed;\n     * this is the function that actually \"fires\" any timer(s) whose countdown has reached (or dropped below)\n     * zero, invoking their callback function.\n     *\n     * @this {CPUPDP10}\n     * @param {number} nCycles (number of cycles actually executed)\n     */\n    updateTimers(nCycles)\n    {\n        for (var i = this.aTimers.length - 1; i >= 0; i--) {\n            var timer = this.aTimers[i];\n\n            if (timer[0] < 0) continue;\n            timer[0] -= nCycles;\n            if (timer[0] <= 0) {\n                timer[0] = -1;      // zero is technically an \"active\" value, so ensure the timer is dormant now\n                timer[1]();         // safe to invoke the callback function now\n            }\n        }\n    }\n\n    /**\n     * endBurst(fReset)\n     *\n     * @this {CPUPDP10}\n     * @param {boolean} [fReset]\n     * @return {number} (number of cycles executed in the most recent burst)\n     */\n    endBurst(fReset)\n    {\n        var nCycles = this.nBurstCycles -= this.nStepCycles;\n        /*\n         * In addition to zeroing nStepCycles, it's important that we also zero nSnapCycles, because if a CPU\n         * burst is being ended after nStepCycles has been \"snapped\" (because a certain opcode has an unusual timing\n         * calculation that must be based on a \"snapped\" cycle count rather the opcode's starting cycle count), we\n         * could inadvertently undo the endBurst() if the original \"snapped\" value was used to update nStepCycles.\n         */\n        this.nStepCycles = this.nSnapCycles = 0;\n        if (fReset) this.nBurstCycles = 0;\n        return nCycles;\n    }\n\n    /**\n     * runCPU()\n     *\n     * @this {CPUPDP10}\n     */\n    runCPU()\n    {\n        if (!this.flags.running) return;\n\n        /*\n         *  calcStartTime() initializes the cycle counter and timestamp for this runCPU() invocation, and optionally\n         *  recalculates the the maximum number of cycles for each burst if the nCyclesRecalc threshold has been reached.\n         */\n        this.calcStartTime();\n\n        try {\n            do {\n                /*\n                 * nCycles is how many cycles we WANT to run on each iteration of stepCPU(), and may be as\n                 * HIGH as nCyclesPerYield, but it may be significantly less.  getBurstCycles() will adjust\n                 * nCycles downward if any CPU timers need to fire during the next burst.\n                 */\n                var nCycles = this.getBurstCycles(this.flags.checksum? 1 : this.nCyclesPerYield);\n\n                /*\n                 * Execute the burst.\n                 */\n                try {\n                    this.stepCPU(nCycles);\n                }\n                catch(exception) {\n                    /*\n                     * We assume that any numeric exception was explicitly thrown by the CPU to interrupt the\n                     * current instruction (and by extension, the current burst, but not the current run).  All\n                     * other exceptions are re-thrown to the catch below, which will attempt a stack dump.\n                     */\n                    if (typeof exception != \"number\") throw exception;\n                }\n\n                /*\n                 * Terminate the burst, returning the number of cycles that stepCPU() actually ran.\n                 */\n                nCycles = this.endBurst(true);\n\n                /*\n                 * Add nCycles to nCyclesThisRun, as well as nRunCycles (the cycle count since the CPU started).\n                 */\n                this.nCyclesThisRun += nCycles;\n                this.nRunCycles += nCycles;\n                this.updateChecksum(nCycles);\n\n                /*\n                 * Update any/all timers, firing those whose cycle countdowns have reached (or dropped below) zero.\n                 */\n                this.updateTimers(nCycles);\n\n                this.nCyclesNextYield -= nCycles;\n                if (this.nCyclesNextYield <= 0) {\n                    this.nCyclesNextYield += this.nCyclesPerYield;\n                    if (++this.nYieldsSinceStatusUpdate >= CPUPDP10.YIELDS_PER_STATUS) {\n                        this.updateDisplays();\n                        this.nYieldsSinceStatusUpdate = 0;\n                    }\n                    break;\n                }\n            } while (this.flags.running);\n        }\n        catch (e) {\n            this.stopCPU();\n            if (this.cmp) this.cmp.stop(Component.getTime(), this.getCycles());\n            this.setError(e.stack || e.message);\n            return;\n        }\n\n        if (this.flags.running) setTimeout(this.onRunTimeout, this.calcRemainingTime());\n    }\n\n    /**\n     * startCPU(fUpdateFocus)\n     *\n     * For use by any component that wants to start the CPU.\n     *\n     * @param {boolean} [fUpdateFocus]\n     * @return {boolean}\n     */\n    startCPU(fUpdateFocus)\n    {\n        if (this.isError()) {\n            return false;\n        }\n        if (this.flags.running) {\n            this.println(this.toString() + \" busy\");\n            return false;\n        }\n        /*\n         * setSpeed() without a speed parameter leaves the selected speed in place, but also resets the\n         * cycle counter and timestamp for the current series of runCPU() calls, calculates the maximum number\n         * of cycles for each burst based on the last known effective CPU speed, and resets the nCyclesRecalc\n         * threshold counter.\n         */\n        this.setSpeed();\n        this.flags.running = true;\n        this.flags.starting = true;\n        var controlRun = this.bindings[\"run\"];\n        if (controlRun) controlRun.textContent = \"Halt\";\n        if (this.cmp) {\n            if (fUpdateFocus) this.cmp.setFocus(true);\n            this.cmp.start(this.msStartRun, this.getCycles());\n        }\n        if (!this.dbg) this.status(\"Started\");\n        setTimeout(this.onRunTimeout, 0);\n        return true;\n    }\n\n    /**\n     * stepCPU(nMinCycles)\n     *\n     * This will be implemented by the CPUStatePDP10 component.\n     *\n     * @this {CPUPDP10}\n     * @param {number} nMinCycles (0 implies a single-step, and therefore breakpoints should be ignored)\n     * @return {number} of cycles executed; 0 indicates that the last instruction was not executed\n     */\n    stepCPU(nMinCycles)\n    {\n        return 0;\n    }\n\n    /**\n     * stopCPU(fComplete)\n     *\n     * For use by any component that wants to stop the CPU.\n     *\n     * This similar to yieldCPU(), but it doesn't need to zero nCyclesNextYield to break out of runCPU();\n     * it simply needs to clear fRunning (well, \"simply\" may be oversimplifying a bit....)\n     *\n     * @this {CPUPDP10}\n     * @param {boolean} [fComplete]\n     * @return {boolean} true if the CPU was stopped, false if it was already stopped\n     */\n    stopCPU(fComplete)\n    {\n        var fStopped = false;\n        if (this.flags.running) {\n            this.endBurst();\n            this.addCycles(this.nRunCycles);\n            this.nRunCycles = 0;\n            this.flags.running = false;\n            var controlRun = this.bindings[\"run\"];\n            if (controlRun) controlRun.textContent = \"Run\";\n            if (this.cmp) {\n                this.cmp.stop(Component.getTime(), this.getCycles());\n            }\n            fStopped = true;\n            if (!this.dbg) this.status(\"Stopped\");\n        }\n        this.flags.complete = fComplete;\n        return fStopped;\n    }\n\n    /**\n     * yieldCPU()\n     *\n     * Similar to stopCPU() with regard to how it resets various cycle countdown values, but the CPU\n     * remains in a \"running\" state.\n     *\n     * @this {CPUPDP10}\n     */\n    yieldCPU()\n    {\n        this.endBurst();                    // this will break us out of stepCPU()\n        this.nCyclesNextYield = 0;          // this will break us out of runCPU(), once we break out of stepCPU()\n        /*\n         * The Debugger calls yieldCPU() after every message() to ensure browser responsiveness, but it looks\n         * odd for those messages to show CPU state changes if the Control Panel, Video display, etc, does not,\n         * so I've added this call to try to keep things looking synchronized.\n         */\n        this.updateDisplays();\n    }\n}\n\n/*\n * Constants that control the frequency at which various updates should occur.\n *\n * These values do NOT control the simulation directly.  Instead, they are used by\n * calcCycles(), which uses the nCyclesPerSecond passed to the constructor as a starting\n * point and computes the following variables:\n *\n *      this.nCyclesPerYield:    (this.nCyclesPerSecond / CPUPDP10.YIELDS_PER_SECOND)\n *\n * The above variables are also multiplied by any cycle multiplier in effect, via setSpeed(),\n * and then they're used to initialize another set of variables for each runCPU() iteration:\n *\n *      this.nCyclesNextYield:   this.nCyclesPerYield\n */\nCPUPDP10.YIELDS_PER_SECOND      = 30;           // just a gut feeling for the MINIMUM number of yields per second\nCPUPDP10.YIELDS_PER_STATUS      = 15;           // every 15 yields (ie, twice per second), perform CPU status updates\n\nCPUPDP10.BUTTONS = [\"power\", \"reset\"];\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp10/lib/cpustate.js (C) Jeff Parsons 2012-2018\n */\n\n\n/*\n * Overview of Device Interrupt Support\n *\n * Originally, the CPU maintained a queue of requested interrupts.  Entries in this queue recorded a device's\n * priority, vector, and delay (ie, a number of instructions to execute before dispatching the interrupt).  This\n * queue would constantly grow and shrink as requests were issued and dispatched, and as long as there was something\n * in the queue, the CPU was constantly examining it.\n *\n * Now we are trying something more efficient.  First, for devices that require delays (like the SerialPort's receiver\n * and transmitter buffer registers, which are supposed to \"clock\" the data in and out at a specific baud rate), the\n * CPU offers timer services that will \"fire\" a callback after a specified delay, which are much more efficient than\n * requiring the CPU to dive into an interrupt queue and decrement delay counts on every instruction.\n *\n * Second, devices that generate interrupts will allocate an IRQ object during initialization; we will no longer\n * be creating and destroying interrupt event objects and inserting/deleting them in a constantly changing queue.\n * Each IRQ contains properties that never change (eg, the vector and priority), along with a \"next\" pointer that's\n * only used when the IRQ is active.\n *\n * When a device decides it's time to interrupt (either at the end of some I/O operation or when a timer has fired),\n * it will simply set the IRQ, which basically means that the IRQ will be linked onto a list of active IRQs, in\n * priority order, so that when the CPU is ready to acknowledge interrupts, it need only check the top of the active\n * IRQ list.\n */\n\n/**\n * @typedef {{\n *  vector: number,\n *  priority: number,\n *  message: number,\n *  name: (string|null),\n *  next: (IRQ|null)\n * }}\n */\nvar IRQ;\n\n/**\n * @class CPUStatePDP10\n * @unrestricted\n */\nclass CPUStatePDP10 extends CPUPDP10 {\n    /**\n     * CPUStatePDP10(parmsCPU)\n     *\n     * The CPUStatePDP10 class uses the following (parmsCPU) properties:\n     *\n     *      model: a number (eg, 1001) that should match one of the PDP10.MODEL_* values\n     *      addrReset: reset address (default is 0)\n     *\n     * This extends the CPU class and passes any remaining parmsCPU properties to the CPU class\n     * constructor, along with a default speed (cycles per second) based on the specified (or default)\n     * CPU model number.\n     *\n     * Speeds are highly instruction-specific and are not broken down into cycles; DEC documents them\n     * as a number of microseconds, with two decimal places of accuracy.  The simplest instructions\n     * execute in 1-3us, a number of others require 5-6us, and the most time-consuming take anywhere\n     * from 10us (MUL) to 17us (DIV).  Of course, instructions that perform multiple indirect memory\n     * accesses take even longer.\n     *\n     * I think we'll just say that the original PDP-10 was roughly a 1Mhz machine, and pretend that all\n     * instructions completed in 1 or more multiples of a microsecond.  I'm not sure that trying to be\n     * accurate to the nearest 1/100 of a microsecond would have much observable benefit.\n     *\n     * @param {Object} parmsCPU\n     */\n    constructor(parmsCPU)\n    {\n        var nCyclesDefault = 0;\n        var model = +parmsCPU['model'] || PDP10.MODEL_KA10;\n\n        switch(model) {\n        case PDP10.MODEL_KA10:\n        default:\n            nCyclesDefault = 1000000;\n            break;\n        }\n\n        /*\n         * ES6 ALERT: Classes cannot access \"this\" until all superclasses have been initialized as well.\n         */\n        super(parmsCPU, nCyclesDefault);\n\n        this.model = model;\n        this.addrReset = +parmsCPU['addrReset'] || 0;\n\n        this.opDecode = PDP10.opKA10.bind(this);\n        this.opUndefined = PDP10.opUndefined.bind(this);\n\n        /** @type {IRQ|null} */\n        this.irqNext = null;        // the head of the active IRQ list, in priority order\n\n        /** @type {Array.<IRQ>} */\n        this.aIRQs = [];            // list of all IRQs, active or not (to be used for auto-configuration)\n\n        this.flags.complete = false;\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * Called once the Bus has been initialized.\n     *\n     * @this {CPUStatePDP10}\n     * @param {ComputerPDP10} cmp\n     * @param {BusPDP10} bus\n     * @param {CPUPDP10} cpu\n     * @param {DebuggerPDP10} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        super.initBus(cmp, bus, cpu, dbg);\n    }\n\n    /**\n     * reset()\n     *\n     * @this {CPUStatePDP10}\n     */\n    reset()\n    {\n        this.status(\"Model \" + this.model);\n        if (this.flags.running) this.stopCPU();\n        this.initCPU();\n        this.resetCycles();\n        this.clearError();      // clear any fatal error/exception that setError() may have flagged\n        super.reset();\n    }\n\n    /**\n     * initCPU()\n     *\n     * @this {CPUStatePDP10}\n     */\n    initCPU()\n    {\n        /*\n         * regEA is the last effective address, while regLA is the last fetch from an effective address\n         * calculation.  regRA is the last reference address used to calculate the last effective address.\n         */\n        this.regEA  = this.regRA = 0;\n        this.regLA  = this.regOP = 0;\n        this.regPC  = this.lastPC = this.addrReset;\n        this.regXC  = -1;       // if >= 0 this supersedes regPC (refers to an opcode from XCT)\n        this.regBP  = -1;       // active byte pointer (-1 if none)\n        this.regPS  =  0;       // assorted processor flags (see PSFLAG bit definitions)\n        this.regEX  =  0;       // internal \"extension\" register used for 72-bit MUL and DIV calculations\n\n        this.regRes = [0, 0];   // four internal \"double-length\" registers used for 72-bit DIV calculations\n        this.regPow = [0, 0];\n        this.regDiv = [0, 0];\n        this.regRem = [0, 0];\n\n        /*\n         * This is queried and displayed by the Panel when it's not displaying its own ADDRESS register\n         * (which takes precedence when, for example, you've manually halted the CPU and are independently\n         * examining the contents of other addresses).\n         *\n         * We initialize it to the current PC.\n         */\n        this.addrLast = this.regPC;\n\n        /*\n         * opFlags contains various conditions that stepCPU() needs to be aware of.\n         */\n        this.opFlags = 0;\n\n        this.setMemoryAccess();\n\n        this.resetIRQs();\n    }\n\n    /**\n     * setMemoryAccess()\n     *\n     * @this {CPUStatePDP10}\n     */\n    setMemoryAccess()\n    {\n        this.readWord = this.readWordFromPhysical;\n        this.writeWord = this.writeWordToPhysical;\n    }\n\n    /**\n     * setReset(addr, fStart, bUnit, addrStack)\n     *\n     * @this {CPUStatePDP10}\n     * @param {number} addr\n     * @param {boolean} [fStart] (true if a \"startable\" image was just loaded, false if not)\n     * @param {number} [bUnit] (boot unit #)\n     * @param {number} [addrStack]\n     */\n    setReset(addr, fStart, bUnit, addrStack)\n    {\n        this.addrReset = addr;\n\n        this.setPC(addr);\n\n        if (fStart) {\n            if (!this.flags.powered) {\n                this.flags.autoStart = true;\n            }\n            else if (!this.flags.running) {\n                this.startCPU();\n            }\n        }\n        else {\n            if (this.dbg && this.flags.powered) {\n                /*\n                 * TODO: Review the decision to always stop the CPU if the Debugger is loaded.  Note that\n                 * when stopCPU() stops a running CPU, the Debugger gets notified, so no need to notify it again.\n                 *\n                 * TODO: There are more serious problems to deal with if another component is slamming a new PC down\n                 * the CPU's throat (presumably while also dropping some new code into RAM) while the CPU is running;\n                 * we should probably force a complete reset, but for now, it's up to the user to hit the reset button\n                 * themselves.\n                 */\n                if (!this.stopCPU() && !this.cmp.flags.reset) {\n                    this.dbg.updateStatus();\n                    this.cmp.updateDisplays(-1);\n                }\n            }\n            else if (fStart === false) {\n                this.stopCPU();\n            }\n        }\n        if (!this.isRunning() && this.panel) this.panel.stop();\n    }\n\n    /**\n     * getChecksum()\n     *\n     * TODO: Implement\n     *\n     * @this {CPUStatePDP10}\n     * @return {number} a 32-bit summation of key elements of the current CPU state (used by the CPU checksum code)\n     */\n    getChecksum()\n    {\n        return 0;\n    }\n\n    /**\n     * save()\n     *\n     * @this {CPUStatePDP10}\n     * @return {Object|null}\n     */\n    save()\n    {\n        var state = new State(this);\n        state.set(0, [\n            this.regEA,\n            this.regRA,\n            this.regLA,\n            this.regOP,\n            this.regPC,\n            this.regXC,\n            this.regBP,\n            this.regPS,\n            this.opFlags,\n            this.lastPC,\n            this.addrLast,\n            this.addrReset\n        ]);\n        state.set(1, []);\n        state.set(2, [this.nTotalCycles, this.getSpeed(), this.flags.autoStart]);\n        state.set(3, this.saveIRQs());\n        state.set(4, this.saveTimers());\n        return state.data();\n    }\n\n    /**\n     * restore(data)\n     *\n     * @this {CPUStatePDP10}\n     * @param {Object} data\n     * @return {boolean} true if restore successful, false if not\n     */\n    restore(data)\n    {\n        /*\n         * ES6 ALERT: A handy destructuring assignment, which makes it easy to perform the inverse\n         * of what save() does when it collects a bunch of object properties into an array.\n         */\n        [\n            this.regEA,\n            this.regRA,\n            this.regLA,\n            this.regOP,\n            this.regPC,\n            this.regXC,\n            this.regBP,\n            this.regPS,\n            this.opFlags,\n            this.lastPC,\n            this.addrLast,\n            this.addrReset\n        ] = data[0];\n\n        var a = data[2];\n        this.nTotalCycles = a[0];\n        this.setSpeed(a[1]);\n        this.flags.autoStart = a[2];\n\n        this.restoreIRQs(data[3]);\n        this.restoreTimers(data[4]);\n        return true;\n    }\n\n    /**\n     * getPS()\n     *\n     * Gets the processor state flags in the format required by various program control operations (eg, JSP).\n     *\n     * @this {CPUStatePDP10}\n     * @return {number}\n     */\n    getPS()\n    {\n        return (this.regPS & PDP10.HALF_MASK);\n    }\n\n    /**\n     * setPS(w)\n     *\n     * Sets the processor state flags in the format required by various program control operations (eg, JRST).\n     *\n     * @this {CPUStatePDP10}\n     * @param {number} w\n     */\n    setPS(w)\n    {\n        this.regPS = (this.regPS & ~PDP10.PSFLAG.SET_MASK) | (w & PDP10.PSFLAG.SET_MASK);\n        this.regPS |= (w & PDP10.PSFLAG.USERF);\n        if (!(w & PDP10.PSFLAG.EXIOT)) {\n            this.regPS &= ~PDP10.PSFLAG.EXIOT;\n        } else {\n            if (!(this.regPS & PDP10.PSFLAG.USERF)) this.regPS |= PDP10.PSFLAG.EXIOT;\n        }\n    }\n\n    /**\n     * setUserMode()\n     *\n     * Sets the processor's USER_MODE flag.\n     *\n     * @this {CPUStatePDP10}\n     */\n    setUserMode()\n    {\n        this.regPS |= PDP10.PSFLAG.USERF;\n    }\n\n    /**\n     * readFlags()\n     *\n     * Used to implement the \"\"CONI APR,\" instruction; see opCONI().\n     *\n     * @this {CPUStatePDP10}\n     * @return {number}\n     */\n    readFlags()\n    {\n        var flags = 0;\n        if (this.regPS & PDP10.PSFLAG.AROV) flags |= PDP10.RFLAG.AROV;\n        if (this.regPS & PDP10.PSFLAG.PDOV) flags |= PDP10.RFLAG.PDOV;\n        return flags;\n    }\n\n    /**\n     * writeFlags(w)\n     *\n     * Used to implement the \"\"CONO APR,\" instruction; see opCONO().\n     *\n     * @this {CPUStatePDP10}\n     * @param {number} w\n     */\n    writeFlags(w)\n    {\n        if (w & PDP10.WFLAG.AROV_CL) this.regPS &= ~PDP10.PSFLAG.AROV;\n        if (w & PDP10.WFLAG.PDOV_CL) this.regPS &= ~PDP10.PSFLAG.PDOV;\n    }\n\n    /**\n     * getOpcode()\n     *\n     * Normally, this fetches the next opcode in regOP, decodes the low 23 bits (I,X,Y), records\n     * the effective address (E) in regEA, updates regPC, and returns the high 13 bits of the opcode\n     * for further decoding.\n     *\n     * However, if a reference address (R) in regRA still needs to be decoded (due to indirection),\n     * we take care of that first.\n     *\n     * @this {CPUStatePDP10}\n     * @return {number} (-1 if the reference address in regRA has not yet been fully decoded)\n     */\n    getOpcode()\n    {\n        if ((this.regRA & PDP10.OPCODE.I_FIELD)) {\n            this.regRA = this.regLA = this.readWord(this.regEA);\n        } else if (this.regXC >= 0) {\n            this.regRA = this.regOP = this.readWord(this.regXC);\n            this.regXC = -1;\n        } else {\n            this.regRA = this.regOP = this.readWord(this.lastPC = this.regPC);\n            this.regPC = (this.regPC + 1) % PDP10.ADDR_LIMIT;\n        }\n\n        /*\n         * Technically, we don't REALLY need to mask regRA with R_MASK, because all regRA accesses\n         * ignore any higher bits, but let's keep things tidy.\n         */\n        this.regRA &= PDP10.OPCODE.R_MASK;\n\n        /*\n         * Bits 0-22 (I,X,Y) contain what we call a \"reference address\" (R), which is used to calculate an\n         * 18-bit \"effective address\" (E).  To determine E from R, we must extract I, X, and Y from R, set E\n         * to Y, then add [X] to E if X is non-zero.  If I is zero, then we're done; otherwise, we must set R\n         * to [E] and repeat the process.\n         *\n         * However, we don't actually repeat the process immediately; we need to treat each indirection as a\n         * separate decoding step, to ensure that the emulator can \"breathe\" periodically.  So instead, we\n         * return -1, indicating that the opcode is not fully decoded, and then on the next call, instead of\n         * fetching another opcode, we fetch [E], update R, and decode R again.\n         */\n        this.regEA = this.regRA & PDP10.OPCODE.Y_MASK;\n        var x = (this.regRA >> PDP10.OPCODE.X_SHIFT) & PDP10.OPCODE.X_MASK;\n        if (x) this.regEA = (this.regEA + (this.regLA = this.readWord(x))) & PDP10.ADDR_MASK;\n\n        return (this.regRA & PDP10.OPCODE.I_FIELD)? -1 : ((this.regOP / PDP10.OPCODE.A_SCALE)|0);\n    }\n\n    /**\n     * advancePC(off)\n     *\n     * NOTE: This function is nothing more than a convenience, and we fully expect it to be inlined at runtime.\n     *\n     * @this {CPUStatePDP10}\n     * @param {number} off\n     * @return {number} (original PC)\n     */\n    advancePC(off)\n    {\n        var pc = this.regPC;\n        this.regPC = (pc + off) % PDP10.ADDR_LIMIT;\n        return pc;\n    }\n\n    /**\n     * getPC()\n     *\n     * NOTE: This function is nothing more than a convenience, and we fully expect it to be inlined at runtime.\n     *\n     * @this {CPUStatePDP10}\n     * @return {number}\n     */\n    getPC()\n    {\n        return this.regPC;\n    }\n\n    /**\n     * getXC()\n     *\n     * NOTE: This function is nothing more than a convenience, and we fully expect it to be inlined at runtime.\n     *\n     * @this {CPUStatePDP10}\n     * @return {number}\n     */\n    getXC()\n    {\n        return this.regXC >= 0? this.regXC : ((this.regRA & PDP10.OPCODE.I_FIELD)? this.lastPC : this.regPC);\n    }\n\n    /**\n     * getLastAddr()\n     *\n     * @this {CPUStatePDP10}\n     * @return {number}\n     */\n    getLastAddr()\n    {\n        return this.addrLast;\n    }\n\n    /**\n     * getLastPC()\n     *\n     * @this {CPUStatePDP10}\n     * @return {number}\n     */\n    getLastPC()\n    {\n        return this.lastPC;\n    }\n\n    /**\n     * setPC(addr)\n     *\n     * Updates the PC register with the new address after masking it with ADDR_LIMIT (in case the\n     * new address was the result of an unchecked calculation).\n     *\n     * @this {CPUStatePDP10}\n     * @param {number} addr\n     */\n    setPC(addr)\n    {\n        this.regRA = 0;\n        this.regXC = -1;\n        this.regPC = addr % PDP10.ADDR_LIMIT;\n    }\n\n    /**\n     * addIRQ(vector, priority, message)\n     *\n     * @this {CPUStatePDP10}\n     * @param {number} vector (-1 for floating vector)\n     * @param {number} priority\n     * @param {number} [message]\n     * @return {IRQ}\n     */\n    addIRQ(vector, priority, message)\n    {\n        var irq = {vector: vector, priority: priority, message: message || 0, name: null, next: null};\n        this.aIRQs.push(irq);\n        return irq;\n    }\n\n    /**\n     * insertIRQ(irq)\n     *\n     * @this {CPUStatePDP10}\n     * @param {IRQ} irq\n     */\n    insertIRQ(irq)\n    {\n        if (irq != this.irqNext) {\n            var irqPrev = this.irqNext;\n            if (!irqPrev || irqPrev.priority <= irq.priority) {\n                irq.next = irqPrev;\n                this.irqNext = irq;\n            } else {\n                do {\n                    var irqNext = irqPrev.next;\n                    if (!irqNext || irqNext.priority <= irq.priority) {\n                        irq.next = irqNext;\n                        irqPrev.next = irq;\n                        break;\n                    }\n                    irqPrev = irqNext;\n                } while (irqPrev);\n            }\n        }\n        /*\n         * See the writeXCSR() function for an explanation of why signalling an IRQ hardware interrupt\n         * should be done using IRQ_DELAY rather than setting IRQ directly.\n         */\n        this.opFlags |= PDP10.OPFLAG.IRQ_DELAY;\n    }\n\n    /**\n     * removeIRQ(irq)\n     *\n     * @this {CPUStatePDP10}\n     * @param {IRQ} irq\n     */\n    removeIRQ(irq)\n    {\n        var irqPrev = this.irqNext;\n        if (irqPrev == irq) {\n            this.irqNext = irq.next;\n        } else {\n            while (irqPrev) {\n                var irqNext = irqPrev.next;\n                if (irqNext == irq) {\n                    irqPrev.next = irqNext.next;\n                    break;\n                }\n                irqPrev = irqNext;\n            }\n        }\n        /*\n         * We could also set irq.next to null now, but strictly speaking, that shouldn't be necessary.\n         *\n         * Last but not least, if there's still an IRQ on the active IRQ list, we need to make sure IRQ_DELAY\n         * is still set.\n         */\n        if (this.irqNext) {\n            this.opFlags |= PDP10.OPFLAG.IRQ_DELAY;\n        }\n    }\n\n    /**\n     * setIRQ(irq)\n     *\n     * @this {CPUStatePDP10}\n     * @param {IRQ|null} irq\n     */\n    setIRQ(irq)\n    {\n        if (irq) {\n            this.insertIRQ(irq);\n            if (irq.message && this.messageEnabled(irq.message | MessagesPDP10.INT)) {\n                this.printMessage(\"setIRQ(vector=\" + Str.toOct(irq.vector) + \",priority=\" + irq.priority + \")\", true, true);\n            }\n        }\n    }\n\n    /**\n     * clearIRQ(irq)\n     *\n     * @this {CPUStatePDP10}\n     * @param {IRQ|null} irq\n     */\n    clearIRQ(irq)\n    {\n        if (irq) {\n            this.removeIRQ(irq);\n            if (irq.message && this.messageEnabled(irq.message | MessagesPDP10.INT)) {\n                this.printMessage(\"clearIRQ(vector=\" + Str.toOct(irq.vector) + \",priority=\" + irq.priority + \")\", true, true);\n            }\n        }\n    }\n\n    /**\n     * findIRQ(vector)\n     *\n     * @this {CPUStatePDP10}\n     * @param {number} vector\n     * @return {IRQ|null}\n     */\n    findIRQ(vector)\n    {\n        for (var i = 0; i < this.aIRQs.length; i++) {\n            var irq = this.aIRQs[i];\n            if (irq.vector === vector) return irq;\n        }\n        return null;\n    }\n\n    /**\n     * checkIRQs(priority)\n     *\n     * @this {CPUStatePDP10}\n     * @param {number} priority\n     * @return {IRQ|null}\n     */\n    checkIRQs(priority)\n    {\n        return (this.irqNext && this.irqNext.priority > priority)? this.irqNext : null;\n    }\n\n    /**\n     * resetIRQs(priority)\n     *\n     * @this {CPUStatePDP10}\n     */\n    resetIRQs()\n    {\n        this.irqNext = null;\n    }\n\n    /**\n     * saveIRQs()\n     *\n     * @this {CPUStatePDP10}\n     * @return {Array.<number>}\n     */\n    saveIRQs()\n    {\n        var aIRQVectors = [];\n        var irq = this.irqNext;\n        while (irq) {\n            aIRQVectors.push(irq.vector);\n            irq = irq.next;\n        }\n        return aIRQVectors;\n    }\n\n    /**\n     * restoreIRQs(aIRQVectors)\n     *\n     * @this {CPUStatePDP10}\n     * @param {Array.<number>} aIRQVectors\n     */\n    restoreIRQs(aIRQVectors)\n    {\n        for (var i = aIRQVectors.length - 1; i >= 0; i--) {\n            var irq = this.findIRQ(aIRQVectors[i]);\n\n            if (irq) {\n                irq.next = this.irqNext;\n                this.irqNext = irq;\n            }\n        }\n    }\n\n    /**\n     * checkInterrupts()\n     *\n     * @this {CPUStatePDP10}\n     * @return {boolean} true if an interrupt was dispatched, false if not\n     */\n    checkInterrupts()\n    {\n        var fInterrupt = false;\n\n        if (this.opFlags & PDP10.OPFLAG.IRQ) {\n\n            // var vector = PDP10.TRAP.PIRQ;\n            // var priority = (this.regPIR & PDP10.PSW.PRI) >> PDP10.PSW.SHIFT.PRI;\n            //\n            // var irq = this.checkIRQs(priority);\n            // if (irq) {\n            //     vector = irq.vector;\n            //     priority = irq.priority;\n            // }\n            //\n            // if (this.dispatchInterrupt(vector, priority)) {\n            //     if (irq) this.removeIRQ(irq);\n            //     fInterrupt = true;\n            // }\n\n            if (!this.irqNext) {\n                this.opFlags &= ~PDP10.OPFLAG.IRQ;\n            }\n        }\n        else if (this.opFlags & PDP10.OPFLAG.IRQ_DELAY) {\n            /*\n             * We know that IRQ (bit 2) is clear, so since IRQ_DELAY (bit 0) is set, incrementing opFlags\n             * will eventually transform IRQ_DELAY into IRQ, without affecting any other (higher) bits.\n             */\n            this.opFlags++;\n        }\n        return fInterrupt;\n    }\n\n    /**\n     * dispatchInterrupt(vector, priority)\n     *\n     * TODO: The process of dispatching an interrupt MUST cost some cycles; either trap() needs to assess\n     * that cost, or we do.\n     *\n     * @this {CPUStatePDP10}\n     * @param {number} vector\n     * @param {number} priority\n     * @return {boolean} (true if dispatched, false if not)\n     */\n    dispatchInterrupt(vector, priority)\n    {\n        return false;\n    }\n\n    /**\n     * isWaiting()\n     *\n     * @this {CPUStatePDP10}\n     * @return {boolean} (true if OPFLAG.WAIT is set, false otherwise)\n     */\n    isWaiting()\n    {\n        return !!(this.opFlags & PDP10.OPFLAG.WAIT);\n    }\n\n    /**\n     * readWordFromPhysical(addr)\n     *\n     * This is a handler set up by setMemoryAccess().  All calls should go through readWord().\n     *\n     * @this {CPUStatePDP10}\n     * @param {number} addr\n     * @return {number}\n     */\n    readWordFromPhysical(addr)\n    {\n        return this.bus.getWord(this.addrLast = addr);\n    }\n\n    /**\n     * writeWordToPhysical(addr, data)\n     *\n     * This is a handler set up by setMemoryAccess().  All calls should go through writeWord().\n     *\n     * @this {CPUStatePDP10}\n     * @param {number} addr\n     * @param {number} data\n     * @return {number} (we return the data back to the caller to permit nested writes)\n     */\n    writeWordToPhysical(addr, data)\n    {\n        this.bus.setWord(this.addrLast = addr, data);\n        return data;\n    }\n\n    /**\n     * haltCPU()\n     *\n     * This is a temporary helper function for the Bus component, to force the CPU to stop executing the\n     * current instruction.\n     *\n     * @this {CPUStatePDP10}\n     */\n    haltCPU()\n    {\n        this.stopCPU();\n        throw -1;\n    }\n\n    /**\n     * stepCPU(nMinCycles)\n     *\n     * NOTE: Single-stepping should not be confused with the Trap flag; single-stepping is a Debugger\n     * operation that's completely independent of Trap status.  The CPU can go in and out of Trap mode,\n     * in and out of h/w interrupt service routines (ISRs), etc, but from the Debugger's perspective,\n     * they're all one continuous stream of instructions that can be stepped or run at will.  Moreover,\n     * stepping vs. running should never change the behavior of the simulation.\n     *\n     * @this {CPUStatePDP10}\n     * @param {number} nMinCycles (0 implies a single-step, and therefore breakpoints should be ignored)\n     * @return {number} of cycles executed; 0 indicates a pre-execution condition (ie, an execution breakpoint\n     * was hit), -1 indicates a post-execution condition (eg, a read or write breakpoint was hit), and a positive\n     * number indicates successful completion of that many cycles (which should always be >= nMinCycles).\n     */\n    stepCPU(nMinCycles)\n    {\n        /*\n         * The Debugger uses complete to determine if the instruction completed (true) or was interrupted\n         * by a breakpoint or some other exceptional condition (false).  NOTE: this does NOT include JavaScript\n         * exceptions, which stepCPU() expects the caller to catch using its own exception handler.\n         *\n         * The CPU relies on the use of stopCPU() rather than complete, because the CPU never single-steps\n         * (ie, nMinCycles is always some large number), whereas the Debugger does.  And conversely, when the\n         * Debugger is single-stepping (even when performing multiple single-steps), fRunning is never set,\n         * so stopCPU() would have no effect as far as the Debugger is concerned.\n         */\n        this.flags.complete = true;\n\n        /*\n         * nDebugCheck is 1 if we want the Debugger's checkInstruction() to check every instruction,\n         * -1 if we want it to check just the first instruction, and 0 if there's no need for any checks.\n         */\n        var nDebugCheck = (DEBUGGER && this.dbg)? (this.dbg.checksEnabled()? 1 : (this.flags.starting? -1 : 0)) : 0;\n\n        /*\n         * nDebugState is needed only when nDebugCheck is non-zero; it is -1 if this is a single-step, 0 if\n         * this is the start of a new run, and 1 if this is a continuation of a previous run.  It is used by\n         * checkInstruction() to determine if it should skip breakpoint checks and/or HALT instructions (ie,\n         * if nDebugState is <= zero).\n         */\n        var nDebugState = (!nMinCycles)? -1 : (this.flags.starting? 0 : 1);\n        this.flags.starting = false;        // we've moved beyond \"starting\" and have officially \"started\" now\n\n        /*\n         * We move the minimum cycle count to nStepCycles (the number of cycles left to step), so that other\n         * functions have the ability to force that number to zero (eg, stopCPU()), and thus we don't have to check\n         * any other criteria to determine whether we should continue stepping or not.\n         */\n        this.nBurstCycles = this.nStepCycles = nMinCycles;\n\n        /*\n         * And finally, move the nDebugCheck state to an OPFLAG bit, so that the loop need check only one variable.\n         */\n        this.opFlags = (this.opFlags & ~PDP10.OPFLAG.DEBUGGER) | (nDebugCheck? PDP10.OPFLAG.DEBUGGER : 0);\n\n        do {\n            if (this.opFlags) {\n                /*\n                 * NOTE: We still check DEBUGGER to ensure that this code will be compiled out of existence in\n                 * non-DEBUGGER builds.\n                 */\n                if (DEBUGGER && (this.opFlags & PDP10.OPFLAG.DEBUGGER)) {\n                    if (this.dbg.checkInstruction(this.getXC(), nDebugState)) {\n                        this.stopCPU();\n                        break;\n                    }\n                    if (!++nDebugCheck) this.opFlags &= ~PDP10.OPFLAG.DEBUGGER;\n                    if (!nDebugState) nDebugState++;\n                }\n                /*\n                 * If we're in the IRQ or WAIT state, check for any pending interrupts.\n                 *\n                 * NOTE: It's no coincidence that we're checking this BEFORE any pending traps, because in rare\n                 * cases (including some presented by those pesky \"TRAP TEST\" diagnostics), the process of dispatching\n                 * an interrupt can trigger a TRAP_SP stack overflow condition, which must be dealt with BEFORE we\n                 * execute the first instruction of the interrupt handler.\n                 */\n                if ((this.opFlags & (PDP10.OPFLAG.IRQ_MASK | PDP10.OPFLAG.WAIT)) /* && nDebugState >= 0 */) {\n                    if (this.checkInterrupts()) {\n                        if ((this.opFlags & PDP10.OPFLAG.DEBUGGER) && this.dbg.checkInstruction(this.getXC(), nDebugState)) {\n                            this.stopCPU();\n                            break;\n                        }\n                        /*\n                         * Since an interrupt was just dispatched, altering the normal flow of time and changing\n                         * the future as we knew it, let's break out immediately if we're single-stepping, so that\n                         * the Debugger gets to see the first instruction of the interrupt handler.  NOTE: This\n                         * assumes that we've still commented out the nDebugState check above that used to bypass\n                         * checkInterrupts() when single-stepping.\n                         */\n                        if (nDebugState < 0) break;\n                    }\n                }\n            }\n\n            this.opFlags &= PDP10.OPFLAG.PRESERVE;\n\n            var op = this.getOpcode();\n            if (op >= 0) {\n                this.opDecode(op);\n            }\n            /*\n             * TODO: This is a temporary cycle charge, required for CPU operational bookkeeping until we add\n             * correct cycle counts for all instructions.\n             */\n            this.nStepCycles--;\n\n        } while (this.nStepCycles > 0);\n\n        return (this.flags.complete? this.nBurstCycles - this.nStepCycles : (this.flags.complete === false? -1 : 0));\n    }\n\n    /**\n     * CPUStatePDP10.init()\n     *\n     * This function operates on every HTML element of class \"cpu\", extracting the\n     * JSON-encoded parameters for the CPUStatePDP10 constructor from the element's \"data-value\"\n     * attribute, invoking the constructor (which in turn invokes the CPU constructor)\n     * to create a CPUStatePDP10 component, and then binding any associated HTML controls to the\n     * new component.\n     */\n    static init()\n    {\n        var aeCPUs = Component.getElementsByClass(document, PDP10.APPCLASS, \"cpu\");\n        for (var iCPU = 0; iCPU < aeCPUs.length; iCPU++) {\n            var eCPU = aeCPUs[iCPU];\n            var parmsCPU = Component.getComponentParms(eCPU);\n            var cpu = new CPUStatePDP10(parmsCPU);\n            Component.bindComponentControls(cpu, eCPU, PDP10.APPCLASS);\n        }\n    }\n}\n\n/*\n * Initialize every CPU module on the page\n */\nWeb.onInit(CPUStatePDP10.init);\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp10/lib/cpuops.js (C) Jeff Parsons 2012-2018\n */\n\n\n/*\n    From the \"PDP-10 System Reference Manual\", May 1968, p. 1-4:\n\n    1.1 NUMBER SYSTEM\n\n    The program can interpret a data word as a 36-digit, unsigned binary number, or the left and right\n    halves of a word can be taken as separate 18-bit numbers.  The PDP-10 repertoire includes instructions\n    that effectively add or subtract one from both halves of a word, so the right half can be used for\n    address modification when the word is addressed as an index register, while the left half is used to\n    keep a control count.\n\n    The standard arithmetic instructions in the PDP-10 use twos complement, fixed point conventions to do\n    binary arithmetic.  In a word used as a number, bit 0 (the leftmost bit) represents the sign, 0 for positive,\n    1 for negative.  In a positive number the remaining 35 bits are the magnitude in ordinary binary notation.\n    The negative of a number is obtained by taking its twos complement. If x is an n-digit binary number, its\n    twos complement is 2^n - x, and its ones complement is (2^n - 1) - x, or equivalently (2^n - x) - 1.\n\n    Subtracting a number from 2^n - 1 (ie, from all 1s) is equivalent to performing the logical complement,\n    ie changing all 0s to 1s and all 1s to 0s.  Therefore, to form the twos complement one takes the logical\n    complement (usually referred to merely as the complement) of the entire word including the sign, and adds\n    1 to the result.  In a negative number the sign bit is 1, and the remaining bits are the twos complement\n    of the magnitude.\n\n    Zero is represented by a word containing all 0s.  Complementing this number produces all 1s, and adding\n    1 to that produces all 0s again.  Hence there is only one zero representation and its sign is positive.\n    Since the numbers are symmetrical in magnitude about a single zero representation, all even numbers both\n    positive and negative end in 0, all odd numbers in 1 (a number all 1s represents -1).  But since there are\n    the same number of positive and negative numbers and zero is positive, there is one more negative number\n    than there are nonzero positive numbers.  This is the most negative number and it cannot be produced by\n    negating any positive number (its octal representation is 400000 000000 and its magnitude is one greater\n    than the largest positive number).\n\n    If ones complements were used for negatives one could read a negative number by attaching significance\n    to the as instead of the 1s.  In twos complement notation each negative number is one greater than the\n    complement of the positive number of the same magnitude, so one can read a negative number by attaching\n    significance to the rightmost 1 and attaching significance to the 0s at the left of it (the negative number\n    of largest magnitude has a 1 in only the sign position).  In a negative integer, 1s may be discarded at the\n    left, just as leading 0s may be dropped in a positive integer.  In a negative fraction, 0s may be discarded\n    at the right.  So long as only 0s are discarded, the number remains in twos complement form because it\n    still has a 1 that possesses significance; but if a portion including the rightmost 1 is discarded, the\n    remaining part of the fraction is now a ones complement.\n\n    The computer does not keep track of a binary point - the programmer must adopt a point convention and shift\n    the magnitude of the result to conform to the convention used.  Two common conventions are to regard a number\n    as an integer (binary point at the right) or as a proper fraction (binary point at the left); in these two\n    cases the range of numbers represented by a single word is -2^35 to 2^35 - 1, or -1 to 1 - 2^35.  Since\n    multiplication and division make use of double length numbers, there are special instructions for performing\n    these operations with integral operands.\n\n    SIDEBAR: Multiplication produces a double length product, and the programmer must remember that discarding\n    the low order part of a double length negative leaves the high order part in correct twos complement form\n    only if the low order part is null.\n\n    ...\n\n    2.5 FIXED POINT ARITHMETIC\n\n    For fixed point arithmetic the PDP-10 has instructions for arithmetic shifting (which is essentially\n    multiplication by a power of 2) as well as for performing addition, subtraction, multiplication and division\n    of numbers in fixed point format [§ 1.1].  In such numbers the position of the binary point is arbitrary\n    (the programmer may adopt any point convention).  The add and subtract instructions involve only single length\n    numbers, whereas multiply supplies a double length product, and divide uses a double length dividend.  The high\n    and low order words respectively of a double length fixed point number are in accumulators A and A+1 (mod 20),\n    where the magnitude is the 70-bit string in bits 1-35 of the two words and the signs of the two are identical.\n    There are also integer multiply and divide instructions that involve only single length numbers and are\n    especially suited for handling smaller integers, particularly those of eighteen bits or less such as addresses\n    (of course they can be used for small fractions as well provided the programmer keeps track of the binary point).\n    For convenience in the following, all operands are assumed to be integers (binary point at the right).\n\n    The processor has four flags, Overflow, Carry 0, Carry 1 and No Divide, that indicate when the magnitude of a\n    number is or would be larger than can be accommodated.  Carry 0 and Carry 1 actually detect carries out of bits\n    0 and 1 in certain instructions that employ fixed point arithmetic operations: the add and subtract instructions\n    treated here, the move instructions that produce the negative or magnitude of the word moved [§ 2.2], and the\n    arithmetic test instructions that increment or decrement the test word [§ 2.7].  In these instructions an\n    incorrect result is indicated - and the Overflow flag set - if the carries are different, ie if there is a carry\n    into the sign but not out of it, or vice versa.  The Overflow flag is also set by No Divide being set, which\n    means the processor has failed to perform a division because the magnitude of the dividend is greater than or\n    equal to that of the divisor, or in integer divide, simply that the divisor is zero.  In other overflow cases\n    only Overflow itself is set: these include too large a product in multiplication, and loss of significant bits\n    in left arithmetic shifting.\n\n    SIDEBAR: Overflow is determined directly from the carries, not from the carry flags, as their states may reflect\n    events in previous instructions.\n\n */\n\n/**\n * opKA10(op)\n *\n * Originally, we received the full opcode (36 bits), then only the upper half-word (18 bits),\n * and now we receive only the upper 13 bits.  However, the octal values shown in the table and\n * function comments below still include all 18 bits of the original upper half-word, so that\n * you don't have to mentally un-shift them 5 bits.\n *\n * @this {CPUStatePDP10}\n * @param {number} op (the top 13 bits of the original opcode, shifted right to bit 0)\n */\nPDP10.opKA10 = function(op)\n{\n    /*\n     * We shift op right 4 more bits, leaving only the 9 bits required for the table index.  Those\n     * 4 bits are normally an accumulator index, which we also mask and pass along, since most instructions\n     * will use an accumulator, and those that don't simply ignore it.\n     */\n    PDP10.aOpXXX_KA10[op >> 4].call(this, op, op & PDP10.OPCODE.A_MASK);\n};\n\n/**\n * opUUO(0o0NN000): Unimplemented User Operation\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-64:\n *\n *      Store the instruction code, A and the effective address E in bits 0-8, 9-12 and 18-35 respectively of\n *      location 40; clear bits 13-17.  Execute the instruction contained in location 41.  The original contents\n *      of location 40 are lost.\n *\n *      All of these codes are equivalent when they occur in the Monitor or when time sharing is not in effect.\n *      But when a UUO appears in a user program, a code in the range 001-037 uses relocated locations 40 and 41\n *      (ie 40 and 41 in the user's block) and is thus entirely a part of and under control of the user program.\n *\n *      A code in the range 040-077 on the other hand uses unrelocated 40 and 41, and the instruction in the latter\n *      location is under control of the Monitor; these codes are thus specifically for user communication with\n *      the Monitor, which interprets them (refer to the Monitor manual for the meanings of the various codes).\n *\n *      The code 000 executes in the same way as 040-077 but is not a standard communication code: it is included\n *      so that control returns to the Monitor should a user program wipe itself out.\n *\n *      For a second processor connected to the same memory, the UUO trap is locations 140-141 instead of 40-41.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opUUO = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opUFA(0o130000): Unnormalized Floating Add\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-37:\n *\n *      Floating add the contents of location E to AC.  If the double length fraction in the sum is zero, clear\n *      accumulator A+1.  Otherwise normalize the sum only if the magnitude of its fractional part is >= 1, and place\n *      the high order part of the result in AC A+1.  The original contents of AC and E are unaffected.\n *\n *      NOTE: The result is placed in accumulator A+1. T his is the only arithmetic instruction that stores the result\n *      in a second accumulator, leaving the original operands intact.\n *\n *      If the exponent of the sum following the one-step normalization is > 127, set Overflow and Floating Overflow;\n *      the result stored has an exponent 256 less than the correct one.\n *\n *      SIDEBAR: The exponent of the sum is equal to that of the larger summand unless addition of the fractions\n *      overflows, in which case it is greater by 1.  Exponent overflow can occur only in the latter case.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opUFA = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opDFN(0o131000): Double Floating Negate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-37:\n *\n *      Negate the double length floating point number composed of the contents of AC and location E with AC on the left.\n *      Do this by taking the twos complement of the number whose sign is AC bit 0, whose exponent is in AC bits 1-8, and\n *      whose fraction is the 54-bit string in bits 9-35 of AC and location E.  Place the high order word of the result\n *      in AC; place the low order part of the fraction in bits 9-35 of location E without altering the original contents\n *      of bits 0-8 of that location.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opDFN = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFSC(0o132000): Floating Scale\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-34:\n *\n *      If the fractional part of AC is zero, clear AC.  Otherwise add the scale factor given by E to the exponent part\n *      of AC (thus multiplying AC by 2^E), normalize the resulting word bringing 0s into bit positions vacated at the\n *      right, and place the result back in AC.\n *\n *      NOTE: A negative E is represented in standard twos complement notation, but the hardware compensates for this\n *      when scaling the exponent.\n *\n *      If the exponent after normalization is > 127, set Overflow and Floating Overflow; the result stored has an\n *      exponent 256 less than the correct one.  If < -128, set Overflow, Floating Overflow and Floating Underflow;\n *      the result stored has an exponent 256 greater than the correct one.\n *\n *      SIDEBAR: This instruction can be used to float a fixed number with 27 or fewer significant bits.  To float an\n *      integer contained within AC bits 9-35,\n *\n *          FSC AC,233\n *\n *      inserts the correct exponent to move the binary point from the right end to the left of bit 9 and then normalizes\n *      (233 [base 8] = 155 [base 10] = 128 + 27).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFSC = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opIBP(0o133000): Increment Byte Pointer\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-16:\n *\n *      Increment the byte pointer in location E as explained [below].  The pointer has the format:\n *\n *                          1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3\n *      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n *      P P P P P P S S S S S S - I X X X X Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y\n *\n *      where S is the size of the byte as a number of bits, and P is its position as the number of bits\n *      remaining at the right of the byte in the word (eg if P is 3 the rightmost bit of the byte is bit 32\n *      of the word).  The rest of the pointer is interpreted in the same way as in an instruction: I, X and Y\n *      are used to calculate the address of the location that is the source or destination of the byte.\n *\n *      To facilitate processing a series of bytes, several of the byte instructions increment the\n *      pointer, ie, modify it so that it points to the next byte position in a set of memory locations.\n *      Bytes are processed from left to right in a word, so incrementing merely replaces the current value\n *      of P by P - S, unless there is insufficient space in the present location for another byte of the\n *      specified size (P - S < 0).  In this case Y is increased by one to point to the next consecutive\n *      location, and P is set to 36 - S to point to the first byte at the left in the new location.\n *\n *      CAUTION: Do not allow Y to reach maximum value.  The whole pointer is incremented, so if Y is 2^18 - 1\n *      it becomes zero and X is also incremented.  The address calculation for the pointer uses the original X,\n *      but if a priority interrupt should occur before the calculation is complete, the incremented X is used\n *      when the instruction is repeated.\n *\n *      SPECIAL CONSIDERATIONS: If S is greater than P and also greater than 36, incrementing produces a new\n *      P equal to 100 - S rather than 36 - S.  For S > 36 the byte is at most the entire word; for P >= 36 no\n *      byte is processed (loading merely clears AC).  If both P and S are less than 36 but P + S > 36,\n *      a byte of size 36 - P is loaded from position P, or the right 36 - P bits of the byte are deposited\n *      in position P.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opIBP = function(op, ac)\n{\n    var inc = 0;\n    var w = this.readWord(this.regEA);\n    var p = (w / PDP10.OPCODE.P_SCALE) & PDP10.OPCODE.P_MASK;\n    var s = (w >> PDP10.OPCODE.S_SHIFT) & PDP10.OPCODE.S_MASK;\n    p -= s;\n    if (p < 0) {\n        inc++;\n        p = 36 - s;\n        if (p < 0) p = 100 - s; // see SPECIAL CONSIDERATIONS and NOTE above\n    }\n    /*\n     * Since the documentation above makes clear that the effect of the increment (of w) extends past the Y\n     * bits and into (at least) the X bits, we first re-assemble a new pointer with updated P bits (along with\n     * the original S bits and the remaining bits covered by PTR_MASK) and then increment as needed.\n     *\n     * Yes, PTR_MASK could have included the S bits as well and made the following expression a TINY bit simpler,\n     * but I would like to keep PTR_MASK distinct from both the P and S fields.\n     */\n    w = (p * PDP10.OPCODE.P_SCALE) + (s << PDP10.OPCODE.S_SHIFT) + (w & PDP10.OPCODE.PTR_MASK);\n    if (inc) w = (w + inc) % PDP10.WORD_LIMIT;\n    this.writeWord(this.regEA, w);\n};\n\n/**\n * opILDB(0o134000): Increment Pointer and Load Byte\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-16:\n *\n *      Increment the byte pointer in location E as explained above. Then retrieve a byte of S bits from the\n *      location and position specified by the newly incremented pointer, load it into the right end of AC,\n *      and clear the remaining AC bits.  The location containing the byte is unaffected, the original contents\n *      of AC are lost.\n *\n *      SPECIAL CONSIDERATIONS: If S is greater than P and also greater than 36, incrementing produces a new\n *      P equal to 100 - S rather than 36 - S.  For S > 36 the byte is at most the entire word; for P >= 36 no\n *      byte is processed (loading merely clears AC).  If both P and S are less than 36 but P + S > 36,\n *      a byte of size 36 - P is loaded from position P, or the right 36 - P bits of the byte are deposited\n *      in position P.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opILDB = function(op, ac)\n{\n    /*\n     * We're called in two phases: phase 1 is with regEA containing the address of the pointer, and phase 2\n     * is with regEA containing the address of the bits to be loaded.\n     *\n     * We can implement this as a simple combination of opIBP() and opLDB(), but taking care that we only call\n     * opIBP() on phase 1 (and only if the BIS flag is not set).\n     */\n    if (!(this.regPS & PDP10.PSFLAG.BIS)) {\n        PDP10.opIBP.call(this, op, ac);\n        this.regPS |= PDP10.PSFLAG.BIS;\n    }\n    PDP10.opLDB.call(this, op, ac);\n};\n\n/**\n * opLDB(0o135000): Load Byte\n *z\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-16:\n *\n *      Retrieve a byte of S bits from the location and position specified by the pointer contained in location E,\n *      load it into the right end of AC, and clear the remaining AC bits.  The location containing the byte is\n *      unaffected, the original contents of AC are lost.\n *\n *      SPECIAL CONSIDERATIONS: If S is greater than P and also greater than 36, incrementing produces a new\n *      P equal to 100 - S rather than 36 - S.  For S > 36 the byte is at most the entire word; for P >= 36 no\n *      byte is processed (loading merely clears AC).  If both P and S are less than 36 but P + S > 36,\n *      a byte of size 36 - P is loaded from position P, or the right 36 - P bits of the byte are deposited\n *      in position P.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opLDB = function(op, ac)\n{\n    /*\n     * We're called in two phases: phase 1 is with regEA containing the address of the pointer, and phase 2\n     * is with regEA containing the address of the bits to be loaded.\n     */\n    var w = this.readWord(this.regEA);\n    if (this.regBP < 0) {\n        this.regBP = w;\n        this.regRA = this.regEA | PDP10.OPCODE.I_FIELD;\n        return;\n    }\n    var p = (this.regBP / PDP10.OPCODE.P_SCALE) & PDP10.OPCODE.P_MASK;\n    var s = (this.regBP >> PDP10.OPCODE.S_SHIFT) & PDP10.OPCODE.S_MASK;\n    if (p + s < 32) {\n        /*\n         * WARNING: When using JavaScript's 32-bit operators with values that could set bit 31 and produce a\n         * negative value, it's critical to perform a final right-shift of 0, ensuring that the final result is\n         * positive.\n         */\n        w = ((w >> p) & ((1 << s) - 1)) >>> 0;\n    } else {\n        /*\n         * Regarding the SPECIAL CONSIDERATIONS above, even if the P (\"shift\") and/or S (\"mask\") values are\n         * over-large, that should be fine, because nothing but additional zero bits will be included (provided\n         * our memory is working properly and didn't give us more than 36 bits of unsigned data).\n         */\n        w = Math.trunc(w / Math.pow(2, p)) % Math.pow(2, s);\n    }\n    this.writeWord(ac, w);\n    this.regPS &= ~PDP10.PSFLAG.BIS;\n    this.regBP = -1;\n};\n\n/**\n * opIDPB(0o136000): Increment Pointer and Deposit Byte\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-16:\n *\n *      Increment the byte pointer in location E as explained above.  Then deposit the right S bits of AC into\n *      the location and position specified by the newly incremented pointer.  The original contents of the bits\n *      that receive the byte are lost, AC and the remaining bits of the deposit location are unaffected.\n *\n *      SPECIAL CONSIDERATIONS: If S is greater than P and also greater than 36, incrementing produces a new\n *      P equal to 100 - S rather than 36 - S.  For S > 36 the byte is at most the entire word; for P >= 36 no\n *      byte is processed (loading merely clears AC).  If both P and S are less than 36 but P + S > 36,\n *      a byte of size 36 - P is loaded from position P, or the right 36 - P bits of the byte are deposited\n *      in position P.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opIDPB = function(op, ac)\n{\n    /*\n     * We're called in two phases: phase 1 is with regEA containing the address of the pointer, and phase 2\n     * is with regEA containing the address of the bits to be stored.\n     *\n     * We can implement this as a simple combination of opIBP() and opDDB(), but taking care that we only call\n     * opIBP() on phase 1 (and only if the BIS flag is not set).\n     */\n    if (!(this.regPS & PDP10.PSFLAG.BIS)) {\n        PDP10.opIBP.call(this, op, ac);\n        this.regPS |= PDP10.PSFLAG.BIS;\n    }\n    PDP10.opDPB.call(this, op, ac);\n};\n\n/**\n * opDPB(0o137000): Deposit Byte\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-16:\n *\n *      Deposit the right S bits of AC into the location and position specified by the pointer contained\n *      in location E.  The original contents of the bits that receive the byte are lost, AC and the remaining\n *      bits of the deposit location are unaffected.\n *\n *      SPECIAL CONSIDERATIONS: If S is greater than P and also greater than 36, incrementing produces a new\n *      P equal to 100 - S rather than 36 - S.  For S > 36 the byte is at most the entire word; for P >= 36 no\n *      byte is processed (loading merely clears AC).  If both P and S are less than 36 but P + S > 36,\n *      a byte of size 36 - P is loaded from position P, or the right 36 - P bits of the byte are deposited\n *      in position P.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opDPB = function(op, ac)\n{\n    /*\n     * We're called in two phases: phase 1 is with regEA containing the address of the pointer, and phase 2\n     * is with regEA containing the address of the bits to be stored.\n     */\n    var w = this.readWord(this.regEA);\n    if (this.regBP < 0) {\n        this.regBP = w;\n        this.regRA = this.regEA | PDP10.OPCODE.I_FIELD;\n        return;\n    }\n    var p = (this.regBP / PDP10.OPCODE.P_SCALE) & PDP10.OPCODE.P_MASK;\n    var s = (this.regBP >> PDP10.OPCODE.S_SHIFT) & PDP10.OPCODE.S_MASK;\n    /*\n     * Regarding the SPECIAL CONSIDERATIONS above, even if the P (\"shift\") and/or S (\"mask\") values are\n     * over-large, we \"mask\" the resulting byte value (b) to 36 bits, so that when we re-assemble the final\n     * result (w), there shouldn't be any overlap or overflow.\n     */\n    var b = ((this.readWord(ac) % Math.pow(2, s)) * Math.pow(2, p)) % PDP10.WORD_LIMIT;\n    w = (w - (w % Math.pow(2, p + s))) + b + (w % Math.pow(2, p));\n    this.writeWord(this.regEA, w);\n    this.regPS &= ~PDP10.PSFLAG.BIS;\n    this.regBP = -1;\n};\n\n/**\n * opFAD(0o140000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFAD = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFADI(0o141000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFADI = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFADM(0o142000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFADM = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFADB(0o143000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFADB = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFADR(0o144000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFADR = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFADRI(0o145000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFADRI = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFADRM(0o146000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFADRM = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFADRB(0o147000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFADRB = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFSB(0o150000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFSB = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFSBI(0o151000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFSBI = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFSBM(0o152000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFSBM = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFSBB(0o153000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFSBB = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFSBR(0o154000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFSBR = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFSBRI(0o155000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFSBRI = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFSBRM(0o156000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFSBRM = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFSBRB(0o157000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFSBRB = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFMP(0o160000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFMP = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFMPI(0o161000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFMPI = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFMPM(0o162000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFMPM = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFMPB(0o163000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFMPB = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFMPR(0o164000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFMPR = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFMPRI(0o165000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFMPRI = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFMPRM(0o166000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFMPRM = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFMPRB(0o167000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFMPRB = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFDV(0o170000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFDV = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFDVI(0o171000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFDVI = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFDVM(0o172000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFDVM = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFDVB(0o173000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFDVB = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFDVR(0o174000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFDVR = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFDVRI(0o175000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFDVRI = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFDVRM(0o176000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFDVRM = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opFDVRB(0o177000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opFDVRB = function(op, ac)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opMOVE(0o200000): Move\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-11:\n *\n *      Move one word from the source to the destination specified by M.  The source is unaffected,\n *      the original contents of the destination are lost.\n *\n * NOTE: This is a \"Basic\" mode instruction: the source is [E] and the destination is [A] (opposite of \"Memory\").\n *\n * Equivalents: opSETM(0o414000) and opSETMB(0o417000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMOVE = function(op, ac)\n{\n    this.writeWord(ac, this.readWord(this.regEA));\n};\n\n/**\n * opMOVEI(0o201000): Move Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-11:\n *\n *      Move one word from the source to the destination specified by M.  The source is unaffected,\n *      the original contents of the destination are lost.\n *\n *      SIDEBAR: MOVEI loads the word 0,E into AC and is thus equivalent to HRRZI.\n *\n * NOTE: This is an \"Immediate\" mode instruction: the source is the word 0,E and the destination is [A].\n *\n * Equivalents: opSETMI(0o415000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMOVEI = function(op, ac)\n{\n    this.writeWord(ac, this.regEA);\n};\n\n/**\n * opMOVEM(0o202000): Move to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-11:\n *\n *      Move one word from the source to the destination specified by M.  The source is unaffected,\n *      the original contents of the destination are lost.\n *\n * NOTE: This is a \"Memory\" mode instruction: the source is [A] and the destination is [E] (opposite of \"Basic\").\n *\n * Equivalents: opSETAM(0o426000) and opSETAB(0o427000).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMOVEM = function(op, ac)\n{\n    this.writeWord(this.regEA, this.readWord(ac));\n};\n\n/**\n * opMOVES(0o203000): Move to Self\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-11:\n *\n *      Move one word from the source to the destination specified by M.  The source is unaffected,\n *      the original contents of the destination are lost.\n *\n *      SIDEBAR: If A is zero, MOVES is a no-op; otherwise it is equivalent to MOVE.\n *\n * NOTE: This is a \"Self\" mode instruction: the source AND destination is [E] (and also [A] if A is non-zero).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMOVES = function(op, ac)\n{\n    if (ac) this.writeWord(ac, this.readWord(this.regEA));\n};\n\n/**\n * opMOVS(0o204000): Move Swapped\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-11:\n *\n *      Interchange the left and right halves of the word from the source specified by M and move it to the\n *      specified destination.  The source is unaffected, the original contents of the destination are lost.\n *\n * NOTE: This is a \"Basic\" mode instruction: the source is [E] and the destination is [A] (opposite of \"Memory\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMOVS = function(op, ac)\n{\n    var src = this.readWord(this.regEA);\n    src = ((src / PDP10.HALF_SHIFT)|0) + ((src & PDP10.HALF_MASK) * PDP10.HALF_SHIFT);\n    this.writeWord(ac, src);\n};\n\n/**\n * opMOVSI(0o205000): Move Swapped Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-11:\n *\n *      Interchange the left and right halves of the word from the source specified by M and move it to the\n *      specified destination.  The source is unaffected, the original contents of the destination are lost.\n *\n *      SIDEBAR: Swapping halves in immediate mode loads the word E,0 into AC.  MOVSI is thus equivalent to HRLZI.\n *\n * NOTE: This is an \"Immediate\" mode instruction: the source is the word 0,E and the destination is [A].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMOVSI = function(op, ac)\n{\n    this.writeWord(ac, this.regEA * PDP10.HALF_SHIFT);\n};\n\n/**\n * opMOVSM(0o206000): Move Swapped to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-11:\n *\n *      Interchange the left and right halves of the word from the source specified by M and move it to the\n *      specified destination.  The source is unaffected, the original contents of the destination are lost.\n *\n * NOTE: This is a \"Memory\" mode instruction: the source is [A] and the destination is [E] (opposite of \"Basic\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMOVSM = function(op, ac)\n{\n    var src = this.readWord(ac);\n    src = ((src / PDP10.HALF_SHIFT)|0) + ((src & PDP10.HALF_MASK) * PDP10.HALF_SHIFT);\n    this.writeWord(this.regEA, src);\n};\n\n/**\n * opMOVSS(0o207000): Move Swapped to Self\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-11:\n *\n *      Interchange the left and right halves of the word from the source specified by M and move it to the\n *      specified destination.  The source is unaffected, the original contents of the destination are lost.\n *\n * NOTE: This is a \"Self\" mode instruction: the source AND destination is [E] (and also [A] if A is non-zero).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMOVSS = function(op, ac)\n{\n    var src = this.readWord(this.regEA);\n    src = ((src / PDP10.HALF_SHIFT)|0) + ((src & PDP10.HALF_MASK) * PDP10.HALF_SHIFT);\n    this.writeWord(this.regEA, src);\n    if (ac) this.writeWord(ac, src)\n};\n\n/**\n * opMOVN(0o210000): Move Negative\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-11:\n *\n *      Negate the word from the source specified by M and move it to the specified destination.\n *      If the source word is fixed point -2^35 (400000 000000) set the Overflow and Carry 1 flags.\n *\n *      (Negating the equivalent floating point -1 * 2^127 sets the flags, but this is not a normalized\n *      number).\n *\n *      If the source word is zero, set Carry 0 and Carry 1.  The source is unaffected, the original\n *      contents of the destination are lost.\n *\n * NOTE: This is a \"Basic\" mode instruction: the source is [E] and the destination is [A] (opposite of \"Memory\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMOVN = function(op, ac)\n{\n    this.writeWord(ac, PDP10.doNEG.call(this, this.readWord(this.regEA)));\n};\n\n/**\n * opMOVNI(0o211000): Move Negative Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-11:\n *\n *      Negate the word from the source specified by M and move it to the specified destination.\n *      If the source word is fixed point -2^35 (400000 000000) set the Overflow and Carry 1 flags.\n *\n *      (Negating the equivalent floating point -1 * 2^127 sets the flags, but this is not a normalized\n *      number).\n *\n *      If the source word is zero, set Carry 0 and Carry 1.  The source is unaffected, the original\n *      contents of the destination are lost.\n *\n *      SIDEBAR: MOVNI loads AC with the negative of the word 0,E and can set no flags.\n *\n * NOTE: This is an \"Immediate\" mode instruction: the source is the word 0,E and the destination is [A].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMOVNI = function(op, ac)\n{\n    /*\n     * We used to perform an in-line two's complement of regEA, since doNEG() updates the flags, and the\n     * documentation above claimed that MOVNI must \"set no flags.\"  It's certainly true that regEA, being an\n     * 18-bit value, could never be -2^35, but it COULD be zero.  However, SIMH doesn't treat zero any\n     * differently for MOVNI, so we currently don't either.\n     *\n     * TODO: Verify the \"set no flags\" assertion on *real* (KA10) hardware.\n     */\n    this.writeWord(ac, PDP10.doNEG.call(this, this.regEA) /* this.regEA? PDP10.TWO_POW36 - this.regEA : 0 */);\n};\n\n/**\n * opMOVNM(0o212000): Move Negative to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-11:\n *\n *      Negate the word from the source specified by M and move it to the specified destination.\n *      If the source word is fixed point -2^35 (400000 000000) set the Overflow and Carry 1 flags.\n *\n *      (Negating the equivalent floating point -1 * 2^127 sets the flags, but this is not a normalized\n *      number).\n *\n *      If the source word is zero, set Carry 0 and Carry 1.  The source is unaffected, the original\n *      contents of the destination are lost.\n *\n * NOTE: This is a \"Memory\" mode instruction: the source is [A] and the destination is [E] (opposite of \"Basic\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMOVNM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.doNEG.call(this, this.readWord(ac)));\n};\n\n/**\n * opMOVNS(0o213000): Move Negative to Self\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-11:\n *\n *      Negate the word from the source specified by M and move it to the specified destination.\n *      If the source word is fixed point -2^35 (400000 000000) set the Overflow and Carry 1 flags.\n *\n *      (Negating the equivalent floating point -1 * 2^127 sets the flags, but this is not a normalized\n *      number).\n *\n *      If the source word is zero, set Carry 0 and Carry 1.  The source is unaffected, the original\n *      contents of the destination are lost.\n *\n * NOTE: This is a \"Self\" mode instruction: the source AND destination is [E] (and also [A] if A is non-zero).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMOVNS = function(op, ac)\n{\n    var dst = PDP10.doNEG.call(this, this.readWord(this.regEA));\n    this.writeWord(this.regEA, dst);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opMOVM(0o214000): Move Magnitude\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-12:\n *\n *      Take the magnitude of the word contained in the source specified by M and move it to the\n *      specified destination.  If the source word is fixed point -2^35 (400000 000000) set the\n *      Overflow and Carry 1 flags.\n *\n *      (Negating the equivalent floating point -1 * 2^27 sets the flags, but this is not a normalized\n *      number).\n *\n *      The source is unaffected, the original contents of the destination are lost.\n *\n * NOTE: This is a \"Basic\" mode instruction: the source is [E] and the destination is [A] (opposite of \"Memory\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMOVM = function(op, ac)\n{\n    this.writeWord(ac, PDP10.doABS.call(this, this.readWord(this.regEA)));\n};\n\n/**\n * opMOVMI(0o215000): Move Magnitude Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-12:\n *\n *      Take the magnitude of the word contained in the source specified by M and move it to the\n *      specified destination.  If the source word is fixed point -2^35 (400000 000000) set the\n *      Overflow and Carry 1 flags.\n *\n *      (Negating the equivalent floating point -1 * 2^27 sets the flags, but this is not a normalized\n *      number).\n *\n *      The source is unaffected, the original contents of the destination are lost.\n *\n *      SIDEBAR: The word 0,E is equivalent to its magnitude, so MOVMI is equivalent to MOVEI.\n *\n * NOTE: This is an \"Immediate\" mode instruction: the source is the word 0,E and the destination is [A].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMOVMI = function(op, ac)\n{\n    this.writeWord(ac, this.regEA);    // src is an 18-bit immediate value, so there's no need to call doABS()\n};\n\n/**\n * opMOVMM(0o216000): Move Magnitude to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-12:\n *\n *      Take the magnitude of the word contained in the source specified by M and move it to the\n *      specified destination.  If the source word is fixed point -2^35 (400000 000000) set the\n *      Overflow and Carry 1 flags.\n *\n *      (Negating the equivalent floating point -1 * 2^27 sets the flags, but this is not a normalized\n *      number).\n *\n *      The source is unaffected, the original contents of the destination are lost.\n *\n * NOTE: This is a \"Memory\" mode instruction: the source is [A] and the destination is [E] (opposite of \"Basic\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMOVMM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.doABS.call(this, this.readWord(ac)));\n};\n\n/**\n * opMOVMS(0o217000): Move Magnitude to Self\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-12:\n *\n *      Take the magnitude of the word contained in the source specified by M and move it to the\n *      specified destination.  If the source word is fixed point -2^35 (400000 000000) set the\n *      Overflow and Carry 1 flags.\n *\n *      (Negating the equivalent floating point -1 * 2^27 sets the flags, but this is not a normalized\n *      number).\n *\n *      The source is unaffected, the original contents of the destination are lost.\n *\n * NOTE: This is a \"Self\" mode instruction: the source AND destination is [E] (and also [A] if A is non-zero).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMOVMS = function(op, ac)\n{\n    var dst = PDP10.doABS.call(this, this.readWord(this.regEA));\n    this.writeWord(this.regEA, dst);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opIMUL(0o220000): Integer Multiply\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-28:\n *\n *      Multiply AC by the operand specified by M, and place the sign and the 35 low order magnitude bits of the\n *      product in the specified destination.  Set Overflow if the product is >= 2^35 or < -2^35 (ie if the high order\n *      word of the double length product is not null); the high order word is lost.\n *\n * NOTE: This is a \"Basic\" mode instruction: the source is [E] and the destination is [A] (opposite of \"Memory\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opIMUL = function(op, ac)\n{\n    this.writeWord(ac, PDP10.doMUL.call(this, this.readWord(ac), this.readWord(this.regEA), true));\n};\n\n/**\n * opIMULI(0o221000): Integer Multiply Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-28:\n *\n *      Multiply AC by the operand specified by M, and place the sign and the 35 low order magnitude bits of the\n *      product in the specified destination.  Set Overflow if the product is >= 2^35 or < -2^35 (ie if the high order\n *      word of the double length product is not null); the high order word is lost.\n *\n * NOTE: This is an \"Immediate\" mode instruction: the source is the word 0,E and the destination is [A].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opIMULI = function(op, ac)\n{\n    this.writeWord(ac, PDP10.doMUL.call(this, this.readWord(ac), this.regEA, true));\n};\n\n/**\n * opIMULM(0o222000): Integer Multiply to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-28:\n *\n *      Multiply AC by the operand specified by M, and place the sign and the 35 low order magnitude bits of the\n *      product in the specified destination.  Set Overflow if the product is >= 2^35 or < -2^35 (ie if the high order\n *      word of the double length product is not null); the high order word is lost.\n *\n * NOTE: This is a \"Memory\" mode instruction: the source is [E] and the destination is [E] (opposite of \"Basic\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opIMULM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.doMUL.call(this, this.readWord(ac), this.readWord(this.regEA), true));\n};\n\n/**\n * opIMULB(0o223000): Integer Multiply to Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-28:\n *\n *      Multiply AC by the operand specified by M, and place the sign and the 35 low order magnitude bits of the\n *      product in the specified destination.  Set Overflow if the product is >= 2^35 or < -2^35 (ie if the high order\n *      word of the double length product is not null); the high order word is lost.\n *\n * NOTE: This is a \"Both\" mode instruction: the source is [E] and the destination is [E] and [A].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opIMULB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, PDP10.doMUL.call(this, this.readWord(ac), this.readWord(this.regEA), true)));\n};\n\n/**\n * opMUL(0o224000): Multiply\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-28:\n *\n *      Multiply AC by the operand specified by M, and place the high order word of the double length result\n *      in the specified destination.  If M specifies AC as a destination, place the low order word in accumulator\n *      A+1.  If both operands are -2^35 set Overflow; the double length result stored is -2^70.\n *\n * NOTE: This is a \"Basic\" mode instruction: the source is [E] and the destination is [A],[A+1] (opposite of \"Memory\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMUL = function(op, ac)\n{\n    this.writeWord(ac, PDP10.doMUL.call(this, this.readWord(ac), this.readWord(this.regEA)));\n    this.writeWord((ac + 1) & 0o17, this.regEX);\n};\n\n/**\n * opMULI(0o225000): Multiply Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-28:\n *\n *      Multiply AC by the operand specified by M, and place the high order word of the double length result\n *      in the specified destination.  If M specifies AC as a destination, place the low order word in accumulator\n *      A+1.  If both operands are -2^35 set Overflow; the double length result stored is -2^70.\n *\n * NOTE: This is an \"Immediate\" mode instruction: the source is the word 0,E and the destination is [A],[A+1].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMULI = function(op, ac)\n{\n    this.writeWord(ac, PDP10.doMUL.call(this, this.readWord(ac), this.regEA));\n    this.writeWord((ac + 1) & 0o17, this.regEX);\n};\n\n/**\n * opMULM(0o226000): Multiply to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-28:\n *\n *      Multiply AC by the operand specified by M, and place the high order word of the double length result\n *      in the specified destination.  If M specifies AC as a destination, place the low order word in accumulator\n *      A+1.  If both operands are -2^35 set Overflow; the double length result stored is -2^70.\n *\n * NOTE: This is a \"Memory\" mode instruction: the source is [E] and the destination is [E] (opposite of \"Basic\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMULM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.doMUL.call(this, this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opMULB(0o227000): Multiply to Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-28:\n *\n *      Multiply AC by the operand specified by M, and place the high order word of the double length result\n *      in the specified destination.  If M specifies AC as a destination, place the low order word in accumulator\n *      A+1.  If both operands are -2^35 set Overflow; the double length result stored is -2^70.\n *\n * NOTE: This is a \"Both\" mode instruction: the source is [E] and the destination is [E] and [A],[A+1].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opMULB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, PDP10.doMUL.call(this, this.readWord(ac), this.readWord(this.regEA))));\n    this.writeWord((ac + 1) & 0o17, this.regEX);\n};\n\n/**\n * opIDIV(0o230000): Integer Divide\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-29:\n *\n *      If the operand specified by M is zero, set Overflow and No Divide, and go immediately to the next instruction\n *      without affecting the original AC or memory operand in any way.  Otherwise divide AC by the specified operand,\n *      calculating a quotient of 35 magnitude bits including leading zeros.  Place the unrounded quotient in the\n *      specified destination.  If M specifies AC as the destination, place the remainder, with the same sign as the\n *      dividend, in accumulator A+1.\n *\n * NOTE: This is a \"Basic\" mode instruction: the source is [E] and the destination is [A],[A+1] (opposite of \"Memory\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opIDIV = function(op, ac)\n{\n    var dst = PDP10.doDIV.call(this, this.readWord(this.regEA), this.readWord(ac));\n    if (dst < 0) return;\n    this.writeWord(ac, dst);\n    this.writeWord((ac + 1) & 0o17, this.regEX);\n};\n\n/**\n * opIDIVI(0o231000): Integer Divide Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-29:\n *\n *      If the operand specified by M is zero, set Overflow and No Divide, and go immediately to the next instruction\n *      without affecting the original AC or memory operand in any way.  Otherwise divide AC by the specified operand,\n *      calculating a quotient of 35 magnitude bits including leading zeros.  Place the unrounded quotient in the\n *      specified destination.  If M specifies AC as the destination, place the remainder, with the same sign as the\n *      dividend, in accumulator A+1.\n *\n * NOTE: This is an \"Immediate\" mode instruction: the source is the word 0,E and the destination is [A],[A+1].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opIDIVI = function(op, ac)\n{\n    var dst = PDP10.doDIV.call(this, this.regEA, this.readWord(ac));\n    if (dst < 0) return;\n    this.writeWord(ac, dst);\n    this.writeWord((ac + 1) & 0o17, this.regEX);\n};\n\n/**\n * opIDIVM(0o232000): Integer Divide to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-29:\n *\n *      If the operand specified by M is zero, set Overflow and No Divide, and go immediately to the next instruction\n *      without affecting the original AC or memory operand in any way.  Otherwise divide AC by the specified operand,\n *      calculating a quotient of 35 magnitude bits including leading zeros.  Place the unrounded quotient in the\n *      specified destination.  If M specifies AC as the destination, place the remainder, with the same sign as the\n *      dividend, in accumulator A+1.\n *\n * NOTE: This is a \"Memory\" mode instruction: the source is [E] and the destination is [E] (opposite of \"Basic\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opIDIVM = function(op, ac)\n{\n    var dst = PDP10.doDIV.call(this, this.readWord(this.regEA), this.readWord(ac));\n    if (dst < 0) return;\n    this.writeWord(this.regEA, dst);\n};\n\n/**\n * opIDIVB(0o233000): Integer Divide to Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-29:\n *\n *      If the operand specified by M is zero, set Overflow and No Divide, and go immediately to the next instruction\n *      without affecting the original AC or memory operand in any way.  Otherwise divide AC by the specified operand,\n *      calculating a quotient of 35 magnitude bits including leading zeros.  Place the unrounded quotient in the\n *      specified destination.  If M specifies AC as the destination, place the remainder, with the same sign as the\n *      dividend, in accumulator A+1.\n *\n * NOTE: This is a \"Both\" mode instruction: the source is [E] and the destination is [E] and [A],[A+1].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opIDIVB = function(op, ac)\n{\n    var dst = PDP10.doDIV.call(this, this.readWord(this.regEA), this.readWord(ac));\n    if (dst < 0) return;\n    this.writeWord(this.regEA, this.writeWord(ac, dst));\n    this.writeWord((ac + 1) & 0o17, this.regEX);\n};\n\n/**\n * opDIV(0o234000): Divide\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-29:\n *\n *      If the magnitude of the number in AC is greater than or equal to that of the operand specified by M,\n *      set Overflow and No Divide, and go immediately to the next instruction without affecting the original AC\n *      or memory operand in any way.  Otherwise divide the double length number contained in accumulators A and A+1\n *      by the specified operand, calculating a quotient of 35 magnitude bits including leading zeros.  Place the\n *      unrounded quotient in the specified destination.  If M specifies AC as a destination, place the remainder,\n *      with the same sign as the dividend, in accumulator A+1.\n *\n * NOTE: This is a \"Basic\" mode instruction: the source is [E] and the destination is [A],[A+1] (opposite of \"Memory\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opDIV = function(op, ac)\n{\n    var ext = this.readWord(ac);\n    var dst = this.readWord((ac + 1) & 0o17);\n    dst = PDP10.doDIV.call(this, this.readWord(this.regEA), dst, ext);\n    if (dst < 0) return;\n    this.writeWord(ac, dst);\n    this.writeWord((ac + 1) & 0o17, this.regEX);\n};\n\n/**\n * opDIVI(0o235000): Divide Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-29:\n *\n *      If the magnitude of the number in AC is greater than or equal to that of the operand specified by M,\n *      set Overflow and No Divide, and go immediately to the next instruction without affecting the original AC\n *      or memory operand in any way.  Otherwise divide the double length number contained in accumulators A and A+1\n *      by the specified operand, calculating a quotient of 35 magnitude bits including leading zeros.  Place the\n *      unrounded quotient in the specified destination.  If M specifies AC as a destination, place the remainder,\n *      with the same sign as the dividend, in accumulator A+1.\n *\n * NOTE: This is an \"Immediate\" mode instruction: the source is the word 0,E and the destination is [A],[A+1].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opDIVI = function(op, ac)\n{\n    var ext = this.readWord(ac);\n    var dst = this.readWord((ac + 1) & 0o17);\n    dst = PDP10.doDIV.call(this, this.regEA, dst, ext);\n    if (dst < 0) return;\n    this.writeWord(ac, dst);\n    this.writeWord((ac + 1) & 0o17, this.regEX);\n};\n\n/**\n * opDIVM(0o236000): Divide to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-29:\n *\n *      If the magnitude of the number in AC is greater than or equal to that of the operand specified by M,\n *      set Overflow and No Divide, and go immediately to the next instruction without affecting the original AC\n *      or memory operand in any way.  Otherwise divide the double length number contained in accumulators A and A+1\n *      by the specified operand, calculating a quotient of 35 magnitude bits including leading zeros.  Place the\n *      unrounded quotient in the specified destination.  If M specifies AC as a destination, place the remainder,\n *      with the same sign as the dividend, in accumulator A+1.\n *\n * NOTE: This is a \"Memory\" mode instruction: the source is [E] and the destination is [E] (opposite of \"Basic\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opDIVM = function(op, ac)\n{\n    var ext = this.readWord(ac);\n    var dst = this.readWord((ac + 1) & 0o17);\n    dst = PDP10.doDIV.call(this, this.readWord(this.regEA), dst, ext);\n    if (dst < 0) return;\n    this.writeWord(this.regEA, dst);\n};\n\n/**\n * opDIVB(0o237000): Divide to Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-29:\n *\n *      If the magnitude of the number in AC is greater than or equal to that of the operand specified by M,\n *      set Overflow and No Divide, and go immediately to the next instruction without affecting the original AC\n *      or memory operand in any way.  Otherwise divide the double length number contained in accumulators A and A+1\n *      by the specified operand, calculating a quotient of 35 magnitude bits including leading zeros.  Place the\n *      unrounded quotient in the specified destination.  If M specifies AC as a destination, place the remainder,\n *      with the same sign as the dividend, in accumulator A+1.\n *\n * NOTE: This is a \"Both\" mode instruction: the source is [E] and the destination is [E] and [A],[A+1].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opDIVB = function(op, ac)\n{\n    var ext = this.readWord(ac);\n    var dst = this.readWord((ac + 1) & 0o17);\n    dst = PDP10.doDIV.call(this, this.readWord(this.regEA), dst, ext);\n    if (dst < 0) return;\n    this.writeWord(ac, this.writeWord(this.regEA, dst));\n    this.writeWord((ac + 1) & 0o17, this.regEX);\n};\n\n/**\n * opASH(0o240000): Arithmetic Shift\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-31:\n *\n *      Arithmetic Shifting\n *\n *      These two instructions [ASH, ASHC] produce an arithmetic shift right or left of the number in AC\n *      or the double length number in accumulators A and A+1.  Shifting is the movement of the contents\n *      of a register bit-to-bit.  The operation discussed here is similar to logical shifting [see §2.4\n *      and the illustration on page 2-24], but in an arithmetic shift only the magnitude part is\n *      shifted - the sign is unaffected.  In a double length number the 70-bit string made up of the\n *      magnitude parts of the two words is shifted, but the sign of the low order word is made equal\n *      to the sign of the high order word.\n *\n *      Null bits are brought in at the end being vacated: a left shift brings in 0s at the right,\n *      whereas a right shift brings in the equivalent of the sign bit at the left.  In either case,\n *      information shifted out at the other end is lost.  A single shift left is equivalent to multiplying\n *      the number by 2 (provided no bit of significance is shifted out); a shift right divides the number\n *      by 2.\n *\n *      The number of places shifted is specified by the result of the effective address calculation\n *      taken as a signed number (in twos complement notation) modulo 2^8 in magnitude.  In other words\n *      the effective shift E is the number composed of bit 18 (which is the sign) and bits 28-35 of the\n *      calculation result.  Hence the programmer may specify the shift directly in the instruction\n *      (perhaps indexed) or give an indirect address to be used in calculating the shift.  A positive E\n *      produces motion to the left, a negative E to the right; E is thus the power of 2 by which the\n *      number is multiplied.  Maximum movement is 255 places.\n *\n *      ASH: Arithmetic Shift\n *\n *      Shift AC arithmetically the number of places specified by E.  Do not shift bit 0.  If E is positive,\n *      shift left bringing 0s into bit 35; data shifted out of bit 1 is lost; set Overflow if any bit of\n *      significance is lost (a 1 in a positive number, a 0 in a negative one).  If E is negative, shift right\n *      bringing 0s into bit 1 if AC is positive, 1s if negative; data shifted out of bit 35 is lost.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opASH = function(op, ac)\n{\n    /*\n     * Convert the unsigned 18-bit value in regEA to a signed 8-bit value (-256 to 255).\n     */\n    var s = (((this.regEA & PDP10.HINT_LIMIT) << 14) >> 23) | (this.regEA & 0xff);\n    if (s) {\n        var v , bits;\n        var w = this.readWord(ac);\n        if (s > 0) {\n            bits = PDP10.INT_MASK;\n            v = (w < PDP10.INT_LIMIT)? 0 : PDP10.INT_LIMIT;\n            if (s < 35) {\n                v += (w * Math.pow(2, s)) % PDP10.INT_LIMIT;\n                /*\n                 * bits must be set to the mask of all magnitude bits shifted out of\n                 * the original word.  Using 8-bit signed words as an example, this table shows\n                 * the bits values that would correspond to shifting 1-7 bits left:\n                 *\n                 *    shifts    bits            value       calculation\n                 *    ------    -----------     ------      -----------\n                 *      1       0b01000000      128-64      128-Math.pow(2, 7-1)\n                 *      2       0b01100000      128-32      128-Math.pow(2, 7-2)\n                 *      3       0b01110000      128-16      128-Math.pow(2, 7-3)\n                 *     ...\n                 *      7       0b01111111      128-1       128-Math.pow(2, 7-7)\n                 */\n                bits = PDP10.INT_LIMIT - Math.pow(2, 35 - s);\n            }\n            if (w < PDP10.INT_LIMIT) {\n                /*\n                 * Since w was positive, overflow occurs ONLY if any of the bits we shifted out were 1s.\n                 * If all those bits in the original value (w) were 0s, then adding bits to it could NOT\n                 * produce a value > INT_MASK.\n                 */\n                if (w + bits > PDP10.INT_MASK) {\n                    this.regPS |= PDP10.PSFLAG.AROV;\n                }\n            } else {\n                /*\n                 * Since w was negative, overflow occurs ONLY if any of the bits we shifted out were 0s.\n                 * If all those bits in the original value (w) were 1s, subtracting bits from it could NOT\n                 * produce a value <= INT_MASK.\n                 */\n                if (w - bits < PDP10.INT_LIMIT) {\n                    this.regPS |= PDP10.PSFLAG.AROV;\n                }\n            }\n        } else {\n            if (s <= -35) {\n                v = (w < PDP10.INT_LIMIT)? 0 : PDP10.INT_MASK;\n            } else {\n                v = Math.trunc(w / Math.pow(2, -s));\n                if (w > PDP10.INT_MASK) {\n                    bits = PDP10.WORD_LIMIT - Math.pow(2, 36 + s);\n                    v += bits;\n                }\n            }\n        }\n\n        this.writeWord(ac, v);\n    }\n};\n\n/**\n * opROT(0o241000): Rotate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-25:\n *\n *      Rotate AC the number of places specified by E.  If E is positive, rotate left; bit 0 is rotated\n *      into bit 35.  If E is negative, rotate right; bit 35 is rotated into bit O.\n *\n *      The number of places moved is specified by the result of the effective address calculation taken as\n *      a signed number (in twos complement notation) modulo 2^8 in magnitude.  In other words the effective\n *      shift E is the number composed of bit 18 (which is the sign) and bits 28-35 of the calculation result.\n *      Hence the programmer may specify the shift directly in the instruction (perhaps indexed) or give an\n *      indirect address to be used in calculating the shift.  A positive E produces motion to the left,\n *      a negative E to the right; maximum movement is 255 places.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opROT = function(op, ac)\n{\n    /*\n     * Convert the unsigned 18-bit value in regEA to a signed 8-bit value, modulo 36 (+/-35).\n     */\n    var s = ((((this.regEA & PDP10.HINT_LIMIT) << 14) >> 23) | (this.regEA & 0xff)) % 36;\n    if (s) {\n        var w = this.readWord(ac);\n        /*\n         * Note that a right rotation (s < 0) of s bits is equivalent to a left rotation (s > 0) of 36 + s bits.\n         */\n        if (s < 0) s = 36 + s;\n        w = ((w * Math.pow(2, s)) % PDP10.WORD_LIMIT) + Math.trunc(w / Math.pow(2, 36 - s));\n        this.writeWord(ac, w);\n    }\n};\n\n/**\n * opLSH(0o242000): Logical Shift\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-24:\n *\n *      Shift and Rotate\n *\n *      The remaining logical instructions shift or rotate right or left the contents of AC or the contents\n *      of two accumulators, A and A+1 (mod 20 [base 8]), concatenated into a 72-bit register with A on the\n *      left.  The illustration below shows the movement of information these instructions produce in the\n *      accumulators.  In a (logical) shift the contents of a register are moved bit-to-bit with 0s brought\n *      in at the end being vacated; information shifted out at the other end is lost.  [For a discussion of\n *      arithmetic shifting see § 2.5.]  In rotation the contents are moved cyclically such that information\n *      rotated out at one end is put in at the other.\n *\n *      The number of places moved is specified by the result of the effective address calculation taken as a\n *      signed number (in twos complement notation) modulo 2^8 in magnitude.  In other words the effective shift\n *      E is the number composed of bit 18 (which is the sign) and bits 28-35 of the calculation result.  Hence\n *      the programmer may specify the shift directly in the instruction (perhaps indexed) or give an indirect\n *      address to be used in calculating the shift.  A positive E produces motion to the left, a negative E to\n *      the right; maximum movement is 255 places.\n *\n *      LSH: Logical Shift\n *\n *      Shift AC the number of places specified by E.  If E is positive, shift left bringing 0s into bit 35;\n *      data shifted out of bit 0 is lost.  If E is negative, shift right bringing 0s into bit 0; data shifted\n *      out of bit 35 is lost.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opLSH = function(op, ac)\n{\n    /*\n     * Convert the unsigned 18-bit value in regEA to a signed 8-bit value (-256 to 255).\n     */\n    var s = (((this.regEA & PDP10.HINT_LIMIT) << 14) >> 23) | (this.regEA & 0xff);\n    if (s) {\n        var w = this.readWord(ac);\n        if (s > 0) {\n            if (s >= 36) {\n                w = 0;\n            } else {\n                w = (w * Math.pow(2, s)) % PDP10.WORD_LIMIT;\n            }\n        } else {\n            if (s <= -36) {\n                w = 0;\n            } else {\n                w = Math.trunc(w / Math.pow(2, -s));\n            }\n        }\n        this.writeWord(ac, w);\n    }\n};\n\n/**\n * opJFFO(0o243000): Jump if Find First One\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-56:\n *\n *      If AC contains zero, clear AC A+1 and go on to the next instruction in sequence.\n *\n *      If AC is not zero, count the number of leading 0s in it (0s to the left of the leftmost 1),\n *      and place the count in AC A+1.  Take the next instruction from location E and continue sequential\n *      operation from there.  In either case AC is unaffected, the original contents of AC A +1 are lost.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opJFFO = function(op, ac)\n{\n    var dst = 0;\n    var src = this.readWord(ac);\n    if (src) {\n        while (src < PDP10.INT_LIMIT) {\n            dst++;\n            src *= 2;\n        }\n        this.setPC(this.regEA);\n    }\n    this.writeWord((ac + 1) & 0o17, dst);\n};\n\n/**\n * opASHC(0o244000): Arithmetic Shift\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-32:\n *\n *      Concatenate the magnitude portions of accumulators A and A+1 with A on the left, and shift\n *      the 70-bit combination in bits 1-35 and 37-71 the number of places specified by E.  Do not shift\n *      AC bit 0, but make bit 0 of AC A+1 equal to it if at least one shift occurs (ie if E is nonzero).\n *\n *      If E is positive, shift left bringing 0s into bit 71 (bit 35 of AC A+1); bit 37 (bit 1 of AC A+1)\n *      is shifted into bit 35; data shifted out of bit 1 is lost; set Overflow if any bit of significance\n *      is lost (a 1 in a positive number, a 0 in a negative one).  If E is negative, shift right bringing 0s\n *      into bit 1 if AC is positive, 1s if negative; bit 35 is shifted into bit 37; data shifted out of\n *      bit 71 is lost.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opASHC = function(op, ac)\n{\n    /*\n     * Convert the unsigned 18-bit value in regEA to a signed 8-bit value (-256 to 255).\n     */\n    var s = (((this.regEA & PDP10.HINT_LIMIT) << 14) >> 23) | (this.regEA & 0xff);\n    if (s) {\n        var bits;\n        var wLeft = this.readWord(ac);\n        var wRight = this.readWord((ac + 1) & 0o17);\n        if (s > 0) {\n            /*\n             * Handle all the left shift cases below, which don't need to worry about sign-extension\n             * but DO need to worry about overflow.\n             */\n            var wLeftOrig = wLeft;\n            if (s >= 36) {\n                /*\n                 * Since all wLeft bits are being shifted out, any positive value other than zero OR any negative value\n                 * other than WORD_MASK indicates an overflow.\n                 */\n                if (wLeft > 0 && wLeft < PDP10.INT_LIMIT || wLeft > PDP10.INT_MASK && wLeft < PDP10.WORD_MASK) {\n                    this.regPS |= PDP10.PSFLAG.AROV;\n                }\n                if (s >= 71) {\n                    /*\n                     * Since all wRight bits are being shifted out, any positive value other than zero OR any negative value\n                     * other than WORD_MASK indicates an overflow.\n                     */\n                    if (wRight > 0 && wRight < PDP10.INT_LIMIT || wRight > PDP10.INT_MASK && wRight < PDP10.WORD_MASK) {\n                        this.regPS |= PDP10.PSFLAG.AROV;\n                    }\n                    wLeft = 0;\n                } else {\n                    /*\n                     * Left shift 36-70 bits.\n                     */\n                    wLeft = (wRight * Math.pow(2, s - 35)) % PDP10.INT_LIMIT;\n                    bits = PDP10.INT_LIMIT - Math.pow(2, 70 - s);\n                    if (wLeftOrig <= PDP10.INT_MASK) {\n                        /*\n                         * Since wLeft was positive, overflow occurs ONLY if any of the bits we shifted out were 1s.\n                         * If all those bits in the original value were 0s, then adding bits to it could NOT produce\n                         * a value > INT_MASK.\n                         */\n                        if (wRight + bits > PDP10.INT_MASK) {\n                            this.regPS |= PDP10.PSFLAG.AROV;\n                        }\n                    } else {\n                        /*\n                         * Since wLeft was negative, overflow occurs ONLY if any of the bits we shifted out were 0s.\n                         * If all those bits in the original value were 1s, subtracting bits from it could NOT produce\n                         * a value <= INT_MASK.\n                         */\n                        if (wRight - bits <= PDP10.INT_MASK) {\n                            this.regPS |= PDP10.PSFLAG.AROV;\n                        }\n                    }\n                }\n                wRight = 0;\n                if (wLeftOrig > PDP10.INT_MASK) {\n                    wLeft += PDP10.INT_LIMIT;\n                    wRight += PDP10.INT_LIMIT;\n                }\n            } else {\n                /*\n                 * Left shift 1-35 bits.\n                 */\n                wLeft = ((wLeft * Math.pow(2, s)) % PDP10.INT_LIMIT) + Math.trunc((wRight % PDP10.INT_LIMIT) / Math.pow(2, 35 - s));\n                wRight = (wRight * Math.pow(2, s)) % PDP10.INT_LIMIT;\n                /*\n                 * Determine overflow and update the sign bits.\n                 */\n                bits = PDP10.INT_LIMIT - Math.pow(2, 35 - s);\n                if (wLeftOrig <= PDP10.INT_MASK) {\n                    /*\n                     * Since wLeft was positive, overflow occurs ONLY if any of the bits we shifted out were 1s.\n                     * If all those bits in the original value were 0s, then adding bits to it could NOT produce\n                     * a value > INT_MASK.\n                     */\n                    if (wLeftOrig + bits > PDP10.INT_MASK) {\n                        this.regPS |= PDP10.PSFLAG.AROV;\n                    }\n                } else {\n                    /*\n                     * Since wLeft was negative, overflow occurs ONLY if any of the bits we shifted out were 0s.\n                     * If all those bits in the original value were 1s, subtracting bits from it could NOT produce\n                     * a value <= INT_MASK.\n                     */\n                    if (wLeftOrig - bits <= PDP10.INT_MASK) {\n                        this.regPS |= PDP10.PSFLAG.AROV;\n                    }\n                    /*\n                     * Last but not least, update the sign bits of wLeft and wRight to indicate negative values.\n                     */\n                    wLeft += PDP10.INT_LIMIT;\n                    wRight += PDP10.INT_LIMIT;\n                }\n            }\n        } else {\n            /*\n             * Handle all the right shift cases below, which don't need to worry about overflow but DO\n             * need to worry about sign-extension.\n             */\n            if (s <= -36) {\n                if (s <= -72) {\n                    wRight = (wLeft > PDP10.INT_MASK? PDP10.WORD_MASK : 0);\n                } else {\n                    wRight = Math.trunc((wLeft % PDP10.INT_LIMIT) / Math.pow(2, -s - 35));\n                }\n                if (wLeft <= PDP10.INT_MASK) {\n                    wLeft = 0;\n                } else {\n                    wLeft = PDP10.WORD_MASK;\n                    wRight += PDP10.INT_LIMIT;\n                }\n            } else {\n                /*\n                 * For this right shift of 1-35 bits, determine the value of bits shifted in from the left.\n                 */\n                bits = (wLeft > PDP10.INT_MASK? PDP10.WORD_LIMIT - Math.pow(2, 36 + s) : 0);\n                /*\n                 * The bits that we add to wRight from wLeft must be shifted right one additional bit, because\n                 * they must \"skip over\" the sign bit of wRight.  This means we must zero the sign bit of wRight,\n                 * which can be done by performing a \"mod\" with INT_LIMIT.\n                 */\n                wRight = Math.trunc((wRight % PDP10.INT_LIMIT) / Math.pow(2, -s)) + (((wLeft % PDP10.INT_LIMIT) * Math.pow(2, 35 + s)) % PDP10.INT_LIMIT);\n                wLeft = Math.trunc(wLeft / Math.pow(2, -s)) + bits;\n                /*\n                 * Last but not least, we must set the sign of wRight to the sign of wLeft.\n                 */\n                if (wLeft > PDP10.INT_MASK) wRight += PDP10.INT_LIMIT;\n            }\n        }\n        this.writeWord(ac, wLeft);\n        this.writeWord((ac + 1) & 0o17, wRight);\n    }\n};\n\n/**\n * opROTC(0o245000): Rotate Combined\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-26:\n *\n *      Concatenate accumulators A and A+1 with A on the left, and rotate the 72-bit combination the\n *      number of places specified by E.  If E is positive, rotate left; bit 0 is rotated into bit 71\n *      (bit 35 of AC A+1) and bit 36 into bit 35.  If E is negative, rotate right; bit 35 is rotated\n *      into bit 36 and bit 71 into bit 0.\n *\n *      The number of places moved is specified by the result of the effective address calculation taken as\n *      a signed number (in twos complement notation) modulo 2^8 in magnitude.  In other words the effective\n *      shift E is the number composed of bit 18 (which is the sign) and bits 28-35 of the calculation result.\n *      Hence the programmer may specify the shift directly in the instruction (perhaps indexed) or give an\n *      indirect address to be used in calculating the shift.  A positive E produces motion to the left,\n *      a negative E to the right; maximum movement is 255 places.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opROTC = function(op, ac)\n{\n    /*\n     * Convert the unsigned 18-bit value in regEA to a signed 8-bit value, modulo 72 (+/-71).\n     */\n    var s = ((((this.regEA & PDP10.HINT_LIMIT) << 14) >> 23) | (this.regEA & 0xff)) % 72;\n    if (s) {\n        var wLeft = this.readWord(ac);\n        var wRight = this.readWord((ac + 1) & 0o17);\n        var wLeftOrig = wLeft;\n        /*\n         * Note that a right rotation (s < 0) of s bits is equivalent to a left rotation (s > 0) of 72 + s bits.\n         */\n        if (s < 0) s = 72 + s;\n        if (s < 36) {\n            wLeft = ((wLeft * Math.pow(2, s)) % PDP10.WORD_LIMIT) + Math.trunc(wRight / Math.pow(2, 36 - s));\n            wRight = ((wRight * Math.pow(2, s)) % PDP10.WORD_LIMIT) + Math.trunc(wLeftOrig / Math.pow(2, 36 - s));\n        } else {\n            wLeft = ((wRight * Math.pow(2, s - 36)) % PDP10.WORD_LIMIT) + Math.trunc(wLeft / Math.pow(2, 72 - s));\n            wRight = ((wLeftOrig * Math.pow(2, s - 36)) % PDP10.WORD_LIMIT) + Math.trunc(wRight / Math.pow(2, 72 - s));\n        }\n        this.writeWord(ac, wLeft);\n        this.writeWord((ac + 1) & 0o17, wRight);\n    }\n};\n\n/**\n * opLSHC(0o246000): Logical Shift Combined\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-25:\n *\n *      Concatenate accumulators A and A+1 with A on the left, and shift the 72-bit combination the number\n *      of places specified by E.  If E is positive, shift left bringing 0s into bit 71 (bit 35 of AC A+1);\n *      bit 36 is shifted into bit 35; data shifted out of bit 0 is lost.  If E is negative, shift right\n *      bringing 0s into bit 0; bit 35 is shifted into bit 36; data shifted out of bit 71 is lost.\n *\n *      The number of places moved is specified by the result of the effective address calculation taken as\n *      a signed number (in twos complement notation) modulo 2^8 in magnitude.  In other words the effective\n *      shift E is the number composed of bit 18 (which is the sign) and bits 28-35 of the calculation result.\n *      Hence the programmer may specify the shift directly in the instruction (perhaps indexed) or give an\n *      indirect address to be used in calculating the shift.  A positive E produces motion to the left,\n *      a negative E to the right; maximum movement is 255 places.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opLSHC = function(op, ac)\n{\n    /*\n     * Convert the unsigned 18-bit value in regEA to a signed 8-bit value (-256 to 255).\n     */\n    var s = (((this.regEA & PDP10.HINT_LIMIT) << 14) >> 23) | (this.regEA & 0xff);\n    if (s) {\n        var wLeft = this.readWord(ac);\n        var wRight = this.readWord((ac + 1) & 0o17);\n        if (s > 0) {\n            if (s >= 36) {\n                if (s >= 72) {\n                    wLeft = 0;\n                } else {\n                    wLeft = (wRight * Math.pow(2, s - 36)) % PDP10.WORD_LIMIT;\n                }\n                wRight = 0;\n            } else {\n                wLeft = ((wLeft * Math.pow(2, s)) % PDP10.WORD_LIMIT) + Math.trunc(wRight / Math.pow(2, 36 - s));\n                wRight = (wRight * Math.pow(2, s)) % PDP10.WORD_LIMIT;\n            }\n        } else {\n            if (s <= -36) {\n                if (s <= -72) {\n                    wRight = 0;\n                } else {\n                    wRight = Math.trunc(wLeft / Math.pow(2, -s - 36));\n                }\n                wLeft = 0;\n            } else {\n                wRight = Math.trunc(wRight / Math.pow(2, -s)) + ((wLeft * Math.pow(2, 36 + s)) % PDP10.WORD_LIMIT);\n                wLeft = Math.trunc(wLeft / Math.pow(2, -s));\n            }\n        }\n        this.writeWord(ac, wLeft);\n        this.writeWord((ac + 1) & 0o17, wRight);\n    }\n};\n\n/**\n * opEXCH(0o250000): Exchange\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-9:\n *\n *      Move the contents of location E to AC and move AC to location E.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opEXCH = function(op, ac)\n{\n    var tmp = this.readWord(ac);\n    this.writeWord(ac, this.readWord(this.regEA));\n    this.writeWord(this.regEA, tmp);\n};\n\n/**\n * opBLT(0o251000): Block Transfer\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-10:\n *\n *      Beginning at the location addressed by AC left, move words to another area of memory beginning at the\n *      location addressed by AC right.  Continue until a word is moved to location E.  The total number of words\n *      in the block is thus E - AC(right) + 1.\n *\n *      CAUTION: Priority interrupts are allowed during the execution of this instruction, following the processing\n *      of each word.  If an interrupt occurs, the BLT stores the source and destination addresses for the next word\n *      in AC, so when the processor restarts upon the return to the interrupted program, it actually resumes at\n *      the correct point within the BLT.  Therefore, unless the interrupt system is inactive, A and X must not address\n *      the same register as this would produce a different effective address calculation upon resumption should an\n *      interrupt occur; and the program must not attempt to load an accumulator addressed either by A or X unless it\n *      is the final location being loaded.  Furthermore, the program cannot assume that AC is the same after the BLT\n *      as it was before.\n *\n * TODO: Determine the logic behind SIMH's treatment of the AC register when it's part of the memory being transferred.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opBLT = function(op, ac)\n{\n    var fDone = false, fUpdate = false;\n    var addrDst = this.readWord(ac);\n    var addrSrc = (addrDst / PDP10.HALF_SHIFT)|0;\n    addrDst &= PDP10.HALF_MASK;\n    while (!fDone) {\n        this.writeWord(addrDst, this.readWord(addrSrc));\n        /*\n         * NOTE: The PDP-10 specs (especially the KA10 Reference Manual) are not very clear on the exit criteria:\n         * the transfer stops once AC left >= E, not AC left == E.  They are also not very clear on whether the addresses\n         * are incremented before or after the exit criteria is checked; however, the KA10 \"DAKAM\" diagnostic seems\n         * pretty adamant that, at least after a one-word BLT operation, the addresses should NOT be incremented.\n         */\n        if (!(fDone = (addrDst >= this.regEA))) {\n            addrSrc = (addrSrc + 1) & PDP10.HALF_MASK;\n            addrDst = (addrDst + 1) & PDP10.HALF_MASK;\n            fUpdate = true;\n        }\n        if (fDone || !this.isRunning()) {\n            /*\n             * If the CPU isn't currently running, the CPU is presumably being stepped, so we'll treat that the\n             * same as the \"priority interrupt\" condition described above, update the addresses, rewind the PC, and leave.\n             */\n            if (fUpdate) this.writeWord(ac, addrSrc * PDP10.HALF_SHIFT + addrDst);\n            if (!fDone) this.advancePC(-1);\n            break;\n        }\n    }\n};\n\n/**\n * opAOBJP(0o252000): Add One to Both Halves of AC and Jump if Positive\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-41:\n *\n *      Add 1000001 [base 8] to AC and place the result back in AC.  If the result is greater than or equal\n *      to zero (ie if bit 0 is 0, and hence a negative count in the left half has reached zero or a positive\n *      count has not yet reached 2^17), take the next instruction from location E and continue sequential\n *      operation from there.\n *\n *      The incrementing of both halves of AC simultaneously is effected by adding 1000001 [base 8].  A count\n *      of -2 in AC left is therefore increased to zero if 2^18 - 1 is incremented in AC right.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOBJP = function(op, ac)\n{\n    var dst = (this.readWord(ac) + 0o000001000001) % PDP10.WORD_LIMIT;\n    this.writeWord(ac, dst);\n    if (dst < PDP10.INT_LIMIT) this.setPC(this.regEA);\n};\n\n/**\n * opAOBJN(0o253000): Add One to Both Halves of AC and Jump if Negative\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-41:\n *\n *      Add 1000001 [base 8] to AC and place the result back in AC.  If the result is less than zero\n *      (ie if bit 0 is 1, and hence a negative count in the left half has not yet reached zero or a positive\n *      count has reached 2^17), take the next instruction from location E and continue sequential operation\n *      from there.\n *\n *      The incrementing of both halves of AC simultaneously is effected by adding 1000001 [base 8].  A count\n *      of -2 in AC left is therefore increased to zero if 2^18 - 1 is incremented in AC right.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOBJN = function(op, ac)\n{\n    var dst = (this.readWord(ac) + 0o000001000001) % PDP10.WORD_LIMIT;\n    this.writeWord(ac, dst);\n    if (dst >= PDP10.INT_LIMIT) this.setPC(this.regEA);\n};\n\n/**\n * opJRST(0o254000): Jump and Restore\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-57:\n *\n *      Perform the functions specified by F, then take the next instruction from location E and continue sequential\n *      operation from there. Bits 9-12 are programmed as follows.\n *\n *        9     Restore the channel on which the highest priority interrupt is currently being held [§ 2.13].\n *\n *              Unless the User In-out flag is set, this function cannot be executed in a user program.  Instead\n *              of restoring the channel, it stores its own instruction code, F and effective address E in bits 0-8,\n *              9-12 and 18-35 respectively of unrelocated location 40 (clearing bits 13-17), and then executes the\n *              instruction contained in location 41, which is under control of the monitor [§ 2.15].\n *\n *       10     Halt the processor.  When it stops, the MA lights on the console display an address one greater\n *              than that of the location containing the instruction that caused the halt, and PC displays the jump\n *              address (the location from which the next instruction will be taken if the operator causes the processor\n *              to resume operation without changing PC).\n *\n *              Unless the User In-out flag is set, this function cannot be executed in a user program.  Instead of\n *              halting the processor, it stores its own instruction code, F and effective address E in Bits 0-8, 9-12\n *              and 18-35 respectively of unrelocated location 40 (clearing bits 13-17), and then executes the\n *              instruction contained in location 41, which is under control of the monitor [§ 2.15].\n *\n *       11     Restore the flags listed above from the left half of the word in the last location referenced in the\n *              effective address calculation.  Hence to restore flags requires that the JRST instruction use indexing\n *              or indirect addressing.\n *\n *              Restoration of all but the user flags is directly according to the contents of the corresponding bits\n *              as given above: a flag is set by a 1 in the bit, cleared by a 0.  A 1 in bit 5 sets User but a 0 has no\n *              effect, so the Monitor can restart a user program by restoring flags but the user cannot leave user\n *              mode by this method.  A 0 in bit 6 clears User In-out, but a 1 sets it only if the JRST is being\n *              executed by the Monitor, ie if User is clear.\n *\n *       12     Enter user mode.  The user program starts at relocated location E.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opJRST = function(op, ac)\n{\n    if (ac & 0b0001) {\n        /*\n         * Enter user mode.\n         */\n        this.setUserMode();\n    }\n    if (ac & 0b0010) {\n        /*\n         * Restore the flags.\n         */\n        this.setPS((this.regLA / PDP10.HALF_SHIFT)|0);\n    }\n    if (ac & 0b0100) {\n        /*\n         * Halt the processor.\n         */\n        this.stopCPU();\n    }\n    if (ac & 0b1000) {\n        /*\n         * Restore interrupt channel.\n         */\n        this.opUndefined(op);\n    }\n    this.setPC(this.regEA);\n};\n\n/**\n * opJFCL(0o255000): Jump on Flag and Clear\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-57:\n *\n *      If any flag specified by F [ac] is set, clear it and take the next instruction from location E,\n *      continuing sequential operation from there.\n *\n *      To select one or a combination of these flags (which are among those described above) the programmer can specify\n *      the equivalent of an AC address that places 1s in the appropriate bits, but MACRO recognizes mnemonics for some of\n *      the 13-bit instruction codes (bits 0-12).\n *\n *          JFCL        JFCL    0,      No-op                       25500\n *          JOV         JFCL    10,     Jump on Overflow            25540\n *          JCRY0       JFCL    4,      Jump on Carry 0             25520\n *          JCRY1       JFCL    2,      Jump on Carry 1             25510\n *          JCRY        JFCL    6,      Jump on Carry 0 or 1        25530\n *          JFOV        JFCL    1,      Jump on Floating Overflow   25504\n *\n *      SIDEBAR: This instruction can be used simply to clear the selected flags by having the jump address point to the\n *      next consecutive location, as in:\n *\n *          JFCL 17,.+1\n *\n *      which clears all four flags without disrupting the normal program sequence.  A JFCL that selects no flag is the fastest\n *      no-op as it neither fetches nor stores an operand, and bits 18-35 of the instruction word can be used to store information.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opJFCL = function(op, ac)\n{\n    /*\n     * The ac (F) bits from the opcode align perfectly with the top 4 bits of regPS; all we have to do is shift ac left 14.\n     */\n    var bitsPS = ac << 14;\n    if (this.regPS & bitsPS) {\n        this.regPS &= ~bitsPS;\n        this.setPC(this.regEA);\n    }\n};\n\n/**\n * opXCT(0o256000): Execute\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-56:\n *\n *      Execute the contents of location E as an instruction.  Any instruction may be executed, including another XCT.\n *      If an XCT executes a skip instruction, the skip is relative to the location of the XCT (the first XCT if there\n *      are several in a chain).  If an XCT executes a jump, program flow is altered as specified by the jump (no matter\n *      how many XCTs precede a jump instruction, when PC is saved it contains an address one greater than the location\n *      of the first XCT in the chain).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opXCT = function(op, ac)\n{\n    this.regXC = this.regEA;\n};\n\n/**\n * opPUSHJ(0o260000): Push Down and Jump\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-62:\n *\n *      Add 1000001 [base 8] to AC to increment both halves by one and place the result back in AC.  If the addition\n *      causes the count in AC left to reach zero, set the Pushdown Overflow flag.  Then place the current contents of\n *      the flags (as described above) in the left half of the location now addressed by AC right and the contents of\n *      PC in the right half of that location (at this time PC contains an address one greater than the location of\n *      the PUSHJ instruction).  Take the next instruction from location E and continue sequential operation from there.\n *\n *      The flags are unaffected except Byte Interrupt, which is cleared.  The original contents of the location added\n *      to the list are lost.  If this instruction is executed as a result of a priority interrupt or in unrelocated\n *      41 or 61 while the processor is in user mode, bit 5 of the PC word stored is 1 and the processor leaves user mode.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opPUSHJ = function(op, ac)\n{\n    var p = (this.readWord(ac) + 0o000001000001) % PDP10.WORD_LIMIT;\n    this.writeWord(ac, p);\n    if (!((p / PDP10.HALF_SHIFT)|0)) {\n        this.regPS |= PDP10.PSFLAG.PDOV;\n    }\n    this.writeWord(p & PDP10.ADDR_MASK, this.getPS() * PDP10.HALF_SHIFT + this.getPC());\n    this.regPS &= ~PDP10.PSFLAG.BIS;            // TODO: Verify that BIS is cleared AFTER calling getPS()\n    this.setPC(this.regEA);\n};\n\n/**\n * opPUSH(0o261000): Push Down\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-13:\n *\n *      Add 000001 000001 to AC to increment both halves by one, then move the contents of location E to the\n *      location now addressed by AC right.  If the addition causes the count in AC left to reach zero, set the\n *      Pushdown Overflow flag.  The contents of E are unaffected, the original contents of the location added\n *      to the list are lost.\n *\n * If we trusted SIMH, then we could not literally interpret this instruction as adding 000001 000001 to AC,\n * because if AC contained 777777 777777, adding 000001 000001 would result in 000001 000000, not 000000 000000,\n * and yet 000000 000000 is EXACTLY what we get in SIMH.\n *\n * And yet, DEC's documentation clearly contradicts what SIMH is doing:\n *\n *      The incrementing and decrementing of both halves of AC simultaneously is effected by adding and subtracting\n *      000001 000001.  Hence a count of -2 in AC left is increased to zero if 2^18 - 1 is incremented in AC right,\n *      and conversely, 1 in AC left is decreased to -1 if zero is decremented in AC right.\n *\n * Perhaps SIMH is simply emulating the behavior of some later PDP-10 model, which performed independent increments?\n *\n * TODO: Investigate.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opPUSH = function(op, ac)\n{\n    var p = this.readWord(ac);\n    if (!PDP10.SIMH) {\n        /*\n         * This is the behavior that is clearly documented by DEC.\n         */\n        p += 0o000001000001;\n        this.writeWord(p & PDP10.ADDR_MASK, this.readWord(this.regEA));\n        if (p >= PDP10.WORD_LIMIT) p -= PDP10.WORD_LIMIT;\n        if (!((p / PDP10.HALF_SHIFT)|0)) {\n            this.regPS |= PDP10.PSFLAG.PDOV;\n        }\n    } else {\n        /*\n         * This is the SIMH behavior, which appears to increment each half of AC independently.\n         */\n        var addr = (p + 1) & PDP10.ADDR_MASK;\n        this.writeWord(addr, this.readWord(this.regEA));\n        p = (p + 0o000001000000) - (p & PDP10.ADDR_MASK) + addr;\n        if (p >= PDP10.WORD_LIMIT) {\n            p -= PDP10.WORD_LIMIT;\n            this.regPS |= PDP10.PSFLAG.PDOV;\n        }\n    }\n    this.writeWord(ac, p);\n};\n\n/**\n * opPOP(0o262000): Pop Up\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-13:\n *\n *      Move the contents of the location addressed by AC right to location E, then subtract 000001 000001\n *      from AC to decrement both halves by one.  If the subtraction causes the count in AC left to reach -1,\n *      set the Pushdown Overflow flag.  The original contents of E are lost.\n *\n *      NOTE: Because of the order in which the operands are stored, the instruction POP AC,AC would load the\n *      contents of the location addressed by AC right into AC on top of the pushdown count, destroying it.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opPOP = function(op, ac)\n{\n    var p = this.readWord(ac);\n    var src = this.readWord(p & PDP10.ADDR_MASK);\n    this.writeWord(this.regEA, src);\n    if (this.regEA == ac) p = src;     // this avoids re-reading the accumulator if the write just overwrote it\n    p -= 0o000001000001;\n    if (p < 0) p += PDP10.WORD_LIMIT;\n    if (((p / PDP10.HALF_SHIFT)|0) == PDP10.HALF_MASK) {\n        this.regPS |= PDP10.PSFLAG.PDOV;\n    }\n    this.writeWord(ac, p);\n};\n\n/**\n * opPOPJ(0o263000): Pop Up and Jump\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-63:\n *\n *      Subtract 1000001 [base 8] from AC to decrement both halves by one and place the result back in AC.\n *      If the subtraction causes the count in AC left to reach -1, set the Pushdown Overflow flag.  Take the\n *      next instruction from the location addressed by the right half of the location that was addressed by\n *      AC right prior to the decrementing, and continue sequential operation from there.\n *\n *      SIDEBAR: The effective address E is ignored.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opPOPJ = function(op, ac)\n{\n    var p = this.readWord(ac);\n    var pc = this.readWord(p & PDP10.ADDR_MASK);\n    p -= 0o000001000001;\n    if (p < 0) p += PDP10.WORD_LIMIT;\n    if (((p / PDP10.HALF_SHIFT)|0) == PDP10.HALF_MASK) {\n        this.regPS |= PDP10.PSFLAG.PDOV;\n    }\n    this.writeWord(ac, p);\n    this.setPC(pc & PDP10.ADDR_MASK);\n};\n\n/**\n * opJSR(0o264000): Jump to Subroutine\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-57:\n *\n *      Place the current contents of the flags (as described above) in the left half of location E and the\n *      contents of PC in the right half (at this time PC contains an address one greater than the location of\n *      the JSR instruction).  Take the next instruction from location E + 1 and continue sequential operation\n *      from there.  The flags are unaffected except Byte Interrupt, which is cleared.\n *\n *      If this instruction is executed as a result of a priority interrupt or in un-relocated 41 or 61 while\n *      the processor is in user mode, bit 5 of the PC word stored is 1 and the processor leaves user mode.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opJSR = function(op, ac)\n{\n    this.writeWord(this.regEA, this.getPS() * PDP10.HALF_SHIFT + this.getPC());\n    this.regPS &= ~PDP10.PSFLAG.BIS;            // TODO: Verify that BIS is cleared AFTER calling getPS()\n    this.setPC(this.regEA + 1);\n};\n\n/**\n * opJSP(0o265000): Jump and Save PC\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-58:\n *\n *      Place the current contents of the flags (as described above) in AC left and the contents of PC in AC right\n *      (at this time PC contains an address one greater than the location of the JSP instruction).  Take the next\n *      instruction from location E and continue sequential operation from there.  The flags are unaffected except\n *      Byte Interrupt, which is cleared.\n *\n *      If this instruction is executed as a result of a priority interrupt or in un-relocated 41 or 61 while the\n *      processor is in user mode, bit 5 of the PC word stored is 1 and the processor leaves user mode.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opJSP = function(op, ac)\n{\n    this.writeWord(ac, this.getPS() * PDP10.HALF_SHIFT + this.getPC());\n    this.regPS &= ~PDP10.PSFLAG.BIS;            // TODO: Verify that BIS is cleared AFTER calling getPS()\n    this.setPC(this.regEA);\n};\n\n/**\n * opJSA(0o266000): Jump and Save AC\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-61:\n *\n *      Place AC in location E, the effective address E in AC left, and the contents of PC in AC right (at this time\n *      PC contains an address one greater than the location of the JSA instruction).  Take the next instruction from\n *      location E + 1 and continue sequential operation from there.  The original contents of E are lost.\n *\n *      If this instruction is executed as a result of a priority interrupt or in unrelocated 41 or 61 while the processor\n *      is in user mode, bit 5 of the PC word stored is 1 and the processor leaves user mode.\n *\n * Regarding JSA and JRA:\n *\n *      A JSA combines advantages of the JSR and JSP.  JSA does modify memory, but it saves PC in an accumulator\n *      without losing its previous contents (at a cost of not saving the flags).  It is thus convenient for multiple-entry\n *      subroutines.  In a subroutine called by a JSR, the returning JRST must refer to the (single) entry point.\n *      Since a JRA can retrieve the original PC by addressing AC as an index register, it is independent of any entry point\n *      without tying up an accumulator to the extent a JSP would.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opJSA = function(op, ac)\n{\n    this.writeWord(this.regEA, this.readWord(ac));\n    this.writeWord(ac, this.regEA * PDP10.HALF_SHIFT + this.getPC());\n    this.setPC(this.regEA + 1);\n};\n\n/**\n * opJRA(0o267000): Jump and Restore AC\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-61:\n *\n *      Place the contents of the location addressed by AC left into AC.  Take the next instruction from location E and\n *      continue sequential operation from there.\n *\n * This opcode functions as the counterpart to JSA, but ONLY if location E (the effective address calculated by the JRA) indexes\n * with the same AC that was used with the JSA.\n *\n *              JSA     17,F1\n *      R1:     ...\n *              ...\n *      F1:     0                       ; location to save AC 17, as specified by the A field of \"JSA 17,F1\"\n *      F2:     ...                     ; first instruction executed after \"JSA 17,F1\"\n *              JRA     17,(17)         ; return to R1, after restoring AC 17\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opJRA = function(op, ac)\n{\n    var acc = this.readWord(ac);\n    this.writeWord(ac, this.readWord((acc / PDP10.HALF_SHIFT)|0));\n    this.setPC(this.regEA);\n};\n\n/**\n * opADD(0o270000): Add\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-27:\n *\n *      Add the operand specified by M to AC and place the result in the specified destination.  If the sum is >= 2^35\n *      set Overflow and Carry 1; the result stored has a minus sign but a magnitude in positive form equal to the sum less 2^35.\n *      If the sum is < -2^35 set Overflow and Carry 0; the result stored has a plus sign but a magnitude in negative form equal\n *      to the sum plus 2^35.  Set both carry flags if both summands are negative, or their signs differ and their magnitudes\n *      are equal or the positive one is the greater in magnitude.\n *\n * NOTE: This is a \"Basic\" mode instruction: the source is [E] and the destination is [A] (opposite of \"Memory\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opADD = function(op, ac)\n{\n    this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opADDI(0o271000): Add Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-27:\n *\n *      Add the operand specified by M to AC and place the result in the specified destination.  If the sum is >= 2^35\n *      set Overflow and Carry 1; the result stored has a minus sign but a magnitude in positive form equal to the sum less 2^35.\n *      If the sum is < -2^35 set Overflow and Carry 0; the result stored has a plus sign but a magnitude in negative form equal\n *      to the sum plus 2^35.  Set both carry flags if both summands are negative, or their signs differ and their magnitudes\n *      are equal or the positive one is the greater in magnitude.\n *\n * NOTE: This is an \"Immediate\" mode instruction: the source is the word 0,E and the destination is [A].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opADDI = function(op, ac)\n{\n    this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), this.regEA));\n};\n\n/**\n * opADDM(0o272000): Add to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-27:\n *\n *      Add the operand specified by M to AC and place the result in the specified destination.  If the sum is >= 2^35\n *      set Overflow and Carry 1; the result stored has a minus sign but a magnitude in positive form equal to the sum less 2^35.\n *      If the sum is < -2^35 set Overflow and Carry 0; the result stored has a plus sign but a magnitude in negative form equal\n *      to the sum plus 2^35.  Set both carry flags if both summands are negative, or their signs differ and their magnitudes\n *      are equal or the positive one is the greater in magnitude.\n *\n * NOTE: This is a \"Memory\" mode instruction: the source is [E] and the destination is [E] (opposite of \"Basic\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opADDM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.doADD.call(this, this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opADDB(0o273000): Add to Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-27:\n *\n *      Add the operand specified by M to AC and place the result in the specified destination.  If the sum is >= 2^35\n *      set Overflow and Carry 1; the result stored has a minus sign but a magnitude in positive form equal to the sum less 2^35.\n *      If the sum is < -2^35 set Overflow and Carry 0; the result stored has a plus sign but a magnitude in negative form equal\n *      to the sum plus 2^35.  Set both carry flags if both summands are negative, or their signs differ and their magnitudes\n *      are equal or the positive one is the greater in magnitude.\n *\n * NOTE: This is a \"Both\" mode instruction: the source is [E] and the destination is [E] and [A].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opADDB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), this.readWord(this.regEA))));\n};\n\n/**\n * opSUB(0o274000): Subtract\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-27:\n *\n *      Subtract the operand specified by M from AC and place the result in the specified destination.  If the difference\n *      is >= 2^35 set Overflow and Carry 1; the result stored has a minus sign but a magnitude in positive form equal to the\n *      difference less 2^35.  If the difference is < -2^35 set Overflow and Carry 0; the result stored has a plus sign but\n *      a magnitude in negative form equal to the difference plus 2^35.  Set both carry flags if the signs of the operands are\n *      the same and AC is the greater or the two are equal, or the signs of the operands differ and AC is negative.\n *\n * NOTE: This is a \"Basic\" mode instruction: the source is [E] and the destination is [A] (opposite of \"Memory\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSUB = function(op, ac)\n{\n    this.writeWord(ac, PDP10.doSUB.call(this, this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opSUBI(0o275000): Subtract Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-27:\n *\n *      Subtract the operand specified by M from AC and place the result in the specified destination.  If the difference\n *      is >= 2^35 set Overflow and Carry 1; the result stored has a minus sign but a magnitude in positive form equal to the\n *      difference less 2^35.  If the difference is < -2^35 set Overflow and Carry 0; the result stored has a plus sign but\n *      a magnitude in negative form equal to the difference plus 2^35.  Set both carry flags if the signs of the operands are\n *      the same and AC is the greater or the two are equal, or the signs of the operands differ and AC is negative.\n *\n * NOTE: This is an \"Immediate\" mode instruction: the source is the word 0,E and the destination is [A].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSUBI = function(op, ac)\n{\n    this.writeWord(ac, PDP10.doSUB.call(this, this.readWord(ac), this.regEA));\n};\n\n/**\n * opSUBM(0o276000): Subtract to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-27:\n *\n *      Subtract the operand specified by M from AC and place the result in the specified destination.  If the difference\n *      is >= 2^35 set Overflow and Carry 1; the result stored has a minus sign but a magnitude in positive form equal to the\n *      difference less 2^35.  If the difference is < -2^35 set Overflow and Carry 0; the result stored has a plus sign but\n *      a magnitude in negative form equal to the difference plus 2^35.  Set both carry flags if the signs of the operands are\n *      the same and AC is the greater or the two are equal, or the signs of the operands differ and AC is negative.\n *\n * NOTE: This is a \"Memory\" mode instruction: the source is [E] and the destination is [E] (opposite of \"Basic\").\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSUBM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.doSUB.call(this, this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opSUBB(0o277000): Subtract to Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-27:\n *\n *      Subtract the operand specified by M from AC and place the result in the specified destination.  If the difference\n *      is >= 2^35 set Overflow and Carry 1; the result stored has a minus sign but a magnitude in positive form equal to the\n *      difference less 2^35.  If the difference is < -2^35 set Overflow and Carry 0; the result stored has a plus sign but\n *      a magnitude in negative form equal to the difference plus 2^35.  Set both carry flags if the signs of the operands are\n *      the same and AC is the greater or the two are equal, or the signs of the operands differ and AC is negative.\n *\n * NOTE: This is a \"Both\" mode instruction: the source is [E] and the destination is [E] and [A].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSUBB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, PDP10.doSUB.call(this, this.readWord(ac), this.readWord(this.regEA))));\n};\n\n/**\n * opCAIL(0o301000): Compare AC Immediate and Skip if AC Less than E\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-42:\n *\n *      Compare AC with E (ie with the word 0,E) and skip the next instruction in sequence if the condition\n *      specified by M is satisfied.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opCAIL = function(op, ac)\n{\n    if (PDP10.CMP(this.readWord(ac), this.regEA) < 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opCAIE(0o302000): Compare AC Immediate and Skip if Equal\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-42:\n *\n *      Compare AC with E (ie with the word 0,E) and skip the next instruction in sequence if the condition\n *      specified by M is satisfied.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opCAIE = function(op, ac)\n{\n    if (PDP10.CMP(this.readWord(ac), this.regEA) == 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opCAILE(0o303000): Compare AC Immediate and Skip if AC Less than or Equal to E\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-42:\n *\n *      Compare AC with E (ie with the word 0,E) and skip the next instruction in sequence if the condition\n *      specified by M is satisfied.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opCAILE = function(op, ac)\n{\n    if (PDP10.CMP(this.readWord(ac), this.regEA) <= 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opCAIA(0o304000): Compare AC Immediate but Always Skip\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-42:\n *\n *      Compare AC with E (ie with the word 0,E) and skip the next instruction in sequence if the condition\n *      specified by M is satisfied.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opCAIA = function(op, ac)\n{\n    // TODO: Determine if there's any need to actually perform the comparison.\n    this.setPC(this.regPC + 1);\n};\n\n/**\n * opCAIGE(0o305000): Compare AC Immediate and Skip if AC Greater than or Equal to E\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-42:\n *\n *      Compare AC with E (ie with the word 0,E) and skip the next instruction in sequence if the condition\n *      specified by M is satisfied.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opCAIGE = function(op, ac)\n{\n    if (PDP10.CMP(this.readWord(ac), this.regEA) >= 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opCAIN(0o306000): Compare AC Immediate and Skip if Not Equal\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-42:\n *\n *      Compare AC with E (ie with the word 0,E) and skip the next instruction in sequence if the condition\n *      specified by M is satisfied.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opCAIN = function(op, ac)\n{\n    if (PDP10.CMP(this.readWord(ac), this.regEA) != 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opCAIG(0o307000): Compare AC Immediate and Skip if AC Greater than E\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-42:\n *\n *      Compare AC with E (ie with the word 0,E) and skip the next instruction in sequence if the condition\n *      specified by M is satisfied.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opCAIG = function(op, ac)\n{\n    if (PDP10.CMP(this.readWord(ac), this.regEA) > 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opCAML(0o311000): Compare AC with Memory and Skip if AC Less\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-43:\n *\n *      Compare AC with the contents of location E and skip the next instruction in sequence if the condition\n *      specified by M is satisfied.  The pair of numbers compared may be either both fixed or both normalized\n *      floating point.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opCAML = function(op, ac)\n{\n    if (PDP10.CMP(this.readWord(ac), this.readWord(this.regEA)) < 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opCAME(0o312000): Compare AC with Memory and Skip if Equal\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-43:\n *\n *      Compare AC with the contents of location E and skip the next instruction in sequence if the condition\n *      specified by M is satisfied.  The pair of numbers compared may be either both fixed or both normalized\n *      floating point.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opCAME = function(op, ac)\n{\n    if (PDP10.CMP(this.readWord(ac), this.readWord(this.regEA)) == 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opCAMLE(0o313000): Compare AC with Memory and Skip if AC Less or Equal\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-43:\n *\n *      Compare AC with the contents of location E and skip the next instruction in sequence if the condition\n *      specified by M is satisfied.  The pair of numbers compared may be either both fixed or both normalized\n *      floating point.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opCAMLE = function(op, ac)\n{\n    if (PDP10.CMP(this.readWord(ac), this.readWord(this.regEA)) <= 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opCAMA(0o314000): Compare AC with Memory but Always Skip\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-43:\n *\n *      Compare AC with the contents of location E and skip the next instruction in sequence if the condition\n *      specified by M is satisfied.  The pair of numbers compared may be either both fixed or both normalized\n *      floating point.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opCAMA = function(op, ac)\n{\n    // TODO: Determine if there's any need to actually perform the comparison.\n    this.setPC(this.regPC + 1);\n};\n\n/**\n * opCAMGE(0o315000): Compare AC with Memory and Skip if AC Greater or Equal\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-43:\n *\n *      Compare AC with the contents of location E and skip the next instruction in sequence if the condition\n *      specified by M is satisfied.  The pair of numbers compared may be either both fixed or both normalized\n *      floating point.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opCAMGE = function(op, ac)\n{\n    if (PDP10.CMP(this.readWord(ac), this.readWord(this.regEA)) >= 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opCAMN(0o316000): Compare AC with Memory and Skip if Not Equal\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-43:\n *\n *      Compare AC with the contents of location E and skip the next instruction in sequence if the condition\n *      specified by M is satisfied.  The pair of numbers compared may be either both fixed or both normalized\n *      floating point.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opCAMN = function(op, ac)\n{\n    if (PDP10.CMP(this.readWord(ac), this.readWord(this.regEA)) != 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opCAMG(0o317000): Compare AC with Memory and Skip if AC Greater\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-43:\n *\n *      Compare AC with the contents of location E and skip the next instruction in sequence if the condition\n *      specified by M is satisfied.  The pair of numbers compared may be either both fixed or both normalized\n *      floating point.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opCAMG = function(op, ac)\n{\n    if (PDP10.CMP(this.readWord(ac), this.readWord(this.regEA)) > 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opJUMPL(0o321000): Jump if AC Less than Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-43:\n *\n *      Compare AC (fixed or floating) with zero, and if the condition specified by M is satisfied,\n *      take the next instruction from location E and continue sequential operation from there.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opJUMPL = function(op, ac)\n{\n    if (PDP10.SIGN(this.readWord(ac)) < 0) this.setPC(this.regEA);\n};\n\n/**\n * opJUMPE(0o322000): Jump if AC Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-43:\n *\n *      Compare AC (fixed or floating) with zero, and if the condition specified by M is satisfied,\n *      take the next instruction from location E and continue sequential operation from there.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opJUMPE = function(op, ac)\n{\n    if (PDP10.SIGN(this.readWord(ac)) == 0) this.setPC(this.regEA);\n};\n\n/**\n * opJUMPLE(0o323000): Jump if AC Less than or Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-43:\n *\n *      Compare AC (fixed or floating) with zero, and if the condition specified by M is satisfied,\n *      take the next instruction from location E and continue sequential operation from there.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opJUMPLE = function(op, ac)\n{\n    if (PDP10.SIGN(this.readWord(ac)) <= 0) this.setPC(this.regEA);\n};\n\n/**\n * opJUMPA(0o324000): Jump Always\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-43:\n *\n *      Compare AC (fixed or floating) with zero, and if the condition specified by M is satisfied,\n *      take the next instruction from location E and continue sequential operation from there.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opJUMPA = function(op, ac)\n{\n    this.setPC(this.regEA);\n};\n\n/**\n * opJUMPGE(0o325000): Jump if AC Greater than or Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-43:\n *\n *      Compare AC (fixed or floating) with zero, and if the condition specified by M is satisfied,\n *      take the next instruction from location E and continue sequential operation from there.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opJUMPGE = function(op, ac)\n{\n    if (PDP10.SIGN(this.readWord(ac)) >= 0) this.setPC(this.regEA);\n};\n\n/**\n * opJUMPN(0o326000): Jump if AC Not Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-43:\n *\n *      Compare AC (fixed or floating) with zero, and if the condition specified by M is satisfied,\n *      take the next instruction from location E and continue sequential operation from there.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opJUMPN = function(op, ac)\n{\n    if (PDP10.SIGN(this.readWord(ac)) != 0) this.setPC(this.regEA);\n};\n\n/**\n * opJUMPG(0o327000): Jump if AC Greater than Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-43:\n *\n *      Compare AC (fixed or floating) with zero, and if the condition specified by M is satisfied,\n *      take the next instruction from location E and continue sequential operation from there.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opJUMPG = function(op, ac)\n{\n    if (PDP10.SIGN(this.readWord(ac)) > 0) this.setPC(this.regEA);\n};\n\n/**\n * opSKIP(0o330000): Do Not Skip\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-44:\n *\n *      Compare the contents (fixed or floating) of location E with zero, and skip the next instruction\n *      in sequence if the condition specified by M is satisfied.  If A is nonzero also place the contents\n *      of location E in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSKIP = function(op, ac)\n{\n    if (ac) this.writeWord(ac, this.readWord(this.regEA));\n};\n\n/**\n * opSKIPL(0o331000): Skip if Memory Less than Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-44:\n *\n *      Compare the contents (fixed or floating) of location E with zero, and skip the next instruction\n *      in sequence if the condition specified by M is satisfied.  If A is nonzero also place the contents\n *      of location E in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSKIPL = function(op, ac)\n{\n    var dst = this.readWord(this.regEA);\n    if (PDP10.SIGN(dst) < 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opSKIPE(0o332000): Skip if Memory Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-44:\n *\n *      Compare the contents (fixed or floating) of location E with zero, and skip the next instruction\n *      in sequence if the condition specified by M is satisfied.  If A is nonzero also place the contents\n *      of location E in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSKIPE = function(op, ac)\n{\n    var dst = this.readWord(this.regEA);\n    if (PDP10.SIGN(dst) == 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opSKIPLE(0o333000): Skip if Memory Less than or Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-44:\n *\n *      Compare the contents (fixed or floating) of location E with zero, and skip the next instruction\n *      in sequence if the condition specified by M is satisfied.  If A is nonzero also place the contents\n *      of location E in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSKIPLE = function(op, ac)\n{\n    var dst = this.readWord(this.regEA);\n    if (PDP10.SIGN(dst) <= 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opSKIPA(0o334000): Skip Always\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-44:\n *\n *      Compare the contents (fixed or floating) of location E with zero, and skip the next instruction\n *      in sequence if the condition specified by M is satisfied.  If A is nonzero also place the contents\n *      of location E in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSKIPA = function(op, ac)\n{\n    this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, this.readWord(this.regEA));\n};\n\n/**\n * opSKIPGE(0o335000): Skip if Memory Greater than or Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-44:\n *\n *      Compare the contents (fixed or floating) of location E with zero, and skip the next instruction\n *      in sequence if the condition specified by M is satisfied.  If A is nonzero also place the contents\n *      of location E in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSKIPGE = function(op, ac)\n{\n    var dst = this.readWord(this.regEA);\n    if (PDP10.SIGN(dst) >= 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opSKIPN(0o336000): Skip if Memory Not Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-44:\n *\n *      Compare the contents (fixed or floating) of location E with zero, and skip the next instruction\n *      in sequence if the condition specified by M is satisfied.  If A is nonzero also place the contents\n *      of location E in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSKIPN = function(op, ac)\n{\n    var dst = this.readWord(this.regEA);\n    if (PDP10.SIGN(dst) != 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opSKIPG(0o337000): Skip if Memory Greater than Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-44:\n *\n *      Compare the contents (fixed or floating) of location E with zero, and skip the next instruction\n *      in sequence if the condition specified by M is satisfied.  If A is nonzero also place the contents\n *      of location E in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSKIPG = function(op, ac)\n{\n    var dst = this.readWord(this.regEA);\n    if (PDP10.SIGN(dst) > 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opAOJ(0o340000): Add One to AC but Do Not Jump\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-44:\n *\n *      Increment AC by one and place the result back in AC.  Compare the result with zero, and if the\n *      condition specified by M is satisfied, take the next instruction from location E and continue\n *      sequential operation from there.  If AC originally contained 2^35 - 1, set the Overflow and Carry 1\n *      flags; if -1, set Carry 0 and Carry 1.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOJ = function(op, ac)\n{\n    this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), 1));\n};\n\n/**\n * opAOJL(0o341000): Add One to AC and Jump if Less than Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-44:\n *\n *      Increment AC by one and place the result back in AC.  Compare the result with zero, and if the\n *      condition specified by M is satisfied, take the next instruction from location E and continue\n *      sequential operation from there.  If AC originally contained 2^35 - 1, set the Overflow and Carry 1\n *      flags; if -1, set Carry 0 and Carry 1.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOJL = function(op, ac)\n{\n    var dst = this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), 1));\n    if (PDP10.SIGN(dst) < 0) this.setPC(this.regEA);\n};\n\n/**\n * opAOJE(0o342000): Add One to AC and Jump if Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-44:\n *\n *      Increment AC by one and place the result back in AC.  Compare the result with zero, and if the\n *      condition specified by M is satisfied, take the next instruction from location E and continue\n *      sequential operation from there.  If AC originally contained 2^35 - 1, set the Overflow and Carry 1\n *      flags; if -1, set Carry 0 and Carry 1.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOJE = function(op, ac)\n{\n    var dst = this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), 1));\n    if (PDP10.SIGN(dst) == 0) this.setPC(this.regEA);\n};\n\n/**\n * opAOJLE(0o343000): Add One to AC and Jump if Less than or Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-44:\n *\n *      Increment AC by one and place the result back in AC.  Compare the result with zero, and if the\n *      condition specified by M is satisfied, take the next instruction from location E and continue\n *      sequential operation from there.  If AC originally contained 2^35 - 1, set the Overflow and Carry 1\n *      flags; if -1, set Carry 0 and Carry 1.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOJLE = function(op, ac)\n{\n    var dst = this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), 1));\n    if (PDP10.SIGN(dst) <= 0) this.setPC(this.regEA);\n};\n\n/**\n * opAOJA(0o344000): Add One to AC and Jump Always\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-44:\n *\n *      Increment AC by one and place the result back in AC.  Compare the result with zero, and if the\n *      condition specified by M is satisfied, take the next instruction from location E and continue\n *      sequential operation from there.  If AC originally contained 2^35 - 1, set the Overflow and Carry 1\n *      flags; if -1, set Carry 0 and Carry 1.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOJA = function(op, ac)\n{\n    var dst = this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), 1));\n    this.setPC(this.regEA);\n};\n\n/**\n * opAOJGE(0o345000): Add One to AC and Jump if Greater than or Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-44:\n *\n *      Increment AC by one and place the result back in AC.  Compare the result with zero, and if the\n *      condition specified by M is satisfied, take the next instruction from location E and continue\n *      sequential operation from there.  If AC originally contained 2^35 - 1, set the Overflow and Carry 1\n *      flags; if -1, set Carry 0 and Carry 1.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOJGE = function(op, ac)\n{\n    var dst = this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), 1));\n    if (PDP10.SIGN(dst) >= 0) this.setPC(this.regEA);\n};\n\n/**\n * opAOJN(0o346000): Add One to AC and Jump if Not Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-44:\n *\n *      Increment AC by one and place the result back in AC.  Compare the result with zero, and if the\n *      condition specified by M is satisfied, take the next instruction from location E and continue\n *      sequential operation from there.  If AC originally contained 2^35 - 1, set the Overflow and Carry 1\n *      flags; if -1, set Carry 0 and Carry 1.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOJN = function(op, ac)\n{\n    var dst = this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), 1));\n    if (PDP10.SIGN(dst) != 0) this.setPC(this.regEA);\n};\n\n/**\n * opAOJG(0o347000): Add One to AC and Jump if Greater than Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-44:\n *\n *      Increment AC by one and place the result back in AC.  Compare the result with zero, and if the\n *      condition specified by M is satisfied, take the next instruction from location E and continue\n *      sequential operation from there.  If AC originally contained 2^35 - 1, set the Overflow and Carry 1\n *      flags; if -1, set Carry 0 and Carry 1.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOJG = function(op, ac)\n{\n    var dst = this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), 1));\n    if (PDP10.SIGN(dst) > 0) this.setPC(this.regEA);\n};\n\n/**\n * opAOS(0o350000): Add One to Memory but Do Not Skip\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-45:\n *\n *      Increment the contents of location E by one and place the result back in E.  Compare the result\n *      with zero, and skip the next instruction in sequence if the condition specified by M is satisfied.\n *      If location E originally contained 2^35 - 1, set the Overflow and Carry 1 flags; if -1, set Carry 0\n *      and Carry 1.  If A is nonzero also place the result in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOS = function(op, ac)\n{\n    var dst = this.writeWord(this.regEA, PDP10.doADD.call(this, this.readWord(this.regEA), 1));\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opAOSL(0o351000): Add One to Memory and Skip if Less than Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-45:\n *\n *      Increment the contents of location E by one and place the result back in E.  Compare the result\n *      with zero, and skip the next instruction in sequence if the condition specified by M is satisfied.\n *      If location E originally contained 2^35 - 1, set the Overflow and Carry 1 flags; if -1, set Carry 0\n *      and Carry 1.  If A is nonzero also place the result in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOSL = function(op, ac)\n{\n    var dst = this.writeWord(this.regEA, PDP10.doADD.call(this, this.readWord(this.regEA), 1));\n    if (PDP10.SIGN(dst) < 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opAOSE(0o352000): Add One to Memory and Skip if Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-45:\n *\n *      Increment the contents of location E by one and place the result back in E.  Compare the result\n *      with zero, and skip the next instruction in sequence if the condition specified by M is satisfied.\n *      If location E originally contained 2^35 - 1, set the Overflow and Carry 1 flags; if -1, set Carry 0\n *      and Carry 1.  If A is nonzero also place the result in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOSE = function(op, ac)\n{\n    var dst = this.writeWord(this.regEA, PDP10.doADD.call(this, this.readWord(this.regEA), 1));\n    if (PDP10.SIGN(dst) == 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opAOSLE(0o353000): Add One to Memory and Skip if Less than to Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-45:\n *\n *      Increment the contents of location E by one and place the result back in E.  Compare the result\n *      with zero, and skip the next instruction in sequence if the condition specified by M is satisfied.\n *      If location E originally contained 2^35 - 1, set the Overflow and Carry 1 flags; if -1, set Carry 0\n *      and Carry 1.  If A is nonzero also place the result in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOSLE = function(op, ac)\n{\n    var dst = this.writeWord(this.regEA, PDP10.doADD.call(this, this.readWord(this.regEA), 1));\n    if (PDP10.SIGN(dst) <= 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opAOSA(0o354000): Add One to Memory and Skip Always\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-45:\n *\n *      Increment the contents of location E by one and place the result back in E.  Compare the result\n *      with zero, and skip the next instruction in sequence if the condition specified by M is satisfied.\n *      If location E originally contained 2^35 - 1, set the Overflow and Carry 1 flags; if -1, set Carry 0\n *      and Carry 1.  If A is nonzero also place the result in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOSA = function(op, ac)\n{\n    var dst = this.writeWord(this.regEA, PDP10.doADD.call(this, this.readWord(this.regEA), 1));\n    this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opAOSGE(0o355000): Add One to Memory and Skip if Greater than or Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-45:\n *\n *      Increment the contents of location E by one and place the result back in E.  Compare the result\n *      with zero, and skip the next instruction in sequence if the condition specified by M is satisfied.\n *      If location E originally contained 2^35 - 1, set the Overflow and Carry 1 flags; if -1, set Carry 0\n *      and Carry 1.  If A is nonzero also place the result in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOSGE = function(op, ac)\n{\n    var dst = this.writeWord(this.regEA, PDP10.doADD.call(this, this.readWord(this.regEA), 1));\n    if (PDP10.SIGN(dst) >= 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opAOSN(0o356000): Add One to Memory and Skip if Not Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-45:\n *\n *      Increment the contents of location E by one and place the result back in E.  Compare the result\n *      with zero, and skip the next instruction in sequence if the condition specified by M is satisfied.\n *      If location E originally contained 2^35 - 1, set the Overflow and Carry 1 flags; if -1, set Carry 0\n *      and Carry 1.  If A is nonzero also place the result in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOSN = function(op, ac)\n{\n    var dst = this.writeWord(this.regEA, PDP10.doADD.call(this, this.readWord(this.regEA), 1));\n    if (PDP10.SIGN(dst) != 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opAOSG(0o357000): Add One to Memory and Skip if Greater than Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-45:\n *\n *      Increment the contents of location E by one and place the result back in E.  Compare the result\n *      with zero, and skip the next instruction in sequence if the condition specified by M is satisfied.\n *      If location E originally contained 2^35 - 1, set the Overflow and Carry 1 flags; if -1, set Carry 0\n *      and Carry 1.  If A is nonzero also place the result in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAOSG = function(op, ac)\n{\n    var dst = this.writeWord(this.regEA, PDP10.doADD.call(this, this.readWord(this.regEA), 1));\n    if (PDP10.SIGN(dst) > 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opSOJ(0o360000): Subtract One from AC but Do Not Jump\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-45:\n *\n *      Decrement AC by one and place the result back in AC.  Compare the result with zero, and if the\n *      condition specified by M is satisfied, take the next instruction from location E and continue sequential\n *      operation from there.  If AC originally contained - 2^35 , set the Overflow and Carry 0 flags; if any\n *      other nonzero number, set Carry 0 and Carry 1.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSOJ = function(op, ac)\n{\n    this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), PDP10.WORD_MASK));\n};\n\n/**\n * opSOJL(0o361000): Subtract One from AC and Jump if Less than Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-45:\n *\n *      Decrement AC by one and place the result back in AC.  Compare the result with zero, and if the\n *      condition specified by M is satisfied, take the next instruction from location E and continue sequential\n *      operation from there.  If AC originally contained - 2^35 , set the Overflow and Carry 0 flags; if any\n *      other nonzero number, set Carry 0 and Carry 1.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSOJL = function(op, ac)\n{\n    var dst = this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), PDP10.WORD_MASK));\n    if (PDP10.SIGN(dst) < 0) this.setPC(this.regEA);\n};\n\n/**\n * opSOJE(0o362000): Subtract One from AC and Jump if Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-45:\n *\n *      Decrement AC by one and place the result back in AC.  Compare the result with zero, and if the\n *      condition specified by M is satisfied, take the next instruction from location E and continue sequential\n *      operation from there.  If AC originally contained - 2^35 , set the Overflow and Carry 0 flags; if any\n *      other nonzero number, set Carry 0 and Carry 1.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSOJE = function(op, ac)\n{\n    var dst = this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), PDP10.WORD_MASK));\n    if (PDP10.SIGN(dst) == 0) this.setPC(this.regEA);\n};\n\n/**\n * opSOJLE(0o363000): Subtract One from AC and Jump if Less than or Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-45:\n *\n *      Decrement AC by one and place the result back in AC.  Compare the result with zero, and if the\n *      condition specified by M is satisfied, take the next instruction from location E and continue sequential\n *      operation from there.  If AC originally contained - 2^35 , set the Overflow and Carry 0 flags; if any\n *      other nonzero number, set Carry 0 and Carry 1.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSOJLE = function(op, ac)\n{\n    var dst = this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), PDP10.WORD_MASK));\n    if (PDP10.SIGN(dst) <= 0) this.setPC(this.regEA);\n};\n\n/**\n * opSOJA(0o364000): Subtract One from AC and Jump Always\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-45:\n *\n *      Decrement AC by one and place the result back in AC.  Compare the result with zero, and if the\n *      condition specified by M is satisfied, take the next instruction from location E and continue sequential\n *      operation from there.  If AC originally contained - 2^35 , set the Overflow and Carry 0 flags; if any\n *      other nonzero number, set Carry 0 and Carry 1.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSOJA = function(op, ac)\n{\n    this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), PDP10.WORD_MASK));\n    this.setPC(this.regEA);\n};\n\n/**\n * opSOJGE(0o365000): Subtract One from AC and Jump if Greater than or Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-45:\n *\n *      Decrement AC by one and place the result back in AC.  Compare the result with zero, and if the\n *      condition specified by M is satisfied, take the next instruction from location E and continue sequential\n *      operation from there.  If AC originally contained - 2^35 , set the Overflow and Carry 0 flags; if any\n *      other nonzero number, set Carry 0 and Carry 1.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSOJGE = function(op, ac)\n{\n    var dst = this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), PDP10.WORD_MASK));\n    if (PDP10.SIGN(dst) >= 0) this.setPC(this.regEA);\n};\n\n/**\n * opSOJN(0o366000): Subtract One from AC and Jump if Not Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-45:\n *\n *      Decrement AC by one and place the result back in AC.  Compare the result with zero, and if the\n *      condition specified by M is satisfied, take the next instruction from location E and continue sequential\n *      operation from there.  If AC originally contained - 2^35 , set the Overflow and Carry 0 flags; if any\n *      other nonzero number, set Carry 0 and Carry 1.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSOJN = function(op, ac)\n{\n    var dst = this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), PDP10.WORD_MASK));\n    if (PDP10.SIGN(dst) != 0) this.setPC(this.regEA);\n};\n\n/**\n * opSOJG(0o367000): Subtract One from AC and Jump if Greater than Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-45:\n *\n *      Decrement AC by one and place the result back in AC.  Compare the result with zero, and if the\n *      condition specified by M is satisfied, take the next instruction from location E and continue sequential\n *      operation from there.  If AC originally contained - 2^35 , set the Overflow and Carry 0 flags; if any\n *      other nonzero number, set Carry 0 and Carry 1.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSOJG = function(op, ac)\n{\n    var dst = this.writeWord(ac, PDP10.doADD.call(this, this.readWord(ac), PDP10.WORD_MASK));\n    if (PDP10.SIGN(dst) > 0) this.setPC(this.regEA);\n};\n\n/**\n * opSOS(0o370000): Subtract One from Memory but Do Not Skip\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-46:\n *\n *      Decrement the contents of location E by one and place the result back in E.  Compare the result with zero,\n *      and skip the next instruction in sequence if the condition specified by M is satisfied.  If location E originally\n *      contained -2^35 , set the Overflow and Carry 0 flags; if any other nonzero number, set Carry 0 and Carry 1.\n *      If A is nonzero also place the result in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSOS = function(op, ac)\n{\n    var dst = this.writeWord(this.regEA, PDP10.doADD.call(this, this.readWord(this.regEA), PDP10.WORD_MASK));\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opSOSL(0o371000): Subtract One from Memory and Skip if Less than Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-46:\n *\n *      Decrement the contents of location E by one and place the result back in E.  Compare the result with zero,\n *      and skip the next instruction in sequence if the condition specified by M is satisfied.  If location E originally\n *      contained -2^35 , set the Overflow and Carry 0 flags; if any other nonzero number, set Carry 0 and Carry 1.\n *      If A is nonzero also place the result in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSOSL = function(op, ac)\n{\n    var dst = this.writeWord(this.regEA, PDP10.doADD.call(this, this.readWord(this.regEA), PDP10.WORD_MASK));\n    if (PDP10.SIGN(dst) < 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opSOSE(0o372000): Subtract One from Memory and Skip if Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-46:\n *\n *      Decrement the contents of location E by one and place the result back in E.  Compare the result with zero,\n *      and skip the next instruction in sequence if the condition specified by M is satisfied.  If location E originally\n *      contained -2^35 , set the Overflow and Carry 0 flags; if any other nonzero number, set Carry 0 and Carry 1.\n *      If A is nonzero also place the result in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSOSE = function(op, ac)\n{\n    var dst = this.writeWord(this.regEA, PDP10.doADD.call(this, this.readWord(this.regEA), PDP10.WORD_MASK));\n    if (PDP10.SIGN(dst) == 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opSOSLE(0o373000): Subtract One from Memory and Skip if Less than or Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-46:\n *\n *      Decrement the contents of location E by one and place the result back in E.  Compare the result with zero,\n *      and skip the next instruction in sequence if the condition specified by M is satisfied.  If location E originally\n *      contained -2^35 , set the Overflow and Carry 0 flags; if any other nonzero number, set Carry 0 and Carry 1.\n *      If A is nonzero also place the result in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSOSLE = function(op, ac)\n{\n    var dst = this.writeWord(this.regEA, PDP10.doADD.call(this, this.readWord(this.regEA), PDP10.WORD_MASK));\n    if (PDP10.SIGN(dst) <= 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opSOSA(0o374000): Subtract One from Memory and Skip Always\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-46:\n *\n *      Decrement the contents of location E by one and place the result back in E.  Compare the result with zero,\n *      and skip the next instruction in sequence if the condition specified by M is satisfied.  If location E originally\n *      contained -2^35 , set the Overflow and Carry 0 flags; if any other nonzero number, set Carry 0 and Carry 1.\n *      If A is nonzero also place the result in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSOSA = function(op, ac)\n{\n    var dst = this.writeWord(this.regEA, PDP10.doADD.call(this, this.readWord(this.regEA), PDP10.WORD_MASK));\n    this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opSOSGE(0o375000): Subtract One from Memory and Skip if Greater than or Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-46:\n *\n *      Decrement the contents of location E by one and place the result back in E.  Compare the result with zero,\n *      and skip the next instruction in sequence if the condition specified by M is satisfied.  If location E originally\n *      contained -2^35 , set the Overflow and Carry 0 flags; if any other nonzero number, set Carry 0 and Carry 1.\n *      If A is nonzero also place the result in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSOSGE = function(op, ac)\n{\n    var dst = this.writeWord(this.regEA, PDP10.doADD.call(this, this.readWord(this.regEA), PDP10.WORD_MASK));\n    if (PDP10.SIGN(dst) >= 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opSOSN(0o376000): Subtract One from Memory and Skip if Not Equal to Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-46:\n *\n *      Decrement the contents of location E by one and place the result back in E.  Compare the result with zero,\n *      and skip the next instruction in sequence if the condition specified by M is satisfied.  If location E originally\n *      contained -2^35 , set the Overflow and Carry 0 flags; if any other nonzero number, set Carry 0 and Carry 1.\n *      If A is nonzero also place the result in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSOSN = function(op, ac)\n{\n    var dst = this.writeWord(this.regEA, PDP10.doADD.call(this, this.readWord(this.regEA), PDP10.WORD_MASK));\n    if (PDP10.SIGN(dst) != 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opSOSG(0o377000): Subtract One from Memory and Skip if Greater than Zero\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-46:\n *\n *      Decrement the contents of location E by one and place the result back in E.  Compare the result with zero,\n *      and skip the next instruction in sequence if the condition specified by M is satisfied.  If location E originally\n *      contained -2^35 , set the Overflow and Carry 0 flags; if any other nonzero number, set Carry 0 and Carry 1.\n *      If A is nonzero also place the result in AC.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSOSG = function(op, ac)\n{\n    var dst = this.writeWord(this.regEA, PDP10.doADD.call(this, this.readWord(this.regEA), PDP10.WORD_MASK));\n    if (PDP10.SIGN(dst) > 0) this.setPC(this.regPC + 1);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opSETZ(0o400000): Set to Zeros\n * opSETZI(0o401000): Set to Zeros Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-18:\n *\n *      Change the contents of the destination specified by M to all 0s.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSETZ = function(op, ac)\n{\n    this.writeWord(ac, 0);\n};\n\n/**\n * opSETZM(0o402000): Set to Zeros Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-18:\n *\n *      Change the contents of the destination specified by M to all 0s.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSETZM = function(op, ac)\n{\n    this.writeWord(this.regEA, 0);\n};\n\n/**\n * opSETZB(0o403000): Set to Zeros Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-18:\n *\n *      Change the contents of the destination specified by M to all 0s.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSETZB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, 0));\n};\n\n/**\n * opAND(0o404000): And with AC\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-20:\n *\n *      Change the contents of the destination specified by M ([AC]) to the AND function of the specified operand ([E]) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opAND = function(op, ac)\n{\n    this.writeWord(ac, PDP10.AND(this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opANDI(0o405000): And with AC Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-20:\n *\n *      Change the contents of the destination specified by M ([AC]) to the AND function of the specified operand (E) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opANDI = function(op, ac)\n{\n    this.writeWord(ac, PDP10.AND(this.readWord(ac), this.regEA));\n};\n\n/**\n * opANDM(0o406000): And with AC to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-20:\n *\n *      Change the contents of the destination specified by M ([E]) to the AND function of the specified operand ([E]) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opANDM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.AND(this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opANDB(0o407000): And with AC to Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-20:\n *\n *      Change the contents of the destination specified by M ([E] and [AC]) to the AND function of the specified operand ([E])\n *      and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opANDB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, PDP10.AND(this.readWord(ac), this.readWord(this.regEA))));\n};\n\n/**\n * opANDCA(0o410000): And with Complement of AC\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-20:\n *\n *      Change the contents of the destination specified by M ([AC]) to the AND function of the specified operand ([E])\n *      and the complement of [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opANDCA = function(op, ac)\n{\n    this.writeWord(ac, PDP10.AND(PDP10.WORD_MASK - this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opANDCAI(0o411000): And with Complement of AC Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-20:\n *\n *      Change the contents of the destination specified by M ([AC]) to the AND function of the specified operand (E)\n *      and the complement of [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opANDCAI = function(op, ac)\n{\n    this.writeWord(ac, PDP10.AND(PDP10.WORD_MASK - this.readWord(ac), this.regEA));\n};\n\n/**\n * opANDCAM(0o412000): And with Complement of AC to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-20:\n *\n *      Change the contents of the destination specified by M ([E]) to the AND function of the specified operand ([E])\n *      and the complement of [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opANDCAM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.AND(PDP10.WORD_MASK - this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opANDCAB(0o413000): And with Complement of AC to Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-20:\n *\n *      Change the contents of the destination specified by M ([E] and [AC]) to the AND function of the specified operand ([E])\n *      and the complement of [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opANDCAB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, PDP10.AND(PDP10.WORD_MASK - this.readWord(ac), this.readWord(this.regEA))));\n};\n\n/**\n * opANDCM(0o420000): And Complement of Memory with AC\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-20:\n *\n *      Change the contents of the destination specified by M ([AC]) to the AND function of the complement of the specified\n *      operand ([E]) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opANDCM = function(op, ac)\n{\n    this.writeWord(ac, PDP10.AND(this.readWord(ac), PDP10.WORD_MASK - this.readWord(this.regEA)));\n};\n\n/**\n * opANDCMI(0o421000): And Complement of Memory Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-20:\n *\n *      Change the contents of the destination specified by M ([AC]) to the AND function of the complement of the specified\n *      operand (E) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opANDCMI = function(op, ac)\n{\n    this.writeWord(ac, PDP10.AND(this.readWord(ac), PDP10.WORD_MASK - this.regEA));\n};\n\n/**\n * opANDCMM(0o422000): And Complement of Memory to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-20:\n *\n *      Change the contents of the destination specified by M ([E]) to the AND function of the complement of the specified\n *      operand ([E]) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opANDCMM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.AND(this.readWord(ac), PDP10.WORD_MASK - this.readWord(this.regEA)));\n};\n\n/**\n * opANDCMB(0o423000): And Complement of Memory to Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-20:\n *\n *      Change the contents of the destination specified by M ([E] and [AC]) to the AND function of the complement of the specified\n *      operand ([E]) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opANDCMB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, PDP10.AND(this.readWord(ac), PDP10.WORD_MASK - this.readWord(this.regEA))));\n};\n\n/**\n * opXOR(0o430000): Exclusive Or with AC\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-22:\n *\n *      Change the contents of the destination specified by M ([AC]) to the exclusive OR function of the specified\n *      operand ([E]) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opXOR = function(op, ac)\n{\n    this.writeWord(ac, PDP10.XOR(this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opXORI(0o431000): Exclusive Or Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-22:\n *\n *      Change the contents of the destination specified by M ([AC]) to the exclusive OR function of the specified\n *      operand (E) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opXORI = function(op, ac)\n{\n    this.writeWord(ac, PDP10.XOR(this.readWord(ac), this.regEA));\n};\n\n/**\n * opXORM(0o432000): Exclusive Or to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-22:\n *\n *      Change the contents of the destination specified by M ([E]) to the exclusive OR function of the specified\n *      operand ([E]) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opXORM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.XOR(this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opXORB(0o433000): Exclusive Or to Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-22:\n *\n *      Change the contents of the destination specified by M ([E] and [AC]) to the exclusive OR function of the specified\n *      operand ([E]) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opXORB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, PDP10.XOR(this.readWord(ac), this.readWord(this.regEA))));\n};\n\n/**\n * opIOR(0o434000): Inclusive Or with AC\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-21:\n *\n *      Change the contents of the destination specified by M ([AC]) to the inclusive OR function of the specified\n *      operand ([E]) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opIOR = function(op, ac)\n{\n    this.writeWord(ac, PDP10.IOR(this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opIORI(0o435000): Inclusive Or with AC Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-21:\n *\n *      Change the contents of the destination specified by M ([AC]) to the inclusive OR function of the specified\n *      operand (E) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opIORI = function(op, ac)\n{\n    this.writeWord(ac, PDP10.IOR(this.readWord(ac), this.regEA));\n};\n\n/**\n * opIORM(0o436000): Inclusive Or with AC to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-21:\n *\n *      Change the contents of the destination specified by M ([E]) to the inclusive OR function of the specified\n *      operand ([E]) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opIORM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.IOR(this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opIORB(0o437000): Inclusive Or with AC to Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-21:\n *\n *      Change the contents of the destination specified by M ([E] and [AC]) to the inclusive OR function of the specified\n *      operand ([E]) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opIORB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, PDP10.IOR(this.readWord(ac), this.readWord(this.regEA))));\n};\n\n/**\n * opANDCB(0o440000): And Complements of Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-21:\n *\n *      Change the contents of the destination specified by M ([AC]) to the AND function of the complements of both\n *      the specified operand ([E]) and [AC].  The result is the NOR function of the operands.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opANDCB = function(op, ac)\n{\n    this.writeWord(ac, PDP10.AND(PDP10.WORD_MASK - this.readWord(ac), PDP10.WORD_MASK - this.readWord(this.regEA)));\n};\n\n/**\n * opANDCBI(0o441000): And Complements of Both Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-21:\n *\n *      Change the contents of the destination specified by M ([AC]) to the AND function of the complements of both\n *      the specified operand (E) and [AC].  The result is the NOR function of the operands.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opANDCBI = function(op, ac)\n{\n    this.writeWord(ac, PDP10.AND(PDP10.WORD_MASK - this.readWord(ac), PDP10.WORD_MASK - this.regEA));\n};\n\n/**\n * opANDCBM(0o442000): And Complements of Both to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-21:\n *\n *      Change the contents of the destination specified by M ([E]) to the AND function of the complements of both\n *      the specified operand ([E]) and [AC].  The result is the NOR function of the operands.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opANDCBM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.AND(PDP10.WORD_MASK - this.readWord(ac), PDP10.WORD_MASK - this.readWord(this.regEA)));\n};\n\n/**\n * opANDCBB(0o443000): And Complements of Both to Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-21:\n *\n *      Change the contents of the destination specified by M ([E] and [AC]) to the AND function of the complements of both\n *      the specified operand ([E]) and [AC].  The result is the NOR function of the operands.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opANDCBB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, PDP10.AND(PDP10.WORD_MASK - this.readWord(ac), PDP10.WORD_MASK - this.readWord(this.regEA))));\n};\n\n/**\n * opEQV(0o444000): Equivalence with AC\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-23:\n *\n *      Change the contents of the destination specified by M ([AC]) to the complement of the exclusive OR function of the\n *      specified operand ([E]) and [AC] (the result has 1s wherever the corresponding bits of the operands are the same).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opEQV = function(op, ac)\n{\n    this.writeWord(ac, PDP10.EQV(this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opEQVI(0o445000): Equivalence Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-23:\n *\n *      Change the contents of the destination specified by M ([AC]) to the complement of the exclusive OR function of the\n *      specified operand (E) and [AC] (the result has 1s wherever the corresponding bits of the operands are the same).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opEQVI = function(op, ac)\n{\n    this.writeWord(ac, PDP10.EQV(this.readWord(ac), this.regEA));\n};\n\n/**\n * opEQVM(0o446000): Equivalence to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-23:\n *\n *      Change the contents of the destination specified by M ([E]) to the complement of the exclusive OR function of the\n *      specified operand ([E]) and [AC] (the result has 1s wherever the corresponding bits of the operands are the same).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opEQVM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.EQV(this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opEQVB(0o447000): Equivalence to Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-23:\n *\n *      Change the contents of the destination specified by M ([E] and [AC]) to the complement of the exclusive OR function of the\n *      specified operand ([E]) and [AC] (the result has 1s wherever the corresponding bits of the operands are the same).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opEQVB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, PDP10.EQV(this.readWord(ac), this.readWord(this.regEA))));\n};\n\n/**\n * opSETCA(0o450000): Set to Complement of AC\n * opSETCAI(0o451000): Set to Complement of AC Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-19:\n *\n *      Change the contents of the destination specified by M ([AC]) to the complement of [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSETCA = function(op, ac)\n{\n    this.writeWord(ac, PDP10.WORD_MASK - this.readWord(ac));\n};\n\n/**\n * opSETCAM(0o452000): Set to Complement of AC Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-19:\n *\n *      Change the contents of the destination specified by M ([E]) to the complement of [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSETCAM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.WORD_MASK - this.readWord(ac));\n};\n\n/**\n * opSETCAB(0o453000): Set to Complement of AC Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-19:\n *\n *      Change the contents of the destination specified by M ([E] and [AC]) to the complement of [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSETCAB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, PDP10.WORD_MASK - this.readWord(ac)));\n};\n\n/**\n * opORCA(0o454000): Inclusive Or with Complement of AC\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-21:\n *\n *      Change the contents of the destination specified by M ([AC]) to the inclusive OR function of the specified\n *      operand ([E]) and the complement of [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opORCA = function(op, ac)\n{\n    this.writeWord(ac, PDP10.IOR(PDP10.WORD_MASK - this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opORCAI(0o455000): Inclusive Or with Complement of AC Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-21:\n *\n *      Change the contents of the destination specified by M ([AC]) to the inclusive OR function of the specified\n *      operand (E) and the complement of [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opORCAI = function(op, ac)\n{\n    this.writeWord(ac, PDP10.IOR(PDP10.WORD_MASK - this.readWord(ac), this.regEA));\n};\n\n/**\n * opORCAM(0o456000): Inclusive Or with Complement of AC to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-21:\n *\n *      Change the contents of the destination specified by M ([E]) to the inclusive OR function of the specified\n *      operand ([E]) and the complement of [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opORCAM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.IOR(PDP10.WORD_MASK - this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opORCAB(0o457000): Inclusive Or with Complement of AC to Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-21:\n *\n *      Change the contents of the destination specified by M ([E] and [AC]) to the inclusive OR function of the specified\n *      operand ([E]) and the complement of [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opORCAB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, PDP10.IOR(PDP10.WORD_MASK - this.readWord(ac), this.readWord(this.regEA))));\n};\n\n/**\n * opSETCM(0o460000): Set to Complement of Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-19:\n *\n *      Change the contents of the destination specified by M ([AC]) to the complement of the specified source\n *      operand ([E]).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSETCM = function(op, ac)\n{\n    this.writeWord(ac, PDP10.WORD_MASK - this.readWord(this.regEA));\n};\n\n/**\n * opSETCMI(0o461000): Set to Complement of Memory Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-19:\n *\n *      Change the contents of the destination specified by M ([AC]) to the complement of the specified source\n *      operand (E).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSETCMI = function(op, ac)\n{\n    this.writeWord(ac, PDP10.WORD_MASK - this.regEA);\n};\n\n/**\n * opSETCMM(0o462000): Set to Complement of Memory Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-19:\n *\n *      Change the contents of the destination specified by M ([E]) to the complement of the specified source\n *      operand ([E]).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSETCMM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.WORD_MASK - this.readWord(this.regEA));\n};\n\n/**\n * opSETCMB(0o463000): Set to Complement of Memory Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-19:\n *\n *      Change the contents of the destination specified by M ([E] and [AC]) to the complement of the specified source\n *      operand ([E]).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSETCMB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, PDP10.WORD_MASK - this.readWord(this.regEA)));\n};\n\n/**\n * opORCM(0o464000): Inclusive Or Complement of Memory with AC\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-22:\n *\n *      Change the contents of the destination specified by M ([AC]) to the inclusive OR function of the complement of the\n *      specified operand ([E]) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opORCM = function(op, ac)\n{\n    this.writeWord(ac, PDP10.IOR(this.readWord(ac), PDP10.WORD_MASK - this.readWord(this.regEA)));\n};\n\n/**\n * opORCMI(0o465000): Inclusive Or Complement of Memory Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-22:\n *\n *      Change the contents of the destination specified by M ([AC]) to the inclusive OR function of the complement of the\n *      specified operand (E) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opORCMI = function(op, ac)\n{\n    this.writeWord(ac, PDP10.IOR(this.readWord(ac), PDP10.WORD_MASK - this.regEA));\n};\n\n/**\n * opORCMM(0o466000): Inclusive Or Complement of Memory to Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-22:\n *\n *      Change the contents of the destination specified by M ([E]) to the inclusive OR function of the complement of the\n *      specified operand ([E]) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opORCMM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.IOR(this.readWord(ac), PDP10.WORD_MASK - this.readWord(this.regEA)));\n};\n\n/**\n * opORCMB(0o467000): Inclusive Or Complement of Memory to Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-22:\n *\n *      Change the contents of the destination specified by M ([E] and [AC]) to the inclusive OR function of the complement of the\n *      specified operand ([E]) and [AC].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opORCMB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, PDP10.IOR(this.readWord(ac), PDP10.WORD_MASK - this.readWord(this.regEA))));\n};\n\n/**\n * opORCB(0o470000): Inclusive Or Complements of Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-22:\n *\n *      Change the contents of the destination specified by M ([AC]) to the inclusive OR function of the complements of both\n *      the specified operand ([E]) and [AC].  The result is the NAND function of the operands.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opORCB = function(op, ac)\n{\n    this.writeWord(ac, PDP10.IOR(PDP10.WORD_MASK - this.readWord(ac), PDP10.WORD_MASK - this.readWord(this.regEA)));\n};\n\n/**\n * opORCBI(0o471000): Inclusive Or Complements of Both Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-22:\n *\n *      Change the contents of the destination specified by M ([AC]) to the inclusive OR function of the complements of both\n *      the specified operand (E) and [AC].  The result is the NAND function of the operands.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opORCBI = function(op, ac)\n{\n    this.writeWord(ac, PDP10.IOR(PDP10.WORD_MASK - this.readWord(ac), PDP10.WORD_MASK - this.regEA));\n};\n\n/**\n * opORCBM(0o472000): Inclusive Or Complements of Both To Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-22:\n *\n *      Change the contents of the destination specified by M ([E]) to the inclusive OR function of the complements of both\n *      the specified operand ([E]) and [AC].  The result is the NAND function of the operands.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opORCBM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.IOR(PDP10.WORD_MASK - this.readWord(ac), PDP10.WORD_MASK - this.readWord(this.regEA)));\n};\n\n/**\n * opORCBB(0o473000): Inclusive Or Complements of Both to Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-22:\n *\n *      Change the contents of the destination specified by M ([E] and [AC]) to the inclusive OR function of the complements of both\n *      the specified operand ([E]) and [AC].  The result is the NAND function of the operands.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opORCBB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, PDP10.IOR(PDP10.WORD_MASK - this.readWord(ac), PDP10.WORD_MASK - this.readWord(this.regEA))));\n};\n\n/**\n * opSETO(0o474000): Set to Ones\n * opSETOI(0o475000): Set to Ones Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-18:\n *\n *      Change the contents of the destination specified by M (AC) to all 1s.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSETO = function(op, ac)\n{\n    this.writeWord(ac, PDP10.WORD_MASK);\n};\n\n/**\n * opSETOM(0o476000): Set to Ones Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-18:\n *\n *      Change the contents of the destination specified by M ([E]) to all 1s.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSETOM = function(op, ac)\n{\n    this.writeWord(this.regEA, PDP10.WORD_MASK);\n};\n\n/**\n * opSETOB(0o477000): Set to Ones Both\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-18:\n *\n *      Change the contents of the destination specified by M ([E] and [AC]) to all 1s.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opSETOB = function(op, ac)\n{\n    this.writeWord(this.regEA, this.writeWord(ac, PDP10.WORD_MASK));\n};\n\n/**\n * opHLL(0o5N0000): Half Word Left to Left\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-3:\n *\n *      Move the left half of the source word specified by M to the left half of the specified destination.\n *      The source and the destination right half are unaffected; the original contents of the destination are lost.\n *\n * For HLL, the source is [E] and the destination is [A].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opHLL = function(op, ac)\n{\n    var src = this.readWord(this.regEA);\n    var dst = this.readWord(ac);\n    this.writeWord(ac, PDP10.GETHR(op, dst, src) + (src - (src & PDP10.HALF_MASK)));\n};\n\n/**\n * opHLLI(0o5N1000): Half Word Left to Left, Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-3:\n *\n *      Move the left half of the source word specified by M to the left half of the specified destination.\n *      The source and the destination right half are unaffected; the original contents of the destination are lost.\n *\n *      SIDEBAR: HLLI merely clears AC left.\n *\n * For HLLI, the source is 0,E and the destination is [A].  But since this is a left-half-only operation, src is\n * effectively 0.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opHLLI = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    this.writeWord(ac, PDP10.GETHR(op, dst, 0));\n};\n\n/**\n * opHLLM(0o5N2000): Half Word Left to Left, Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-3:\n *\n *      Move the left half of the source word specified by M to the left half of the specified destination.\n *      The source and the destination right half are unaffected; the original contents of the destination are lost.\n *\n * For HLLM, the source is [A] and the destination is [E].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opHLLM = function(op, ac)\n{\n    var src = this.readWord(ac);\n    var dst = this.readWord(this.regEA);\n    this.writeWord(this.regEA, PDP10.GETHR(op, dst, src) + (src - (src & PDP10.HALF_MASK)));\n};\n\n/**\n * opHLLS(0o5N3000): Half Word Left to Left, Self\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-3:\n *\n *      Move the left half of the source word specified by M to the left half of the specified destination.\n *      The source and the destination right half are unaffected; the original contents of the destination are lost.\n *\n *      SIDEBAR: If A is zero, HLLS is a no-op, otherwise it is equivalent to HLL.\n *\n * For HLLS, the source AND destination is [E] (and also [A] if A is non-zero).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opHLLS = function(op, ac)\n{\n    var dst = this.readWord(this.regEA);\n    dst = PDP10.SETHR(op, dst, dst);\n    this.writeWord(this.regEA, dst);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opHRL(0o504000): Half Word Right to Left\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-4:\n *\n *      Move the right half of the source word specified by M to the left half of the specified destination.\n *      The source and the destination right half are unaffected; the original contents of the destination left\n *      half are lost.\n *\n * For HRL, the source is [E] and the destination is [A].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opHRL = function(op, ac)\n{\n    var src = (this.readWord(this.regEA) & PDP10.HALF_MASK) * PDP10.HALF_SHIFT;\n    var dst = this.readWord(ac);\n    this.writeWord(ac, PDP10.GETHR(op, dst, src) + src);\n};\n\n/**\n * opHRLI(0o505000): Half Word Right to Left, Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-4:\n *\n *      Move the right half of the source word specified by M to the left half of the specified destination.\n *      The source and the destination right half are unaffected; the original contents of the destination left\n *      half are lost.\n *\n * For HRLI, the source is 0,E and the destination is [A].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opHRLI = function(op, ac)\n{\n    var src = this.regEA * PDP10.HALF_SHIFT;\n    var dst = this.readWord(ac);\n    this.writeWord(ac, PDP10.GETHR(op, dst, src) + src);\n};\n\n/**\n * opHRLM(0o506000): Half Word Right to Left, Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-4:\n *\n *      Move the right half of the source word specified by M to the left half of the specified destination.\n *      The source and the destination right half are unaffected; the original contents of the destination left\n *      half are lost.\n *\n * For HRLM, the source is [A] and the destination is [E].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opHRLM = function(op, ac)\n{\n    var src = (this.readWord(ac) & PDP10.HALF_MASK) * PDP10.HALF_SHIFT;\n    var dst = this.readWord(this.regEA);\n    this.writeWord(this.regEA, PDP10.GETHR(op, dst, src) + src);\n};\n\n/**\n * opHRLS(0o507000): Half Word Right to Left, Self\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-4:\n *\n *      Move the right half of the source word specified by M to the left half of the specified destination.\n *      The source and the destination right half are unaffected; the original contents of the destination left\n *      half are lost.\n *\n * For HRLS, the source AND destination is [E] (and also [A] if A is non-zero).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opHRLS = function(op, ac)\n{\n    var dst = this.readWord(this.regEA);\n    var src = (dst & PDP10.HALF_MASK) * PDP10.HALF_SHIFT;\n    dst = PDP10.GETHR(op, dst, src) + src;\n    this.writeWord(this.regEA, dst);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opHRR(0o540000): Half Word Right to Right\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-6:\n *\n *      Move the right half of the source word specified by M to the right half of the specified destination.\n *      The source and the destination left half are unaffected; the original contents of the destination right\n *      half are lost.\n *\n * For HRR, the source is [E] and the destination is [A].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opHRR = function(op, ac)\n{\n    var src = this.readWord(this.regEA) & PDP10.HALF_MASK;\n    var dst = this.readWord(ac);\n    this.writeWord(ac, PDP10.GETHL(op, dst, src) + src);\n};\n\n/**\n * opHRRI(0o541000): Half Word Right to Right, Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-6:\n *\n *      Move the right half of the source word specified by M to the right half of the specified destination.\n *      The source and the destination left half are unaffected; the original contents of the destination right\n *      half are lost.\n *\n * For HRRI, the source is 0,E and the destination is [A].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opHRRI = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    this.writeWord(ac, PDP10.GETHL(op, dst, this.regEA) + this.regEA);\n};\n\n/**\n * opHRRM(0o542000): Half Word Right to Right, Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-6:\n *\n *      Move the right half of the source word specified by M to the right half of the specified destination.\n *      The source and the destination left half are unaffected; the original contents of the destination right\n *      half are lost.\n *\n * For HRRM, the source is [A] and the destination is [E].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opHRRM = function(op, ac)\n{\n    var src = this.readWord(ac) & PDP10.HALF_MASK;\n    var dst = this.readWord(this.regEA);\n    this.writeWord(this.regEA, PDP10.GETHL(op, dst, src) + src);\n};\n\n/**\n * opHRRS(0o543000): Half Word Right to Right, Self\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-6:\n *\n *      Move the right half of the source word specified by M to the right half of the specified destination.\n *      The source and the destination left half are unaffected; the original contents of the destination right\n *      half are lost.\n *\n *      SIDEBAR: If A is zero, HRRS is a no-op; otherwise it is equivalent to HRR.\n *\n * For HRRS, the source AND destination is [E] (and also [A] if A is non-zero).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opHRRS = function(op, ac)\n{\n    var dst = this.readWord(this.regEA);\n    dst = PDP10.SETHL(op, dst, dst);\n    this.writeWord(this.regEA, dst);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opHLR(0o544000): Half Word Left to Right\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-7:\n *\n *      Move the left half of the source word specified by M to the right half of the specified destination.\n *      The source and the destination left half are unaffected; the original contents of the destination right half are lost.\n *\n * For HLR, the source is [E] and the destination is [A].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opHLR = function(op, ac)\n{\n    var src = (this.readWord(this.regEA) / PDP10.HALF_SHIFT)|0;\n    var dst = this.readWord(ac);\n    this.writeWord(ac, PDP10.GETHL(op, dst, src) + src);\n};\n\n/**\n * opHLRI(0o545000): Half Word Left to Right, Immediate\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-7:\n *\n *      Move the left half of the source word specified by M to the right half of the specified destination.\n *      The source and the destination left half are unaffected; the original contents of the destination right half are lost.\n *\n *      SIDEBAR: HLRI merely clears AC right.\n *\n * For HLRI, the source is 0,E and the destination is [A].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opHLRI = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    this.writeWord(ac, PDP10.GETHL(op, dst, 0));\n};\n\n/**\n * opHLRM(0o546000): Half Word Left to Right, Memory\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-7:\n *\n *      Move the left half of the source word specified by M to the right half of the specified destination.\n *      The source and the destination left half are unaffected; the original contents of the destination right half are lost.\n *\n * For HLRM, the source is [A] and the destination is [E].\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opHLRM = function(op, ac)\n{\n    var src = (this.readWord(ac) / PDP10.HALF_SHIFT)|0;\n    var dst = this.readWord(this.regEA);\n    this.writeWord(this.regEA, PDP10.GETHL(op, dst, src) + src);\n};\n\n/**\n * opHLRS(0o547000): Half Word Left to Right, Self\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-7:\n *\n *      Move the left half of the source word specified by M to the right half of the specified destination.\n *      The source and the destination left half are unaffected; the original contents of the destination right half are lost.\n *\n * For HLRS, the source AND destination is [E] (and also [A] if A is non-zero).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opHLRS = function(op, ac)\n{\n    var dst = this.readWord(this.regEA);\n    var src = (dst / PDP10.HALF_SHIFT)|0;\n    dst = PDP10.GETHL(op, dst, src) + src;\n    this.writeWord(this.regEA, dst);\n    if (ac) this.writeWord(ac, dst);\n};\n\n/**\n * opTRNE(0o602000): Test Right, No Modification, and Skip if All Masked Bits Equal 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTRNE = function(op, ac)\n{\n    if (PDP10.AND(this.readWord(ac), this.regEA) == 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opTLNE(0o603000): Test Left, No Modification, and Skip if All Masked Bits Equal 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTLNE = function(op, ac)\n{\n    if (PDP10.AND(this.readWord(ac), this.regEA * PDP10.HALF_SHIFT) == 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opTRNA(0o604000): Test Right, No Modification, but Always Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTRNA = function(op, ac)\n{\n    this.setPC(this.regPC + 1);\n};\n\n/**\n * opTLNA(0o605000): Test Left, No Modification, but Always Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTLNA = function(op, ac)\n{\n    this.setPC(this.regPC + 1);\n};\n\n/**\n * opTRNN(0o606000): Test Right, No Modification, and Skip if Not All Masked Bits Equal 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTRNN = function(op, ac)\n{\n    if (PDP10.AND(this.readWord(ac), this.regEA) != 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opTLNN(0o607000): Test Left, No Modification, and Skip if Not All Masked Bits Equal 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTLNN = function(op, ac)\n{\n    if (PDP10.AND(this.readWord(ac), this.regEA * PDP10.HALF_SHIFT) != 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opTDNE(0o612000): Test Direct, No Modification, and Skip if All Masked Bits Equal 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTDNE = function(op, ac)\n{\n    if (PDP10.AND(this.readWord(ac), this.readWord(this.regEA)) == 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opTSNE(0o613000): Test Swapped, No Modification, and Skip if All Masked Bits Equal 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTSNE = function(op, ac)\n{\n    if (PDP10.AND(this.readWord(ac), PDP10.SWAP(this.readWord(this.regEA))) == 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opTDNA(0o614000): Test Direct, No Modification, but Always Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTDNA = function(op, ac)\n{\n    this.setPC(this.regPC + 1);\n};\n\n/**\n * opTSNA(0o615000): Test Swapped, No Modification, but Always Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTSNA = function(op, ac)\n{\n    this.setPC(this.regPC + 1);\n};\n\n/**\n * opTDNN(0o616000): Test Direct, No Modification, and Skip if Not All Masked Bits Equal 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTDNN = function(op, ac)\n{\n    if (PDP10.AND(this.readWord(ac), this.readWord(this.regEA)) != 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opTSNN(0o617000): Test Swapped, No Modification, and Skip if Not All Masked Bits Equal 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTSNN = function(op, ac)\n{\n    if (PDP10.AND(this.readWord(ac), PDP10.SWAP(this.readWord(this.regEA))) != 0) this.setPC(this.regPC + 1);\n};\n\n/**\n * opTRZ(0o620000): Test Right, Zeros, but Do Not Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTRZ = function(op, ac)\n{\n    this.writeWord(ac, PDP10.CLR(this.readWord(ac), this.regEA));\n};\n\n/**\n * opTLZ(0o621000): Test Left, Zeros, but Do Not Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTLZ = function(op, ac)\n{\n    this.writeWord(ac, PDP10.CLR(this.readWord(ac), this.regEA * PDP10.HALF_SHIFT));\n};\n\n/**\n * opTRZE(0o622000): Test Right, Zeros, and Skip if All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTRZE = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    if (PDP10.AND(dst, this.regEA) == 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.CLR(dst, this.regEA));\n};\n\n/**\n * opTLZE(0o623000): Test Left, Zeros, and Skip if All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTLZE = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    var src = this.regEA * PDP10.HALF_SHIFT;\n    if (PDP10.AND(dst, src) == 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.CLR(dst, src));\n};\n\n/**\n * opTRZA(0o624000): Test Right, Zeros, but Always Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTRZA = function(op, ac)\n{\n    this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.CLR(this.readWord(ac), this.regEA));\n};\n\n/**\n * opTLZA(0o625000): Test Left, Zeros, but Always Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTLZA = function(op, ac)\n{\n    this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.CLR(this.readWord(ac), this.regEA * PDP10.HALF_SHIFT));\n};\n\n/**\n * opTRZN(0o626000): Test Right, Zeros, and Skip if Not All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTRZN = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    if (PDP10.AND(dst, this.regEA) != 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.CLR(dst, this.regEA));\n};\n\n/**\n * opTLZN(0o627000): Test Left, Zeros, and Skip if Not All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTLZN = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    var src = this.regEA * PDP10.HALF_SHIFT;\n    if (PDP10.AND(dst, src) != 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.CLR(dst, src));\n};\n\n/**\n * opTDZ(0o630000): Test Direct, Zeros, but Do Not Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTDZ = function(op, ac)\n{\n    this.writeWord(ac, PDP10.CLR(this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opTSZ(0o631000): Test Swapped, Zeros, but Do Not Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTSZ = function(op, ac)\n{\n    this.writeWord(ac, PDP10.CLR(this.readWord(ac), PDP10.SWAP(this.readWord(this.regEA))));\n};\n\n/**\n * opTDZE(0o632000): Test Direct, Zeros, and Skip if All Masked Bits Equaled a\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTDZE = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    var src = this.readWord(this.regEA);\n    if (PDP10.AND(dst, src) == 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.CLR(dst, src));\n};\n\n/**\n * opTSZE(0o633000): Test Swapped, Zeros, and Skip if All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTSZE = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    var src = PDP10.SWAP(this.readWord(this.regEA));\n    if (PDP10.AND(dst, src) == 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.CLR(dst, src));\n};\n\n/**\n * opTDZA(0o634000): Test Direct, Zeros, but Always Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTDZA = function(op, ac)\n{\n    this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.CLR(this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opTSZA(0o635000): Test Swapped, Zeros, but Always Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTSZA = function(op, ac)\n{\n    this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.CLR(this.readWord(ac), PDP10.SWAP(this.readWord(this.regEA))));\n};\n\n/**\n * opTDZN(0o636000): Test Direct, Zeros, and Skip if Not All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTDZN = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    var src = this.readWord(this.regEA);\n    if (PDP10.AND(dst, src) != 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.CLR(dst, src));\n};\n\n/**\n * opTSZN(0o637000): Test Swapped, Zeros, and Skip if Not All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTSZN = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    var src = PDP10.SWAP(this.readWord(this.regEA));\n    if (PDP10.AND(dst, src) != 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.CLR(dst, src));\n};\n\n/**\n * opTRC(0o640000): Test Right, Complement, but Do Not Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTRC = function(op, ac)\n{\n    this.writeWord(ac, PDP10.XOR(this.readWord(ac), this.regEA));\n};\n\n/**\n * opTLC(0o641000): Test Left, Complement, but Do Not Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTLC = function(op, ac)\n{\n    this.writeWord(ac, PDP10.XOR(this.readWord(ac), this.regEA * PDP10.HALF_SHIFT));\n};\n\n/**\n * opTRCE(0o642000): Test Right, Complement, and Skip if All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTRCE = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    if (PDP10.AND(dst, this.regEA) == 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.XOR(dst, this.regEA));\n};\n\n/**\n * opTLCE(0o643000): Test Left, Complement, and Skip if All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTLCE = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    var src = this.regEA * PDP10.HALF_SHIFT;\n    if (PDP10.AND(dst, src) == 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.XOR(dst, src));\n};\n\n/**\n * opTRCA(0o644000): Test Right, Complement, but Always Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTRCA = function(op, ac)\n{\n    this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.XOR(this.readWord(ac), this.regEA));\n};\n\n/**\n * opTLCA(0o645000): Test Left, Complement, but Always Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTLCA = function(op, ac)\n{\n    this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.XOR(this.readWord(ac), this.regEA * PDP10.HALF_SHIFT));\n};\n\n/**\n * opTRCN(0o646000): Test Right, Complement, and Skip if Not All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTRCN = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    if (PDP10.AND(dst, this.regEA) != 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.XOR(dst, this.regEA));\n};\n\n/**\n * opTLCN(0o647000): Test Left, Complement, and Skip if Not All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTLCN = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    var src = this.regEA * PDP10.HALF_SHIFT;\n    if (PDP10.AND(dst, src) != 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.XOR(dst, src));\n};\n\n/**\n * opTDC(0o650000): Test Direct, Complement, but Do Not Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTDC = function(op, ac)\n{\n    this.writeWord(ac, PDP10.XOR(this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opTSC(0o651000): Test Swapped, Complement, but Do Not Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTSC = function(op, ac)\n{\n    this.writeWord(ac, PDP10.XOR(this.readWord(ac), PDP10.SWAP(this.readWord(this.regEA))));\n};\n\n/**\n * opTDCE(0o652000): Test Direct, Complement, and Skip if All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTDCE = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    var src = this.readWord(this.regEA);\n    if (PDP10.AND(dst, src) == 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.XOR(dst, src));\n};\n\n/**\n * opTSCE(0o653000): Test Swapped, Complement, and Skip if All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTSCE = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    var src = PDP10.SWAP(this.readWord(this.regEA));\n    if (PDP10.AND(dst, src) == 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.XOR(dst, src));\n};\n\n/**\n * opTDCA(0o654000): Test Direct, Complement, but Always Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTDCA = function(op, ac)\n{\n    this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.XOR(this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opTSCA(0o655000): Test Swapped, Complement, but Always Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTSCA = function(op, ac)\n{\n    this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.XOR(this.readWord(ac), PDP10.SWAP(this.readWord(this.regEA))));\n};\n\n/**\n * opTDCN(0o656000): Test Direct, Complement, and Skip if Not All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTDCN = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    var src = this.readWord(this.regEA);\n    if (PDP10.AND(dst, src) != 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.XOR(dst, src));\n};\n\n/**\n * opTSCN(0o657000): Test Swapped, Complement, and Skip if Not All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTSCN = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    var src = PDP10.SWAP(this.readWord(this.regEA));\n    if (PDP10.AND(dst, src) != 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.XOR(dst, src));\n};\n\n/**\n * opTRO(0o660000): Test Right, Ones, but Do Not Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTRO = function(op, ac)\n{\n    this.writeWord(ac, PDP10.IOR(this.readWord(ac), this.regEA));\n};\n\n/**\n * opTLO(0o661000): Test Left, Ones, but Do Not Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTLO = function(op, ac)\n{\n    this.writeWord(ac, PDP10.IOR(this.readWord(ac), this.regEA * PDP10.HALF_SHIFT));\n};\n\n/**\n * opTROE(0o662000): Test Right, Ones, and Skip if All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTROE = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    if (PDP10.AND(dst, this.regEA) == 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.IOR(dst, this.regEA));\n};\n\n/**\n * opTLOE(0o663000): Test Left, Ones, and Skip if All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTLOE = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    if (PDP10.AND(dst, this.regEA * PDP10.HALF_SHIFT) == 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.IOR(dst, this.regEA * PDP10.HALF_SHIFT));\n};\n\n/**\n * opTROA(0o664000): Test Right, Ones, but Always Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTROA = function(op, ac)\n{\n    this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.IOR(this.readWord(ac), this.regEA));\n};\n\n/**\n * opTLOA(0o665000): Test Left, Ones, but Always Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTLOA = function(op, ac)\n{\n    this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.IOR(this.readWord(ac), this.regEA * PDP10.HALF_SHIFT));\n};\n\n/**\n * opTRON(0o666000): Test Right, Ones, and Skip if Not All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTRON = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    if (PDP10.AND(dst, this.regEA) != 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.IOR(dst, this.regEA));\n};\n\n/**\n * opTLON(0o667000): Test Left, Ones, and Skip if Not All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTLON = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    var src = this.regEA * PDP10.HALF_SHIFT;\n    if (PDP10.AND(dst, src) != 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.IOR(dst, src));\n};\n\n/**\n * opTDO(0o670000): Test Direct, Ones, but Do Not Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTDO = function(op, ac)\n{\n    this.writeWord(ac, PDP10.IOR(this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opTSO(0o671000): Test Swapped, Ones, but Do Not Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTSO = function(op, ac)\n{\n    this.writeWord(ac, PDP10.IOR(this.readWord(ac), PDP10.SWAP(this.readWord(this.regEA))));\n};\n\n/**\n * opTDOE(0o672000): Test Direct, Ones, and Skip if All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTDOE = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    var src = this.readWord(this.regEA);\n    if (PDP10.AND(dst, src) == 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.IOR(dst, src));\n};\n\n/**\n * opTSOE(0o673000): Test Swapped, Ones, and Skip if All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTSOE = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    var src = PDP10.SWAP(this.readWord(this.regEA));\n    if (PDP10.AND(dst, src) == 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.IOR(dst, src));\n};\n\n/**\n * opTDOA(0o674000): Test Direct, Ones, but Always Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTDOA = function(op, ac)\n{\n    this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.IOR(this.readWord(ac), this.readWord(this.regEA)));\n};\n\n/**\n * opTSOA(0o675000): Test Swapped, Ones, but Always Skip\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTSOA = function(op, ac)\n{\n    this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.IOR(this.readWord(ac), PDP10.SWAP(this.readWord(this.regEA))));\n};\n\n/**\n * opTDON(0o676000): Test Direct, Ones, and Skip if Not All Masked Bits Equaled 0\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTDON = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    var src = this.readWord(this.regEA);\n    if (PDP10.AND(dst, src) != 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.IOR(dst, src));\n};\n\n/**\n * opTSON(0o677000): Test Swapped, Ones, and Skip if Not All Masked Bits Equaled a\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opTSON = function(op, ac)\n{\n    var dst = this.readWord(ac);\n    var src = PDP10.SWAP(this.readWord(this.regEA));\n    if (PDP10.AND(dst, src) != 0) this.setPC(this.regPC + 1);\n    this.writeWord(ac, PDP10.IOR(dst, src));\n};\n\n/**\n * opBLKI(0o700000)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} dev\n */\nPDP10.opBLKI = function(op, dev)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opDATAI(0o700040)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} dev\n */\nPDP10.opDATAI = function(op, dev)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opBLKO(0o700100)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} dev\n */\nPDP10.opBLKO = function(op, dev)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opDATAO(0o700140)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} dev\n */\nPDP10.opDATAO = function(op, dev)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opCONO(0o700200)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} dev\n */\nPDP10.opCONO = function(op, dev)\n{\n    switch(dev) {\n    case PDP10.DEVICES.APR:\n        this.writeFlags(this.readWord(this.regEA));\n        break;\n    default:\n        this.opUndefined(op);\n        break;\n    }\n};\n\n/**\n * opCONI(0o700240)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} dev\n */\nPDP10.opCONI = function(op, dev)\n{\n    switch(dev) {\n    case PDP10.DEVICES.APR:\n        this.writeWord(this.regEA, this.readFlags());\n        break;\n    default:\n        this.opUndefined(op);\n        break;\n    }\n};\n\n/**\n * opCONSZ(0o700300)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} dev\n */\nPDP10.opCONSZ = function(op, dev)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opCONSO(0o700340)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} dev\n */\nPDP10.opCONSO = function(op, dev)\n{\n    this.opUndefined(op);\n};\n\n/**\n * opIO(0o700xxx-0o777xxx): Input-Output Instructions\n *\n * From the DEC PDP-10 System Reference Manual (May 1968), p. 2-68:\n *\n *      The input-output instructions govern all transfers of data to and from the peripheral equipment, and also\n *      perform many operations within the processor.  An instruction in the in-out class is designated by 111 in\n *      bits 0-2, ie its left octal digit is 7.  Bits 3-9 address the device that is to respond to the instruction.\n *      The format thus allows for 128 codes, two of which, 000 and 004 respectively, address the processor and\n *      priority interrupt, and are used for the console and time share hardware as well.  A chart in Appendix A\n *      lists all devices for which codes have been assigned, and gives their mnemonics and DEC option numbers.\n *\n *      Bits 13-35 are the same as in all other instructions: they are the I, X, and Y parts, which are used to\n *      calculate an effective address, set of conditions, or mask to be used in the execution of the instruction.\n *      The remaining bits, 10-12, select one of the following eight 10 instructions.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n */\nPDP10.opIO = function(op)\n{\n    PDP10.aOpIO_KA10[op & 7].call(this, op, (op >> 3) & 0o177);\n};\n\n/**\n * opNOP(op, ac)\n *\n * Used for all \"defined\" operations that, in fact, do nothing (eg, SETA, SETAI, CAI, JUMP).\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opNOP = function(op, ac)\n{\n};\n\n/**\n * opNOPM(op, ac)\n *\n * Used for all \"defined\" operations that, in fact, do nothing (eg, SETMM, CAM) EXCEPT reference memory.\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} ac\n */\nPDP10.opNOPM = function(op, ac)\n{\n};\n\n/**\n * opUndefined(op, ac)\n *\n * @this {CPUStatePDP10}\n * @param {number} op\n * @param {number} [ac]\n */\nPDP10.opUndefined = function(op, ac)\n{\n    this.println(\"undefined opcode: \" + Str.toOct(op));\n    this.advancePC(-1);\n    this.stopCPU();\n};\n\n/**\n * doABS(src)\n *\n * Returns the absolute value (ABS) of the 36-bit operand; used by the MOVM* (Move Magnitude) instructions.\n *\n * @this {CPUStatePDP10}\n * @param {number} src (36-bit)\n * @return {number} (absolute value of src)\n */\nPDP10.doABS = function(src)\n{\n    if (src > PDP10.INT_MASK) {\n        if (src != PDP10.INT_LIMIT) {\n            src = PDP10.TWO_POW36 - src;\n        } else {\n            this.regPS |= (PDP10.PSFLAG.AROV | PDP10.PSFLAG.CRY1);\n        }\n    }\n    return src;\n};\n\n/**\n * doADD(dst, src)\n *\n * Performs the addition (ADD) of two signed 36-bit operands.\n *\n * @this {CPUStatePDP10}\n * @param {number} dst (36-bit value)\n * @param {number} src (36-bit value)\n * @return {number} (dst + src)\n */\nPDP10.doADD = function(dst, src)\n{\n    /*\n     * Since, in our happy little world, 36-bit values are always unsigned, the\n     * only possible out-of-bounds value is a result >= WORD_LIMIT, which the mod cures.\n     */\n    var res = (dst + src) % PDP10.WORD_LIMIT;\n    PDP10.setAddFlags.call(this, dst, src, res);\n    return res;\n};\n\n/**\n * doDIV(src, dst, ext)\n *\n * Performs the division (DIV) of a 72-bit operand by a 36-bit operand.\n *\n * @this {CPUStatePDP10}\n * @param {number} src (36-bit divisor)\n * @param {number} dst (36-bit value)\n * @param {number} [ext] (36-bit value extension)\n * @return {number} (dst / src) (the remainder is stored in regEX); -1 if error (no division performed)\n */\nPDP10.doDIV = function(src, dst, ext)\n{\n    var fNegQ = false, fNegR = false;\n\n    /*\n     * Perform all the same up-front checks that the PDP-10 performs; if we do our job correctly, then it\n     * will be impossible for the actual division operation to overflow (the asserts below should never fire).\n     */\n    if (ext === undefined) {\n        if (!src) {\n            this.regPS |= PDP10.PSFLAG.DCK | PDP10.PSFLAG.AROV;\n            return -1;\n        }\n        ext = (dst > PDP10.INT_MASK)? PDP10.WORD_MASK : 0;\n    } else {\n        var srcAbs = (src < PDP10.INT_LIMIT? src : PDP10.TWO_POW36 - src);\n        var extAbs = (ext < PDP10.INT_LIMIT? ext : PDP10.TWO_POW36 - ext - (dst? 1 : 0));\n        if (extAbs >= srcAbs) {\n            this.regPS |= PDP10.PSFLAG.DCK | PDP10.PSFLAG.AROV;\n            return -1;\n        }\n    }\n\n    /*\n     * We're done with the PDP-10's \"dual sign\" operands now; produce a (unified) signed 72-bit dividend.\n     */\n    dst = PDP10.merge72.call(this, dst, ext);\n    ext = this.regEX;\n\n    /*\n     * Make all the inputs positive now, to keep the division simple.  Fix up the results when we're done.\n     */\n    if (src > PDP10.INT_MASK) {\n        src = PDP10.WORD_LIMIT - src;\n        fNegQ = !fNegQ;\n    }\n    if (ext > PDP10.INT_MASK) {\n        if (dst) {\n            ext = PDP10.WORD_MASK - ext;\n            dst = PDP10.WORD_LIMIT - dst;\n        }\n        else {\n            if (ext) ext = PDP10.WORD_LIMIT - ext;\n        }\n        fNegR = true; fNegQ = !fNegQ;\n    }\n\n    /*\n     * Initialize the four double-length 72-bit values we need for the division process.\n     *\n     * The process involves shifting the divisor left 1 bit (ie, doubling it) until it equals\n     * or exceeds the dividend, and then repeatedly subtracting the divisor from the dividend and\n     * shifting the divisor right 1 bit until the divisor is \"exhausted\" (no bits left), with an\n     * \"early out\" if the dividend gets \"exhausted\" first.\n     *\n     * Note that each element of these double arrays is a 36-bit value, so it's rarely a good idea\n     * to use bitwise operators on them, because those would operate on only the low 32 bits.\n     * Stick with the double worker functions I've created, and trust your JavaScript engine to\n     * inline/optimize the code.\n     */\n    PDP10.INITD(this.regRes, 0, 0);\n    PDP10.INITD(this.regPow, 1, 0);\n    PDP10.INITD(this.regDiv, src, 0);\n    PDP10.INITD(this.regRem, dst, ext);\n\n    while (PDP10.CMPD(this.regRem, this.regDiv) > 0) {\n        PDP10.ADDD(this.regDiv, this.regDiv);\n        PDP10.ADDD(this.regPow, this.regPow);\n    }\n    do {\n        if (PDP10.CMPD(this.regRem, this.regDiv) >= 0) {\n            PDP10.SUBD(this.regRem, this.regDiv);\n            PDP10.ADDD(this.regRes, this.regPow);\n            if (PDP10.ZEROD(this.regRem)) break;\n        }\n        PDP10.SHRD(this.regDiv);\n        PDP10.SHRD(this.regPow);\n    } while (!PDP10.ZEROD(this.regPow));\n\n\n\n\n    dst = this.regRes[0];\n    this.regEX = this.regRem[0];\n\n    if (fNegQ && dst) {\n        dst = PDP10.WORD_LIMIT - dst;\n    }\n\n    if (fNegR && this.regEX) {\n        this.regEX = PDP10.WORD_LIMIT - this.regEX;\n    }\n\n    return dst;\n};\n\n/**\n * doMUL(dst, src, fTruncate, fExternal)\n *\n * Performs the multiplication (MUL) of two signed 36-bit operands.\n *\n * To support 72-bit results, we perform the multiplication process as you would \"by hand\",\n * treating the operands to be multiplied as two 2-digit numbers, where each \"digit\" is an 18-bit\n * number (base 2^18).  Each individual multiplication of these 18-bit \"digits\" will produce\n * a result within 2^36, well within JavaScript integer accuracy.\n *\n * PDP-10 Diagnostic Notes\n * -----------------------\n *\n * The \"DAKAK\" diagnostic contains the following code:\n *\n *      036174: 200240 043643  MOVE    5,43643      ; [43643] = 400000000000\n *      036175: 200300 043603  MOVE    6,43603      ; [43603] = 777777777777\n *      036176: 200140 043604  MOVE    3,43604      ; [43604] = 000000000001\n *      036177: 224240 000003  MUL     5,3          ; Multiply 400000000000 by 000000000001\n *      036200: 312240 043604  CAME    5,43604      ; high order result in AC should be: 000000000001\n *      036201: 003240 033721  UUO     5,33721      ;\n *      036202: 312300 043602  CAME    6,43602      ; low order result in AC+1 should be: 000000000000\n *\n * The \"natural\" result is:\n *\n *      05=777777777777 06=400000000000\n *\n * And SIMH seems to agree.  So why does the DEC diagnostic expect:\n *\n *      05=000000000001 06=000000000000\n *\n * The answer can be found in the June 1982 \"DECSYSTEM-10 and DECSYSTEM-20 Processor Reference Manual\",\n * in the description of the MUL instruction:\n *\n *      CAUTION: In the KA10, an AC operand of 2^35 is treated as though it were +2^35, producing the\n *      incorrect sign in the product.\n *\n * This behavior is now simulated below for MODEL_KA10, at least to the extent that the diagnostic is happy.\n *\n * @this {CPUStatePDP10}\n * @param {number} dst (36-bit value)\n * @param {number} src (36-bit value)\n * @param {boolean} [fTruncate] (true to truncate the result to 36 bits; used by IMUL instructions)\n * @param {boolean} [fExternal] (true if external caller; avoids modifying the CPU state)\n * @return {number} (dst * src) (the high 36 bits of the result; the low 36 bits are stored in regEX)\n */\nPDP10.doMUL = function(dst, src, fTruncate, fExternal)\n{\n    var n1 = dst, n2 = src;\n    var fNeg = false, res, ext;\n\n    /*\n     * If either input is in the negative range, record the sign and make it positive;\n     * we'll negate the result afterward if necessary.\n     */\n    if (n1 > PDP10.INT_MASK) {\n        if (fExternal || this.model != PDP10.MODEL_KA10 || n1 != PDP10.INT_LIMIT) {\n            n1 = PDP10.WORD_LIMIT - n1;\n            fNeg = !fNeg;\n        }\n    }\n\n    if (n2 > PDP10.INT_MASK) {\n        n2 = PDP10.WORD_LIMIT - n2;\n        fNeg = !fNeg;\n    }\n\n    if (n1 < PDP10.HALF_SHIFT && n2 < PDP10.HALF_SHIFT) {\n        res = n1 * n2;\n        ext = 0;\n    }\n    else {\n        var n1d1 = (n1 & PDP10.HALF_MASK);\n        var n1d2 = Math.trunc(n1 / PDP10.HALF_SHIFT);\n        var n2d1 = (n2 & PDP10.HALF_MASK);\n        var n2d2 = Math.trunc(n2 / PDP10.HALF_SHIFT);\n        var m1d1 = n1d1 * n2d1;\n        var m1d2 = (n1d2 * n2d1) + Math.trunc(m1d1 / PDP10.HALF_SHIFT);\n        ext = Math.trunc(m1d2 / PDP10.HALF_SHIFT);\n        m1d2 = (m1d2 & PDP10.HALF_MASK) + (n1d1 * n2d2);\n        res = ((m1d2 * PDP10.HALF_SHIFT) + (m1d1 & PDP10.HALF_MASK)) % PDP10.WORD_LIMIT;\n        ext += Math.trunc(m1d2 / PDP10.HALF_SHIFT) + (n1d2 * n2d2);\n    }\n\n    if (fNeg) {\n        if (res) {\n            ext = PDP10.WORD_MASK - ext;\n            res = PDP10.WORD_LIMIT - res;\n        }\n        else {\n            if (ext) ext = PDP10.WORD_LIMIT - ext;\n        }\n    }\n\n    ext = PDP10.split72.call(this, res, ext, fExternal);\n\n    if (fTruncate) {\n        /*\n         * Special code for IMUL.  I originally tried to avoid calling split72() in this case, but the PDP-10\n         * still appears to be splitting the result of the multiplication into separately signed 36-bit values,\n         * so the simplest solution is to call split72() in all cases.\n         */\n        res = this.regEX;\n        if (!fExternal) {\n            /*\n             * Regarding IMUL overflows, the original spec says:\n             *\n             *      Set Overflow if the product is >= 2^35 or < -2^35 (ie, if the high order word of the double\n             *      length product is not null); the high order word is lost.\n             *\n             * However, when the \"DAKAL\" diagnostic performs a sequence like this:\n             *\n             *      00=000000000000 01=000000000000 02=000000000000 03=400000036755\n             *      04=400000000000 05=000000000003 06=400000000000 07=000000000004\n             *      10=000000000000 11=000000000011 12=777777400000 13=777777777776\n             *      14=000000200000 15=400000037134 16=000000000016 17=000000000000\n             *      PC=037145 RA=00400000 EA=400000 PS=000000 OV=0 C0=0 C1=0 ND=0 PD=0\n             *      037145: 220600 000013  IMUL    14,13            ;cycles=1\n             *\n             * it sets 14=777777400000 and leaves overflow clear; since the 'high order word\" would be 777777777777,\n             * not null, I think the spec over-simplifies.  So our check is more exhaustive: it verifies that ext is\n             * nothing more than an extension of the sign bit of res (ie, 0 if res is positive, -1 if res is negative).\n             * Any other combination of values implies an overflow.\n             */\n            if ((ext || res > PDP10.INT_MASK) && (ext != PDP10.WORD_MASK || res <= PDP10.INT_MASK)) {\n                this.regPS |= PDP10.PSFLAG.AROV;\n            }\n        }\n        ext = res;\n    }\n    return ext;\n};\n\n/**\n * doNEG(src)\n *\n * Returns the negation (NEG) of the 36-bit operand; used by the MOVN* (Move Negative) instructions.\n *\n * @this {CPUStatePDP10}\n * @param {number} src (36-bit)\n * @return {number} (src negated, but as an unsigned 36-bit result)\n */\nPDP10.doNEG = function(src)\n{\n    if (!src) {\n        this.regPS |= (PDP10.PSFLAG.CRY0 | PDP10.PSFLAG.CRY1);\n    }\n    else {\n        /*\n         * In the non-zero case, it's always safe to subtract src from TWO_POW36, but since we have to check for\n         * the INT_LIMIT case anyway, and since subtraction in that case doesn't alter src, we skip the subtraction.\n         */\n        if (src == PDP10.INT_LIMIT) {\n            this.regPS |= (PDP10.PSFLAG.AROV | PDP10.PSFLAG.CRY1);\n        } else {\n            src = PDP10.TWO_POW36 - src;\n        }\n    }\n    return src;\n};\n\n/**\n * doSUB(dst, src)\n *\n * Performs the subtraction (SUB) of two signed 36-bit operands.\n *\n * @this {CPUStatePDP10}\n * @param {number} dst (36-bit value)\n * @param {number} src (36-bit value)\n * @return {number} (dst - src)\n */\nPDP10.doSUB = function(dst, src)\n{\n    /*\n     * Since, in our happy little world, 36-bit values are always unsigned, the\n     * only possible out-of-bounds value is a result < 0, which adding WORD_LIMIT cures.\n     */\n    var res = (dst - src);\n    if (res < 0) res += PDP10.WORD_LIMIT;\n    /*\n     * We can leverage setAddFlags() by treating the subtraction as addition;\n     * since res = dst - src, it is also true that dst = res + src.\n     */\n    PDP10.setAddFlags.call(this, res, src, dst);\n    return res;\n};\n\n/**\n * merge72(dst, ext)\n *\n * Returns a unified 72-bit result from two independently-signed 36-bit values.\n *\n * @this {CPUStatePDP10}\n * @param {number} dst (36-bit value)\n * @param {number} ext (36-bit value)\n * @return {number} (returns the lower 36 bits; the upper 36 bits  are stored in regEX)\n */\nPDP10.merge72 = function(dst, ext)\n{\n    var sign = (ext - (ext % PDP10.INT_LIMIT));\n\n    /*\n     * For 72-bit inputs, the PDP-10 doesn't care whether or not the low word's sign\n     * matches the high word's sign.  The high word's sign bit is the controlling bit.\n     *\n     *\n     *\n     * Compute value without the sign bit and add the low bit of extended in its place.\n     */\n    dst = (dst % PDP10.INT_LIMIT) + ((ext & 1) * PDP10.INT_LIMIT);\n    this.regEX = sign + Math.trunc(ext / 2);\n    return dst;\n};\n\n/**\n * split72(res, ext, fExternal)\n *\n * Returns two 36-bit values with matching sign bits from a unified 72-bit result.\n *\n * @this {CPUStatePDP10}\n * @param {number} res (36-bit value)\n * @param {number} ext (36-bit value)\n * @param {boolean} [fExternal] (true if external caller; avoids modifying the CPU state)\n * @return {number} (returns the upper 36 bits; the lower 36 bits are stored in regEX)\n */\nPDP10.split72 = function(res, ext, fExternal)\n{\n    /*\n     * We just produced a signed 72-bit result, whereas the PDP-10 stores 72-bit arithmetic values as two\n     * signed 36-bit results with matching signs.  Since that's effectively only 70 bits of magnitude (with\n     * two sign bits), we lose one bit of magnitude.\n     *\n     * The conversion requires shifting ext left one bit so that we can move the high bit of res into the\n     * low bit of ext, and then set the sign bit of res to match the sign bit of ext.\n     */\n    var sign = ext - (ext % PDP10.INT_LIMIT);\n    ext = ((ext * 2) % PDP10.WORD_LIMIT) + Math.trunc(res / PDP10.INT_LIMIT);\n    res = sign + (res % PDP10.INT_LIMIT);\n\n    var signNew = ext - (ext % PDP10.INT_LIMIT);\n    if (signNew != sign) {\n        /*\n         * I used to restore ext's original sign (ext = sign + (ext - signNew)), but the PDP-10's defined\n         * behavior for multiplication overflow (ie, whenever both operands are 0o400000000000) is to set both\n         * res and ext to 0o400000000000.\n         *\n         * To quote the original spec for the MUL instruction:\n         *\n         *      If both operands are -2^35 set Overflow; the double length result stored is -2^70.\n         */\n        res = ext;\n    }\n\n    if (fExternal) return res;\n\n    if (res == PDP10.INT_LIMIT && ext == PDP10.INT_LIMIT) {\n        this.regPS |= PDP10.PSFLAG.AROV;\n    }\n    this.regEX = res;\n    return ext;\n};\n\n/**\n * setAddFlags(dst, src, res)\n *\n * @this {CPUStatePDP10}\n * @param {number} dst (36-bit value)\n * @param {number} src (36-bit value)\n * @param {number} res (36-bit value)\n */\nPDP10.setAddFlags = function(dst, src, res)\n{\n    /*\n     * Isolate the top two bits of dst, src, and res by \"shifting\" them into bits 0 and 1 of the\n     * following variables.  Note that shifting with division only works when the values are unsigned\n     * (which they MUST be).\n     */\n\n    var dst01 = Math.trunc(dst / PDP10.TWO_POW34);\n    var src01 = Math.trunc(src / PDP10.TWO_POW34);\n    var res01 = Math.trunc(res / PDP10.TWO_POW34);\n\n    /*\n     * Transform bits 0 and 1 into carry flags, based on the following truth table:\n     *\n     *      D   S   R   C   Carry?\n     *      -   -   -   -   ------\n     *      0   0   0   0   no\n     *      0   0   1   0   no (there must have been a carry out of the preceding bit, but it was \"absorbed\")\n     *      0   1   0   1   yes (there must have been a carry out of the preceding bit, but it was NOT \"absorbed\")\n     *      0   1   1   0   no\n     *      1   0   0   1   yes (same as the preceding \"yes\" case)\n     *      1   0   1   0   no\n     *      1   1   0   1   yes (since the addition of two ones must always produce a carry)\n     *      1   1   1   1   yes (since the addition of two ones must always produce a carry)\n     */\n    var bitsCarry = (dst01 ^ ((dst01 ^ src01) & (src01 ^ res01)));\n    var fCarry0 = bitsCarry & 0b10;\n    var fCarry1 = bitsCarry & 0b01;\n\n    /*\n     * Similarly, we transform bit 1 into an overflow flag, based on the following truth table;\n     * note that X is (D ^ R) and Y is (S ^ R):\n     *\n     *      D   S   R   X   Y   O   Overflow?\n     *      -   -   -   -   -   -   ---------\n     *      0   0   0   0   0   0   no\n     *      0   0   1   1   1   1   yes (adding two positive values yielded a negative value)\n     *      0   1   0   0   1   0   no\n     *      0   1   1   1   0   0   no\n     *      1   0   0   1   0   0   no\n     *      1   0   1   0   1   0   no\n     *      1   1   0   1   1   1   yes (adding two negative values yielded a positive value)\n     *      1   1   1   0   0   0   no\n     */\n    var fOverflow = ((dst01 ^ res01) & (src01 ^ res01)) & 0b10;\n    this.regPS |= (fCarry0? PDP10.PSFLAG.CRY0 : 0) | (fCarry1? PDP10.PSFLAG.CRY1 : 0) | (fOverflow? PDP10.PSFLAG.AROV : 0);\n};\n\n/**\n * AND(dst, src)\n *\n * Performs the logical \"and\" (AND) of two 36-bit operands.\n *\n * @param {number} dst (36-bit value)\n * @param {number} src (36-bit value)\n * @return {number} (dst & src)\n */\nPDP10.AND = function(dst, src)\n{\n    /*\n     * Since dst and src are 36-bit values, we must AND the low 32 bits separately from the higher bits,\n     * and then combine them with addition.  Since all bits above 36 will be zero, and since 0 AND 0 is 0,\n     * no special masking for the higher bits is required.\n     *\n     * WARNING: When using JavaScript's 32-bit operators with values that could set bit 31 and produce a\n     * negative value, it's critical to perform a final right-shift of 0, ensuring that the final result is\n     * positive.\n     *\n     * Finally, all 36-bit data within a PDP-10 machine should ALWAYS be unsigned, which we now assert,\n     * because the divisions below would not yield correct results with negative inputs.\n     */\n\n    return ((((dst / PDP10.TWO_POW32)|0) & ((src / PDP10.TWO_POW32)|0)) * PDP10.TWO_POW32) + ((dst & src) >>> 0);\n};\n\n/**\n * CLR(dst, src)\n *\n * Performs the logical \"and\" (AND) of a 36-bit operand and its complement.\n *\n * @param {number} dst (36-bit value)\n * @param {number} src (36-bit value)\n * @return {number} (dst & ~src)\n */\nPDP10.CLR = function(dst, src)\n{\n    return PDP10.AND(dst, PDP10.NOT(src));\n};\n\n/**\n * CMP(dst, src)\n *\n * Performs the SIGNED comparison (CMP) of two 36-bit operands.\n *\n * @param {number} dst (36-bit value)\n * @param {number} src (36-bit value)\n * @return {number} (dst - src)\n */\nPDP10.CMP = function(dst, src)\n{\n    return (dst < PDP10.INT_LIMIT? dst : dst - PDP10.WORD_LIMIT) - (src < PDP10.INT_LIMIT? src : src - PDP10.WORD_LIMIT);\n};\n\n/**\n * EQV(dst, src)\n *\n * Performs the logical \"equivalence\" (EQV) of two 36-bit operands (ie, NOT XOR)\n *\n * @param {number} dst (36-bit value)\n * @param {number} src (36-bit value)\n * @return {number} (~(dst ^ src))\n */\nPDP10.EQV = function(dst, src)\n{\n    /*\n     * Since dst and src are 36-bit values, we must EQV the low 32 bits separately from the higher bits,\n     * and then combine them with addition.  Since all bits above 36 will be zero, and since 0 EQV 0 is 1,\n     * we must mask the higher 4 bits with 0o17.\n     *\n     * WARNING: When using JavaScript's 32-bit operators with values that could set bit 31 and produce a\n     * negative value, it's critical to perform a final right-shift of 0, ensuring that the final result is\n     * positive.\n     *\n     * Finally, all 36-bit data within a PDP-10 machine should ALWAYS be unsigned, which we now assert,\n     * because the divisions below would not yield correct results with negative inputs.\n     */\n\n    return ((~(((dst / PDP10.TWO_POW32)|0) ^ ((src / PDP10.TWO_POW32)|0)) & 0o17) * PDP10.TWO_POW32) + (~(dst ^ src) >>> 0);\n};\n\n/**\n * IOR(dst, src)\n *\n * Performs the logical \"inclusive-or\" (OR) of two 36-bit operands.\n *\n * @param {number} dst (36-bit value)\n * @param {number} src (36-bit value)\n * @return {number} (dst | src)\n */\nPDP10.IOR = function(dst, src)\n{\n    /*\n     * Since dst and src are 36-bit values, we must OR the low 32 bits separately from the higher bits,\n     * and then combine them with addition.  Since all bits above 36 will be zero, and since 0 OR 0 is 0,\n     * no special masking for the higher bits is required.\n     *\n     * WARNING: When using JavaScript's 32-bit operators with values that could set bit 31 and produce a\n     * negative value, it's critical to perform a final right-shift of 0, ensuring that the final result is\n     * positive.\n     *\n     * Finally, all 36-bit data within a PDP-10 machine should ALWAYS be unsigned, which we now assert,\n     * because the divisions below would not yield correct results with negative inputs.\n     */\n\n    return ((((dst / PDP10.TWO_POW32)|0) | ((src / PDP10.TWO_POW32)|0)) * PDP10.TWO_POW32) + ((dst | src) >>> 0);\n};\n\n/**\n * NOT(src)\n *\n * Performs the one's complement (NOT) of a 36-bit operand.\n *\n * @param {number} src (36-bit value)\n * @return {number} (~src)\n */\nPDP10.NOT = function(src)\n{\n    /*\n     * Since src is a 36-bit value, we must NOT the low 32 bits separately from the higher bits,\n     * and then combine them with addition.  Since all bits above 36 will be zero, and since ~0 is 1,\n     * we must mask the higher 4 bits with 0o17.\n     *\n     * WARNING: When using JavaScript's 32-bit operators with values that could set bit 31 and produce a\n     * negative value, it's critical to perform a final right-shift of 0, ensuring that the final result is\n     * positive.\n     *\n     * Finally, all 36-bit data within a PDP-10 machine should ALWAYS be unsigned, which we now assert,\n     * because the divisions below would not yield correct results with negative inputs.\n     */\n\n    return ((~((src / PDP10.TWO_POW32)|0) & 0o17) * PDP10.TWO_POW32) + (~src >>> 0);\n};\n\n/**\n * SIGN(dst)\n *\n * Returns the signed form of the 36-bit operand; more efficient than doCMP(dst, 0).\n *\n * @param {number} dst (36-bit value)\n * @return {number}\n */\nPDP10.SIGN = function(dst)\n{\n    return (dst < PDP10.INT_LIMIT? dst : dst - PDP10.WORD_LIMIT);\n};\n\n/**\n * XOR(dst, src)\n *\n * Performs the logical \"exclusive-or\" (XOR) of two 36-bit operands.\n *\n * @param {number} dst (36-bit value)\n * @param {number} src (36-bit value)\n * @return {number} (dst ^ src)\n */\nPDP10.XOR = function(dst, src)\n{\n    /*\n     * Since dst and src are 36-bit values, we must XOR the low 32 bits separately from the higher bits,\n     * and then combine them with addition.  Since all bits above 36 will be zero, and since 0 XOR 0 is 0,\n     * no special masking for the higher bits is required.\n     *\n     * WARNING: When using JavaScript's 32-bit operators with values that could set bit 31 and produce a\n     * negative value, it's critical to perform a final right-shift of 0, ensuring that the final result is\n     * positive.\n     *\n     * Finally, all 36-bit data within a PDP-10 machine should ALWAYS be unsigned, which we now assert,\n     * because the divisions below would not yield correct results with negative inputs.\n     */\n\n    return ((((dst / PDP10.TWO_POW32)|0) ^ ((src / PDP10.TWO_POW32)|0)) * PDP10.TWO_POW32) + ((dst ^ src) >>> 0);\n};\n\n/**\n * SWAP(src)\n *\n * Used by callers to \"swap\" the left and right half-words of a 36-bit operand.\n *\n * NOTE: Since HALF_MASK is an 18-bit value, it's safe to use \"&\" with HALF_MASK (equivalent to \"%\" with HALF_SHIFT).\n *\n * @param {number} src\n * @return {number} (updated src)\n */\nPDP10.SWAP = function(src)\n{\n    return ((src / PDP10.HALF_SHIFT)|0) + ((src & PDP10.HALF_MASK) * PDP10.HALF_SHIFT);\n};\n\n/**\n * GETHL(op, dst, src)\n *\n * Used by callers to obtain HL (half-word left) with HR (half-word right) zeroed.\n *\n * @param {number} op\n * @param {number} dst (36-bit value whose 18-bit left half is either preserved or modified)\n * @param {number} src (18-bit value used to determine the sign extension, if any, for the left half of dst)\n * @return {number} (updated dst)\n */\nPDP10.GETHL = function(op, dst, src)\n{\n    switch(op & 0o600) {\n    case 0o000:\n        dst -= (dst & PDP10.HALF_MASK);\n        break;\n    case 0o200:\n        dst = 0;\n        break;\n    case 0o400:\n        dst = (PDP10.HALF_MASK * PDP10.HALF_SHIFT);\n        break;\n    case 0o600:\n        dst = (src > PDP10.HINT_MASK? (PDP10.HALF_MASK * PDP10.HALF_SHIFT) : 0);\n        break;\n    }\n    return dst;\n};\n\n/**\n * SETHL(op, dst, src)\n *\n * Used by callers to obtain HL (half-word left) with HR (half-word right) preserved.\n *\n * @param {number} op\n * @param {number} dst (36-bit value whose 18-bit left half is either preserved or modified)\n * @param {number} src (18-bit value used to determine the sign extension, if any, for the left half of dst)\n * @return {number} (updated dst)\n */\nPDP10.SETHL = function(op, dst, src)\n{\n    if (op &= 0o600) {\n        dst &= PDP10.HALF_MASK;\n        switch(op) {\n        case 0o400:\n            dst += (PDP10.HALF_MASK * PDP10.HALF_SHIFT);\n            break;\n        case 0o600:\n            dst += (src > PDP10.HINT_MASK? (PDP10.HALF_MASK * PDP10.HALF_SHIFT) : 0);\n            break;\n        }\n    }\n    return dst;\n};\n\n/**\n * GETHR(op, dst, src)\n *\n * Used by callers to obtain HR (half-word right) with HL (half-word left) zeroed.\n *\n * @param {number} op\n * @param {number} dst (36-bit value whose 18-bit right half is either preserved or modified)\n * @param {number} src (36-bit value used to determine the sign extension, if any, for the right half of dst)\n * @return {number} (updated dst)\n */\nPDP10.GETHR = function(op, dst, src)\n{\n    switch(op & 0o600) {\n    case 0o000:\n        dst = (dst & PDP10.HALF_MASK);\n        break;\n    case 0o200:\n        dst = 0;\n        break;\n    case 0o400:\n        dst = PDP10.HALF_MASK;\n        break;\n    case 0o600:\n        dst = (src > PDP10.INT_MASK? PDP10.HALF_MASK : 0);\n        break;\n    }\n    return dst;\n};\n\n/**\n * SETHR(op, dst, src)\n *\n * Used by callers to obtain HR (half-word right) with HL (half-word left) preserved.\n *\n * @param {number} op\n * @param {number} dst (36-bit value whose 18-bit right half is either preserved or modified)\n * @param {number} src (36-bit value used to determine the sign extension, if any, for the right half of dst)\n * @return {number} (updated dst)\n */\nPDP10.SETHR = function(op, dst, src)\n{\n    if (op &= 0o600) {\n        dst -= (dst & PDP10.HALF_MASK);\n        switch(op) {\n        case 0o400:\n            dst += PDP10.HALF_MASK;\n            break;\n        case 0o600:\n            dst += (src > PDP10.INT_MASK? PDP10.HALF_MASK : 0);\n            break;\n        }\n    }\n    return dst;\n};\n\n/**\n * ADDD(dDst, dSrc)\n *\n * Adds a double-length value (dSrc) to another (dDst).\n *\n * @param {Array.<number>} dDst\n * @param {Array.<number>} dSrc\n */\nPDP10.ADDD = function(dDst, dSrc)\n{\n    dDst[0] += dSrc[0];\n    dDst[1] += dSrc[1];\n    if (dDst[0] >= PDP10.WORD_LIMIT) {\n        dDst[0] %= PDP10.WORD_LIMIT;\n        dDst[1]++;\n    }\n};\n\n/**\n * CMPD(dDst, dSrc)\n *\n * Compares double-length values (dDst and dSrc) by computing dDst - dSrc.\n *\n * @param {Array.<number>} dDst\n * @param {Array.<number>} dSrc\n * @return {number} > 0 if dDst > dSrc, == 0 if dDst == dSrc, < 0 if dDst < dSrc\n */\nPDP10.CMPD = function(dDst, dSrc)\n{\n    var result = dDst[1] - dSrc[1];\n    if (!result) result = dDst[0] - dSrc[0];\n    return result;\n};\n\n/**\n * INITD(dDst, lo, hi)\n *\n * Initializes a double-length value (dDst).\n *\n * @param {Array.<number>} dDst\n * @param {number} lo\n * @param {number} hi\n */\nPDP10.INITD = function(dDst, lo, hi)\n{\n    dDst[0] = lo;\n    dDst[1] = hi;\n};\n\n/**\n * SHRD(dDst)\n *\n * Shifts a double-length value (dDst) right one bit.\n *\n * @param {Array.<number>} dDst\n */\nPDP10.SHRD = function(dDst)\n{\n    if (dDst[1] % 2) {\n        dDst[0] += PDP10.WORD_LIMIT;\n    }\n    dDst[0] = Math.trunc(dDst[0] / 2);\n    dDst[1] = Math.trunc(dDst[1] / 2);\n};\n\n/**\n * SUBD(dDst, dSrc)\n *\n * Subtracts a double-length value (dSrc) from another (dDst).\n *\n * @param {Array.<number>} dDst\n * @param {Array.<number>} dSrc\n */\nPDP10.SUBD = function(dDst, dSrc)\n{\n    dDst[0] -= dSrc[0];\n    dDst[1] -= dSrc[1];\n    if (dDst[0] < 0) {\n        dDst[0] += PDP10.WORD_LIMIT;\n        dDst[1]--;\n    }\n};\n\n/**\n * ZEROD(d)\n *\n * True if all bits in the double-length value (d) are zero, false otherwise.\n *\n * @param {Array.<number>} d\n * @return {boolean}\n */\nPDP10.ZEROD = function(d)\n{\n    return !d[0] && !d[1];\n};\n\n/*\n * If we want the basic half-word operations to handle all the sub-operations; ie:\n *\n *      None\n *      Zero-extend\n *      One-extend\n *      Sign-extend\n *\n * then we need to alias all the sub-functions to the corresponding primary functions.\n */\nPDP10.opHLLZ    = PDP10.opHLL;\nPDP10.opHLLZI   = PDP10.opHLLI;\nPDP10.opHLLZM   = PDP10.opHLLM;\nPDP10.opHLLZS   = PDP10.opHLLS;\nPDP10.opHLLO    = PDP10.opHLL;\nPDP10.opHLLOI   = PDP10.opHLLI;\nPDP10.opHLLOM   = PDP10.opHLLM;\nPDP10.opHLLOS   = PDP10.opHLLS;\nPDP10.opHLLE    = PDP10.opHLL;\nPDP10.opHLLEI   = PDP10.opHLLI;\nPDP10.opHLLEM   = PDP10.opHLLM;\nPDP10.opHLLES   = PDP10.opHLLS;\nPDP10.opHRLZ    = PDP10.opHRL;\nPDP10.opHRLZI   = PDP10.opHRLI;\nPDP10.opHRLZM   = PDP10.opHRLM;\nPDP10.opHRLZS   = PDP10.opHRLS;\nPDP10.opHRLO    = PDP10.opHRL;\nPDP10.opHRLOI   = PDP10.opHRLI;\nPDP10.opHRLOM   = PDP10.opHRLM;\nPDP10.opHRLOS   = PDP10.opHRLS;\nPDP10.opHRLE    = PDP10.opHRL;\nPDP10.opHRLEI   = PDP10.opHRLI;\nPDP10.opHRLEM   = PDP10.opHRLM;\nPDP10.opHRLES   = PDP10.opHRLS;\nPDP10.opHRRZ    = PDP10.opHRR;\nPDP10.opHRRZI   = PDP10.opHRRI;\nPDP10.opHRRZM   = PDP10.opHRRM;\nPDP10.opHRRZS   = PDP10.opHRRS;\nPDP10.opHRRO    = PDP10.opHRR;\nPDP10.opHRROI   = PDP10.opHRRI;\nPDP10.opHRROM   = PDP10.opHRRM;\nPDP10.opHRROS   = PDP10.opHRRS;\nPDP10.opHRRE    = PDP10.opHRR;\nPDP10.opHRREI   = PDP10.opHRRI;\nPDP10.opHRREM   = PDP10.opHRRM;\nPDP10.opHRRES   = PDP10.opHRRS;\nPDP10.opHLRZ    = PDP10.opHLR;\nPDP10.opHLRZI   = PDP10.opHLRI;\nPDP10.opHLRZM   = PDP10.opHLRM;\nPDP10.opHLRZS   = PDP10.opHLRS;\nPDP10.opHLRO    = PDP10.opHLR;\nPDP10.opHLROI   = PDP10.opHLRI;\nPDP10.opHLROM   = PDP10.opHLRM;\nPDP10.opHLROS   = PDP10.opHLRS;\nPDP10.opHLRE    = PDP10.opHLR;\nPDP10.opHLREI   = PDP10.opHLRI;\nPDP10.opHLREM   = PDP10.opHLRM;\nPDP10.opHLRES   = PDP10.opHLRS;\n\nPDP10.opSETZI   = PDP10.opSETZ;\nPDP10.opSETOI   = PDP10.opSETO;\nPDP10.opSETCAI  = PDP10.opSETCA;\nPDP10.opSETA    = PDP10.opNOP;\nPDP10.opSETAI   = PDP10.opNOP;\nPDP10.opSETAM   = PDP10.opMOVEM;\nPDP10.opSETAB   = PDP10.opMOVEM;\nPDP10.opSETM    = PDP10.opMOVE;\nPDP10.opSETMI   = PDP10.opMOVEI;\nPDP10.opSETMM   = PDP10.opNOPM;\nPDP10.opSETMB   = PDP10.opMOVE;\nPDP10.opCAI     = PDP10.opNOP;\nPDP10.opCAM     = PDP10.opNOPM;\nPDP10.opJUMP    = PDP10.opNOP;\nPDP10.opTRN     = PDP10.opNOP;\nPDP10.opTLN     = PDP10.opNOP;\nPDP10.opTDN     = PDP10.opNOPM;\nPDP10.opTSN     = PDP10.opNOPM;\n\nPDP10.aOpXXX_KA10 = [\n    PDP10.opUUO,                // 0o000xxx\n    PDP10.opUUO,                // 0o001xxx\n    PDP10.opUUO,                // 0o002xxx\n    PDP10.opUUO,                // 0o003xxx\n    PDP10.opUUO,                // 0o004xxx\n    PDP10.opUUO,                // 0o005xxx\n    PDP10.opUUO,                // 0o006xxx\n    PDP10.opUUO,                // 0o007xxx\n    PDP10.opUUO,                // 0o010xxx\n    PDP10.opUUO,                // 0o011xxx\n    PDP10.opUUO,                // 0o012xxx\n    PDP10.opUUO,                // 0o013xxx\n    PDP10.opUUO,                // 0o014xxx\n    PDP10.opUUO,                // 0o015xxx\n    PDP10.opUUO,                // 0o016xxx\n    PDP10.opUUO,                // 0o017xxx\n    PDP10.opUUO,                // 0o020xxx\n    PDP10.opUUO,                // 0o021xxx\n    PDP10.opUUO,                // 0o022xxx\n    PDP10.opUUO,                // 0o023xxx\n    PDP10.opUUO,                // 0o024xxx\n    PDP10.opUUO,                // 0o025xxx\n    PDP10.opUUO,                // 0o026xxx\n    PDP10.opUUO,                // 0o027xxx\n    PDP10.opUUO,                // 0o030xxx\n    PDP10.opUUO,                // 0o031xxx\n    PDP10.opUUO,                // 0o032xxx\n    PDP10.opUUO,                // 0o033xxx\n    PDP10.opUUO,                // 0o034xxx\n    PDP10.opUUO,                // 0o035xxx\n    PDP10.opUUO,                // 0o036xxx\n    PDP10.opUUO,                // 0o037xxx\n    PDP10.opUUO,                // 0o040xxx\n    PDP10.opUUO,                // 0o041xxx\n    PDP10.opUUO,                // 0o042xxx\n    PDP10.opUUO,                // 0o043xxx\n    PDP10.opUUO,                // 0o044xxx\n    PDP10.opUUO,                // 0o045xxx\n    PDP10.opUUO,                // 0o046xxx\n    PDP10.opUUO,                // 0o047xxx\n    PDP10.opUUO,                // 0o050xxx\n    PDP10.opUUO,                // 0o051xxx\n    PDP10.opUUO,                // 0o052xxx\n    PDP10.opUUO,                // 0o053xxx\n    PDP10.opUUO,                // 0o054xxx\n    PDP10.opUUO,                // 0o055xxx\n    PDP10.opUUO,                // 0o056xxx\n    PDP10.opUUO,                // 0o057xxx\n    PDP10.opUUO,                // 0o060xxx\n    PDP10.opUUO,                // 0o061xxx\n    PDP10.opUUO,                // 0o062xxx\n    PDP10.opUUO,                // 0o063xxx\n    PDP10.opUUO,                // 0o064xxx\n    PDP10.opUUO,                // 0o065xxx\n    PDP10.opUUO,                // 0o066xxx\n    PDP10.opUUO,                // 0o067xxx\n    PDP10.opUUO,                // 0o070xxx\n    PDP10.opUUO,                // 0o071xxx\n    PDP10.opUUO,                // 0o072xxx\n    PDP10.opUUO,                // 0o073xxx\n    PDP10.opUUO,                // 0o074xxx\n    PDP10.opUUO,                // 0o075xxx\n    PDP10.opUUO,                // 0o076xxx\n    PDP10.opUUO,                // 0o077xxx\n    PDP10.opUndefined,          // 0o100xxx\n    PDP10.opUndefined,          // 0o101xxx\n    PDP10.opUndefined,          // 0o102xxx\n    PDP10.opUndefined,          // 0o103xxx\n    PDP10.opUndefined,          // 0o104xxx\n    PDP10.opUndefined,          // 0o105xxx\n    PDP10.opUndefined,          // 0o106xxx\n    PDP10.opUndefined,          // 0o107xxx\n    PDP10.opUndefined,          // 0o110xxx\n    PDP10.opUndefined,          // 0o111xxx\n    PDP10.opUndefined,          // 0o112xxx\n    PDP10.opUndefined,          // 0o113xxx\n    PDP10.opUndefined,          // 0o114xxx\n    PDP10.opUndefined,          // 0o115xxx\n    PDP10.opUndefined,          // 0o116xxx\n    PDP10.opUndefined,          // 0o117xxx\n    PDP10.opUndefined,          // 0o120xxx\n    PDP10.opUndefined,          // 0o121xxx\n    PDP10.opUndefined,          // 0o122xxx\n    PDP10.opUndefined,          // 0o123xxx\n    PDP10.opUndefined,          // 0o124xxx\n    PDP10.opUndefined,          // 0o125xxx\n    PDP10.opUndefined,          // 0o126xxx\n    PDP10.opUndefined,          // 0o127xxx\n    PDP10.opUFA,                // 0o130xxx\n    PDP10.opDFN,                // 0o131xxx\n    PDP10.opFSC,                // 0o132xxx\n    PDP10.opIBP,                // 0o133xxx\n    PDP10.opILDB,               // 0o134xxx\n    PDP10.opLDB,                // 0o135xxx\n    PDP10.opIDPB,               // 0o136xxx\n    PDP10.opDPB,                // 0o137xxx\n    PDP10.opFAD,                // 0o140xxx\n    PDP10.opFADI,               // 0o141xxx\n    PDP10.opFADM,               // 0o142xxx\n    PDP10.opFADB,               // 0o143xxx\n    PDP10.opFADR,               // 0o144xxx\n    PDP10.opFADRI,              // 0o145xxx\n    PDP10.opFADRM,              // 0o146xxx\n    PDP10.opFADRB,              // 0o147xxx\n    PDP10.opFSB,                // 0o150xxx\n    PDP10.opFSBI,               // 0o151xxx\n    PDP10.opFSBM,               // 0o152xxx\n    PDP10.opFSBB,               // 0o153xxx\n    PDP10.opFSBR,               // 0o154xxx\n    PDP10.opFSBRI,              // 0o155xxx\n    PDP10.opFSBRM,              // 0o156xxx\n    PDP10.opFSBRB,              // 0o157xxx\n    PDP10.opFMP,                // 0o160xxx\n    PDP10.opFMPI,               // 0o161xxx\n    PDP10.opFMPM,               // 0o162xxx\n    PDP10.opFMPB,               // 0o163xxx\n    PDP10.opFMPR,               // 0o164xxx\n    PDP10.opFMPRI,              // 0o165xxx\n    PDP10.opFMPRM,              // 0o166xxx\n    PDP10.opFMPRB,              // 0o167xxx\n    PDP10.opFDV,                // 0o170xxx\n    PDP10.opFDVI,               // 0o171xxx\n    PDP10.opFDVM,               // 0o172xxx\n    PDP10.opFDVB,               // 0o173xxx\n    PDP10.opFDVR,               // 0o174xxx\n    PDP10.opFDVRI,              // 0o175xxx\n    PDP10.opFDVRM,              // 0o176xxx\n    PDP10.opFDVRB,              // 0o177xxx\n    PDP10.opMOVE,               // 0o200xxx\n    PDP10.opMOVEI,              // 0o201xxx\n    PDP10.opMOVEM,              // 0o202xxx\n    PDP10.opMOVES,              // 0o203xxx\n    PDP10.opMOVS,               // 0o204xxx\n    PDP10.opMOVSI,              // 0o205xxx\n    PDP10.opMOVSM,              // 0o206xxx\n    PDP10.opMOVSS,              // 0o207xxx\n    PDP10.opMOVN,               // 0o210xxx\n    PDP10.opMOVNI,              // 0o211xxx\n    PDP10.opMOVNM,              // 0o212xxx\n    PDP10.opMOVNS,              // 0o213xxx\n    PDP10.opMOVM,               // 0o214xxx\n    PDP10.opMOVMI,              // 0o215xxx\n    PDP10.opMOVMM,              // 0o216xxx\n    PDP10.opMOVMS,              // 0o217xxx\n    PDP10.opIMUL,               // 0o220xxx\n    PDP10.opIMULI,              // 0o221xxx\n    PDP10.opIMULM,              // 0o222xxx\n    PDP10.opIMULB,              // 0o223xxx\n    PDP10.opMUL,                // 0o224xxx\n    PDP10.opMULI,               // 0o225xxx\n    PDP10.opMULM,               // 0o226xxx\n    PDP10.opMULB,               // 0o227xxx\n    PDP10.opIDIV,               // 0o230xxx\n    PDP10.opIDIVI,              // 0o231xxx\n    PDP10.opIDIVM,              // 0o232xxx\n    PDP10.opIDIVB,              // 0o233xxx\n    PDP10.opDIV,                // 0o234xxx\n    PDP10.opDIVI,               // 0o235xxx\n    PDP10.opDIVM,               // 0o236xxx\n    PDP10.opDIVB,               // 0o237xxx\n    PDP10.opASH,                // 0o240xxx\n    PDP10.opROT,                // 0o241xxx\n    PDP10.opLSH,                // 0o242xxx\n    PDP10.opJFFO,               // 0o243xxx\n    PDP10.opASHC,               // 0o244xxx\n    PDP10.opROTC,               // 0o245xxx\n    PDP10.opLSHC,               // 0o246xxx\n    PDP10.opUndefined,          // 0o247xxx\n    PDP10.opEXCH,               // 0o250xxx\n    PDP10.opBLT,                // 0o251xxx\n    PDP10.opAOBJP,              // 0o252xxx\n    PDP10.opAOBJN,              // 0o253xxx\n    PDP10.opJRST,               // 0o254xxx\n    PDP10.opJFCL,               // 0o255xxx\n    PDP10.opXCT,                // 0o256xxx\n    PDP10.opUndefined,          // 0o257xxx\n    PDP10.opPUSHJ,              // 0o260xxx\n    PDP10.opPUSH,               // 0o261xxx\n    PDP10.opPOP,                // 0o262xxx\n    PDP10.opPOPJ,               // 0o263xxx\n    PDP10.opJSR,                // 0o264xxx\n    PDP10.opJSP,                // 0o265xxx\n    PDP10.opJSA,                // 0o266xxx\n    PDP10.opJRA,                // 0o267xxx\n    PDP10.opADD,                // 0o270xxx\n    PDP10.opADDI,               // 0o271xxx\n    PDP10.opADDM,               // 0o272xxx\n    PDP10.opADDB,               // 0o273xxx\n    PDP10.opSUB,                // 0o274xxx\n    PDP10.opSUBI,               // 0o275xxx\n    PDP10.opSUBM,               // 0o276xxx\n    PDP10.opSUBB,               // 0o277xxx\n    PDP10.opCAI,                // 0o300xxx\n    PDP10.opCAIL,               // 0o301xxx\n    PDP10.opCAIE,               // 0o302xxx\n    PDP10.opCAILE,              // 0o303xxx\n    PDP10.opCAIA,               // 0o304xxx\n    PDP10.opCAIGE,              // 0o305xxx\n    PDP10.opCAIN,               // 0o306xxx\n    PDP10.opCAIG,               // 0o307xxx\n    PDP10.opCAM,                // 0o310xxx\n    PDP10.opCAML,               // 0o311xxx\n    PDP10.opCAME,               // 0o312xxx\n    PDP10.opCAMLE,              // 0o313xxx\n    PDP10.opCAMA,               // 0o314xxx\n    PDP10.opCAMGE,              // 0o315xxx\n    PDP10.opCAMN,               // 0o316xxx\n    PDP10.opCAMG,               // 0o317xxx\n    PDP10.opJUMP,               // 0o320xxx\n    PDP10.opJUMPL,              // 0o321xxx\n    PDP10.opJUMPE,              // 0o322xxx\n    PDP10.opJUMPLE,             // 0o323xxx\n    PDP10.opJUMPA,              // 0o324xxx\n    PDP10.opJUMPGE,             // 0o325xxx\n    PDP10.opJUMPN,              // 0o326xxx\n    PDP10.opJUMPG,              // 0o327xxx\n    PDP10.opSKIP,               // 0o330xxx\n    PDP10.opSKIPL,              // 0o331xxx\n    PDP10.opSKIPE,              // 0o332xxx\n    PDP10.opSKIPLE,             // 0o333xxx\n    PDP10.opSKIPA,              // 0o334xxx\n    PDP10.opSKIPGE,             // 0o335xxx\n    PDP10.opSKIPN,              // 0o336xxx\n    PDP10.opSKIPG,              // 0o337xxx\n    PDP10.opAOJ,                // 0o340xxx\n    PDP10.opAOJL,               // 0o341xxx\n    PDP10.opAOJE,               // 0o342xxx\n    PDP10.opAOJLE,              // 0o343xxx\n    PDP10.opAOJA,               // 0o344xxx\n    PDP10.opAOJGE,              // 0o345xxx\n    PDP10.opAOJN,               // 0o346xxx\n    PDP10.opAOJG,               // 0o347xxx\n    PDP10.opAOS,                // 0o350xxx\n    PDP10.opAOSL,               // 0o351xxx\n    PDP10.opAOSE,               // 0o352xxx\n    PDP10.opAOSLE,              // 0o353xxx\n    PDP10.opAOSA,               // 0o354xxx\n    PDP10.opAOSGE,              // 0o355xxx\n    PDP10.opAOSN,               // 0o356xxx\n    PDP10.opAOSG,               // 0o357xxx\n    PDP10.opSOJ,                // 0o360xxx\n    PDP10.opSOJL,               // 0o361xxx\n    PDP10.opSOJE,               // 0o362xxx\n    PDP10.opSOJLE,              // 0o363xxx\n    PDP10.opSOJA,               // 0o364xxx\n    PDP10.opSOJGE,              // 0o365xxx\n    PDP10.opSOJN,               // 0o366xxx\n    PDP10.opSOJG,               // 0o367xxx\n    PDP10.opSOS,                // 0o370xxx\n    PDP10.opSOSL,               // 0o371xxx\n    PDP10.opSOSE,               // 0o372xxx\n    PDP10.opSOSLE,              // 0o373xxx\n    PDP10.opSOSA,               // 0o374xxx\n    PDP10.opSOSGE,              // 0o375xxx\n    PDP10.opSOSN,               // 0o376xxx\n    PDP10.opSOSG,               // 0o377xxx\n    PDP10.opSETZ,               // 0o400xxx\n    PDP10.opSETZI,              // 0o401xxx\n    PDP10.opSETZM,              // 0o402xxx\n    PDP10.opSETZB,              // 0o403xxx\n    PDP10.opAND,                // 0o404xxx\n    PDP10.opANDI,               // 0o405xxx\n    PDP10.opANDM,               // 0o406xxx\n    PDP10.opANDB,               // 0o407xxx\n    PDP10.opANDCA,              // 0o410xxx\n    PDP10.opANDCAI,             // 0o411xxx\n    PDP10.opANDCAM,             // 0o412xxx\n    PDP10.opANDCAB,             // 0o413xxx\n    PDP10.opSETM,               // 0o414xxx\n    PDP10.opSETMI,              // 0o415xxx\n    PDP10.opSETMM,              // 0o416xxx\n    PDP10.opSETMB,              // 0o417xxx\n    PDP10.opANDCM,              // 0o420xxx\n    PDP10.opANDCMI,             // 0o421xxx\n    PDP10.opANDCMM,             // 0o422xxx\n    PDP10.opANDCMB,             // 0o423xxx\n    PDP10.opSETA,               // 0o424xxx\n    PDP10.opSETAI,              // 0o425xxx\n    PDP10.opSETAM,              // 0o426xxx\n    PDP10.opSETAB,              // 0o427xxx\n    PDP10.opXOR,                // 0o430xxx\n    PDP10.opXORI,               // 0o431xxx\n    PDP10.opXORM,               // 0o432xxx\n    PDP10.opXORB,               // 0o433xxx\n    PDP10.opIOR,                // 0o434xxx\n    PDP10.opIORI,               // 0o435xxx\n    PDP10.opIORM,               // 0o436xxx\n    PDP10.opIORB,               // 0o437xxx\n    PDP10.opANDCB,              // 0o440xxx\n    PDP10.opANDCBI,             // 0o441xxx\n    PDP10.opANDCBM,             // 0o442xxx\n    PDP10.opANDCBB,             // 0o443xxx\n    PDP10.opEQV,                // 0o444xxx\n    PDP10.opEQVI,               // 0o445xxx\n    PDP10.opEQVM,               // 0o446xxx\n    PDP10.opEQVB,               // 0o447xxx\n    PDP10.opSETCA,              // 0o450xxx\n    PDP10.opSETCAI,             // 0o451xxx\n    PDP10.opSETCAM,             // 0o452xxx\n    PDP10.opSETCAB,             // 0o453xxx\n    PDP10.opORCA,               // 0o454xxx\n    PDP10.opORCAI,              // 0o455xxx\n    PDP10.opORCAM,              // 0o456xxx\n    PDP10.opORCAB,              // 0o457xxx\n    PDP10.opSETCM,              // 0o460xxx\n    PDP10.opSETCMI,             // 0o461xxx\n    PDP10.opSETCMM,             // 0o462xxx\n    PDP10.opSETCMB,             // 0o463xxx\n    PDP10.opORCM,               // 0o464xxx\n    PDP10.opORCMI,              // 0o465xxx\n    PDP10.opORCMM,              // 0o466xxx\n    PDP10.opORCMB,              // 0o467xxx\n    PDP10.opORCB,               // 0o470xxx\n    PDP10.opORCBI,              // 0o471xxx\n    PDP10.opORCBM,              // 0o472xxx\n    PDP10.opORCBB,              // 0o473xxx\n    PDP10.opSETO,               // 0o474xxx\n    PDP10.opSETOI,              // 0o475xxx\n    PDP10.opSETOM,              // 0o476xxx\n    PDP10.opSETOB,              // 0o477xxx\n    PDP10.opHLL,                // 0o500xxx\n    PDP10.opHLLI,               // 0o501xxx\n    PDP10.opHLLM,               // 0o502xxx\n    PDP10.opHLLS,               // 0o503xxx\n    PDP10.opHRL,                // 0o504xxx\n    PDP10.opHRLI,               // 0o505xxx\n    PDP10.opHRLM,               // 0o506xxx\n    PDP10.opHRLS,               // 0o507xxx\n    PDP10.opHLLZ,               // 0o510xxx\n    PDP10.opHLLZI,              // 0o511xxx\n    PDP10.opHLLZM,              // 0o512xxx\n    PDP10.opHLLZS,              // 0o513xxx\n    PDP10.opHRLZ,               // 0o514xxx\n    PDP10.opHRLZI,              // 0o515xxx\n    PDP10.opHRLZM,              // 0o516xxx\n    PDP10.opHRLZS,              // 0o517xxx\n    PDP10.opHLLO,               // 0o520xxx\n    PDP10.opHLLOI,              // 0o521xxx\n    PDP10.opHLLOM,              // 0o522xxx\n    PDP10.opHLLOS,              // 0o523xxx\n    PDP10.opHRLO,               // 0o524xxx\n    PDP10.opHRLOI,              // 0o525xxx\n    PDP10.opHRLOM,              // 0o526xxx\n    PDP10.opHRLOS,              // 0o527xxx\n    PDP10.opHLLE,               // 0o530xxx\n    PDP10.opHLLEI,              // 0o531xxx\n    PDP10.opHLLEM,              // 0o532xxx\n    PDP10.opHLLES,              // 0o533xxx\n    PDP10.opHRLE,               // 0o534xxx\n    PDP10.opHRLEI,              // 0o535xxx\n    PDP10.opHRLEM,              // 0o536xxx\n    PDP10.opHRLES,              // 0o537xxx\n    PDP10.opHRR,                // 0o540xxx\n    PDP10.opHRRI,               // 0o541xxx\n    PDP10.opHRRM,               // 0o542xxx\n    PDP10.opHRRS,               // 0o543xxx\n    PDP10.opHLR,                // 0o544xxx\n    PDP10.opHLRI,               // 0o545xxx\n    PDP10.opHLRM,               // 0o546xxx\n    PDP10.opHLRS,               // 0o547xxx\n    PDP10.opHRRZ,               // 0o550xxx\n    PDP10.opHRRZI,              // 0o551xxx\n    PDP10.opHRRZM,              // 0o552xxx\n    PDP10.opHRRZS,              // 0o553xxx\n    PDP10.opHLRZ,               // 0o554xxx\n    PDP10.opHLRZI,              // 0o555xxx\n    PDP10.opHLRZM,              // 0o556xxx\n    PDP10.opHLRZS,              // 0o557xxx\n    PDP10.opHRRO,               // 0o560xxx\n    PDP10.opHRROI,              // 0o561xxx\n    PDP10.opHRROM,              // 0o562xxx\n    PDP10.opHRROS,              // 0o563xxx\n    PDP10.opHLRO,               // 0o564xxx\n    PDP10.opHLROI,              // 0o565xxx\n    PDP10.opHLROM,              // 0o566xxx\n    PDP10.opHLROS,              // 0o567xxx\n    PDP10.opHRRE,               // 0o570xxx\n    PDP10.opHRREI,              // 0o571xxx\n    PDP10.opHRREM,              // 0o572xxx\n    PDP10.opHRRES,              // 0o573xxx\n    PDP10.opHLRE,               // 0o574xxx\n    PDP10.opHLREI,              // 0o575xxx\n    PDP10.opHLREM,              // 0o576xxx\n    PDP10.opHLRES,              // 0o577xxx\n    PDP10.opTRN,                // 0o600xxx\n    PDP10.opTLN,                // 0o601xxx\n    PDP10.opTRNE,               // 0o602xxx\n    PDP10.opTLNE,               // 0o603xxx\n    PDP10.opTRNA,               // 0o604xxx\n    PDP10.opTLNA,               // 0o605xxx\n    PDP10.opTRNN,               // 0o606xxx\n    PDP10.opTLNN,               // 0o607xxx\n    PDP10.opTDN,                // 0o610xxx\n    PDP10.opTSN,                // 0o611xxx\n    PDP10.opTDNE,               // 0o612xxx\n    PDP10.opTSNE,               // 0o613xxx\n    PDP10.opTDNA,               // 0o614xxx\n    PDP10.opTSNA,               // 0o615xxx\n    PDP10.opTDNN,               // 0o616xxx\n    PDP10.opTSNN,               // 0o617xxx\n    PDP10.opTRZ,                // 0o620xxx\n    PDP10.opTLZ,                // 0o621xxx\n    PDP10.opTRZE,               // 0o622xxx\n    PDP10.opTLZE,               // 0o623xxx\n    PDP10.opTRZA,               // 0o624xxx\n    PDP10.opTLZA,               // 0o625xxx\n    PDP10.opTRZN,               // 0o626xxx\n    PDP10.opTLZN,               // 0o627xxx\n    PDP10.opTDZ,                // 0o630xxx\n    PDP10.opTSZ,                // 0o631xxx\n    PDP10.opTDZE,               // 0o632xxx\n    PDP10.opTSZE,               // 0o633xxx\n    PDP10.opTDZA,               // 0o634xxx\n    PDP10.opTSZA,               // 0o635xxx\n    PDP10.opTDZN,               // 0o636xxx\n    PDP10.opTSZN,               // 0o637xxx\n    PDP10.opTRC,                // 0o640xxx\n    PDP10.opTLC,                // 0o641xxx\n    PDP10.opTRCE,               // 0o642xxx\n    PDP10.opTLCE,               // 0o643xxx\n    PDP10.opTRCA,               // 0o644xxx\n    PDP10.opTLCA,               // 0o645xxx\n    PDP10.opTRCN,               // 0o646xxx\n    PDP10.opTLCN,               // 0o647xxx\n    PDP10.opTDC,                // 0o650xxx\n    PDP10.opTSC,                // 0o651xxx\n    PDP10.opTDCE,               // 0o652xxx\n    PDP10.opTSCE,               // 0o653xxx\n    PDP10.opTDCA,               // 0o654xxx\n    PDP10.opTSCA,               // 0o655xxx\n    PDP10.opTDCN,               // 0o656xxx\n    PDP10.opTSCN,               // 0o657xxx\n    PDP10.opTRO,                // 0o660xxx\n    PDP10.opTLO,                // 0o661xxx\n    PDP10.opTROE,               // 0o662xxx\n    PDP10.opTLOE,               // 0o663xxx\n    PDP10.opTROA,               // 0o664xxx\n    PDP10.opTLOA,               // 0o665xxx\n    PDP10.opTRON,               // 0o666xxx\n    PDP10.opTLON,               // 0o667xxx\n    PDP10.opTDO,                // 0o670xxx\n    PDP10.opTSO,                // 0o671xxx\n    PDP10.opTDOE,               // 0o672xxx\n    PDP10.opTSOE,               // 0o673xxx\n    PDP10.opTDOA,               // 0o674xxx\n    PDP10.opTSOA,               // 0o675xxx\n    PDP10.opTDON,               // 0o676xxx\n    PDP10.opTSON,               // 0o677xxx\n    PDP10.opIO,                 // 0o700xxx\n    PDP10.opIO,                 // 0o701xxx\n    PDP10.opIO,                 // 0o702xxx\n    PDP10.opIO,                 // 0o703xxx\n    PDP10.opIO,                 // 0o704xxx\n    PDP10.opIO,                 // 0o705xxx\n    PDP10.opIO,                 // 0o706xxx\n    PDP10.opIO,                 // 0o707xxx\n    PDP10.opIO,                 // 0o710xxx\n    PDP10.opIO,                 // 0o711xxx\n    PDP10.opIO,                 // 0o712xxx\n    PDP10.opIO,                 // 0o713xxx\n    PDP10.opIO,                 // 0o714xxx\n    PDP10.opIO,                 // 0o715xxx\n    PDP10.opIO,                 // 0o716xxx\n    PDP10.opIO,                 // 0o717xxx\n    PDP10.opIO,                 // 0o720xxx\n    PDP10.opIO,                 // 0o721xxx\n    PDP10.opIO,                 // 0o722xxx\n    PDP10.opIO,                 // 0o723xxx\n    PDP10.opIO,                 // 0o724xxx\n    PDP10.opIO,                 // 0o725xxx\n    PDP10.opIO,                 // 0o726xxx\n    PDP10.opIO,                 // 0o727xxx\n    PDP10.opIO,                 // 0o730xxx\n    PDP10.opIO,                 // 0o731xxx\n    PDP10.opIO,                 // 0o732xxx\n    PDP10.opIO,                 // 0o733xxx\n    PDP10.opIO,                 // 0o734xxx\n    PDP10.opIO,                 // 0o735xxx\n    PDP10.opIO,                 // 0o736xxx\n    PDP10.opIO,                 // 0o737xxx\n    PDP10.opIO,                 // 0o740xxx\n    PDP10.opIO,                 // 0o741xxx\n    PDP10.opIO,                 // 0o742xxx\n    PDP10.opIO,                 // 0o743xxx\n    PDP10.opIO,                 // 0o744xxx\n    PDP10.opIO,                 // 0o745xxx\n    PDP10.opIO,                 // 0o746xxx\n    PDP10.opIO,                 // 0o747xxx\n    PDP10.opIO,                 // 0o750xxx\n    PDP10.opIO,                 // 0o751xxx\n    PDP10.opIO,                 // 0o752xxx\n    PDP10.opIO,                 // 0o753xxx\n    PDP10.opIO,                 // 0o754xxx\n    PDP10.opIO,                 // 0o755xxx\n    PDP10.opIO,                 // 0o756xxx\n    PDP10.opIO,                 // 0o757xxx\n    PDP10.opIO,                 // 0o760xxx\n    PDP10.opIO,                 // 0o761xxx\n    PDP10.opIO,                 // 0o762xxx\n    PDP10.opIO,                 // 0o763xxx\n    PDP10.opIO,                 // 0o764xxx\n    PDP10.opIO,                 // 0o765xxx\n    PDP10.opIO,                 // 0o766xxx\n    PDP10.opIO,                 // 0o767xxx\n    PDP10.opIO,                 // 0o770xxx\n    PDP10.opIO,                 // 0o771xxx\n    PDP10.opIO,                 // 0o772xxx\n    PDP10.opIO,                 // 0o773xxx\n    PDP10.opIO,                 // 0o774xxx\n    PDP10.opIO,                 // 0o775xxx\n    PDP10.opIO,                 // 0o776xxx\n    PDP10.opIO                  // 0o777xxx\n];\n\nPDP10.aOpIO_KA10 = [\n    PDP10.opBLKI,               // 0o70000x\n    PDP10.opDATAI,              // 0o70004x\n    PDP10.opBLKO,               // 0o70010x\n    PDP10.opDATAO,              // 0o70014x\n    PDP10.opCONO,               // 0o70020x\n    PDP10.opCONI,               // 0o70024x\n    PDP10.opCONSZ,              // 0o70030x\n    PDP10.opCONSO               // 0o70034x\n];\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp10/lib/rom.js (C) Jeff Parsons 2012-2018\n */\n\n\nclass ROMPDP10 extends Component {\n    /**\n     * ROMPDP10(parmsROM)\n     *\n     * The ROMPDP10 component expects the following (parmsROM) properties:\n     *\n     *      addr: physical address of ROM\n     *      size: amount of ROM, in bytes\n     *      alias: physical alias address (null if none)\n     *      file: name of ROM data file\n     *\n     * NOTE: The ROM data will not be copied into place until the Bus is ready (see initBus()) AND\n     * the ROM data file has finished loading (see finishLoad()).\n     *\n     * Also, while the size parameter may seem redundant, I consider it useful to confirm that the ROM\n     * you received is the ROM you expected.\n     *\n     * @param {Object} parmsROM\n     */\n    constructor(parmsROM)\n    {\n        super(\"ROM\", parmsROM, MessagesPDP10.ROM);\n\n        this.abInit = null;\n        this.aSymbols = null;\n\n        this.addrROM = +parmsROM['addr'];\n        this.sizeROM = +parmsROM['size'];\n        this.fRetainROM = false;\n\n        /*\n         * The new 'alias' property can now be EITHER a single physical address (like 'addr') OR an array of\n         * physical addresses; eg:\n         *\n         *      [0xf0000,0xffff0000,0xffff8000]\n         *\n         * We could have overloaded 'addr' to accomplish the same thing, but I think it's better to have any\n         * aliased locations listed under a separate property.\n         *\n         * Most ROMs are not aliased, in which case the 'alias' property should have the default value of null.\n         */\n        this.addrAlias = parmsROM['alias'];\n        if (typeof this.addrAlias == \"string\") {\n            this.addrAlias = eval(this.addrAlias);\n        }\n\n        this.sFilePath = parmsROM['file'];\n        this.sFileName = Str.getBaseName(this.sFilePath);\n\n        if (this.sFilePath) {\n            var sFileURL = this.sFilePath;\n            if (DEBUG) this.log('load(\"' + sFileURL + '\")');\n            /*\n             * If the selected ROM file has a \".json\" extension, then we assume it's pre-converted\n             * JSON-encoded ROM data, so we load it as-is; ditto for ROM files with a \".hex\" extension.\n             * Otherwise, we ask our server-side ROM converter to return the file in a JSON-compatible format.\n             */\n            var sFileExt = Str.getExtension(this.sFileName);\n            if (sFileExt != DumpAPI.FORMAT.JSON && sFileExt != DumpAPI.FORMAT.HEX) {\n                sFileURL = Web.getHost() + DumpAPI.ENDPOINT + '?' + DumpAPI.QUERY.FILE + '=' + this.sFilePath + '&' + DumpAPI.QUERY.FORMAT + '=' + DumpAPI.FORMAT.BYTES + '&' + DumpAPI.QUERY.DECIMAL + '=true';\n            }\n            var rom = this;\n            Web.getResource(sFileURL, null, true, function doneLoad(sURL, sResponse, nErrorCode) {\n                rom.finishLoad(sURL, sResponse, nErrorCode);\n            });\n        }\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * @this {ROMPDP10}\n     * @param {ComputerPDP10} cmp\n     * @param {BusPDP10} bus\n     * @param {CPUStatePDP10} cpu\n     * @param {DebuggerPDP10} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.bus = bus;\n        this.cpu = cpu;\n        this.dbg = dbg;\n        this.initROM();\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {ROMPDP10}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        if (this.aSymbols) {\n            if (this.dbg) {\n                this.dbg.addSymbols(this.id, this.addrROM, this.sizeROM, this.aSymbols);\n            }\n            /*\n             * Our only role in the handling of symbols is to hand them off to the Debugger at our\n             * first opportunity. Now that we've done that, our copy of the symbols, if any, are toast.\n             */\n            delete this.aSymbols;\n        }\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * Since we have nothing to do on powerDown(), and no state to return, we could simply omit\n     * this function.  But it doesn't hurt anything, and maybe we'll use our state to save something\n     * useful down the road, like user-defined symbols (ie, symbols that the Debugger may have\n     * created, above and beyond those symbols we automatically loaded, if any, along with the ROM).\n     *\n     * @this {ROMPDP10}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        return true;\n    }\n\n    /**\n     * finishLoad(sURL, sData, nErrorCode)\n     *\n     * @this {ROMPDP10}\n     * @param {string} sURL\n     * @param {string} sData\n     * @param {number} nErrorCode (response from server if anything other than 200)\n     */\n    finishLoad(sURL, sData, nErrorCode)\n    {\n        if (nErrorCode) {\n            this.notice(\"Unable to load ROM resource (error \" + nErrorCode + \": \" + sURL + \")\");\n            this.sFilePath = null;\n        }\n        else {\n            Component.addMachineResource(this.idMachine, sURL, sData);\n            var resource = Web.parseMemoryResource(sURL, sData);\n            if (resource) {\n                this.abInit = resource.aBytes;\n                this.aSymbols = resource.aSymbols;\n            } else {\n                this.sFilePath = null;\n            }\n        }\n        this.initROM();\n    }\n\n    /**\n     * initROM()\n     *\n     * This function is called by both initBus() and finishLoad(), but it cannot copy the initial data into place\n     * until after initBus() has received the Bus component AND finishLoad() has received the data.  When both those\n     * criteria are satisfied, the component becomes \"ready\".\n     *\n     * @this {ROMPDP10}\n     */\n    initROM()\n    {\n        if (!this.isReady()) {\n            if (this.sFilePath) {\n                /*\n                 * Too early...\n                 */\n                if (!this.abInit || !this.bus) return;\n\n                /*\n                 * If no explicit size was specified, then use whatever the actual size is.\n                 */\n                if (!this.sizeROM) {\n                    this.sizeROM = this.abInit.length;\n                }\n                if (this.abInit.length != this.sizeROM) {\n                    /*\n                     * Note that setError() sets the component's fError flag, which in turn prevents setReady() from\n                     * marking the component ready.  TODO: Revisit this decision.  On the one hand, it sounds like a\n                     * good idea to stop the machine in its tracks whenever a setError() occurs, but there may also be\n                     * times when we'd like to forge ahead anyway.\n                     */\n                    this.setError(\"ROM size (\" + Str.toHexLong(this.abInit.length) + \") does not match specified size (\" + Str.toHexLong(this.sizeROM) + \")\");\n                }\n                else if (this.addROM(this.addrROM)) {\n\n                    var aliases = [];\n                    if (typeof this.addrAlias == \"number\") {\n                        aliases.push(this.addrAlias);\n                    } else if (this.addrAlias != null && this.addrAlias.length) {\n                        aliases = this.addrAlias;\n                    }\n                    for (var i = 0; i < aliases.length; i++) {\n                        this.cloneROM(aliases[i]);\n                    }\n                    /*\n                     * We used to hang onto the initial ROM data so that we could restore any bytes the CPU overwrote,\n                     * using memory write-notification handlers, but with the introduction of read-only memory blocks, that's\n                     * no longer necessary.\n                     *\n                     * TODO: Consider an option to retain the ROM data, and give the user some way of restoring ROMs.\n                     * That may be useful for \"resumable\" machines that save/restore all dirty block of memory, regardless\n                     * whether they're ROM or RAM.  However, the only way to modify a machine's ROM is with the Debugger,\n                     * and Debugger users should know better.\n                     */\n                    if (!this.fRetainROM) {\n                        delete this.abInit;\n                    }\n                }\n            }\n            this.setReady();\n        }\n    }\n\n    /**\n     * addROM(addr)\n     *\n     * @this {ROMPDP10}\n     * @param {number} addr\n     * @return {boolean}\n     */\n    addROM(addr)\n    {\n        if (this.bus.addMemory(addr, this.sizeROM, MemoryPDP10.TYPE.ROM)) {\n            if (DEBUG) this.log(\"addROM(): copying ROM to \" + Str.toHexLong(addr) + \" (\" + Str.toHexLong(this.abInit.length) + \" bytes)\");\n            var i;\n            for (i = 0; i < this.abInit.length; i++) {\n                this.bus.setWordDirect(addr + i, this.abInit[i]);\n            }\n            return true;\n        }\n\n        /*\n         * We don't need to report an error here, because addMemory() already takes care of that.\n         */\n        return false;\n    }\n\n    /**\n     * cloneROM(addr)\n     *\n     * For ROMs with one or more alias addresses, we used to call addROM() for each address.  However,\n     * that obviously wasted memory, since each alias was an independent copy, and if you used the\n     * Debugger to edit the ROM in one location, the changes would not appear in the other location(s).\n     *\n     * Now that the Bus component provides low-level getMemoryBlocks() and setMemoryBlocks() methods\n     * to manually get and set the blocks of any memory range, it is now possible to create true aliases.\n     *\n     * @this {ROMPDP10}\n     * @param {number} addr\n     */\n    cloneROM(addr)\n    {\n        var aBlocks = this.bus.getMemoryBlocks(this.addrROM, this.sizeROM);\n        this.bus.setMemoryBlocks(addr, this.sizeROM, aBlocks);\n    }\n\n    /**\n     * ROMPDP10.init()\n     *\n     * This function operates on every HTML element of class \"rom\", extracting the\n     * JSON-encoded parameters for the ROMPDP10 constructor from the element's \"data-value\"\n     * attribute, invoking the constructor to create a ROMPDP10 component, and then binding\n     * any associated HTML controls to the new component.\n     */\n    static init()\n    {\n        var aeROM = Component.getElementsByClass(document, PDP10.APPCLASS, \"rom\");\n        for (var iROM = 0; iROM < aeROM.length; iROM++) {\n            var eROM = aeROM[iROM];\n            var parmsROM = Component.getComponentParms(eROM);\n            var rom = new ROMPDP10(parmsROM);\n            Component.bindComponentControls(rom, eROM, PDP10.APPCLASS);\n        }\n    }\n}\n\n/*\n * NOTE: There's currently no need for this component to have a reset() function, since\n * once the ROM data is loaded, it can't be changed, so there's nothing to reinitialize.\n *\n * OK, well, I take that back, because the Debugger, if installed, has the ability to modify\n * ROM contents, so in that case, having a reset() function that restores the original ROM data\n * might be useful; then again, it might not, depending on what you're trying to debug.\n *\n * If we do add reset(), then we'll want to change initROM() to hang onto the original\n * ROM data; currently, we release it after copying it into the read-only memory allocated\n * via bus.addMemory().\n */\n\n/*\n * Initialize all the ROMPDP10 modules on the page.\n */\nWeb.onInit(ROMPDP10.init);\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp10/lib/ram.js (C) Jeff Parsons 2012-2018\n */\n\n\nclass RAMPDP10 extends Component {\n    /**\n     * RAMPDP10(parmsRAM)\n     *\n     * The RAMPDP10 component expects the following (parmsRAM) properties:\n     *\n     *      addr: starting physical address of RAM (default is 0)\n     *      size: amount of RAM, in bytes (default is 0, which means defer to motherboard switch settings)\n     *      file: name of optional data file to load into RAM (default is \"\")\n     *      load: optional file load address (overrides any load address specified in the data file; default is null)\n     *      exec: optional file exec address (overrides any exec address specified in the data file; default is null)\n     *\n     * NOTE: We make a note of the specified size, but no memory is initially allocated for the RAM until the\n     * Computer component calls powerUp().\n     *\n     * @param {Object} parmsRAM\n     */\n    constructor(parmsRAM)\n    {\n        super(\"RAM\", parmsRAM);\n\n        this.aData = null;\n        this.aSymbols = null;\n\n        this.addrRAM = +parmsRAM['addr'];\n        this.sizeRAM = +parmsRAM['size'];\n\n        this.addrLoad = parmsRAM['load'];\n        this.addrExec = parmsRAM['exec'];\n        if (this.addrLoad != null) this.addrLoad = +this.addrLoad;\n        if (this.addrExec != null) this.addrExec = +this.addrExec;\n\n        this.fInstalled = (!!this.sizeRAM); // 0 is the default value for 'size' when none is specified\n        this.fAllocated = this.fReset = false;\n\n        this.sFilePath = parmsRAM['file'];\n        this.sFileName = Str.getBaseName(this.sFilePath);\n\n        if (this.sFilePath) {\n            var sFileURL = this.sFilePath;\n            if (DEBUG) this.log('load(\"' + sFileURL + '\")');\n            /*\n             * If the selected data file has a \".json\" extension, then we assume it's pre-converted\n             * JSON-encoded data, so we load it as-is; ditto for ROM files with a \".hex\" extension.\n             * Otherwise, we ask our server-side converter to return the file in a JSON-compatible format.\n             */\n            var sFileExt = Str.getExtension(this.sFileName);\n            if (sFileExt != DumpAPI.FORMAT.JSON && sFileExt != DumpAPI.FORMAT.HEX) {\n                sFileURL = Web.getHost() + DumpAPI.ENDPOINT + '?' + DumpAPI.QUERY.FILE + '=' + this.sFilePath + '&' + DumpAPI.QUERY.FORMAT + '=' + DumpAPI.FORMAT.BYTES + '&' + DumpAPI.QUERY.DECIMAL + '=true';\n            }\n            var ram = this;\n            Web.getResource(sFileURL, null, true, function doneLoad(sURL, sResponse, nErrorCode) {\n                ram.finishLoad(sURL, sResponse, nErrorCode);\n            });\n        }\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * @this {RAMPDP10}\n     * @param {ComputerPDP10} cmp\n     * @param {BusPDP10} bus\n     * @param {CPUStatePDP10} cpu\n     * @param {DebuggerPDP10} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.bus = bus;\n        this.cpu = cpu;\n        this.dbg = dbg;\n        this.initRAM();\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {RAMPDP10}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        if (this.aSymbols) {\n            if (this.dbg) {\n                this.dbg.addSymbols(this.id, this.addrRAM, this.sizeRAM, this.aSymbols);\n            }\n            /*\n             * Our only role in the handling of symbols is to hand them off to the Debugger at our\n             * first opportunity. Now that we've done that, our copy of the symbols, if any, are toast.\n             */\n            delete this.aSymbols;\n        }\n        if (!fRepower) {\n            /*\n             * Since we use the Bus to allocate all our memory, memory contents are already restored for us,\n             * so we don't save any state, and therefore no state should be restored.  Just do a reset().\n             */\n\n            this.reset();\n        }\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {RAMPDP10}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        /*\n         * The Computer powers down the CPU first, at which point CPUState state is saved,\n         * which includes the Bus state, and since we use the Bus component to allocate all\n         * our memory, memory contents are already saved for us, so we don't need the usual\n         * save logic.\n         */\n        return true;\n    }\n\n    /**\n     * finishLoad(sURL, sData, nErrorCode)\n     *\n     * @this {RAMPDP10}\n     * @param {string} sURL\n     * @param {string} sData\n     * @param {number} nErrorCode (response from server if anything other than 200)\n     */\n    finishLoad(sURL, sData, nErrorCode)\n    {\n        if (nErrorCode) {\n            this.notice(\"Unable to load RAM resource (error \" + nErrorCode + \": \" + sURL + \")\");\n            this.sFilePath = null;\n        }\n        else {\n            Component.addMachineResource(this.idMachine, sURL, sData);\n            var resource = Web.parseMemoryResource(sURL, sData);\n            if (resource) {\n                this.aData = resource.aData;\n                this.aSymbols = resource.aSymbols;\n                if (this.addrLoad == null) this.addrLoad = resource.addrLoad;\n                if (this.addrExec == null) this.addrExec = resource.addrExec;\n            } else {\n                this.sFilePath = null;\n            }\n        }\n        this.initRAM();\n    }\n\n    /**\n     * initRAM()\n     *\n     * This function is called by both initBus() and finishLoad(), but it cannot copy the initial data into place\n     * until after initBus() has received the Bus component AND finishLoad() has received the data.  When both those\n     * criteria are satisfied, the component becomes \"ready\".\n     *\n     * @this {RAMPDP10}\n     */\n    initRAM()\n    {\n        if (!this.bus) return;\n\n        if (!this.fAllocated && this.sizeRAM) {\n            if (this.bus.addMemory(this.addrRAM, this.sizeRAM, MemoryPDP10.TYPE.RAM)) {\n                this.fAllocated = true;\n            } else {\n                this.sizeRAM = 0;           // don't bother trying again (it just results in redundant error messages)\n            }\n        }\n        if (!this.isReady()) {\n            if (!this.fAllocated) {\n                Component.error(\"No RAM allocated\");\n            }\n            else if (this.sFilePath) {\n                /*\n                 * Too early...\n                 */\n                if (!this.aData) return;\n\n                if (this.loadImage(this.aData, this.addrLoad, this.addrExec, this.addrRAM)) {\n                    this.status('Loaded image \"' + this.sFileName + '\"');\n                } else {\n                    this.notice('Error loading image \"' + this.sFileName + '\"');\n                }\n\n                /*\n                 * NOTE: We now retain this data, so that reset() can return the RAM to its predefined state.\n                 *\n                 *      delete this.aData;\n                 */\n            }\n            this.fReset = true;\n            this.setReady();\n        }\n    }\n\n    /**\n     * reset()\n     *\n     * @this {RAMPDP10}\n     */\n    reset()\n    {\n        if (this.fAllocated && !this.fReset) {\n            /*\n             * TODO: Add a configuration parameter for selecting the byte pattern on reset?\n             * Note that when memory blocks are originally created, they are currently always\n             * zero-initialized, so this would only affect resets.\n             */\n            this.bus.zeroMemory(this.addrRAM, this.sizeRAM, 0);\n            if (this.aData) {\n                this.loadImage(this.aData, this.addrLoad, this.addrExec, this.addrRAM, !this.dbg);\n            }\n        }\n        this.fReset = false;\n    }\n\n    /**\n     * loadImage(aData, addrLoad, addrExec, addrInit, fStart)\n     *\n     * If the array contains a PAPER tape image in the \"Absolute Format,\" load it as specified\n     * by the format; otherwise, load it as-is using the address(es) supplied.\n     *\n     * @this {RAMPDP10}\n     * @param {Array} aData\n     * @param {number|null} [addrLoad]\n     * @param {number|null} [addrExec] (this CAN override any starting address INSIDE the image)\n     * @param {number|null} [addrInit]\n     * @param {boolean} [fStart]\n     * @return {boolean} (true if loaded, false if not)\n     */\n    loadImage(aData, addrLoad, addrExec, addrInit, fStart)\n    {\n        var fLoaded = false;\n\n        if (addrLoad == null) {\n            addrLoad = addrInit;\n        }\n        if (addrLoad != null) {\n            for (var i = 0; i < aData.length; i++) {\n                this.bus.setWordDirect(addrLoad + i, aData[i]);\n            }\n            fLoaded = true;\n        }\n        if (fLoaded) {\n            /*\n             * Set the start address to whatever the caller provided, or failing that, whatever start\n             * address was specified inside the image.\n             *\n             * For example, the diagnostic \"MAINDEC-11-D0AA-PB\" doesn't include a start address inside the\n             * image, but we know that the directions for that diagnostic say to \"Start and Restart at 200\",\n             * so we have manually inserted an \"exec\":128 in the JSON containing the image.\n             */\n            if (addrExec == null) {\n                this.cpu.stopCPU();\n                fStart = false;\n            }\n            if (addrExec != null) {\n                this.cpu.setReset(addrExec, fStart);\n            }\n        }\n        return fLoaded;\n    }\n\n    /**\n     * RAMPDP10.init()\n     *\n     * This function operates on every HTML element of class \"ram\", extracting the\n     * JSON-encoded parameters for the RAMPDP10 constructor from the element's \"data-value\"\n     * attribute, invoking the constructor to create a RAMPDP10 component, and then binding\n     * any associated HTML controls to the new component.\n     */\n    static init()\n    {\n        var aeRAM = Component.getElementsByClass(document, PDP10.APPCLASS, \"ram\");\n        for (var iRAM = 0; iRAM < aeRAM.length; iRAM++) {\n            var eRAM = aeRAM[iRAM];\n            var parmsRAM = Component.getComponentParms(eRAM);\n            var ram = new RAMPDP10(parmsRAM);\n            Component.bindComponentControls(ram, eRAM, PDP10.APPCLASS);\n        }\n    }\n}\n\n/*\n * Initialize all the RAMPDP10 modules on the page.\n */\nWeb.onInit(RAMPDP10.init);\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp10/lib/serial.js (C) Jeff Parsons 2012-2018\n */\n\n\n/**\n * Since the Closure Compiler treats ES6 classes as @struct rather than @dict by default,\n * it deters us from defining named properties on our components; eg:\n *\n *      this['exports'] = {...}\n *\n * results in an error:\n *\n *      Cannot do '[]' access on a struct\n *\n * So, in order to define 'exports', we must override the @struct assumption by annotating\n * the class as @unrestricted (or @dict).  Note that this must be done both here and in the\n * Component class, because otherwise the Compiler won't allow us to *reference* the named\n * property either.\n *\n * TODO: Consider marking ALL our classes unrestricted, because otherwise it forces us to\n * define every single property the class uses in its constructor, which results in a fair\n * bit of redundant initialization, since many properties aren't (and don't need to be) fully\n * initialized until the appropriate init(), reset(), restore(), etc. function is called.\n *\n * The upside, however, may be that since the structure of the class is completely defined by\n * the constructor, JavaScript engines may be able to optimize and run more efficiently.\n *\n * @unrestricted\n */\nclass SerialPortPDP10 extends Component {\n    /**\n     * SerialPortPDP10(parmsSerial)\n     *\n     * The SerialPort component has the following component-specific (parmsSerial) properties:\n     *\n     *      adapter: adapter number; 0 if not defined (the PCx86 SerialPort component uses this\n     *      value to set the device's internal COM number, which in turn determines other properties,\n     *      such as I/O ports and IRQ; for the PDP-10, this currently has no defined use)\n     *\n     *      binding: name of a control (based on its \"binding\" attribute) to bind to this port's I/O\n     *\n     *      tabSize: set to a non-zero number to convert tabs to spaces (applies only to output to\n     *      the above binding); default is 0 (no conversion)\n     *\n     *      upperCase: if true, all received input is upper-cased; it is normally the responsibility\n     *      of the sending device to ensure this, but sometimes it's more convenient to enforce\n     *      on the receiving end.\n     *\n     * @param {Object} parmsSerial\n     */\n    constructor(parmsSerial)\n    {\n        super(\"SerialPort\", parmsSerial, MessagesPDP10.SERIAL);\n\n        this.iAdapter = +parmsSerial['adapter'];\n        this.fUpperCase = parmsSerial['upperCase'];\n        if (typeof this.fUpperCase == \"string\") this.fUpperCase = (this.fUpperCase == \"true\");\n        /**\n         * consoleOutput becomes a string that records serial port output if the 'binding' property is set to the\n         * reserved name \"console\".  Nothing is written to the console, however, until a linefeed (0x0A) is output\n         * or the string length reaches a threshold (currently, 1024 characters).\n         *\n         * @type {string|null}\n         */\n        this.consoleOutput = null;\n\n        /**\n         * controlIOBuffer is a DOM element bound to the port (currently used for output only; see transmitByte()).\n         *\n         * Example: CTTY COM2\n         *\n         * The CTTY DOS command redirects all CON I/O to the specified serial port (eg, COM2), which it assumes is\n         * connected to a serial terminal, and therefore anything it *transmits* via COM2 will be displayed by the\n         * terminal.  It further assumes that anything typed on such a terminal is NOT displayed, so as DOS *receives*\n         * serial input, DOS *transmits* the appropriate characters back to the terminal via COM2.\n         *\n         * As a result, controlIOBuffer only needs to be updated by the transmitByte() function.\n         *\n         * @type {Object}\n         */\n        this.controlIOBuffer = null;\n\n        /*\n         * If controlIOBuffer is being used AND 'tabSize' is set, then we make an attempt to monitor the characters\n         * being echoed via transmitByte(), maintain a logical column position, and convert any tabs into the appropriate\n         * number of spaces.\n         *\n         * charBOL, if nonzero, is a character to automatically output at the beginning of every line.  This probably\n         * isn't generally useful; I use it internally to preformat serial output.\n         */\n        this.tabSize = +parmsSerial['tabSize'];\n        this.charBOL = +parmsSerial['charBOL'];\n        this.iLogicalCol = 0;\n        this.fNullModem = true;\n\n        this.abReceive = [];\n\n        var sBinding = parmsSerial['binding'];\n        if (sBinding == \"console\") {\n            this.consoleOutput = \"\";\n        } else {\n            /*\n             * NOTE: If sBinding is not the name of a valid Control Panel DOM element, this call does nothing.\n             */\n            Component.bindExternalControl(this, sBinding, SerialPortPDP10.sIOBuffer);\n        }\n\n        /*\n         * No connection until initConnection() is called.\n         */\n        this.sDataReceived = \"\";\n        this.connection = this.sendData = this.updateStatus = null;\n\n        /*\n         * Export all functions required by initConnection().\n         */\n        this['exports'] = {\n            'connect': this.initConnection,\n            'receiveData': this.receiveData,\n            'receiveStatus': this.receiveStatus,\n            'setConnection': this.setConnection\n        };\n    }\n\n    /**\n     * setBinding(sType, sBinding, control, sValue)\n     *\n     * @this {SerialPortPDP10}\n     * @param {string|null} sType is the type of the HTML control (eg, \"button\", \"textarea\", \"register\", \"flag\", \"rled\", etc)\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"buffer\")\n     * @param {Object} control is the HTML control DOM object (eg, HTMLButtonElement)\n     * @param {string} [sValue] optional data value\n     * @return {boolean} true if binding was successful, false if unrecognized binding request\n     */\n    setBinding(sType, sBinding, control, sValue)\n    {\n        var serial = this;\n\n        switch (sBinding) {\n        case SerialPortPDP10.sIOBuffer:\n            this.bindings[sBinding] = this.controlIOBuffer = control;\n\n            /*\n             * An onkeydown handler is required for certain keys that browsers tend to consume themselves;\n             * for example, BACKSPACE is often defined as going back to the previous web page, and certain\n             * CTRL keys are often used for browser shortcuts (usually on Windows-based browsers).\n             *\n             * NOTE: We don't bother with a keyUp handler, because for the most part, we're only intercepting\n             * keys that require special treatment; in general, we're content with keyPress events.\n             */\n            control.onkeydown = function onKeyDown(event) {\n                event = event || window.event;\n                var bASCII = 0;\n                var keyCode = event.keyCode;\n                /*\n                 * Perform the same remapping of BACKSPACE and DELETE that our VT100 emulation performs,\n                 * for PCjs-wide consistency; see the KEYMAP table in /modules/pc8080/lib/keyboard.js for\n                 * the rationale.  Ditto for ALT-DELETE; see onKeyDown() in /modules/pc8080/lib/keyboard.js\n                 * for details.\n                 *\n                 * NOTE: keyDown (and keyUp) events supply us with KEYCODE values, which are NOT the same as\n                 * ASCII values, which is why we are comparing with KEYCODE values but assigning ASCII values,\n                 * because receiveData() requires ASCII values.\n                 */\n                if (keyCode == Keys.KEYCODE.BS) {\n                    bASCII = event.altKey? Keys.ASCII.CTRL_H : Keys.ASCII.DEL;\n                }\n                else if (keyCode == Keys.KEYCODE.DEL) {\n                    bASCII = Keys.ASCII.CTRL_H;\n                }\n                else if (event.ctrlKey && keyCode >= Keys.ASCII.A && keyCode <= Keys.ASCII.Z) {\n                    bASCII = keyCode - (Keys.ASCII.A - Keys.ASCII.CTRL_A);\n                }\n                if (bASCII) {\n                    if (event.preventDefault) event.preventDefault();\n                    serial.receiveData(bASCII);\n                }\n                return true;\n            };\n\n            control.onkeypress = function onKeyPress(event) {\n                /*\n                 * NOTE: Unlike keyDown events, keyPress events generally supply us with ASCII values,\n                 * despite the fact that, as above, they come to us via the keyCode property.  Yes, it's\n                 * brilliant (or rather, the opposite of brilliant), but that's life.\n                 */\n                event = event || window.event;\n                /*\n                 * Not sure why COMMAND-key combinations are coming through here (on Safari at least),\n                 * but in any case, let's make sure we don't act on them.\n                 */\n                if (!event.metaKey) {\n                    var bASCII = event.which || event.keyCode;\n                    /*\n                     * Perform the same remapping of ALT-ENTER (to LINE-FEED) that our VT100 emulation performs,\n                     * for PCjs-wide consistency; see onKeyDown() in /modules/pc8080/lib/keyboard.js for details.\n                     */\n                    if (event.altKey) {\n                        if (bASCII == Keys.ASCII.CTRL_M) {\n                            bASCII = Keys.ASCII.CTRL_J;\n                        }\n                    }\n                    serial.receiveData(bASCII);\n                    /*\n                     * Since we're going to remove the \"readonly\" attribute from the <textarea> control\n                     * (so that the soft keyboard activates on iOS), instead of calling preventDefault() for\n                     * selected keys (eg, the SPACE key, whose default behavior is to scroll the page), we must\n                     * now call it for *all* keys, so that the keyCode isn't added to the control immediately,\n                     * on top of whatever the machine is echoing back, resulting in double characters.\n                     */\n                    if (event.preventDefault) event.preventDefault();\n                }\n                return true;\n            };\n\n            control.onpaste = function onKeyPress(event) {\n                if (event.stopPropagation) event.stopPropagation();\n                if (event.preventDefault) event.preventDefault();\n                var clipboardData = event.clipboardData || window.clipboardData;\n                if (clipboardData) {\n                    /*\n                     * NOTE: Multiple lines of pasted text will (at least on macOS) contain LFs instead of CRs;\n                     * this is dealt with in receiveData() whenever it receives a string of characters.\n                     */\n                    serial.receiveData(clipboardData.getData('Text'));\n                }\n            };\n\n            /*\n             * Now that we've added an onkeypress handler that calls preventDefault() for ALL keys, the control\n             * itself no longer needs the \"readonly\" attribute; we primarily need to remove it for iOS browsers,\n             * so that the soft keyboard will activate, but it shouldn't hurt to remove the attribute for all browsers.\n             */\n            control.removeAttribute(\"readonly\");\n\n            return true;\n\n        default:\n            break;\n        }\n        return false;\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * @this {SerialPortPDP10}\n     * @param {ComputerPDP10} cmp\n     * @param {BusPDP10} bus\n     * @param {CPUStatePDP10} cpu\n     * @param {DebuggerPDP10} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.cmp = cmp;\n        this.bus = bus;\n        this.cpu = cpu;\n        this.dbg = dbg;\n\n        this.setReady();\n    }\n\n    /**\n     * initConnection(fNullModem)\n     *\n     * If a machine 'connection' parameter exists of the form \"{sourcePort}->{targetMachine}.{targetPort}\",\n     * and \"{sourcePort}\" matches our idComponent, then look for a component with id \"{targetMachine}.{targetPort}\".\n     *\n     * If the target component is found, then verify that it has exported functions with the following names:\n     *\n     *      receiveData(data): called when we have data to transmit; aliased internally to sendData(data)\n     *      receiveStatus(pins): called when our control signals have changed; aliased internally to updateStatus(pins)\n     *\n     * For now, we're not going to worry about communication in the other direction, because when the target component\n     * performs its own initConnection(), it will find our receiveData() and receiveStatus() functions, at which point\n     * communication in both directions should be established, and the circle of life complete.\n     *\n     * For added robustness, if the target machine initializes much more slowly than we do, and our connection attempt\n     * fails, that's OK, because when it finally initializes, its initConnection() will call our initConnection();\n     * if we've already initialized, no harm done.\n     *\n     * @this {SerialPortPDP10}\n     * @param {boolean} [fNullModem] (caller's null-modem setting, to ensure our settings are in agreement)\n     */\n    initConnection(fNullModem)\n    {\n        if (!this.connection) {\n            var sConnection = this.cmp.getMachineParm(\"connection\");\n            if (sConnection) {\n                var asParts = sConnection.split('->');\n                if (asParts.length == 2) {\n                    var sSourceID = Str.trim(asParts[0]);\n                    if (sSourceID != this.idComponent) return;  // this connection string is intended for another instance\n                    var sTargetID = Str.trim(asParts[1]);\n                    this.connection = Component.getComponentByID(sTargetID);\n                    if (this.connection) {\n                        var exports = this.connection['exports'];\n                        if (exports) {\n                            var fnConnect = exports['connect'];\n                            if (fnConnect) fnConnect.call(this.connection, this.fNullModem);\n                            this.sendData = exports['receiveData'];\n                            if (this.sendData) {\n                                this.fNullModem = fNullModem;\n                                this.updateStatus = exports['receiveStatus'];\n                                this.status(\"Connected \" + this.idMachine + '.' + sSourceID + \" to \" + sTargetID);\n                                return;\n                            }\n                        }\n                    }\n                }\n                /*\n                 * Changed from notice() to status() because sometimes a connection fails simply because one of us is a laggard.\n                 */\n                this.status(\"Unable to establish connection: \" + sConnection);\n            }\n        }\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {SerialPortPDP10}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        if (!fRepower) {\n\n            /*\n             * This is as late as we can currently wait to make our first inter-machine connection attempt;\n             * even so, the target machine's initialization process may still be ongoing, so any connection\n             * may be not fully resolved until the target machine performs its own initConnection(), which will\n             * in turn invoke our initConnection() again.\n             */\n            this.initConnection(this.fNullModem);\n\n            if (!data) {\n                this.reset();\n            } else {\n                if (!this.restore(data)) return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {SerialPortPDP10}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        return fSave? this.save() : true;\n    }\n\n    /**\n     * reset()\n     *\n     * @this {SerialPortPDP10}\n     */\n    reset()\n    {\n        this.initState();\n    }\n\n    /**\n     * save()\n     *\n     * This implements save support for the SerialPort component.\n     *\n     * @this {SerialPortPDP10}\n     * @return {Object}\n     */\n    save()\n    {\n        var state = new State(this);\n        state.set(0, this.saveRegisters());\n        return state.data();\n    }\n\n    /**\n     * restore(data)\n     *\n     * This implements restore support for the SerialPort component.\n     *\n     * @this {SerialPortPDP10}\n     * @param {Object} data\n     * @return {boolean} true if successful, false if failure\n     */\n    restore(data)\n    {\n        return this.initState(data[0]);\n    }\n\n    /**\n     * initState(a)\n     *\n     * @this {SerialPortPDP10}\n     * @param {Array} [a]\n     * @return {boolean} true if successful, false if failure\n     */\n    initState(a)\n    {\n        return true;\n    }\n\n    /**\n     * saveRegisters()\n     *\n     * Basically, the inverse of initState().\n     *\n     * @this {SerialPortPDP10}\n     * @return {Array}\n     */\n    saveRegisters()\n    {\n        return [];\n    }\n\n    /**\n     * receiveData(data)\n     *\n     * This replaces the old sendRBR() function, which expected an Array of bytes.  We still support that,\n     * but in order to support connections with other SerialPort components (ie, the PC8080 SerialPort), we\n     * have added support for numbers and strings as well.\n     *\n     * @this {SerialPortPDP10}\n     * @param {number|string|Array} data\n     * @return {boolean} true if received, false if not\n     */\n    receiveData(data)\n    {\n        if (typeof data == \"number\") {\n            this.abReceive.push(data);\n        }\n        else if (typeof data == \"string\") {\n            var bASCII = 0, bASCIIPrev;\n            for (var i = 0; i < data.length; i++) {\n                bASCIIPrev = bASCII;\n                bASCII = data.charCodeAt(i);\n                /*\n                 * NOTE: Multiple lines of pasted text will (at least on macOS) contain LFs instead of CRs;\n                 * we convert them to CRs below.  Windows may do something different, but in the worst case,\n                 * even if we receive CR/LF pairs, this code should keep the CRs and lose the LFs.\n                 */\n                if (bASCII == Str.ASCII.LF) {\n                    if (bASCIIPrev == Str.ASCII.CR) continue;\n                    bASCII = Str.ASCII.CR;\n                }\n                this.abReceive.push(bASCII);\n            }\n        }\n        else {\n            this.abReceive = this.abReceive.concat(data);\n        }\n\n        return true;                // for now, return true regardless, since we're buffering everything anyway\n    }\n\n    /**\n     * receiveByte()\n     *\n     * @this {SerialPortPDP10}\n     * @return {number} (0x00-0xff if byte available, -1 if not)\n     */\n    receiveByte()\n    {\n        var b = -1;\n        if (this.abReceive.length) {\n            /*\n             * Here, as elsewhere (eg, the PC11 component), even if I trusted all incoming data\n             * to be byte values (which I don't), there's also the risk that it could be signed data\n             * (eg, -128 to 127, instead of 0 to 255).  Both risks are good reasons to always mask\n             * the data assigned to RBUF with 0xff.\n             */\n            b = this.abReceive.shift() & 0xff;\n            this.printMessage(\"receiveByte(\" + Str.toHexByte(b) + \")\");\n            if (this.fUpperCase) {\n                /*\n                 * Automatically transform lower-case ASCII codes to upper-case; fUpperCase should\n                 * only be set when a terminal or some sort of pseudo-display is being used and we don't\n                 * trust it to have its CAPS-LOCK setting correct.\n                 */\n                if (b >= 0x61 && b < 0x7A) b -= 0x20;\n            }\n        }\n        return b;\n    }\n\n    /**\n     * receiveStatus(pins)\n     *\n     * @this {SerialPortPDP10}\n     * @param {number} pins\n     */\n    receiveStatus(pins)\n    {\n    }\n\n    /**\n     * setConnection(component, fn)\n     *\n     * @this {SerialPortPDP10}\n     * @param {Object|null} component\n     * @param {function(number)} fn\n     * @return {boolean}\n     */\n    setConnection(component, fn)\n    {\n        if (!this.connection) {\n            this.connection = component;\n            this.sendData = fn;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * transmitByte(b)\n     *\n     * @this {SerialPortPDP10}\n     * @param {number} b\n     * @return {boolean} true if transmitted, false if not\n     */\n    transmitByte(b)\n    {\n        var fTransmitted = false;\n\n        if (MAXDEBUG) this.printMessage(\"transmitByte(\" + Str.toHexByte(b) + \")\");\n\n        if (this.sendData) {\n            if (this.sendData.call(this.connection, b)) {\n                fTransmitted = true;\n            }\n        }\n\n        /*\n         * TODO: Why do DEC diagnostics like to output bytes with bit 7 set?\n         */\n        b &= 0x7F;\n\n        if (this.controlIOBuffer) {\n            if (b == 0x0D) {\n                this.iLogicalCol = 0;\n            }\n            else if (b == 0x08) {\n                this.controlIOBuffer.value = this.controlIOBuffer.value.slice(0, -1);\n                /*\n                 * TODO: Back up the correct number of columns if the character erased was a tab.\n                 */\n                if (this.iLogicalCol > 0) this.iLogicalCol--;\n            }\n            else if (b) {\n                /*\n                 * RT-11 outputs lots of NULL characters, at least after a \"D 56=5015\" (0x0A0D) command has\n                 * been issued, hence the \"if (b)\" check above.\n                 *\n                 * TODO: Also consider a check for Keys.ASCII.CTRL_C, because by default, RT-11 outputs \"raw\"\n                 * CTRL_C characters, which we capture below and render as <ETX>.  RT-11 does this for other keys\n                 * as well, such as CTRL_K (<VT>) and CTRL_L (<FF>).\n                 */\n                var s = Str.toASCIICode(b); // formerly: String.fromCharCode(b);\n                var nChars = s.length;      // formerly: (b >= 0x20? 1 : 0);\n                if (b < 0x20 && nChars == 1) nChars = 0;\n                if (b == 0x09) {\n                    var tabSize = this.tabSize || 8;\n                    nChars = tabSize - (this.iLogicalCol % tabSize);\n                    if (this.tabSize) s = Str.pad(\"\", nChars);\n                }\n                if (this.charBOL && !this.iLogicalCol && nChars) s = String.fromCharCode(this.charBOL) + s;\n                this.controlIOBuffer.value += s;\n                this.controlIOBuffer.scrollTop = this.controlIOBuffer.scrollHeight;\n                this.iLogicalCol += nChars;\n            }\n            fTransmitted = true;\n        }\n        else if (this.consoleOutput != null) {\n            if (b == 0x0A || this.consoleOutput.length >= 1024) {\n                this.println(this.consoleOutput);\n                this.consoleOutput = \"\";\n            }\n            if (b != 0x0A) {\n                this.consoleOutput += String.fromCharCode(b);\n            }\n            fTransmitted = true;\n        }\n\n        return fTransmitted;\n    }\n\n    /**\n     * SerialPortPDP10.init()\n     *\n     * This function operates on every HTML element of class \"serial\", extracting the\n     * JSON-encoded parameters for the SerialPort constructor from the element's \"data-value\"\n     * attribute, invoking the constructor to create a SerialPort component, and then binding\n     * any associated HTML controls to the new component.\n     */\n    static init()\n    {\n        var aeSerial = Component.getElementsByClass(document, PDP10.APPCLASS, \"serial\");\n        for (var iSerial = 0; iSerial < aeSerial.length; iSerial++) {\n            var eSerial = aeSerial[iSerial];\n            var parmsSerial = Component.getComponentParms(eSerial);\n            var serial = new SerialPortPDP10(parmsSerial);\n            Component.bindComponentControls(serial, eSerial, PDP10.APPCLASS);\n        }\n    }\n}\n\n/*\n * Internal name used for the I/O buffer control, if any, that we bind to the SerialPort.\n *\n * Alternatively, if SerialPort wants to use another component's control (eg, the Panel's\n * \"print\" control), it can specify the name of that control with the 'binding' property.\n *\n * For that binding to succeed, we also need to know the target component; for now, that's\n * been hard-coded to \"Panel\", in part because that's one of the few components we can rely\n * upon initializing before we do, but it would be a simple matter to include a component type\n * or ID as part of the 'binding' property as well, if we need more flexibility later.\n */\nSerialPortPDP10.sIOBuffer = \"buffer\";\n\n/*\n * Initialize every SerialPort module on the page.\n */\nWeb.onInit(SerialPortPDP10.init);\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/debugger.js (C) Jeff Parsons 2012-2018\n */\n\n\n/**\n * Debugger Address Object\n *\n * This is the basic structure; other debuggers may extend it.\n *\n *      addr            address\n *      fTemporary      true if this is a temporary breakpoint address\n *      sCmd            set for breakpoint addresses if there's an associated command string\n *      aCmds           preprocessed commands (from sCmd)\n *\n * @typedef {{\n *      addr:(number|undefined),\n *      fTemporary:(boolean|undefined),\n *      sCmd:(string|undefined),\n *      aCmds:(Array.<string>|undefined)\n * }}\n */\nvar DbgAddr;\n\n/**\n * Since the Closure Compiler treats ES6 classes as @struct rather than @dict by default,\n * it deters us from defining named properties on our components; eg:\n *\n *      this['exports'] = {...}\n *\n * results in an error:\n *\n *      Cannot do '[]' access on a struct\n *\n * So, in order to define 'exports', we must override the @struct assumption by annotating\n * the class as @unrestricted (or @dict).  Note that this must be done both here and in the\n * subclass (eg, SerialPort), because otherwise the Compiler won't allow us to *reference*\n * the named property either.\n *\n * TODO: Consider marking ALL our classes unrestricted, because otherwise it forces us to\n * define every single property the class uses in its constructor, which results in a fair\n * bit of redundant initialization, since many properties aren't (and don't need to be) fully\n * initialized until the appropriate init(), reset(), restore(), etc. function is called.\n *\n * The upside, however, may be that since the structure of the class is completely defined by\n * the constructor, JavaScript engines may be able to optimize and run more efficiently.\n *\n * @unrestricted\n */\nclass Debugger extends Component\n{\n    /**\n     * Debugger(parmsDbg)\n     *\n     * The Debugger component supports the following optional (parmsDbg) properties:\n     *\n     *      base: the base to use for most numeric input/output (default is 16)\n     *\n     * The Debugger component is a shared component containing a subset of functionality used by\n     * the other CPU-specific Debuggers (eg, DebuggerX86).  Over time, the goal is to factor out as\n     * much common debugging support as possible from those components into this one.\n     *\n     * @param {Object} parmsDbg\n     */\n    constructor(parmsDbg)\n    {\n        if (DEBUGGER) {\n\n            super(\"Debugger\", parmsDbg);\n\n            /*\n             * Default base used to display all values; modified with the \"s base\" command.\n             */\n            this.nBase = +parmsDbg['base'] || 16;\n\n            /*\n             * Default number of bits of integer precision; it can be overridden by the Debugger\n             * but there is no command to adjust it.\n             */\n            this.nBits = 32;\n\n            this.achGroup = ['{','}'];\n            this.achAddress = ['[',']'];\n\n            /*\n             * These keep track of instruction activity, but only when tracing or when Debugger checks\n             * have been enabled (eg, one or more breakpoints have been set).\n             *\n             * They are zeroed by the reset() notification handler.  cInstructions is advanced by\n             * stepCPU() and checkInstruction() calls.  nCycles is updated by every stepCPU() or stop()\n             * call and simply represents the number of cycles performed by the last run of instructions.\n             */\n            this.nCycles = 0;\n            this.cOpcodes = this.cOpcodesStart = 0;\n\n            /*\n             * fAssemble is true when \"assemble mode\" is active, false when not.\n             */\n            this.fAssemble = false;\n\n            /*\n             * This maintains command history.  New commands are inserted at index 0 of the array.\n             * When Enter is pressed on an empty input buffer, we default to the command at aPrevCmds[0].\n             */\n            this.iPrevCmd = -1;\n            this.aPrevCmds = [];\n\n            /*\n             * aVariables is an object with properties that grow as setVariable() assigns more variables;\n             * each property corresponds to one variable, where the property name is the variable name (ie,\n             * a string beginning with a non-digit, followed by zero or more symbol characters and/or digits)\n             * and the property value is the variable's numeric value.  See doVar() and setVariable() for\n             * details.\n             *\n             * Note that parseValue() parses variables before numbers, so any variable that looks like a\n             * unprefixed hex value (eg, \"a5\" as opposed to \"0xa5\") will trump the numeric value.  Unprefixed\n             * hex values are a convenience of parseValue(), which always calls Str.parseInt() with a default\n             * base of 16; however, that default be overridden with a variety of explicit prefixes or suffixes\n             * (eg, a leading \"0o\" to indicate octal, a trailing period to indicate decimal, etc.)\n             *\n             * See Str.parseInt() for more details about supported numbers.\n             */\n            this.aVariables = {};\n\n        }   // endif DEBUGGER\n    }\n\n    /**\n     * getRegIndex(sReg, off)\n     *\n     * NOTE: This must be implemented by the individual debuggers.\n     *\n     * @this {Debugger}\n     * @param {string} sReg\n     * @param {number} [off] optional offset into sReg\n     * @return {number} register index, or -1 if not found\n     */\n    getRegIndex(sReg, off)\n    {\n        return -1;\n    }\n\n    /**\n     * getRegValue(iReg)\n     *\n     * NOTE: This must be implemented by the individual debuggers.\n     *\n     * @this {Debugger}\n     * @param {number} iReg\n     * @return {number|undefined}\n     */\n    getRegValue(iReg)\n    {\n        return undefined;\n    }\n\n    /**\n     * parseAddrReference(s, sAddr)\n     *\n     * Returns the given string with the given address reference replaced with the contents of that address.\n     *\n     * NOTE: This must be implemented by the individual debuggers.\n     *\n     * @this {Debugger}\n     * @param {string} s\n     * @param {string} sAddr\n     * @return {string}\n     */\n    parseAddrReference(s, sAddr)\n    {\n        return s.replace('[' + sAddr + ']', \"unimplemented\");\n    }\n\n    /**\n     * getNextCommand()\n     *\n     * @this {Debugger}\n     * @return {string}\n     */\n    getNextCommand()\n    {\n        var sCmd;\n        if (this.iPrevCmd > 0) {\n            sCmd = this.aPrevCmds[--this.iPrevCmd];\n        } else {\n            sCmd = \"\";\n            this.iPrevCmd = -1;\n        }\n        return sCmd;\n    }\n\n    /**\n     * getPrevCommand()\n     *\n     * @this {Debugger}\n     * @return {string|null}\n     */\n    getPrevCommand()\n    {\n        var sCmd = null;\n        if (this.iPrevCmd < this.aPrevCmds.length - 1) {\n            sCmd = this.aPrevCmds[++this.iPrevCmd];\n        }\n        return sCmd;\n    }\n\n    /**\n     * parseCommand(sCmd, fSave, chSep)\n     *\n     * @this {Debugger}\n     * @param {string|undefined} sCmd\n     * @param {boolean} [fSave] is true to save the command, false if not\n     * @param {string} [chSep] is the command separator character (default is ';')\n     * @return {Array.<string>}\n     */\n    parseCommand(sCmd, fSave, chSep)\n    {\n        if (fSave) {\n            if (!sCmd) {\n                if (this.fAssemble) {\n                    sCmd = \"end\";\n                } else {\n                    sCmd = this.aPrevCmds[this.iPrevCmd+1];\n                }\n            } else {\n                if (this.iPrevCmd < 0 && this.aPrevCmds.length) {\n                    this.iPrevCmd = 0;\n                }\n                if (this.iPrevCmd < 0 || sCmd != this.aPrevCmds[this.iPrevCmd]) {\n                    this.aPrevCmds.splice(0, 0, sCmd);\n                    this.iPrevCmd = 0;\n                }\n                this.iPrevCmd--;\n            }\n        }\n        var a = [];\n        if (sCmd) {\n            /*\n             * With the introduction of breakpoint commands (ie, quoted command sequences\n             * associated with a breakpoint), we can no longer perform simplistic splitting.\n             *\n             *      a = sCmd.split(chSep || ';');\n             *      for (var i = 0; i < a.length; i++) a[i] = Str.trim(a[i]);\n             *\n             * We may now split on semi-colons ONLY if they are outside a quoted sequence.\n             *\n             * Also, to allow quoted strings *inside* breakpoint commands, we first replace all\n             * DOUBLE double-quotes with single quotes.\n             */\n            sCmd = sCmd.replace(/\"\"/g, \"'\");\n\n            var iPrev = 0;\n            var chQuote = null;\n            chSep = chSep || ';';\n            /*\n             * NOTE: Processing charAt() up to and INCLUDING length is not a typo; we're taking\n             * advantage of the fact that charAt() with an invalid index returns an empty string,\n             * allowing us to use the same substring() call to capture the final portion of sCmd.\n             *\n             * In a sense, it allows us to pretend that the string ends with a zero terminator.\n             */\n            for (var i = 0; i <= sCmd.length; i++) {\n                var ch = sCmd.charAt(i);\n                if (ch == '\"' || ch == \"'\") {\n                    if (!chQuote) {\n                        chQuote = ch;\n                    } else if (ch == chQuote) {\n                        chQuote = null;\n                    }\n                }\n                else if (ch == chSep && !chQuote || !ch) {\n                    /*\n                     * Recall that substring() accepts starting (inclusive) and ending (exclusive)\n                     * indexes, whereas substr() accepts a starting index and a length.  We need the former.\n                     */\n                    a.push(Str.trim(sCmd.substring(iPrev, i)));\n                    iPrev = i + 1;\n                }\n            }\n        }\n        return a;\n    }\n\n    /**\n     * evalAND(dst, src)\n     *\n     * Adapted from /modules/pdp10/lib/cpuops.js:PDP10.AND().\n     *\n     * Performs the bitwise \"and\" (AND) of two operands > 32 bits.\n     *\n     * @this {Debugger}\n     * @param {number} dst\n     * @param {number} src\n     * @return {number} (dst & src)\n     */\n    evalAND(dst, src)\n    {\n        /*\n         * We AND the low 32 bits separately from the higher bits, and then combine them with addition.\n         * Since all bits above 32 will be zero, and since 0 AND 0 is 0, no special masking for the higher\n         * bits is required.\n         *\n         * WARNING: When using JavaScript's 32-bit operators with values that could set bit 31 and produce a\n         * negative value, it's critical to perform a final right-shift of 0, ensuring that the final result is\n         * positive.\n         */\n        if (this.nBits <= 32) {\n            return dst & src;\n        }\n        /*\n         * Negative values don't yield correct results when dividing, so pass them through an unsigned truncate().\n         */\n        dst = this.truncate(dst, 0, true);\n        src = this.truncate(src, 0, true);\n        return ((((dst / Debugger.TWO_POW32)|0) & ((src / Debugger.TWO_POW32)|0)) * Debugger.TWO_POW32) + ((dst & src) >>> 0);\n    }\n\n    /**\n     * evalIOR(dst, src)\n     *\n     * Adapted from /modules/pdp10/lib/cpuops.js:PDP10.IOR().\n     *\n     * Performs the logical \"inclusive-or\" (OR) of two operands > 32 bits.\n     *\n     * @this {Debugger}\n     * @param {number} dst\n     * @param {number} src\n     * @return {number} (dst | src)\n     */\n    evalIOR(dst, src)\n    {\n        /*\n         * We OR the low 32 bits separately from the higher bits, and then combine them with addition.\n         * Since all bits above 32 will be zero, and since 0 OR 0 is 0, no special masking for the higher\n         * bits is required.\n         *\n         * WARNING: When using JavaScript's 32-bit operators with values that could set bit 31 and produce a\n         * negative value, it's critical to perform a final right-shift of 0, ensuring that the final result is\n         * positive.\n         */\n        if (this.nBits <= 32) {\n            return dst | src;\n        }\n        /*\n         * Negative values don't yield correct results when dividing, so pass them through an unsigned truncate().\n         */\n        dst = this.truncate(dst, 0, true);\n        src = this.truncate(src, 0, true);\n        return ((((dst / Debugger.TWO_POW32)|0) | ((src / Debugger.TWO_POW32)|0)) * Debugger.TWO_POW32) + ((dst | src) >>> 0);\n    }\n\n    /**\n     * evalXOR(dst, src)\n     *\n     * Adapted from /modules/pdp10/lib/cpuops.js:PDP10.XOR().\n     *\n     * Performs the logical \"exclusive-or\" (XOR) of two operands > 32 bits.\n     *\n     * @this {Debugger}\n     * @param {number} dst\n     * @param {number} src\n     * @return {number} (dst ^ src)\n     */\n    evalXOR(dst, src)\n    {\n        /*\n         * We XOR the low 32 bits separately from the higher bits, and then combine them with addition.\n         * Since all bits above 32 will be zero, and since 0 XOR 0 is 0, no special masking for the higher\n         * bits is required.\n         *\n         * WARNING: When using JavaScript's 32-bit operators with values that could set bit 31 and produce a\n         * negative value, it's critical to perform a final right-shift of 0, ensuring that the final result is\n         * positive.\n         */\n        if (this.nBits <= 32) {\n            return dst | src;\n        }\n        /*\n         * Negative values don't yield correct results when dividing, so pass them through an unsigned truncate().\n         */\n        dst = this.truncate(dst, 0, true);\n        src = this.truncate(src, 0, true);\n        return ((((dst / Debugger.TWO_POW32)|0) ^ ((src / Debugger.TWO_POW32)|0)) * Debugger.TWO_POW32) + ((dst ^ src) >>> 0);\n    }\n\n    /**\n     * evalMUL(dst, src)\n     *\n     * I could have adapted the code from /modules/pdp10/lib/cpuops.js:PDP10.doMUL(), but it was simpler to\n     * write this base method and let the PDP-10 Debugger override it with a call to the *actual* doMUL() method.\n     *\n     * @this {Debugger}\n     * @param {number} dst\n     * @param {number} src\n     * @return {number} (dst * src)\n     */\n    evalMUL(dst, src)\n    {\n        return dst * src;\n    }\n\n    /**\n     * truncate(v, nBits, fUnsigned)\n     *\n     * @this {Debugger}\n     * @param {number} v\n     * @param {number} [nBits]\n     * @param {boolean} [fUnsigned]\n     * @return {number}\n     */\n    truncate(v, nBits, fUnsigned)\n    {\n        var limit, vNew = v;\n        nBits = nBits || this.nBits;\n\n        if (fUnsigned) {\n            if (nBits == 32) {\n                vNew = v >>> 0;\n            }\n            else if (nBits < 32) {\n                vNew = v & ((1 << nBits) - 1);\n            }\n            else {\n                limit = Math.pow(2, nBits);\n                if (v < 0 || v >= limit) {\n                    vNew = v % limit;\n                    if (vNew < 0) vNew += limit;\n                }\n            }\n        }\n        else {\n            if (nBits <= 32) {\n                vNew = (v << (32 - nBits)) >> (32 - nBits);\n            }\n            else {\n                limit = Math.pow(2, nBits - 1);\n                if (v >= limit) {\n                    vNew = (v % limit);\n                    if (((v / limit)|0) & 1) vNew -= limit;\n                } else if (v < -limit) {\n                    vNew = (v % limit);\n                    if ((((-v - 1) / limit) | 0) & 1) {\n                        if (vNew) vNew += limit;\n                    }\n                    else {\n                        if (!vNew) vNew -= limit;\n                    }\n                }\n            }\n        }\n        if (v != vNew) {\n            if (MAXDEBUG) this.println(\"warning: value \" + v + \" truncated to \" + vNew);\n            v = vNew;\n        }\n        return v;\n    }\n\n    /**\n     * evalOps(aVals, aOps, cOps)\n     *\n     * Some of our clients want a specific number of bits of integer precision.  If that precision is\n     * greater than 32, some of the operations below will fail; for example, JavaScript bitwise operators\n     * always truncate the result to 32 bits, so beware when using shift operations.  Similarly, it would\n     * be wrong to always \"|0\" the final result, which is why we rely on truncate() now.\n     *\n     * Note that JavaScript integer precision is limited to 52 bits.  For example, in Node, if you set a\n     * variable to 0x80000001:\n     *\n     *      foo=0x80000001|0\n     *\n     * then calculate foo*foo and display the result in binary using \"(foo*foo).toString(2)\":\n     *\n     *      '11111111111111111111111111111100000000000000000000000000000000'\n     *\n     * which is slightly incorrect because it has overflowed JavaScript's floating-point precision.\n     *\n     * 0x80000001 in decimal is -2147483647, so the product is 4611686014132420609, which is 0x3FFFFFFF00000001.\n     *\n     * @this {Debugger}\n     * @param {Array.<number>} aVals\n     * @param {Array.<string>} aOps\n     * @param {number} [cOps] (default is -1 for all)\n     * @return {boolean} true if successful, false if error\n     */\n    evalOps(aVals, aOps, cOps = -1)\n    {\n        while (cOps-- && aOps.length) {\n            var chOp = aOps.pop();\n            if (aVals.length < 2) return false;\n            var valNew;\n            var val2 = aVals.pop();\n            var val1 = aVals.pop();\n            switch(chOp) {\n            case '*':\n                valNew = this.evalMUL(val1, val2);\n                break;\n            case '/':\n                if (!val2) return false;\n                valNew = Math.trunc(val1 / val2);\n                break;\n            case '^/':\n                if (!val2) return false;\n                valNew = val1 % val2;\n                break;\n            case '+':\n                valNew = val1 + val2;\n                break;\n            case '-':\n                valNew = val1 - val2;\n                break;\n            case '<<':\n                valNew = val1 << val2;\n                break;\n            case '>>':\n                valNew = val1 >> val2;\n                break;\n            case '>>>':\n                valNew = val1 >>> val2;\n                break;\n            case '<':\n                valNew = (val1 < val2? 1 : 0);\n                break;\n            case '<=':\n                valNew = (val1 <= val2? 1 : 0);\n                break;\n            case '>':\n                valNew = (val1 > val2? 1 : 0);\n                break;\n            case '>=':\n                valNew = (val1 >= val2? 1 : 0);\n                break;\n            case '==':\n                valNew = (val1 == val2? 1 : 0);\n                break;\n            case '!=':\n                valNew = (val1 != val2? 1 : 0);\n                break;\n            case '&':\n                valNew = this.evalAND(val1, val2);\n                break;\n            case '!':           // alias for MACRO-10 to perform a bitwise inclusive-or (OR)\n            case '|':\n                valNew = this.evalIOR(val1, val2);\n                break;\n            case '^!':          // since MACRO-10 uses '^' for base overrides, '^!' is used for bitwise exclusive-or (XOR)\n                valNew = this.evalXOR(val1, val2);\n                break;\n            case '&&':\n                valNew = (val1 && val2? 1 : 0);\n                break;\n            case '||':\n                valNew = (val1 || val2? 1 : 0);\n                break;\n            case ',,':\n                valNew = this.truncate(val1, 18, true) * Math.pow(2, 18) + this.truncate(val2, 18, true);\n                break;\n            case '_':\n            case '^_':\n                valNew = val1;\n                /*\n                 * While we always try to avoid assuming any particular number of bits of precision, the 'B' shift\n                 * operator (which we've converted to '^_') is unique to the MACRO-10 environment, which imposes the\n                 * following restrictions on the shift count.\n                 */\n                if (chOp == '^_') val2 = 35 - (val2 & 0xff);\n                if (val2) {\n                    /*\n                     * Since binary shifting is a logical (not arithmetic) operation, and since shifting by division only\n                     * works properly with positive numbers, we call truncate() to produce an unsigned value.\n                     */\n                    valNew = this.truncate(valNew, 0, true);\n                    if (val2 > 0) {\n                        valNew *= Math.pow(2, val2);\n                    } else {\n                        valNew = Math.trunc(valNew / Math.pow(2, -val2));\n                    }\n                }\n                break;\n            default:\n                return false;\n            }\n            aVals.push(this.truncate(valNew));\n        }\n        return true;\n    }\n\n    /**\n     * parseArray(asValues, iValue, iLimit, nBase, aUndefined)\n     *\n     * parseExpression() takes a complete expression and divides it into array elements, where even elements\n     * are values (which may be empty if two or more operators appear consecutively) and odd elements are operators.\n     *\n     * For example, if the original expression was \"2*{3+{4/2}}\", parseExpression() would call parseArray() with:\n     *\n     *      0   1   2   3   4   5   6   7   8   9  10  11  12  13  14\n     *      -   -   -   -   -   -   -   -   -   -  --  --  --  --  --\n     *      2   *       {   3   +       {   4   /   2   }       }\n     *\n     * This function takes care of recursively processing grouped expressions, by processing subsets of the array,\n     * as well as handling certain base overrides (eg, temporarily switching to base-10 for binary shift suffixes).\n     *\n     * @param {Array.<string>} asValues\n     * @param {number} iValue\n     * @param {number} iLimit\n     * @param {number} nBase\n     * @param {Array|undefined} [aUndefined]\n     * @return {number|undefined}\n     */\n    parseArray(asValues, iValue, iLimit, nBase, aUndefined)\n    {\n        var value;\n        var sValue, sOp;\n        var fError = false;\n        var nUnary = 0;\n        var aVals = [], aOps = [];\n\n        var nBasePrev = this.nBase;\n        this.nBase = nBase;\n\n        while (iValue < iLimit) {\n            var v;\n            sValue = asValues[iValue++].trim();\n            sOp = (iValue < iLimit? asValues[iValue++] : \"\");\n\n            if (sValue) {\n                v = this.parseValue(sValue, null, aUndefined, nUnary);\n            } else {\n                if (sOp == '{') {\n                    var cOpen = 1;\n                    var iStart = iValue;\n                    while (iValue < iLimit) {\n                        sValue = asValues[iValue++].trim();\n                        sOp = (iValue < asValues.length? asValues[iValue++] : \"\");\n                        if (sOp == '{') {\n                            cOpen++;\n                        } else if (sOp == '}') {\n                            if (!--cOpen) break;\n                        }\n                    }\n                    v = this.parseArray(asValues, iStart, iValue-1, this.nBase, aUndefined);\n                    if (v != null && nUnary) {\n                        v = this.parseUnary(v, nUnary);\n                    }\n                    sValue = (iValue < iLimit? asValues[iValue++].trim() : \"\");\n                    sOp = (iValue < iLimit? asValues[iValue++] : \"\");\n                }\n                else {\n                    /*\n                     * When parseExpression() calls us, it has collapsed all runs of whitespace into single spaces,\n                     * and although it allows single spaces to divide the elements of the expression, a space is neither\n                     * a unary nor binary operator.  It's essentially a no-op.  If we encounter it here, then it followed\n                     * another operator and is easily ignored (although perhaps it should still trigger a reset of nBase\n                     * and nUnary -- TBD).\n                     */\n                    if (sOp == ' ') {\n                        continue;\n                    }\n                    if (sOp == '^B') {\n                        this.nBase = 2;\n                        continue;\n                    }\n                    if (sOp == '^O') {\n                        this.nBase = 8;\n                        continue;\n                    }\n                    if (sOp == '^D') {\n                        this.nBase = 10;\n                        continue;\n                    }\n                    if (!(nUnary & (0xC0000000|0))) {\n                        if (sOp == '+') {\n                            continue;\n                        }\n                        if (sOp == '-') {\n                            nUnary = (nUnary << 2) | 1;\n                            continue;\n                        }\n                        if (sOp == '~' || sOp == '^-') {\n                            nUnary = (nUnary << 2) | 2;\n                            continue;\n                        }\n                        if (sOp == '^L') {\n                            nUnary = (nUnary << 2) | 3;\n                            continue;\n                        }\n                    }\n                    fError = true;\n                    break;\n                }\n            }\n\n            if (v === undefined) {\n                if (aUndefined) {\n                    aUndefined.push(sValue);\n                    v = 0;\n                } else {\n                    fError = true;\n                    aUndefined = [];\n                    break;\n                }\n            }\n\n            aVals.push(this.truncate(v));\n\n            /*\n             * When parseExpression() calls us, it has collapsed all runs of whitespace into single spaces,\n             * and although it allows single spaces to divide the elements of the expression, a space is neither\n             * a unary nor binary operator.  It's essentially a no-op.  If we encounter it here, then it followed\n             * a value, and since we don't want to misinterpret the next operator as a unary operator, we look\n             * ahead and grab the next operator if it's not preceded by a value.\n             */\n            if (sOp == ' ') {\n                if (iValue < asValues.length - 1 && !asValues[iValue]) {\n                    iValue++;\n                    sOp = asValues[iValue++]\n                } else {\n                    fError = true;\n                    break;\n                }\n            }\n\n            if (!sOp) break;\n\n            var aBinOp = (this.achGroup[0] == '<'? Debugger.aDECOpPrecedence : Debugger.aBinOpPrecedence);\n            if (!aBinOp[sOp]) {\n                fError = true;\n                break;\n            }\n            if (aOps.length && aBinOp[sOp] <= aBinOp[aOps[aOps.length - 1]]) {\n                this.evalOps(aVals, aOps, 1);\n            }\n            aOps.push(sOp);\n\n            /*\n             * The MACRO-10 binary shifting operator assumes a base-10 shift count, regardless of the current\n             * base, so we must override the current base to ensure the count is parsed correctly.\n             */\n            this.nBase = (sOp == '^_')? 10 : nBase;\n            nUnary = 0;\n        }\n\n        if (fError || !this.evalOps(aVals, aOps) || aVals.length != 1) {\n            fError = true;\n        }\n\n        if (!fError) {\n            value = aVals.pop();\n\n        } else if (!aUndefined) {\n            this.println(\"parse error (\" + (sValue || sOp) + \")\");\n        }\n\n        this.nBase = nBasePrev;\n        return value;\n    }\n\n    /**\n     * parseASCII(sExp, chDelim, nBits, cchMax)\n     *\n     * @this {Debugger}\n     * @param {string} sExp\n     * @param {string} chDelim\n     * @param {number} nBits\n     * @param {number} cchMax\n     * @return {string|undefined}\n     */\n    parseASCII(sExp, chDelim, nBits, cchMax)\n    {\n        var i;\n        while ((i = sExp.indexOf(chDelim)) >= 0) {\n            var v = 0;\n            var j = i + 1;\n            var cch = cchMax;\n            while (j < sExp.length) {\n                var ch = sExp[j++];\n                if (ch == chDelim) {\n                    cch = -1;\n                    break;\n                }\n                if (!cch) break;\n                cch--;\n                var c = ch.charCodeAt(0);\n                if (nBits == 7) {\n                    c &= 0x7F;\n                } else {\n                    c = (c - 0x20) & 0x3F;\n                }\n                v = this.truncate(v * Math.pow(2, nBits) + c, nBits * cchMax, true);\n            }\n            if (cch >= 0) {\n                this.println(\"parse error (\" + chDelim + sExp + chDelim + \")\");\n                return undefined;\n            } else {\n                sExp = sExp.substr(0, i) + this.toStrBase(v, -1) + sExp.substr(j);\n            }\n        }\n        return sExp;\n    }\n\n    /**\n     * parseExpression(sExp, fQuiet)\n     *\n     * A quick-and-dirty expression parser.  It takes an expression like:\n     *\n     *      EDX+EDX*4+12345678\n     *\n     * and builds a value stack in aVals and a \"binop\" (binary operator) stack in aOps:\n     *\n     *      aVals       aOps\n     *      -----       ----\n     *      EDX         +\n     *      EDX         *\n     *      4           +\n     *      ...\n     *\n     * We pop 1 \"binop\" from aOps and 2 values from aVals whenever a \"binop\" of lower priority than its\n     * predecessor is encountered, evaluate, and push the result back onto aVals.  Only selected unary\n     * operators are supported (eg, negate and complement); no ternary operators like '?:' are supported.\n     *\n     * fQuiet can be used to pass an array that collects any undefined variables that parseExpression()\n     * encounters; the value of an undefined variable is zero.  This mode was added for components that need\n     * to support expressions containing \"fixups\" (ie, values that must be determined later).\n     *\n     * @this {Debugger}\n     * @param {string|undefined} sExp\n     * @param {Array|undefined|boolean} [fQuiet]\n     * @return {number|undefined} numeric value, or undefined if sExp contains any undefined or invalid values\n     */\n    parseExpression(sExp, fQuiet)\n    {\n        var value = undefined;\n        var fPrint = (fQuiet === false);\n        var aUndefined = Array.isArray(fQuiet)? fQuiet : undefined;\n\n        if (sExp) {\n\n            /*\n             * The default delimiting characters for grouped expressions are braces; they can be changed by altering\n             * achGroup, but when that happens, instead of changing our regular expressions and operator tables,\n             * we simply replace all achGroup characters with braces in the given expression.\n             *\n             * Why not use parentheses for grouped expressions?  Because some debuggers use parseReference() to perform\n             * parenthetical value replacements in message strings, and they don't want parentheses taking on a different\n             * meaning.  And for some machines, like the PDP-10, the convention is to use parentheses for other things,\n             * like indexed addressing, and to use angle brackets for grouped expressions.\n             */\n            if (this.achGroup[0] != '{') {\n                sExp = sExp.split(this.achGroup[0]).join('{').split(this.achGroup[1]).join('}');\n            }\n\n            /*\n             * Quoted ASCII characters can have a numeric value, too, which must be converted now, to avoid any\n             * conflicts with the operators below.\n             */\n            sExp = this.parseASCII(sExp, '\"', 7, 5);    // MACRO-10 packs up to 5 7-bit ASCII codes into a value\n            if (!sExp) return value;\n            sExp = this.parseASCII(sExp, \"'\", 6, 6);    // MACRO-10 packs up to 6 6-bit ASCII (SIXBIT) codes into a value\n            if (!sExp) return value;\n\n            /*\n             * All browsers (including, I believe, IE9 and up) support the following idiosyncrasy of a RegExp split():\n             * when the RegExp uses a capturing pattern, the resulting array will include entries for all the pattern\n             * matches along with the non-matches.  This effectively means that, in the set of expressions that we\n             * support, all even entries in asValues will contain \"values\" and all odd entries will contain \"operators\".\n             *\n             * Although I started listing the operators in the RegExp in \"precedential\" order, that's not important;\n             * what IS important is listing operators than contain shorter operators first.  For example, bitwise\n             * shift operators must be listed BEFORE the logical less-than or greater-than operators.  The aBinOp tables\n             * (aBinOpPrecedence and aDECOpPrecedence) are what determine precedence, not the RegExp.\n             *\n             * Also, to better accommodate MACRO-10 syntax, I've replaced the single '^' for XOR with '^!', and I've\n             * added '!' as an alias for '|' (bitwise inclusive-or), '^-' as an alias for '~' (one's complement operator),\n             * and '_' as a shift operator (+/- values specify a left/right shift, and the count is not limited to 32).\n             *\n             * And to avoid conflicts with MACRO-10 syntax, I've replaced the original mod operator ('%') with '^/'.\n             *\n             * The MACRO-10 binary shifting suffix ('B') is a bit more problematic, since a capital B can also appear\n             * inside symbols, or inside hex values.  So if the default base is NOT 16, then I pre-scan for that suffix\n             * and replace all non-symbolic occurrences with an internal shift operator ('^_').\n             *\n             * Note that Str.parseInt(), which parseValue() relies on, supports both the MACRO-10 base prefix overrides\n             * and the binary shifting suffix ('B'), but since that suffix can also be a bracketed expression, we have to\n             * support it here as well.\n             *\n             * MACRO-10 supports only a subset of all the PCjs operators; for example, MACRO-10 doesn't support any of\n             * the boolean logical/compare operators.  But unless we run into conflicts, I prefer sticking with this\n             * common set of operators.\n             *\n             * All whitespace in the expression is collapsed to single spaces, and space has been added to the list\n             * of \"operators\", but its sole function is as a separator, not as an operator.  parseArray() will ignore\n             * single spaces as long as they are preceded and/or followed by a \"real\" operator.  It would be dangerous\n             * to remove spaces entirely, because if an operator-less expression like \"A B\" was passed in, we would want\n             * that to generate an error; if we converted it to \"AB\", evaluation might inadvertently succeed.\n             */\n            var regExp = /({|}|\\|\\||&&|\\||\\^!|\\^B|\\^O|\\^D|\\^L|\\^-|~|\\^_|_|&|!=|!|==|>=|>>>|>>|>|<=|<<|<|-|\\+|\\^\\/|\\/|\\*|,,| )/;\n            if (this.nBase != 16) {\n                sExp = sExp.replace(/(^|[^A-Z0-9$%.])([0-9]+)B/, \"$1$2^_\").replace(/\\s+/g, ' ');\n            }\n            var asValues = sExp.split(regExp);\n            value = this.parseArray(asValues, 0, asValues.length, this.nBase, aUndefined);\n            if (value !== undefined && fPrint) {\n                this.printValue(null, value);\n            }\n        }\n        return value;\n    }\n\n    /**\n     * parseReference(s)\n     *\n     * Returns the given string with any \"{expression}\" sequences replaced with the value of the expression,\n     * and any \"[address]\" references replaced with the contents of the address.  Expressions are parsed BEFORE\n     * addresses.\n     *\n     * @this {Debugger}\n     * @param {string} s\n     * @return {string|undefined}\n     */\n    parseReference(s)\n    {\n        var a;\n        var chOpen = this.achGroup[0];\n        var chClose = this.achGroup[1];\n        var chEscape = (chOpen == '(' || chOpen == '{' || chOpen == '[')? '\\\\' : '';\n        var chInnerEscape = (chOpen == '['? '\\\\' : '');\n        var reSubExp = new RegExp(chEscape + chOpen + \"([^\" + chInnerEscape + chOpen + chInnerEscape + chClose + \"]+)\" + chEscape + chClose);\n        while (a = s.match(reSubExp)) {\n            var value = this.parseExpression(a[1]);\n            if (value === undefined) return undefined;\n            var sSearch = chOpen + a[1] + chClose;\n            var sReplace = value != null? this.toStrBase(value) : \"undefined\";\n            /*\n             * Note that by default, the String replace() method only replaces the FIRST occurrence,\n             * and there MIGHT be more than one occurrence of the expression we just parsed, so we could\n             * do this instead:\n             *\n             *      s = s.split(sSearch).join(sReplace);\n             *\n             * However, that's knd of an expensive (slow) solution, and it's not strictly necessary, since\n             * any additional identical expressions will be picked up on a subsequent iteration through this loop.\n             */\n            s = s.replace(sSearch, sReplace);\n        }\n        if (this.achAddress.length) {\n            chOpen = this.achAddress[0];\n            chClose = this.achAddress[1];\n            chEscape = (chOpen == '(' || chOpen == '{' || chOpen == '[')? '\\\\' : '';\n            chInnerEscape = (chOpen == '['? '\\\\' : '');\n            reSubExp = new RegExp(chEscape + chOpen + \"([^\" + chInnerEscape + chOpen + chInnerEscape + chClose + \"]+)\" + chEscape + chClose);\n            while (a = s.match(reSubExp)) {\n                s = this.parseAddrReference(s, a[1]);\n            }\n        }\n        return this.parseSysVars(s);\n    }\n\n    /**\n     * parseSysVars(s)\n     *\n     * Returns the given string with any recognized \"$var\" replaced with its value; eg:\n     *\n     *      $ops: the number of opcodes executed since the last time it was displayed (or reset)\n     *\n     * @this {Debugger}\n     * @param {string} s\n     * @return {string}\n     */\n    parseSysVars(s)\n    {\n        var a;\n        while (a = s.match(/\\$([a-z]+)/i)) {\n            var v = null;\n            switch(a[1].toLowerCase()) {\n            case \"ops\":\n                v = this.cOpcodes - this.cOpcodesStart;\n                break;\n            }\n            if (v == null) break;\n            s = s.replace(a[0], v.toString());\n        }\n        return s;\n    }\n\n    /**\n     * parseUnary(value, nUnary)\n     *\n     * nUnary is actually a small \"stack\" of unary operations encoded in successive pairs of bits.\n     * As parseExpression() encounters each unary operator, nUnary is shifted left 2 bits, and the\n     * new unary operator is encoded in bits 0 and 1 (0b00 is none, 0b01 is negate, 0b10 is complement,\n     * and 0b11 is reserved).  Here, we process the bits in reverse order (hence the stack-like nature),\n     * ensuring that we process the unary operators associated with this value right-to-left.\n     *\n     * Since bitwise operators see only 32 bits, more than 16 unary operators cannot be supported\n     * using this method.  We'll let parseExpression() worry about that; if it ever happens in practice,\n     * then we'll have to switch to a more \"expensive\" approach (eg, an actual array of unary operators).\n     *\n     * @this {Debugger}\n     * @param {number} value\n     * @param {number} nUnary\n     * @return {number}\n     */\n    parseUnary(value, nUnary)\n    {\n        while (nUnary) {\n            switch(nUnary & 0o3) {\n            case 1:\n                value = -this.truncate(value);\n                break;\n            case 2:\n                value = this.evalXOR(value, -1);        // this is easier than adding an evalNOT()...\n                break;\n            case 3:\n                var bit = 35;                           // simple left-to-right zero-bit-counting loop...\n                while (bit >= 0 && !this.evalAND(value, Math.pow(2, bit))) bit--;\n                value = 35 - bit;\n                break;\n            }\n            nUnary >>>= 2;\n        }\n        return value;\n    }\n\n    /**\n     * parseValue(sValue, sName, fQuiet, nUnary)\n     *\n     * @this {Debugger}\n     * @param {string|undefined} sValue\n     * @param {string|null} [sName] is the name of the value, if any\n     * @param {Array|undefined|boolean} [fQuiet]\n     * @param {number} [nUnary] (0 for none, 1 for negate, 2 for complement, 3 for leading zeros)\n     * @return {number|undefined} numeric value, or undefined if sValue is either undefined or invalid\n     */\n    parseValue(sValue, sName, fQuiet, nUnary = 0)\n    {\n        var value;\n        var aUndefined = Array.isArray(fQuiet)? fQuiet : undefined;\n\n        if (sValue != null) {\n            var iReg = this.getRegIndex(sValue);\n            if (iReg >= 0) {\n                value = this.getRegValue(iReg);\n            } else {\n                value = this.getVariable(sValue);\n                if (value != null) {\n                    var sUndefined = this.getVariableFixup(sValue);\n                    if (sUndefined) {\n                        if (aUndefined) {\n                            aUndefined.push(sUndefined);\n                        } else {\n                            var valueUndefined = this.parseExpression(sUndefined, fQuiet);\n                            if (valueUndefined !== undefined) {\n                                value += valueUndefined;\n                            } else {\n                                if (!fQuiet) {\n                                    this.println(\"undefined \" + (sName || \"value\") + \": \" + sValue + \" (\" + sUndefined + \")\");\n                                }\n                                value = undefined;\n                            }\n                        }\n                    }\n                } else {\n                    /*\n                     * A feature of MACRO-10 is that any single-digit number is automatically interpreted as base-10.\n                     */\n                    value = Str.parseInt(sValue, sValue.length > 1 || this.nBase > 10? this.nBase : 10);\n                }\n            }\n            if (value != null) {\n                value = this.truncate(this.parseUnary(value, nUnary));\n            } else {\n                if (!fQuiet) {\n                    this.println(\"invalid \" + (sName || \"value\") + \": \" + sValue);\n                }\n            }\n        } else {\n            if (!fQuiet) {\n                this.println(\"missing \" + (sName || \"value\"));\n            }\n        }\n        return value;\n    }\n\n    /**\n     * printValue(sVar, value)\n     *\n     * @this {Debugger}\n     * @param {string|null} sVar\n     * @param {number|undefined} value\n     * @return {boolean} true if value defined, false if not\n     */\n    printValue(sVar, value)\n    {\n        var sValue;\n        var fDefined = false;\n        if (value !== undefined) {\n            fDefined = true;\n            if (this.nBase == 8) {\n                sValue = this.toStrBase(value, this.nBits, 8, 1) + \"  \" + value + '.';\n            } else {\n                sValue = this.toStrBase(value, this.nBits, 16, 1) + \"  \" + this.toStrBase(value, this.nBits, 8, 1) + \"  \" + this.toStrBase(value, this.nBits, 2, this.nBits <= 32? 8 : 6) + \"  \" + value + '.';\n            }\n            if (value >= 0x20 && value < 0x7F) {\n                sValue += \" '\" + String.fromCharCode(value) + \"'\";\n            }\n        }\n        sVar = (sVar != null? (sVar + \": \") : \"\");\n        this.println(sVar + sValue);\n        return fDefined;\n    }\n\n    /**\n     * resetVariables()\n     *\n     * @this {Debugger}\n     * @return {Object}\n     */\n    resetVariables()\n    {\n        var a = this.aVariables;\n        this.aVariables = {};\n        return a;\n    }\n\n    /**\n     * restoreVariables(a)\n     *\n     * @this {Debugger}\n     * @param {Object} a (from previous resetVariables() call)\n     */\n    restoreVariables(a)\n    {\n        this.aVariables = a;\n    }\n\n    /**\n     * printVariable(sVar)\n     *\n     * @this {Debugger}\n     * @param {string} [sVar]\n     * @return {boolean} true if all value(s) defined, false if not\n     */\n    printVariable(sVar)\n    {\n        var cVariables = 0;\n        if (this.aVariables) {\n            if (sVar) {\n                return this.printValue(sVar, this.aVariables[sVar] && this.aVariables[sVar].value);\n            }\n            var aVars = Object.keys(this.aVariables);\n            aVars.sort();\n            for (var i = 0; i < aVars.length; i++) {\n                this.printValue(aVars[i], this.aVariables[aVars[i]].value);\n                cVariables++;\n            }\n        }\n        return cVariables > 0;\n    }\n\n    /**\n     * delVariable(sVar)\n     *\n     * @this {Debugger}\n     * @param {string} sVar\n     */\n    delVariable(sVar)\n    {\n        delete this.aVariables[sVar];\n    }\n\n    /**\n     * getVariable(sVar)\n     *\n     * @this {Debugger}\n     * @param {string} sVar\n     * @return {number|undefined}\n     */\n    getVariable(sVar)\n    {\n        if (this.aVariables[sVar]) {\n            return this.aVariables[sVar].value;\n        }\n        sVar = sVar.substr(0, 6);\n        return this.aVariables[sVar] && this.aVariables[sVar].value;\n    }\n\n    /**\n     * getVariableFixup(sVar)\n     *\n     * @this {Debugger}\n     * @param {string} sVar\n     * @return {string|undefined}\n     */\n    getVariableFixup(sVar)\n    {\n        return this.aVariables[sVar] && this.aVariables[sVar].sUndefined;\n    }\n\n    /**\n     * isVariable(sVar)\n     *\n     * @this {Debugger}\n     * @param {string} sVar\n     * @return {boolean}\n     */\n    isVariable(sVar)\n    {\n        return this.aVariables[sVar] !== undefined;\n    }\n\n    /**\n     * setVariable(sVar, value, sUndefined)\n     *\n     * @this {Debugger}\n     * @param {string} sVar\n     * @param {number} value\n     * @param {string|undefined} [sUndefined]\n     */\n    setVariable(sVar, value, sUndefined)\n    {\n        this.aVariables[sVar] = {value, sUndefined};\n    }\n\n    /**\n     * toStrBase(n, nBits, nBase, nGrouping)\n     *\n     * Use this instead of Str's toOct()/toDec()/toHex() to convert numbers to the Debugger's default base.\n     *\n     * @this {Debugger}\n     * @param {number|null|undefined} n\n     * @param {number} [nBits] (-1 to strip leading zeros, 0 to allow a variable number of digits)\n     * @param {number} [nBase]\n     * @param {number} [nGrouping] (if nBase is 2, this is a grouping; otherwise, it's a prefix condition)\n     * @return {string}\n     */\n    toStrBase(n, nBits = 0, nBase = 0, nGrouping = 0)\n    {\n        var s;\n        switch(nBase || this.nBase) {\n        case 2:\n            s = Str.toBin(n, nBits > 0? nBits : 0, nGrouping);\n            break;\n        case 8:\n            s = Str.toOct(n, nBits > 0? ((nBits + 2)/3)|0 : 0, !!nGrouping);\n            break;\n        case 10:\n            /*\n             * The multiplier is actually Math.log(2)/Math.log(10), but an approximation is more than adequate.\n             */\n            s = Str.toDec(n, nBits > 0? Math.ceil(nBits * 0.3) : 0);\n            break;\n        case 16:\n        default:\n            s = Str.toHex(n, nBits > 0? ((nBits + 3) >> 2) : 0, !!nGrouping);\n            break;\n        }\n        return (nBits < 0? Str.stripLeadingZeros(s) : s);\n    }\n}\n\nif (DEBUGGER) {\n\n    /*\n     * These are our operator precedence tables.  Operators toward the bottom (with higher values) have\n     * higher precedence.  aBinOpPrecedence was our original table; we had to add aDECOpPrecedence because\n     * the precedence of operators in DEC's MACRO-10 expressions differ.  Having separate tables also allows\n     * us to remove operators that shouldn't be supported, but unless some operator creates a problem,\n     * I prefer to keep as much commonality between the tables as possible.\n     *\n     * Missing from these tables are the (limited) set of unary operators we support (negate and complement),\n     * since this is only a BINARY operator precedence, not a general-purpose precedence table.  Assume that\n     * all unary operators take precedence over all binary operators.\n     */\n    Debugger.aBinOpPrecedence = {\n        '||':   5,      // logical OR\n        '&&':   6,      // logical AND\n        '!':    7,      // bitwise OR (conflicts with logical NOT, but we never supported that)\n        '|':    7,      // bitwise OR\n        '^!':   8,      // bitwise XOR (added by MACRO-10 sometime between the 1972 and 1978 versions)\n        '&':    9,      // bitwise AND\n        '!=':   10,     // inequality\n        '==':   10,     // equality\n        '>=':   11,     // greater than or equal to\n        '>':    11,     // greater than\n        '<=':   11,     // less than or equal to\n        '<':    11,     // less than\n        '>>>':  12,     // unsigned bitwise right shift\n        '>>':   12,     // bitwise right shift\n        '<<':   12,     // bitwise left shift\n        '-':    13,     // subtraction\n        '+':    13,     // addition\n        '^/':   14,     // remainder\n        '/':    14,     // division\n        '*':    14,     // multiplication\n        '_':    19,     // MACRO-10 shift operator\n        '^_':   19,     // MACRO-10 internal shift operator (converted from 'B' suffix form that MACRO-10 uses)\n        '{':    20,     // open grouped expression (converted from achGroup[0])\n        '}':    20      // close grouped expression (converted from achGroup[1])\n    };\n    Debugger.aDECOpPrecedence = {\n        ',,':   1,      // high-word,,low-word\n        '||':   5,      // logical OR\n        '&&':   6,      // logical AND\n        '!=':   10,     // inequality\n        '==':   10,     // equality\n        '>=':   11,     // greater than or equal to\n        '>':    11,     // greater than\n        '<=':   11,     // less than or equal to\n        '<':    11,     // less than\n        '>>>':  12,     // unsigned bitwise right shift\n        '>>':   12,     // bitwise right shift\n        '<<':   12,     // bitwise left shift\n        '-':    13,     // subtraction\n        '+':    13,     // addition\n        '^/':   14,     // remainder\n        '/':    14,     // division\n        '*':    14,     // multiplication\n        '!':    15,     // bitwise OR (conflicts with logical NOT, but we never supported that)\n        '|':    15,     // bitwise OR\n        '^!':   15,     // bitwise XOR (added by MACRO-10 sometime between the 1972 and 1978 versions)\n        '&':    15,     // bitwise AND\n        '_':    19,     // MACRO-10 shift operator\n        '^_':   19,     // MACRO-10 internal shift operator (converted from 'B' suffix form that MACRO-10 uses)\n        '{':    20,     // open grouped expression (converted from achGroup[0])\n        '}':    20      // close grouped expression (converted from achGroup[1])\n    };\n\n    /*\n     * Assorted constants\n     */\n    Debugger.TWO_POW32 = Math.pow(2, 32);\n\n}   // endif DEBUGGER\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp10/lib/debugger.js (C) Jeff Parsons 2012-2018\n */\n\n\n/**\n * DebuggerPDP10 Address Object\n *\n *      addr            address\n *      fPhysical       true if this is a physical address\n *      fTemporary      true if this is a temporary breakpoint address\n *      nBase           set if the address contained an explicit base (eg, 16, 10, 8, etc)\n *      sCmd            set for breakpoint addresses if there's an associated command string\n *      aCmds           preprocessed commands (from sCmd)\n *\n * @typedef {{\n *      addr:(number|null),\n *      fPhysical:(boolean),\n *      fTemporary:(boolean),\n *      nBase:(number|undefined),\n *      sCmd:(string|undefined),\n *      aCmds:(Array.<string>|undefined)\n * }}\n */\nvar DbgAddrPDP10;\n\nclass DebuggerPDP10 extends Debugger {\n    /**\n     * DebuggerPDP10(parmsDbg)\n     *\n     * The DebuggerPDP10 component supports the following optional (parmsDbg) properties:\n     *\n     *      commands: string containing zero or more commands, separated by ';'\n     *\n     *      messages: string containing zero or more message categories to enable;\n     *      multiple categories must be separated by '|' or ';'.  Parsed by messageInit().\n     *\n     * The DebuggerPDP10 component is an optional component that implements a variety of user\n     * commands for controlling the CPU, dumping and editing memory, etc.\n     *\n     * @this {DebuggerPDP10}\n     * @param {Object} parmsDbg\n     */\n    constructor(parmsDbg)\n    {\n        if (DEBUGGER) {\n\n            super(parmsDbg);\n\n            /*\n             * Since this Debugger doesn't use replaceRegs(), we can use parentheses instead of braces.\n             */\n            this.fInit = false;\n            this.nBusWidth = 18;        // default value, updated by initBus()\n\n            this.nBits = 36;            // default integer precision\n            this.achGroup = ['<','>'];\n            this.achAddress = [];\n\n            /*\n             * Most commands that require an address call parseAddr(), and if a dbgAddr parameter is supplied\n             * as as well (eg, dbgAddrCode, dbgAddrData), then that address will be used as the default.\n             *\n             * For TEMPORARY breakpoint addresses, we set fTemporary to true, so that they can be automatically\n             * cleared when they're hit.\n             */\n            this.dbgAddrAcc = this.newAddr();\n            this.dbgAddrCode = this.newAddr(0);\n            this.dbgAddrData = this.newAddr(0);\n            this.dbgAddrAssemble = this.newAddr(0);\n\n            /*\n             * aSymbolTable is an array of SymbolTable objects, one per ROM or other chunk of address space,\n             * where each object contains the following properties:\n             *\n             *      sModule\n             *      addr (physical address, if any; eg, symbols for a ROM)\n             *      len\n             *      aSymbols\n             *      aOffsets\n             *\n             * See addSymbols() for more details, since that's how callers add sets of symbols to the table.\n             */\n            this.aSymbolTable = [];\n\n            /*\n             * clearBreakpoints() initializes the breakpoints lists: aBreakExec is a list of addresses\n             * to halt on whenever attempting to execute an instruction at the corresponding address,\n             * and aBreakRead and aBreakWrite are lists of addresses to halt on whenever a read or write,\n             * respectively, occurs at the corresponding address.\n             *\n             * NOTE: Curiously, after upgrading the Google Closure Compiler from v20141215 to v20150609,\n             * the resulting compiled code would crash in clearBreakpoints(), because the (renamed) aBreakRead\n             * property was already defined.  To eliminate whatever was confusing the Closure Compiler, I've\n             * explicitly initialized all the properties that clearBreakpoints() (re)initializes.\n             */\n            this.aBreakExec = this.aBreakRead = this.aBreakWrite = [];\n            this.clearBreakpoints();\n\n            /*\n             * The new \"bn\" command allows you to specify a number of instructions to execute and then stop;\n             * \"bn 0\" disables any outstanding count.\n             */\n            this.nBreakInstructions = 0;\n\n            /*\n             * Execution history is allocated by historyInit() whenever checksEnabled() conditions change.\n             * Execution history is updated whenever the CPU calls checkInstruction(), which will happen\n             * only when checksEnabled() returns true (eg, whenever one or more breakpoints have been set).\n             * This ensures that, by default, the CPU runs as fast as possible.\n             */\n            this.iInstructionHistory = 0;\n            this.aInstructionHistory = [];\n            this.nextHistory = undefined;\n            this.historyInit();\n\n            /*\n             * Initialize DebuggerPDP10 message support.\n             */\n            this.dbg = this;\n            this.afnDumpers = {};\n            this.bitsMessage = this.bitsWarning = 0;\n            this.sMessagePrev = null;\n            this.aMessageBuffer = [];\n            this.messageInit(parmsDbg['messages']);\n            this.sInitCommands = parmsDbg['commands'];\n            this.aCommands = [];\n\n            /*\n             * Define remaining miscellaneous DebuggerPDP10 properties.\n             */\n            this.aOpReserved = [];\n            this.nStep = 0;\n            this.sCmdTracePrev = null;\n            this.sCmdDumpPrev = null;\n            this.nSuppressBreaks = 0;\n            this.cInstructions = this.cInstructionsStart = 0;\n            this.nCycles = this.nCyclesStart = this.msStart = 0;\n            this.controlDebug = null;\n            this.panel = null;\n\n            /**\n             * This records any active Macro10 assembler object.\n             *\n             * @type {Macro10|null}\n             */\n            this.macro10 = null;\n\n            /*\n             * Make it easier to access DebuggerPDP10 commands from an external REPL;\n             * eg, the WebStorm \"live\" console window:\n             *\n             *      pdp10('r')\n             *      pdp10('dw 0:0')\n             *      pdp10('h')\n             *      ...\n             */\n            var dbg = this;\n            if (window) {\n                if (window[PDP10.APPCLASS] === undefined) {\n                    window[PDP10.APPCLASS] = function(s) { return dbg.doCommands(s); };\n                }\n            } else {\n                if (global[PDP10.APPCLASS] === undefined) {\n                    global[PDP10.APPCLASS] = function(s) { return dbg.doCommands(s); };\n                }\n            }\n\n        }   // endif DEBUGGER\n    }\n\n    /**\n     * getAddr(dbgAddr, fWrite)\n     *\n     * @this {DebuggerPDP10}\n     * @param {DbgAddrPDP10|null} [dbgAddr]\n     * @param {boolean} [fWrite]\n     * @return {number} is the corresponding linear address, or PDP10.ADDR_INVALID\n     */\n    getAddr(dbgAddr, fWrite)\n    {\n        var addr = dbgAddr && dbgAddr.addr;\n        if (addr == null) addr = PDP10.ADDR_INVALID;\n        return addr;\n    }\n\n    /**\n     * newAddr(addr, fPhysical, nBase)\n     *\n     * Returns a NEW DbgAddrPDP10 object, initialized with specified values and/or defaults.\n     *\n     * @this {DebuggerPDP10}\n     * @param {number|null} [addr]\n     * @param {boolean} [fPhysical]\n     * @param {number} [nBase]\n     * @return {DbgAddrPDP10}\n     */\n    newAddr(addr = null, fPhysical = false, nBase)\n    {\n        return {addr: addr, fPhysical: fPhysical, fTemporary: false, nBase: nBase};\n    }\n\n    /**\n     * copyAddr(dbgAddr, dbgCopy)\n     *\n     * Updates an EXISTING DbgAddrPDP10 object, initialized with specified values and/or defaults.\n     *\n     * @this {DebuggerPDP10}\n     * @param {DbgAddrPDP10} dbgAddr\n     * @param {DbgAddrPDP10} dbgCopy\n     * @return {DbgAddrPDP10}\n     */\n    copyAddr(dbgAddr, dbgCopy)\n    {\n        dbgAddr.addr = dbgCopy.addr;\n        dbgAddr.fPhysical = dbgCopy.fPhysical;\n        dbgAddr.fTemporary = dbgCopy.fTemporary;\n        dbgAddr.nBase = dbgCopy.nBase;\n        return dbgAddr;\n    }\n\n    /**\n     * setAddr(dbgAddr, addr, fPhysical, nBase)\n     *\n     * Updates an EXISTING DbgAddrPDP10 object, initialized with specified values and/or defaults.\n     *\n     * @this {DebuggerPDP10}\n     * @param {DbgAddrPDP10} dbgAddr\n     * @param {number} addr\n     * @param {boolean} [fPhysical]\n     * @param {number} [nBase]\n     * @return {DbgAddrPDP10}\n     */\n    setAddr(dbgAddr, addr, fPhysical, nBase)\n    {\n        dbgAddr.addr = addr;\n        dbgAddr.fPhysical = fPhysical || false;\n        dbgAddr.fTemporary = false;\n        dbgAddr.nBase = nBase;\n        return dbgAddr;\n    }\n\n    /**\n     * packAddr(dbgAddr)\n     *\n     * Packs a DbgAddrPDP10 object into an Array suitable for saving in a machine state object.\n     *\n     * @this {DebuggerPDP10}\n     * @param {DbgAddrPDP10} dbgAddr\n     * @return {Array}\n     */\n    packAddr(dbgAddr)\n    {\n        return [dbgAddr.addr, dbgAddr.fPhysical, dbgAddr.fTemporary, dbgAddr.nBase, dbgAddr.sCmd];\n    }\n\n    /**\n     * unpackAddr(aAddr)\n     *\n     * Unpacks a DbgAddrPDP10 object from an Array created by packAddr() and restored from a saved machine state.\n     *\n     * @this {DebuggerPDP10}\n     * @param {Array} aAddr\n     * @return {DbgAddrPDP10}\n     */\n    unpackAddr(aAddr)\n    {\n        var dbgAddr = this.newAddr(aAddr[0], aAddr[1], aAddr[2]);\n        dbgAddr.fTemporary = aAddr[3];\n        if (aAddr[4]) {\n            dbgAddr.aCmds = this.parseCommand(dbgAddr.sCmd = aAddr[4]);\n        }\n        return dbgAddr;\n    }\n\n    /**\n     * initBus(bus, cpu, dbg)\n     *\n     * @this {DebuggerPDP10}\n     * @param {ComputerPDP10} cmp\n     * @param {BusPDP10} bus\n     * @param {CPUStatePDP10} cpu\n     * @param {DebuggerPDP10} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.bus = bus;\n        this.cmp = cmp;\n        this.cpu = cpu;\n        this.panel = cmp.panel;\n        this.nBusWidth = bus.getWidth();\n\n        /*\n         * Override the Debugger's message configuration if specified.\n         */\n        var sMessages = /** @type {string|undefined} */ (cmp.getMachineParm('messages'));\n        if (sMessages) this.messageInit(sMessages);\n\n        /*\n         * Override the Debugger's initialization commands if specified.\n         */\n        var sCommands = /** @type {string|undefined} */ (cmp.getMachineParm('commands'));\n        if (sCommands) this.sInitCommands = sCommands;\n\n        /*\n         * Update aOpReserved as appropriate for the current model\n         */\n\n        this.messageDump(MessagesPDP10.BUS,  function onDumpBus(asArgs) { dbg.dumpBus(asArgs); });\n\n        this.setReady();\n    }\n\n    /**\n     * setBinding(sType, sBinding, control, sValue)\n     *\n     * @this {DebuggerPDP10}\n     * @param {string|null} sType is the type of the HTML control (eg, \"button\", \"textarea\", \"register\", \"flag\", \"rled\", etc)\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"debugInput\")\n     * @param {Object} control is the HTML control DOM object (eg, HTMLButtonElement)\n     * @param {string} [sValue] optional data value\n     * @return {boolean} true if binding was successful, false if unrecognized binding request\n     */\n    setBinding(sType, sBinding, control, sValue)\n    {\n        var dbg = this;\n        switch (sBinding) {\n\n        case \"debugInput\":\n            this.bindings[sBinding] = control;\n            this.controlDebug = control;\n            /*\n             * For halted machines, this is fine, but for auto-start machines, it can be annoying.\n             *\n             *      control.focus();\n             */\n            control.onkeydown = function onKeyDownDebugInput(event) {\n                var sCmd;\n                if (event.keyCode == Keys.KEYCODE.CR) {\n                    sCmd = control.value;\n                    control.value = \"\";\n                    dbg.doCommands(sCmd, true);\n                }\n                else if (event.keyCode == Keys.KEYCODE.ESC) {\n                    control.value = sCmd = \"\";\n                }\n                else {\n                    if (event.keyCode == Keys.KEYCODE.UP) {\n                        sCmd = dbg.getPrevCommand();\n                    }\n                    else if (event.keyCode == Keys.KEYCODE.DOWN) {\n                        sCmd = dbg.getNextCommand();\n                    }\n                    if (sCmd != null) {\n                        var cch = sCmd.length;\n                        control.value = sCmd;\n                        control.setSelectionRange(cch, cch);\n                    }\n                }\n                if (sCmd != null && event.preventDefault) event.preventDefault();\n            };\n            return true;\n\n        case \"debugEnter\":\n            this.bindings[sBinding] = control;\n            Web.onClickRepeat(\n                control,\n                500, 100,\n                function onClickDebugEnter(fRepeat) {\n                    if (dbg.controlDebug) {\n                        var sCmd = dbg.controlDebug.value;\n                        dbg.controlDebug.value = \"\";\n                        dbg.doCommands(sCmd, true);\n                        return true;\n                    }\n                    if (DEBUG) dbg.log(\"no debugger input buffer\");\n                    return false;\n                }\n            );\n            return true;\n\n        case \"step\":\n            this.bindings[sBinding] = control;\n            Web.onClickRepeat(\n                control,\n                500, 100,\n                function onClickStep(fRepeat) {\n                    var fCompleted = false;\n                    if (!dbg.isBusy(true)) {\n                        dbg.setBusy(true);\n                        fCompleted = dbg.stepCPU(fRepeat? 1 : 0, null);\n                        dbg.setBusy(false);\n                    }\n                    return fCompleted;\n                }\n            );\n            return true;\n\n        default:\n            break;\n        }\n        return false;\n    }\n\n    /**\n     * setFocus(fScroll)\n     *\n     * @this {DebuggerPDP10}\n     * @param {boolean} [fScroll] (true if you really want the control scrolled into view)\n     */\n    setFocus(fScroll)\n    {\n        if (this.controlDebug) {\n            /*\n             * This is the recommended work-around to prevent the browser from scrolling the focused element\n             * into view.  The CPU is not a visual component, so when the CPU wants to set focus, the primary intent\n             * is to ensure that keyboard input is fielded properly.\n             */\n            var x = 0, y = 0;\n            if (!fScroll && window) {\n                x = window.scrollX;\n                y = window.scrollY;\n            }\n\n            this.controlDebug.focus();\n\n            if (!fScroll && window) {\n                window.scrollTo(x, y);\n            }\n        }\n    }\n\n    /**\n     * getWord(dbgAddr, inc)\n     *\n     * @this {DebuggerPDP10}\n     * @param {DbgAddrPDP10} dbgAddr\n     * @param {number} [inc]\n     * @return {number}\n     */\n    getWord(dbgAddr, inc)\n    {\n        var w = PDP10.WORD_INVALID;\n        var addr = this.getAddr(dbgAddr, false);\n        if (addr !== PDP10.ADDR_INVALID) {\n            w = this.bus.getWordDirect(addr);\n            if (inc) this.incAddr(dbgAddr, inc);\n        }\n        return w;\n    }\n\n    /**\n     * setWord(dbgAddr, w, inc)\n     *\n     * @this {DebuggerPDP10}\n     * @param {DbgAddrPDP10} dbgAddr\n     * @param {number} w\n     * @param {number} [inc]\n     */\n    setWord(dbgAddr, w, inc)\n    {\n        var addr = this.getAddr(dbgAddr, true);\n        if (addr !== PDP10.ADDR_INVALID) {\n            this.bus.setWordDirect(addr, w);\n            if (inc) this.incAddr(dbgAddr, inc);\n            this.cmp.updateDisplays(-1);\n        }\n    }\n\n    /**\n     * evalMUL(dst, src)\n     *\n     * Overrides the standard multiplication function with one that honors PDP-10 semantics and precision.\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} dst\n     * @param {number} src\n     * @return {number} (dst * src)\n     */\n    evalMUL(dst, src)\n    {\n        /*\n         * The CPU requires that all 36-bit inputs/outputs be UNSIGNED, whereas our expression evaluator allows signed\n         * inputs/outputs.  So we perform two's complement conversions on all inputs/outputs as needed.\n         */\n        if (dst < 0) dst += PDP10.WORD_LIMIT;\n        if (src < 0) src += PDP10.WORD_LIMIT;\n        var result = PDP10.doMUL.call(this.cpu, dst, src, false, true);\n        if (result >= PDP10.INT_LIMIT) result -= PDP10.WORD_LIMIT;\n        if (MAXDEBUG) {\n            var resultJS = this.truncate(dst * src);\n            if (resultJS !== result) {\n                var sReference = this.macro10? (\" @\" + this.toStrBase(this.macro10.nLocation)) : \"\";\n                var sResults = \"PDP-10: \" + this.toStrBase(result, 36) + \" JavaScript: \" + this.toStrBase(resultJS, 36);\n                this.println(\"MUL(\" + this.toStrBase(dst, 36) + \",\" + this.toStrBase(src, 36) + \") \" + sResults + sReference);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * parseAddr(sAddr, dbgAddr)\n     *\n     * Address evaluation and validation (eg, range checks) are no longer performed at this stage.  That's\n     * done later, by getAddr(), which returns PDP10.ADDR_INVALID for invalid segments, out-of-range offsets,\n     * etc.  The Debugger's low-level get/set memory functions verify all getAddr() results, but even if an\n     * invalid address is passed through to the Bus memory interfaces, the address will simply be masked with\n     * bus.nBusMask; in the case of PDP10.ADDR_INVALID, that will generally refer to the top of the physical\n     * address space.\n     *\n     * @this {DebuggerPDP10}\n     * @param {string|undefined} sAddr\n     * @param {DbgAddrPDP10} [dbgAddr]\n     * @return {DbgAddrPDP10}\n     */\n    parseAddr(sAddr, dbgAddr)\n    {\n        var fPhysical, nBase;\n        if (!dbgAddr) dbgAddr = this.newAddr();\n        var addr = dbgAddr.addr;\n        if (sAddr !== undefined) {\n            sAddr = this.parseReference(sAddr);\n            var ch = sAddr.charAt(0);\n            if (ch == '%') {\n                fPhysical = true;\n                sAddr = sAddr.substr(1);\n            }\n            var dbgAddrTmp = this.findSymbolAddr(sAddr);\n            if (dbgAddrTmp) return dbgAddrTmp;\n            if (sAddr.indexOf(\"0x\") >= 0) {\n                nBase = 16\n            } else if (sAddr.indexOf(\"0o\") >= 0) {\n                nBase = 8;\n            } else if (sAddr.indexOf('.') >= 0) {\n                nBase = 10;\n            }\n            addr = this.parseExpression(sAddr);\n        }\n        if (addr != null) {\n            addr = this.validateWord(addr, this.nBusWidth);\n            this.setAddr(dbgAddr, addr, fPhysical, nBase);\n        }\n        return dbgAddr;\n    }\n\n    /**\n     * parseAddrOptions(dbdAddr, sOptions)\n     *\n     * @this {DebuggerPDP10}\n     * @param {DbgAddrPDP10} dbgAddr\n     * @param {string} [sOptions]\n     */\n    parseAddrOptions(dbgAddr, sOptions)\n    {\n        if (sOptions) {\n            var a = sOptions.match(/(['\"])(.*?)\\1/);\n            if (a) {\n                dbgAddr.aCmds = this.parseCommand(dbgAddr.sCmd = a[2]);\n            }\n        }\n    }\n\n    /**\n     * validateWord(w, bits)\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} w\n     * @param {number} [bits]\n     * @return {number}\n     */\n    validateWord(w, bits = 36)\n    {\n        /*\n         * Although it's expected that most callers will supply unsigned 36-bit values, we're nice about\n         * converting any signed values to their unsigned (two's complement) counterpart, provided they are\n         * within the acceptable range.  Any values outside that range will be dealt with afterward.\n         */\n        if (w < 0 && w >= -PDP10.INT_LIMIT) {\n            w += PDP10.WORD_LIMIT;\n        }\n        var value = Math.trunc(Math.abs(w)) % Math.pow(2, bits);\n        if (DEBUG && w !== value) {\n            this.println(\"validateWord(\" + Str.toOct(w) + \"): out of range, truncated to \" + Str.toOct(value));\n        }\n        return value;\n    }\n\n    /**\n     * incAddr(dbgAddr, inc)\n     *\n     * @this {DebuggerPDP10}\n     * @param {DbgAddrPDP10} dbgAddr\n     * @param {number} [inc] contains value to increment dbgAddr by (default is 1)\n     */\n    incAddr(dbgAddr, inc)\n    {\n        if (dbgAddr.addr != null) {\n            dbgAddr.addr += (inc || 1);\n        }\n    }\n\n    /**\n     * toStrOffset(off)\n     *\n     * @this {DebuggerPDP10}\n     * @param {number|null|undefined} [off]\n     * @return {string} default base representation of off\n     */\n    toStrOffset(off)\n    {\n        return this.toStrBase(off, 18);\n    }\n\n    /**\n     * toStrAddr(dbgAddr)\n     *\n     * @this {DebuggerPDP10}\n     * @param {DbgAddrPDP10} dbgAddr\n     * @return {string} default base representation of the address\n     */\n    toStrAddr(dbgAddr)\n    {\n        return this.toStrOffset(dbgAddr.addr);\n    }\n\n    /**\n     * toStrWord(w)\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} w (up to, but not including, WORD_LIMIT)\n     * @return {string} octal representation of the 36-bit word, as two 18-bit values\n     */\n    toStrWord(w)\n    {\n        /*\n         * ADDR_LIMIT is not derived from WORD_LIMIT; we're just taking advantage of the fact\n         * that ADDR_LIMIT happens to be exactly half of WORD_LIMIT, and they are both powers of two.\n         */\n        return this.toStrBase(w / PDP10.ADDR_LIMIT, 18) + ' ' + this.toStrBase(w % PDP10.ADDR_LIMIT, 18);\n    }\n\n    /**\n     * dumpBlocks(aBlocks, sAddr)\n     *\n     * @this {DebuggerPDP10}\n     * @param {Array} aBlocks\n     * @param {string} [sAddr] (optional block address)\n     */\n    dumpBlocks(aBlocks, sAddr)\n    {\n        var addr = 0, i = 0, n = aBlocks.length;\n\n        if (sAddr) {\n            addr = this.getAddr(this.parseAddr(sAddr, this.dbgAddrData));\n            if (addr === PDP10.ADDR_INVALID) {\n                this.println(\"invalid address: \" + sAddr);\n                return;\n            }\n            i = addr >>> this.bus.nBlockShift;\n            n = 1;\n        }\n\n        this.println(\"blockid   physical   blockaddr  used    size    type\");\n        this.println(\"--------  ---------  ---------  ------  ------  ----\");\n\n        var typePrev = -1, cPrev = 0;\n        while (n--) {\n            var block = aBlocks[i];\n            if (block.type == typePrev) {\n                if (!cPrev++) this.println(\"...\");\n            } else {\n                typePrev = block.type;\n                var sType = MemoryPDP10.TYPE_NAMES[typePrev];\n                if (block) {\n                    this.println(Str.toHex(block.id, 8) + \"  %\" + Str.toHex(i << this.bus.nBlockShift, 8) + \"  %\" + Str.toHex(block.addr, 8) + \"  \" + Str.toHexWord(block.used) + \"  \" + Str.toHexWord(block.size) + \"  \" + sType);\n                }\n                if (typePrev != MemoryPDP10.TYPE.NONE) typePrev = -1;\n                cPrev = 0;\n            }\n            addr += this.bus.nBlockSize;\n            i++;\n        }\n    }\n\n    /**\n     * dumpBus(asArgs)\n     *\n     * Dumps Bus allocations.\n     *\n     * @this {DebuggerPDP10}\n     * @param {Array.<string>} asArgs (asArgs[0] is an optional block address)\n     */\n    dumpBus(asArgs)\n    {\n        this.dumpBlocks(this.bus.aBusBlocks, asArgs[0]);\n    }\n\n    /**\n     * dumpHistory(sPrev, sLines)\n     *\n     * If sLines is not a number, it can be a instruction filter.  However, for the moment, the only\n     * supported filter is \"call\", which filters the history buffer for all CALL and RET instructions\n     * from the specified previous point forward.\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} [sPrev] is a (decimal) number of instructions to rewind to (default is 10)\n     * @param {string} [sLines] is a (decimal) number of instructions to print (default is, again, 10)\n     */\n    dumpHistory(sPrev, sLines)\n    {\n        var sMore = \"\";\n        var cHistory = 0;\n        var iHistory = this.iInstructionHistory;\n        var aHistory = this.aInstructionHistory;\n\n        if (aHistory.length) {\n            var nPrev = +sPrev || this.nextHistory;\n            var nLines = +sLines || 10;\n\n            if (isNaN(nPrev)) {\n                nPrev = nLines;\n            } else {\n                sMore = \"more \";\n            }\n\n            if (nPrev > aHistory.length) {\n                this.println(\"note: only \" + aHistory.length + \" available\");\n                nPrev = aHistory.length;\n            }\n\n            iHistory -= nPrev;\n            if (iHistory < 0) {\n                /*\n                 * If the dbgAddr of the last aHistory element contains a valid selector, wrap around.\n                 */\n                if (aHistory[aHistory.length - 1].addr == null) {\n                    nPrev = iHistory + nPrev;\n                    iHistory = 0;\n                } else {\n                    iHistory += aHistory.length;\n                }\n            }\n\n            var aFilters = [];\n            if (sLines == \"call\") {\n                nLines = 100000;\n                aFilters = [\"CALL\"];\n            }\n\n            if (sPrev !== undefined) {\n                this.println(nPrev + \" instructions earlier:\");\n            }\n\n            /*\n             * TODO: The following is necessary to prevent dumpHistory() from causing additional (or worse, recursive)\n             * faults due to segmented addresses that are no longer valid, but the only alternative is to dramatically\n             * increase the amount of memory used to store instruction history (eg, storing copies of all the instruction\n             * bytes alongside the execution addresses).\n             *\n             * For now, we're living dangerously, so that our history dumps actually work.\n             *\n             *      this.nSuppressBreaks++;\n             *\n             * If you re-enable this protection, be sure to re-enable the decrement below, too.\n             */\n            while (nLines > 0 && iHistory != this.iInstructionHistory) {\n\n                var dbgAddr = aHistory[iHistory++];\n                if (dbgAddr.addr == null) break;\n\n                /*\n                 * We must create a new dbgAddr from the address in aHistory, because dbgAddr was\n                 * a reference, not a copy, and we don't want getInstruction() modifying the original.\n                 */\n                var dbgAddrNew = this.newAddr(dbgAddr.addr);\n\n                var sComment = \"history\";\n                var nSequence = nPrev--;\n\n                /*\n                 * TODO: Need to some UI to control whether cycle counts are displayed as part of the history.\n                 * It's currently disabled in checkInstruction(), so it's disable here, too.\n                 *\n                if (DEBUG && dbgAddr.cycleCount != null) {\n                    sComment = \"cycles\";\n                    nSequence = dbgAddr.cycleCount;\n                }\n                 */\n\n                var sInstruction = this.getInstruction(dbgAddrNew, sComment, nSequence);\n\n                if (!aFilters.length || sInstruction.indexOf(aFilters[0]) >= 0) {\n                    this.println(sInstruction);\n                }\n\n                /*\n                 * If there were OPERAND or ADDRESS overrides on the previous instruction, getInstruction()\n                 * will have automatically disassembled additional bytes, so skip additional history entries.\n                 */\n                if (dbgAddrNew.cOverrides) {\n                    iHistory += dbgAddrNew.cOverrides; nLines -= dbgAddrNew.cOverrides; nPrev -= dbgAddrNew.cOverrides;\n                }\n\n                if (iHistory >= aHistory.length) iHistory = 0;\n                this.nextHistory = nPrev;\n                cHistory++;\n                nLines--;\n            }\n            /*\n             * See comments above.\n             *\n             *      this.nSuppressBreaks--;\n             */\n        }\n\n        if (!cHistory) {\n            this.println(\"no \" + sMore + \"history available\");\n            this.nextHistory = undefined;\n        }\n    }\n\n    /**\n     * messageInit(sEnable)\n     *\n     * @this {DebuggerPDP10}\n     * @param {string|undefined} sEnable contains zero or more message categories to enable, separated by '|'\n     */\n    messageInit(sEnable)\n    {\n        this.dbg = this;\n        this.bitsMessage = this.bitsWarning = MessagesPDP10.FAULT | MessagesPDP10.WARN;\n        this.sMessagePrev = null;\n        this.aMessageBuffer = [];\n        /*\n         * Internally, we use \"key\" instead of \"keys\", since the latter is a method on JavasScript objects,\n         * but externally, we allow the user to specify \"keys\"; \"kbd\" is also allowed as shorthand for \"keyboard\".\n         */\n        var aEnable = this.parseCommand(sEnable.replace(\"keys\",\"key\").replace(\"kbd\",\"keyboard\"), false, '|');\n        if (aEnable.length) {\n            for (var m in MessagesPDP10.CATEGORIES) {\n                if (Usr.indexOf(aEnable, m) >= 0) {\n                    this.bitsMessage |= MessagesPDP10.CATEGORIES[m];\n                    this.println(m + \" messages enabled\");\n                }\n            }\n        }\n    }\n\n    /**\n     * messageDump(bitMessage, fnDumper)\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} bitMessage is one Messages category flag\n     * @param {function(Array.<string>)} fnDumper is a function the Debugger can use to dump data for that category\n     * @return {boolean} true if successfully registered, false if not\n     */\n    messageDump(bitMessage, fnDumper)\n    {\n        for (var m in MessagesPDP10.CATEGORIES) {\n            if (bitMessage == MessagesPDP10.CATEGORIES[m]) {\n                this.afnDumpers[m] = fnDumper;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * getRegIndex(sReg, off)\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} sReg\n     * @param {number} [off] optional offset into sReg\n     * @return {number} register index, or -1 if not found\n     */\n    getRegIndex(sReg, off)\n    {\n        return DebuggerPDP10.REGNAMES.indexOf(sReg.toUpperCase());\n    }\n\n    /**\n     * getRegName(iReg)\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} iReg (0-7; not used for other registers)\n     * @return {string}\n     */\n    getRegName(iReg)\n    {\n        return DebuggerPDP10.REGNAMES[iReg] || \"\";\n    }\n\n    /**\n     * getRegValue(iReg)\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} iReg\n     * @return {number|undefined}\n     */\n    getRegValue(iReg)\n    {\n        var value;\n        var cpu = this.cpu;\n        switch(iReg) {\n        case DebuggerPDP10.REGS.PC:\n            value = cpu.getPC();\n            break;\n        case DebuggerPDP10.REGS.RA:\n            value = cpu.regRA;\n            break;\n        case DebuggerPDP10.REGS.EA:\n            value = cpu.regEA;\n            break;\n        case DebuggerPDP10.REGS.PS:\n            value = cpu.getPS();\n            break;\n        case DebuggerPDP10.REGS.OV:\n            value = (cpu.regPS & PDP10.PSFLAG.AROV)? 1 : 0;\n            break;\n        case DebuggerPDP10.REGS.C0:\n            value = (cpu.regPS & PDP10.PSFLAG.CRY0)? 1 : 0;\n            break;\n        case DebuggerPDP10.REGS.C1:\n            value = (cpu.regPS & PDP10.PSFLAG.CRY1)? 1 : 0;\n            break;\n        case DebuggerPDP10.REGS.BI:\n            value = (cpu.regPS & PDP10.PSFLAG.BIS)? 1 : 0;\n            break;\n        case DebuggerPDP10.REGS.ND:\n            value = (cpu.regPS & PDP10.PSFLAG.DCK)? 1 : 0;\n            break;\n        case DebuggerPDP10.REGS.PD:\n            value = (cpu.regPS & PDP10.PSFLAG.PDOV)? 1 : 0;\n            break;\n        }\n        return value;\n    }\n\n    /**\n     * setRegValue(iReg, value)\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} iReg\n     * @param {number} value\n     */\n    setRegValue(iReg, value)\n    {\n        var flag = 0;\n        var cpu = this.cpu;\n\n        switch(iReg) {\n        case DebuggerPDP10.REGS.PC:\n            cpu.setPC(value);\n            this.setAddr(this.dbgAddrCode, cpu.getPC());\n            break;\n        case DebuggerPDP10.REGS.PS:\n            cpu.setPS(value);\n            break;\n        case DebuggerPDP10.REGS.OV:\n            flag = PDP10.PSFLAG.AROV;\n            break;\n        case DebuggerPDP10.REGS.C0:\n            flag = PDP10.PSFLAG.CRY0;\n            break;\n        case DebuggerPDP10.REGS.C1:\n            flag = PDP10.PSFLAG.CRY1;\n            break;\n        case DebuggerPDP10.REGS.BI:\n            flag = PDP10.PSFLAG.BIS;\n            break;\n        case DebuggerPDP10.REGS.ND:\n            flag = PDP10.PSFLAG.DCK;\n            break;\n        case DebuggerPDP10.REGS.PD:\n            flag = PDP10.PSFLAG.PDOV;\n            break;\n        }\n        if (flag) {\n            if (value) {\n                cpu.regPS |= flag;\n            } else {\n                cpu.regPS &= ~flag;\n            }\n        }\n    }\n\n    /**\n     * replaceRegs(s)\n     *\n     * TODO: Implement or eliminate.\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} s\n     * @return {string}\n     */\n    replaceRegs(s)\n    {\n        return s;\n    }\n\n    /**\n     * message(sMessage, fAddress)\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} sMessage is any caller-defined message string\n     * @param {boolean} [fAddress] is true to display the current address\n     */\n    message(sMessage, fAddress)\n    {\n        if (fAddress) {\n            sMessage += \" @\" + this.toStrAddr(this.newAddr(this.cpu.getLastPC()));\n        }\n\n        if (this.sMessagePrev && sMessage == this.sMessagePrev) return;\n        this.sMessagePrev = sMessage;\n\n        if (this.bitsMessage & MessagesPDP10.BUFFER) {\n            this.aMessageBuffer.push(sMessage);\n            return;\n        }\n\n        var fRunning;\n        if ((this.bitsMessage & MessagesPDP10.HALT) && this.cpu && (fRunning = this.cpu.isRunning()) || this.isBusy(true)) {\n            this.stopCPU();\n            if (fRunning) sMessage += \" (cpu halted)\";\n        }\n\n        this.println(sMessage); // + \" (\" + this.cpu.getCycles() + \" cycles)\"\n\n        /*\n         * We have no idea what the frequency of println() calls might be; all we know is that they easily\n         * screw up the CPU's careful assumptions about cycles per burst.  So we call yieldCPU() after every\n         * message, to effectively end the current burst and start fresh.\n         *\n         * TODO: See CPUPDP10.calcStartTime() for a discussion of why we might want to call yieldCPU() *before*\n         * we display the message.\n         */\n        if (this.cpu) this.cpu.yieldCPU();\n    }\n\n    /**\n     * init()\n     *\n     * @this {DebuggerPDP10}\n     * @param {boolean} [fAutoStart]\n     */\n    init(fAutoStart)\n    {\n        this.fInit = true;\n        this.println(\"Type ? for help with PDPjs Debugger commands\");\n        this.updateStatus();\n        if (!fAutoStart) this.setFocus();\n        if (this.sInitCommands) {\n            var sCmds = this.sInitCommands;\n            this.sInitCommands = null;\n            this.doCommands(sCmds, true);\n        }\n    }\n\n    /**\n     * historyInit(fQuiet)\n     *\n     * This function is intended to be called by the constructor, reset(), addBreakpoint(), findBreakpoint()\n     * and any other function that changes the checksEnabled() criteria used to decide whether checkInstruction()\n     * should be called.\n     *\n     * That is, if the history arrays need to be allocated and haven't already been allocated, then allocate them,\n     * and if the arrays are no longer needed, then deallocate them.\n     *\n     * @this {DebuggerPDP10}\n     * @param {boolean} [fQuiet]\n     */\n    historyInit(fQuiet)\n    {\n        var i;\n        if (!this.checksEnabled()) {\n            if (this.aInstructionHistory && this.aInstructionHistory.length && !fQuiet) {\n                this.println(\"instruction history buffer freed\");\n            }\n            this.iInstructionHistory = 0;\n            this.aInstructionHistory = [];\n            return;\n        }\n        if (!this.aInstructionHistory || !this.aInstructionHistory.length) {\n            this.aInstructionHistory = new Array(DebuggerPDP10.HISTORY_LIMIT);\n            for (i = 0; i < this.aInstructionHistory.length; i++) {\n                /*\n                 * Preallocate dummy Addr (Array) objects in every history slot, so that\n                 * checkInstruction() doesn't need to call newAddr() on every slot update.\n                 */\n                this.aInstructionHistory[i] = this.newAddr();\n            }\n            this.iInstructionHistory = 0;\n            if (!fQuiet) {\n                this.println(\"instruction history buffer allocated\");\n            }\n        }\n    }\n\n    /**\n     * startCPU(fUpdateFocus, fQuiet)\n     *\n     * @this {DebuggerPDP10}\n     * @param {boolean} [fUpdateFocus] is true to update focus\n     * @param {boolean} [fQuiet]\n     * @return {boolean} true if run request successful, false if not\n     */\n    startCPU(fUpdateFocus, fQuiet)\n    {\n        if (!this.checkCPU(fQuiet)) return false;\n        this.cpu.startCPU(fUpdateFocus);\n        return true;\n    }\n\n    /**\n     * stepCPU(nCycles, fRegs, fUpdateDisplays)\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} nCycles (0 for one instruction without checking breakpoints)\n     * @param {boolean|null} [fRegs] is true to display registers after step (default is false; use null for previous setting)\n     * @param {boolean} [fUpdateDisplays] is false to disable Computer display updates (default is true)\n     * @return {boolean}\n     */\n    stepCPU(nCycles, fRegs, fUpdateDisplays)\n    {\n        if (!this.checkCPU()) return false;\n\n        var sCmd = \"\";\n        if (fRegs === null) {\n            fRegs = (!this.sCmdTracePrev || this.sCmdTracePrev == \"tr\");\n            sCmd = fRegs? \"tr\" : \"t\";\n        }\n\n        this.nCycles = 0;\n\n        if (!nCycles) {\n            /*\n             * When single-stepping, the CPU won't call checkInstruction(), which is good for\n             * avoiding breakpoints, but bad for instruction data collection if checks are enabled.\n             * So we call checkInstruction() ourselves.\n             */\n            if (this.checksEnabled()) this.checkInstruction(this.cpu.getPC(), 0);\n        }\n        /*\n         * For our typically tiny bursts (usually single instructions), mimic what runCPU() does.\n         */\n        try {\n            nCycles = this.cpu.getBurstCycles(nCycles);\n            var nCyclesStep = this.cpu.stepCPU(nCycles);\n            if (nCyclesStep > 0) {\n                this.cpu.updateTimers(nCyclesStep);\n                this.nCycles += nCyclesStep;\n                this.cpu.addCycles(nCyclesStep, true);\n                this.cpu.updateChecksum(nCyclesStep);\n                this.cInstructions++;\n            }\n        }\n        catch(exception) {\n            /*\n             * We assume that any numeric exception was explicitly thrown by the CPU to interrupt the\n             * current instruction.  For all other exceptions, we attempt a stack dump.\n             */\n            if (typeof exception != \"number\") {\n                var e = exception;\n                this.nCycles = 0;\n                this.cpu.setError(e.stack || e.message);\n            }\n        }\n\n        /*\n         * Because we called cpu.stepCPU() and not cpu.startCPU(), we must nudge the Computer's update code,\n         * and then update our own state.  Normally, the only time fUpdateDisplays will be false is when doTrace()\n         * is calling us in a loop, in which case it will perform its own updateDisplays() when it's done.\n         */\n        if (fUpdateDisplays !== false) {\n            if (this.panel) this.panel.stop();\n            this.cmp.updateDisplays(-1);\n        }\n\n        this.updateStatus(fRegs || false, sCmd);\n        return (this.nCycles > 0);\n    }\n\n    /**\n     * stopCPU()\n     *\n     * @this {DebuggerPDP10}\n     * @param {boolean} [fComplete]\n     */\n    stopCPU(fComplete)\n    {\n        if (this.cpu) this.cpu.stopCPU(fComplete);\n    }\n\n    /**\n     * updateStatus(fRegs, sCmd)\n     *\n     * @this {DebuggerPDP10}\n     * @param {boolean} [fRegs] (default is true)\n     * @param {string} [sCmd]\n     */\n    updateStatus(fRegs = true, sCmd)\n    {\n        if (!this.fInit) return;\n\n        if (sCmd) {\n            this.println(DebuggerPDP10.PROMPT + sCmd);\n        }\n\n        this.setAddr(this.dbgAddrCode, this.cpu.getPC());\n\n        /*\n         * this.nStep used to be a simple boolean, but now it's 0 (or undefined)\n         * if inactive, 1 if stepping over an instruction without a register dump, or 2\n         * if stepping over an instruction with a register dump.\n         */\n        if (!fRegs || this.nStep == 1) {\n            this.doUnassemble();\n        } else {\n            this.doRegisters();\n        }\n    }\n\n    /**\n     * checkCPU(fQuiet)\n     *\n     * Make sure the CPU is ready (finished initializing), powered, not already running, and not in an error state.\n     *\n     * @this {DebuggerPDP10}\n     * @param {boolean} [fQuiet]\n     * @return {boolean}\n     */\n    checkCPU(fQuiet)\n    {\n        if (!this.cpu || !this.cpu.isReady() || !this.cpu.isPowered() || this.cpu.isRunning()) {\n            if (!fQuiet) this.println(\"cpu busy or unavailable, command ignored\");\n            return false;\n        }\n        return !this.cpu.isError();\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {DebuggerPDP10}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        if (!fRepower) {\n            /*\n             * Because Debugger save/restore support is somewhat limited (and didn't always exist),\n             * we deviate from the typical save/restore design pattern: instead of reset OR restore,\n             * we always reset and then perform a (potentially limited) restore.\n             */\n            this.reset(true);\n\n            // this.println(data? \"resuming\" : \"powering up\");\n\n            if (data) {\n                return this.restore(data);\n            }\n        }\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {DebuggerPDP10}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean}\n     */\n    powerDown(fSave, fShutdown)\n    {\n        if (fShutdown) this.println(fSave? \"suspending\" : \"shutting down\");\n        return fSave? this.save() : true;\n    }\n\n    /**\n     * reset(fQuiet)\n     *\n     * This is a notification handler, called by the Computer, to inform us of a reset.\n     *\n     * @this {DebuggerPDP10}\n     * @param {boolean} fQuiet (true only when called from our own powerUp handler)\n     */\n    reset(fQuiet)\n    {\n        this.historyInit();\n        this.cInstructions = this.cInstructionsStart = 0;\n        this.sMessagePrev = null;\n        this.nCycles = 0;\n        this.setAddr(this.dbgAddrCode, this.cpu.getPC());\n        /*\n         * fRunning is set by start() and cleared by stop().  In addition, we clear\n         * it here, so that if the CPU is reset while running, we can prevent stop()\n         * from unnecessarily dumping the CPU state.\n         */\n        this.flags.running = false;\n        this.clearTempBreakpoint();\n        if (!fQuiet) this.updateStatus();\n    }\n\n    /**\n     * save()\n     *\n     * This implements (very rudimentary) save support for the Debugger component.\n     *\n     * @this {DebuggerPDP10}\n     * @return {Object}\n     */\n    save()\n    {\n        var state = new State(this);\n        state.set(0, this.packAddr(this.dbgAddrCode));\n        state.set(1, this.packAddr(this.dbgAddrData));\n        state.set(2, this.packAddr(this.dbgAddrAssemble));\n        state.set(3, [this.aPrevCmds, this.fAssemble, this.bitsMessage]);\n        state.set(4, this.aSymbolTable);\n        return state.data();\n    }\n\n    /**\n     * restore(data)\n     *\n     * This implements (very rudimentary) restore support for the Debugger component.\n     *\n     * @this {DebuggerPDP10}\n     * @param {Object} data\n     * @return {boolean} true if successful, false if failure\n     */\n    restore(data)\n    {\n        var i = 0;\n        if (data[3] !== undefined) {\n            this.dbgAddrCode = this.unpackAddr(data[i++]);\n            this.dbgAddrData = this.unpackAddr(data[i++]);\n            this.dbgAddrAssemble = this.unpackAddr(data[i++]);\n            this.aPrevCmds = data[i][0];\n            if (typeof this.aPrevCmds == \"string\") this.aPrevCmds = [this.aPrevCmds];\n            this.fAssemble = data[i][1];\n            this.bitsMessage |= data[i][2];     // keep our current message bits set, and simply \"add\" any extra bits defined by the saved state\n        }\n        if (data[4]) this.aSymbolTable = data[4];\n        return true;\n    }\n\n    /**\n     * start(ms, nCycles)\n     *\n     * This is a notification handler, called by the Computer, to inform us the CPU has started.\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} ms\n     * @param {number} nCycles\n     */\n    start(ms, nCycles)\n    {\n        if (!this.nStep) this.println(\"running\");\n        this.flags.running = true;\n        this.msStart = ms;\n        this.nCyclesStart = nCycles;\n    }\n\n    /**\n     * stop(ms, nCycles)\n     *\n     * This is a notification handler, called by the Computer, to inform us the CPU has now stopped.\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} ms\n     * @param {number} nCycles\n     */\n    stop(ms, nCycles)\n    {\n        if (this.flags.running) {\n            this.flags.running = false;\n            this.nCycles = nCycles - this.nCyclesStart;\n            if (!this.nStep) {\n                var sStopped = \"stopped\";\n                if (this.nCycles) {\n                    var msTotal = ms - this.msStart;\n                    var nCyclesPerSecond = (msTotal > 0? Math.round(this.nCycles * 1000 / msTotal) : 0);\n                    sStopped += \" (\";\n                    if (this.checksEnabled()) {\n                        sStopped += this.cInstructions + \" instructions, \";\n                        /*\n                         * $ops displays progress by calculating cInstructions - cInstructionsStart, so before\n                         * zeroing cInstructions, we should subtract cInstructions from cInstructionsStart (since\n                         * we're effectively subtracting cInstructions from cInstructions as well).\n                         */\n                        this.cInstructionsStart -= this.cInstructions;\n                        this.cInstructions = 0;\n                    }\n                    sStopped += this.nCycles + \" cycles, \" + msTotal + \" ms, \" + nCyclesPerSecond + \" hz)\";\n                } else {\n                    if (this.messageEnabled(MessagesPDP10.HALT)) {\n                        /*\n                         * It's possible the user is trying to 'g' past a fault that was blocked by helpCheckFault()\n                         * for the Debugger's benefit; if so, it will continue to be blocked, so try displaying a helpful\n                         * message (another helpful tip would be to simply turn off the \"halt\" message category).\n                         */\n                        sStopped += \" (use the 't' command to execute blocked faults)\";\n                    }\n                }\n                this.println(sStopped);\n            }\n            this.updateStatus(true);\n            this.setFocus();\n            this.clearTempBreakpoint(this.cpu.getPC());\n            this.sMessagePrev = null;\n        }\n    }\n\n    /**\n     * checksEnabled(fRelease)\n     *\n     * This \"check\" function is called by the CPU; we indicate whether or not every instruction needs to be checked.\n     *\n     * Originally, this returned true even when there were only read and/or write breakpoints, but those breakpoints\n     * no longer require the intervention of checkInstruction(); the Bus component automatically swaps in/out appropriate\n     * \"checked\" Memory access functions to deal with those breakpoints in the corresponding Memory blocks.  So I've\n     * simplified the test below.\n     *\n     * @this {DebuggerPDP10}\n     * @param {boolean} [fRelease] is true for release criteria only; default is false (any criteria)\n     * @return {boolean} true if every instruction needs to pass through checkInstruction(), false if not\n     */\n    checksEnabled(fRelease)\n    {\n        return ((DEBUG && !fRelease)? true : (this.aBreakExec.length > 1 || !!this.nBreakInstructions));\n    }\n\n    /**\n     * checkInstruction(addr, nState)\n     *\n     * This \"check\" function is called by the CPU to inform us about the next instruction to be executed,\n     * giving us an opportunity to look for \"exec\" breakpoints and update opcode instruction history.\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} addr\n     * @param {number} nState is < 0 if stepping, 0 if starting, or > 0 if running\n     * @return {boolean} true if breakpoint hit, false if not\n     */\n    checkInstruction(addr, nState)\n    {\n        var opCode = -1;\n        var cpu = this.cpu;\n\n        /*\n         * If opHalt() calls our stopInstruction() function, it will effectively rewind the PC back to the HALT,\n         * purely for our debugging benefit, so we must compensate for that here by advancing the PC past the HALT\n         * when the machine starts up again.\n         */\n        if (!nState) {\n            opCode = this.cpu.readWord(addr);\n            if ((opCode >> PDP10.OPCODE.A_SHIFT) == PDP10.OPCODE.HALT && this.cpu.getLastPC() == addr) {\n                addr = this.cpu.advancePC(1);\n            }\n        }\n\n        /*\n         * If the CPU stopped on a breakpoint, we're not interested in stopping again if the machine is starting.\n         */\n        if (nState > 0) {\n            if (this.nBreakInstructions) {\n                if (!--this.nBreakInstructions) return true;\n            }\n            if (this.checkBreakpoint(addr, 1, this.aBreakExec)) {\n                return true;\n            }\n        }\n\n        /*\n         * The rest of the instruction tracking logic can only be performed if historyInit() has allocated the\n         * necessary data structures.  Note that there is no explicit UI for enabling/disabling history, other than\n         * adding/removing breakpoints, simply because it's breakpoints that trigger the call to checkInstruction();\n         * well, OK, and a few other things now, like enabling MessagesPDP10.INT messages.\n         */\n        if (nState >= 0 && this.aInstructionHistory.length) {\n            this.cInstructions++;\n            if (opCode < 0) {\n                opCode = this.cpu.readWord(addr);\n            }\n            if (opCode >= 0) {\n                var dbgAddr = this.aInstructionHistory[this.iInstructionHistory];\n                this.setAddr(dbgAddr, addr);\n                // if (DEBUG) dbgAddr.cycleCount = cpu.getCycles();\n                if (++this.iInstructionHistory == this.aInstructionHistory.length) this.iInstructionHistory = 0;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * findInstruction(opCode, fOperands)\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} opCode\n     * @param {boolean} [fOperands] (optional; default is true)\n     * @return {string}\n     */\n    findInstruction(opCode, fOperands = true)\n    {\n        var opNum, opMask, aModes, iMode = 0;\n        var op = (opCode / PDP10.OPCODE.OP_SCALE)|0;\n\n        for (var mask in DebuggerPDP10.OPTABLE) {\n            var opMasks = DebuggerPDP10.OPTABLE[mask];\n            opNum = opMasks[op & mask];\n            if (opNum) {\n                opMask = +mask;\n                /*\n                 * When we extracted op from opCode using OP_SCALE, we included 6 additional bits\n                 * to help distinguish OPIO instructions from non-OPIO instructions.  But for the\n                 * following tests, we don't need those bits, so we get rid of them now.\n                 */\n                op >>= 6;\n                switch(opMask) {\n                case PDP10.OPCODE.OPMODE:\n                    aModes = DebuggerPDP10.OPMODES;\n                    iMode = (op & 3);\n                    break;\n                case PDP10.OPCODE.OPCOMP:\n                    aModes = DebuggerPDP10.OPCOMPS;\n                    iMode = (op & 7);\n                    break;\n                case PDP10.OPCODE.OPTEST:\n                    aModes = DebuggerPDP10.OPTESTS;\n                    iMode = ((op & 0o60) >> 2) | ((op & 0o6) >> 1);\n                    break;\n                }\n                break;\n            }\n        }\n\n        var sMode = aModes && aModes[iMode] || \"\";\n        if (sMode == \"S\" && opNum > DebuggerPDP10.OPS.MOVM) sMode = \"B\";\n        var sOperation = DebuggerPDP10.OPNAMES[opNum || 0] + sMode;\n\n        if (!fOperands) {\n            if (!opNum) sOperation = \"\";\n        } else {\n            if (!opNum) {\n                sOperation = Str.pad(sOperation, 8) + this.toStrWord(opCode);\n            } else {\n                var n, sOperand;\n                if (opMask == PDP10.OPCODE.OPIO) {\n                    n = (opCode / PDP10.OPCODE.IO_SCALE) & PDP10.OPCODE.IO_MASK;\n                    sOperand = this.toStrBase(n, -1);\n                } else {\n                    n = (opCode >> PDP10.OPCODE.A_SHIFT) & PDP10.OPCODE.A_MASK;\n                    sOperand = this.toStrBase(n, -1);\n                    for (var m = 0; sOperand && m < DebuggerPDP10.ALTOPS.length; m++) {\n                        if (opNum == DebuggerPDP10.ALTOPS[m][0]) {\n                            var opAlt = DebuggerPDP10.ALTOPS[m][n];\n                            if (opAlt) {\n                                sOperation = DebuggerPDP10.OPNAMES[opAlt];\n                                sOperand = \"\";\n                                break;\n                            }\n                        }\n                    }\n                }\n                sOperation = Str.pad(sOperation, 8) + (sOperand? sOperand + ',' : \"\");\n                if (opCode & PDP10.OPCODE.I_FIELD) sOperation += '@';\n                sOperation += this.toStrBase(opCode & PDP10.OPCODE.Y_MASK, -1);\n                var i = (opCode >> PDP10.OPCODE.X_SHIFT) & PDP10.OPCODE.X_MASK;\n                if (i) sOperation += '(' + this.toStrBase(i, -1) + ')';\n            }\n        }\n        return sOperation;\n    }\n\n    /**\n     * getInstruction(dbgAddr, sComment, nSequence)\n     *\n     * Get the next instruction, by decoding the opcode and any operands.\n     *\n     * @this {DebuggerPDP10}\n     * @param {DbgAddrPDP10} dbgAddr\n     * @param {string} [sComment] is an associated comment\n     * @param {number|null} [nSequence] is an associated sequence number, undefined if none\n     * @return {string} (and dbgAddr is updated to the next instruction)\n     */\n    getInstruction(dbgAddr, sComment, nSequence)\n    {\n        var dbgAddrOp = this.newAddr(dbgAddr.addr);\n        var opCode = this.getWord(dbgAddr, 1);\n        var sOperation = this.findInstruction(opCode);\n\n        var sOpcodes = \"\";\n        var sLine = this.toStrAddr(dbgAddrOp) + \":\";\n        if (dbgAddrOp.addr !== PDP10.ADDR_INVALID && dbgAddr.addr !== PDP10.ADDR_INVALID) {\n            do {\n                var w = this.getWord(dbgAddrOp, 1);\n                sOpcodes += ' ' + this.toStrWord(w);\n                if (dbgAddrOp.addr == null) break;\n            } while (dbgAddrOp.addr != dbgAddr.addr);\n        }\n\n        sLine += Str.pad(sOpcodes, 16) + sOperation;\n\n        if (sComment) {\n            sLine = Str.pad(sLine, 48) + ';' + (sComment || \"\");\n            if (!this.cpu.flags.checksum) {\n                sLine += (nSequence != null? '=' + nSequence.toString() : \"\");\n            } else {\n                var nCycles = this.cpu.getCycles();\n                sLine += \"cycles=\" + nCycles.toString() + \" cs=\" + Str.toHex(this.cpu.nChecksum);\n            }\n        }\n        return sLine;\n    }\n\n    /**\n     * parseInstruction(sOpcode, sOperands, addr, aUndefined)\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} sOpcode\n     * @param {string} [sOperands]\n     * @param {number} [addr] of memory where this instruction is being assembled\n     * @param {Array} [aUndefined]\n     * @return {number} (opcode, or -1 if unrecognized instruction)\n     */\n    parseInstruction(sOpcode, sOperands, addr, aUndefined)\n    {\n        var opCode = -1;\n        var opMask, opNum;\n\n        if (!sOpcode) {\n            /*\n             * MACRO-10 also allows instructions to be assembled without an opcode (ie, just an address expression),\n             * so if that's all we have, skip the opcode parsing.\n             */\n            if (sOperands) opCode = opMask = 0;\n        }\n        else {\n            var sMnemonic = sOpcode.toUpperCase();\n            /*\n             * Perform any alternate mnemonic substitutions first\n             */\n            for (var m = 0; m < DebuggerPDP10.ALTOPS.length; m++) {\n                for (var n in DebuggerPDP10.ALTOPS[m]) {\n                    if (!+n) continue;\n                    opNum = DebuggerPDP10.ALTOPS[m][n];\n                    if (sMnemonic == DebuggerPDP10.OPNAMES[opNum]) {\n                        sMnemonic = DebuggerPDP10.OPNAMES[DebuggerPDP10.ALTOPS[m][0]];\n                        if (sOperands) sOperands = this.toStrBase(+n) + ',' + sOperands;\n                        break;\n                    }\n                }\n            }\n            for (var mask in DebuggerPDP10.OPTABLE) {\n\n                var aModes;\n                opMask = +mask;\n                var opMasks = DebuggerPDP10.OPTABLE[mask];\n\n                switch (opMask) {\n                case PDP10.OPCODE.OPMODE:\n                    aModes = DebuggerPDP10.OPMODES;\n                    break;\n                case PDP10.OPCODE.OPCOMP:\n                    aModes = DebuggerPDP10.OPCOMPS;\n                    break;\n                case PDP10.OPCODE.OPTEST:\n                    aModes = DebuggerPDP10.OPTESTS;\n                    break;\n                default:\n                    aModes = [\"\"];\n                    break;\n                }\n                var opMode = 0;\n                for (var op in opMasks) {\n                    opNum = opMasks[op];\n                    for (var iMode = 0; iMode < aModes.length; iMode++) {\n\n                        var sMode = aModes[iMode];\n                        if (sMode == \"S\" && opNum > DebuggerPDP10.OPS.MOVM) sMode = \"B\";\n                        var sCandidate = DebuggerPDP10.OPNAMES[opNum] + sMode;\n\n                        if (sMnemonic == sCandidate) {\n                            if (opMask != PDP10.OPCODE.OPTEST) {\n                                opMode = iMode;\n                            } else {\n                                opMode = ((iMode & 0o3) << 1) | ((iMode & 0o14) << 2);\n                            }\n                            opCode = (op | (opMode << 6)) * PDP10.OPCODE.OP_SCALE;\n                            break;\n                        }\n                    }\n                    if (opCode >= 0) break;\n                }\n                if (opCode >= 0) break;\n            }\n            /*\n             * MACRO-10 also allows instructions to be assembled without an opcode (ie, just an address expression),\n             * so we'll give that a try next (as long as we're not mashing two symbols together).\n             */\n            if (opCode < 0 && (!sOperands || !sOperands.match(/^[0-9A-Z$%.?]/i))) {\n                sOperands = sOpcode + sOperands;\n                sOpcode = \"\";\n                opCode = 0;\n            }\n        }\n\n        if (opCode >= 0) {\n            if (sOperands) {\n\n                var aOperands = sOperands.split(',');\n                if (aOperands.length > 2) {\n                    if (!aUndefined) this.println(\"too many operands: \" + sOperands);\n                    aOperands.length = 0;\n                    opCode = -1;\n                }\n\n                for (var i = 0; i < aOperands.length; i++) {\n\n                    var sOperand = aOperands[i].trim();\n                    if (!sOperand) continue;\n\n                    var match = sOperand.match(/(@?)([^(]*)\\(?([^)]*)\\)?/);\n                    if (!match) {\n                        if (!aUndefined) this.println(\"unknown operand: \" + sOperand);\n                        opCode = -1;\n                        break;\n                    }\n\n                    /*\n                     * If the operand contains an indirection operator (@) and/or index register (X), we parse those\n                     * first and update the indirect (I) bit and index (X) bits as appropriate.  The order is important,\n                     * because if we parse them AFTER parsing the address expression, we might lose an undefined symbol\n                     * indication, and if the caller needs to handle address fixups, that would be bad.\n                     */\n                    if (match[1]) opCode += PDP10.OPCODE.I_FIELD;\n\n                    sOperand = match[3];\n                    if (sOperand) {\n                        operand = this.parseExpression(sOperand, aUndefined);\n                        if (operand == undefined) {\n                            opCode = -1;\n                            break;\n                        }\n                        /*\n                         * Here's a fun tidbit from the April 1978 MACRO-10 manual, p. 4-5:\n                         *\n                         *      NOTE: To assemble the index, MACRO places the index register address in a fullword of storage,\n                         *      swaps its halfwords, and then adds the swapped word to the instruction word.\n                         *\n                         * Which means that an instruction like this (where AC is zero):\n                         *\n                         *        8839  037653  205 00 0 00 400000      MOVSI   AC,(1B<^O<AC>>) ;INITIALIZE AC\n                         *\n                         * produces an instruction that does NOT use indexing at all, even though it is coded as such.  So my\n                         * simplistic masking of the index operand with PDP10.OPCODE.X_MASK, while logical, was completely wrong:\n                         *\n                         *      if (operand < 0 || operand > PDP10.OPCODE.X_MASK) {\n                         *          operand &= PDP10.OPCODE.X_MASK;\n                         *          if (MAXDEBUG) this.println(\"index (\" + sOperand + \") truncated to \" + this.toStrBase(operand));\n                         *      }\n                         *      opCode += operand << PDP10.OPCODE.X_SHIFT;\n                         */\n                        operand = PDP10.SWAP(this.truncate(operand, 36, true));\n                        opCode += operand;\n                    }\n\n                    sOperand = match[2];\n                    if (i || aOperands.length == 1) {\n                        /*\n                         * If this is NOT the first operand, replace all periods NOT preceded by a digit with the current address.\n                         */\n                        if (!sOperand) {\n                            sOperand = \"0\";\n                        } else {\n                            sOperand = sOperand.replace(/(^|[^0-9])\\./g, \"$1\" + this.toStrOffset(addr));\n                        }\n                    }\n\n                    var operand = this.parseExpression(sOperand, aUndefined);\n                    if (operand == undefined) {\n                        opCode = -1;\n                        break;\n                    }\n\n                    if (!i && aOperands.length > 1) {\n                        if (opMask == PDP10.OPCODE.OPIO) {\n                            if (operand < 0 || operand > PDP10.OPCODE.IO_MASK) {\n                                operand &= PDP10.OPCODE.IO_MASK;\n                                if (MAXDEBUG) this.println(\"device code (\" + sOperand + \") truncated to \" + this.toStrBase(operand));\n                            }\n                            opCode += (operand * PDP10.OPCODE.IO_SCALE);\n                        }\n                        else {\n                            if (operand < 0 || operand > PDP10.OPCODE.A_MASK) {\n                                operand &= PDP10.OPCODE.A_MASK;\n                                if (MAXDEBUG) this.println(\"accumulator (\" + sOperand + \") truncated to \" + this.toStrBase(operand));\n                            }\n                            opCode += (operand << PDP10.OPCODE.A_SHIFT);\n                        }\n                        continue;\n                    }\n\n                    /*\n                     * I came across what I believe is a typo in the DEC \"DAKAC\" diagnostic:\n                     *\n                     *      CAME    [0,-1]      ;PASS TEST IF C(AC)=0,,-1\n                     *\n                     * Based on the comment, it's clear what they really meant was either \"[0,,-1]\" or \"[XWD 0,-1]\".\n                     * However, they still got the desired result, which means when the assembler parses an mnemonic-less\n                     * instruction like \"0,-1\", it must truncate the second (address) operand.\n                     *\n                     * TODO: Determine if I should ALWAYS truncate.  I'm trying to retain the flexibility of allowing\n                     * a full 36-bit instruction to be encoded with a single numeric expression (ie, one operand).\n                     */\n                    if (sOpcode || i) {\n                        if (operand < 0 || operand > PDP10.OPCODE.Y_MASK) {\n                            operand &= PDP10.ADDR_MASK;\n                            if (MAXDEBUG) this.println(\"address (\" + sOperand + \") truncated to \" + this.toStrBase(operand));\n                        }\n                    }\n                    opCode += operand;\n                }\n            }\n            //\n            // TODO: Complain about missing operands only if we know the instruction requires them.\n            //\n            // else {\n            //     this.println(\"missing operand(s)\");\n            //     opCode = -1;\n            // }\n        }\n\n        if (opCode < 0 && !aUndefined) {\n            this.println(\"unknown instruction: \" + sOpcode + ' ' + sOperands);\n        }\n\n        return opCode;\n    }\n\n    /**\n     * stopInstruction(sMessage)\n     *\n     * TODO: Currently, the only way to prevent this call from stopping the CPU is when you're single-stepping.\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} [sMessage]\n     * @return {boolean} true if stopping is enabled, false if not\n     */\n    stopInstruction(sMessage)\n    {\n        var cpu = this.cpu;\n        if (cpu.isRunning()) {\n            cpu.setPC(this.cpu.getLastPC());\n            if (sMessage) this.println(sMessage);\n            this.stopCPU();\n            /*\n             * TODO: Review the appropriate-ness of throwing a bogus vector number in order to immediately stop\n             * the instruction.  It's handy, but it also means that we no longer actually return true, so callers\n             * of either stopInstruction() or undefinedInstruction() may have unreachable code paths.\n             */\n            throw -1;\n        }\n        return false;\n    }\n\n    /**\n     * undefinedInstruction(opCode)\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} opCode\n     * @return {boolean} true if stopping is enabled, false if not\n     */\n    undefinedInstruction(opCode)\n    {\n        if (this.messageEnabled(MessagesPDP10.CPU)) {\n            this.printMessage(\"undefined opcode \" + this.toStrBase(opCode), true, true);\n            return this.stopInstruction();  // allow the caller to step over it if they really want a trap generated\n        }\n        return false;\n    }\n\n    /**\n     * checkMemoryRead(addr, nb)\n     *\n     * This \"check\" function is called by a Memory block to inform us that a memory read occurred, giving us an\n     * opportunity to track the read if we want, and look for a matching \"read\" breakpoint, if any.\n     *\n     * In the \"old days\", it would be an error for this call to fail to find a matching Debugger breakpoint, but now\n     * Memory blocks have no idea whether the Debugger or the machine's Debug register(s) triggered this \"checked\" read.\n     *\n     * If we return true, we \"trump\" the machine's Debug register(s); false allows normal Debug register processing.\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} addr\n     * @param {number} [nb] (# of bytes; default is 1)\n     * @return {boolean} true if breakpoint hit, false if not\n     */\n    checkMemoryRead(addr, nb)\n    {\n        if (this.checkBreakpoint(addr, nb || 1, this.aBreakRead)) {\n            this.stopCPU(false);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * checkMemoryWrite(addr, nb)\n     *\n     * This \"check\" function is called by a Memory block to inform us that a memory write occurred, giving us an\n     * opportunity to track the write if we want, and look for a matching \"write\" breakpoint, if any.\n     *\n     * In the \"old days\", it would be an error for this call to fail to find a matching Debugger breakpoint, but now\n     * Memory blocks have no idea whether the Debugger or the machine's Debug register(s) triggered this \"checked\" write.\n     *\n     * If we return true, we \"trump\" the machine's Debug register(s); false allows normal Debug register processing.\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} addr\n     * @param {number} [nb] (# of bytes; default is 1)\n     * @return {boolean} true if breakpoint hit, false if not\n     */\n    checkMemoryWrite(addr, nb)\n    {\n        if (this.checkBreakpoint(addr, nb || 1, this.aBreakWrite)) {\n            this.stopCPU(false);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * clearBreakpoints()\n     *\n     * @this {DebuggerPDP10}\n     */\n    clearBreakpoints()\n    {\n        var i, dbgAddr, addr;\n        this.aBreakExec = [\"bp\"];\n        if (this.aBreakRead !== undefined) {\n            for (i = 1; i < this.aBreakRead.length; i++) {\n                dbgAddr = this.aBreakRead[i];\n                addr = this.getAddr(dbgAddr);\n                this.bus.removeMemBreak(addr, false);\n            }\n        }\n        this.aBreakRead = [\"br\"];\n        if (this.aBreakWrite !== undefined) {\n            for (i = 1; i < this.aBreakWrite.length; i++) {\n                dbgAddr = this.aBreakWrite[i];\n                addr = this.getAddr(dbgAddr);\n                this.bus.removeMemBreak(addr, true);\n            }\n        }\n        this.aBreakWrite = [\"bw\"];\n        /*\n         * nSuppressBreaks ensures we can't get into an infinite loop where a breakpoint lookup\n         * requires reading memory that triggers more memory reads, which triggers more breakpoint checks.\n         */\n        this.nSuppressBreaks = 0;\n        this.nBreakInstructions = 0;\n    }\n\n    /**\n     * addBreakpoint(aBreak, dbgAddr, fTemporary)\n     *\n     * In case you haven't already figured this out, all our breakpoint commands use the address\n     * to identify a breakpoint, not an incrementally assigned breakpoint index like other debuggers;\n     * see doBreak() for details.\n     *\n     * This has a few implications, one being that you CANNOT set more than one kind of breakpoint\n     * on a single address.  In practice, that's rarely a problem, because you can almost always set\n     * a different breakpoint on a neighboring address.\n     *\n     * Also, there is one exception to the \"one address, one breakpoint\" rule, and that involves\n     * temporary breakpoints (ie, one-time execution breakpoints that either a \"p\" or \"g\" command\n     * may create to step over a chunk of code).  Those breakpoints automatically clear themselves,\n     * so there usually isn't any need to refer to them using breakpoint commands.\n     *\n     * TODO: Consider supporting the more \"traditional\" breakpoint index syntax; the current\n     * address-based syntax was implemented solely for expediency and consistency.  At the same time,\n     * also consider a more WDEB386-like syntax, where \"br\" is used to set a variety of access-specific\n     * breakpoints, using modifiers like \"r1\", \"r2\", \"w1\", \"w2, etc.\n     *\n     * @this {DebuggerPDP10}\n     * @param {Array} aBreak\n     * @param {DbgAddrPDP10} dbgAddr\n     * @param {boolean} [fTemporary]\n     * @return {boolean} true if breakpoint added, false if already exists\n     */\n    addBreakpoint(aBreak, dbgAddr, fTemporary)\n    {\n        var fSuccess = true;\n\n        // this.nSuppressBreaks++;\n\n        /*\n         * Instead of complaining that a breakpoint already exists (as we used to do), we now\n         * allow breakpoints to be re-set; this makes it easier to update any commands that may\n         * be associated with the breakpoint.\n         *\n         * The only exception: we DO allow a temporary breakpoint at an address where there may\n         * already be a breakpoint, so that you can easily step (\"p\" or \"g\") over such addresses.\n         */\n        if (!fTemporary) {\n            this.findBreakpoint(aBreak, dbgAddr, true, false, true);\n        }\n\n        if (aBreak != this.aBreakExec) {\n            var addr = this.getAddr(dbgAddr);\n            if (addr === PDP10.ADDR_INVALID) {\n                this.println(\"invalid address: \" + this.toStrAddr(dbgAddr));\n                fSuccess = false;\n            } else {\n                var fWrite = (aBreak == this.aBreakWrite);\n                this.bus.addMemBreak(addr, fWrite);\n            }\n        }\n\n        if (fSuccess) {\n            aBreak.push(dbgAddr);\n            if (fTemporary) {\n                dbgAddr.fTemporary = true;\n            }\n            else {\n                this.printBreakpoint(aBreak, aBreak.length-1, \"set\");\n                this.historyInit();\n            }\n        }\n\n        // this.nSuppressBreaks--;\n\n        return fSuccess;\n    }\n\n    /**\n     * findBreakpoint(aBreak, dbgAddr, fRemove, fTemporary, fQuiet)\n     *\n     * @this {DebuggerPDP10}\n     * @param {Array} aBreak\n     * @param {DbgAddrPDP10} dbgAddr\n     * @param {boolean} [fRemove]\n     * @param {boolean} [fTemporary]\n     * @param {boolean} [fQuiet]\n     * @return {boolean} true if found, false if not\n     */\n    findBreakpoint(aBreak, dbgAddr, fRemove, fTemporary, fQuiet)\n    {\n        var fFound = false;\n        var addr = this.getAddr(dbgAddr);\n        for (var i = 1; i < aBreak.length; i++) {\n            var dbgAddrBreak = aBreak[i];\n            if (addr == this.getAddr(dbgAddrBreak)) {\n                if (!fTemporary || dbgAddrBreak.fTemporary) {\n                    fFound = true;\n                    if (fRemove) {\n                        if (!dbgAddrBreak.fTemporary && !fQuiet) {\n                            this.printBreakpoint(aBreak, i, \"cleared\");\n                        }\n                        aBreak.splice(i, 1);\n                        if (aBreak != this.aBreakExec) {\n                            var fWrite = (aBreak == this.aBreakWrite);\n                            this.bus.removeMemBreak(addr, fWrite);\n                        }\n                        /*\n                         * We'll mirror the logic in addBreakpoint() and leave the history buffer alone if this\n                         * was a temporary breakpoint.\n                         */\n                        if (!dbgAddrBreak.fTemporary) {\n                            this.historyInit();\n                        }\n                        break;\n                    }\n                    if (!fQuiet) this.printBreakpoint(aBreak, i, \"exists\");\n                    break;\n                }\n            }\n        }\n        return fFound;\n    }\n\n    /**\n     * listBreakpoints(aBreak)\n     *\n     * @this {DebuggerPDP10}\n     * @param {Array} aBreak\n     * @return {number} of breakpoints listed, 0 if none\n     */\n    listBreakpoints(aBreak)\n    {\n        for (var i = 1; i < aBreak.length; i++) {\n            this.printBreakpoint(aBreak, i);\n        }\n        return aBreak.length - 1;\n    }\n\n    /**\n     * printBreakpoint(aBreak, i, sAction)\n     *\n     * @this {DebuggerPDP10}\n     * @param {Array} aBreak\n     * @param {number} i\n     * @param {string} [sAction]\n     */\n    printBreakpoint(aBreak, i, sAction)\n    {\n        var dbgAddr = aBreak[i];\n        this.println(aBreak[0] + ' ' + this.toStrAddr(dbgAddr) + (sAction? (' ' + sAction) : (dbgAddr.sCmd? (' \"' + dbgAddr.sCmd + '\"') : '')));\n    }\n\n    /**\n     * setTempBreakpoint(dbgAddr)\n     *\n     * @this {DebuggerPDP10}\n     * @param {DbgAddrPDP10} dbgAddr of new temp breakpoint\n     */\n    setTempBreakpoint(dbgAddr)\n    {\n        this.addBreakpoint(this.aBreakExec, dbgAddr, true);\n    }\n\n    /**\n     * clearTempBreakpoint(addr)\n     *\n     * @this {DebuggerPDP10}\n     * @param {number|undefined} [addr] clear all temp breakpoints if no address specified\n     */\n    clearTempBreakpoint(addr)\n    {\n        if (addr !== undefined) {\n            this.checkBreakpoint(addr, 1, this.aBreakExec, true);\n            this.nStep = 0;\n        } else {\n            for (var i = 1; i < this.aBreakExec.length; i++) {\n                var dbgAddrBreak = this.aBreakExec[i];\n                if (dbgAddrBreak.fTemporary) {\n                    if (!this.findBreakpoint(this.aBreakExec, dbgAddrBreak, true, true)) break;\n                    i = 0;\n                }\n            }\n        }\n    }\n\n    /**\n     * checkBreakpoint(addr, nb, aBreak, fTemporary)\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} addr\n     * @param {number} nb (# of bytes)\n     * @param {Array} aBreak\n     * @param {boolean} [fTemporary]\n     * @return {boolean} true if breakpoint has been hit, false if not\n     */\n    checkBreakpoint(addr, nb, aBreak, fTemporary)\n    {\n        /*\n         * Time to check for breakpoints; note that this should be done BEFORE updating history data\n         * (see checkInstruction), since we might not actually execute the current instruction.\n         */\n        var fBreak = false;\n\n        if (!this.nSuppressBreaks++) {\n\n            for (var i = 1; !fBreak && i < aBreak.length; i++) {\n\n                var dbgAddrBreak = aBreak[i];\n\n                if (fTemporary && !dbgAddrBreak.fTemporary) continue;\n\n                /*\n                 * If we're checking an execution address, which is always virtual, and virtual\n                 * addresses are always restricted to 16 bits, let's mask the breakpoint address to match\n                 * (the user should know better, but we'll be nice).\n                 */\n                var addrBreak = this.getAddr(dbgAddrBreak) & (aBreak == this.aBreakExec? 0xffff : -1);\n                for (var n = 0; n < nb; n++) {\n\n                    if ((addr + n) != addrBreak) continue;\n\n                    var a;\n                    fBreak = true;\n                    if (dbgAddrBreak.fTemporary) {\n                        this.findBreakpoint(aBreak, dbgAddrBreak, true, true);\n                        fTemporary = true;\n                    }\n                    if (a = dbgAddrBreak.aCmds) {\n                        /*\n                         * When one or more commands are attached to a breakpoint, we don't halt by default.\n                         * Instead, we set fBreak to true only if, at the completion of all the commands, the\n                         * CPU is halted; in other words, you should include \"h\" as one of the breakpoint commands\n                         * if you want the breakpoint to stop execution.\n                         *\n                         * Another useful command is \"if\", which will return false if the expression is false,\n                         * at which point we'll jump ahead to the next \"else\" command, and if there isn't an \"else\",\n                         * we abort.\n                         */\n                        fBreak = false;\n                        for (var j = 0; j < a.length; j++) {\n                            if (!this.doCommand(a[j], true)) {\n                                if (a[j].indexOf(\"if\")) {\n                                    fBreak = true;          // the failed command wasn't \"if\", so abort\n                                    break;\n                                }\n                                var k = j + 1;\n                                for (; k < a.length; k++) {\n                                    if (!a[k].indexOf(\"else\")) break;\n                                    j++;\n                                }\n                                if (k == a.length) {        // couldn't find an \"else\" after the \"if\", so abort\n                                    fBreak = true;\n                                    break;\n                                }\n                                /*\n                                 * If we're still here, we'll execute the \"else\" command (which is just a no-op),\n                                 * followed by any remaining commands.\n                                 */\n                            }\n                        }\n                        if (!this.cpu.isRunning()) fBreak = true;\n                    }\n                    if (fBreak) {\n                        if (!fTemporary) this.printBreakpoint(aBreak, i, \"hit\");\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.nSuppressBreaks--;\n\n        return fBreak;\n    }\n\n    /**\n     * getAccOutput(iAcc)\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} iAcc\n     * @return {string}\n     */\n    getAccOutput(iAcc)\n    {\n        var sReg = Str.toOct(iAcc, 2);\n        this.setAddr(this.dbgAddrAcc, iAcc);\n        sReg += '=' + this.toStrBase(this.getWord(this.dbgAddrAcc), 36) + ' ';\n        return sReg;\n    }\n\n    /**\n     * getRegOutput(iReg)\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} iReg\n     * @return {string}\n     */\n    getRegOutput(iReg)\n    {\n        var sReg = this.getRegName(iReg);\n        if (sReg) {\n            var nBits = (iReg >= DebuggerPDP10.REGS.OV? 1 : (iReg == DebuggerPDP10.REGS.RA? 23 : 18));\n            sReg += '=' + this.toStrBase(this.getRegValue(iReg), nBits) + ' ';\n        }\n        return sReg;\n    }\n\n    /**\n     * getMiscDump()\n     *\n     * @this {DebuggerPDP10}\n     * @return {string}\n     */\n    getMiscDump()\n    {\n        var sDump = \"\";\n        for (var i = 0; i < DebuggerPDP10.REGNAMES.length; i++) {\n            sDump += this.getRegOutput(i);\n        }\n        return sDump;\n    }\n\n    /**\n     * getRegDump(fMisc)\n     *\n     * For now, fMisc defaults to true, providing a full register dump by default.\n     *\n     * @this {DebuggerPDP10}\n     * @param {boolean|undefined} [fMisc] (true to include misc registers)\n     * @return {string}\n     */\n    getRegDump(fMisc = true)\n    {\n        var sDump = \"\";\n        for (var i = 0; i < 16; i++) {\n            if (i && !(i & 3)) sDump += '\\n';\n            sDump += this.getAccOutput(i);\n        }\n        if (fMisc) sDump += '\\n' + this.getMiscDump();\n        return sDump;\n    }\n\n    /**\n     * comparePairs(p1, p2)\n     *\n     * @this {DebuggerPDP10}\n     * @param {number|string|Array|Object} p1\n     * @param {number|string|Array|Object} p2\n     * @return {number}\n     */\n    comparePairs(p1, p2)\n    {\n        return p1[0] > p2[0]? 1 : p1[0] < p2[0]? -1 : 0;\n    }\n\n    /**\n     * addSymbols(sModule, addr, len, aSymbols)\n     *\n     * As filedump.js (formerly convrom.php) explains, aSymbols is a JSON-encoded object whose properties consist\n     * of all the symbols (in upper-case), and the values of those properties are objects containing any or all of\n     * the following properties:\n     *\n     *      'v': the value of an absolute (unsized) value\n     *      'b': either 1, 2, 4 or undefined if an unsized value\n     *      's': either a hard-coded segment or undefined\n     *      'o': the offset of the symbol within the associated address space\n     *      'l': the original-case version of the symbol, present only if it wasn't originally upper-case\n     *      'a': annotation for the specified offset; eg, the original assembly language, with optional comment\n     *\n     * To that list of properties, we also add:\n     *\n     *      'p': the physical address (calculated whenever both 's' and 'o' properties are defined)\n     *\n     * Note that values for any 'v', 'b', 's' and 'o' properties are unquoted decimal values, and the values\n     * for any 'l' or 'a' properties are quoted strings. Also, if double-quotes were used in any of the original\n     * annotation ('a') values, they will have been converted to two single-quotes, so we're responsible for\n     * converting them back to individual double-quotes.\n     *\n     * For example:\n     *      {\n     *          'HF_PORT': {\n     *              'v':800\n     *          },\n     *          'HDISK_INT': {\n     *              'b':4, 's':0, 'o':52\n     *          },\n     *          'ORG_VECTOR': {\n     *              'b':4, 's':0, 'o':76\n     *          },\n     *          'CMD_BLOCK': {\n     *              'b':1, 's':64, 'o':66\n     *          },\n     *          'DISK_SETUP': {\n     *              'o':3\n     *          },\n     *          '.40': {\n     *              'o':40, 'a':\"MOV AX,WORD PTR ORG_VECTOR ;GET DISKETTE VECTOR\"\n     *          }\n     *      }\n     *\n     * If a symbol only has an offset, then that offset value can be assigned to the symbol property directly:\n     *\n     *          'DISK_SETUP': 3\n     *\n     * The last property is an example of an \"anonymous\" entry, for offsets where there is no associated symbol.\n     * Such entries are identified by a period followed by a unique number (usually the offset of the entry), and\n     * they usually only contain offset ('o') and annotation ('a') properties.  I could eliminate the leading\n     * period, but it offers a very convenient way of quickly discriminating among genuine vs. anonymous symbols.\n     *\n     * We add all these entries to our internal symbol table, which is an array of 4-element arrays, each of which\n     * look like:\n     *\n     *      [addr, len, aSymbols, aOffsets]\n     *\n     * There are two basic symbol operations: findSymbol(), which takes an address and finds the symbol, if any,\n     * at that address, and findSymbolAddr(), which takes a string and attempts to match it to a non-anonymous\n     * symbol with a matching offset ('o') property.\n     *\n     * To implement findSymbol() efficiently, addSymbols() creates an array of [offset, sSymbol] pairs\n     * (aOffsets), one pair for each symbol that corresponds to an offset within the specified address space.\n     *\n     * We guarantee the elements of aOffsets are in offset order, because we build it using binaryInsert();\n     * it's quite likely that the MAP file already ordered all its symbols in offset order, but since they're\n     * hand-edited files, we can't assume that, and we need to ensure that findSymbol()'s binarySearch() operates\n     * properly.\n     *\n     * @this {DebuggerPDP10}\n     * @param {string|null} sModule\n     * @param {number|null} addr (physical address where the symbols are located, if the memory is physical; eg, ROM)\n     * @param {number} len (the size of the region, in bytes)\n     * @param {Object} aSymbols (collection of symbols in this group; the format of this collection is described below)\n     */\n    addSymbols(sModule, addr, len, aSymbols)\n    {\n        var dbgAddr = {};\n        var aOffsets = [];\n        for (var sSymbol in aSymbols) {\n            var symbol = aSymbols[sSymbol];\n            if (typeof symbol == \"number\") {\n                aSymbols[sSymbol] = symbol = {'o': symbol};\n            }\n            var offSymbol = symbol['o'];\n            var sAnnotation = symbol['a'];\n            if (offSymbol !== undefined) {\n                Usr.binaryInsert(aOffsets, [offSymbol >>> 0, sSymbol], this.comparePairs);\n            }\n            if (sAnnotation) symbol['a'] = sAnnotation.replace(/''/g, \"\\\"\");\n        }\n        var symbolTable = {\n            sModule: sModule,\n            addr: addr,\n            len: len,\n            aSymbols: aSymbols,\n            aOffsets: aOffsets\n        };\n        this.aSymbolTable.push(symbolTable);\n    }\n\n    /**\n     * dumpSymbols()\n     *\n     * TODO: Add \"numerical\" and \"alphabetical\" dump options. This is simply dumping them in whatever\n     * order they appeared in the original MAP file.\n     *\n     * @this {DebuggerPDP10}\n     */\n    dumpSymbols()\n    {\n        for (var iTable = 0; iTable < this.aSymbolTable.length; iTable++) {\n            var symbolTable = this.aSymbolTable[iTable];\n            for (var sSymbol in symbolTable.aSymbols) {\n                if (sSymbol.charAt(0) == '.') continue;\n                var symbol = symbolTable.aSymbols[sSymbol];\n                var offSymbol = symbol['o'];\n                if (offSymbol === undefined) continue;\n                var sSymbolOrig = symbolTable.aSymbols[sSymbol]['l'];\n                if (sSymbolOrig) sSymbol = sSymbolOrig;\n                this.println(this.toStrOffset(offSymbol) + ' ' + sSymbol);\n            }\n        }\n    }\n\n    /**\n     * findSymbol(dbgAddr, fNearest)\n     *\n     * Search aSymbolTable for dbgAddr, and return an Array for the corresponding symbol (empty if not found).\n     *\n     * If fNearest is true, and no exact match was found, then the Array returned will contain TWO sets of\n     * entries: [0]-[3] will refer to closest preceding symbol, and [4]-[7] will refer to the closest subsequent symbol.\n     *\n     * @this {DebuggerPDP10}\n     * @param {DbgAddrPDP10} dbgAddr\n     * @param {boolean} [fNearest]\n     * @return {Array} where [0] == symbol name, [1] == symbol value, [2] == any annotation, and [3] == any associated comment\n     */\n    findSymbol(dbgAddr, fNearest)\n    {\n        var aSymbol = [];\n        var addrSymbol = this.getAddr(dbgAddr) >>> 0;\n        for (var iTable = 0; iTable < this.aSymbolTable.length; iTable++) {\n            var symbolTable = this.aSymbolTable[iTable];\n            var addr = symbolTable.addr >>> 0;\n            var len = symbolTable.len;\n            if (addrSymbol >= addr && addrSymbol < addr + len) {\n                var offSymbol = addrSymbol - addr;\n                var result = Usr.binarySearch(symbolTable.aOffsets, [offSymbol], this.comparePairs);\n                if (result >= 0) {\n                    this.returnSymbol(iTable, result, aSymbol);\n                }\n                else if (fNearest) {\n                    result = ~result;\n                    this.returnSymbol(iTable, result-1, aSymbol);\n                    this.returnSymbol(iTable, result, aSymbol);\n                }\n                break;\n            }\n        }\n        return aSymbol;\n    }\n\n    /**\n     * findSymbolAddr(sSymbol)\n     *\n     * Search our symbol tables for sSymbol, and if found, return a dbgAddr (same as parseAddr()).\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} sSymbol\n     * @return {DbgAddrPDP10|undefined}\n     */\n    findSymbolAddr(sSymbol)\n    {\n        var dbgAddr, offSymbol;\n\n        if (sSymbol.match(/^[a-z_][a-z0-9_]*$/i)) {\n            var sUpperCase = sSymbol.toUpperCase();\n            for (var iTable = 0; iTable < this.aSymbolTable.length; iTable++) {\n                var symbolTable = this.aSymbolTable[iTable];\n                var symbol = symbolTable.aSymbols[sUpperCase];\n                if (symbol != null) {\n                    offSymbol = symbol['o'];\n                    /*\n                     * If the symbol matched but there's no 'o' offset (ie, it wasn't for an address), there's\n                     * no point looking any farther, since each symbol appears only once.\n                     *\n                     * NOTE: We assume that every ROM is ORG'ed at 0x0000, and therefore unless the symbol has an\n                     * explicitly-defined segment, we return the segment associated with the entire group; for a ROM,\n                     * that segment is normally \"addrROM >>> 4\".  Down the road, we may want/need to support a special\n                     * symbol entry (eg, \".ORG\") that defines an alternate origin.\n                     */\n                    break;\n                }\n            }\n        }\n        if (offSymbol != null) {\n            dbgAddr = this.newAddr(offSymbol);\n        }\n        return dbgAddr;\n    }\n\n    /**\n     * loadImage(aWords, addrStart)\n     *\n     * @this {DebuggerPDP10}\n     * @param {Array.<number>} aWords\n     * @param {number|null|undefined} addrStart\n     */\n    loadImage(aWords, addrStart)\n    {\n        var bus = this.bus;\n        var dbg = this.dbg;\n        var nWords = 0, addrLo = null, addrHi = 0;\n        aWords.forEach(function(w, addr) {\n            bus.setWord(addr, w);\n            if (addrLo == null) addrLo = addr;\n            if (addr > addrHi) addrHi = addr;\n            nWords++;\n        });\n        if (!nWords) {\n            this.println(\"no data\");\n        } else {\n            var sStart = \"start address \";\n            if (addrStart != null) {\n                this.cpu.setPC(addrStart);\n                sStart += this.toStrBase(addrStart);\n            } else {\n                sStart += \"unspecified\";\n            }\n            this.println(nWords + \" words loaded at \" + this.toStrBase(addrLo) + '-' + this.toStrBase(addrHi) + \", \" + sStart);\n            this.updateStatus();\n        }\n    }\n\n    /**\n     * returnSymbol(iTable, iOffset, aSymbol)\n     *\n     * Helper function for findSymbol().\n     *\n     * @this {DebuggerPDP10}\n     * @param {number} iTable\n     * @param {number} iOffset\n     * @param {Array} aSymbol is updated with the specified symbol, if it exists\n     */\n    returnSymbol(iTable, iOffset, aSymbol)\n    {\n        var symbol = {};\n        var aOffsets = this.aSymbolTable[iTable].aOffsets;\n        var offset = 0, sSymbol = null;\n        if (iOffset >= 0 && iOffset < aOffsets.length) {\n            offset = aOffsets[iOffset][0];\n            sSymbol = aOffsets[iOffset][1];\n        }\n        if (sSymbol) {\n            symbol = this.aSymbolTable[iTable].aSymbols[sSymbol];\n            sSymbol = (sSymbol.charAt(0) == '.'? null : (symbol['l'] || sSymbol));\n        }\n        aSymbol.push(sSymbol);\n        aSymbol.push(offset);\n        aSymbol.push(symbol['a']);\n        aSymbol.push(symbol['c']);\n    }\n\n    /**\n     * doHelp()\n     *\n     * @this {DebuggerPDP10}\n     */\n    doHelp()\n    {\n        var s = \"commands:\";\n        for (var sCommand in DebuggerPDP10.COMMANDS) {\n            s += '\\n' + Str.pad(sCommand, 9) + DebuggerPDP10.COMMANDS[sCommand];\n        }\n        if (!this.checksEnabled()) s += \"\\nnote: history disabled if no exec breakpoints\";\n        this.println(s);\n    }\n\n    /**\n     * doAssemble(asArgs)\n     *\n     * This always receives the complete argument array, where the order of the arguments is:\n     *\n     *      [0]: the assemble command (assumed to be \"a\")\n     *      [1]: the target address (eg, \"200\")\n     *      [2]: the opcode mnemonic (eg, \"hrli\")\n     *      [3]: the operands, if any\n     *\n     * The Debugger enters \"assemble mode\" whenever only the first (or first and second) arguments are present.\n     * As long as \"assemble mode is active, the user can omit the first two arguments on all later assemble commands\n     * until \"assemble mode\" is cancelled with an empty command line; the command processor automatically prepends \"a\"\n     * and the next available target address to the argument array.\n     *\n     * Entering \"assemble mode\" is optional; one could enter a series of fully-qualified assemble commands; eg:\n     *\n     *      a 100 hrli 1,111111\n     *      a 101 hrri 1,444444\n     *      ...\n     *\n     * without ever entering \"assemble mode\", but of course, that requires more typing and doesn't take advantage\n     * of automatic target address advancement (see dbgAddrAssemble).\n     *\n     * When filename(s) or URL(s) are provided in lieu of an opcode, we pass those on to the Macro10 component for\n     * assembling (multiple files must be separated by semicolons), along with any option letters that were included\n     * with the \"a\" command; for example, if \"ap\" was specified, then \"p\" will be passed to Macro10 as an option.\n     *\n     * See the Macro10 component for a list of supported options.\n     *\n     * When assembling a file, the target address determines the initial location counter for the assembly process,\n     * but that can always be overridden by a LOC (or RELOC) pseudo-op in the file.  The target address will also be\n     * used as the starting address unless that's overridden by an END pseudo-op.  In the absence of a target address,\n     * the location counter starts at zero, and the starting address defaults to the PC register.\n     *\n     * @this {DebuggerPDP10}\n     * @param {Array.<string>} asArgs is the complete argument array, beginning with the \"a\" command in asArgs[0]\n     * @return {boolean}\n     */\n    doAssemble(asArgs)\n    {\n        var sOptions = asArgs[0].substr(1);\n        var sAddr = asArgs[1] && asArgs[1][0] >= '0' && asArgs[1][0] <= '9'? asArgs[1] : undefined;\n        var sOpcode = sAddr? asArgs[2] : asArgs[1];\n        var dbgAddr = this.parseAddr(sAddr, this.dbgAddrAssemble);\n\n        if (!sOpcode) {\n            this.println(\"begin assemble at \" + this.toStrAddr(dbgAddr));\n            this.fAssemble = true;\n            this.cmp.updateDisplays();\n            return true;\n        }\n\n        var match = sOpcode.match(/^(['\"]?)(.*?)(\\.klm|\\.mac|\\.html|\\.txt|)\\1$/i);\n        if (match && (match[1] || match[3])) {\n            var dbg = this;\n            var cpu = this.cpu;\n            dbgAddr = this.parseAddr(sAddr);\n            if (this.macro10) {\n                dbg.println(\"assembly already in progress\");\n            }\n            else {\n                var sFile = match[2] + match[3];\n                if (!match[3]) sOptions += 's';\n                var addrLoad = dbgAddr.addr;\n                var macro10 = this.macro10 = new Macro10(dbg);\n                macro10.assembleFiles(sFile, addrLoad, sOptions, function doneMacro10(nErrorCode, sURL) {\n                    if (!nErrorCode) {\n                        /*\n                         * NOTE: Most Debugger operations run in the context of doCommand(), which catches any exceptions;\n                         * however, this callback may be running in a different context (eg, a network request callback), so\n                         * better safe than sorry.\n                         */\n                        try {\n                            var addrStart = macro10.getStart();\n                            if (addrStart == null) addrStart = addrLoad;\n                            dbg.loadImage(macro10.getImage(), addrStart);\n                        } catch(e) {\n                            if (typeof e == \"number\") {\n                                nErrorCode = e || -1;\n                            } else {\n                                dbg.println(e.message);\n                                nErrorCode = -1;        // fake error so that command processing stops\n                            }\n                        }\n                    }\n                    if (nErrorCode) {\n                        dbg.println(\"error (\" + nErrorCode + \") processing \" + (sURL || sFile));\n                    }\n                    dbg.macro10 = null;\n                    if (!nErrorCode) dbg.doCommands();\n                });\n            }\n            return false;\n        }\n\n        asArgs.shift();\n        asArgs.shift();\n        asArgs.shift();\n        var sOperands = asArgs.join(\"\");\n        var opCode = this.parseInstruction(sOpcode, sOperands, dbgAddr.addr || 0);\n\n        if (opCode >= 0) {\n            this.setWord(dbgAddr, opCode);\n            this.println(this.getInstruction(dbgAddr));\n        }\n        return true;\n    }\n\n    /**\n     * doBreak(sCmd, sAddr, sOptions)\n     *\n     * As the \"help\" output below indicates, the following breakpoint commands are supported:\n     *\n     *      bp #    set exec breakpoint\n     *      br #    set read breakpoint\n     *      bw #    set write breakpoint\n     *      bc #    clear breakpoint (* to clear all)\n     *      bl      list all breakpoints\n     *      bn [#]  break after # instruction(s)\n     *\n     * The \"bn\" command, like the \"dh\" command and all other commands that use an instruction count,\n     * assumes a decimal value, regardless of the current base.  Use \"bn\" without an argument to display\n     * the break count, and use \"bn 0\" to clear the break count.\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} sCmd\n     * @param {string|undefined} [sAddr]\n     * @param {string} [sOptions] (the rest of the breakpoint command-line)\n     */\n    doBreak(sCmd, sAddr, sOptions)\n    {\n        if (sAddr == '?') {\n            this.println(\"breakpoint commands:\");\n            this.println(\"\\tbp #\\tset exec breakpoint\");\n            this.println(\"\\tbr #\\tset read breakpoint\");\n            this.println(\"\\tbw #\\tset write breakpoint\");\n            this.println(\"\\tbc #\\tclear breakpoint (* to clear all)\");\n            this.println(\"\\tbl\\tlist all breakpoints\");\n            this.println(\"\\tbn [#]\\tbreak after # instruction(s)\");\n            return;\n        }\n\n        var sParm = sCmd.charAt(1);\n        if (sParm == 'l') {\n            var cBreaks = 0;\n            cBreaks += this.listBreakpoints(this.aBreakExec);\n            cBreaks += this.listBreakpoints(this.aBreakRead);\n            cBreaks += this.listBreakpoints(this.aBreakWrite);\n            if (!cBreaks) this.println(\"no breakpoints\");\n            return;\n        }\n\n        if (sParm == 'n') {\n            var n = +sAddr || 0;\n            if (sAddr) this.nBreakInstructions = n;\n            this.println(\"break after \" + n + \" instruction(s)\");\n            return;\n        }\n\n        if (sAddr === undefined) {\n            this.println(\"missing breakpoint address\");\n            return;\n        }\n\n        var dbgAddr = sAddr == '*'? this.newAddr() : this.parseAddr(sAddr, this.dbgAddrCode);\n\n        if (sParm == 'c') {\n            if (dbgAddr.addr == null) {\n                this.clearBreakpoints();\n                this.println(\"all breakpoints cleared\");\n                return;\n            }\n            if (this.findBreakpoint(this.aBreakExec, dbgAddr, true))\n                return;\n            if (this.findBreakpoint(this.aBreakRead, dbgAddr, true))\n                return;\n            if (this.findBreakpoint(this.aBreakWrite, dbgAddr, true))\n                return;\n            this.println(\"breakpoint missing: \" + this.toStrAddr(dbgAddr));\n            return;\n        }\n\n        if (dbgAddr.addr == null) return;\n\n        this.parseAddrOptions(dbgAddr, sOptions);\n\n        if (sParm == 'p') {\n            this.addBreakpoint(this.aBreakExec, dbgAddr);\n            return;\n        }\n        if (sParm == 'r') {\n            this.addBreakpoint(this.aBreakRead, dbgAddr);\n            return;\n        }\n        if (sParm == 'w') {\n            this.addBreakpoint(this.aBreakWrite, dbgAddr);\n            return;\n        }\n        this.println(\"unknown breakpoint command: \" + sParm);\n    }\n\n    /**\n     * doClear(sCmd)\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} [sCmd] (eg, \"cls\" or \"clear\")\n     */\n    doClear(sCmd)\n    {\n        this.cmp.clearPanel();\n    }\n\n    /**\n     * doDump(asArgs)\n     *\n     * @this {DebuggerPDP10}\n     * @param {Array.<string>} asArgs (formerly sCmd, [sAddr], [sLen] and [sBytes])\n     */\n    doDump(asArgs)\n    {\n        var m;\n        var sCmd = asArgs[0];\n        var sAddr = asArgs[1];\n        var sLen = asArgs[2];\n        var sBytes = asArgs[3];\n\n        if (sAddr == '?') {\n            var sDumpers = \"\";\n            for (m in MessagesPDP10.CATEGORIES) {\n                if (this.afnDumpers[m]) {\n                    if (sDumpers) sDumpers += ',';\n                    sDumpers = sDumpers + m;\n                }\n            }\n            sDumpers += \",state,symbols\";\n            this.println(\"dump memory commands:\");\n            this.println(\"\\tdw [a] [n]    dump n words at address a\");\n            this.println(\"\\tds [a] [n]    dump n words at address a as JSON\");\n            this.println(\"\\tdh [p] [n]    dump n instructions from history position p\");\n            if (sDumpers.length) this.println(\"dump extension commands:\\n\\t\" + sDumpers);\n            return;\n        }\n\n        if (sAddr == \"state\") {\n            var sState = this.cmp.powerOff(true);\n            if (sLen == \"console\") {\n                /*\n                 * Console buffers are notoriously small, and even the following code, which breaks the\n                 * data into parts (eg, \"d state console 1\", \"d state console 2\", etc) just isn't that helpful.\n                 *\n                 *      var nPart = +sBytes;\n                 *      if (nPart) sState = sState.substr(1000000 * (nPart-1), 1000000);\n                 *\n                 * So, the best way to capture a large machine state is to use the new \"Save Machine\" link\n                 * that downloads a machine's entire state.  Alternatively, run your own local server and use\n                 * server-side storage.  Take a look at the \"Save\" binding in computer.js, which binds an HTML\n                 * control to the computer.powerOff() and computer.saveServerState() functions.\n                 */\n                console.log(sState);\n            } else {\n                this.doClear();\n                if (sState) this.println(sState);\n            }\n            return;\n        }\n\n        if (sAddr == \"symbols\") {\n            this.dumpSymbols();\n            return;\n        }\n\n        if (sCmd == \"d\") {\n            for (m in MessagesPDP10.CATEGORIES) {\n                if (asArgs[1] == m) {\n                    var fnDumper = this.afnDumpers[m];\n                    if (fnDumper) {\n                        asArgs.shift();\n                        asArgs.shift();\n                        fnDumper(asArgs);\n                    } else {\n                        this.println(\"no dump registered for \" + sAddr);\n                    }\n                    return;\n                }\n            }\n            if (!sAddr) sCmd = this.sCmdDumpPrev || \"dw\";\n        } else {\n            this.sCmdDumpPrev = sCmd;\n        }\n\n        if (sCmd == \"dh\") {\n            this.dumpHistory(sAddr, sLen);\n            return;\n        }\n\n        var len = 0;\n        var fJSON = (sCmd == \"ds\");\n        var dbgAddr = this.parseAddr(sAddr, this.dbgAddrData);\n\n        if (sLen) {\n            if (sLen.charAt(0) == 'l') {\n                sLen = sLen.substr(1) || sBytes;\n                len = this.parseValue(sLen);\n            }\n            else {\n                var dbgAddrEnd = this.parseAddr(sLen);\n                len = dbgAddrEnd.addr - dbgAddr.addr;\n            }\n            if (len < 0) len = 0;\n            if (len > 0x10000) len = 0x10000;\n        }\n\n        var nBase = this.nBase;\n        if (dbgAddr.nBase) this.nBase = dbgAddr.nBase;\n\n        var size = (sCmd == \"db\"? 1 : 2);\n        var nWords = len || 32;\n        var nWordsPerLine = (size == 1? 1 : 4);\n        var nLines = (((nWords + nWordsPerLine - 1) / nWordsPerLine)|0) || 1;\n\n        var sDump = \"\";\n        while (nLines-- && nWords > 0) {\n            var sData = \"\", sChars = \"\";\n            sAddr = this.toStrAddr(dbgAddr);\n            var n = nWordsPerLine;\n            while (n-- > 0 && nWords-- > 0) {\n                var w = this.getWord(dbgAddr, 1);\n                if (fJSON) {\n                    if (sData) sData += ',';\n                    sData += w;\n                } else {\n                    sData += this.toStrWord(w);\n                    sData += '  ';\n                }\n                /*\n                 * TODO: Provide some UI for choosing whether to dump SIXBIT or ASCII data.\n                 */\n                var nBits = 7;\n                var shift = 36 - nBits;\n                for (var i = 0; size == 1 && shift >= 0; i++) {\n                    var c = ((w / Math.pow(2, shift)) % Math.pow(2, nBits));\n                    sData += this.toStrBase(c, nBits) + ' ';\n                    c += (nBits == 6? 0x20 : 0);\n                    sChars += (c < 0x20? '.' : String.fromCharCode(c));\n                    shift -= nBits;\n                }\n            }\n            if (sDump) sDump += \"\\n\";\n            if (fJSON) {\n                sDump += sData + \",\";\n            } else {\n                sDump += sAddr + \": \" + sData + ((n < 0)? (' ' + sChars) : \"\");\n            }\n        }\n\n        if (sDump) this.println(sDump);\n\n        this.nBase = nBase;\n    }\n\n    /**\n     * doEdit(asArgs)\n     *\n     * @this {DebuggerPDP10}\n     * @param {Array.<string>} asArgs\n     */\n    doEdit(asArgs)\n    {\n        var fnGet, fnSet;\n        var sCmd = asArgs[0];\n        var sAddr = asArgs[1];\n        if (sCmd == \"e\" || sCmd == \"ew\") {\n            fnGet = this.getWord;\n            fnSet = this.setWord;\n        } else {\n            sAddr = null;\n        }\n        if (sAddr == null) {\n            this.println(\"edit memory commands:\");\n            this.println(\"\\tew [a] [...]  edit words at address a\");\n            return;\n        }\n        var dbgAddr = this.parseAddr(sAddr, this.dbgAddrData);\n        for (var i = 2; i < asArgs.length; i++) {\n            var w = this.parseExpression(asArgs[i]);\n            if (w === undefined) break;\n            w = this.validateWord(w);\n            this.println(\"changing \" + this.toStrAddr(dbgAddr) + \" from \" + this.toStrWord(fnGet.call(this, dbgAddr)) + \" to \" + this.toStrWord(w));\n            fnSet.call(this, dbgAddr, w, 1);\n        }\n    }\n\n    /**\n     * doHalt(fQuiet)\n     *\n     * @this {DebuggerPDP10}\n     * @param {boolean} [fQuiet]\n     */\n    doHalt(fQuiet)\n    {\n        var sMsg;\n        if (this.flags.running) {\n            if (!fQuiet) this.println(\"halting\");\n            this.stopCPU();\n        } else {\n            if (this.isBusy(true)) return;\n            if (!fQuiet) this.println(\"already halted\");\n        }\n    }\n\n    /**\n     * doIf(sCmd, fQuiet)\n     *\n     * NOTE: Don't forget that the default base for all numeric constants is 16 (hex), so when you evaluate\n     * an expression like \"a==10\", it will compare the value of the variable \"a\" to 0x10; use a trailing period\n     * (eg, \"10.\") if you really intend decimal.\n     *\n     * Also, if no variable named \"a\" exists, \"a\" will evaluate to 0x0A, so the expression \"a==10\" becomes\n     * \"0x0A==0x10\" (false), whereas the expression \"a==10.\" becomes \"0x0A==0x0A\" (true).\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} sCmd\n     * @param {boolean} [fQuiet]\n     * @return {boolean} true if expression is non-zero, false if zero (or undefined due to a parse error)\n     */\n    doIf(sCmd, fQuiet)\n    {\n        sCmd = Str.trim(sCmd);\n        if (!this.parseExpression(sCmd)) {\n            if (!fQuiet) this.println(\"false: \" + sCmd);\n            return false;\n        }\n        if (!fQuiet) this.println(\"true: \" + sCmd);\n        return true;\n    }\n\n    /**\n     * doInfo(asArgs)\n     *\n     * @this {DebuggerPDP10}\n     * @param {Array.<string>} asArgs\n     * @return {boolean} true only if the instruction info command (\"n\") is supported\n     */\n    doInfo(asArgs)\n    {\n        if (DEBUG) {\n            this.println(\"msPerYield: \" + this.cpu.msPerYield);\n            this.println(\"nCyclesPerYield: \" + this.cpu.nCyclesPerYield);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * doVar(sCmd)\n     *\n     * The command must be of the form \"{variable} = [{expression}]\", where expression may contain constants,\n     * operators, registers, symbols, other variables, or nothing at all; in the latter case, the variable, if\n     * any, is deleted.\n     *\n     * Other supported shorthand: \"var\" with no parameters prints the values of all variables, and \"var {variable}\"\n     * prints the value of the specified variable.\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} sCmd\n     * @return {boolean} true if valid \"var\" assignment, false if not\n     */\n    doVar(sCmd)\n    {\n        var a = sCmd.match(/^\\s*([A-Z_]?[A-Z0-9_]*)\\s*(=?)\\s*(.*)$/i);\n        if (a) {\n            if (!a[1]) {\n                if (!this.printVariable()) this.println(\"no variables\");\n                return true;    // it's not considered an error to print an empty list of variables\n            }\n            if (!a[2]) {\n                return this.printVariable(a[1]);\n            }\n            if (!a[3]) {\n                this.delVariable(a[1]);\n                return true;    // it's not considered an error to delete a variable that didn't exist\n            }\n            var v = this.parseExpression(a[3]);\n            if (v !== undefined) {\n                this.setVariable(a[1], v);\n                return true;\n            }\n            return false;\n        }\n        this.println(\"invalid assignment:\" + sCmd);\n        return false;\n    }\n\n    /**\n     * doList(sAddr, fPrint)\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} sAddr\n     * @param {boolean} [fPrint]\n     * @return {string|null}\n     */\n    doList(sAddr, fPrint)\n    {\n        var sSymbol = null;\n\n        var dbgAddr = this.parseAddr(sAddr);\n        var addr = this.getAddr(dbgAddr);\n        var aSymbol = this.findSymbol(dbgAddr, true);\n        if (aSymbol.length) {\n            var nDelta, sDelta, s;\n            if (aSymbol[0]) {\n                sDelta = \"\";\n                nDelta = dbgAddr.addr - aSymbol[1];\n                if (nDelta) sDelta = \" + \" + Str.toHexWord(nDelta);\n                s = aSymbol[0] + \" (\" + this.toStrOffset(aSymbol[1]) + ')' + sDelta;\n                if (fPrint) this.println(s);\n                sSymbol = s;\n            }\n            if (aSymbol.length > 4 && aSymbol[4]) {\n                sDelta = \"\";\n                nDelta = aSymbol[5] - dbgAddr.addr;\n                if (nDelta) sDelta = \" - \" + Str.toHexWord(nDelta);\n                s = aSymbol[4] + \" (\" + this.toStrOffset(aSymbol[5]) + ')' + sDelta;\n                if (fPrint) this.println(s);\n                if (!sSymbol) sSymbol = s;\n            }\n        } else {\n            if (fPrint) this.println(\"no symbols\");\n        }\n        return sSymbol;\n    }\n\n    /**\n     * doMessages(asArgs)\n     *\n     * @this {DebuggerPDP10}\n     * @param {Array.<string>} asArgs\n     */\n    doMessages(asArgs)\n    {\n        var m;\n        var fCriteria = null;\n        var sCategory = asArgs[1];\n        if (sCategory == '?') sCategory = undefined;\n\n        if (sCategory !== undefined) {\n            var bitsMessage = 0;\n            if (sCategory == \"all\") {\n                bitsMessage = (0xffffffff|0) & ~(MessagesPDP10.HALT | MessagesPDP10.KEYS | MessagesPDP10.LOG);\n                sCategory = null;\n            } else if (sCategory == \"on\") {\n                fCriteria = true;\n                sCategory = null;\n            } else if (sCategory == \"off\") {\n                fCriteria = false;\n                sCategory = null;\n            } else {\n                /*\n                 * Internally, we use \"key\" instead of \"keys\", since the latter is a method on JavasScript objects,\n                 * but externally, we allow the user to specify \"keys\"; \"kbd\" is also allowed as shorthand for \"keyboard\".\n                 */\n                if (sCategory == \"keys\") sCategory = \"key\";\n                if (sCategory == \"kbd\") sCategory = \"keyboard\";\n                for (m in MessagesPDP10.CATEGORIES) {\n                    if (sCategory == m) {\n                        bitsMessage = MessagesPDP10.CATEGORIES[m];\n                        fCriteria = !!(this.bitsMessage & bitsMessage);\n                        break;\n                    }\n                }\n                if (!bitsMessage) {\n                    this.println(\"unknown message category: \" + sCategory);\n                    return;\n                }\n            }\n            if (bitsMessage) {\n                if (asArgs[2] == \"on\") {\n                    this.bitsMessage |= bitsMessage;\n                    fCriteria = true;\n                }\n                else if (asArgs[2] == \"off\") {\n                    this.bitsMessage &= ~bitsMessage;\n                    fCriteria = false;\n                    if (bitsMessage == MessagesPDP10.BUFFER) {\n                        var i = this.aMessageBuffer.length >= 1000? this.aMessageBuffer.length - 1000 : 0;\n                        while (i < this.aMessageBuffer.length) {\n                            this.println(this.aMessageBuffer[i++]);\n                        }\n                        this.aMessageBuffer = [];\n                    }\n                }\n            }\n        }\n\n        /*\n         * Display those message categories that match the current criteria (on or off)\n         */\n        var n = 0;\n        var sCategories = \"\";\n        for (m in MessagesPDP10.CATEGORIES) {\n            if (!sCategory || sCategory == m) {\n                var bitMessage = MessagesPDP10.CATEGORIES[m];\n                var fEnabled = !!(this.bitsMessage & bitMessage);\n                if (fCriteria !== null && fCriteria != fEnabled) continue;\n                if (sCategories) sCategories += ',';\n                if (!(++n % 10)) sCategories += \"\\n\\t\";     // jshint ignore:line\n                /*\n                 * Internally, we use \"key\" instead of \"keys\", since the latter is a method on JavasScript objects,\n                 * but externally, we allow the user to specify \"keys\".\n                 */\n                if (m == \"key\") m = \"keys\";\n                sCategories += m;\n            }\n        }\n\n        if (sCategory === undefined) {\n            this.println(\"message commands:\\n\\tm [category] [on|off]\\tturn categories on/off\");\n        }\n\n        this.println((fCriteria !== null? (fCriteria? \"messages on:  \" : \"messages off: \") : \"message categories:\\n\\t\") + (sCategories || \"none\"));\n\n        this.historyInit();     // call this just in case MessagesPDP10.INT was turned on\n    }\n\n    /**\n     * doOptions(asArgs)\n     *\n     * @this {DebuggerPDP10}\n     * @param {Array.<string>} asArgs\n     */\n    doOptions(asArgs)\n    {\n        switch (asArgs[1]) {\n\n        case \"base\":\n            if (asArgs[2]) {\n                var nBase = +asArgs[2];\n                if (nBase == 2 || nBase == 8 || nBase == 10 || nBase == 16) {\n                    this.nBase = nBase;\n                } else {\n                    this.println(\"invalid base: \" + nBase);\n                    break;\n                }\n            }\n            this.println(\"default base: \" + this.nBase);\n            break;\n\n        case \"cs\":\n            var nCycles;\n            if (asArgs[3] !== undefined) nCycles = +asArgs[3];          // warning: decimal instead of hex conversion\n            switch (asArgs[2]) {\n                case \"int\":\n                    this.cpu.nCyclesChecksumInterval = nCycles;\n                    break;\n                case \"start\":\n                    this.cpu.nCyclesChecksumStart = nCycles;\n                    break;\n                case \"stop\":\n                    this.cpu.nCyclesChecksumStop = nCycles;\n                    break;\n                default:\n                    this.println(\"unknown cs option\");\n                    return;\n            }\n            if (nCycles !== undefined) {\n                this.cpu.resetChecksum();\n            }\n            this.println(\"checksums \" + (this.cpu.flags.checksum? \"enabled\" : \"disabled\"));\n            return;\n\n        case \"sp\":\n            if (asArgs[2] !== undefined) {\n                if (!this.cpu.setSpeed(+asArgs[2])) {\n                    this.println(\"warning: using 1x multiplier, previous target not reached\");\n                }\n            }\n            this.println(\"target speed: \" + this.cpu.getSpeedTarget() + \" (\" + this.cpu.getSpeed() + \"x)\");\n            return;\n\n        default:\n            if (asArgs[1]) {\n                this.println(\"unknown option: \" + asArgs[1]);\n                return;\n            }\n            /* falls through */\n\n        case \"?\":\n            this.println(\"debugger options:\");\n            this.println(\"\\tbase #\\t\\tset default base to #\");\n            this.println(\"\\tcs int #\\tset checksum cycle interval to #\");\n            this.println(\"\\tcs start #\\tset checksum cycle start count to #\");\n            this.println(\"\\tcs stop #\\tset checksum cycle stop count to #\");\n            this.println(\"\\tsp #\\t\\tset speed multiplier to #\");\n            break;\n        }\n    }\n\n    /**\n     * doRegisters(asArgs, fInstruction)\n     *\n     * @this {DebuggerPDP10}\n     * @param {Array.<string>} [asArgs]\n     * @param {boolean} [fInstruction] (true to include the current instruction; default is true)\n     */\n    doRegisters(asArgs, fInstruction)\n    {\n        if (asArgs && asArgs[1] == '?') {\n            this.println(\"register commands:\");\n            this.println(\"\\tr\\tdump registers\");\n            this.println(\"\\trm\\tdump misc registers\");\n            this.println(\"\\trx [#]\\tset flag or register x to [#]\");\n            return;\n        }\n\n        var cpu = this.cpu;\n        var fMisc = undefined;\n        if (fInstruction == null) fInstruction = true;\n\n        if (asArgs != null && asArgs.length > 1) {\n            var sReg = asArgs[1];\n\n            if (sReg == 'm') {\n                fMisc = true;\n            }\n            else {\n                var sValue = null;\n                var i = sReg.indexOf('=');\n                if (i > 0) {\n                    sValue = sReg.substr(i + 1);\n                    sReg = sReg.substr(0, i);\n                }\n                else if (asArgs.length > 2) {\n                    sValue = asArgs[2];\n                }\n                else {\n                    this.println(\"missing value for \" + asArgs[1]);\n                    return;\n                }\n\n                var value = this.parseExpression(sValue);\n                if (value === undefined) return;\n\n                var iReg = this.getRegIndex(sReg);\n                if (iReg < 0) {\n                    this.println(\"unknown register: \" + sReg);\n                    return;\n                }\n\n                this.setRegValue(iReg, value);\n\n                this.cmp.updateDisplays();\n                this.println(\"updated registers:\");\n            }\n        }\n\n        this.println(this.getRegDump(fMisc));\n\n        if (fInstruction) {\n            this.setAddr(this.dbgAddrCode, cpu.getXC());\n            this.doUnassemble(this.toStrAddr(this.dbgAddrCode));\n        }\n    }\n\n    /**\n     * doRun(sCmd, sAddr, sOptions, fQuiet)\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} sCmd\n     * @param {string|undefined} [sAddr]\n     * @param {string} [sOptions] (the rest of the breakpoint command-line)\n     * @param {boolean} [fQuiet]\n     */\n    doRun(sCmd, sAddr, sOptions, fQuiet)\n    {\n        if (sAddr !== undefined) {\n            var dbgAddr = this.parseAddr(sAddr);\n            this.parseAddrOptions(dbgAddr, sOptions);\n            this.setTempBreakpoint(dbgAddr);\n        }\n        this.startCPU(true, fQuiet);\n    }\n\n    /**\n     * doPrint(sCmd)\n     *\n     * NOTE: If the string to print is a quoted string, then we run it through replaceRegs(), so that\n     * you can take advantage of all the special replacement options used for software interrupt logging.\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} sCmd\n     */\n    doPrint(sCmd)\n    {\n        sCmd = Str.trim(sCmd);\n        var a = sCmd.match(/^(['\"])(.*?)\\1$/);\n        if (!a) {\n            this.parseExpression(sCmd, false);\n        } else {\n            if (a[2].length > 1) {\n                this.println(this.replaceRegs(a[2]));\n            } else {\n                this.printValue(null, a[2].charCodeAt(0));\n            }\n        }\n    }\n\n    /**\n     * doStep(sCmd, sOption)\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} [sCmd] \"p\" or \"pr\"\n     * @param {string} [sOption]\n     */\n    doStep(sCmd, sOption)\n    {\n        var fCallStep = true;\n        var nRegs = (sCmd == \"p\"? 0 : (sCmd == \"pr\"? 1 : -1));\n\n        if (sOption == '?' || nRegs < 0) {\n            this.println(\"step commands:\");\n            this.println(\"\\tp\\tstep over instruction\");\n            this.println(\"\\tpr\\tstep over instruction with register update\");\n            return;\n        }\n\n        /*\n         * Set up the value for this.nStep (ie, 1 or 2) depending on whether the user wants\n         * a subsequent register dump (\"pr\") or not (\"p\").\n         */\n        var nStep = 1 + nRegs;\n\n        if (!this.nStep) {\n            var dbgAddr = this.newAddr(this.cpu.getPC());\n            var opCode = this.getWord(dbgAddr);\n\n            if (this.nStep) {\n                this.setTempBreakpoint(dbgAddr);\n                if (!this.startCPU()) {\n                    if (this.cmp) this.cmp.setFocus();\n                    this.nStep = 0;\n                }\n                /*\n                 * A successful run will ultimately call stop(), which will in turn call clearTempBreakpoint(),\n                 * which will clear nStep, so there's your assurance that nStep will be reset.  Now we may have\n                 * stopped for reasons unrelated to the temporary breakpoint, but that's OK.\n                 */\n            } else {\n                this.doTrace(nRegs? \"tr\" : \"t\");\n            }\n        } else {\n            this.println(\"step in progress\");\n        }\n    }\n\n    /**\n     * getCall(dbgAddr)\n     *\n     * Given a possible return address (typically from the stack), look for a matching CALL (or INT) that\n     * immediately precedes that address.\n     *\n     * @this {DebuggerPDP10}\n     * @param {DbgAddrPDP10} dbgAddr\n     * @return {string|null} CALL instruction at or near dbgAddr, or null if none\n     */\n    getCall(dbgAddr)\n    {\n        var sCall = null;\n        var addr = dbgAddr.addr;\n        var addrOrig = addr;\n        for (var n = 1; n <= 6 && !!addr; n++) {\n            if (n > 2) {\n                dbgAddr.addr = addr;\n                var s = this.getInstruction(dbgAddr);\n                if (s.indexOf(\"JSR\") >= 0) {\n                    /*\n                     * Verify that the length of this call, when added to the address of the call, matches\n                     * the original return address.  We do this by getting the string index of the opcode bytes,\n                     * subtracting that from the string index of the next space, and dividing that difference\n                     * by two, to yield the length of the CALL (or INT) instruction, in bytes.\n                     */\n                    var i = s.indexOf(' ');\n                    var j = s.indexOf(' ', i+1);\n                    if (addr + (j - i - 1)/2 == addrOrig) {\n                        sCall = s;\n                        break;\n                    }\n                }\n            }\n            addr -= 2;\n        }\n        dbgAddr.addr = addrOrig;\n        return sCall;\n    }\n\n    /**\n     * doStackTrace(sCmd, sAddr)\n     *\n     * Use \"k\" for a normal stack trace and \"ks\" for a stack trace with symbolic info.\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} [sCmd]\n     * @param {string} [sAddr] (not used yet)\n     */\n    doStackTrace(sCmd, sAddr)\n    {\n        if (sAddr == '?') {\n            this.println(\"stack trace commands:\");\n            this.println(\"\\tk\\tshow frame addresses\");\n            this.println(\"\\tks\\tshow symbol information\");\n            return;\n        }\n\n        var nFrames = 10, cFrames = 0;\n        var dbgAddrCall = this.newAddr();\n        var dbgAddrStack = this.newAddr(/*this.cpu.getSP()*/);\n        this.println(\"stack trace for \" + this.toStrAddr(dbgAddrStack));\n\n        while (cFrames < nFrames) {\n            var sCall = null, sCallPrev = null, cTests = 256;\n            while ((dbgAddrStack.addr >>> 0) < 0x10000) {\n                dbgAddrCall.addr = this.getWord(dbgAddrStack, 2);\n                /*\n                 * Because we're using the auto-increment feature of getWord(), and because that will automatically\n                 * wrap the offset around the end of the segment, we must also check the addr property to detect the wrap.\n                 */\n                if (dbgAddrStack.addr == null || !cTests--) break;\n                if (dbgAddrCall.addr & 0x1) continue;           // an odd address on the PDP-11 is not a valid instruction boundary\n                sCall = this.getCall(dbgAddrCall);\n                if (sCall) break;\n            }\n            /*\n             * The sCallPrev check eliminates duplicate sequential calls, which are usually (but not always)\n             * indicative of a false positive, in which case the previous call is probably bogus as well, but\n             * at least we won't duplicate that mistake.  Of course, there are always exceptions, recursion\n             * being one of them, but it's rare that we're debugging recursive code.\n             */\n            if (!sCall || sCall == sCallPrev) break;\n            var sSymbol = null;\n            if (sCmd == \"ks\") {\n                var a = sCall.match(/[0-9A-F]+$/);\n                if (a) sSymbol = this.doList(a[0]);\n            }\n            sCall = Str.pad(sCall, 50) + \"  ;\" + (sSymbol || \"stack=\" + this.toStrAddr(dbgAddrStack)); // + \" return=\" + this.toStrAddr(dbgAddrCall));\n            this.println(sCall);\n            sCallPrev = sCall;\n            cFrames++;\n        }\n        if (!cFrames) this.println(\"no return addresses found\");\n    }\n\n    /**\n     * doTrace(sCmd, sCount)\n     *\n     * The \"t\" and \"tr\" commands interpret the count as a number of instructions, and since\n     * we call the Debugger's stepCPU() for each iteration, a single instruction includes\n     * any/all prefixes; the CPU's stepCPU() treats prefixes as discrete operations.  The only\n     * difference between \"t\" and \"tr\": the former displays only the next instruction, while\n     * the latter also displays the (updated) registers.\n     *\n     * The \"tc\" command interprets the count as a number of cycles rather than instructions,\n     * allowing you to quickly execute large chunks of instructions with a single command; it\n     * doesn't display anything until the the chunk has finished.  \"tc 1\" is also a useful\n     * command in that it doesn't inhibit interrupts like \"t\" or \"tr\" does.\n     *\n     * However, generally a more useful command is \"bn\", which allows you to break after some\n     * number of instructions have been executed (as opposed to some number of cycles).\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} [sCmd] (\"t\", \"tc\", or \"tr\")\n     * @param {string} [sCount] # of instructions to step\n     */\n    doTrace(sCmd, sCount)\n    {\n        if (sCount == '?') {\n            this.println(\"trace commands:\");\n            this.println(\"\\tt  [#]\\ttrace # instructions\");\n            this.println(\"\\ttr [#]\\ttrace # instructions with register updates\");\n            this.println(\"\\ttc [#]\\ttrace # cycles\");\n            this.println(\"note: bn [#] breaks after # instructions without updates\");\n            return;\n        }\n\n        var dbg = this;\n        var fRegs = (sCmd != \"t\");\n        var nCount = this.parseValue(sCount, null, true) || 1;\n\n        /*\n         * We used to set nCycles to 1 when a count > 1 was specified, because nCycles set\n         * to 0 used to mean \"execute the next instruction without checking for interrupts\".\n         * Well, this machine's stepCPU() doesn't do that; it ALWAYS checks for interrupts,\n         * so we should leave nCycles set to 0, so that if an interrupt is dispatched, we will\n         * get to see the first instruction of the interrupt handler.\n         */\n        var nCycles = 0;    // (nCount == 1? 0 : 1);\n\n        if (sCmd == \"tc\") {\n            nCycles = nCount;\n            nCount = 1;\n        }\n        this.sCmdTracePrev = sCmd;\n\n        Web.onCountRepeat(\n            nCount,\n            function onCountStep() {\n                return dbg.setBusy(true) && dbg.stepCPU(nCycles, fRegs, false);\n            },\n            function onCountStepComplete() {\n                /*\n                 * We explicitly called stepCPU() with fUpdateDisplays set to false, because repeatedly\n                 * calling updateDisplays() can be very slow, especially if a Control Panel is present with\n                 * displayLiveRegs enabled, so once the repeat count has been exhausted, we must perform\n                 * a final updateDisplays().\n                 */\n                if (dbg.panel) dbg.panel.stop();\n                dbg.cmp.updateDisplays(-1);\n                dbg.setBusy(false);\n            }\n        );\n    }\n\n    /**\n     * doUnassemble(sAddr, sAddrEnd, nLines)\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} [sAddr]\n     * @param {string} [sAddrEnd]\n     * @param {number} [nLines]\n     */\n    doUnassemble(sAddr, sAddrEnd, nLines)\n    {\n        var dbgAddr = this.parseAddr(sAddr, this.dbgAddrCode);\n\n        if (nLines === undefined) nLines = 1;\n\n        var nBytes = 0x100;\n        if (sAddrEnd !== undefined) {\n\n            if (sAddrEnd.charAt(0) == 'l') {\n                var n = this.parseValue(sAddrEnd.substr(1));\n                if (n != null) nLines = n;\n            }\n            else {\n                var dbgAddrEnd = this.parseAddr(sAddrEnd);\n                if (dbgAddrEnd.addr < dbgAddr.addr) return;\n\n                nBytes = dbgAddrEnd.addr - dbgAddr.addr;\n                if (!DEBUG && nBytes > 0x100) {\n                    /*\n                     * Limiting the amount of disassembled code to 256 bytes in non-DEBUG builds is partly to\n                     * prevent the user from wedging the browser by dumping too many lines, but also a recognition\n                     * that, in non-DEBUG builds, this.println() keeps print output buffer truncated to 8Kb anyway.\n                     */\n                    this.println(\"range too large\");\n                    return;\n                }\n                nLines = -1;\n            }\n        }\n\n        var nPrinted = 0;\n\n        while (nBytes > 0 && nLines--) {\n\n            var nSequence = (this.isBusy(false) || this.nStep)? this.nCycles : null;\n            var sComment = (nSequence != null? \"cycles\" : null);\n            var aSymbol = this.findSymbol(dbgAddr);\n\n            var addr = dbgAddr.addr;    // we snap dbgAddr.addr *after* calling findSymbol(), which re-evaluates it\n\n            if (aSymbol[0] && nLines) {\n                if (!nPrinted && nLines || aSymbol[0].indexOf('+') < 0) {\n                    var sLabel = aSymbol[0] + ':';\n                    if (aSymbol[2]) sLabel += ' ' + aSymbol[2];\n                    this.println(sLabel);\n                }\n            }\n            if (aSymbol[3]) {\n                sComment = aSymbol[3];\n                nSequence = null;\n            }\n            this.copyAddr(this.dbgAddrAssemble, dbgAddr);\n            this.println(this.getInstruction(dbgAddr, sComment, nSequence));\n            nBytes -= dbgAddr.addr - addr;\n            nPrinted++;\n        }\n    }\n\n    /**\n     * splitArgs(sCmd, sDelim)\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} sCmd\n     * @param {string} [sDelim]\n     * @return {Array.<string>}\n     */\n    splitArgs(sCmd, sDelim = \" \")\n    {\n        var asArgs = [];\n        var chQuote = \"\";\n        var i = 0, iLast = 0;\n\n        while (i < sCmd.length) {\n            var ch = sCmd[i++];\n            if (chQuote) {\n                if (ch == chQuote) {\n                    chQuote = \"\";\n                    asArgs.push(sCmd.substr(iLast, i - iLast));\n                    iLast = i;\n                }\n                continue;\n            }\n            if (ch == '\"' || ch == \"'\") {\n                chQuote = ch;\n                continue;\n            }\n            if (sDelim.indexOf(ch) >= 0) {\n                asArgs.push(sCmd.substr(iLast, i - iLast - 1));\n                iLast = i;\n            }\n        }\n        if (iLast < i) {\n            asArgs.push(sCmd.substr(iLast, i - iLast));\n        }\n\n        asArgs[0] = asArgs[0].toLowerCase();\n        if (asArgs && asArgs.length) {\n            var s0 = asArgs[0];\n            var ch0 = s0.charAt(0);\n            for (i = 1; i < s0.length; i++) {\n                ch = s0.charAt(i);\n                if (ch0 == '?' || ch0 == 'r' || ch < 'a' || ch > 'z') {\n                    asArgs[0] = s0.substr(i);\n                    asArgs.unshift(s0.substr(0, i));\n                    break;\n                }\n            }\n        }\n        return asArgs;\n    }\n\n    /**\n     * doCommand(sCmd, fQuiet)\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} sCmd\n     * @param {boolean} [fQuiet]\n     * @return {boolean} true if command processed, false if unrecognized\n     */\n    doCommand(sCmd, fQuiet)\n    {\n        var result = true;\n\n        try {\n            if (DEBUG && sCmd == \"test\") {\n                this.doTest();\n                return true;\n            }\n            if (!sCmd.length || sCmd == \"end\") {\n                if (this.fAssemble) {\n                    this.println(\"ended assemble at \" + this.toStrAddr(this.dbgAddrAssemble));\n                    this.fAssemble = false;\n                }\n                sCmd = \"\";\n            }\n            else if (!fQuiet) {\n                this.println(DebuggerPDP10.PROMPT + sCmd);\n            }\n\n            var ch = sCmd.charAt(0);\n            if (ch == '\"' || ch == \"'\") return true;\n\n            /*\n             * Zap the previous message buffer to ensure the new command's output is not tossed out as a repeat.\n             */\n            this.sMessagePrev = null;\n\n            /*\n             * I've relaxed the !isBusy() requirement, to maximize our ability to issue Debugger commands externally.\n             */\n            if (this.isReady() /* && !this.isBusy(true) */ && sCmd.length > 0) {\n\n                if (this.fAssemble) {\n                    sCmd = \"a \" + this.toStrAddr(this.dbgAddrAssemble) + ' ' + sCmd;\n                }\n\n                var fError = false;\n                var asArgs = this.splitArgs(sCmd);\n\n                switch (asArgs[0].charAt(0)) {\n                case 'a':\n                    result = this.doAssemble(asArgs);\n                    break;\n                case 'b':\n                    this.doBreak(asArgs[0], asArgs[1], sCmd);\n                    break;\n                case 'c':\n                    this.doClear(asArgs[0]);\n                    break;\n                case 'd':\n                    if (!COMPILED && sCmd == \"debug\") {\n                        window.DEBUG = true;\n                        this.println(\"DEBUG checks on\");\n                        break;\n                    }\n                    this.doDump(asArgs);\n                    break;\n                case 'e':\n                    if (asArgs[0] == \"else\") break;\n                    this.doEdit(asArgs);\n                    break;\n                case 'g':\n                    this.doRun(asArgs[0], asArgs[1], sCmd, fQuiet);\n                    break;\n                case 'h':\n                    this.doHalt(fQuiet);\n                    break;\n                case 'i':\n                    if (asArgs[0] == \"if\") {\n                        if (!this.doIf(sCmd.substr(2), fQuiet)) {\n                            result = false;\n                        }\n                        break;\n                    }\n                    fError = true;\n                    break;\n                case 'k':\n                    this.doStackTrace(asArgs[0], asArgs[1]);\n                    break;\n                case 'l':\n                    if (asArgs[0] == \"ln\") {\n                        this.doList(asArgs[1], true);\n                        break;\n                    }\n                    fError = true;\n                    break;\n                case 'm':\n                    this.doMessages(asArgs);\n                    break;\n                case 'p':\n                    if (asArgs[0] == \"print\") {\n                        this.doPrint(sCmd.substr(5));\n                        break;\n                    }\n                    this.doStep(asArgs[0], asArgs[1]);\n                    break;\n                case 'r':\n                    if (sCmd == \"reset\") {\n                        if (this.cmp) this.cmp.reset();\n                        break;\n                    }\n                    this.doRegisters(asArgs);\n                    break;\n                case 's':\n                    this.doOptions(asArgs);\n                    break;\n                case 't':\n                    this.doTrace(asArgs[0], asArgs[1]);\n                    break;\n                case 'u':\n                    this.doUnassemble(asArgs[1], asArgs[2], 8);\n                    break;\n                case 'v':\n                    if (asArgs[0] == \"var\") {\n                        if (!this.doVar(sCmd.substr(3))) {\n                            result = false;\n                        }\n                        break;\n                    }\n                    if (asArgs[0] == \"ver\") {\n                        this.println((PDP10.APPNAME || \"PDP10\") + \" version \" + (XMLVERSION || PDP10.APPVERSION) + \" (\" + this.cpu.model + (PDP10.COMPILED? \",RELEASE\" : (PDP10.DEBUG? \",DEBUG\" : \",NODEBUG\")) + ')');\n                        this.println(Web.getUserAgent());\n                        break;\n                    }\n                    fError = true;\n                    break;\n                case '?':\n                    if (asArgs[1]) {\n                        this.doPrint(sCmd.substr(1));\n                        break;\n                    }\n                    this.doHelp();\n                    break;\n                case 'n':\n                    if (!COMPILED && sCmd == \"nodebug\") {\n                        window.DEBUG = false;\n                        this.println(\"DEBUG checks off\");\n                        break;\n                    }\n                    if (this.doInfo(asArgs)) break;\n                    /* falls through */\n                default:\n                    fError = true;\n                    break;\n                }\n                if (fError) {\n                    this.println(\"unknown command: \" + sCmd);\n                    result = false;\n                }\n            }\n        } catch(e) {\n            this.println(\"Debugger \" + (e.stack || e.message));\n            result = false;\n        }\n        return result;\n    }\n\n    /**\n     * doCommands(sCmds, fSave)\n     *\n     * This function is now written so that if any async command, such as assemble ('a'), stopped the\n     * flow of commands by returning false, it can call us from its callback handler with no arguments,\n     * and command processing should continue where it left off.\n     *\n     * @this {DebuggerPDP10}\n     * @param {string} [sCmds]\n     * @param {boolean} [fSave]\n     * @return {boolean} true if all commands processed, false if not\n     */\n    doCommands(sCmds, fSave)\n    {\n        if (sCmds != null) {\n            this.aCommands = this.parseCommand(sCmds, fSave);\n        }\n        var sCmd;\n        while (sCmd = this.aCommands.shift()) {\n            if (!this.doCommand(sCmd)) return false;\n        }\n        return true;\n    }\n\n    /**\n     * doTest()\n     *\n     * This function exercises the disassembler by performing look-ups for all possible operation codes\n     * and displaying the results.  It's not intended to be included in the compiled version of the Debugger\n     * (DEBUG only).\n     *\n     * @this {DebuggerPDP10}\n     */\n    doTest()\n    {\n        if (MAXDEBUG) {\n            var ops = {}, aOpXXX = [];\n            var op, opXXX, opCode, sOperation;\n            for (op = 0o00000; op <= 0o77774; op += 4) {\n                opCode = op * Math.pow(2, 21);\n                sOperation = this.findInstruction(opCode, false);\n                if (!sOperation) continue;\n                if (ops[sOperation] === undefined) {\n                    ops[sOperation] = op;\n                } else {\n                    ops[sOperation] &= op;\n                }\n                opXXX = op >> 6;\n                if (!aOpXXX[opXXX]) {\n                    aOpXXX[opXXX] = sOperation;\n                } else if (aOpXXX[opXXX] != sOperation) {\n                    aOpXXX[opXXX] = \"XXX\";\n                }\n            }\n            for (sOperation in ops) {\n                op = ops[sOperation];\n                this.println(Str.pad(sOperation + \":\", 8) + this.toStrWord(op * Math.pow(2, 21)));\n                //\n                // The following code leveraged the disassembler to generate opcode handlers.\n                //\n                // this.println(\"/**\");\n                // this.println(\" * op\" + sOperation + \"(\" + this.toStrWord(op * Math.pow(2, 21)) + \")\");\n                // this.println(\" *\");\n                // this.println(\" * @this {CPUStatePDP10}\");\n                // this.println(\" * @param {number} opCode\");\n                // this.println(\" */\");\n                // this.println(\"PDP10.op\" + sOperation + \" = function(opCode)\");\n                // this.println(\"{\");\n                // this.println(\"    this.opUndefined(op);\");\n                // this.println(\"};\\n\");\n            }\n            //\n            // The following code generated an opcode dispatch table.\n            //\n            // this.println(\"PDP10.aOpXXX = [\");\n            // for (opXXX = 0o000; opXXX <= 0o777; opXXX++) {\n            //     sOperation = aOpXXX[opXXX];\n            //     sOperation = sOperation? (\"    PDP10.op\" + sOperation + \",\") : \"    PDP10.opUndefined,\";\n            //     sOperation = Str.pad(sOperation, 32);\n            //     sOperation += \"// \" + Str.toOct(opXXX, 3, true) + \"xxx\";\n            //     this.println(sOperation);\n            // }\n            // this.println(\"];\");\n        }\n    }\n\n    /**\n     * DebuggerPDP10.init()\n     *\n     * This function operates on every HTML element of class \"debugger\", extracting the\n     * JSON-encoded parameters for the Debugger constructor from the element's \"data-value\"\n     * attribute, invoking the constructor to create a Debugger component, and then binding\n     * any associated HTML controls to the new component.\n     */\n    static init()\n    {\n        var aeDbg = Component.getElementsByClass(document, PDP10.APPCLASS, \"debugger\");\n        for (var iDbg = 0; iDbg < aeDbg.length; iDbg++) {\n            var eDbg = aeDbg[iDbg];\n            var parmsDbg = Component.getComponentParms(eDbg);\n            var dbg = new DebuggerPDP10(parmsDbg);\n            Component.bindComponentControls(dbg, eDbg, PDP10.APPCLASS);\n        }\n    }\n}\n\nif (DEBUGGER) {\n\n    /*\n     * NOTE: Every DebuggerPDP10 property from here to the first prototype function definition (initBus()) is\n     * considered a \"class constant\"; most of them use our \"all-caps\" convention (and all of them SHOULD, but\n     * that wouldn't help us catch any bugs).\n     *\n     * Technically, all of them should ALSO be preceded by a \"@const\" annotation, but that's a lot of work and it\n     * really clutters the code.  I wish the Closure Compiler had a way to annotate every definition with a given\n     * section with a single annotation....\n     */\n\n    DebuggerPDP10.COMMANDS = {\n        '?':        \"help/print\",\n        'a [#]':    \"assemble\",             // TODO: Implement this command someday\n        'b [#]':    \"breakpoint\",           // multiple variations (use b? to list them)\n        'c':        \"clear output\",\n        'd [#]':    \"dump memory\",          // additional syntax: d [#] [l#], where l# is a number of bytes to dump\n        'e [#]':    \"edit memory\",\n        'g [#]':    \"go [to #]\",\n        'h':        \"halt\",\n        'if':       \"eval expression\",\n        'int [#]':  \"request interrupt\",\n        'k':        \"stack trace\",\n        \"ln\":       \"list nearest symbol(s)\",\n        'm':        \"messages\",\n        'p':        \"step over\",            // other variations: pr (step and dump registers)\n        'print':    \"print expression\",\n        'r':        \"dump/set registers\",\n        'reset':    \"reset machine\",\n        's':        \"set options\",\n        't [#]':    \"trace\",                // other variations: tr (trace and dump registers)\n        'u [#]':    \"unassemble\",\n        'var':      \"assign variable\",\n        'ver':      \"print version\"\n    };\n\n    /*\n     * CPU opcode IDs\n     */\n    DebuggerPDP10.OPS = {\n        NONE:   0,\n        HLL:    1,      HLLZ:   2,      HLLO:   3,      HLLE:   4,\n        HRL:    5,      HRLZ:   6,      HRLO:   7,      HRLE:   8,\n        HRR:    9,      HRRZ:   10,     HRRO:   11,     HRRE:   12,\n        HLR:    13,     HLRZ:   14,     HLRO:   15,     HLRE:   16,\n        MOVE:   17,     MOVS:   18,     MOVN:   19,     MOVM:   20,\n        EXCH:   21,     BLT:    22,     PUSH:   23,     POP:    24,\n        LDB:    25,     DPB:    26,     IBP:    27,     ILDB:   28,\n        IDPB:   29,     SETZ:   30,     SETO:   31,     SETA:   32,\n        SETCA:  33,     SETM:   34,     SETCM:  35,     AND:    36,\n        ANDCA:  37,     ANDCM:  38,     ANDCB:  39,     IOR:    40,\n        ORCA:   41,     ORCM:   42,     ORCB:   43,     XOR:    44,\n        EQV:    45,     LSH:    46,     LSHC:   47,     ROT:    48,\n        ROTC:   49,     ADD:    50,     SUB:    51,     MUL:    52,\n        IMUL:   53,     DIV:    54,     IDIV:   55,     ASH:    56,\n        ASHC:   57,     FSC:    58,     FADR:   59,     FSBR:   60,\n        FMPR:   61,     FDVR:   62,     DFN:    63,     UFA:    64,\n        FAD:    65,     FSB:    66,     FMP:    67,     FDV:    68,\n        AOBJP:  69,     AOBJN:  70,     CAI:    71,     CAM:    72,\n        JUMP:   73,     SKIP:   74,     AOJ:    75,     AOS:    76,\n        SOJ:    77,     SOS:    78,     TR:     79,     TL:     80,\n        TD:     81,     TS:     82,     XCT:    83,     JFFO:   84,\n        JFCL:   85,     JSR:    86,     JSP:    87,     JRST:   88,\n        JSA:    89,     JRA:    90,     PUSHJ:  91,     POPJ:   92,\n        BLKI:   93,     DATAI:  94,     BLKO:   95,     DATAO:  96,\n        CONO:   97,     CONI:   98,     CONSZ:  99,     CONSO:  100,\n        UUO:    101,    JOV:    102,    JCRY0:  103,    JCRY1:  104,\n        JCRY:   105,    JFOV:   106,    HALT:   107,    JRSTF:  108,\n        JEN:    109\n    };\n\n    /*\n     * CPU opcode names, indexed by CPU opcode ordinal (above)\n     */\n    DebuggerPDP10.OPNAMES = [\n        \".WORD\",\n        \"HLL\",          \"HLLZ\",         \"HLLO\",         \"HLLE\",\n        \"HRL\",          \"HRLZ\",         \"HRLO\",         \"HRLE\",\n        \"HRR\",          \"HRRZ\",         \"HRRO\",         \"HRRE\",\n        \"HLR\",          \"HLRZ\",         \"HLRO\",         \"HLRE\",\n        \"MOVE\",         \"MOVS\",         \"MOVN\",         \"MOVM\",\n        \"EXCH\",         \"BLT\",          \"PUSH\",         \"POP\",\n        \"LDB\",          \"DPB\",          \"IBP\",          \"ILDB\",\n        \"IDPB\",         \"SETZ\",         \"SETO\",         \"SETA\",\n        \"SETCA\",        \"SETM\",         \"SETCM\",        \"AND\",\n        \"ANDCA\",        \"ANDCM\",        \"ANDCB\",        \"IOR\",\n        \"ORCA\",         \"ORCM\",         \"ORCB\",         \"XOR\",\n        \"EQV\",          \"LSH\",          \"LSHC\",         \"ROT\",\n        \"ROTC\",         \"ADD\",          \"SUB\",          \"MUL\",\n        \"IMUL\",         \"DIV\",          \"IDIV\",         \"ASH\",\n        \"ASHC\",         \"FSC\",          \"FADR\",         \"FSBR\",\n        \"FMPR\",         \"FDVR\",         \"DFN\",          \"UFA\",\n        \"FAD\",          \"FSB\",          \"FMP\",          \"FDV\",\n        \"AOBJP\",        \"AOBJN\",        \"CAI\",          \"CAM\",\n        \"JUMP\",         \"SKIP\",         \"AOJ\",          \"AOS\",\n        \"SOJ\",          \"SOS\",          \"TR\",           \"TL\",\n        \"TD\",           \"TS\",           \"XCT\",          \"JFFO\",\n        \"JFCL\",         \"JSR\",          \"JSP\",          \"JRST\",\n        \"JSA\",          \"JRA\",          \"PUSHJ\",        \"POPJ\",\n        \"BLKI\",         \"DATAI\",        \"BLKO\",         \"DATAO\",\n        \"CONO\",         \"CONI\",         \"CONSZ\",        \"CONSO\",\n        \"UUO\",          \"JOV\",          \"JCRY0\",        \"JCRY1\",\n        \"JCRY\",         \"JFOV\",         \"HALT\",         'JRSTF',\n        \"JEN\"\n    ];\n\n    DebuggerPDP10.REGS = {\n        PC:     0,\n        RA:     1,\n        EA:     2,\n        PS:     3,\n        OV:     4,                              // single-bit \"register\" representing the Overflow flag\n        C0:     5,                              // single-bit \"register\" representing the Carry 0 flag\n        C1:     6,                              // single-bit \"register\" representing the Carry 1 flag\n        BI:     7,                              // single-bit \"register\" representing the Byte Interrupt flag\n        ND:     8,                              // single-bit \"register\" representing the No Divide flag\n        PD:     9,                              // single-bit \"register\" representing the Pushdown Overflow flag\n    };\n\n    DebuggerPDP10.REGNAMES = [\n        \"PC\", \"RA\", \"EA\", \"PS\", \"OV\", \"C0\", \"C1\", \"BI\", \"ND\", \"PD\"\n    ];\n\n    /*\n     * OPTABLE is a collection of masks, and each mask refers to a collection of opcode\n     * patterns associated with that mask; the disassembler applies each mask to the opcode,\n     * and when a masked opcode matches one of the associated patterns, the corresponding\n     * instruction is considered a match.\n     */\n    DebuggerPDP10.OPTABLE = {\n        [PDP10.OPCODE.OPUUO]: {                 // 0o70000\n            0o00000: DebuggerPDP10.OPS.UUO\n        },\n        [PDP10.OPCODE.OPMASK]: {                // 0o77700\n            0o13000: DebuggerPDP10.OPS.UFA,\n            0o13100: DebuggerPDP10.OPS.DFN,\n            0o13200: DebuggerPDP10.OPS.FSC,\n            0o13300: DebuggerPDP10.OPS.IBP,\n            0o13400: DebuggerPDP10.OPS.ILDB,\n            0o13500: DebuggerPDP10.OPS.LDB,\n            0o13600: DebuggerPDP10.OPS.IDPB,\n            0o13700: DebuggerPDP10.OPS.DPB,\n            0o24000: DebuggerPDP10.OPS.ASH,\n            0o24100: DebuggerPDP10.OPS.ROT,\n            0o24200: DebuggerPDP10.OPS.LSH,\n            0o24300: DebuggerPDP10.OPS.JFFO,\n            0o24400: DebuggerPDP10.OPS.ASHC,\n            0o24500: DebuggerPDP10.OPS.ROTC,\n            0o24600: DebuggerPDP10.OPS.LSHC,\n            0o25000: DebuggerPDP10.OPS.EXCH,\n            0o25100: DebuggerPDP10.OPS.BLT,\n            0o25200: DebuggerPDP10.OPS.AOBJP,\n            0o25300: DebuggerPDP10.OPS.AOBJN,\n            0o25400: DebuggerPDP10.OPS.JRST,    // includes HALT, JRSTF, and JEN\n            0o25500: DebuggerPDP10.OPS.JFCL,    // includes JOV, JCRY0, JCRY1, JCRY, and JFOV\n            0o25600: DebuggerPDP10.OPS.XCT,\n            0o26000: DebuggerPDP10.OPS.PUSHJ,\n            0o26100: DebuggerPDP10.OPS.PUSH,\n            0o26200: DebuggerPDP10.OPS.POP,\n            0o26300: DebuggerPDP10.OPS.POPJ,\n            0o26400: DebuggerPDP10.OPS.JSR,\n            0o26500: DebuggerPDP10.OPS.JSP,\n            0o26600: DebuggerPDP10.OPS.JSA,\n            0o26700: DebuggerPDP10.OPS.JRA,\n        },\n        [PDP10.OPCODE.OPMODE]: {                // 0o77400\n            0o14000: DebuggerPDP10.OPS.FAD,\n            0o14400: DebuggerPDP10.OPS.FADR,\n            0o15000: DebuggerPDP10.OPS.FSB,\n            0o15400: DebuggerPDP10.OPS.FSBR,\n            0o16000: DebuggerPDP10.OPS.FMP,\n            0o16400: DebuggerPDP10.OPS.FMPR,\n            0o17000: DebuggerPDP10.OPS.FDV,\n            0o17400: DebuggerPDP10.OPS.FDVR,\n            0o20000: DebuggerPDP10.OPS.MOVE,\n            0o20400: DebuggerPDP10.OPS.MOVS,\n            0o21000: DebuggerPDP10.OPS.MOVN,\n            0o21400: DebuggerPDP10.OPS.MOVM,\n            0o22000: DebuggerPDP10.OPS.IMUL,\n            0o22400: DebuggerPDP10.OPS.MUL,\n            0o23000: DebuggerPDP10.OPS.IDIV,\n            0o23400: DebuggerPDP10.OPS.DIV,\n            0o27000: DebuggerPDP10.OPS.ADD,\n            0o27400: DebuggerPDP10.OPS.SUB,\n            0o40000: DebuggerPDP10.OPS.SETZ,    // MACRO alias: CLEAR\n            0o40400: DebuggerPDP10.OPS.AND,\n            0o41000: DebuggerPDP10.OPS.ANDCA,\n            0o41400: DebuggerPDP10.OPS.SETM,\n            0o42000: DebuggerPDP10.OPS.ANDCM,\n            0o42400: DebuggerPDP10.OPS.SETA,\n            0o43000: DebuggerPDP10.OPS.XOR,\n            0o43400: DebuggerPDP10.OPS.IOR,     // MACRO alias: OR\n            0o44000: DebuggerPDP10.OPS.ANDCB,\n            0o44400: DebuggerPDP10.OPS.EQV,\n            0o45000: DebuggerPDP10.OPS.SETCA,\n            0o45400: DebuggerPDP10.OPS.ORCA,\n            0o46000: DebuggerPDP10.OPS.SETCM,\n            0o46400: DebuggerPDP10.OPS.ORCM,\n            0o47000: DebuggerPDP10.OPS.ORCB,\n            0o47400: DebuggerPDP10.OPS.SETO,\n            0o50000: DebuggerPDP10.OPS.HLL,\n            0o50400: DebuggerPDP10.OPS.HRL,\n            0o51000: DebuggerPDP10.OPS.HLLZ,\n            0o51400: DebuggerPDP10.OPS.HRLZ,\n            0o52000: DebuggerPDP10.OPS.HLLO,\n            0o52400: DebuggerPDP10.OPS.HRLO,\n            0o53000: DebuggerPDP10.OPS.HLLE,\n            0o53400: DebuggerPDP10.OPS.HRLE,\n            0o54000: DebuggerPDP10.OPS.HRR,\n            0o54400: DebuggerPDP10.OPS.HLR,\n            0o55000: DebuggerPDP10.OPS.HRRZ,\n            0o55400: DebuggerPDP10.OPS.HLRZ,\n            0o56000: DebuggerPDP10.OPS.HRRO,\n            0o56400: DebuggerPDP10.OPS.HLRO,\n            0o57000: DebuggerPDP10.OPS.HRRE,\n            0o57400: DebuggerPDP10.OPS.HLRE\n        },\n        [PDP10.OPCODE.OPCOMP]: {                // 0o77000\n            0o30000: DebuggerPDP10.OPS.CAI,\n            0o31000: DebuggerPDP10.OPS.CAM,\n            0o32000: DebuggerPDP10.OPS.JUMP,\n            0o33000: DebuggerPDP10.OPS.SKIP,\n            0o34000: DebuggerPDP10.OPS.AOJ,\n            0o35000: DebuggerPDP10.OPS.AOS,\n            0o36000: DebuggerPDP10.OPS.SOJ,\n            0o37000: DebuggerPDP10.OPS.SOS,\n        },\n        [PDP10.OPCODE.OPTEST]: {                // 0o71100\n            0o60000: DebuggerPDP10.OPS.TR,\n            0o60100: DebuggerPDP10.OPS.TL,\n            0o61000: DebuggerPDP10.OPS.TD,\n            0o61100: DebuggerPDP10.OPS.TS,\n        },\n        [PDP10.OPCODE.OPIO]: {                  // 0o70034\n            0o70000: DebuggerPDP10.OPS.BLKI,\n            0o70004: DebuggerPDP10.OPS.DATAI,\n            0o70010: DebuggerPDP10.OPS.BLKO,\n            0o70014: DebuggerPDP10.OPS.DATAO,\n            0o70020: DebuggerPDP10.OPS.CONO,\n            0o70024: DebuggerPDP10.OPS.CONI,\n            0o70030: DebuggerPDP10.OPS.CONSZ,\n            0o70034: DebuggerPDP10.OPS.CONSO\n        }\n    };\n\n    DebuggerPDP10.OPMODES = [\"\", \"I\", \"M\", \"S\"];\n    DebuggerPDP10.OPCOMPS = [\"\", \"L\", \"E\", \"LE\", \"A\", \"GE\", \"N\", \"G\"];\n    DebuggerPDP10.OPTESTS = [\"N\", \"NE\", \"NA\", \"NN\", \"Z\", \"ZE\", \"ZA\", \"ZN\", \"C\", \"CE\", \"CA\", \"CN\", \"O\", \"OE\", \"OA\", \"ON\"];\n\n    /*\n     * Apparently, DEC's MACRO program permits \"JFCL xxx\" (with a single argument) as an alternate for \"JFCL 0,xxx\"\n     * (which in turn is long-hand for \"No-op\", since JFCL with 0 does nothing).\n     */\n    DebuggerPDP10.JFCL = {\n        0o00:    DebuggerPDP10.OPS.JFCL,\n        0o10:    DebuggerPDP10.OPS.JOV,\n        0o04:    DebuggerPDP10.OPS.JCRY0,\n        0o02:    DebuggerPDP10.OPS.JCRY1,\n        0o06:    DebuggerPDP10.OPS.JCRY,\n        0o01:    DebuggerPDP10.OPS.JFOV\n    };\n\n    DebuggerPDP10.JRST = {\n        0o00:    DebuggerPDP10.OPS.JRST,\n        0o04:    DebuggerPDP10.OPS.HALT,\n        0o02:    DebuggerPDP10.OPS.JRSTF,\n        0o12:    DebuggerPDP10.OPS.JEN\n    };\n\n    DebuggerPDP10.ALTOPS = [\n        DebuggerPDP10.JFCL, DebuggerPDP10.JRST\n    ];\n\n    DebuggerPDP10.HISTORY_LIMIT = DEBUG? 100000 : 1000;\n\n    DebuggerPDP10.PROMPT = \">> \";\n\n    /*\n     * Initialize every Debugger module on the page (as IF there's ever going to be more than one ;-))\n     */\n    Web.onInit(DebuggerPDP10.init);\n\n}   // endif DEBUGGER\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp10/lib/macro10.js (C) Jeff Parsons 2012-2018\n */\n\n\n/**\n * Elements of tblMacros.\n *\n * @typedef {{\n *      name:(string),\n *      nOperand:(number),\n *      aParms:(Array.<string>),\n *      aDefaults:(Array.<string>),\n *      aValues:(Array.<string>),\n *      sText:(string),\n *      nLine:(number)\n * }}\n */\nvar Mac;\n\n/**\n * Elements of tblSymbols.\n *\n * @typedef {{\n *      name:(string),\n *      value:(number),\n *      nType:(number),\n *      nLine:(number)\n * }}\n */\nvar Sym;\n\n/**\n * Elements of aLiterals.\n *\n * @typedef {{\n *      name:(string),\n *      aWords:(Array.<number>),\n *      aFixups:(Array.<string>)\n * }}\n */\nvar Lit;\n\n/**\n * Elements of stackScopes.\n *\n * @typedef {{\n *      name:(string|undefined),\n *      aWords:(Array.<number>),\n *      aFixups:(Array.<string>),\n *      nLocation:(number),\n *      nLocationScope:(number),\n *      nLine:(number)\n * }}\n */\nvar Scope;\n\n/**\n * @class Macro10\n * @property {string} sURL\n * @property {number|null} addrLoad\n * @property {string} sOptions\n * @property {DebuggerPDP10} dbg\n * @property {function(...)|undefined} done\n * @property {number} iURL\n * @property {Array.<string>} aURLs\n * @property {Array.<number>} anLines\n * @property {Array.<string>} asLines\n * @property {number|null|undefined} addrStart\n * @unrestricted\n */\nclass Macro10 {\n    /**\n     * Macro10(dbg)\n     *\n     * A \"mini\" version of DEC's MACRO-10 assembler, with just enough features to support the handful\n     * of DEC diagnostic source code files that we choose to throw at it.\n     *\n     * We rely on the calling component (dbg) to provide a variety of helper services (eg, println(),\n     * parseExpression(), etc).  This is NOT a subclass of Component, so Component services are not part\n     * of this class.\n     *\n     * @this {Macro10}\n     * @param {DebuggerPDP10} dbg (used to provide helper services to the Macro10 class)\n     */\n    constructor(dbg)\n    {\n        this.dbg = dbg;\n    }\n\n    /**\n     * init(addrLoad, sOptions, done)\n     *\n     * Initializes all instance properties.  Called by assembleFiles() and assembleString().\n     *\n     * Supported options include:\n     *\n     *      'd': leave all symbols in the debugger's variable table\n     *      'p': print the preprocessed resource(s) without assembling them\n     *      'l': print lines as they are parsed\n     *      's': treat the URL as a string and assemble it (assembleFiles() only)\n     *\n     * The done() callback is called after the resource(s) have been loaded (if necessary), parsed, and\n     * assembled.  The caller must use other methods to obtain further results (eg, getImage(), getStart()).\n     *\n     * The callback includes a non-zero error code if there was an error (and the URL):\n     *\n     *      done(nErrorCode, sURL)\n     *\n     * @this {Macro10}\n     * @param {number|null} [addrLoad] (the absolute address to assemble the code at, if any)\n     * @param {string|undefined} [sOptions] (zero or more letter codes to control the assembly process)\n     * @param {function(...)|undefined} [done]\n     */\n    init(addrLoad, sOptions, done)\n    {\n        this.addrLoad = addrLoad;\n        this.sOptions = (sOptions || \"\").toLowerCase();\n        this.done = done;\n\n        this.iURL = 0;\n        this.aURLs = [];\n\n        /**\n         * Number of lines per file.\n         *\n         * @type {Array.<number>}\n         */\n        this.anLines = [];\n\n        /**\n         * Lines from all the resources.\n         *\n         * @type {Array.<string>}\n         */\n        this.asLines = [];\n\n        if (MAXDEBUG) this.println(\"starting PCjs MACRO-10 Mini-Assembler...\");\n\n        /*\n         * Initialize all the tables and other data structures that MACRO-10 uses.\n         *\n         * The Macros (tblMacros) and Symbols (tblSymbols) tables are fairly straightforward: they are\n         * indexed by a macro or symbol name, and each element is a Mac or Sym object, respectively.\n         *\n         * We also treat REPEAT blocks and CONDITIONAL (eg, IFE) blocks like macros, except that they are\n         * anonymous, parameter-less, and immediately invoked.  REPEAT blocks are always immediately invoked\n         * (repeatedly, based on the repeat count), whereas CONDITIONAL blocks are either immediately\n         * invoked if the associated condition is true or skipped if the condition is false.\n         *\n         * Finally, we have LITERAL blocks, which are semi-anonymous (we give each one an auto-generated\n         * name based on the current location) and are automatically but not immediately invoked.  Instead,\n         * after we've finished processing all the lines in the original input file, we run through all\n         * the LITERAL blocks in tblMacros and process the associated statement(s) at that time.\n         *\n         * Macros have the name that was assigned to them, REPEAT and conditional blocks have generated names\n         * that match the pseudo-op (eg, \"?REPEAT\", \"?IFE\"), and LITERAL blocks have generated location-based\n         * names.  All generated names use a leading question mark ('?') so that they don't conflict with\n         * normal MACRO-10 symbols.\n         */\n\n        /**\n         * @type {Object.<Mac>}\n         */\n        this.tblMacros = {};\n\n        /**\n         * @type {Object.<Sym>}\n         */\n        this.tblSymbols = {};\n\n        /**\n         * @type {Array.<Lit>}\n         */\n        this.aLiterals = [];            // array of literals\n\n        /**\n         * This keeps track of symbols suffixed with '#', which are later assembled into a variable pool,\n         * following the literal pool.\n         *\n         * @type {Array.<string>}\n         */\n        this.aVariables = [];\n\n        /**\n         * @type {Array.<number>}\n         */\n        this.aWords = [];               // filled in by the various genXXX() functions\n\n        /**\n         * This sparse array is indexed by location, and each used entry contains any undefined symbols that\n         * must be evaluated to fully resolve the word at the corresponding location.  NOTE: There's no requirement\n         * that the array be sparse; we could certainly fill each unused entry with null (ie, for locations that\n         * don't require a fixup).\n         *\n         * @type {Array.<string>}\n         */\n        this.aFixups = [];\n\n        /**\n         * This array parallels aFixups, providing context (ie, line numbers) for any fixups that we want to analyze.\n         *\n         * @type {Array.<number>}\n         */\n        this.aLineRefs = [];\n\n        this.nLine = 0;\n        this.nError = 0;\n        this.nLiteral = 0;              // used to uniquely number literals\n\n        /**\n         * @type {number}\n         */\n        this.nLocation = this.addrLoad || 0;\n\n        /**\n         * @type {number}\n         */\n        this.nLocationScope = -1;\n\n        /**\n         * @type {Array.<Scope>}\n         */\n        this.stackScopes = [];\n\n        this.sOperator = null;          // the active operator, if any\n        this.nMacroDef = 0;             // the active macro definition state\n        this.sMacroDef = null;          // the active macro definition name\n        this.chMacroOpen = this.chMacroClose = '';\n\n        /*\n         * This regular expression breaks each MACRO-10 line into the following elements:\n         *\n         *      [1]: label (with trailing colon), if any\n         *      [2]: operator (eg, opcode mnemonic or pseudo-op), if any\n         *      [3]: operator/operand whitespace separator, if any\n         *      [4]: operand(s), if any\n         *      [5]: comment, if any\n         */\n        this.reLine = /^[ \\t]*([A-Z$%.?][0-9A-Z$%.]*:|)[ \\t]*([A-Z$%.][0-9A-Z$%.]*|)([ \\t]*)([^;]+|)(;?[\\s\\S]*)/i;\n\n        this.macroCall = null;          // the active macro being called, if any\n\n        /**\n         * If an ASCII/ASCIZ/SIXBIT pseudo-op is active, chASCII is set to the separator\n         * and sASCII collects the intervening character(s).\n         *\n         * @type {null|string}\n         */\n        this.chASCII = null;\n\n        /**\n         * @type {string}\n         */\n        this.sASCII = \"\";\n\n        this.addrStart = null;\n    }\n\n    /**\n     * assembleFiles(sURL, addrLoad, sOptions, done)\n     *\n     * Requests the resource(s) specified by sURL; multiple resources can be requested by separating\n     * them with semicolons.  The resources are requested and combined in the same order they are listed,\n     * and after the last resource has been received, they are assembled as a single unit.\n     *\n     * As a courtesy to the Debugger's doAssemble() function, we allow it to select between assembleFiles()\n     * and assembleString() by specifying an 's' option here, rather than having two separate code paths.\n     *\n     * @this {Macro10}\n     * @param {string} sURL (the URL(s) of the resource to be assembled)\n     * @param {number|null} [addrLoad] (the absolute address to assemble the code at, if any)\n     * @param {string|undefined} [sOptions] (zero or more letter codes to control the assembly process)\n     * @param {function(...)|undefined} [done]\n     */\n    assembleFiles(sURL, addrLoad, sOptions, done)\n    {\n        if (sOptions && sOptions.indexOf('s') >= 0) {\n            this.assembleString(sURL, addrLoad, sOptions, done);\n            return;\n        }\n\n        this.init(addrLoad, sOptions, done);\n\n        this.aURLs = sURL.split(';');\n\n        this.loadNextResource();\n    }\n\n    /**\n     * assembleString(sText, addrLoad, sOptions, done)\n     *\n     * Assembles the given text.\n     *\n     * @this {Macro10}\n     * @param {string} sText\n     * @param {number|null} [addrLoad] (the absolute address to assemble the code at, if any)\n     * @param {string|undefined} [sOptions] (zero or more letter codes to control the assembly process)\n     * @param {function(...)|undefined} [done]\n     * @return {number}\n     */\n    assembleString(sText, addrLoad, sOptions, done)\n    {\n        this.init(addrLoad, sOptions, done);\n\n        this.asLines = sText.split(/(\\r?\\n)/);\n        this.anLines.push(this.asLines.length);\n\n        this.parseResources();\n\n        if (this.done) this.done(this.nError);\n\n        return this.nError;\n    }\n\n    /**\n     * loadNextResource()\n     *\n     * @this {Macro10}\n     */\n    loadNextResource()\n    {\n        if (this.iURL == this.aURLs.length) {\n            this.parseResources();\n            if (this.done) this.done(this.nError);\n            return;\n        }\n\n        var macro10 = this;\n        var sURL = this.aURLs[this.iURL];\n\n        this.println(\"loading \" + Str.getBaseName(sURL));\n\n        /*\n         * We know that local resources ending with \".MAC\" are actually stored with a \".txt\" extension.\n         */\n        if (sURL.indexOf(':') < 0) {\n            var sExt = sURL.slice(-4).toUpperCase();\n            if (\".MAC.KLM\".indexOf(sExt) >= 0) sURL += \".txt\";\n        }\n\n        Web.getResource(sURL, null, true, function processMacro10(sFile, sResource, nErrorCode) {\n            if (nErrorCode) {\n                if (macro10.done) macro10.done(nErrorCode, sFile);\n                return;\n            }\n            var sText = sResource;\n            if (Str.endsWith(sFile, \".html\")) {\n                /*\n                 * We want to parse ONLY the text between <PRE>...</PRE> tags, and eliminate any HTML entities.\n                 */\n                sText = \"\";\n                var match, re = /<pre>([\\s\\S]*?)<\\/pre>/gi;\n                while (match = re.exec(sResource)) {\n                    var s = match[1];\n                    if (s.indexOf('&') >= 0) s = s.replace(/&lt;/gi, '<').replace(/&gt;/gi, '>').replace(/&amp;/gi, '&');\n                    sText += s;\n                }\n                match = sText.match(/&[a-z]+;/i);\n                if (match) macro10.warning(\"unrecognized HTML entity '\" + match[0] + \"'\");\n            }\n\n            /*\n             * For a file containing N lines, split() will return an array of N*2+1 entries, with every even entry\n             * containing the characters, if any, preceding a line-ending, and every odd entry (including the final\n             * entry) containing a line-ending.\n             *\n             * If, for some reason, split() doesn't do that, then we try to warn and patch things up as best we can.\n             */\n            var asLines = sText.split(/(\\r?\\n)/);\n            if (asLines.length & 1) {\n                s = asLines.pop();\n                if (s) {\n                    macro10.warning(\"unexpected line '\" + s + \"'\");\n                    asLines.push(s);\n                    asLines.push(\"\");\n                }\n            } else {\n                macro10.warning(\"unexpected number of lines (\" + asLines.length + \")\");\n            }\n\n            macro10.asLines = macro10.asLines.concat(asLines);\n            macro10.anLines[macro10.iURL] = (asLines.length >> 1);\n            macro10.iURL++;\n\n            setTimeout(function() {\n                macro10.loadNextResource();\n            }, 0);\n        });\n    }\n\n    /**\n     * getImage()\n     *\n     * Service for the Debugger to obtain the assembled data after a (hopefully) successful assembly process.\n     *\n     * @this {Macro10}\n     * @return {Array.<number>}\n     */\n    getImage()\n    {\n        return this.aWords;\n    }\n\n    /**\n     * getStart()\n     *\n     * Service for the Debugger to obtain the starting address after a (hopefully) successful assembly process.\n     *\n     * @this {Macro10}\n     * @return {number|null|undefined}\n     */\n    getStart()\n    {\n        return this.addrStart;\n    }\n\n    /**\n     * parseResources()\n     *\n     * Begin the assembly process.\n     *\n     * @this {Macro10}\n     * @return {number}\n     */\n    parseResources()\n    {\n        var macro10 = this;\n\n        /*\n         * If the \"preprocess\" option is set, then print everything without assembling.\n         */\n        if (this.sOptions.indexOf('p') >= 0) {\n            this.println(this.asLines.join(\"\"));\n            return 0;\n        }\n\n        var a = this.dbg.resetVariables();\n\n        /*\n         * Add predefined device codes\n         */\n        this.addSymbol(\"APR\", 0);       // Priority Interrupt\n        this.addSymbol(\"PI\",  4);       // Arithmetic Processor\n\n        try {\n            for (let i = 0; i < this.asLines.length; i += 2) {\n\n                this.nLine++;\n\n                /*\n                 * If the \"line\" option is set, then print all the lines as they are parsed.\n                 */\n                if (this.sOptions.indexOf('l') >= 0) {\n                    this.println(this.getLineRef() + \": \" + this.asLines[i]);\n                }\n\n                /*\n                 * Since, at this early stage, I'm not sure whether all the resources I'm interested in\n                 * assembling have had their original CR/LF line endings preserved (eg, some files may have\n                 * been converted to LF-only line endings), I'm going to skip over whatever line endings\n                 * are in the array (stored in every OTHER entry) and insert my own uniform CR/LF sequences.\n                 */\n                if (!this.parseLine(this.asLines[i] + '\\r\\n')) break;\n\n                /*\n                 * When an END statement is encountered, addrStart will change from null to either undefined\n                 * or a starting address.\n                 */\n                if (this.addrStart !== null) break;\n            }\n\n            if (this.nMacroDef) {\n                this.error(\"open block\", this.tblMacros[this.sMacroDef].nLine);\n            }\n\n            if (this.stackScopes.length) {\n                this.error(\"open scope\", this.stackScopes[0].nLine);\n            }\n\n            /*\n             * Process all literals next.\n             */\n            this.doLiterals();\n\n            /*\n             * Process all variables next.\n             */\n            this.doVariables();\n\n            /*\n             * And last but not least, perform all fixups.\n             */\n            this.aFixups.forEach(function processFixup(sValue, nLocation) {\n                let value = macro10.parseExpression(sValue, undefined, nLocation, macro10.aLineRefs[nLocation]);\n                if (value === undefined) return;\n                value += macro10.aWords[nLocation];\n                macro10.aWords[nLocation] = macro10.truncate(value, nLocation);\n            });\n\n        } catch(err) {\n            this.println(err.message);\n            this.nError = -1;\n        }\n\n        if (this.sOptions.indexOf('d') < 0) this.dbg.restoreVariables(a);\n\n        return this.nError;\n    }\n\n    /**\n     * parseLine(sLine, aParms, aValues, aDefaults)\n     *\n     * @this {Macro10}\n     * @param {string} sLine (line contents)\n     * @param {Array.<string>} [aParms]\n     * @param {Array.<string>} [aValues]\n     * @param {Array.<string>} [aDefaults]\n     * @return {boolean}\n     */\n    parseLine(sLine, aParms, aValues, aDefaults)\n    {\n        var i, matchLine;\n\n        if (this.chASCII != null) {\n            sLine = this.defASCII(sLine);\n        }\n\n        var fParse = true;\n        var sLabel, sOperator = \"\", sSeparator, sOperands, sRemainder;\n\n        while (fParse) {\n            matchLine = sLine.match(this.reLine);\n            if (!matchLine || matchLine[5] && matchLine[5].slice(0, 1) != ';') {\n                this.error(\"failed to parse line '\" + sLine + \"'\");\n                return false;\n            }\n            fParse = false;\n            sOperator = matchLine[2].toUpperCase();\n\n            /*\n             * TODO: The following kludge needs to be fixed at some point.  The goal here is to prevent any\n             * of the caller's parameters from replacing any IRP/IRPC call parameters, but the goal is actually\n             * much bigger than that, because it's not just IRP/IRPC call parameters that must be left intact,\n             * but ANY macro call parameters; IRP/IRPC macros are just easier to pick out.  Unfortunately, as\n             * the code is currently structured, we won't know if we're dealing with any macro call parameters\n             * on this line until parseMacro() is called, below.\n             */\n            if (sOperator == Macro10.PSEUDO_OP.IRP || sOperator == Macro10.PSEUDO_OP.IRPC) {\n                aParms = null;\n            }\n\n            if (aParms) {\n                for (var iParm = 0; iParm < aParms.length; iParm++) {\n                    var sParm = aParms[iParm];\n\n                    var macroDef = this.tblMacros[this.sMacroDef];\n                    if (macroDef && macroDef.aParms.indexOf(sParm) >= 0) continue;\n\n                    var sReplace = aValues[iParm] || aDefaults[iParm] || \"\";\n                    var iSearch = 0;\n                    var iLimit = sLine.length - matchLine[5].length;    // set the limit at the start of the comment, if any\n                    while (iSearch < iLimit) {\n                        var iMatch = sLine.indexOf(sParm, iSearch);\n                        if (iMatch < 0) break;\n                        iSearch = iMatch + 1;\n                        var iMatchEnd = iMatch + sParm.length;\n                        var chPre = '', chPost = '';\n                        if ((!iMatch || !this.isSymbolChar(chPre = sLine[iMatch - 1])) && (iMatchEnd >= sLine.length || !this.isSymbolChar(chPost = sLine[iMatchEnd]))) {\n                            /*\n                             * If the \"concatenation character\" (') appears before (or after) the symbol being replaced, remove it.\n                             */\n                            if (chPre == \"'\") iMatch--;\n                            if (chPost == \"'\") iMatchEnd++;\n                            sLine = sLine.substr(0, iMatch) + sReplace + sLine.substr(iMatchEnd);\n                            iSearch = iMatch + sReplace.length;\n                            fParse = true;\n                        }\n                    }\n                }\n                aParms = null;\n            }\n            if (this.nMacroDef) {\n                if (this.nMacroDef == 1) {\n                    i = sLine.indexOf(this.chMacroOpen);\n                    if (i >= 0) {\n                        this.nMacroDef++;\n                        sLine = sLine.substr(i+1);\n                    } else {\n                        this.error(\"expected \" + this.sOperator + \" definition in '\" + sLine + \"'\");\n                    }\n                }\n                if (this.nMacroDef > 1) {\n                    sLine = this.appendMacro(sLine);\n                    fParse = true;\n                }\n                if (this.nMacroDef) return true;\n            }\n        }\n\n        sLabel = matchLine[1];\n        sSeparator = matchLine[3];\n        sOperands = matchLine[4].trim();\n        sRemainder = matchLine[4] + matchLine[5];\n\n        if (sLabel) {\n            sLabel = sLabel.slice(0, -1);\n            this.addSymbol(sLabel, this.nLocation, Macro10.SYMTYPE.LABEL);\n        }\n\n        var matchOp;\n        if (sOperator && (matchOp = sOperands.match(/^([=:]+)(.*)/))) {\n            var nType = 0;\n            sLabel = sOperator;\n            sOperator = matchOp[1];\n            sOperands = matchOp[2];\n            if (sOperator == '==') {\n                nType |= Macro10.SYMTYPE.PRIVATE;\n            }\n            else if (sOperator == '=:') {\n                nType |= Macro10.SYMTYPE.INTERNAL;\n            }\n            this.addSymbol(sLabel, sOperands, nType);\n            sOperator = sOperands = \"\";\n        }\n\n        if (!sOperator && !sOperands) return true;\n\n        this.sOperator = sOperator;\n\n        /*\n         * Check the operands for a literal.  If the line contains and/or ends with a literal\n         * we record it and replace it with an internal symbol.  We assume only one literal per line,\n         * especially since they can be open-ended (ie, continue for multiple lines).\n         */\n        var sLiteral = this.getLiteral(sOperands);\n        if (sLiteral) {\n            sOperands = sOperands.replace(sLiteral, this.defMacro(Macro10.PSEUDO_OP.LITERAL, this.getLiteral(sRemainder)));\n            if (!sSeparator) sSeparator = \"\\t\";\n        }\n\n        /*\n         * Check the operands for any reserved symbols (ie, symbols with a trailing '#', such as \"USER#\").\n         */\n        var sSymbol;\n        while (sSymbol = this.getReserved(sOperands)) {\n            sOperands = sOperands.replace(sSymbol, sSymbol.slice(0, -1));\n        }\n\n        if (!this.parseMacro(sOperator, sOperands)) {\n\n            switch (sOperator) {\n            case Macro10.PSEUDO_OP.ASCII:\n            case Macro10.PSEUDO_OP.ASCIZ:\n            case Macro10.PSEUDO_OP.SIXBIT:\n                this.defASCII(sRemainder);\n                break;\n\n            case Macro10.PSEUDO_OP.BLOCK:\n                this.defBLOCK(sOperands);\n                break;\n\n            case Macro10.PSEUDO_OP.BYTE:\n                this.defBYTE(sOperands);\n                break;\n\n            case Macro10.PSEUDO_OP.END:\n                this.defEND(sOperands);\n                break;\n\n            case Macro10.PSEUDO_OP.EXP:\n                this.defWord(sOperands);\n                break;\n\n            case Macro10.PSEUDO_OP.LIT:\n                this.doLiterals();\n                break;\n\n            case Macro10.PSEUDO_OP.LOC:\n                this.defLocation(sOperands);\n                break;\n\n            case Macro10.PSEUDO_OP.VAR:\n                this.doVariables();\n                break;\n\n            case Macro10.PSEUDO_OP.XWD:\n                this.defXWD(sOperands);\n                break;\n\n            case Macro10.PSEUDO_OP.DEFINE:\n            case Macro10.PSEUDO_OP.IF1:\n            case Macro10.PSEUDO_OP.IFDEF:\n            case Macro10.PSEUDO_OP.IFDIF:\n            case Macro10.PSEUDO_OP.IFE:\n            case Macro10.PSEUDO_OP.IFG:\n            case Macro10.PSEUDO_OP.IFGE:\n            case Macro10.PSEUDO_OP.IFIDN:\n            case Macro10.PSEUDO_OP.IFL:\n            case Macro10.PSEUDO_OP.IFLE:\n            case Macro10.PSEUDO_OP.IFN:\n            case Macro10.PSEUDO_OP.IFNDEF:\n            case Macro10.PSEUDO_OP.IRP:\n            case Macro10.PSEUDO_OP.IRPC:\n            case Macro10.PSEUDO_OP.OPDEF:\n            case Macro10.PSEUDO_OP.REPEAT:\n                this.defMacro(sOperator, sRemainder);\n                break;\n\n            case Macro10.PSEUDO_OP.PURGE:\n                this.delSymbols(sOperands);\n                break;\n\n            case Macro10.PSEUDO_OP.LALL:    // TODO\n            case Macro10.PSEUDO_OP.LIST:    // TODO\n            case Macro10.PSEUDO_OP.NOSYM:   // TODO\n            case Macro10.PSEUDO_OP.PAGE:    // TODO\n            case Macro10.PSEUDO_OP.SUBTTL:  // TODO\n            case Macro10.PSEUDO_OP.TITLE:   // TODO\n            case Macro10.PSEUDO_OP.XALL:    // TODO\n            case Macro10.PSEUDO_OP.XLIST:   // TODO\n                break;\n\n            default:\n                this.defWord(sOperator, sSeparator, sOperands);\n                break;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * parseLiteral(name, sText)\n     *\n     * This is like parseText() except that we set up a new scope, including new aWords and aFixups arrays.\n     *\n     * @this {Macro10}\n     * @param {string} name\n     * @param {string} sText\n     */\n    parseLiteral(name, sText)\n    {\n        this.pushScope(name);\n        this.parseText(sText);\n        this.popScope();\n    }\n\n    /**\n     * parseMacro(name, sOperands)\n     *\n     * For OPDEF macros, the operands are opcode values rather than conventional macro parameter values.\n     * As the MACRO-10 manual explains:\n     *\n     *      Defines the symbol as an operator equivalent to expression, giving the symbol a fullword value.\n     *      When the operator is later used with operands, the accumulator fields are added, the indirect bits\n     *      are ORed, the memory addresses are added, and the index register addresses are added.\n     *\n     *      EXAMPLE:    OPDEF CAL [MOVE 1,@SYM(2)]\n     *                  CAL 1,BOL(2)\n     *\n     *      RESULT:     MOVE 2,@SYM+BOL(4)\n     *\n     * The easiest thing to do is parse the OPDEF text, allowing it to generate its default \"fullword value\",\n     * then parse the operands in their own scope, extract the bits generated from the operands, and merge them\n     * into the generated OPDEF value.\n     *\n     * @this {Macro10}\n     * @param {string} name\n     * @param {string} [sOperands]\n     * @return {boolean}\n     */\n    parseMacro(name, sOperands)\n    {\n        var macro = this.tblMacros[name];\n        if (!macro) return false;\n\n        if (sOperands != null) {\n            /*\n             * If this is an OPDEF, then a two-step process is required: generate the OPDEF's value, then parse\n             * the operands and merge their bits with the OPDEF's bits.\n             */\n            if (macro.nOperand == Macro10.MACRO_OP.OPDEF) {\n\n                var nLocation = this.nLocation;\n                this.parseText(macro.sText);\n                if (nLocation < this.nLocation) {\n\n                    /*\n                     * An OPDEF invocation *may* have operands, but it's not required to.\n                     */\n                    if (!sOperands) return true;\n\n                    this.pushScope();\n                    this.parseText(sOperands);\n                    var w = this.aWords[0];\n                    var sFixup = this.aFixups[0];\n                    this.popScope();\n                    if (w !== undefined) {\n                        this.aWords[nLocation] += (w & (PDP10.OPCODE.A_FIELD | PDP10.OPCODE.X_FIELD | PDP10.OPCODE.Y_FIELD));\n                        /*\n                         * We can't \"OR\" (|=) the I_FIELD bit into the target word, because it's a 36-bit value and bitwise\n                         * operators truncate to 32 bits, so we'll use addition, trusting that the field was initially zero.\n                         */\n\n                        this.aWords[nLocation] += (w & PDP10.OPCODE.I_FIELD);\n                        if (sFixup) {\n                            if (!this.aFixups[nLocation]) {\n                                this.aFixups[nLocation] = sFixup;\n                            } else {\n                                this.aFixups[nLocation] += '+' + sFixup;\n                            }\n                        }\n                        return true;\n                    }\n                }\n\n                /*\n                 * Either the OPDEF didn't generate any data OR the OPDEF's operands failed to evaluate.\n                 */\n                this.error(\"OPDEF '\" + name + \"' (\" + sOperands + \") failed\");\n                return false;\n            }\n            var macroPrev = this.macroCall;\n            this.macroCall = macro;\n            macro.aValues = this.getValues(sOperands, true);\n            this.parseText(macro.sText, macro.aParms, macro.aValues, macro.aDefaults);\n            /*\n             * WARNING: Our simplistic approach to macro expansion and processing means that recursive macros\n             * (such as the SHIFT macro in /apps/pdp10/tests/macro10/TEXT.MAC) could blow the stack.  Nothing bad\n             * should happen (other than a JavaScript stack limit exception aborting the assembly), but it begs\n             * the question: did MACRO-10 perform any tail recursion optimizations or other tricks to prevent macros\n             * from gobbling stack, or could they blow MACRO-10's stack just as easily?\n             */\n            this.macroCall = macroPrev;\n            return true;\n        }\n\n        if (name[0] != '?') return false;\n\n        var sOperator = name.substr(1);\n\n        switch(sOperator) {\n        case Macro10.PSEUDO_OP.IFE:\n        case Macro10.PSEUDO_OP.IFDIF:\n        case Macro10.PSEUDO_OP.IFNDEF:\n            if (!macro.nOperand) {\n                this.parseText(macro.sText);\n            }\n            break;\n\n        case Macro10.PSEUDO_OP.IFG:\n            if (macro.nOperand > 0) {\n                this.parseText(macro.sText);\n            }\n            break;\n\n        case Macro10.PSEUDO_OP.IFGE:\n            if (macro.nOperand >= 0) {\n                this.parseText(macro.sText);\n            }\n            break;\n\n        case Macro10.PSEUDO_OP.IFL:\n            if (macro.nOperand < 0) {\n                this.parseText(macro.sText);\n            }\n            break;\n\n        case Macro10.PSEUDO_OP.IFLE:\n            if (macro.nOperand <= 0) {\n                this.parseText(macro.sText);\n            }\n            break;\n\n        case Macro10.PSEUDO_OP.IF1:\n        case Macro10.PSEUDO_OP.IFN:\n        case Macro10.PSEUDO_OP.IFDEF:\n        case Macro10.PSEUDO_OP.IFIDN:\n            if (macro.nOperand) {\n                this.parseText(macro.sText);\n            }\n            break;\n\n        case Macro10.PSEUDO_OP.IRP:\n        case Macro10.PSEUDO_OP.IRPC:\n            for (let i = 0; i < macro.aValues.length; i++) {\n                this.parseText(macro.sText, macro.aParms, [macro.aValues[i]], []);\n            }\n            break;\n\n        case Macro10.PSEUDO_OP.REPEAT:\n            while (macro.nOperand-- > 0) {\n                this.parseText(macro.sText);\n            }\n            break;\n\n        default:\n            this.parseLiteral(name, macro.sText);\n            break;\n        }\n        return true;\n    }\n\n    /**\n     * parseText(sText, aParms, aValues, aDefaults)\n     *\n     * @this {Macro10}\n     * @param {string} sText\n     * @param {Array.<string>} [aParms]\n     * @param {Array.<string>} [aValues]\n     * @param {Array.<string>} [aDefaults]\n     */\n    parseText(sText, aParms, aValues, aDefaults)\n    {\n        /*\n         * Unlike the caller of parseResources(), we don't split the text using a capture group,\n         * so all line separators are tossed, and just like parseResources(), we always include a\n         * uniform CR/LF sequence at the end of each line.\n         *\n         * TODO: Consider whether callers should always store their text snippets as line arrays, too,\n         * to avoid this re-splitting.\n         */\n        var asLines = sText.split(/\\r?\\n/);\n        for (var iLine = 0; iLine < asLines.length; iLine++) {\n            var sLine = asLines[iLine] + '\\r\\n';\n            if (!this.parseLine(sLine, aParms, aValues, aDefaults)) break;\n        }\n    }\n\n    /**\n     * pushScope(name)\n     *\n     * @this {Macro10}\n     * @param {string} [name] (must be defined for literals only)\n     */\n    pushScope(name)\n    {\n        this.stackScopes.push({\n            name,\n            aWords: this.aWords,\n            aFixups: this.aFixups,\n            nLocation: this.nLocation,\n            nLocationScope: this.nLocationScope,\n            nLine: this.nLine\n        });\n        this.aWords = [];\n        this.aFixups = [];\n        if (this.nLocationScope < 0) this.nLocationScope = this.nLocation;\n        this.nLocation = 0;\n    }\n\n    /**\n     * popScope()\n     *\n     * @this {Macro10}\n     */\n    popScope()\n    {\n        if (!this.stackScopes.length) {\n            this.error(\"scope nesting error\");\n            return;\n        }\n        var name = this.stackScopes[this.stackScopes.length - 1].name;\n        if (name) this.aLiterals.push({name, aWords: this.aWords, aFixups: this.aFixups});\n        var scope = this.stackScopes.pop();\n        this.aWords = scope.aWords;\n        this.aFixups = scope.aFixups;\n        this.nLocation = scope.nLocation;\n        this.nLocationScope = scope.nLocationScope;\n        if (!this.stackScopes.length && this.nLocationScope != -1) {\n            this.error(\"scope restore error\");\n        }\n    }\n\n    /**\n     * getExpression(sOperands, sDelim)\n     *\n     * TODO: Add support for IFIDN, IFDIF, IFB and IFNB: if the first non-blank, non-tab character is\n     * a character other than '<', then that becomes the delimiter, allowing angle brackets in the string.\n     *\n     * @this {Macro10}\n     * @param {string} sOperands\n     * @param {string} [sDelim] (eg, comma, closing parenthesis)\n     * @return {string|null} (if the operands begin with an expression, return it)\n     */\n    getExpression(sOperands, sDelim = \",\")\n    {\n        var i = 0;\n        var fQuotes = false;\n        var sOperand = null;\n        var cNesting = 0;\n        while (i < sOperands.length) {\n            var ch = sOperands[i++];\n            if (ch == '\"') {\n                fQuotes = !fQuotes;\n                continue;\n            }\n            if (fQuotes) continue;\n            if (!cNesting && sDelim.indexOf(ch) >= 0) {\n                i--;\n                break;\n            }\n            if (ch == '<') {\n                cNesting++;\n            } else if (ch == '>') {\n                if (--cNesting < 0) {\n                    this.error(\"missing bracket(s) in '\" + sOperands + \"'\");\n                    break;\n                }\n            }\n        }\n        if (!cNesting) {\n            sOperand = sOperands.substr(0, i);\n        }\n        else if (cNesting > 0) {\n            this.error(\"extra bracket(s) in '\" + sOperands + \"'\");\n        }\n        return sOperand;\n    }\n\n    /**\n     * parseExpression(sExp, aUndefined, nLocation, nLine)\n     *\n     * This is a wrapper around the Debugger's parseExpression() function to take care of some\n     * additional requirements we have, such as interpreting a period as the current location and\n     * interpreting two expressions separated by two commas as the left and right 18-bit halves\n     * of a 36-bit value.\n     *\n     * @this {Macro10}\n     * @param {string} sExp\n     * @param {Array} [aUndefined]\n     * @param {number|undefined} [nLocation]\n     * @param {number|undefined} [nLine]\n     * @return {number|undefined}\n     */\n    parseExpression(sExp, aUndefined, nLocation, nLine)\n    {\n        var result = -1;\n\n        if (nLocation === undefined) {\n            nLocation = (this.nLocationScope >= 0? this.nLocationScope : this.nLocation);\n        }\n\n        /*\n         * The SIXBIT (and presumably ASCII; not sure about ASCIZ) pseudo-ops can also be used in expressions\n         * (or at least assignments), so we check for those in the given expression and convert them to quoted\n         * sequences that the Debugger's parseExpression() understands.\n         */\n        var sEval = sExp.replace(/SIXBIT\\s*(\\S)(.*?)\\1/g, \"'$2'\").replace(/ASCII\\s*(\\S)(.*?)\\1/g, '\"$2\"');\n\n        /*\n         * If this is NOT a first-pass call, then let's not waste time calling parseInstruction(); not only\n         * may it generate redundant error messages, but it shouldn't be necessary, because we should be down\n         * to fixup expressions.\n         */\n        if (aUndefined) {\n            var match;\n            var sOperator = \"\";\n            var sOperands = sEval;\n            if (match = sEval.match(/^([^\\s]+)\\s*(.*?)\\s*$/)) {\n                sOperator = match[1];\n                sOperands = match[2];\n            }\n            result = this.dbg.parseInstruction(sOperator, sOperands, nLocation, aUndefined);\n        }\n\n        if (result < 0) {\n            /*\n             * Check for the \"period\" syntax that MACRO-10 uses to represent the value of the current location.\n             * The Debugger's parseInstruction() method understands that syntax, but its parseExpression() method\n             * does not.\n             *\n             * Note that the Debugger's parseInstruction() replaces any period not PRECEDED by a decimal\n             * digit with the current address, because our Debuggers' only other interpretation of a period\n             * is as the suffix of a decimal integer, whereas MACRO-10's only other interpretation of a period\n             * is (I think) as the decimal point within a floating-point number, so here we only replace periods\n             * that are not FOLLOWED by a decimal digit.\n             */\n            sEval = sEval.replace(/\\.([^0-9]|$)/g, this.dbg.toStrBase(nLocation, -1) + \"$1\");\n            result = this.dbg.parseExpression(sEval, aUndefined);\n            if (result === undefined) {\n                this.error(\"unable to parse expression '\" + sExp + \"'\", nLine);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * getLiteral(sOperands)\n     *\n     * Check the operands for a literal (ie, an expression starting with a square bracket).\n     *\n     * @this {Macro10}\n     * @param {string} sOperands\n     * @return {string} (if the operands contain a literal, return it)\n     */\n    getLiteral(sOperands)\n    {\n        var cNesting = 0;\n        var sLiteral = \"\";\n        var i = 0, iBegin = -1, iEnd = sOperands.length;\n        while (i < sOperands.length) {\n            var ch = sOperands[i];\n            if (ch == ';') break;\n            if (ch == '[') {\n                if (!cNesting++) iBegin = i;\n            }\n            i++;\n            if (ch == ']' && --cNesting <= 0) {\n                iEnd = i;\n                break;\n            }\n        }\n        if (cNesting < 0) {\n            this.error(\"missing bracket(s) in '\" + sOperands + \"'\");\n        }\n        if (iBegin >= 0) {\n            sLiteral = sOperands.substr(iBegin, iEnd - iBegin);\n        }\n        return sLiteral;\n    }\n\n    /**\n     * getDefaults(aParms)\n     *\n     * Check the given array of macro parameters for default values, remove them, and return them in a parallel array.\n     *\n     * @this {Macro10}\n     * @param {Array.<string>} aParms\n     * @return {Array.<string>}\n     */\n    getDefaults(aParms)\n    {\n        var aDefaults = [];\n        for (var i = 0; i < aParms.length; i++) {\n            var j = aParms[i].indexOf('<');\n            if (j >= 0) {\n                var k = aParms[i].lastIndexOf('>');\n                if (k < 0) k = aParms[i].length;\n                aDefaults[i] = aParms[i].substr(j, k - j);\n                aParms[i] = aParms[i].substr(0, j);\n            }\n        }\n        return aDefaults;\n    }\n\n    /**\n     * getLineRef(nLine)\n     *\n     * @this {Macro10}\n     * @param {number|undefined} [nLine]\n     * @return {string}\n     */\n    getLineRef(nLine = this.nLine)\n    {\n        var iURL = 0;\n        while (nLine > this.anLines[iURL]) {\n            nLine -= this.anLines[iURL];\n            if (iURL < this.aURLs.length - 1) {\n                iURL++;\n            } else {\n                break;\n            }\n        }\n        return Str.getBaseName(this.aURLs[iURL] + \" line \" + nLine);\n    }\n\n    /**\n     * getReserved(sOperands)\n     *\n     * Check the operands for any reserved symbols (ie, symbols with a trailing '#', such as \"USER#\").\n     *\n     * @this {Macro10}\n     * @param {string} sOperands\n     * @return {string|null} (if the operands contain a reserved symbol, return it)\n     */\n    getReserved(sOperands)\n    {\n        var match, sReserved = null;\n        if (match = sOperands.match(/([A-Z$%.][0-9A-Z$%.]*)#/i)) {\n            sReserved = match[0];\n            var sLabel = match[1];\n            var name = '?' + sLabel;\n            /*\n             * We now allow reserved symbols to reused (which would make sense if they appeared in a macro).\n             */\n            if (this.tblMacros[name] === undefined) {\n                var aParms, aDefaults, aValues;\n                aParms = aDefaults = aValues = [];\n                this.tblMacros[name] = {\n                    name: name,\n                    nOperand: Macro10.MACRO_OP.RESERVED,\n                    aParms,\n                    aDefaults,\n                    aValues,\n                    sText: sLabel + \": 0\",\n                    nLine: this.nLine\n                };\n                this.aVariables.push(name);\n            }\n        }\n        return sReserved;\n    }\n\n    /**\n     * getString(sValue, nConversion)\n     *\n     * Converts the given expression string (sValue) to one of the following, based on the conversion code (nConversion):\n     *\n     *      0: numeric string (default)\n     *      1: SIXBIT string\n     *      2: ASCII string\n     *\n     * If the expression cannot be evaluated, or if the requested conversion isn't recognized, the original value is returned.\n     *\n     * @this {Macro10}\n     * @param {string} sValue\n     * @param {number} [nConversion]\n     * @return {string}\n     */\n    getString(sValue, nConversion = 0)\n    {\n        var c, s;\n        var value = this.parseExpression(sValue);\n        if (value !== undefined) {\n            var cchMax = 5;\n            switch(nConversion) {\n            case 0:\n                sValue = this.dbg.toStrBase(value, -1);\n                break;\n            case 6:\n                cchMax++;\n                /* falls through */\n            case 7:\n                s = \"\";\n                while (value && cchMax--) {\n                    c = value & (Math.pow(2, nConversion) - 1);\n                    s = String.fromCharCode(c + (nConversion == 6? 0x20 : 0)) + s;\n                    value = Math.trunc(value / Math.pow(2, nConversion));\n                }\n                break;\n            }\n        }\n        return sValue;\n    }\n\n    /**\n     * getSymbol(sOperands)\n     *\n     * Check the operands for a symbol.  TODO: Use this method?\n     *\n     * @this {Macro10}\n     * @param {string} sOperands\n     * @return {string|null} (if the operands contain a symbol, return it)\n     */\n    getSymbol(sOperands)\n    {\n        var match = sOperands.match(/([A-Z$%.][0-9A-Z$%.]*)/i);\n        return match && match[1] || null;\n    }\n\n    /**\n     * getValues(sOperands, fParens)\n     *\n     * @this {Macro10}\n     * @param {string} sOperands\n     * @param {boolean} [fParens] (true to strip any parens from around the entire operands)\n     * @return {Array.<string>}\n     */\n    getValues(sOperands, fParens)\n    {\n        var aValues = [];\n        if (fParens) sOperands = sOperands.replace(/^\\(?(.*?)\\)?$/, \"$1\");\n        while (sOperands) {\n            sOperands = sOperands.trim();\n            var sOperand = this.getExpression(sOperands);\n            if (!sOperand) break;\n            var sValue = sOperand;\n            if (sOperand[0] == '\\\\') {\n                var cchPrefix = 1;\n                var nConversion = 0;\n                if (sOperand[1] == \"'\") {\n                    cchPrefix++;\n                    nConversion = 6;\n                } else if (sOperand[1] == '\"') {\n                    cchPrefix++;\n                    nConversion = 7;\n                }\n                sValue = this.getString(sOperand.substr(cchPrefix), nConversion);\n            }\n            aValues.push(sValue);\n            sOperands = sOperands.substr(sOperand.length + 1);\n        }\n        return aValues;\n    }\n\n    /**\n     * isDefined(sName)\n     *\n     * @this {Macro10}\n     * @param {string} sName\n     * @return {boolean}\n     */\n    isDefined(sName)\n    {\n        return this.isMacro(sName) || this.isSymbol(sName) || this.dbg.isVariable(sName);\n    }\n\n    /**\n     * isMacro(sName)\n     *\n     * @this {Macro10}\n     * @param {string} sName\n     * @return {boolean}\n     */\n    isMacro(sName)\n    {\n        return this.tblMacros[sName] !== undefined;\n    }\n\n    /**\n     * isSymbol(sName)\n     *\n     * @this {Macro10}\n     * @param {string} sName\n     * @return {boolean}\n     */\n    isSymbol(sName)\n    {\n        return this.tblSymbols[sName] !== undefined;\n    }\n\n    /**\n     * isSymbolChar(ch)\n     *\n     * @this {Macro10}\n     * @param {string} ch\n     * @return {boolean}\n     */\n    isSymbolChar(ch)\n    {\n        return !!ch.match(/[0-9A-Z$%.]/i);\n    }\n\n    /**\n     * defASCII(sOperands)\n     *\n     * @this {Macro10}\n     * @param {string} sOperands\n     * @return {string} (returns whatever portion of the string was not part of an ASCII pseudo-op)\n     */\n    defASCII(sOperands)\n    {\n        var sRemain = sOperands;\n        if (this.chASCII == null) {\n            this.chASCII = this.sASCII = \"\";\n            if (sOperands) {\n                this.chASCII = sOperands[0];\n                sRemain = sOperands = sOperands.substr(1);\n            }\n        }\n        if (this.chASCII) {\n            var i = sOperands.indexOf(this.chASCII);\n            if (i < 0) {\n                sRemain = \"\";\n            } else {\n                sRemain = sOperands.substr(i + 1);\n                sOperands = sOperands.substr(0, i);\n                this.chASCII = null;\n            }\n            this.sASCII += sOperands;\n        }\n        if (this.chASCII == null) {\n            this.genASCII();\n        }\n        return sRemain;\n    }\n\n    /**\n     * defMacro(sOperator, sOperands)\n     *\n     * If sOperator is DEFINE (or OPDEF), then a macro definition is expected.  If it's REPEAT, then we're\n     * starting a REPEAT block instead.\n     *\n     * REPEAT blocks piggy-back on this code because they're essentially anonymous immediately-invoked macros;\n     * we use an illegal MACRO-10 symbol ('?REPEAT') to name the anonymous macro while it's being defined, and the\n     * macro's nOperand field will contain the repeat count.\n     *\n     * The piggy-backing continues with other pseudo-ops like IFE, which again contain an anonymous block of text\n     * that is immediately invoked if the criteria associated with the expression stored in the nOperand field is\n     * satisfied.  That satisfaction occurs (or doesn't occur) when parseMacro() is called, once the macro has\n     * been fully defined.\n     *\n     * @this {Macro10}\n     * @param {string} sOperator\n     * @param {string} sOperands\n     * @return {string}\n     */\n    defMacro(sOperator, sOperands)\n    {\n        var i, match, name, nOperand, aParms, aDefaults, aValues, iMatch;\n\n        this.chMacroOpen = '<';\n        this.chMacroClose = '>';\n        aParms = aDefaults = aValues = [];\n\n        if (sOperator == Macro10.PSEUDO_OP.DEFINE) {\n            /*\n             * This is a DEFINE (macro) block.  At present, this requires that all\n             * (parenthesized) parameters exist on the same line, but the (angle-bracketed)\n             * definition can continue on for multiple lines.\n             */\n            match = sOperands.match(/([A-Z$%.][0-9A-Z$%.]*)\\s*(\\([^)]*\\)|)\\s*,?\\s*(<|)([\\s\\S]*)/i);\n            if (!match) {\n                this.error(\"unrecognized \" + sOperator + \" in '\" + sOperands + \"'\");\n                return sOperands;\n            }\n            name = match[1];\n            /*\n             * If this macro has defined parameters, parse them (and any defaults) now.\n             */\n            if (match[2] && match[2] != ',') {\n                aParms = this.getValues(match[2], true);\n                aDefaults = this.getDefaults(aParms);\n            }\n            nOperand = Macro10.MACRO_OP.DEFINE;\n            iMatch = 3;\n        }\n        else if (sOperator == Macro10.PSEUDO_OP.OPDEF) {\n            /*\n             * This is a OPDEF block.  Unlike DEFINE blocks, I'm assuming that the\n             * (square-bracketed) definition begins on the same line, but I'm not requiring\n             * it to end on the same line (I'm not sure that MACRO-10 allowed multi-line\n             * OPDEFs, but it doesn't matter to us).\n             */\n            this.chMacroOpen = '[';\n            this.chMacroClose = ']';\n            match = sOperands.match(/([A-Z$%.][0-9A-Z$%.]*)\\s*(\\[)([\\s\\S]*)/i);\n            if (!match) {\n                this.error(\"unrecognized \" + sOperator + \" in '\" + sOperands + \"'\");\n                return sOperands;\n            }\n            name = match[1];\n            nOperand = Macro10.MACRO_OP.OPDEF;\n            iMatch = 2;\n        }\n        else if (sOperator == Macro10.PSEUDO_OP.LITERAL) {\n            /*\n             * This is a LITERAL block.\n             */\n            this.chMacroOpen = '[';\n            this.chMacroClose = ']';\n            name = '?' + Str.toDec(++this.nLiteral, 5);\n            if (this.tblMacros[name] !== undefined) {\n                this.error(\"literal symbol '\" + name + \"' redefined\");\n            }\n            match = [sOperands[0], sOperands.substr(1)];\n            nOperand = Macro10.MACRO_OP.LITERAL;\n            iMatch = 0;\n        }\n        else if (sOperator == Macro10.PSEUDO_OP.IRP || sOperator == Macro10.PSEUDO_OP.IRPC) {\n            /*\n             * IRP (and IRPC) blocks are very similar to DEFINE blocks, but they define exactly ONE macro parameter\n             * with NO parentheses (whereas regular macros always define their parameters, if any, WITH parentheses),\n             * and then the IRP (or IRPC) block is immediately invoked with the corresponding value from the\n             * enclosing macro.\n             */\n            if (!this.macroCall) {\n                this.error(sOperator + \" outside of macro\");\n            }\n            match = sOperands.match(/([A-Z$%.][0-9A-Z$%.]*)\\s*,\\s*(<|)([\\s\\S]*)/i);\n            if (!match) {\n                this.error(\"unrecognized \" + sOperator + \" operands '\" + sOperands + \"'\");\n                return sOperands;\n            }\n            for (i = 0; i < this.macroCall.aParms.length; i++) {\n                if (match[1] == this.macroCall.aParms[i]) break;\n            }\n            if (i == this.macroCall.aParms.length) {\n                this.error(\"invalid \" + sOperator + \" parameter '\" + match[1] + \"'\");\n                return sOperands;\n            }\n            name = '?' + sOperator;\n            aParms = [match[1]];\n            if (sOperator == Macro10.PSEUDO_OP.IRPC) {\n                aValues = this.macroCall.aValues[i].split(\"\");\n            } else {\n                aValues = this.getValues(this.macroCall.aValues[i]);\n            }\n            nOperand = aValues.length;\n            iMatch = 2;\n        }\n        else {\n            /*\n             * This must be a REPEAT or CONDITIONAL block.\n             */\n            if (sOperator == Macro10.PSEUDO_OP.IF1) {\n                nOperand = 1;\n                if (sOperands[0] == ',') sOperands = sOperands.substr(1).trim();\n            }\n            else {\n                var sOperand = this.getExpression(sOperands);\n                if (!sOperand) {\n                    this.error(\"missing \" + sOperator + \" expression '\" + sOperands + \"'\");\n                    return sOperands;\n                }\n                sOperands = sOperands.substr(sOperand.length + 1);\n                sOperand = sOperand.trim();\n                if (sOperator == Macro10.PSEUDO_OP.IFDIF || sOperator == Macro10.PSEUDO_OP.IFIDN) {\n                    var sOperand2 = this.getExpression(sOperands);\n                    if (!sOperand2) {\n                        this.error(\"missing second \" + sOperator + \" expression '\" + sOperands + \"'\");\n                        return sOperands;\n                    }\n                    sOperands = sOperands.substr(sOperand2.length + 1);\n                    sOperand2 = sOperand2.trim();\n                    nOperand = (sOperand == sOperand2)? 1 : 0;\n                }\n                if (sOperator == Macro10.PSEUDO_OP.IFDEF || sOperator == Macro10.PSEUDO_OP.IFNDEF) {\n                    nOperand = this.isDefined(sOperand)? 1 : 0;\n                } else {\n                    /*\n                     * The expression is either a repeat count or a condition.  Either way, we must be able to\n                     * resolve it now, so we don't set fPass1 (but that doesn't mean it's the second pass, either).\n                     */\n                    nOperand = this.parseExpression(sOperand) || 0;\n                }\n            }\n            match = sOperands.match(/\\s*(<|)([\\s\\S]*)/i);\n            name = '?' + sOperator;\n            iMatch = 1;\n        }\n\n        /*\n         * Now we need to set a global parsing state: we are either about to receive a macro definition on\n         * subsequent lines (1), the definition has already started on the current line (2), or the definition\n         * started and ended on the current line (0).\n         */\n        name = name.toUpperCase();\n        this.nMacroDef = 1;\n        this.sMacroDef = name;\n        this.tblMacros[name] = {name, nOperand, aParms, aDefaults, aValues, sText: \"\", nLine: this.nLine};\n\n        if (match[iMatch]) {                            // if there is an opening bracket\n            this.nMacroDef = 2;                         // then the macro definition has started\n            this.appendMacro(match[iMatch + 1]);\n        }\n\n        return name;\n    }\n\n    /**\n     * appendMacro(sLine)\n     *\n     * @this {Macro10}\n     * @param {string} sLine\n     * @return {string}\n     */\n    appendMacro(sLine)\n    {\n        var sRemain = \"\";\n        for (var i = 0; i < sLine.length; i++) {\n            if (sLine[i] == this.chMacroOpen) {\n                this.nMacroDef++;\n            } else if (sLine[i] == this.chMacroClose) {\n                this.nMacroDef--;\n                if (this.nMacroDef == 1) {\n                    this.nMacroDef = 0;\n                    sRemain = sLine.substr(i + 1);\n                    sLine = sLine.substr(0, i);\n                    break;\n                }\n            }\n        }\n        var name = this.sMacroDef || \"\";\n        this.tblMacros[name].sText += sLine;\n        if (!this.nMacroDef) {\n            this.sMacroDef = null;\n            this.parseMacro(name);\n        }\n        return sRemain;\n    }\n\n    /**\n     * addSymbol(name, value, nType)\n     *\n     * @this {Macro10}\n     * @param {string} name\n     * @param {number|string} value\n     * @param {number} [nType]\n     */\n    addSymbol(name, value, nType = 0)\n    {\n        name = name.toUpperCase().substr(0, 6);\n        if ((nType & Macro10.SYMTYPE.LABEL) && this.tblSymbols[name] !== undefined) {\n            this.error(\"redefined label '\" + name + \"'\");\n            return;\n        }\n        var sUndefined = undefined;\n        if (typeof value == 'string') {\n            var aUndefined = [];\n            var v = this.parseExpression(value, aUndefined);\n            if (v === undefined) {\n                this.error(\"invalid symbol '\" + name + \"': \" + value);\n                return;\n            }\n            if (aUndefined.length > 1) {\n                this.error(\"too many undefined symbols in '\" + name + \"': \" + aUndefined.join());\n            }\n            value = v;\n            sUndefined = aUndefined[0];\n        }\n        var sym = this.tblSymbols[name];\n        if (sym) {\n            sym.value = value;\n            sym.nType = nType;\n            sym.nLine = this.nLine;\n        } else {\n            this.tblSymbols[name] = {name, value, nType, nLine: this.nLine};\n        }\n        this.dbg.setVariable(name, value, sUndefined);\n    }\n\n    /**\n     * defBLOCK()\n     *\n     * Processes the BLOCK pseudo-op.\n     *\n     * @this {Macro10}\n     * @param {string} sOperands\n     */\n    defBLOCK(sOperands)\n    {\n        var w = this.parseExpression(sOperands);\n        if (w !== undefined && w >= 0 && w <= 0o777777) {\n            this.nLocation += w;    // while (w--) this.genWord(0);\n        } else {\n            this.error(\"unrecognized BLOCK expression '\" + sOperands + \"'\");\n        }\n    }\n\n    /**\n     * defBYTE()\n     *\n     * Processes the BYTE pseudo-op.\n     *\n     * @this {Macro10}\n     * @param {string} sOperands\n     */\n    defBYTE(sOperands)\n    {\n        var sOperand;\n        var nBits = 0, nValue = 0, nBitsRemaining = 36;\n\n        while (sOperand = this.getExpression(sOperands)) {\n            sOperands = sOperands.substr(sOperand.length).trim();\n            var sValue = sOperand;\n            var match = sOperand.match(/^\\((.*)\\)\\s*(.*)$/);\n            if (match) {\n                if (match[1]) nBits = this.parseExpression(\"^D\" + match[1]);\n                sValue = match[2];\n            }\n            if (!nBits) {\n                /*\n                 * According the the 1978 MACRO-10 spec, \"If the byte size is 0 or is missing (empty parentheses), a zero word\n                 * is generated.\"  I'm not clear exactly on how to interpret this, so I'll make a simplistic assumption for now.\n                 */\n                this.genWord(0);\n                continue;\n            }\n            var v = sValue? this.parseExpression(sValue) : 0;\n            if (v === undefined || nBits < 0 || nBits > 36) {\n                this.error(\"unexpected BYTE operand: \" + sOperand);\n                break;\n            }\n            v = this.dbg.truncate(v, nBits, true);\n            if (nBitsRemaining < nBits) {\n                this.genWord(nValue);\n                nValue = 0;\n                nBitsRemaining = 36;\n            }\n            nValue += v * Math.pow(2, nBitsRemaining - nBits);\n            nBitsRemaining -= nBits;\n        }\n        if (nBitsRemaining < 36) {\n            this.genWord(nValue);\n        }\n    }\n\n    /**\n     * defEND()\n     *\n     * Processes the END pseudo-op.\n     *\n     * @this {Macro10}\n     * @param {string} sOperands\n     */\n    defEND(sOperands)\n    {\n        if (!sOperands) {\n            this.addrStart = this.addrLoad;\n        } else {\n            this.addrStart = this.parseExpression(sOperands);\n            if (this.addrStart === undefined) {\n                this.error(\"unrecognized END expression '\" + sOperands + \"'\");\n            }\n        }\n    }\n\n    /**\n     * defLocation(sOperands)\n     *\n     * Processes the LOC pseudo-op.\n     *\n     * @this {Macro10}\n     * @param {string} sOperands\n     */\n    defLocation(sOperands)\n    {\n        this.nLocation = this.parseExpression(sOperands) || 0;\n    }\n\n    /**\n     * defXWD()\n     *\n     * Processes the XWD pseudo-op.\n     *\n     * Since the XWD pseudo-op appears to be equivalent to two values separated by two commas, which defWord() must also\n     * support, we can piggy-back on defWord().\n     *\n     * @this {Macro10}\n     * @param {string} sOperands\n     */\n    defXWD(sOperands)\n    {\n        this.defWord(sOperands.replace(\",\", \",,\"));\n    }\n\n    /**\n     * defWord(sOperator, sSeparator, sOperands)\n     *\n     * @this {Macro10}\n     * @param {string} sOperator\n     * @param {string} [sSeparator]\n     * @param {string} [sOperands]\n     */\n    defWord(sOperator, sSeparator = \"\", sOperands = \"\")\n    {\n        var aUndefined = [];\n        var sExp = (sOperator + sSeparator + sOperands).trim();\n        var w = this.parseExpression(sExp, aUndefined);\n        if (w !== undefined) {\n            if (!aUndefined.length) {\n                this.genWord(w);\n            } else if (aUndefined.length == 1) {\n                this.genWord(w, aUndefined[0]);\n            }\n            else {\n                this.genWord(0, sExp);\n            }\n        } else {\n            this.error(\"unrecognized word expression '\" + sExp + \"'\");\n        }\n    }\n\n    /**\n     * delSymbols(sOperands)\n     *\n     * @this {Macro10}\n     * @param {string} sOperands\n     */\n    delSymbols(sOperands)\n    {\n        var aValues = this.getValues(sOperands);\n        for (var i = 0; i < aValues.length; i++) {\n            this.dbg.delVariable(aValues[i]);\n            delete this.tblSymbols[aValues[i]];\n        }\n    }\n\n    /**\n     * doLiterals()\n     *\n     * @this {Macro10}\n     */\n    doLiterals()\n    {\n        let nLocationLiterals = this.nLocation;\n\n        for (let i = 0; i < this.aLiterals.length; i++) {\n            /*\n             * Apparently, the time has come to implement \"literal collapsing\"; I was treating it as just\n             * a nice optimization, but it turns out that DEC has written tests that actually DEPEND on it:\n             *\n             *      C26300: HRRZI   [135531,,246642]    ;PRELOAD AC0 WITH 0,, LITERAL ADDRESS\n             *              JRA     .+1                 ;*JRA SHOULD PLACE C(AC0) INTO AC0\n             *              CAIE    [135531,,246642]    ;PASS IF JRA PLACED C(AC0) INTO AC0\n             *              STOP\n             *\n             * If the HRRZI and CAIE instructions don't refer to the same exact literal, the test will fail.\n             * For purposes of this particular test, the values they stuffed into the literals are essentially\n             * gibberish, but the same literal may be used in another test where the values are significant.\n             *\n             * However, I'm still going to keep it simple.  In this example from p. 2-8 of the April 1978\n             * MACRO-10 manual, I will NOT be attempting to collapse null words at the end of ASCIZ sequences\n             * with other null words, especially if they were defined before the ASCIZ:\n             *\n             *      Literals having the same value are collapsed in MACRO's literal pool.\n             *      Thus for the statements:\n             *\n             *              PUSH    P,[0]\n             *              PUSH    P,[0]\n             *              MOVEI   1,[ASCIZ /TEST1/]\n             *\n             *      the same address is shared by the two literals [0], and by the null word\n             *      generated at the end of [ASCIZ /TEST1/].\n             */\n            let lit = this.aLiterals[i];\n            /*\n             * First things first: verify that the literal is one contiguous zero-based set of words (I'm not sure\n             * how it couldn't be, but better safe than sorry).\n             */\n            let aWords = [];\n            let nWords = 0;\n            lit.aWords.forEach(function(w, nLocation) {\n                if (nLocation === aWords.length) aWords.push(w);\n                nWords++;\n            });\n            if (nWords == aWords.length) {\n                /*\n                 * So far, so good.  Now we'll simply brute-force-search our way through the existing set of\n                 * literals, looking for a complete match.\n                 */\n                for (let nLocation = nLocationLiterals; nLocation + nWords <= this.nLocation; nLocation++) {\n                    let n;\n                    for (n = 0; n < nWords; n++) {\n                        /*\n                         * This check requires that the initial values of the words in the literals match AND that\n                         * their fixup expressions, if any, match as well.  Here again, MACRO-10 may be more aggressive\n                         * in either verifying fixup equality or evaluating any fixups that it can immediately, but\n                         * but I prefer to leave all fixup evaluation where it is (below), after all literals and then\n                         * all variables have been added to the output.\n                         */\n                        if (aWords[n] !== this.aWords[nLocation + n] || lit.aFixups[n] != this.aFixups[nLocation]) break;\n                    }\n                    if (n == nWords) {\n                        this.addSymbol(lit.name, nLocation, Macro10.SYMTYPE.LABEL);\n                        lit = null;\n                        break;\n                    }\n                }\n            }\n            if (lit) {\n                var macro10 = this;\n                this.addSymbol(lit.name, this.nLocation, Macro10.SYMTYPE.LABEL);\n                lit.aWords.forEach(function(w, nLocation) {\n                    macro10.genWord(w, lit.aFixups[nLocation]);\n                });\n            }\n        }\n        this.aLiterals = [];\n    }\n\n    /**\n     * doVariables()\n     *\n     * @this {Macro10}\n     */\n    doVariables()\n    {\n        for (let i = 0; i < this.aVariables.length; i++) {\n            let name = this.aVariables[i];\n            let macro = this.tblMacros[name];\n            if (!macro) {\n                /*\n                 * This is more of an assert(), because it should never happen, regardless of input.\n                 */\n                this.error(\"missing definition for variable '\" + name + \"'\");\n                continue;\n            }\n            this.parseText(macro.sText);\n        }\n        this.aVariables = [];\n    }\n\n    /**\n     * genASCII()\n     *\n     * Based on the last operator, generate the appropriate ASCII/ASCIZ/SIXBIT data.\n     *\n     * @this {Macro10}\n     */\n    genASCII()\n    {\n        var n = 0, w = 0;       // number of characters in current word, and current word\n        var bits, shift;        // bits per character, and bits to left-shift next character\n        var cch = this.sASCII.length;\n        if (this.sOperator == Macro10.PSEUDO_OP.ASCIZ) cch++;\n        for (var i = 0; i < cch; i++) {\n            if (!n) {\n                w = 0; shift = 29; bits = 7;\n                if (this.sOperator == Macro10.PSEUDO_OP.SIXBIT) {\n                    bits--; shift++;\n                }\n            }\n            /*\n             * If we're processing an ASCIZ pseudo-op, then yes, we will fetch one character beyond\n             * the end of sASCII, which will return NaN, but when we mask a falsey value like NaN, we\n             * get zero, so it's all good.\n             */\n            var c = this.sASCII.charCodeAt(i) & 0o177;\n            /*\n             * If we're doing 6-bit encoding, then perform the conversion of lower-case to upper-case,\n             * and then adjust/mask.\n             */\n            if (bits == 6) {\n                if (c >= 0x61 && c <= 0x7A) c -= 0x20;\n                c = (c + 0o40) & 0o77;\n            }\n            w += c * Math.pow(2, shift);\n            shift -= bits;\n            n++;\n            if (shift < 0) {\n                this.genWord(w);\n                n = 0;\n            }\n        }\n        if (n) this.genWord(w);\n    }\n\n    /**\n     * genWord(value, sUndefined)\n     *\n     * @this {Macro10}\n     * @param {number} value (default value for the current location)\n     * @param {string} [sUndefined] (optional fixup to evaluate later)\n     */\n    genWord(value, sUndefined)\n    {\n        this.aWords[this.nLocation] = this.truncate(value);\n        if (sUndefined !== undefined) this.aFixups[this.nLocation] = sUndefined;\n        this.aLineRefs[this.nLocation] = this.nLine;\n        this.nLocation++;\n    }\n\n    /**\n     * truncate(value, nLocation)\n     *\n     * @this {Macro10}\n     * @param {number} value\n     * @param {number} [nLocation]\n     * @return {number}\n     */\n    truncate(value, nLocation = this.nLocation)\n    {\n        var w = this.dbg.truncate(value || 0, 36, true);\n        if (value < -PDP10.INT_LIMIT || value >= PDP10.WORD_LIMIT) {\n            this.warning(\"truncated value \" + Str.toOct(value) + \" at location \" + Str.toOct(nLocation) + \" to \" + Str.toOct(w));\n        }\n        return w;\n    }\n\n    /**\n     * error(sError, nLine)\n     *\n     * @this {Macro10}\n     * @param {string} sError\n     * @param {number} [nLine]\n     * @throws {Error}\n     */\n    error(sError, nLine)\n    {\n        throw new Error(\"error in \" + this.getLineRef(nLine) + \": \" + sError);\n    }\n\n    /**\n     * warning(sWarning, nLine)\n     *\n     * @this {Macro10}\n     * @param {string} sWarning\n     * @param {number} [nLine]\n     */\n    warning(sWarning, nLine)\n    {\n        this.println(\"warning in \" + this.getLineRef(nLine) + \": \" + sWarning);\n    }\n\n    /**\n     * println(s)\n     *\n     * @this {Macro10}\n     * @param {string} s\n     */\n    println(s)\n    {\n        if (!this.dbg) {\n            console.log(s);\n        } else {\n            this.dbg.println(s);\n        }\n    }\n}\n\nMacro10.SYMTYPE = {\n    LABEL:      0x01,\n    PRIVATE:    0x02,\n    INTERNAL:   0x04\n};\n\nMacro10.PSEUDO_OP = {\n    ASCII:      \"ASCII\",\n    ASCIZ:      \"ASCIZ\",\n    BLOCK:      \"BLOCK\",\n    BYTE:       \"BYTE\",\n    DEFINE:     \"DEFINE\",\n    END:        \"END\",\n    EXP:        \"EXP\",\n    IF1:        \"IF1\",\n    IFDEF:      \"IFDEF\",\n    IFDIF:      \"IFDIF\",\n    IFE:        \"IFE\",\n    IFG:        \"IFG\",\n    IFGE:       \"IFGE\",\n    IFIDN:      \"IFIDN\",\n    IFL:        \"IFL\",\n    IFLE:       \"IFLE\",\n    IFN:        \"IFN\",\n    IFNDEF:     \"IFNDEF\",\n    IRP:        \"IRP\",\n    IRPC:       \"IRPC\",\n    LALL:       \"LALL\",\n    LIT:        \"LIT\",\n    LITERAL:    \"LITERAL\",      // this is a pseudo-pseudo-op, for internal use only\n    LIST:       \"LIST\",\n    LOC:        \"LOC\",\n    NOSYM:      \"NOSYM\",\n    OPDEF:      \"OPDEF\",\n    PAGE:       \"PAGE\",\n    PURGE:      \"PURGE\",\n    REPEAT:     \"REPEAT\",\n    SIXBIT:     \"SIXBIT\",\n    SUBTTL:     \"SUBTTL\",\n    TITLE:      \"TITLE\",\n    VAR:        \"VAR\",\n    XALL:       \"XALL\",\n    XWD:        \"XWD\",\n    XLIST:      \"XLIST\"\n};\n\n/*\n * This enumerates the kinds of macros stored in tblMacros.  The nOperand field should contain\n * one of these values, unless it's a REPEAT or CONDITIONAL block, in which case it will contain\n * either a repeat count or conditional value.\n */\nMacro10.MACRO_OP = {\n    DEFINE:         -1,\n    OPDEF:          -2,\n    LITERAL:        -3,\n    RESERVED:       -4,\n};\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp10/lib/computer.js (C) Jeff Parsons 2012-2018\n */\n\n\nclass ComputerPDP10 extends Component {\n    /**\n     * ComputerPDP10(parmsComputer, parmsMachine, fSuspended)\n     *\n     * The ComputerPDP10 component has no required (parmsComputer) properties, but it does\n     * support the following:\n     *\n     *      autoPower: true to automatically power the computer (default), false to wait;\n     *      false is honored only if a \"power\" button binding exists.\n     *\n     *      busWidth: number of memory address lines (address bits) on the computer's \"bus\";\n     *      20 is the minimum (and the default), which implies 8086/8088 real-mode addressing,\n     *      while 24 is required for 80286 protected-mode addressing.  This value is passed\n     *      directly through to the Bus component; see that component for more details.\n     *\n     *      resume: one of the ComputerPDP10.RESUME constants, which are as follows:\n     *          '0' if resume disabled (default)\n     *          '1' if enabled without prompting\n     *          '2' if enabled with prompting\n     *          '3' if enabled with prompting and auto-delete\n     *          or a string containing the path of a predefined JSON-encoded state\n     *\n     *      state: the path to JSON-encoded state file (see details regarding 'state' below)\n     *\n     * The parmsMachine object, if provided, may contain any of:\n     *\n     *      autoMount: if set, this should override any 'autoMount' property in the FDC's\n     *      parmsFDC object.\n     *\n     *      autoPower: if set, this should override any 'autoPower' property in the ComputerPDP10's\n     *      parmsComputer object.\n     *\n     *      messages: if set, this should override any 'messages' property in the Debugger's\n     *      parmsDbg object.\n     *\n     *      state: if set, this should override any 'state' property in the ComputerPDP10's\n     *      parmsComputer object.\n     *\n     *      url: the location of the machine XML file\n     *\n     * If a predefined state is supplied AND it's successfully loaded, then resume behavior\n     * defaults to '1' (ie, resume enabled without prompting).\n     *\n     * This component insures that all components are ready before \"powering\" them.\n     *\n     * Different components become ready at different times, and initialization order (ie,\n     * the order the scripts are combined on the page) only partially determines readiness.\n     * This is because components like ROM and Video must finish loading their resource files\n     * before they are ready.  Other components become ready after we call their initBus()\n     * function, because they have a Bus or CPU dependency, such as access to memory management\n     * functions.  And other components, like CPU and Panel, are ready as soon as their\n     * constructor finishes.\n     *\n     * Once a component has indicated it's ready, we call its powerUp() notification\n     * function (if it has one--it's optional).  We call the CPU's powerUp() function last,\n     * so that the CPU is assured that all other components are ready and \"powered\".\n     *\n     * @this {ComputerPDP10}\n     * @param {Object} parmsComputer\n     * @param {Object} [parmsMachine]\n     * @param {boolean} [fSuspended]\n     */\n    constructor(parmsComputer, parmsMachine, fSuspended)\n    {\n        super(\"Computer\", parmsComputer, MessagesPDP10.COMPUTER);\n\n        this.flags.powered = false;\n\n        this.parmsMachine = null;\n        this.setMachineParms(parmsMachine);\n\n        this.fAutoPower = this.getMachineParm('autoPower', parmsComputer, Str.TYPES.BOOLEAN);\n\n        /*\n         * nPowerChange is 0 while the power state is stable, 1 while power is transitioning\n         * to \"on\", and -1 while power is transitioning to \"off\".\n         */\n        this.nPowerChange = 0;\n\n        /*\n         * TODO: Deprecate 'buswidth' (it should have always used camelCase)\n         */\n        this.nBusWidth = +parmsComputer['busWidth'] || +parmsComputer['buswidth'];\n\n        this.sResumePath = this.sStatePath = null;\n        this.sStateData = null;\n        this.fStateData = false;            // remembers if sStateData was loaded\n        this.fServerState = false;\n        this.stateComputer = this.stateFailSafe = null;\n        this.fInitialized = this.fReload = this.fRestoreError = false;\n\n        this.url = /** @type {string} */ (this.getMachineParm('url') || \"\");\n\n        /*\n         * Generate a random number x (where 0 <= x < 1), add 0.1 so that it's guaranteed to be\n         * non-zero, convert to base 36, and chop off the leading digit and \"decimal\" point.\n         */\n        this.sMachineID = (Math.random() + 0.1).toString(36).substr(2,12);\n        this.sUserID = this.queryUserID();\n\n        /*\n         * Find the appropriate CPU (and Debugger and Control Panel, if any).\n         *\n         * CLOSURE COMPILER TIP: To override the type of a right-hand expression (as we need to do here,\n         * where we know getComponentByType() will only return an CPUState object or null), wrap the expression\n         * in parentheses.  I never knew this until I stumbled across it in \"Closure: The Definitive Guide\".\n         */\n        this.cpu = /** @type {CPUStatePDP10} */ (Component.getComponentByType(\"CPU\", this.id));\n        if (!this.cpu) {\n            Component.error(\"Unable to find CPU component\");\n            return;\n        }\n        this.dbg = /** @type {DebuggerPDP10} */ (Component.getComponentByType(\"Debugger\", this.id));\n\n        /*\n         * Initialize the Bus component\n         */\n        this.bus = new BusPDP10({'id': this.idMachine + '.bus', 'busWidth': this.nBusWidth}, this.cpu, this.dbg);\n\n        /*\n         * Iterate through all the components and connect them to the Control Panel, if any\n         */\n        var iComponent, component;\n        var aComponents = Component.getComponents(this.id);\n\n        this.panel = /** @type {PanelPDP10} */ (Component.getComponentByType(\"Panel\", this.id));\n        this.controlPrint = this.panel && this.panel.bindings['print'];\n\n        if (this.controlPrint) {\n            for (iComponent = 0; iComponent < aComponents.length; iComponent++) {\n                component = aComponents[iComponent];\n                /*\n                 * I can think of many \"cleaner\" ways for the Control Panel component to pass its\n                 * notice(), println(), etc, overrides on to all the other components, but it's just\n                 * too darn convenient to slam those overrides into the components directly.\n                 */\n                component.notice = this.panel.notice;\n                component.print = this.panel.print;\n                component.println = this.panel.println;\n            }\n        }\n\n        this.println(PDP10.APPNAME + \" v\" + PDP10.APPVERSION + \"\\n\" + COPYRIGHT + \"\\n\" + LICENSE);\n\n        /*\n         * Iterate through all the components again and call their initBus() handler, if any\n         */\n        for (iComponent = 0; iComponent < aComponents.length; iComponent++) {\n            component = aComponents[iComponent];\n            if (component.initBus) component.initBus(this, this.bus, this.cpu, this.dbg);\n        }\n\n        var sStatePath = null;\n        var sResume = /** @type {string} */ (this.getMachineParm('resume', parmsComputer));\n        if (sResume !== undefined) {\n            /*\n             * Decide whether the 'resume' property is a number or the path of a state file to resume.\n             */\n            if (sResume.length > 1) {\n                sStatePath = this.sResumePath = sResume;\n            } else {\n                this.resume = parseInt(sResume, 10);\n            }\n        }\n\n        /*\n         * The Computer 'state' property allows a state file to be specified independent of the 'resume' feature;\n         * previously, you could only use 'resume' to load a state file -- which we still support, but loading a state\n         * file that way prevents the machine's state from being saved, since we always resume from the 'resume' file.\n         *\n         * The other wrinkle is on the restore side: we need to IGNORE the 'state' property if a saved state now exists.\n         * So we have to peek at localStorage, and unfortunately, the only way to \"peek\" is to actually load the data,\n         * but we're not ready to use it yet, so powerUp() has been changed to use any existing stateComputer that we've\n         * already loaded.\n         *\n         * However, there's now a wrinkle to the wrinkle: if a 'state' parameter has been passed via the URL, then that\n         * OVERRIDES everything; it overrides any 'state' Computer parameter AND it disables resume of any saved state in\n         * localStorage (in other words, it prevents fAllowResume from being true, and forcing resume off).\n         */\n        var fAllowResume;\n        var sState = this.getMachineParm('state') || (fAllowResume = true) && parmsComputer['state'];\n\n        if (sState) {\n            this.sStatePath = sStatePath = sState;\n            if (!fAllowResume) {\n                this.fServerState = true;\n                this.resume = ComputerPDP10.RESUME_NONE;\n            }\n            if (this.resume) {\n                this.stateComputer = new State(this, PDP10.APPVERSION);\n                if (this.stateComputer.load()) {\n                    sStatePath = null;\n                } else {\n                    delete this.stateComputer;\n                }\n            }\n        }\n\n        /*\n         * If sStatePath is set, we must use it.  But if there's no sStatePath AND resume is set,\n         * then we have the option of resuming from a server-side state, assuming a valid USERID.\n         */\n        if (!sStatePath && this.resume) {\n            sStatePath = this.getServerStatePath();\n            if (sStatePath) this.fServerState = true;\n        }\n\n        if (!sStatePath) {\n            this.setReady();\n        } else {\n            var cmp = this;\n            Web.getResource(sStatePath, null, true, function doneStateLoad(sURL, sResource, nErrorCode) {\n                cmp.finishStateLoad(sURL, sResource, nErrorCode);\n            });\n        }\n\n        if (!this.bindings[\"power\"]) this.fAutoPower = true;\n\n        /*\n         * Power on the computer, giving every component the opportunity to reset or restore itself.\n         */\n        if (!fSuspended && this.fAutoPower) this.wait(this.powerOn);\n    }\n\n    /**\n     * clearPanel()\n     *\n     * @this {ComputerPDP10}\n     */\n    clearPanel()\n    {\n        if (this.controlPrint) {\n            this.controlPrint.value = \"\";\n        }\n    }\n\n    /**\n     * getMachineID()\n     *\n     * @this {ComputerPDP10}\n     * @return {string}\n     */\n    getMachineID()\n    {\n        return this.sMachineID;\n    }\n\n    /**\n     * setMachineParms(parmsMachine)\n     *\n     * If no explicit machine parms were provided, then we check for 'parms' in the bundled resources (if any).\n     *\n     * @this {ComputerPDP10}\n     * @param {Object} [parmsMachine]\n     */\n    setMachineParms(parmsMachine)\n    {\n        if (!parmsMachine) {\n            var sParms;\n            if (typeof resources == 'object' && (sParms = resources['parms'])) {\n                try {\n                    parmsMachine = /** @type {Object} */ (eval(\"(\" + sParms + \")\"));\n                } catch(e) {\n                    Component.error(e.message + \" (\" + sParms + \")\");\n                }\n            }\n        }\n        this.parmsMachine = parmsMachine;\n    }\n\n    /**\n     * getMachineParm(sParm, parmsComponent, type, defaultValue)\n     *\n     * If the machine parameter doesn't exist, we check for a matching component parameter\n     * (if parmsComponent is provided), and failing that, we check the bundled resources (if any).\n     *\n     * At the moment, the only bundled resource request we expect to encounter is 'state'; if it exists,\n     * then we return 'state' back to the caller (ie, the name of the resource), so that the caller will\n     * then attempt to load the 'state' resource to obtain the actual state.\n     *\n     * TODO: It would be nice if we could tell the Closure Compiler that when a specific type parameter\n     * (eg, Str.TYPES.NUMBER) is used, the return value will be that type; unfortunately, every caller\n     * must coerce their own return value.\n     *\n     * @this {ComputerPDP10}\n     * @param {string} sParm\n     * @param {Object|null} [parmsComponent]\n     * @param {number} [type] (from Str.TYPES)\n     * @param {*} [defaultValue]\n     * @return {*}\n     */\n    getMachineParm(sParm, parmsComponent, type, defaultValue)\n    {\n        /*\n         * When checking parmsURL, the check is allowed be a bit looser, because URL parameters are\n         * user-supplied, whereas most other parameters are developer-supplied.  Granted, a developer\n         * may also be sloppy and neglect to use correct case (eg, 'automount' instead of 'autoMount'),\n         * but there are limits to my paranoia.\n         */\n        var sParmLC = sParm.toLowerCase();\n        var value = Web.getURLParm(sParm) || Web.getURLParm(sParmLC);\n        if (value === undefined && this.parmsMachine) value = this.parmsMachine[sParm];\n        if (value === undefined && parmsComponent) value = parmsComponent[sParm];\n        if (value === undefined && typeof resources == 'object' && resources[sParm]) value = sParm;\n        if (value === undefined) value = defaultValue;\n        if (typeof value == \"string\" && type) {\n            switch(type) {\n            case Str.TYPES.NUMBER:\n                value = +value;\n                if (isNaN(/** @type {number} */(value))) value = defaultValue || 0;\n                break;\n            case Str.TYPES.BOOLEAN:\n                value = (value == \"true\");\n                break;\n            }\n        }\n        return value;\n    }\n\n    /**\n     * saveMachineParms()\n     *\n     * @this {ComputerPDP10}\n     * @return {string|null}\n     */\n    saveMachineParms()\n    {\n        return this.parmsMachine? JSON.stringify(this.parmsMachine) : null;\n    }\n\n    /**\n     * getUserID()\n     *\n     * @this {ComputerPDP10}\n     * @return {string}\n     */\n    getUserID()\n    {\n        return this.sUserID || \"\";\n    }\n\n    /**\n     * finishStateLoad(sURL, sStateData, nErrorCode)\n     *\n     * @this {ComputerPDP10}\n     * @param {string} sURL\n     * @param {string} sStateData\n     * @param {number} nErrorCode\n     */\n    finishStateLoad(sURL, sStateData, nErrorCode)\n    {\n        if (!nErrorCode) {\n            this.sStateData = sStateData;\n            this.fStateData = true;\n            if (DEBUG && this.messageEnabled()) {\n                this.printMessage(\"loaded state file \" + sURL.replace(this.sUserID || \"xxx\", \"xxx\"));\n            }\n        } else {\n            this.sResumePath = null;\n            this.fServerState = false;\n            this.notice('Unable to load machine state from server (error ' + nErrorCode + (sStateData? ': ' + Str.trim(sStateData) : '') + ')');\n        }\n        this.setReady();\n    }\n\n    /**\n     * wait(fn, parms)\n     *\n     * wait() waits until every component is ready (including ourselves, the last component we check), then calls the\n     * specified Computer method.\n     *\n     * TODO: The Closure Compiler makes it difficult for us to define a function type for \"fn\" that works in all cases;\n     * sometimes we want to pass a function that takes only a \"number\", and other times we want to pass a function that\n     * takes only an \"Array\" (the type will mirror that of the \"parms\" parameter).  However, the Closure Compiler insists\n     * that both functions must be declared as accepting both types of parameters.  So once again, we must use an untyped\n     * function declaration, instead of something stricter like:\n     *\n     *      param {function(this:Computer, (number|Array|undefined)): undefined} fn\n     *\n     * @this {ComputerPDP10}\n     * @param {function(...)} fn\n     * @param {number|Array} [parms] optional parameters\n     */\n    wait(fn, parms)\n    {\n        var computer = this;\n        var aComponents = Component.getComponents(this.id);\n        for (var iComponent = 0; iComponent <= aComponents.length; iComponent++) {\n            var component = (iComponent < aComponents.length ? aComponents[iComponent] : this);\n            if (!component.isReady()) {\n                component.isReady(function onComponentReady() {\n                    computer.wait(fn, parms);\n                });\n                return;\n            }\n        }\n        if (DEBUG && this.messageEnabled()) this.printMessage(\"ComputerPDP10.wait(ready)\");\n        fn.call(this, parms);\n    }\n\n    /**\n     * validateState(stateComputer)\n     *\n     * NOTE: We clear() stateValidate only when there's no stateComputer.\n     *\n     * @this {ComputerPDP10}\n     * @param {State|null} [stateComputer]\n     * @return {boolean} true if state passes validation, false if not\n     */\n    validateState(stateComputer)\n    {\n        var fValid = true;\n        var stateValidate = new State(this, PDP10.APPVERSION, ComputerPDP10.STATE_VALIDATE);\n        if (stateValidate.load() && stateValidate.parse()) {\n            var sTimestampValidate = stateValidate.get(ComputerPDP10.STATE_TIMESTAMP);\n            var sTimestampComputer = stateComputer? stateComputer.get(ComputerPDP10.STATE_TIMESTAMP) : \"unknown\";\n            if (sTimestampValidate != sTimestampComputer) {\n                this.notice(\"Machine state may be out-of-date\\n(\" + sTimestampValidate + \" vs. \" + sTimestampComputer + \")\\nCheck your browser's local storage limits\");\n                fValid = false;\n                if (!stateComputer) stateValidate.clear();\n            } else {\n                if (DEBUG && this.messageEnabled()) {\n                    this.printMessage(\"Last state: \" + sTimestampComputer + \" (validate: \" + sTimestampValidate + \")\");\n                }\n            }\n        }\n        return fValid;\n    }\n\n    /**\n     * powerOn(resume)\n     *\n     * Power every component \"up\", applying any previously available state information.\n     *\n     * @this {ComputerPDP10}\n     * @param {number} [resume] is a valid RESUME value; default is this.resume\n     */\n    powerOn(resume)\n    {\n        if (resume === undefined) {\n            resume = this.resume || (this.sStateData? ComputerPDP10.RESUME_AUTO : ComputerPDP10.RESUME_NONE);\n        }\n\n        if (DEBUG && this.messageEnabled()) {\n            this.printMessage(\"ComputerPDP10.powerOn(\" + (resume == ComputerPDP10.RESUME_REPOWER ? \"repower\" : (resume ? \"resume\" : \"\")) + \")\");\n        }\n\n        if (this.nPowerChange) {\n            return;\n        }\n        this.nPowerChange++;\n\n        var fRepower = false;\n        var fRestore = false;\n        this.fRestoreError = false;\n        var stateComputer = this.stateComputer || new State(this, PDP10.APPVERSION);\n\n        if (resume == ComputerPDP10.RESUME_REPOWER) {\n            fRepower = true;\n        }\n        else if (resume > ComputerPDP10.RESUME_NONE) {\n            if (stateComputer.load(this.sStateData)) {\n                /*\n                 * Since we're resuming something (either a predefined state or a state from localStorage), let's\n                 * create a \"failsafe\" checkpoint in localStorage, and destroy it at the end of a successful powerOn().\n                 * Which means, of course, that if a previous \"failsafe\" checkpoint already exists, something bad\n                 * may have happened the last time around.\n                 */\n                this.stateFailSafe = new State(this, PDP10.APPVERSION, ComputerPDP10.STATE_FAILSAFE);\n                if (this.stateFailSafe.load()) {\n                    this.powerReport(stateComputer);\n                    /*\n                     * We already know resume is something other than RESUME_NONE, so we'll go ahead and bump it\n                     * all the way to RESUME_PROMPT, so that the user will be prompted, and if the user declines to\n                     * restore, the state will be removed.\n                     */\n                    resume = ComputerPDP10.RESUME_PROMPT;\n                    /*\n                     * To ensure that the set() below succeeds, we need to call unload(), otherwise it may fail\n                     * with a \"read only\" error (eg, \"TypeError: Cannot assign to read only property 'timestamp'\").\n                     */\n                    this.stateFailSafe.unload();\n                }\n\n                this.stateFailSafe.set(ComputerPDP10.STATE_TIMESTAMP, Usr.getTimestamp());\n                this.stateFailSafe.store();\n\n                var fValidate = this.resume && !this.fServerState;\n                if (resume == ComputerPDP10.RESUME_AUTO || Component.confirmUser(\"Click OK to restore the previous \" + PDP10.APPNAME + \" machine state, or CANCEL to reset the machine.\")) {\n                    fRestore = stateComputer.parse();\n                    if (fRestore) {\n                        var sCode = /** @type {string} */ (stateComputer.get(UserAPI.RES.CODE));\n                        var sData = /** @type {string} */ (stateComputer.get(UserAPI.RES.DATA));\n                        if (sCode) {\n                            if (sCode == UserAPI.CODE.OK) {\n                                stateComputer.load(sData);\n                            } else {\n                                /*\n                                 * A missing (or not yet created) state file is no cause for alarm, but other errors might be\n                                 */\n                                if (sCode == UserAPI.CODE.FAIL && sData != UserAPI.FAIL.NOSTATE) {\n                                    this.notice(\"Error: \" + sData);\n                                    if (sData == UserAPI.FAIL.VERIFY) this.resetUserID();\n                                } else {\n                                    this.println(sCode + \": \" + sData);\n                                }\n                                /*\n                                 * Try falling back to the state that we should have saved in localStorage, as a backup to the\n                                 * server-side state.\n                                 */\n                                stateComputer.unload();     // discard the invalid server-side state first\n                                if (stateComputer.load()) {\n                                    fRestore = stateComputer.parse();\n                                    fValidate = true;\n                                } else {\n                                    fRestore = false;       // hmmm, there was nothing in localStorage either\n                                }\n                            }\n                        }\n                    }\n                    /*\n                     * If the load/parse was successful, and it was from localStorage (not sStateData),\n                     * then we should to try verify that localStorage snapshot is current.  One reason it may\n                     * NOT be current is if localStorage was full and we got a quota error during the last\n                     * powerOff().\n                     */\n                    if (fValidate) this.validateState(fRestore? stateComputer : null);\n                } else {\n                    /*\n                     * RESUME_PROMPT indicates we should delete the state if they clicked Cancel to confirm() above.\n                     */\n                    if (resume == ComputerPDP10.RESUME_PROMPT) stateComputer.clear();\n                }\n            } else {\n                /*\n                 * If there's no state, then there should also be no validation timestamp; if there is, then once again,\n                 * we're probably dealing with a quota error.\n                 */\n                this.validateState();\n            }\n            delete this.sStateData;\n            delete this.stateComputer;\n        }\n\n        /*\n         * Start powering all components, including any data they may need to restore their state;\n         * we restore power to the CPU last.\n         */\n        var aComponents = Component.getComponents(this.id);\n        for (var iComponent = 0; iComponent < aComponents.length; iComponent++) {\n            var component = aComponents[iComponent];\n            if (component !== this && component != this.cpu) {\n                fRestore = this.powerRestore(component, stateComputer, fRepower, fRestore);\n            }\n        }\n\n        /*\n         * Assuming this is not a repower, we must perform another wait, because some components may\n         * have marked themselves as \"not ready\" again (eg, the FDC component, if the restore forced it\n         * to mount one or more additional disk images).\n         */\n        var aParms = [stateComputer, resume, fRestore];\n\n        if (resume != ComputerPDP10.RESUME_REPOWER) {\n            this.wait(this.donePowerOn, aParms);\n            return;\n        }\n        this.donePowerOn(aParms);\n    }\n\n    /**\n     * powerRestore(component, stateComputer, fRepower, fRestore)\n     *\n     * @this {ComputerPDP10}\n     * @param {Component} component\n     * @param {State} stateComputer\n     * @param {boolean} fRepower\n     * @param {boolean} fRestore\n     * @return {boolean} true if restore should continue, false if not\n     */\n    powerRestore(component, stateComputer, fRepower, fRestore)\n    {\n        if (!component.flags.powered) {\n\n            /*\n             * TODO: If all components called super.powerUp(), the powered flag would be set automatically.\n             */\n\n            component.flags.powered = true;\n\n            var data = null;\n\n            try {\n                if (fRestore) {\n                    data = stateComputer.get(component.id);\n                    if (!data) {\n                        /*\n                         * This is a hack that makes it possible for a machine whose ID has been\n                         * supplemented with a suffix (a single letter or digit) to find object IDs\n                         * in states created from a machine without the suffix.\n                         *\n                         * For example, if a state file was created from a machine with ID \"ibm5160\"\n                         * but the current machine is \"ibm5160a\", this attempts a second lookup with\n                         * \"ibm5160\", enabling us to find objects that match the original machine ID\n                         * (eg, \"ibm5160.romEGA\").\n                         */\n                        data = stateComputer.get(component.id.replace(/[a-z0-9]\\./i, '.'));\n                    }\n                }\n\n                /*\n                 * State.get() will return whatever was originally passed to State.set() (eg, an\n                 * Object or a string), but components are supposed to store only Objects, so if a\n                 * string comes back, something went wrong.  By explicitly eliminating \"string\" data,\n                 * the Closure Compiler stops complaining that we might be passing strings to our\n                 * powerUp() functions (even though we know we're not).\n                 *\n                 * TODO: Determine if there's some way to coerce the Closure Compiler into treating\n                 * data as Object or null, without having to include this runtime check.  An assert\n                 * would be a good idea, but this is overkill.\n                 */\n                if (typeof data === \"string\") data = null;\n\n                /*\n                 * If computer is null, this is simply a repower notification, which most components\n                 * don't do anything with.  Exceptions include: CPU (since it may be halted) and Video\n                 * (since its screen may be \"turned off\").\n                 */\n                if (!component.powerUp(data, fRepower) && data) {\n\n                    Component.error(\"Unable to restore state for \" + component.type);\n                    /*\n                     * If this is a resume error for a machine that also has a predefined state\n                     * AND we're not restoring from that state, then throw away the current state,\n                     * prevent any new state from being created, and then force a reload, which will\n                     * hopefully restore us to the functioning predefined state.\n                     *\n                     * TODO: Considering doing this in ALL cases, not just in situations where a\n                     * 'state' exists but we're not actually resuming from it.\n                     */\n                    if (this.sStatePath && !this.fStateData) {\n                        stateComputer.clear();\n                        this.resume = ComputerPDP10.RESUME_NONE;\n                        Web.reloadPage();\n                    } else {\n                        /*\n                         * In all other cases, we set fRestoreError, which should trigger a call to\n                         * powerReport() and then delete the offending state.\n                         */\n                        this.fRestoreError = true;\n                    }\n                    /*\n                     * Any failure triggers an automatic to call powerUp() again, without any state,\n                     * in the hopes that the component can recover by performing a reset.\n                     */\n                    component.powerUp(null);\n                    /*\n                     * We also disable the rest of the restore operation, because it's not clear\n                     * the remaining state information can be trusted;  the machine is already in an\n                     * inconsistent state, so we're not likely to make things worse, and the only\n                     * alternative (starting over and performing a state-less reset) isn't likely to make\n                     * the user any happier.  But, we'll see... we need some experience with the code.\n                     */\n                    fRestore = false;\n                }\n\n                if (!fRepower && component.comment) {\n                    var asComments = component.comment.split(\"|\");\n                    for (var i = 0; i < asComments.length; i++) {\n                        component.status(asComments[i]);\n                    }\n                }\n            }\n            catch (err) {\n                Component.error(\"Error restoring state for \" + component.type + \" (\" + err.message + \")\");\n            }\n        }\n        return fRestore;\n    }\n\n    /**\n     * donePowerOn(aParms)\n     *\n     * This is nothing more than a continuation of powerOn(), giving us the option of calling wait() one more time.\n     *\n     * @this {ComputerPDP10}\n     * @param {Array} aParms containing [stateComputer, resume, fRestore]\n     */\n    donePowerOn(aParms)\n    {\n        var stateComputer = aParms[0];\n        var fRepower = (aParms[1] < 0);\n        var fRestore = aParms[2];\n\n        if (DEBUG && this.flags.powered && this.messageEnabled()) {\n            this.printMessage(\"ComputerPDP10.donePowerOn(): redundant\");\n        }\n\n        this.fInitialized = true;\n        this.flags.powered = true;\n        var controlPower = this.bindings[\"power\"];\n        if (controlPower) controlPower.textContent = \"Shutdown\";\n\n        /*\n         * Once we get to this point, we're guaranteed that all components are ready, so it's safe to power the CPU;\n         * the CPU should begin executing immediately, unless a debugger is attached.\n         */\n        if (this.cpu) {\n            /*\n             * TODO: Do we not care about the return value here? (ie, is checking fRestoreError sufficient)?\n             */\n            this.powerRestore(this.cpu, stateComputer, fRepower, fRestore);\n            this.updateDisplays(-2);\n            this.cpu.autoStart();\n        }\n\n        /*\n         * If the state was bad, offer to report it and then delete it.  Deleting may be moot, since invariably a new\n         * state will be created on powerOff() before the next powerOn(), but it seems like good paranoia all the same.\n         */\n        if (this.fRestoreError) {\n            this.powerReport(stateComputer);\n            stateComputer.clear();\n        }\n\n        if (!fRepower && this.stateFailSafe) {\n            this.stateFailSafe.clear();\n            delete this.stateFailSafe;\n        }\n\n        this.nPowerChange = 0;\n    }\n\n    /**\n     * checkPower()\n     *\n     * @this {ComputerPDP10}\n     * @return {boolean} true if the computer is fully powered, false otherwise\n     */\n    checkPower()\n    {\n        if (this.flags.powered) return true;\n\n        var component = null, iComponent;\n        var aComponents = Component.getComponents(this.id);\n        for (iComponent = 0; iComponent < aComponents.length; iComponent++) {\n            component = aComponents[iComponent];\n            if (component !== this && !component.flags.ready) break;\n        }\n        if (iComponent == aComponents.length) {\n            for (iComponent = 0; iComponent < aComponents.length; iComponent++) {\n                component = aComponents[iComponent];\n                if (component !== this && !component.flags.powered) break;\n            }\n        }\n        if (iComponent == aComponents.length) component = this;\n        var s = \"The \" + component.type + \" component (\" + component.id + \") is not \" + (!component.flags.ready? \"ready yet\" + (component.fnReady? \" (waiting for notification)\" : \"\") : \"powered yet\") + \".\";\n        Component.alertUser(s);\n        return false;\n    }\n\n    /**\n     * powerReport(stateComputer)\n     *\n     * @this {ComputerPDP10}\n     * @param {State} stateComputer\n     */\n    powerReport(stateComputer)\n    {\n        if (Component.confirmUser(\"There may be a problem with your \" + PDP10.APPNAME + \" machine.\\n\\nTo help us diagnose it, click OK to send this \" + PDP10.APPNAME + \" machine state to http://\" + SITEHOST + \".\")) {\n            Web.sendReport(PDP10.APPNAME, PDP10.APPVERSION, this.url, this.getUserID(), ReportAPI.TYPE.BUG, stateComputer.toString());\n        }\n    }\n\n    /**\n     * powerOff(fSave, fShutdown)\n     *\n     * Power every component \"down\" and optionally save the machine state.\n     *\n     * There's one scenario that powerOff() isn't currently able to deal with very effectively: what to do when\n     * the user switches away while it's still being restored, causing Disk getResource() calls to fail.  The\n     * Disk component calls notify() when that happens -- see Disk.mount() -- but the FDC and HDC controllers don't\n     * notify *us* of those problems, so Computer assumes that the restore was completely successful, when in fact\n     * it was only partially successful.\n     *\n     * Then we immediately arrive here to perform a save, following that incomplete restore.  It would be wrong to\n     * deal with that incomplete restore by setting fRestoreError, because we don't want to trigger a powerReport()\n     * and the deletion of the previous state, because the state itself was presumably OK.  Unfortunately, the new\n     * state we now save will no longer include manually mounted disk images whose remounts were interrupted, so future\n     * restores won't remount them either.\n     *\n     * We could perhaps solve this by having the Disk component notify us in those situations, set a new flag\n     * (fRestoreIncomplete?), and set fSave to false if that's ever set.  Be careful though: when fSave is false,\n     * that means MORE than not saving; it also means deleting any previous state, which is NOT what you'd want to\n     * do in a \"fRestoreIncomplete\" situation.  Also, we have to worry about Disk operations that fail for other reasons,\n     * making sure those failures don't interfere with the save process in the same way.\n     *\n     * As it stands, the worst that happens is any manually mounted disk images might have to be manually remounted,\n     * which doesn't seem like a huge problem.\n     *\n     * @this {ComputerPDP10}\n     * @param {boolean} [fSave] is true to request a saved state\n     * @param {boolean} [fShutdown] is true if the machine is being shut down\n     * @return {string|null} string representing the saved state (or null if error)\n     */\n    powerOff(fSave, fShutdown)\n    {\n        var data;\n        var sState = \"none\";\n\n        if (DEBUG && this.messageEnabled()) {\n            this.printMessage(\"ComputerPDP10.powerOff(\" + (fSave ? \"save\" : \"nosave\") + (fShutdown ? \",shutdown\" : \"\") + \")\");\n        }\n\n        if (this.nPowerChange) {\n            return null;\n        }\n        this.nPowerChange--;\n\n        var stateComputer = new State(this, PDP10.APPVERSION);\n        var stateValidate = new State(this, PDP10.APPVERSION, ComputerPDP10.STATE_VALIDATE);\n\n        var sTimestamp = Usr.getTimestamp();\n        stateValidate.set(ComputerPDP10.STATE_TIMESTAMP, sTimestamp);\n        stateComputer.set(ComputerPDP10.STATE_TIMESTAMP, sTimestamp);\n        stateComputer.set(ComputerPDP10.STATE_VERSION, APPVERSION);\n        stateComputer.set(ComputerPDP10.STATE_HOSTURL, Web.getHostURL());\n        stateComputer.set(ComputerPDP10.STATE_BROWSER, Web.getUserAgent());\n\n        /*\n         * Always power the CPU \"down\" first, just to help insure it doesn't ask other components to do anything\n         * after they're no longer ready.\n         */\n        if (this.cpu && this.cpu.powerDown) {\n            if (fShutdown) {\n                if (fSave) this.cpu.flags.autoStart = this.cpu.flags.running;\n                this.cpu.stopCPU();\n            }\n            data = this.cpu.powerDown(fSave, fShutdown);\n            if (typeof data === \"object\") stateComputer.set(this.cpu.id, data);\n            if (fShutdown) {\n                this.cpu.flags.powered = false;\n                if (data === false) sState = null;\n            }\n        }\n\n        var aComponents = Component.getComponents(this.id);\n        for (var iComponent = 0; iComponent < aComponents.length; iComponent++) {\n            var component = aComponents[iComponent];\n            if (component.flags.powered) {\n                if (component.powerDown) {\n                    data = component.powerDown(fSave, fShutdown);\n                    if (typeof data === \"object\") stateComputer.set(component.id, data);\n                }\n                if (fShutdown) {\n                    component.flags.powered = false;\n                    if (data === false) sState = null;\n                }\n            }\n        }\n\n        if (sState) {\n            if (fShutdown) {\n                var fClear = false;\n                var fClearAll = false;\n                if (fSave) {\n                    if (this.sUserID) {\n                        this.saveServerState(this.sUserID, stateComputer.toString());\n                    }\n                    if (!stateValidate.store() || !stateComputer.store()) {\n                        sState = null;\n                        /*\n                         * New behavior as of v1.13.2:  if it appears that localStorage is full, we blow it ALL away.\n                         * Dedicated server-side storage is the only way we'll ever be able to reliably preserve a\n                         * particular machine's state.  Historically, attempting to limp along with whatever localStorage\n                         * is left just generates the same useless and annoying warnings over and over.\n                         */\n                        fClear = fClearAll = true;\n                    }\n                }\n                else {\n                    /*\n                     * I used to ALWAYS clear (ie, delete) any associated computer state, but now I do this only if the\n                     * current machine is \"resumable\", because there are situations where I have two configurations\n                     * for the same machine -- one resumable and one not -- and I don't want the latter throwing away the\n                     * state of the former.\n                     *\n                     * So this code is here now strictly for callers to delete the state of a \"resumable\" machine, not as\n                     * some paranoid clean-up operation.\n                     *\n                     * An undocumented feature of this operation is that if your configuration uses the special 'resume=\"3\"'\n                     * value, and you click the \"Reset\" button, and then you click OK to reset the everything, this will\n                     * actually reset EVERYTHING (ie, all localStorage for ALL configs will be reclaimed).\n                     */\n                    if (this.resume) {\n                        fClear = true;\n                        fClearAll = (this.resume == ComputerPDP10.RESUME_DELETE);\n                    }\n                }\n                if (fClear) {\n                    stateComputer.clear(fClearAll);\n                }\n            } else {\n                sState = stateComputer.toString();\n            }\n        }\n\n        if (fShutdown) {\n            this.flags.powered = false;\n            var controlPower = this.bindings[\"power\"];\n            if (controlPower) controlPower.textContent = \"Power\";\n        }\n\n        this.nPowerChange = 0;\n\n        return sState;\n    }\n\n    /**\n     * reset()\n     *\n     * Notify all (other) components with a reset() method that the Computer is being reset.\n     *\n     * NOTE: We'd like to reset the Bus first (due to the importance of the A20 line), but since we\n     * allocated the Bus object ourselves, after all the other components were allocated, it ends\n     * up near the end of Component's list of components.  Hence the special case for this.bus below.\n     *\n     * Ditto for the CPU, in part because if the Front Panel resets before the CPU, it will end up\n     * snapping/displaying the PC as of the last instruction executed, before the CPU resets the PC,\n     * causing the Front Panel to display a stale address when we call updateDisplays() at the end.\n     *\n     * @this {ComputerPDP10}\n     */\n    reset()\n    {\n        this.flags.reset = true;\n        if (this.bus && this.bus.reset) {\n            this.printMessage(\"Resetting \" + this.bus.type);\n            this.bus.reset();\n        }\n        if (this.cpu && this.cpu.reset) {\n            this.printMessage(\"Resetting \" + this.cpu.type);\n            this.cpu.reset();\n        }\n        var aComponents = Component.getComponents(this.id);\n        for (var iComponent = 0; iComponent < aComponents.length; iComponent++) {\n            var component = aComponents[iComponent];\n            if (component !== this && component !== this.bus && component !== this.cpu && component.reset) {\n                this.printMessage(\"Resetting \" + component.type);\n                component.reset();\n            }\n        }\n        this.flags.reset = false;\n        this.updateDisplays(-1);\n    }\n\n    /**\n     * start(ms, nCycles)\n     *\n     * Notify all (other) components with a start() method that the CPU has started.\n     *\n     * Note that we're called by startCPU(), which is why we exclude the CPU component,\n     * as well as ourselves.\n     *\n     * @this {ComputerPDP10}\n     * @param {number} ms\n     * @param {number} nCycles\n     */\n    start(ms, nCycles)\n    {\n        var aComponents = Component.getComponents(this.id);\n        for (var iComponent = 0; iComponent < aComponents.length; iComponent++) {\n            var component = aComponents[iComponent];\n            if (component.type == \"CPU\" || component === this) continue;\n            if (component.start) {\n                component.start(ms, nCycles);\n            }\n        }\n        this.updateDisplays(-1);\n    }\n\n    /**\n     * stop(ms, nCycles)\n     *\n     * Notify all (other) components with a stop() method that the CPU has stopped.\n     *\n     * Note that we're called by stopCPU(), which is why we exclude the CPU component,\n     * as well as ourselves.\n     *\n     * @this {ComputerPDP10}\n     * @param {number} ms\n     * @param {number} nCycles\n     */\n    stop(ms, nCycles)\n    {\n        var aComponents = Component.getComponents(this.id);\n        for (var iComponent = 0; iComponent < aComponents.length; iComponent++) {\n            var component = aComponents[iComponent];\n            if (component.type == \"CPU\" || component === this) continue;\n            if (component.stop) {\n                component.stop(ms, nCycles);\n            }\n        }\n        this.updateDisplays(-1);\n    }\n\n    /**\n     * updateDisplays(nUpdate)\n     *\n     * TODO: Notify all components with an updateDisplay() method that the computer's state has changed (not\n     * just the hard-coded ones below).\n     *\n     * If any DOM controls were bound to the CPU, then we need to call its updateDisplay() handler; if there are no\n     * such bindings, then cpu.updateDisplay() does nothing.\n     *\n     * Similarly, if there's a Panel, then we need to call its updateDisplay() handler, in case it created its own canvas\n     * and implemented its own register display (eg, dumpRegisters()); if not, then panel.updateDisplay() also does nothing.\n     *\n     * In practice, there will *either* be a Panel with a custom canvas *or* a set of DOM controls bound to the CPU *or*\n     * neither.  In theory, there could be BOTH, but that would be unusual.\n     *\n     * TODO: Consider alternate approaches to these largely register-oriented display updates.  Ordinarily, we like to\n     * separate logic from presentation, and currently the CPUState contains both, since it's the component that intimately\n     * knows the names, number, sizes, etc, of all the active registers.  The Panel component is the logical candidate,\n     * but Panel is an optional component; it's often the case that only machines that include the Debugger also include\n     * Panel.\n     *\n     * @this {ComputerPDP10}\n     * @param {number} [nUpdate] (1 for periodic, -1 for forced, 0 or undefined otherwise)\n     */\n    updateDisplays(nUpdate)\n    {\n        /*\n         * nUpdate is generally set to -1 whenever the CPU is transitioning to/from a running state, in which case\n         * cpu.updateDisplay() will definitely want to hide/show register contents; however, at other times, when the\n         * CPU is running, constantly updating the DOM controls too frequently can adversely impact overall performance.\n         *\n         * nUpdate will also be -1 whenever the Debugger has modified the state of the machine, implying that we're\n         * not sure what, if anything, actually changed.\n         */\n        if (this.cpu) this.cpu.updateDisplay(nUpdate || 0);\n        if (this.panel) this.panel.updateDisplay(nUpdate || 0);\n    }\n\n    /**\n     * setBinding(sType, sBinding, control, sValue)\n     *\n     * @this {ComputerPDP10}\n     * @param {string|null} sType is the type of the HTML control (eg, \"button\", \"textarea\", \"register\", \"flag\", \"rled\", etc)\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"reset\")\n     * @param {Object} control is the HTML control DOM object (eg, HTMLButtonElement)\n     * @param {string} [sValue] optional data value\n     * @return {boolean} true if binding was successful, false if unrecognized binding request\n     */\n    setBinding(sType, sBinding, control, sValue)\n    {\n        var computer = this;\n\n        switch (sBinding) {\n        case \"power\":\n            this.bindings[sBinding] = control;\n            control.onclick = function onClickPower() {\n                computer.onPower();\n            };\n            return true;\n\n        case \"reset\":\n            this.bindings[sBinding] = control;\n            control.onclick = function onClickReset() {\n                computer.onReset();\n            };\n            return true;\n\n        /*\n         * Technically, this binding should now be called \"saveState\", to clearly distinguish it from\n         * the \"Save Machine\" control that's normally bound to the savePC() function in save.js.  Saving\n         * an entire machine includes everything needed to start/restore the machine; eg, the machine\n         * XML configuration file(s) *and* the JSON-encoded machine state.\n         */\n        case \"save\":\n            /*\n             * Since this feature depends on the server supporting the PCjs User API (see userapi.js),\n             * and since pcjs.org is no longer running a Node web server, we disable the feature for that\n             * particular host.\n             */\n            if (Str.endsWith(Web.getHost(), \"pcjs.org\")) {\n                if (DEBUG) this.log(\"Remote user API not available\");\n                /*\n                 * We could also simply hide the control; eg:\n                 *\n                 *      control.style.display = \"none\";\n                 *\n                 * but removing the control altogether seems better.\n                 */\n                control.parentNode.removeChild(/** @type {Node} */ (control));\n                return false;\n            }\n            this.bindings[sBinding] = control;\n            control.onclick = function onClickSave() {\n                var sUserID = computer.queryUserID(true);\n                if (sUserID) {\n                    /*\n                     * I modified the test to include a check for sStatePath so that I could save new states\n                     * for machines with existing states; otherwise, I'd have no (easy) way of capturing and\n                     * updating their state.  Making the machine (even temporarily) resumable would have been\n                     * one work-around, but it's not appropriate for some machines, as their state is simply\n                     * too large (for localStorage anyway, which is the default storage solution).\n                     */\n                    var fSave = !!(computer.resume && !computer.sResumePath || computer.sStatePath);\n                    var sState = computer.powerOff(fSave);\n                    if (fSave) {\n                        computer.saveServerState(sUserID, sState);\n                    } else {\n                        computer.notice(\"Resume disabled, machine state not saved\");\n                    }\n                }\n                /*\n                 * This seemed like a handy alternative, but it turned out to be a no-go, at least for large states:\n                 *\n                 *      var sState = computer.powerOff(true);\n                 *      if (sState) {\n                 *          sState = \"data:text/json;charset=utf-8,\" + encodeURIComponent(sState);\n                 *          window.open(sState);\n                 *      }\n                 *\n                 * Perhaps if I embedded the data in a link on the current page instead; eg:\n                 *\n                 *      $('<a href=\"' + sState + '\" download=\"state.json\">Download</a>').appendTo('#container');\n                 */\n            };\n            return true;\n\n        default:\n            break;\n        }\n        return false;\n    }\n\n    /**\n     * resetUserID()\n     *\n     * @this {ComputerPDP10}\n     */\n    resetUserID()\n    {\n        Web.setLocalStorageItem(ComputerPDP10.STATE_USERID, \"\");\n        this.sUserID = null;\n    }\n\n    /**\n     * queryUserID(fPrompt)\n     *\n     * @this {ComputerPDP10}\n     * @param {boolean} [fPrompt]\n     * @returns {string|null|undefined}\n     */\n    queryUserID(fPrompt)\n    {\n        var sUserID = this.sUserID;\n        if (!sUserID) {\n            sUserID = Web.getLocalStorageItem(ComputerPDP10.STATE_USERID);\n            if (sUserID !== undefined) {\n                if (!sUserID && fPrompt) {\n                    /*\n                     * NOTE: Warning the user here that \"Save\" operations are not currently supported by pcjs.org is\n                     * merely a precaution, because ordinarily, setBinding() should have already determined if we are\n                     * running from pcjs.org and disabled any \"Save\" button.\n                     */\n                    sUserID = Component.promptUser(\"Saving machine states on the pcjs.org server is currently unsupported.\\n\\nIf you're running your own server, enter your user ID below.\");\n                    if (sUserID) {\n                        sUserID = this.verifyUserID(sUserID);\n                        if (!sUserID) this.notice(\"The user ID is invalid.\");\n                    }\n                }\n            } else if (fPrompt) {\n                this.notice(\"Browser local storage is not available\");\n            }\n        }\n        return sUserID;\n    }\n\n    /**\n     * verifyUserID(sUserID)\n     *\n     * @this {ComputerPDP10}\n     * @param {string} sUserID\n     * @return {string} validated user ID, or null if error\n     */\n    verifyUserID(sUserID)\n    {\n        this.sUserID = null;\n        var fMessages = DEBUG && this.messageEnabled();\n        if (fMessages) this.printMessage(\"verifyUserID(\" + sUserID + \")\");\n        var sRequest = Web.getHost() + UserAPI.ENDPOINT + '?' + UserAPI.QUERY.REQ + '=' + UserAPI.REQ.VERIFY + '&' + UserAPI.QUERY.USER + '=' + sUserID;\n        var response = Web.getResource(sRequest);\n        var nErrorCode = response[0];\n        var sResponse = response[1];\n        if (!nErrorCode && sResponse) {\n            try {\n                response = eval(\"(\" + sResponse + \")\");\n                if (response.code && response.code == UserAPI.CODE.OK) {\n                    Web.setLocalStorageItem(ComputerPDP10.STATE_USERID, response.data);\n                    if (fMessages) this.printMessage(ComputerPDP10.STATE_USERID + \" updated: \" + response.data);\n                    this.sUserID = response.data;\n                } else {\n                    if (fMessages) this.printMessage(response.code + \": \" + response.data);\n                }\n            } catch (e) {\n                Component.error(e.message + \" (\" + sResponse + \")\");\n            }\n        } else {\n            if (fMessages) this.printMessage(\"invalid response (error \" + nErrorCode + \")\");\n        }\n        return this.sUserID;\n    }\n\n    /**\n     * getServerStatePath()\n     *\n     * @this {ComputerPDP10}\n     * @return {string|null} sStatePath (null if no localStorage or no USERID stored in localStorage)\n     */\n    getServerStatePath()\n    {\n        var sStatePath = null;\n        if (this.sUserID) {\n            if (DEBUG && this.messageEnabled()) {\n                this.printMessage(ComputerPDP10.STATE_USERID + \" for load: \" + this.sUserID);\n            }\n            sStatePath = Web.getHost() + UserAPI.ENDPOINT + '?' + UserAPI.QUERY.REQ + '=' + UserAPI.REQ.LOAD + '&' + UserAPI.QUERY.USER + '=' + this.sUserID + '&' + UserAPI.QUERY.STATE + '=' + State.key(this, PDP10.APPVERSION);\n        } else {\n            if (DEBUG && this.messageEnabled()) {\n                this.printMessage(ComputerPDP10.STATE_USERID + \" unavailable\");\n            }\n        }\n        return sStatePath;\n    }\n\n    /**\n     * saveServerState(sUserID, sState)\n     *\n     * @this {ComputerPDP10}\n     * @param {string} sUserID\n     * @param {string|null} sState\n     */\n    saveServerState(sUserID, sState)\n    {\n        /*\n         * We must pass fSync == true, because (as I understand it) browsers will blow off any async\n         * requests when a page is being closed.  Since our request is synchronous, storeServerState()\n         * should also return a result, but there's not much we can do with it, since browsers ALSO\n         * tend to blow off alerts() and the like when closing down.\n         */\n        if (sState) {\n            if (DEBUG && this.messageEnabled()) {\n                this.printMessage(\"size of server state: \" + sState.length + \" bytes\");\n            }\n            var response = this.storeServerState(sUserID, sState, true);\n            if (response && response[UserAPI.RES.CODE] == UserAPI.CODE.OK) {\n                this.notice(\"Machine state saved to server\");\n            } else if (sState) {\n                var sError = (response && response[UserAPI.RES.DATA]) || UserAPI.FAIL.BADSTORE;\n                if (response[UserAPI.RES.CODE] == UserAPI.CODE.FAIL) {\n                    sError = \"Error: \" + sError;\n                } else {\n                    sError = \"Error \" + response[UserAPI.RES.CODE] + \": \" + sError;\n                }\n                this.notice(sError);\n                this.resetUserID();\n            }\n        } else {\n            if (DEBUG && this.messageEnabled()) {\n                this.printMessage(\"no state to store\");\n            }\n        }\n    }\n\n    /**\n     * storeServerState(sUserID, sState, fSync)\n     *\n     * @this {ComputerPDP10}\n     * @param {string} sUserID\n     * @param {string} sState\n     * @param {boolean} [fSync] is true if we're powering down and should perform a synchronous request (default is async)\n     * @return {*} server response if fSync is true and a response was received; otherwise null\n     */\n    storeServerState(sUserID, sState, fSync)\n    {\n        if (DEBUG && this.messageEnabled()) {\n            this.printMessage(ComputerPDP10.STATE_USERID + \" for store: \" + sUserID);\n        }\n        /*\n         * TODO: Determine whether or not any browsers cancel our request if we're called during a browser \"shutdown\" event,\n         * and whether or not it matters if we do an async request (currently, we're not, to try to ensure the request goes through).\n         */\n        var dataPost = {};\n        dataPost[UserAPI.QUERY.REQ] = UserAPI.REQ.STORE;\n        dataPost[UserAPI.QUERY.USER] = sUserID;\n        dataPost[UserAPI.QUERY.STATE] = State.key(this, PDP10.APPVERSION);\n        dataPost[UserAPI.QUERY.DATA] = sState;\n        var sRequest = Web.getHost() + UserAPI.ENDPOINT;\n        if (!fSync) {\n            Web.getResource(sRequest, dataPost, true);\n        } else {\n            var response = Web.getResource(sRequest, dataPost);\n            var sResponse = response[0];\n            if (response[1]) {\n                if (sResponse) {\n                    var i = sResponse.indexOf('\\n');\n                    if (i > 0) sResponse = sResponse.substr(0, i);\n                    if (!sResponse.indexOf(\"Error: \")) sResponse = sResponse.substr(7);\n                }\n                sResponse = '{\"' + UserAPI.RES.CODE + '\":' + response[1] + ',\"' + UserAPI.RES.DATA + '\":\"' + sResponse + '\"}';\n            }\n            if (DEBUG && this.messageEnabled()) this.printMessage(sResponse);\n            return JSON.parse(sResponse);\n        }\n        return null;\n    }\n\n    /**\n     * onPower()\n     *\n     * This handles UI requests to toggle the computer's power (eg, see the \"power\" button binding).\n     *\n     * @this {ComputerPDP10}\n     */\n    onPower()\n    {\n        if (!this.nPowerChange) {\n            if (!this.flags.powered) {\n                this.wait(this.powerOn);\n            } else {\n                this.powerOff(false, true);\n            }\n        }\n    }\n\n    /**\n     * onReset()\n     *\n     * This handles UI requests to reset the computer's state (eg, see the \"reset\" button binding).\n     *\n     * @this {ComputerPDP10}\n     */\n    onReset()\n    {\n        /*\n         * I'm going to start with the presumption that it makes little sense for an \"unpowered\" computer to be \"reset\";\n         * ditto if the power state is currently being changed.\n         */\n        if (!this.flags.powered || this.nPowerChange) return;\n\n        /*\n         * If this is a \"resumable\" machine (and it's not using a predefined state), then we overload the reset\n         * operation to offer an explicit \"save or discard\" option first.  This is currently the only UI we offer to\n         * discard a machine's state, including any disk changes.  The traditional \"reset\" operation is still available\n         * for non-resumable machines.\n         *\n         * TODO: Break this behavior out into a separate \"discard\" operation, in case the designer of the machine really\n         * wants to clutter the UI with confusing options. ;-)\n         */\n        if (this.resume && !this.sResumePath) {\n            /*\n             * I used to bypass the prompt if this.resume == ComputerPDP10.RESUME_AUTO, setting fSave to true automatically,\n             * but that gives the user no means of resetting a resumable machine that contains errors in its resume state.\n             */\n            var fSave = (/* this.resume == ComputerPDP10.RESUME_AUTO || */ Component.confirmUser(\"Click OK to save changes to this \" + PDP10.APPNAME + \" machine.\\n\\nWARNING: If you CANCEL, all disk changes will be discarded.\"));\n            this.powerOff(fSave, true);\n            /*\n             * Forcing the page to reload is an expedient option, but ugly. It's preferable to call powerOn()\n             * and rely on all the components to reset themselves to their default state.  The components with\n             * the greatest burden here are FDC and HDC, which must rely on the fReload flag to determine whether\n             * or not to unload/reload all their original auto-mounted disk images.\n             *\n             * However, if we started with a predefined state (ie, sStatePath is set), we take this shortcut, because\n             * we don't (yet) have code in place to gracefully reload the initial state (requires calling getResource()\n             * again); alternatively, we could avoid throwing that state away, but it seems better to save the memory.\n             *\n             * TODO: Make this more graceful, so that we can stop using the reloadPage() sledgehammer.\n             */\n            if (!fSave && this.sStatePath) {\n                Web.reloadPage();\n                return;\n            }\n            if (!fSave) this.fReload = true;\n            this.powerOn(ComputerPDP10.RESUME_NONE);\n            this.fReload = false;\n        } else {\n            this.reset();\n            if (this.cpu && !this.dbg) this.cpu.autoStart();\n        }\n    }\n\n    /**\n     * getMachineComponent(sType, componentPrev)\n     *\n     * @this {ComputerPDP10}\n     * @param {string} sType\n     * @param {Component|null} [componentPrev] of previously returned component, if any\n     * @return {Component|null}\n     */\n    getMachineComponent(sType, componentPrev)\n    {\n        var componentLast = componentPrev;\n        var aComponents = Component.getComponents(this.id);\n        for (var iComponent = 0; iComponent < aComponents.length; iComponent++) {\n            var component = aComponents[iComponent];\n            if (componentPrev) {\n                if (componentPrev == component) componentPrev = null;\n                continue;\n            }\n            if (component.type == sType) return component;\n        }\n        if (!componentLast) Component.log(\"Machine component type '\" + sType + \"' not found\", \"warning\");\n        return null;\n    }\n\n    /**\n     * setFocus(fScroll)\n     *\n     * NOTE: When soft keyboard buttons call us to return focus to the machine (and away from the button),\n     * the browser's default behavior is to scroll the element into view, which can be annoying, especially on iOS,\n     * where the display is more constrained, so we no longer do it by default (fScroll must be true).\n     *\n     * @this {ComputerPDP10}\n     * @param {boolean} [fScroll] (true if you really want the control scrolled into view)\n     */\n    setFocus(fScroll)\n    {\n        if (this.controlPrint) {\n            /*\n             * This seems to be recommended work-around to prevent the browser from scrolling the focused element\n             * into view.  The CPU is not a visual component, so when the CPU wants to set focus, the primary intent\n             * is to ensure that keyboard input is fielded properly.\n             */\n            var x = 0, y = 0;\n            if (!fScroll && window) {\n                x = window.scrollX;\n                y = window.scrollY;\n            }\n\n            this.controlPrint.focus();\n\n            if (!fScroll && window) {\n                window.scrollTo(x, y);\n            }\n        }\n    }\n\n    /**\n     * ComputerPDP10.init()\n     *\n     * For every machine represented by an HTML element of class \"PDP10-machine\", this function\n     * locates the HTML element of class \"computer\", extracting the JSON-encoded parameters for the\n     * Computer constructor from the element's \"data-value\" attribute, invoking the constructor to\n     * create a Computer component, and then binding any associated HTML controls to the new component.\n     */\n    static init()\n    {\n        /*\n         * In non-COMPILED builds, embedMachine() may have set XMLVERSION.\n         */\n        if (!COMPILED && XMLVERSION) PDP10.APPVERSION = XMLVERSION;\n\n        var aeMachines = Component.getElementsByClass(document, PDP10.APPCLASS + \"-machine\");\n\n        for (var iMachine = 0; iMachine < aeMachines.length; iMachine++) {\n\n            var eMachine = aeMachines[iMachine];\n            var parmsMachine = Component.getComponentParms(eMachine);\n\n            var aeComputers = Component.getElementsByClass(eMachine, PDP10.APPCLASS, \"computer\");\n\n            for (var iComputer = 0; iComputer < aeComputers.length; iComputer++) {\n\n                var eComputer = aeComputers[iComputer];\n                var parmsComputer = Component.getComponentParms(eComputer);\n\n                /*\n                 * We set fSuspended in the Computer constructor because we want to \"power up\" the\n                 * computer ourselves, after any/all bindings are in place.\n                 */\n                var computer = new ComputerPDP10(parmsComputer, parmsMachine, true);\n\n                if (DEBUG && computer.messageEnabled()) {\n                    computer.printMessage(\"onInit(\" + computer.flags.powered + \")\");\n                }\n\n                /*\n                 * Bind any \"power\", \"reset\" and \"save\" buttons.  An \"erase\" button was also considered,\n                 * but \"reset\" now provides a way to force the machine to start from scratch again, so \"erase\"\n                 * may be redundant now.\n                 */\n                Component.bindComponentControls(computer, eComputer, PDP10.APPCLASS);\n\n                /*\n                 * Power on the computer, giving every component the opportunity to reset or restore itself.\n                 */\n                if (computer.fAutoPower) computer.wait(computer.powerOn);\n            }\n        }\n    }\n\n    /**\n     * ComputerPDP10.show()\n     *\n     * When exit() is using an \"onbeforeunload\" handler, this \"onpageshow\" handler allows us to repower everything,\n     * without either resetting or restoring.  We call powerOn() with a special resume value (RESUME_REPOWER) if the\n     * computer is already marked as \"ready\", meaning the browser didn't change anything.  This \"repower\" process\n     * should be very quick, essentially just marking all components as powered again (so that, for example, the Video\n     * component will start drawing again) and firing the CPU up again.\n     */\n    static show()\n    {\n        var aeComputers = Component.getElementsByClass(document, PDP10.APPCLASS, \"computer\");\n        for (var iComputer = 0; iComputer < aeComputers.length; iComputer++) {\n            var eComputer = aeComputers[iComputer];\n            var parmsComputer = Component.getComponentParms(eComputer);\n            var computer = /** @type {ComputerPDP10} */ (Component.getComponentByType(\"Computer\", parmsComputer['id']));\n            if (computer) {\n\n                computer.flags.unloading = false;\n\n                if (DEBUG && computer.messageEnabled()) {\n                    computer.printMessage(\"onShow(\" + computer.fInitialized + \",\" + computer.flags.powered + \")\");\n                }\n\n                /*\n                 * Note that the FIRST 'onpageshow' event, and therefore the first show() callback, occurs\n                 * AFTER the the initial 'onload' event, and at that point in time, fInitialized will not be set yet.\n                 * So, practically speaking, the first show() callback isn't all that useful.\n                 */\n                if (computer.fInitialized && !computer.flags.powered) {\n                    /**\n                     * Repower the computer, notifying every component to continue running as-is.\n                     */\n                    computer.powerOn(ComputerPDP10.RESUME_REPOWER);\n                }\n            }\n        }\n    }\n\n    /**\n     * ComputerPDP10.exit()\n     *\n     * The Computer is currently the only component that uses an \"exit\" handler, which Web.onExit() defines as\n     * either an \"unload\" or \"onbeforeunload\" handler.  This gives us the opportunity to save the machine state,\n     * using our powerOff() function, before the page goes away.\n     *\n     * It's worth noting that \"onbeforeunload\" offers one nice feature when used instead of \"onload\": the entire\n     * page (and therefore this entire application) is retained in its current state by the browser (well, some\n     * browsers), so that if you go to a new URL, either by entering a new URL in the same window/tab, or by pressing\n     * the FORWARD button, and then you press the BACK button, the page is immediately restored to its previous state.\n     *\n     * In fact, that's how some browsers operate whether you have an \"onbeforeunload\" handler or not; in other words,\n     * an \"onbeforeunload\" handler doesn't change the page retention behavior of the browser.  By contrast, the mere\n     * presence of an \"onunload\" handler generally causes a browser to throw the page away once the handler returns.\n     *\n     * However, in order to safely use \"onbeforeunload\", we must add yet another handler (\"onpageshow\") to repower\n     * everything, without either resetting or restoring.  Hence, the ComputerPDP10.show() function, which calls powerOn()\n     * with a special resume value (RESUME_REPOWER) if the computer is already marked as \"ready\", meaning the browser\n     * didn't change anything.  This \"repower\" process should be very quick, essentially just marking all components as\n     * powered again (so that, for example, the Video component will start drawing again) and firing the CPU up again.\n     *\n     * Reportedly, some browsers (eg, Opera) don't support \"onbeforeunload\", in which case Component will have to use\n     * \"unload\" instead.  But even when the page must be rebuilt from scratch, the combination of browser cache and\n     * localStorage means the simulation should be restored and become operational almost immediately.\n     */\n    static exit()\n    {\n        var aeComputers = Component.getElementsByClass(document, PDP10.APPCLASS, \"computer\");\n        for (var iComputer = 0; iComputer < aeComputers.length; iComputer++) {\n            var eComputer = aeComputers[iComputer];\n            var parmsComputer = Component.getComponentParms(eComputer);\n            var computer = /** @type {ComputerPDP10} */ (Component.getComponentByType(\"Computer\", parmsComputer['id']));\n            if (computer) {\n\n                /*\n                 * Added a new flag that Component functions (eg, notice()) should check before alerting the user.\n                 */\n                computer.flags.unloading = true;\n\n                if (DEBUG && computer.messageEnabled()) {\n                    computer.printMessage(\"onExit(\" + computer.flags.powered + \")\");\n                }\n\n                if (computer.flags.powered) {\n                    /**\n                     * Power off the computer, giving every component an opportunity to save its state,\n                     * but only if 'resume' has been set AND there is no valid resume path (because if a valid resume\n                     * path exists, we'll always load our state from there, and not from whatever we save here).\n                     */\n                    computer.powerOff(!!(computer.resume && !computer.sResumePath), true);\n                }\n            }\n        }\n    }\n}\n\nComputerPDP10.STATE_FAILSAFE  = \"failsafe\";\nComputerPDP10.STATE_VALIDATE  = \"validate\";\nComputerPDP10.STATE_TIMESTAMP = \"timestamp\";\nComputerPDP10.STATE_VERSION   = \"version\";\nComputerPDP10.STATE_HOSTURL   = \"url\";\nComputerPDP10.STATE_BROWSER   = \"browser\";\nComputerPDP10.STATE_USERID    = \"user\";\n\n/*\n * The following constants define all the resume options.  Negative values (eg, RESUME_REPOWER) are for\n * internal use only, and RESUME_DELETE is not documented (it provides a way of deleting ALL saved states\n * whenever a resume is declined).  As a result, the only \"end-user\" values are 0, 1 and 2.\n */\nComputerPDP10.RESUME_REPOWER  = -1;  // resume without changing any state (for internal use only)\nComputerPDP10.RESUME_NONE     =  0;  // default (no resume)\nComputerPDP10.RESUME_AUTO     =  1;  // automatically save/restore state\nComputerPDP10.RESUME_PROMPT   =  2;  // automatically save but conditionally restore (WARNING: if restore is declined, any state is discarded)\nComputerPDP10.RESUME_DELETE   =  3;  // same as RESUME_PROMPT but discards ALL machines states whenever ANY machine restore is declined (undocumented)\n\n/*\n * Initialize every Computer on the page.\n */\nWeb.onInit(ComputerPDP10.init);\nWeb.onShow(ComputerPDP10.show);\nWeb.onExit(ComputerPDP10.exit);\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/state.js (C) Jeff Parsons 2012-2018\n */\n\n\nclass State {\n    /**\n     * State(component, sVersion, sSuffix)\n     *\n     * State objects are used by components to save/restore their state.\n     *\n     * During a save operation, components add data to a State object via set(), and then return\n     * the resulting data using data().\n     *\n     * During a restore operation, the Computer component passes the results of each data() call\n     * back to the originating component.\n     *\n     * WARNING: Since State objects are low-level objects that have no UI requirements, they do not\n     * inherit from the Component class, so you should only use class methods of Component, such as\n     * Component.assert() (or Debugger methods if the Debugger is available).\n     *\n     * NOTE: 1.01 is the first version to provide limited save/restore support using localStorage.\n     * From that point on, care must be taken to insure that any new version that's incompatible with\n     * previous localStorage data be released with a version number that is at least 1 greater,\n     * since we're tagging the localStorage data with the integer portion of the version string.\n     *\n     * @param {Component} component\n     * @param {string} [sVersion] is used to append a major version number to the key\n     * @param {string} [sSuffix] is used to append any additional suffixes to the key\n     */\n    constructor(component, sVersion, sSuffix)\n    {\n        this.id = component.id;\n        this.dbg = component.dbg;\n        this.json = \"\";\n        this.state = {};\n        this.fLoaded = this.fParsed = false;\n        this.key = State.key(component, sVersion, sSuffix);\n        this.unload(component.parms);\n    }\n\n    /**\n     * set(id, data)\n     *\n     * @this {State}\n     * @param {number|string} id\n     * @param {Object|string} data\n     */\n    set(id, data)\n    {\n        try {\n            this.state[id] = data;\n        } catch(e) {\n            Component.log(e.message);\n        }\n    }\n\n    /**\n     * get(id)\n     *\n     * @this {State}\n     * @param {number|string} id\n     * @return {Object|string|null}\n     */\n    get(id)\n    {\n        return this.state[id] || null;\n    }\n\n    /**\n     * data()\n     *\n     * @this {State}\n     * @return {Object}\n     */\n    data()\n    {\n        return this.state;\n    }\n\n    /**\n     * load(json)\n     *\n     * WARNING: Make sure you follow this call with either a call to parse() or unload(),\n     * because any stringified data that we've loaded isn't usable until it's been parsed.\n     *\n     * @this {State}\n     * @param {string|null} [json]\n     * @return {boolean} true if state exists in localStorage, false if not\n     */\n    load(json)\n    {\n        if (json) {\n            this.json = json;\n            this.fLoaded = true;\n            this.fParsed = false;\n            return true;\n        }\n        if (this.fLoaded) {\n            /*\n             * This is assumed to be a redundant load().\n             */\n            return true;\n        }\n        if (Web.hasLocalStorage()) {\n            var s = Web.getLocalStorageItem(this.key);\n            if (s) {\n                this.json = s;\n                this.fLoaded = true;\n                if (DEBUG) Component.log(\"localStorage(\" + this.key + \"): \" + s.length + \" bytes loaded\");\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * parse()\n     *\n     * This completes the load() operation, by parsing what was loaded, on the assumption there\n     * might be some benefit to deferring parsing until we've given the user a chance to confirm.\n     * Otherwise, load() could have just as easily done this, too.\n     *\n     * @this {State}\n     * @return {boolean} true if successful, false if error\n     */\n    parse()\n    {\n        var fSuccess = true;\n        if (!this.fParsed) {\n            try {\n                this.state = JSON.parse(this.json);\n                this.fParsed = true;\n            } catch (e) {\n                Component.error(e.message || e);\n                fSuccess = false;\n            }\n        }\n        return fSuccess;\n    }\n\n    /**\n     * store()\n     *\n     * @this {State}\n     * @return {boolean} true if successful, false if error\n     */\n    store()\n    {\n        var fSuccess = true;\n        if (Web.hasLocalStorage()) {\n            var s = JSON.stringify(this.state);\n            if (Web.setLocalStorageItem(this.key, s)) {\n                if (DEBUG) Component.log(\"localStorage(\" + this.key + \"): \" + s.length + \" bytes stored\");\n            } else {\n                /*\n                 * WARNING: Because browsers tend to disable all alerts() during an \"unload\" operation,\n                 * it's unlikely anyone will ever see the \"quota\" errors that occur at this point.  Need to\n                 * think of some way to notify the user that there's a problem, and offer a way of cleaning\n                 * up old states.\n                 */\n                Component.error(\"Unable to store \" + s.length + \" bytes in browser local storage\");\n                fSuccess = false;\n            }\n        }\n        return fSuccess;\n    }\n\n    /**\n     * toString()\n     *\n     * @this {State}\n     * @return {string} JSON-encoded state\n     */\n    toString()\n    {\n        return this.state? JSON.stringify(this.state) : this.json;\n    }\n\n    /**\n     * unload(parms)\n     *\n     * This discards any data saved via set() or loaded via load(), creating an empty State object.\n     * Note that you have to follow this call with an explicit call to store() if you want to remove\n     * the state from localStorage as well.\n     *\n     * @this {State}\n     * @param {Object} [parms]\n     */\n    unload(parms)\n    {\n        this.json = \"\";\n        this.state = {};\n        this.fLoaded = this.fParsed = false;\n        if (parms) this.set(\"parms\", parms);\n    }\n\n    /**\n     * clear(fAll)\n     *\n     * This unloads the current state, and then clears ALL localStorage for the current machine,\n     * independent of version, to reduce the chance of orphaned states wasting part of our limited allocation.\n     *\n     * @this {State}\n     * @param {boolean} [fAll] true to unconditionally clear ALL localStorage for the current domain\n     */\n    clear(fAll)\n    {\n        this.unload();\n        var aKeys = Web.getLocalStorageKeys();\n        for (var i = 0; i < aKeys.length; i++) {\n            var sKey = aKeys[i];\n            if (sKey && (fAll || sKey.substr(0, this.key.length) == this.key)) {\n                Web.removeLocalStorageItem(sKey);\n                if (DEBUG) Component.log(\"localStorage(\" + sKey + \") removed\");\n                aKeys.splice(i, 1);\n                i = 0;\n            }\n        }\n    }\n\n    /**\n     * State.key(component, sVersion, sSuffix)\n     *\n     * This encapsulates the key generation code.\n     *\n     * @param {Component} component\n     * @param {string} [sVersion] is used to append a major version number to the key\n     * @param {string} [sSuffix] is used to append any additional suffixes to the key\n     * @return {string} key\n     */\n    static key(component, sVersion, sSuffix)\n    {\n        var key = component.id;\n        if (sVersion) {\n            var i = sVersion.indexOf('.');\n            if (i > 0) key += \".v\" + sVersion.substr(0, i);\n        }\n        if (sSuffix) {\n            key += \".\" + sSuffix;\n        }\n        return key;\n    }\n\n    /**\n     * State.compress(aSrc)\n     *\n     * @param {Array.<number>|null} aSrc\n     * @return {Array.<number>|null} is either the original array (aSrc), or a smaller array of \"count, value\" pairs (aComp)\n     */\n    static compress(aSrc)\n    {\n        if (aSrc) {\n            var iSrc = 0;\n            var iComp = 0;\n            var aComp = [];\n            while (iSrc < aSrc.length) {\n                var n = aSrc[iSrc];\n\n                var iCompare = iSrc + 1;\n                while (iCompare < aSrc.length && aSrc[iCompare] === n) iCompare++;\n                aComp[iComp++] = iCompare - iSrc;\n                aComp[iComp++] = n;\n                iSrc = iCompare;\n            }\n            if (aComp.length < aSrc.length) return aComp;\n        }\n        return aSrc;\n    }\n\n    /**\n     * State.decompress(aComp)\n     *\n     * @param {Array.<number>} aComp\n     * @param {number} nLength is expected length of decompressed data\n     * @return {Array.<number>}\n     */\n    static decompress(aComp, nLength)\n    {\n        var iDst = 0;\n        var aDst = new Array(nLength);\n        var iComp = 0;\n        while (iComp < aComp.length - 1) {\n            var c = aComp[iComp++];\n            var n = aComp[iComp++];\n            while (c--) {\n                aDst[iDst++] = n;\n            }\n        }\n\n        return aDst;\n    }\n\n    /**\n     * State.compressEvenOdd(aSrc)\n     *\n     * This is a very simple variation on compress() that compresses all the EVEN elements of aSrc first,\n     * followed by all the ODD elements.  This tends to work better on EGA video memory, because when odd/even\n     * addressing is enabled (eg, for text modes), the DWORD values tend to alternate, which is the worst case\n     * for compress(), but the best case for compressEvenOdd().\n     *\n     * One wrinkle we support: if the first element is uninitialized, then we assume the entire array is undefined,\n     * and return an empty compressed array.  Conversely, decompressEvenOdd() will take an empty compressed array\n     * and return an uninitialized array.\n     *\n     * @param {Array.<number>|null} aSrc\n     * @return {Array.<number>|null} is either the original array (aSrc), or a smaller array of \"count, value\" pairs (aComp)\n     */\n    static compressEvenOdd(aSrc)\n    {\n        if (aSrc) {\n            var iComp = 0, aComp = [];\n            if (aSrc[0] !== undefined) {\n                for (var off = 0; off < 2; off++) {\n                    var iSrc = off;\n                    while (iSrc < aSrc.length) {\n                        var n = aSrc[iSrc];\n                        var iCompare = iSrc + 2;\n                        while (iCompare < aSrc.length && aSrc[iCompare] === n) iCompare += 2;\n                        aComp[iComp++] = (iCompare - iSrc) >> 1;\n                        aComp[iComp++] = n;\n                        iSrc = iCompare;\n                    }\n                }\n            }\n            if (aComp.length < aSrc.length) return aComp;\n        }\n        return aSrc;\n    }\n\n    /**\n     * State.decompressEvenOdd(aComp, nLength)\n     *\n     * This is the counterpart to compressEvenOdd().  Note that because there's nothing in the compressed sequence\n     * that differentiates a compress() sequence from a compressEvenOdd() sequence, you simply have to be consistent:\n     * if you used even/odd compression, then you must use even/odd decompression.\n     *\n     * @param {Array.<number>} aComp\n     * @param {number} nLength is expected length of decompressed data\n     * @return {Array.<number>}\n     */\n    static decompressEvenOdd(aComp, nLength)\n    {\n        var iDst = 0;\n        var aDst = new Array(nLength);\n        var iComp = 0;\n        while (iComp < aComp.length - 1) {\n            var c = aComp[iComp++];\n            var n = aComp[iComp++];\n            while (c--) {\n                aDst[iDst] = n;\n                iDst += 2;\n            }\n            /*\n             * The output of a \"count,value\" pair will never exceed the end of the output array, so as soon as we reach it\n             * the first time, we know it's time to switch to ODD elements, and as soon as we reach it again, we should be\n             * done.\n             */\n\n            if (iDst == nLength) iDst = 1;\n        }\n\n        return aDst;\n    }\n}\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/embed.js (C) Jeff Parsons 2012-2018\n */\n\n\n/*\n * We now support asynchronous XML and XSL file loads; simply set fAsync (below) to true.\n *\n * NOTE: For that support to work, we have to keep track of the number of machines on the page\n * (ie, how many embedMachine() calls were issued), reduce the count as each machine XML file\n * is fully transformed into HTML, and when the count finally returns to zero, notify all the\n * machine component init() handlers.\n *\n * Also, to prevent those init() handlers from running prematurely, we must disable all page\n * notification events at the start of the embedding process (Web.enablePageEvents(false)) and\n * re-enable them at the end (Web.enablePageEvents(true)).\n */\nvar fAsync = true;\nvar cAsyncMachines = 0;\n\n/**\n * loadXML(sFile, idMachine, sAppName, sAppClass, sParms, fResolve, display, done)\n *\n * This is the preferred way to load all XML and XSL files. It uses getResource()\n * to load them as strings, which parseXML() can massage before parsing/transforming them.\n *\n * For example, since I've been unable to get the XSLT document() function to work inside any\n * XSL document loaded by JavaScript's XSLT processor, that has prevented me from dynamically\n * loading any XML machine file that uses the \"ref\" attribute to refer to and incorporate\n * another XML document.\n *\n * To solve that, I've added an fResolve parameter that tells parseXML() to fetch any\n * referenced documents ITSELF and insert them into the XML string prior to parsing, instead\n * of relying on the XSLT template to pull them in.  That fetching is handled by resolveXML(),\n * which iterates over the XML until all \"refs\" have been resolved (including any nested\n * references).\n *\n * Also, XSL files with a <!DOCTYPE [...]> cause MSIE's Microsoft.XMLDOM.loadXML() function\n * to choke, so I strip that out prior to parsing as well.\n *\n * TODO: Figure out why the XSLT document() function works great when the web browser loads an\n * XML file (and the associated XSL file) itself, but does not work when loading documents via\n * JavaScript XSLT support. Is it broken, is it a security issue, or am I just calling it wrong?\n *\n * @param {string} sXMLFile\n * @param {string|null|undefined} idMachine\n * @param {string|null|undefined} sAppName\n * @param {string|null|undefined} sAppClass\n * @param {string|null|undefined} sParms\n * @param {boolean} fResolve is true to resolve any \"ref\" attributes\n * @param {function(string)} display\n * @param {function(string,Object)} done (string contains the unparsed XML string data, and Object contains a parsed XML object)\n */\nfunction loadXML(sXMLFile, idMachine, sAppName, sAppClass, sParms, fResolve, display, done)\n{\n    var doneLoadXML = function(sURLName, sXML, nErrorCode) {\n        if (nErrorCode) {\n            if (!sXML) sXML = \"unable to load \" + sXMLFile + \" (\" + nErrorCode + \")\";\n            done(sXML, null);\n            return;\n        }\n        parseXML(sXML, sXMLFile, idMachine, sAppName, sAppClass, sParms, fResolve, display, done);\n    };\n    display(\"Loading \" + sXMLFile + \"...\");\n    Web.getResource(sXMLFile, null, fAsync, doneLoadXML);\n}\n\n/**\n * parseXML(sXML, sXMLFile, idMachine, sAppName, sAppClass, sParms, fResolve, display, done)\n *\n * Generates an XML document from an XML string. This function also provides a work-around for XSLT's\n * lack of support for the document() function (at least on some browsers), by replacing every reference\n * tag (ie, a tag with a \"ref\" attribute) with the contents of the referenced file.\n *\n * @param {string} sXML\n * @param {string|null} sXMLFile\n * @param {string|null|undefined} idMachine\n * @param {string|null|undefined} sAppName\n * @param {string|null|undefined} sAppClass\n * @param {string|null|undefined} sParms\n * @param {boolean} fResolve is true to resolve any \"ref\" attributes; default is false\n * @param {function(string)} display\n * @param {function(string,Object)} done (string contains the unparsed XML string data, and Object contains a parsed XML object)\n */\nfunction parseXML(sXML, sXMLFile, idMachine, sAppName, sAppClass, sParms, fResolve, display, done)\n{\n    var buildXML = function(sXML, sError) {\n        if (sError) {\n            done(sError, null);\n            return;\n        }\n        if (idMachine) {\n\n            /*\n             * A more sensible place to record the machine XML would be embedMachine(), like we do for the\n             * XSL file, but since we're about to modify the original machine XML, it's best to record it now.\n             */\n            Component.addMachineResource(idMachine, sXMLFile, sXML);\n\n            var sURL = sXMLFile;\n            if (sURL && sURL.indexOf('/') < 0 && window.location.pathname.slice(-1) == '/') {\n                sURL = window.location.pathname + sURL;\n            }\n            /*\n             * We embed the URL of the XML file both as a separate \"xml\" attribute for easy access from the\n             * XSL file, and as part of the \"parms\" attribute for easy access from machines (see getMachineParm()).\n             */\n            if (!sParms) {\n                sParms = '{';\n            } else if (sParms.slice(-1) == '}') {\n                sParms = sParms.slice(0, -1);\n                if (sParms.length > 1) sParms += ',';\n            } else {            // sParms must just be a \"state\" file, so encode it as a \"state\" property\n                sParms = '{state:\"' + sParms + '\",';\n            }\n            sParms += 'url:\"' + sURL + '\"}';\n            /*\n             * Note that while we no longer generate a machine XML file with a \"state\" attribute (because it's\n             * encoded inside the \"parms\" attribute), the XSL file must still cope with \"state\" attributes inside\n             * other XML files; for example, manifest XML files like /apps/pc/1981/visicalc/manifest.xml contain\n             * machine elements with \"state\" attributes that must still be passed down to the computer element\n             * \"the old fashioned way\".\n             *\n             * Until/unless that changes, components.xsl cannot be simplified as much as I might have hoped.\n             */\n            if (typeof resources == 'object') sURL = null;      // turn off URL inclusion if we have embedded resources\n            sParms = sParms.replace(/\\$/g, \"$$$$\");\n            sXML = sXML.replace(/(<machine[^>]*\\sid=)(['\"]).*?\\2/, \"$1$2\" + idMachine + \"$2\" + (sParms? \" parms='\" + sParms + \"'\" : \"\") + (sURL? ' url=\"' + sURL + '\"' : ''));\n        }\n\n        if (!fResolve) {\n            /*\n             * I'm trying to switch to a shared components.xsl (at least for all PC-class machines),\n             * but in the interim, that means hacking the XSL file on the fly to reflect the actual class.\n             */\n            sXML = sXML.replace(/(<xsl:variable name=\"APPNAME\">).*?(<\\/xsl:variable>)/, \"$1\" + sAppName + \"$2\");\n            sXML = sXML.replace(/(<xsl:variable name=\"APPCLASS\">).*?(<\\/xsl:variable>)/, \"$1\" + sAppClass + \"$2\");\n\n            /*\n             * Non-COMPILED kludge to replace the version number template in the XSL file (which we assume we're reading,\n             * since fResolve is false) with whatever XMLVERSION we extracted from the XML file (see corresponding kludge below).\n             *\n             * ES6 ALERT: Template strings.\n             */\n            if (!COMPILED && XMLVERSION) {\n                sXML = sXML.replace(/<xsl:variable name=\"APPVERSION\">1.x.x<\\/xsl:variable>/, `<xsl:variable name=\"APPVERSION\">${XMLVERSION}</xsl:variable>`);\n            }\n        }\n\n        /*\n         * If the resource we requested is not really an XML file (or the file didn't exist and the server simply returned\n         * a message like \"Cannot GET /devices/pc/machine/5150/cga/64kb/donkey/machine.xml\"), we'd like to display a more\n         * meaningful message, because the XML DOM parsers will blithely return a document that contains nothing useful; eg:\n         *\n         *      This page contains the following errors:error on line 1 at column 1:\n         *      Document is empty Below is a rendering of the page up to the first error.\n         *\n         * Supposedly, the IE XML DOM parser will throw an exception, but I haven't tested that, and unless all other\n         * browsers do that, that's not helpful.\n         *\n         * The best I can do at this stage (assuming Web.getResource() didn't drop any error information on the floor)\n         * is verify that the requested resource \"looks like\" valid XML (in other words, it begins with a '<').\n         */\n        var xmlDoc = null;\n        if (sXML.charAt(0) == '<') {\n            try {\n                /*\n                 * Another hack for MSIE, which fails to load XSL documents containing a <!DOCTYPE [...]> tag.\n                 *\n                 * This is also why the XSLTProcessor 'transformToFragment' method in Microsoft Edge silently failed,\n                 * so I had pull this hack out of the \"ActiveXObject\" code.  And rather than add yet-another Microsoft\n                 * browser check, I'm going to try doing this across the board, and hope that none of the other XSLT\n                 * processors fail *without* the DOCTYPE tag.\n                 */\n                if (!fResolve) {\n                    sXML = sXML.replace(/<!DOCTYPE(.|[\\r\\n])*]>\\s*/g, \"\");\n                }\n                /*\n                 * Beginning with Microsoft Edge and the corresponding release of Windows 10, all the\n                 * 'ActiveXObject' crud has gone away; but of course, this code must remain in place if\n                 * we want to continue supporting older Internet Explorer browsers (ie, back to IE9).\n                 */\n                /** @namespace window.ActiveXObject */\n                if (window.ActiveXObject || 'ActiveXObject' in window) {        // second test is required for IE11 on Windows 8.1\n                    xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n                    xmlDoc.async = false;\n                    xmlDoc['loadXML'](sXML);\n                } else {\n                    /** @namespace window.DOMParser */\n                    xmlDoc = (new window.DOMParser()).parseFromString(sXML, \"text/xml\");\n                }\n            } catch(e) {\n                xmlDoc = null;\n                sXML = e.message;\n            }\n        } else {\n            sXML = \"unrecognized XML: \" + (sXML.length > 255? sXML.substr(0, 255) + \"...\" : sXML);\n        }\n        done(sXML, xmlDoc);\n    };\n    if (sXML) {\n        if (PRIVATE) sXML = sXML.replace(/\\/library.xml/, \"/private/library.xml\");\n        if (fResolve) {\n            resolveXML(sXML, display, buildXML);\n            return;\n        }\n        buildXML(sXML, null);\n        return;\n    }\n    done(\"no data\" + (sXMLFile? \" for file: \" + sXMLFile : \"\"), null);\n}\n\n/**\n * resolveXML(sXML, display, done)\n *\n * Replaces every tag with a \"ref\" attribute with the contents of the corresponding file.\n *\n * TODO: Fix some of the limitations of this code, such as: 1) requiring the \"ref\" attribute\n * to appear as the tag's first attribute, 2) requiring the \"ref\" attribute to be double-quoted,\n * and 3) requiring the \"ref\" tag to be self-closing.\n *\n * @param {string} sXML\n * @param {function(string)} display\n * @param {function(string,(string|null))} done (the first string contains the resolved XML data, the second is for any error message)\n */\nfunction resolveXML(sXML, display, done)\n{\n    var matchRef;\n    var reRef = /<([a-z]+)\\s+ref=\"(.*?)\"(.*?)\\/>/g;\n\n    if ((matchRef = reRef.exec(sXML))) {\n\n        var sRefFile = matchRef[2];\n\n        var doneReadXML = function(sURLName, sXMLRef, nErrorCode) {\n            if (nErrorCode || !sXMLRef) {\n                done(sXML, \"unable to resolve XML reference: \" + matchRef[0] + \" (\" + nErrorCode + \")\");\n                return;\n            }\n            /*\n             * If there are additional attributes in the \"referring\" XML tag, we want to insert them\n             * into the \"referred\" XML tag; attributes that don't exist in the referred tag should be\n             * appended, and attributes that DO exist should be overwritten.\n             */\n            var sRefAttrs = matchRef[3];\n            if (sRefAttrs) {\n                var aXMLRefTag = sXMLRef.match(new RegExp(\"<\" + matchRef[1] + \"[^>]*>\"));\n                if (aXMLRefTag) {\n                    var sXMLNewTag = aXMLRefTag[0];\n                    /*\n                     * Iterate over all the attributes in the \"referring\" XML tag (sRefAttrs)\n                     */\n                    var matchAttr;\n                    var reAttr = /( [a-z]+=)(['\"])(.*?)\\2/gi;\n                    while ((matchAttr = reAttr.exec(sRefAttrs))) {\n                        if (sXMLNewTag.toLowerCase().indexOf(matchAttr[1].toLowerCase()) < 0) {\n                            /*\n                             * This is the append case....\n                             */\n                            sXMLNewTag = sXMLNewTag.replace(\">\", matchAttr[0] + \">\");\n                        } else {\n                            /*\n                             * This is the overwrite case....\n                             */\n                            sXMLNewTag = sXMLNewTag.replace(new RegExp(matchAttr[1] + \"(['\\\"])(.*?)\\\\1\"), matchAttr[0]);\n                        }\n                    }\n                    if (aXMLRefTag[0] != sXMLNewTag) {\n                        sXMLRef = sXMLRef.replace(aXMLRefTag[0], sXMLNewTag);\n                    }\n                } else {\n                    done(sXML, \"missing <\" + matchRef[1] + \"> in \" + sRefFile);\n                    return;\n                }\n            }\n\n            /*\n             * Apparently when a Windows Azure server delivers one of my XML files, it may modify the first line:\n             *\n             *      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n\n             *\n             * I didn't determine exactly what it was doing at this point (probably just changing the \\n to \\r\\n),\n             * but in any case, relaxing the following replace() solved it.\n             */\n            sXMLRef = sXMLRef.replace(/<\\?xml[^>]*>[\\r\\n]*/, \"\");\n\n            sXML = sXML.replace(matchRef[0], sXMLRef);\n\n            resolveXML(sXML, display, done);\n        };\n\n        display(\"Loading \" + sRefFile + \"...\");\n        Web.getResource(sRefFile, null, fAsync, doneReadXML);\n        return;\n    }\n    done(sXML, null);\n}\n\n/**\n * embedMachine(sAppName, sAppClass, sVersion, idMachine, sXMLFile, sXSLFile, sParms)\n *\n * This allows to you embed a machine on a web page, by transforming the machine XML into HTML.\n *\n * @param {string} sAppName is the app name (eg, \"PCx86\")\n * @param {string} sAppClass is the app class (eg, \"pcx86\"); also known as the machine class\n * @param {string} sVersion is the app version (eg, \"1.15.7\")\n * @param {string} idMachine\n * @param {string} [sXMLFile]\n * @param {string} [sXSLFile]\n * @param {string} [sParms]\n * @return {boolean} true if successful, false if error\n */\nfunction embedMachine(sAppName, sAppClass, sVersion, idMachine, sXMLFile, sXSLFile, sParms)\n{\n    var eMachine, eWarning, fSuccess = true;\n\n    if (!sXMLFile) {\n        sXMLFile = \"machine.xml\";\n        if (!sXSLFile) sXSLFile = \"components.xsl\";\n    }\n    \n    cAsyncMachines++;\n    Component.addMachine(idMachine);\n\n    var doneMachine = function() {\n\n        if (!--cAsyncMachines) {\n            if (fAsync) Web.enablePageEvents(true);\n        }\n    };\n\n    var displayError = function(sError) {\n        Component.log(sError);\n        displayMessage(\"Error: \" + sError);\n        if (fSuccess) doneMachine();\n        fSuccess = false;\n    };\n\n    var displayMessage = function(sMessage) {\n        if (eWarning === undefined) {\n            /*\n             * Our MarkOut module (in convertMDMachineLinks()) creates machine containers that look like:\n             *\n             *      <div id=\"' + sMachineID + '\" class=\"machine-placeholder\"><p>Embedded PC</p><p class=\"machine-warning\">...</p></div>\n             *\n             * with the \"machine-warning\" paragraph pre-populated with a warning message that the user will\n             * see if nothing at all happens.  But hopefully, in the normal case (and especially the error case),\n             * *something* will have happened.\n             *\n             * Note that it is the HTMLOut module (in processMachines()) that ultimately decides which scripts to\n             * include and then generates the embedXXX() call.\n             */\n            var aeWarning = (eMachine && Component.getElementsByClass(eMachine, \"machine-warning\"));\n            eWarning = (aeWarning && aeWarning[0]) || eMachine;\n        }\n        if (eWarning) eWarning.innerHTML = Str.escapeHTML(sMessage);\n    };\n\n    try {\n        eMachine = document.getElementById(idMachine);\n        if (eMachine) {\n\n            /*\n             * If we have a 'css' resource, add it to the page first.\n             */\n            var css;\n            if (typeof resources == \"object\" && (css = resources['css'])) {\n                var head = document.head || document.getElementsByTagName('head')[0];\n                var style = document.createElement('style');\n                style.type = 'text/css';\n                // noinspection JSDeprecatedSymbols\n                if (style.styleSheet) {\n                    // noinspection JSDeprecatedSymbols\n                    style.styleSheet.cssText = css;\n                } else {\n                    style.appendChild(document.createTextNode(css));\n                }\n                head.appendChild(style);\n            }\n\n            if (!sXSLFile) {\n                /*\n                 * Now that PCjs is an open-source project, we can make the following test more flexible,\n                 * and revert to the internal template if DEBUG *or* internal version (instead of *and*).\n                 *\n                 * Third-party sites that don't use the PCjs server will ALWAYS want to specify a fully-qualified\n                 * path to the XSL file, unless they choose to mirror our folder structure.\n                 */\n                var sAppFolder = sAppClass;\n                if (DEBUG || sVersion == \"1.x.x\") {\n                    if (sAppClass != \"c1pjs\") sAppFolder = \"shared\";\n                    sXSLFile = \"/modules/\" + sAppFolder + \"/templates/components.xsl\";\n                } else {\n                    if (sAppClass.substr(0, 3) == \"pdp\") sAppFolder = \"pdpjs\";\n                    sXSLFile = \"/versions/\" + sAppFolder + \"/\" + sVersion + \"/components.xsl\";\n                }\n            }\n\n            var processXML = function(sXML, xml) {\n                if (!xml) {\n                    displayError(sXML);\n                    return;\n                }\n\n                /*\n                 * Non-COMPILED kludge to extract the version number from the stylesheet path in the machine XML file;\n                 * we don't need this code in COMPILED (non-DEBUG) releases, because APPVERSION is hard-coded into them.\n                 */\n                if (!COMPILED) {\n                    var aMatch = sXML.match(/<\\?xml-stylesheet[^>]* href=(['\"])[^'\"]*?\\/([0-9.]*)\\/([^'\"]*)\\1/);\n                    if (aMatch) XMLVERSION = aMatch[2];\n                }\n\n                var transformXML = function(sXSL, xsl) {\n                    if (!xsl) {\n                        displayError(sXSL);\n                        return;\n                    }\n\n                    /*\n                     * Record the XSL file, in case someone wants to save the entire machine later.\n                     * \n                     * NOTE: sXSLFile will never be undefined by this point, but apparently the Closure Compiler doesn't realize that.  \n                     */\n                    Component.addMachineResource(idMachine, sXSLFile || \"\", sXSL);\n\n                    /*\n                     * The <machine> template in components.xsl now generates a \"machine div\" that makes\n                     * the div we required the caller of embedMachine() to provide redundant, so instead\n                     * of appending this fragment to the caller's node, we REPLACE the caller's node.\n                     * This works only because because we ALSO inject the caller's \"machine div\" ID into\n                     * the fragment's ID during parseXML().\n                     *\n                     *      eMachine.innerHTML = sFragment;\n                     *\n                     * Also, if the transform function fails, make sure you're using the appropriate\n                     * \"components.xsl\" and not a \"machine.xsl\", because the latter will not produce valid\n                     * embeddable HTML (and is the most common cause of failure at this final stage).\n                     */\n                    displayMessage(\"Processing \" + sXMLFile + \"...\");\n\n                    /*\n                     * Beginning with Microsoft Edge and the corresponding release of Windows 10, all the\n                     * 'ActiveXObject' crud has gone away; but of course, this code must remain in place if\n                     * we want to continue supporting older Internet Explorer browsers (ie, back to IE9).\n                     */\n                    if (window.ActiveXObject || 'ActiveXObject' in window) {        // second test is required for IE11 on Windows 8.1\n                        var sFragment = xml['transformNode'](xsl);\n                        if (sFragment) {\n                            eMachine.outerHTML = sFragment;\n                            doneMachine();\n                        } else {\n                            displayError(\"transformNodeToObject failed\");\n                        }\n                    }\n                    else if (document.implementation && document.implementation.createDocument) {\n                        var xsltProcessor = new XSLTProcessor();\n                        xsltProcessor['importStylesheet'](xsl);\n                        var eFragment = xsltProcessor['transformToFragment'](xml, document);\n                        if (eFragment) {\n                            /*\n                             * This fails in Microsoft Edge...\n                             *\n                            var machine = eFragment.getElementById(idMachine);\n                            if (!machine) {\n                                displayError(\"machine generation failed: \" + idMachine);\n                            } else\n                            */\n                            if (eMachine.parentNode) {\n                                eMachine.parentNode.replaceChild(eFragment, eMachine);\n                                doneMachine();\n                            } else {\n                                /*\n                                 * NOTE: This error can occur if our Node web server, when processing a folder with\n                                 * both a manifest.xml with a machine.xml reference AND a README.md containing a\n                                 * machine link, generates duplicate embedXXX() calls for the same machine; if the\n                                 * first embedXXX() call finds its target, subsequent calls for the same target will\n                                 * fail.\n                                 *\n                                 * Technically, such a folder is in a misconfigured state, but it happens, in part\n                                 * because when we switched to the Jekyll web server, we had to add machine links to\n                                 * all README.md files where we had previously relied on manifest.xml or machine.xml\n                                 * processing.  This is because the Jekyll web server currently doesn't process XML\n                                 * files, nor is support for that likely to be added any time soon; it was a nice\n                                 * feature of the Node web server, but it's not clear that it's worth doing for Jekyll.\n                                 */\n                                displayError(\"invalid machine element: \" + idMachine);\n                            }\n                        } else {\n                            displayError(\"transformToFragment failed\");\n                        }\n                    } else {\n                        /*\n                         * Perhaps I should have performed this test at the outset; on the other hand, I'm\n                         * not aware of any browsers don't support one or both of the above XSLT transformation\n                         * methods, so treat this as a bug.\n                         */\n                        displayError(\"unable to transform XML: unsupported browser\");\n                    }\n                };\n                /*\n                 * NOTE: sXSLFile will never be undefined by this point, but apparently the Closure Compiler doesn't realize that.  \n                 */\n                loadXML(sXSLFile || \"\", null, sAppName, sAppClass, null, false, displayMessage, transformXML);\n            };\n\n            if (sXMLFile.charAt(0) != '<') {\n                loadXML(sXMLFile, idMachine, sAppName, sAppClass, sParms, true, displayMessage, processXML);\n            } else {\n                parseXML(sXMLFile, null, idMachine, sAppName, sAppClass, sParms, false, displayMessage, processXML);\n            }\n        } else {\n            displayError(\"missing machine element: \" + idMachine);\n        }\n    } catch(e) {\n        displayError(e.message);\n    }\n    return fSuccess;\n}\n\n/**\n * embedC1P(idMachine, sXMLFile, sXSLFile)\n *\n * @param {string} idMachine\n * @param {string} [sXMLFile]\n * @param {string} [sXSLFile]\n * @return {boolean} true if successful, false if error\n */\nfunction embedC1P(idMachine, sXMLFile, sXSLFile)\n{\n    if (fAsync) Web.enablePageEvents(false);\n    return embedMachine(\"C1Pjs\", \"c1pjs\", APPVERSION, idMachine, sXMLFile, sXSLFile);\n}\n\n/**\n * embedPCx86(idMachine, sXMLFile, sXSLFile, sParms)\n *\n * @param {string} idMachine\n * @param {string} [sXMLFile]\n * @param {string} [sXSLFile]\n * @param {string} [sParms]\n * @return {boolean} true if successful, false if error\n */\nfunction embedPCx86(idMachine, sXMLFile, sXSLFile, sParms)\n{\n    if (fAsync) Web.enablePageEvents(false);\n    return embedMachine(\"PCx86\", \"pcx86\", APPVERSION, idMachine, sXMLFile, sXSLFile, sParms);\n}\n\n/**\n * embedPC8080(idMachine, sXMLFile, sXSLFile, sParms)\n *\n * @param {string} idMachine\n * @param {string} [sXMLFile]\n * @param {string} [sXSLFile]\n * @param {string} [sParms]\n * @return {boolean} true if successful, false if error\n */\nfunction embedPC8080(idMachine, sXMLFile, sXSLFile, sParms)\n{\n    if (fAsync) Web.enablePageEvents(false);\n    return embedMachine(\"PC8080\", \"pc8080\", APPVERSION, idMachine, sXMLFile, sXSLFile, sParms);\n}\n\n/**\n * embedPDP10(idMachine, sXMLFile, sXSLFile, sParms)\n *\n * @param {string} idMachine\n * @param {string} [sXMLFile]\n * @param {string} [sXSLFile]\n * @param {string} [sParms]\n * @return {boolean} true if successful, false if error\n */\nfunction embedPDP10(idMachine, sXMLFile, sXSLFile, sParms)\n{\n    if (fAsync) Web.enablePageEvents(false);\n    return embedMachine(\"PDPjs\", \"pdp10\", APPVERSION, idMachine, sXMLFile, sXSLFile, sParms);\n}\n\n/**\n * embedPDP11(idMachine, sXMLFile, sXSLFile, sParms)\n *\n * @param {string} idMachine\n * @param {string} [sXMLFile]\n * @param {string} [sXSLFile]\n * @param {string} [sParms]\n * @return {boolean} true if successful, false if error\n */\nfunction embedPDP11(idMachine, sXMLFile, sXSLFile, sParms)\n{\n    if (fAsync) Web.enablePageEvents(false);\n    return embedMachine(\"PDPjs\", \"pdp11\", APPVERSION, idMachine, sXMLFile, sXSLFile, sParms);\n}\n\n/**\n * findMachineComponent(idMachine, sType)\n *\n * @param {string} idMachine\n * @param {string} sType\n * @return {Component|null}\n */\nfunction findMachineComponent(idMachine, sType)\n{\n    return Component.getComponentByType(sType, idMachine + \".machine\");\n}\n\n/**\n * commandMachine(control, fSingle, idMachine, sComponent, sCommand, sValue)\n *\n * Use Component methods to find the requested component for a specific machine, and if the component is found,\n * then check its 'exports' table for an entry matching the specified command string, and if an entry is found, then\n * the corresponding function is called with the specified data.\n *\n * @param {Object} control\n * @param {boolean} fSingle\n * @param {string} idMachine\n * @param {string} sComponent\n * @param {string} sCommand\n * @param {string} [sValue]\n * @return {boolean}\n */\nfunction commandMachine(control, fSingle, idMachine, sComponent, sCommand, sValue)\n{\n    if (sCommand == \"script\") {\n        if (Component.processScript(idMachine, sValue)) {\n            if (fSingle) control.disabled = true;\n            return true;\n        }\n        return false;\n    }\n    if (sComponent) {\n        var component = Component.getComponentByType(sComponent, idMachine + \".machine\");\n        if (component) {\n            var exports = component['exports'];\n            if (exports) {\n                var fnCommand = exports[sCommand];\n                if (fnCommand) {\n                    if (fnCommand.call(component, sValue)) {\n                        if (fSingle) control.disabled = true;\n                        return true;\n                    }\n                    return false;\n                }\n            }\n        }\n    }\n    console.log(\"unimplemented: commandMachine('\" + idMachine + \"','\" + sComponent + \"','\" + sCommand + \"','\" + sValue + \"')\");\n    return false;\n}\n\n/**\n * Prevent the Closure Compiler from renaming functions we want to export, by adding them as global properties.\n *\n * TODO: Consider making all these functions properties on a single global object (eg, 'PCjs'), to minimize global\n * pollution and risk of name collision.\n */\nif (APPNAME == \"C1Pjs\") {\n    window['embedC1P']    = embedC1P;\n}\nif (APPNAME == \"PCx86\") {\n    window['embedPC']     = embedPCx86;         // WARNING: embedPC() deprecated as of v1.23.0\n    window['embedPCx86']  = embedPCx86;\n}\nif (APPNAME == \"PC8080\") {\n    window['embedPC8080'] = embedPC8080;\n}\nif (APPNAME == \"PDPjs\") {\n    window['embedPDP10']  = embedPDP10;\n    window['embedPDP11']  = embedPDP11;\n}\n\nwindow['commandMachine'] = commandMachine;\n\nwindow['enableEvents'] = Web.enablePageEvents;\nwindow['sendEvent']    = Web.sendPageEvent;\n"]}