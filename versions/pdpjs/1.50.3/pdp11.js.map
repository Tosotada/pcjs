{"version":3,"file":"pdp11.js","lineCount":409,"mappings":"A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,CAAA,CCoCAA,GAC4D,UAAxD,EAAsB,MAAO,OAAA,iBAA7B,CACA,MAAA,eADA,CAEA,QAAQ,CAAC,CAAD,CAAS,CAAT,CAAmB,CAAnB,CAA+B,CAOjC,CAAJ,EAAc,KAAA,UAAd,EAAiC,CAAjC,EAA2C,MAAA,UAA3C,GACA,CAAA,CAAO,CAAP,CADA,CACmB,CAAA,MADnB,CAPqC,CDvC3C,CE2CAC,GAb2B,WAAlB,EAAC,MAAO,OAAR,EAAiC,MAAjC,GAa0B,IAb1B,CAa0B,IAb1B,CAEe,WAAlB,EAAC,MAAO,OAAR,EAA2C,IAA3C,EAAiC,MAAjC,CAAmD,MAAnD,CAW6B,IChBd,SAAA,GAAQ,EAAG,CAE9BC,EAAA,CAAqB,QAAQ,EAAG,EAE3BD,GAAA,OAAL,GACEA,EAAA,OADF,CAC6BE,EAD7B,CAJ8B,CAehC,IAAAA,GAAuD,QAAQ,EAAG,CAChE,IAAI,EAAU,CAUd,OAJA,SAAe,CAAC,CAAD,CAAkB,CAC/B,MA9BoBC,gBA8BpB,EAC6B,CAD7B,EACgD,EADhD,EACuD,CAAA,EAFxB,CAP+B,CAAZ,EAoBzB;QAAA,GAAQ,EAAG,CACtCF,EAAA,EACA,KAAI,EAAiBD,EAAA,OAAA,SAChB,EAAL,GACE,CADF,CACmBA,EAAA,OAAA,SADnB,CAEMA,EAAA,OAAA,CAAyB,UAAzB,CAFN,CAK8C,WAA9C,EAAI,MAAO,MAAA,UAAA,CAAgB,CAAhB,CAAX,EACED,EAAA,CACI,KAAA,UADJ,CACqB,CADrB,CACqC,CAC/B,aAAc,CAAA,CADiB,CAE/B,SAAU,CAAA,CAFqB,CAO/B,MAAO,QAAQ,EAAG,CAChB,MAAOK,GAAA,CAAsB,IAAtB,CADS,CAPa,CADrC,CAeFC,GAAA,CAA6B,QAAQ,EAAG,EAxBF,CAkChB,QAAA,GAAQ,CAAC,CAAD,CAAQ,CACtC,IAAI,EAAQ,CACZ,OAAOC,GAAA,CAA0B,QAAQ,EAAG,CAC1C,MAAI,EAAJ,CAAY,CAAA,OAAZ,CACS,CACL,KAAM,CAAA,CADD,CAEL,MAAO,CAAA,CAAM,CAAA,EAAN,CAFF,CADT,CAMS,CAAC,KAAM,CAAA,CAAP,CAPiC,CAArC,CAF+B,CA0BZ,QAAA,GAAQ,CAAC,CAAD,CAAO,CACzCD,EAAA,EAEI,EAAA,CAAW,CAAC,KAAM,CAAP,CAKf,EAAA,CAASL,EAAA,OAAA,SAAT,CAAA,CAA8C,QAAQ,EAAG,CAAE,MAAO,KAAT,CACzD,OAAyC,EATA,CC5FpB,QAAA,GAAQ,CAAC,CAAD,CAAW,CACxCK,EAAA,EAGAJ,GAAA,EAAAI,GAAA,EAAA,KAAI,EAAqC,CAAD,CAAW,MAAA,SAAX,CACxC,OAAO,EAAA,CAAmB,CAAA,KAAA,CAAsB,CAAtB,CAAnB,CACHD,EAAA,CAA6C,CAA7C,CANoC;ACA1C,IAAAG,GACmD,UAA/C,EAAuB,MAAO,OAAA,OAA9B,CACA,MAAA,OADA,CAEA,QAAQ,CAAC,CAAD,CAAY,CAEP,QAAA,EAAQ,EAAG,EACtB,CAAA,UAAA,CAAiB,CACjB,OAAO,KAAI,CAJO,CAHxB,CCgByB,EAAA,IAAiC,UAAjC,EAAC,MAAO,OAAA,eAAR,CACrB,EAAA,CAAA,MAAA,eADqB,KAAA,CAErB,IAAA,EAvByC,EAAA,CAAA,CAC3C,IAAI,GAAI,CAAC,GAAG,CAAA,CAAJ,CAAR,CACI,GAAI,EACR,IAAI,CACF,EAAA,UAAA,CAAc,EACd,GAAA,CAAO,EAAA,GAAP,OAAA,CAFE,CAGF,MAAO,CAAP,CAAU,EAGZ,EAAA,CAAO,CAAA,CAToC,CAuBzC,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,UAAA,CAAA,CAAA,IAAA,CAAA,UAAA,GAAA,CAAA,CAAA,KAAA,KAAA,SAAA,CAAA,CAAA,CAAA,oBAAA,CAAA,CAAA,MAAA,EAAA,CAAA,CAAA,IAFqB,CAAzB,IAAAC,GAAyB,ECSN;QAAA,EAAQ,CAAC,CAAD,CAAY,CAAZ,CAAwB,CACjD,CAAA,UAAA,CAAsBD,EAAA,CAAqB,CAAA,UAArB,CACL,EAAA,UAAA,YAAA,CAAkC,CACnD,IAAIC,EAAJ,CAGuBA,EACrB,CAAe,CAAf,CAA0B,CAA1B,CAJF,KAQE,KAAK,IAAI,CAAT,GAAc,EAAd,CACE,GAAS,WAAT,EAAI,CAAJ,CAIA,GAAI,MAAA,iBAAJ,CAA6B,CAC3B,IAAI,EAAa,MAAA,yBAAA,CAAgC,CAAhC,CAA4C,CAA5C,CACb,EAAJ,EACE,MAAA,eAAA,CAAsB,CAAtB,CAAiC,CAAjC,CAAoC,CAApC,CAHyB,CAA7B,IAOE,EAAA,CAAU,CAAV,CAAA,CAAe,CAAA,CAAW,CAAX,CAKrB,EAAA,GAAA,CAAwB,CAAA,UA5ByB,CCXhC,QAAA,GAAQ,CAAC,CAAD,CAAS,CAAT,CAAqC,CAC9D,GAAK,CAAL,CAAA,CACA,IAAI,EAAMR,EACN,EAAA,CAAQ,CAAA,MAAA,CAAa,GAAb,CACZ,KAAK,IAAI,EAAI,CAAb,CAAgB,CAAhB,CAAoB,CAAA,OAApB,CAAmC,CAAnC,CAAsC,CAAA,EAAtC,CAA2C,CACzC,IAAI,EAAM,CAAA,CAAM,CAAN,CACJ,EAAN,GAAa,EAAb,GAAmB,CAAA,CAAI,CAAJ,CAAnB,CAA8B,EAA9B,CACA,EAAA,CAAM,CAAA,CAAI,CAAJ,CAHmC,CAKvC,CAAA,CAAW,CAAA,CAAM,CAAA,OAAN,CAAqB,CAArB,CACX,EAAA,CAAO,CAAA,CAAI,CAAJ,CACP,EAAA,CAAO,CAAA,CAAS,CAAT,CACP,EAAJ,EAAY,CAAZ,EAA4B,IAA5B,EAAoB,CAApB,EACAD,EAAA,CACI,CADJ,CACS,CADT,CACmB,CAAC,aAAc,CAAA,CAAf,CAAqB,SAAU,CAAA,CAA/B,CAAqC,MAAO,CAA5C,CADnB,CAZA,CAD8D;AC1BhEU,EAAA,CAAiB,YAAjB,CAA+B,QAAQ,CAAC,CAAD,CAAO,CAC5C,MAAI,EAAJ,CAAiB,CAAjB,CAUe,QAAQ,CAAC,CAAD,CAAI,CACzB,CAAA,CAAI,MAAA,CAAO,CAAP,CACJ,IAAI,KAAA,CAAM,CAAN,CAAJ,EAAsB,QAAtB,GAAgB,CAAhB,EAAwC,CAAC,QAAzC,GAAkC,CAAlC,EAA2D,CAA3D,GAAqD,CAArD,CAA8D,MAAO,EACrE,KAAI,EAAI,IAAA,MAAA,CAAW,IAAA,IAAA,CAAS,CAAT,CAAX,CACR,OAAW,EAAJ,CAAA,CAAA,CAAQ,CAAC,CAAT,CAAa,CAJK,CAXiB,CAA9C,CCAAA,GAAA,CAAiB,WAAjB,CAA8B,QAAQ,CAAC,CAAD,CAAO,CAC3C,MAAI,EAAJ,CAAiB,CAAjB,CAUe,QAAQ,CAAC,CAAD,CAAI,CACzB,MAAO,KAAA,IAAA,CAAS,CAAT,CAAP,CAAqB,IAAA,IADI,CAXgB,CAA7C,CCAAA,GAAA,CAAiB,sBAAjB,CAAyC,QAAQ,CAAC,CAAD,CAAO,CACtD,MAAI,EAAJ,CAAiB,CAAjB,CAae,QAAQ,CAAC,CAAD,CAAQ,CAAR,CAAmB,CAAnB,CAA4B,CACjD,IAAI,EAAS,IAAA,OAAT,EAAwB,CACZ,EAAhB,CAAI,CAAJ,GACE,CADF,CACc,IAAA,IAAA,CAAS,CAAT,CAAY,CAAZ,CAA4C,CAA5C,CADd,CAGA,IAAe,IAAf,EAAI,CAAJ,EAAuB,CAAvB,CAAiC,CAAjC,CAAyC,CAAA,CAAU,CACnD,EAAA,CAAU,MAAA,CAAO,CAAP,CACI,EAAd,CAAI,CAAJ,GAAiB,CAAjB,CAA2B,IAAA,IAAA,CAAS,CAAT,CAAY,CAAZ,CAAqB,CAArB,CAA3B,CACA,KAAS,CAAT,CAAa,MAAA,CAAO,CAAP,EAAoB,CAApB,CAAb,CAAqC,CAArC,CAAyC,CAAzC,CAAkD,CAAA,EAAlD,CACE,IAAA,CAAK,CAAL,CAAA,CAAU,CAEZ,OAAO,KAX0C,CAdG,CAAxD,CX6MA;IAAAC,GAAqB,CACjB,OAAS,CAAC,EAAD,CAAI,CAAJ,CAAM,CAAN,CAAA,CAAS,GAAT,CADQ,CAEjB,OAAS,CAAC,EAAD,CAAI,CAAJ,CAAM,CAAN,CAAA,CAAS,GAAT,CAFQ,CAGjB,OAAS,CAAC,EAAD,CAAI,CAAJ,CAAM,CAAN,CAAA,CAAS,GAAT,CAHQ,CAIjB,OAAS,CAAC,EAAD,CAAI,CAAJ,CAAM,CAAN,CAAA,CAAS,GAAT,CAJQ,CAKjB,OAAS,CAAC,EAAD,CAAI,CAAJ,CAAM,CAAN,CAAA,CAAS,GAAT,CALQ,CAMjB,QAAS,CAAC,EAAD,CAAI,CAAJ,CAAM,EAAN,CAAA,CAAU,GAAV,CANQ,CAOjB,QAAS,CAAC,EAAD,CAAI,CAAJ,CAAM,EAAN,CAAA,CAAU,GAAV,CAPQ,CAQjB,QAAS,CAAC,EAAD,CAAI,CAAJ,CAAM,EAAN,CAAA,CAAU,GAAV,CARQ,CAajB,SAAS,CAAC,GAAD,CAAK,CAAL,CAAO,EAAP,CAbQ,CAcjB,SAAS,CAAC,GAAD,CAAK,CAAL,CAAO,EAAP,CAdQ,CAkBjB,OAAS,CAAC,EAAD,CAAK,CAAL,CAAO,EAAP,CAAU,GAAV,CAlBQ,CAmBjB,QAAS,CAAC,GAAD,CAAK,CAAL,CAAO,EAAP,CAAU,GAAV,CAnBQ,CAoBjB,QAAS,CAAC,GAAD,CAAK,CAAL,CAAO,EAAP,CAAU,GAAV,CApBQ,CAqBjB,SAAS,CAAC,GAAD,CAAK,CAAL,CAAO,EAAP,CAAU,GAAV,CArBQ,CAArB,CAoPIC,GAAOA,CACDC,GAAQD,CADPA,CACUE,GAASF,CADnBA,CACsBG,GAASH,CAD/BA,CACkCI,GAASJ,CAD3CA,CAC8CK,GAASL,CADvDA,CAC0DM,GAASN,CADnEA,CACsEO,GAASP,CAD/EA,CACkFQ,GAASR,CAD3FA,CAEFS,GAAST,CAFPA,CAEUU,GAASV,CAFnBA,CAEsBW,GAAQX,EAF9BA,CAEkCY,GAAQZ,EAF1CA,CAE8Ca,GAAQb,EAFtDA,CAE0Dc,GAAQd,EAFlEA,CAEsEe,GAAQf,EAF9EA,CAEkFgB,GAAQhB,EAF1FA,CAGFiB,GAAQjB,EAHNA,CAGUkB,GAAQlB,EAHlBA,CAGsBmB,GAAQnB,EAH9BA,CAGkCoB,GAAQpB,EAH1CA,CAG8CqB,GAAQrB,EAHtDA,CAG0DsB,GAAQtB,EAHlEA,CAGsEuB,GAAQvB,EAH9EA,CAGkFwB,GAAQxB,EAH1FA,CAIFyB,GAAQzB,EAJNA,CAIU0B,GAAQ1B,EAJlBA,CAIsB2B,GAAQ3B,EAJ9BA,CAIkC4B,GAAQ5B,EAJ1CA,CAKCA,IAAKA,EALNA,CAKaA,IAAKA,EALlBA,CAKyBA,IAAKA,EAL9BA,CAKqCA,IAAKA,EAL1CA;AAKiDA,EAAKA,EALtDA,CAK6DA,IAAKA,EALlEA,CAKyEA,OAAKA,EAL9EA,CAKqFA,IAAKA,EAL1FA,CAMCA,IAAKA,EANNA,CAMaA,IAAKA,EANlBA,CAMyBA,IAAKA,EAN9BA,CAMqCA,IAAKA,EAN1CA,CAMiDA,IAAKA,EANtDA,CAM6DA,IAAKA,EANlEA,CAMyEA,IAAKA,EAN9EA,CAMqFA,IAAKA,EAN1FA,CAOCA,EAAKA,EAPNA,CAOaA,EAAKA,EAPlBA,CAOyBA,EAAKA,EAP9BA,CAOqCA,EAAKA,EAP1CA,CAOiDA,EAAKA,EAPtDA,CAO6DA,EAAKA,EAPlEA,CAOyEA,EAAKA,EAP9EA,CAOqFA,EAAKA,EAP1FA,CAQCA,EAAKA,EARNA,CAQaA,EAAKA,EARlBA,CAQyBA,IAAKA,EAR9BA,CAQqCA,IAAKA,EAR1CA,CAQiDA,OAAKA,EARtDA,CAQ6DA,OAAKA,EARlEA,CAQyEA,OAAKA,EAR9EA,CAQqFA,IAAKA,EAR1FA,CASCA,IAAKA,EATNA,CASc6B,GAAI7B,EATlBA,CAS0B8B,GAAI9B,EAT9BA,CASsC+B,GAAI/B,EAT1CA,CASkDgC,GAAIhC,EATtDA,CAS8DiC,EAAIjC,EATlEA,CAS0EkC,GAAIlC,EAT9EA,CASsFmC,GAAInC,EAT1FA,CAUEoC,GAAIpC,EAVNA,CAUcqC,GAAIrC,EAVlBA,CAU0BsC,GAAItC,EAV9BA,CAUsCuC,GAAIvC,EAV1CA,CAUkDwC,GAAIxC,EAVtDA,CAU8DyC,GAAIzC,EAVlEA,CAU0E0C,GAAI1C,EAV9EA,CAUsF2C,GAAI3C,EAV1FA,CAWE4C,GAAI5C,EAXNA,CAWc6C,EAAI7C,EAXlBA,CAW0B8C,GAAI9C,EAX9BA,CAWsC+C,GAAI/C,EAX1CA,CAWkDgD,GAAIhD,EAXtDA,CAW8DiD,GAAIjD,EAXlEA,CAW0EkD,GAAIlD,EAX9EA,CAWsFmD,GAAInD,EAX1FA,CAYEoD,GAAIpD,EAZNA,CAYcqD,GAAIrD,EAZlBA,CAY0BsD,GAAItD,EAZ9BA,CAYqCA,IAAKA,EAZ1CA,CAYiDA,KAAKA,EAZtDA,CAY6DA,IAAKA,EAZlEA,CAYyEA,IAAKA,EAZ9EA,CAYqFA,EAAKA,EAZ1FA,CAaCA,IAAKA,EAbNA,CAacuD,GAAIvD,EAblBA,CAa0BwD,GAAIxD,EAb9BA,CAasCyD,GAAIzD,EAb1CA,CAakD0D,EAAG1D,GAbrDA,CAa8D2D,EAAG3D,GAbjEA,CAa0E4D,GAAG5D,GAb7EA,CAasF6D,GAAG7D,GAbzFA,CAcE8D,GAAI9D,GAdNA,CAcc+D,GAAG/D,GAdjBA,CAc0BgE,GAAGhE,GAd7BA,CAcsCiE,EAAGjE,GAdzCA,CAckDkE,GAAGlE,GAdrDA,CAc8DmE,GAAGnE,GAdjEA,CAc0EoE,EAAGpE,GAd7EA,CAcsFqE,GAAGrE,GAdzFA,CAeEsE,EAAItE,GAfNA,CAecuE,EAAGvE,GAfjBA,CAe0BwE,EAAGxE,GAf7BA;AAesCyE,GAAGzE,GAfzCA,CAekD0E,EAAG1E,GAfrDA,CAe8D2E,GAAG3E,GAfjEA,CAe0E4E,GAAG5E,GAf7EA,CAesF6E,GAAG7E,GAfzFA,CAgBE8E,EAAI9E,GAhBNA,CAgBc+E,EAAG/E,GAhBjBA,CAgB0BgF,EAAGhF,GAhB7BA,CAgBqCA,IAAIA,GAhBzCA,CAgBiDA,IAAIA,GAhBrDA,CAgB6DA,IAAIA,GAhBjEA,CAgByEA,IAAIA,GAhB7EA,CAgBoFiF,GAAKjF,GAhBzFA,CA0RPkF;QAAO,GAAQ,CAACT,CAAD,CAAIU,CAAJ,CACf,CAGI,GAAIV,CAAJ,CAAO,CACEU,CAAL,GAAWA,CAAX,CAAkB,EAAlB,CADG,KAGKC,CAHL,CAICC,EAA4B,CAA5BA,CAAWZ,CAAAa,QAAA,CAAU,GAAV,CACXD,EAAJ,GAAaZ,CAAb,CAAiBA,CAAAc,QAAA,CAAU,IAAV,CAAgB,EAAhB,CAAjB,CAEA,KAAAC,EAAKJ,CAALI,CAAgBf,CAAAgB,OAAA,CAAS,CAAT,CACA,IAAhB,EAAIL,CAAJ,EACID,CACA,CADO,CACP,CAAAC,CAAA,CAAW,EAFf,EAIqB,GAJrB,EAISA,CAJT,GAKID,CACA,CADO,EACP,CAAAC,CAAA,CAAW,EANf,CAQII,EAAJ,EAAUJ,CAAV,CACIX,CADJ,CACQA,CAAAiB,OAAA,CAAS,CAAT,CADR,EAIIF,CAiBA,CAjBKJ,CAiBL,CAjBgBX,CAAAiB,OAAA,CAAS,CAAT,CAAY,CAAZ,CAiBhB,CAhBgB,IAAhB,EAAIN,CAAJ,EAAwBC,CAAxB,EAA+C,IAA/C,EAAmCD,CAAnC,EACID,CACA,CADO,CACP,CAAAC,CAAA,CAAW,EAFf,EAIqB,IAAhB,EAAIA,CAAJ,EAAoC,IAApC,EAAwBA,CAAxB,EACDD,CACA,CADO,CACP,CAAAC,CAAA,CAAW,EAFV,EAIgB,IAAhB,EAAIA,CAAJ,EACDD,CACA,CADO,EACP,CAAAC,CAAA,CAAW,EAFV,EAIgB,IAJhB,EAIIA,CAJJ,GAKDD,CACA,CADO,EACP,CAAAC,CAAA,CAAW,EANV,CAQL,CAAII,CAAJ,EAAUJ,CAAV,GAAoBX,CAApB,CAAwBA,CAAAiB,OAAA,CAAS,CAAT,CAAxB,CArBJ,CAuBAF,EAAA,CAAKG,CAAL,CAAgBlB,CAAAmB,MAAA,CAAS,EAAT,CACA,IAAhB,EAAID,CAAJ,EAAmC,GAAnC,EAAuBA,CAAvB,EACIR,CACA,CADO,CACP,CAAAQ,CAAA,CAAW,EAFf,EAIqB,GAAhB,EAAIA,CAAJ,EACDR,CACA,CADO,EACP,CAAAQ,CAAA,CAAW,EAFV,EAIgB,GAAhB,EAAIA,CAAJ,EAAmC,GAAnC,EAAuBA,CAAvB,EACDR,CACA,CADO,EACP,CAAAQ,CAAA,CAAW,EAFV,EAIgB,GAAhB,EAAIA,CAAJ,CACDA,CADC,CACU,KADV,CAGgB,GAAhB,EAAIA,CAAJ,CACDA,CADC,CACU,QADV,CAGgB,GAHhB,EAGIA,CAHJ,GAIDA,CAJC,CAIU,WAJV,CAMDH,EAAJ,EAAUG,CAAV,GAAoBlB,CAApB,CAAwBA,CAAAmB,MAAA,CAAQ,CAAR,CAAY,EAAZ,CAAxB,CAAyCD,CAAzC,CA7DG,KAoECf,CAAGiB,EAAAA,CAAQ,CACH,GAAZ,EAAIV,CAAJ,GACQW,CADR,CACgBrB,CAAAqB,MAAA,CAAQ,qBAAR,CADhB;CAGQrB,CACA,CADIqB,CAAA,CAAM,CAAN,CACJ,CAAAD,CAAA,CAAQ,EAAR,GAAeC,CAAA,CAAM,CAAN,CAAf,EAA2B,EAA3B,EAAiC,GAAjC,CAJR,CAOmBrB,EAAAA,CAAAA,CAAnB,KA/GJ,CA+G0BU,CA/G1B,CA+G0BA,CA/G1B,GAAqB,EAArB,EAAaA,CAAb,CACY,EAAZ,EAAIA,CAAJ,CAAqD,IAArD,GAAuBV,CAAAqB,MAAA,CAAQ,gBAAR,CAAvB,CACY,CAAZ,EAAIX,CAAJ,CAAgD,IAAhD,GAAsBV,CAAAqB,MAAA,CAAQ,YAAR,CAAtB,CACY,CADZ,EACIX,CADJ,EAC+C,IAD/C,GACsBV,CAAAqB,MAAA,CAAQ,WAAR,CAHtB,CAA0D,IAA1D,GAAgCrB,CAAAqB,MAAA,CAAQ,YAAR,CA+G5B,GAA+B,CAACC,KAAA,CAAMnB,CAAN,CAAUM,QAAA,CAAST,CAAT,CAAYU,CAAZ,CAAV,CAAhC,CAA8D,CAMtDU,CAAJ,GAMY,CAEJ,CAFAjB,CAEA,GAFOA,CAEP,EAFYoB,IAAAC,IAAA,CAAS,CAAT,CAAY,EAAZ,CAEZ,EAAArB,CAAA,CADQ,CAAZ,CAAIiB,CAAJ,CACIjB,CADJ,CACSoB,IAAAC,IAAA,CAAS,CAAT,CAAYJ,CAAZ,CADT,CAGQG,IAAAE,MAAA,CAAWtB,CAAX,CAAeoB,IAAAC,IAAA,CAAS,CAAT,CAAY,CAACJ,CAAb,CAAf,CAVZ,CAaA,KAAAM,EAAQvB,CAnBkD,CA5E3D,CAkGP,MAAOuB,EArGX;AAoHAC,QAAO,GAAM,CAAChC,CAAD,CAAIiC,CAAJ,CAAWC,CAAX,CAAgBC,CAAhB,CAA8BC,CAA9B,CACb,CAD2CA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAY,CAAZ,CAAAA,CAUvC,KAAI/B,EAAI,EACJsB,MAAA,CAAM3B,CAAN,CAAJ,CACIA,CADJ,CACQ,IADR,CAEgB,IAFhB,EAEWA,CAFX,GASY,CAQR,CARIA,CAQJ,EARkB,EAQlB,CARaA,CAQb,GARqBA,CAQrB,CAR0B,EAQ1B,EAHQ,CAGR,CAHIA,CAGJ,GAFIA,CAEJ,EAFS4B,IAAAC,IAAA,CAASI,CAAT,CAAgBC,CAAhB,CAET,EAAIlC,CAAJ,EAAS4B,IAAAC,IAAA,CAASI,CAAT,CAAgBC,CAAhB,CAAT,GACIA,CADJ,CACUN,IAAAS,KAAA,CAAUT,IAAAU,IAAA,CAAStC,CAAT,CAAV,CAAwB4B,IAAAU,IAAA,CAASL,CAAT,CAAxB,CADV,CAjBJ,CAsBA,KADA,IAAIxC,EAAI2C,CAAJ3C,EAAkB,EACtB,CAAe,CAAf,CAAOyC,CAAA,EAAP,CAAA,CAAkB,CACTzC,CAAL,GACIY,CACA,CADI,GACJ,CADUA,CACV,CAAAZ,CAAA,CAAI2C,CAFR,CAIA,IAAS,IAAT,EAAIpC,CAAJ,CACIK,CAAA,CAAI,GAAJ,CAAUA,CADd,KAEO,CACH,IAAIf,EAAIU,CAAJV,CAAQ2C,CACZ3C,EAAA,EAAW,CAAL,EAAAA,CAAA,EAAe,CAAf,EAAUA,CAAV,CAAkB,EAAlB,CAAyB,EAC/Be,EAAA,CAAIkC,MAAAC,aAAA,CAAoBlD,CAApB,CAAJ,CAA6Be,CAC7BL,EAAA,CAAI4B,IAAAE,MAAA,CAAW9B,CAAX,CAAeiC,CAAf,CAJD,CAMPxC,CAAA,EAbc,CAelB,OAhDyB,IAAA,EAAA0C,GAAAA,CAAAA,CAAU,EAAVA,CAAAA,CAgDzB,EAAiB9B,CA/CrB,CA4DAoC,QAAO,GAAK,CAACzC,CAAD,CAAIkC,CAAJ,CAASE,CAAT,CACZ,CACSF,CAAL,CAUiB,EAVjB,CAUWA,CAVX,GAUqBA,CAVrB,CAU2B,EAV3B,GAEQ1B,CAEA,CAFIoB,IAAAc,IAAA,CAAS1C,CAAT,CAEJ,CAAAkC,CAAA,CADK,GAAT,EAAI1B,CAAJ,CACU,CADV,CAEgB,MAAT,EAAIA,CAAJ,CACG,EADH,CAGG,EARd,CAWA,OAAOmC,GAAA,CAAW3C,CAAX,CAAc,CAAd,CAAiBkC,CAAjB,CAAsB,EAAtB,CAA0BE,CAA1B,CAZX;AAmDAQ,QAAO,EAAK,CAAC5C,CAAD,CAAIkC,CAAJ,CAASW,CAAT,CACZ,CACSX,CAAL,CAUiB,EAVjB,CAUWA,CAVX,GAUqBA,CAVrB,CAU2B,EAV3B,GAEQ1B,CAEA,CAFIoB,IAAAc,IAAA,CAAS1C,CAAT,CAEJ,CAAAkC,CAAA,CADK,MAAT,EAAI1B,CAAJ,CACU,CADV,CAEgB,QAAT,EAAIA,CAAJ,CACG,CADH,CAGG,EARd,CAWA,OAAOmC,GAAA,CAAW3C,CAAX,CAAc,CAAd,CAAiBkC,CAAjB,CAAsBW,CAAA,CAAS,IAAT,CAAgB,EAAtC,CAZX,CA4BAC,QAAO,GAAK,CAAC9C,CAAD,CAAIkC,CAAJ,CACZ,CACSA,CAAL,CAQiB,EARjB,CAQWA,CARX,GAQqBA,CARrB,CAQ2B,EAR3B,EAIQA,CAJR,CAGa,KAAT,EADQN,IAAAc,IAAAlC,CAASR,CAATQ,CACR,CACU,CADV,CAGU,EAGd,OAAOmC,GAAA,CAAW3C,CAAX,CAAc,EAAd,CAAkBkC,CAAlB,CAVX,CAmCAa,QAAO,EAAK,CAAC/C,CAAD,CAAIkC,CAAJ,CAASW,CAAT,CACZ,CACSX,CAAL,CAUiB,CAVjB,CAUWA,CAVX,GAUoBA,CAVpB,CAU0B,CAV1B,GAEQ1B,CAEA,CAFIoB,IAAAc,IAAA,CAAS1C,CAAT,CAEJ,CAAAkC,CAAA,CADK,KAAT,EAAI1B,CAAJ,CACU,CADV,CAEgB,UAAT,EAAIA,CAAJ,CACG,CADH,CAGG,CARd,CAWA,OAAOmC,GAAA,CAAW3C,CAAX,CAAc,EAAd,CAAkBkC,CAAlB,CAAuBW,CAAA,CAAS,IAAT,CAAgB,EAAvC,CAZX,CAoCAG,QAAO,GAAS,CAACvC,CAAD,CAChB,CACI,MAAOwC,EAAA,CAAUxC,CAAV,CAAa,CAAb,CAAgB,CAAA,CAAhB,CADX,CA6BAyC,QAAO,GAAW,CAACC,CAAD,CAAYC,CAAZ,CAClB,CACI,IAAIC,EAAYF,CAAhB,CAEIxD,EAAIwD,CAAAG,YAAA,CAAsB,GAAtB,CACC,EAAT,EAAI3D,CAAJ,GAAY0D,CAAZ,CAAwBF,CAAA7B,OAAA,CAAiB3B,CAAjB,CAAqB,CAArB,CAAxB,CAKAA,EAAA,CAAI0D,CAAAnC,QAAA,CAAkB,MAAlB,CACI,EAAR,CAAIvB,CAAJ,GAAW0D,CAAX,CAAuBA,CAAA/B,OAAA,CAAiB,CAAjB,CAAoB3B,CAApB,CAAvB,CAEIyD,EAAJ,GACIzD,CACA,CADI0D,CAAAC,YAAA,CAAsB,GAAtB,CACJ,CAAQ,CAAR,CAAI3D,CAAJ,GACI0D,CADJ,CACgBA,CAAAE,UAAA,CAAoB,CAApB,CAAuB5D,CAAvB,CADhB,CAFJ,CAMA,OAAO0D,EAlBX;AA+BAG,QAAO,GAAY,CAACL,CAAD,CACnB,CACI,IAAIM,EAAa,EAAjB,CACI9D,EAAIwD,CAAAG,YAAA,CAAsB,GAAtB,CACC,EAAT,EAAI3D,CAAJ,GACI8D,CADJ,CACiBN,CAAA7B,OAAA,CAAiB3B,CAAjB,CAAqB,CAArB,CAAA+D,YAAA,EADjB,CAGA,OAAOD,EANX,CAgBAE,QAAO,GAAQ,CAACtD,CAAD,CAAIuD,CAAJ,CACf,CACI,MAA0D,EAA1D,GAAOvD,CAAAa,QAAA,CAAU0C,CAAV,CAAmBvD,CAAAwD,OAAnB,CAA8BD,CAAAC,OAA9B,CADX,CAUAC,QAAO,GAAU,CAACC,CAAD,CACjB,CACI,MAAOA,EAAA5C,QAAA,CAAc,UAAd,CAA0B,QAAQ,CAACpB,CAAD,CACzC,CACI,MAAOiE,GAAA,CAAkBjE,CAAlB,CADX,CADO,CADX,CA+FAkE,QAAO,GAAG,CAAC5D,CAAD,CAAI6B,CAAJ,CACV,CAEI,MAA8CV,CAACnB,CAADmB,CAD/B0C,0CAC+B1C,OAAA,CAAqB,CAArB,CAAwBU,CAAxB,CAFlD,CA0FAiC,QAAO,GAAI,CAAC9D,CAAD,CACX,CACI,MAAIkC,OAAA6B,UAAAD,KAAJ,CACW9D,CAAA8D,KAAA,EADX,CAGO9D,CAAAc,QAAA,CAAU,YAAV,CAAwB,EAAxB,CAJX;AA+BJ,IAAA6C,GAAoB,CAChB,OAAK,UADW,CAEhB,OAAK,SAFW,CAGhB,OAAK,SAHW,CAIhB,IAAK,WAJW,CAKhB,IAAK,WALW,CAApB,CAWAK,GAAmB,CACf,EAAQ,KADO,CAEf,EAAQ,KAFO,CAGf,EAAQ,KAHO,CAIf,EAAQ,KAJO,CAKf,EAAQ,KALO,CAMf,EAAQ,KANO,CAOf,EAAQ,KAPO,CAQf,EAAQ,KARO,CASf,EAAQ,IATO,CAUf,EAAQ,KAVO,CAWf,GAAQ,IAXO,CAYf,GAAQ,IAZO,CAaf,GAAQ,IAbO,CAcf,GAAQ,IAdO,CAef,GAAQ,IAfO,CAgBf,GAAQ,IAhBO,CAiBf,GAAQ,KAjBO,CAkBf,GAAQ,KAlBO,CAmBf,GAAQ,KAnBO,CAoBf,GAAQ,MApBO,CAqBf,GAAQ,KArBO,CAsBf,GAAQ,KAtBO,CAuBf,GAAQ,KAvBO,CAwBf,GAAQ,KAxBO,CAyBf,GAAQ,KAzBO,CA0Bf,GAAQ,IA1BO,CA2Bf,GAAQ,KA3BO,CA4Bf,GAAQ,KA5BO,CA6Bf,GAAQ,IA7BO,CA8Bf,GAAQ,IA9BO,CA+Bf,GAAQ,IA/BO,CAgCf,GAAQ,IAhCO,CAiCf,IAAQ,KAjCO,CA0HfC;QAAO,GAAY,CAACnF,CAAD,CAAIqB,CAAJ,CAAO+D,CAAP,CACnB,CACI,IAAIC,EAAO,CAAX,CACIC,EAAQtF,CAAA0E,OADZ,CAEIa,EAAQ,CAOZ,KANkBC,IAAAA,EAMlB,GANIJ,CAMJ,GALIA,CAKJ,CALgBA,QAAQ,CAACpF,CAAD,CAAIC,CAAJ,CACpB,CACI,MAAOD,EAAA,CAAIC,CAAJ,CAAQ,CAAR,CAAYD,CAAA,CAAIC,CAAJ,CAAS,EAAT,CAAa,CADpC,CAIJ,EAAOoF,CAAP,CAAcC,CAAd,CAAA,CAAqB,CACjB,IAAIG,EAAUJ,CAAVI,CAAiBH,CAAjBG,EAA2B,CAE/B,KAAAC,EAAgBN,CAAA,CAAU/D,CAAV,CAAarB,CAAA,CAAEyF,CAAF,CAAb,CACI,EAApB,CAAIC,CAAJ,CACIL,CADJ,CACWI,CADX,CACoB,CADpB,EAGIH,CACA,CADQG,CACR,CAAAF,CAAA,CAAQ,CAACG,CAJb,CAJiB,CAWrB,MAAOH,EAAA,CAAQF,CAAR,CAAe,CAACA,CArB3B;AA4GAM,QAAO,GAAU,EACjB,CAD2BC,IAAAA,CAAAA,CAEnBC,EAAQ,EACPD,EAAL,GAAWA,CAAX,CAAkB,IAAIE,IAAtB,CAIA,KAHA,IAAIC,EAAQH,CAAAI,SAAA,EAAZ,CACIC,EAAOL,CAAAM,QAAA,EADX,CAEIC,EAASP,CAAAQ,SAAA,EAATD,CAA2B,CAF/B,CAGS3F,EAAI,CAAb,CAAoBkE,EAApB,CAAgBlE,CAAhB,CAAoCA,CAAA,EAApC,CAAyC,CACrC,IAAIyB,CACJ,QAASA,CAAT,CApEkBoE,aAoEJnE,OAAA,CAAe1B,CAAf,CAAd,EACA,KAAK,GAAL,CACIqF,CAAA,EAAkB,EAAR,CAAAE,CAAA,CAAa,IAAb,CAAoB,IAC9B,MACJ,MAAK,GAAL,CACIF,CAAA,EAASxD,CAAC,GAADA,CAAO4D,CAAP5D,OAAA,CAAoB,EAApB,CACT,MACJ,MAAK,GAAL,CACIwD,CAAA,EAASS,EAAA,CAAWV,CAAAW,OAAA,EAAX,CAAApE,OAAA,CAAiC,CAAjC,CAAoC,CAApC,CACT,MACJ,MAAK,GAAL,CACI0D,CAAA,EAASW,EAAA,CAAaL,CAAb,CAAsB,CAAtB,CACT,MACJ,MAAK,GAAL,CACIN,CAAA,EAAWE,CAAD,CAAuB,EAAR,CAAAA,CAAA,CAAaA,CAAb,CAAqB,EAArB,CAA0BA,CAAzC,CAAS,EACnB,MACJ,MAAK,GAAL,CACIF,CAAA,EAASE,CACT,MACJ,MAAK,GAAL,CACIF,CAAA,EAASxD,CAAC,GAADA,CAAO0D,CAAP1D,OAAA,CAAqB,EAArB,CACT,MACJ,MAAK,GAAL,CACIwD,CAAA,EAASxD,CAAC,GAADA,CAAOuD,CAAAa,WAAA,EAAPpE,OAAA,CAAiC,EAAjC,CACT,MACJ,MAAK,GAAL,CACIwD,CAAA,EAASI,CACT,MACJ,MAAK,GAAL,CACIJ,CAAA,EAASS,EAAA,CAAWV,CAAAW,OAAA,EAAX,CACT,MACJ,MAAK,GAAL,CACIV,CAAA,EAASxD,CAAC,GAADA,CAAO8D,CAAP9D,OAAA,CAAsB,EAAtB,CACT;KACJ,MAAK,GAAL,CACIwD,CAAA,EAASW,EAAA,CAAaL,CAAb,CAAsB,CAAtB,CAAAhE,OAAA,CAAgC,CAAhC,CAAmC,CAAnC,CACT,MACJ,MAAK,GAAL,CACI0D,CAAA,EAASM,CACT,MACJ,MAAK,GAAL,CACIN,CAAA,EAASxD,CAAC,GAADA,CAAOuD,CAAAc,WAAA,EAAPrE,OAAA,CAAiC,EAAjC,CACT,MACJ,MAAK,GAAL,CACIwD,CAAA,EAASxD,CAAC,EAADA,CAAMuD,CAAAe,YAAA,EAANtE,OAAA,CAAiC,EAAjC,CACT,MACJ,MAAK,GAAL,CACIwD,CAAA,EAASD,CAAAe,YAAA,EACT,MACJ,SACId,CAAA,EAAS5D,CAlDb,CAFqC,CAwDzC,MAAO4D,EA9DX,CAgKJ,IAAAS,GAAa,0DAAA,MAAA,CAAA,GAAA,CAAb,CACAE,GAAe,uFAAA,MAAA,CAAA,GAAA,CAuKXI;QAAO,GAAW,CAACC,CAAD,CAAOC,CAAP,CAAsBC,CAAtB,CAAsCC,CAAtC,CAClB,CA4BmBC,QAAA,EAAQ,EAAG,CACtB,GAA2B,CAA3B,GAAIC,CAAAC,WAAJ,CAEI,MAAO,KA0BX,IAAI,CACAC,CAAA,CAAWC,CAAA,CAAcH,CAAAI,SAAd,CAAiCJ,CAAAK,aAD5C,CAEF,MAAMC,CAAN,CAAW,EAOb,GAAgB,IAAhB,EAAIJ,CAAJ,EAA2C,GAA3C,EAAyBF,CAAAO,OAAzB,GAAmDP,CAAAO,OAAnD,EAAqE/C,CAAA0C,CAAA1C,OAArE,EAAiH,OAAjH,GA0PIgD,MAAA,CAAQA,MAAAC,SAAAC,SAAR,CAAmC,OA1PvC,GAIIC,CAAA,CAAaX,CAAAO,OAAb,EAAgC,EAIhCT,EAAJ,EAAUA,CAAA,CAAKH,CAAL,CAAWO,CAAX,CAAqBS,CAArB,CACV,OAAO,CAACT,CAAD,CAAWS,CAAX,CA/Ce,CA7BLf,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAO,MAAP,CAAAA,CAAeC,EAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAS,CAAA,CAAT,CAAAA,CACxC,KACQc,EAAa,CADrB,CACwBT,EAAW,IADnC,CACyCE,EAAW,IAEhD,IAAwB,QAAxB,EAAI,MAAOQ,UAAX,GAAqCV,CAArC,CAAgDU,SAAA,CAAUjB,CAAV,CAAhD,EAEI,MADIG,EACG,EADGA,CAAA,CAAKH,CAAL,CAAWO,CAAX,CAAqBS,CAArB,CACH,CAAA,CAACT,CAAD,CAAWS,CAAX,CAEN,IAAId,CAAJ,EAAkC,UAAlC,EAAc,MAAOe,UAArB,CAKD,MAJAA,UAAA,CAAUjB,CAAV,CAAgB,QAAQ,CAACO,CAAD,CAAWS,CAAX,CACxB,CACQb,CAAJ,EAAUA,CAAA,CAAKH,CAAL,CAAWO,CAAX,CAAqBS,CAArB,CADd,CADA,CAIOP,CAAAA,CAaX,KAAIJ,EAAWQ,MAAAK,eAAA,CAAuB,IAAIL,MAAAK,eAA3B;AAAqD,IAAIL,MAAAM,cAAJ,CAAyB,mBAAzB,CAApE,CACIX,EAAe,CAAA,CADnB,CAC0BY,EAAyC,QAAzCA,GAAS,MAAOf,EAAAgB,aAoDtCnB,EAAJ,GACIG,CAAAiB,mBADJ,CACiClB,CADjC,CAMA,IAAIH,CAAJ,EAA2B,QAA3B,EAAY,MAAOA,EAAnB,CAAqC,CAC7BsB,CAAAA,CAAQ,EACZ,KAAKrH,IAAIA,CAAT,GAAc+F,EAAd,CACSA,CAAAuB,eAAA,CAAoBtH,CAApB,CAAL,GACIqH,CACJ,GADWA,CACX,EADoB,MACpB,EAAAA,CAAA,EAASrH,CAAT,CAAa,MAAb,CAAmBuH,kBAAA,CAAmBxB,CAAA,CAAK/F,CAAL,CAAnB,CAFnB,CAIJqH,EAAA,CAAQA,CAAApG,QAAA,CAAc,MAAd,CAAsB,GAAtB,CAERkF,EAAAqB,KAAA,CAAa,MAAb,CAAqB1B,CAArB,CAA2BE,CAA3B,CACAG,EAAAsB,iBAAA,CAAyB,cAAzB,CAAyC,mCAAzC,CACAtB,EAAAuB,KAAA,CAAaL,CAAb,CAXiC,CAArC,IAcIlB,EAAAqB,KAAA,CAAa,KAAb,CAAoB1B,CAApB,CAA0BE,CAA1B,CASA,CARY,aAQZ,EARID,CAQJ,GAPQmB,CAAJ,EACIZ,CACA,CADe,CAAA,CACf,CAAAH,CAAAgB,aAAA,CAAuBpB,CAF3B,EAIII,CAAAwB,iBAAA,CAAyB,uCAAzB,CAGR,EAAAxB,CAAAuB,KAAA,EAGC1B,EAAL,GACIG,CAAAC,WACA;AADqB,CACrB,CAAAG,CAAA,CAAWL,CAAA,EAFf,CAIA,OAAOK,EAlHX;AA6IAqB,QAAO,GAAmB,CAAC9B,CAAD,CAAO+B,CAAP,CAC1B,CACI,IAAIpI,CAAJ,CACI4G,EAAW,CACXyB,EAAQ,IADG,CAEXC,GAAU,IAFC,CAGXC,GAAU,IAHC,CAIXC,GAAU,IAJC,CAOf,IAAuB,GAAvB,EAAIJ,CAAA1G,OAAA,CAAa,CAAb,CAAJ,EAAiD,GAAjD,EAA8B0G,CAAA1G,OAAA,CAAa,CAAb,CAA9B,CACI,GAAI,CAAA,IACIlC,CADJ,CACOiJ,CAEP,IAA0B,MAA1B,EAAIL,CAAAzG,OAAA,CAAa,CAAb,CAAJ,CAOI,KAAU+G,MAAJ,CAAUN,CAAV,CAAN,CAuBA,IAAAO,EADsB,CAA1B,CAAIP,CAAA7G,QAAA,CAAc,IAAd,CAAJ,EAAqD,CAArD,CAA+B6G,CAAA7G,QAAA,CAAc,IAAd,CAA/B,EAAgF,IAAhF,EAA0D6G,CAAAzG,OAAA,CAAa,CAAb,CAAgB,CAAhB,CAA1D,CACWiH,IAAAC,MAAA,CAAWT,CAAA5G,QAAA,CAAc,aAAd,CAA6B,OAA7B,CAAAA,QAAA,CAA8C,cAA9C,CAA8D,EAA9D,CAAX,CADX,CAGWsH,IAAA,CAAK,GAAL,CAAWV,CAAX,CAAmB,GAAnB,CAGXxB,EAAA2B,GAAA,CAAoBI,CAAA,KACpB/B,EAAA4B,GAAA,CAAoBG,CAAA,KAEpB,IAAInJ,CAAJ,CAAQmJ,CAAA,MAAR,CACI/B,CAAAyB,EAAA,CAAkB7I,CADtB,KAGK,IAAIA,CAAJ,CAAQmJ,CAAA,MAAR,CAKD,IADA/B,CAAAyB,EACY,CADUU,KAAJ,CAAqB,CAArB,CAAUvJ,CAAA0E,OAAV,CACN,CAAAuE,CAAA,CAAPzI,CAAO,CAAH,CAAT,CAAoBA,CAApB,CAAwBR,CAAA0E,OAAxB,CAAkClE,CAAA,EAAlC,CACI4G,CAAAyB,EAAA,CAAgBI,CAAA,EAAhB,CACA,CADwBjJ,CAAA,CAAEQ,CAAF,CACxB,CAD+B,GAC/B,CAAA4G,CAAAyB,EAAA,CAAgBI,CAAA,EAAhB,CAAA,CAAyBjJ,CAAA,CAAEQ,CAAF,CAAzB,EAAiC,CAAjC,CAAsC,GAPzC,KAWA,IAAIR,CAAJ,CAAQmJ,CAAA,MAAR,CAKD,IADA/B,CAAAyB,EACY,CADUU,KAAJ,CAAqB,CAArB,CAAUvJ,CAAA0E,OAAV,CACN,CAAAuE,CAAA,CAAPzI,CAAO,CAAH,CAAT,CAAoBA,CAApB,CAAwBR,CAAA0E,OAAxB,CAAkClE,CAAA,EAAlC,CACI4G,CAAAyB,EAAA,CAAgBI,CAAA,EAAhB,CAGA;AAHwBjJ,CAAA,CAAEQ,CAAF,CAGxB,CAH+B,GAG/B,CAFA4G,CAAAyB,EAAA,CAAgBI,CAAA,EAAhB,CAEA,CAFyBjJ,CAAA,CAAEQ,CAAF,CAEzB,EAFiC,CAEjC,CAFsC,GAEtC,CADA4G,CAAAyB,EAAA,CAAgBI,CAAA,EAAhB,CACA,CADyBjJ,CAAA,CAAEQ,CAAF,CACzB,EADiC,EACjC,CADuC,GACvC,CAAA4G,CAAAyB,EAAA,CAAgBI,CAAA,EAAhB,CAAA,CAAyBjJ,CAAA,CAAEQ,CAAF,CAAzB,EAAiC,EAAjC,CAAuC,GAT1C,KAYA,CAAIR,CAAJ,CAAQmJ,CAAA,KAAR,EACD/B,CAAAoC,GADC,CACgBxJ,CADhB,CAIDoH,CAAAyB,EAJC,CAIiBM,CAGlB/B,EAAAyB,EAAJ,GACSzB,CAAAyB,EAAAnE,OAAL,CAImC,CAJnC,EAIS0C,CAAAyB,EAAAnE,OAJT,GAm+BZ+E,CAAA,CA99BgCrC,CAAAyB,EAAA3H,CAAgB,CAAhBA,CA89BhC,CA79BgB,CAAAkG,CAAA,CAAW,IANf,GAm+BZqC,CAAA,CAl+BgC,kBAk+BhC,CAl+BqD5C,CAk+BrD,CAj+BgB,CAAAO,CAAA,CAAW,IAFf,CADJ,CAUAA,EAAA0B,GAAA,CAAoBK,CAAA,QApFpB,CAsFF,MAAO/I,CAAP,CAAU,CAw9BhBqJ,CAAA,CAv9BwB,uBAu9BxB,CAv9BkD5C,CAu9BlD,CAv9ByD,KAu9BzD,CAv9BiEzG,CAAAsJ,QAu9BjE,CAt9BQ,CAAAtC,CAAA,CAAW,IAFH,CAvFhB,IA4FK,CAIGuC,CAAAA,CAAK,EAELC,EAAAA,CADWhB,CAAA5G,QAAA,CAAc,MAAd,CAAsB,GAAtB,CAAAA,QAAA6H,CAAmC,KAAnCA,CAA0C,EAA1CA,CACCC,MAAA,CAAe,GAAf,CAChB,KAAKtJ,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBoJ,CAAAlF,OAAhB,CAAkClE,CAAA,EAAlC,CAAuC,CAC/BK,CAAAA,CAAIc,QAAA,CAASiI,CAAA,CAAUpJ,CAAV,CAAT,CAAuB,EAAvB,CACR,IAAIgC,KAAA,CAAM3B,CAAN,CAAJ,CAAc,CA08BtB4I,CAAA,CAz8B4B,uBAy8B5B,CAz8BsD5C,CAy8BtD,CAz8B6D,uBAy8B7D,CAz8BuF+C,CAAA,CAAUpJ,CAAV,CAy8BvF,CAz8BsG,GAy8BtG,CAx8BY,MAFU,CAIdmJ,CAAAI,KAAA,CAAQlJ,CAAR,CAAY,GAAZ,CANmC,CAQnCL,CAAJ,EAASoJ,CAAAlF,OAAT,GAA2B0C,CAAAyB,EAA3B,CAA6Cc,CAA7C,CAfC,CAiBL,MAAOvC,EAtHX;AAwJA4C,QAAO,GAAO,EACd,CACI,MAAQ,SAAR,EAAqBtC,MAAA,CAAQA,MAAAC,SAAAsC,KAAR,CA5rEdC,cA4rEP,CADJ,CAyCAC,QAAO,GAAe,EACtB,CACI,GAAyB,IAAzB,EAAIC,EAAJ,CAA+B,CAC3B,IAAI/J,EAAI,CAAA,CACR,IAAIqH,MAAJ,CACI,GAAI,CACAA,MAAA2C,aAAAC,QAAA,CAihBIC,mBAjhBJ,CAihBIA,mBAjhBJ,CAEA,CADAlK,CACA,CA+gBIkK,mBA/gBJ,EADK7C,MAAA2C,aAAAG,QAAA,CAghBDD,mBAhhBC,CACL,CAAA7C,MAAA2C,aAAAI,WAAA,CA+gBIF,mBA/gBJ,CAHA,CAIF,MAAOnK,CAAP,CAAU,CAERC,CAAA,CAAI,CAAA,CAFI,CAKhB+J,EAAA,CAAoB/J,CAZO,CAc/B,MAAO+J,GAfX,CAoCAM,QAAO,GAAmB,CAACC,CAAD,CAC1B,CAEI,GAAIjD,MAAJ,CACI,GAAI,CACA,IAAAkD,EAASlD,MAAA2C,aAAAG,QAAA,CAA4BG,CAA5B,CADT,CAEF,MAAOvK,CAAP,CAAU,EAIhB,MAAOwK,EATX;AAmBAC,QAAO,GAAmB,CAACF,CAAD,CAAOC,CAAP,CAC1B,CACI,GAAI,CAEA,MADAlD,OAAA2C,aAAAC,QAAA,CAA4BK,CAA5B,CAAkCC,CAAlC,CACO,CAAA,CAAA,CAFP,CAGF,MAAOxK,CAAP,CAAU,EAGZ,MAAO,CAAA,CAPX,CA6EA0K,QAAO,GAAW,CAAC5J,CAAD,CAClB,CACI,GAAIwG,MAAJ,CAAY,CACR,IAAIqD,EApJArD,MAAA,CAAQA,MAAAsD,UAAAD,UAAR,CAAqC,EA8JzC,OAAY,KAAZ,EAAO7J,CAAP,EAAqB,CAAC,CAAC6J,CAAAxI,MAAA,CAAgB,oBAAhB,CAAvB,EAAgE,CAAC,CAACwI,CAAAxI,MAAA,CAAgB,aAAhB,CAAlE,EAAyG,MAAzG,EAAoGrB,CAApG,EAAmH,CAAC,CAAC6J,CAAAxI,MAAA,CAAgB,gBAAhB,CAArH,EAAmL,CAAnL,EAA2JwI,CAAAhJ,QAAA,CAAkBb,CAAlB,CAXnJ,CAaZ,MAAO,CAAA,CAdX;AA8EA+J,QAAO,GAAU,CAACC,CAAD,CACjB,CACI,GAAKC,CAAAA,EAAL,CAAA,CAYiBC,IAAAA,CAAAA,CAEbC,EAAS,EACb,IAAI3D,MAAJ,CAAY,CACH0D,CAAL,GAKIA,CALJ,CAKa1D,MAAAC,SAAA2D,OAAAnJ,OAAA,CAA8B,CAA9B,CALb,CAeA,KARA,IAAII,CAAJ,CACIgJ,EAAK,KADT,CAEID,EAAS,oBAMb,CAAQ/I,CAAR,CAAgB+I,CAAAE,KAAA,CAAYJ,CAAZ,CAAhB,CAAA,CACIC,CAAA,CAJOI,kBAAA,CAIOlJ,CAAArB,CAAM,CAANA,CAJYc,QAAA,CAAUuJ,CAAV,CAAc,GAAd,CAAnB,CAIP,CAAA,CAJOE,kBAAA,CAI2BlJ,CAAArB,CAAM,CAANA,CAJRc,QAAA,CAAUuJ,CAAV,CAAc,GAAd,CAAnB,CAbH,CAoBZ,EAAA,CAAOF,CAnCP,CAGA,MAAOF,GAAA,CAAaD,CAAb,CAAP,EAA8BC,EAAA,CAAaD,CAAA3G,YAAA,EAAb,CAJlC,CAsFAmH,QAAO,GAAa,CAAC7K,CAAD,CAAI8K,CAAJ,CAAcC,CAAd,CACpB,CACoBC,QAASC,EAAa,EACtC,CACI,EAAAjL,CACS,EAAT,EAAIA,CAAJ,GACS8K,CAAA,EADT,GACqB9K,CADrB,CACyB,CADzB,EAGQ,EAAR,CAAIA,CAAJ,CACIkL,UAAA,CAAWF,CAAX,CAAiC,CAAjC,CADJ,CAIAD,CAAA,EATJ,CAWAC,CAAA,EAbJ;AA2BAG,QAAO,GAAa,CAAC5L,CAAD,CAAuB6L,CAAvB,CACpB,CAGmBN,QAASO,EAAa,EACrC,CACQD,CAAA,CA6ntBKE,GA7ntBL,GAAGC,CAAH,CAAJ,GACIC,CACA,CADQN,UAAA,CAAWJ,CAAX,CAAqBS,CAArB,CACR,CAAAA,CAAA,CA2ntBKD,GA7ntBT,CADJ,CAJJ,IACQC,EAAK,CADb,CACgBC,EAAQ,IADxB,CAC8BC,EAAqB,CAAA,CAS/ClM,EAAAmM,YAAA,CAAgBC,QAAQ,EACxB,CAESF,CAAL,EACSD,CADT,GAEQD,CACA,CAkntBJK,GAlntBI,CAAAd,CAAA,EAHR,CAFJ,CASAvL,EAAAsM,aAAA,CAAiBC,QAAQ,EACzB,CAESN,CAAL,GACID,CACA,CAymtBAK,GAzmtBA,CAAAd,CAAA,EAFJ,CAFJ,CAOAvL,EAAAwM,UAAA,CAAcxM,CAAAyM,WAAd,CAA6BC,QAAQ,EACrC,CAEQT,CAAJ,GACIU,YAAA,CAAaV,CAAb,CACA,CAAAA,CAAA,CAAQ,IAFZ,CAFJ,CAOAjM,EAAA4M,WAAA,CAAe5M,CAAA6M,cAAf,CAAiCC,QAAQ,EACzC,CAEQb,CAAJ,GACIU,YAAA,CAAaV,CAAb,CACA,CAAAA,CAAA,CAAQ,IAFZ,CASAC,EAAA,CAAqB,CAAA,CAXzB,CArCJ,CAwEAa,QAAO,GAAW,CAACC,CAAD,CAAQnB,CAAR,CAClB,CACI,GAAIvE,MAAJ,CAAY,CACR,IAAI2F,EAAS3F,MAAA,CAAO0F,CAAP,CAET1F,OAAA,CAAO0F,CAAP,CAAA,CADkB,UAAtB,GAAI,MAAOC,EAAX,CACoBpB,CADpB,CAOoB,QAAsB,EACtC,CACQoB,CAAJ,EAAYA,CAAA,EACZpB,EAAA,EAFJ,CAVI,CADhB,CA0BAqB,QAAO,GAAM,CAACrB,CAAD,CACb,CACIsB,EAAA,KAAAxD,KAAA,CAAoCkC,CAApC,CADJ;AAiCAuB,QAAO,GAAW,CAACC,CAAD,CAClB,CACI,GAAIC,EAAJ,CACI,GAAI,CACA,IAAK,IAAIlN,EAAI,CAAb,CAAgBA,CAAhB,CAAoBiN,CAAA/I,OAApB,CAAgClE,CAAA,EAAhC,CACIiN,CAAA,CAAIjN,CAAJ,CAAA,EAFJ,CAIF,MAAOJ,CAAP,CAAU,CAqYCqJ,CAAA,CAAuC,EAAvC,EApYE,gCAoYF,CApYqCrJ,CAAAsJ,QAoYrC,CApYiD,oFAoYjD,EArYD,CANpB,CAiBAiE,QAAO,GAAgB,CAACC,CAAD,CACvB,CACQ,CAACF,EAAL,EAA+BE,CAA/B,EACIF,EAEA,CAFyB,CAAA,CAEzB,CADIG,EACJ,EADqBC,EAAA,CAAkB,MAAlB,CACrB,CAAIC,EAAJ,EAAqBD,EAAA,CAAkB,MAAlB,CAHzB,EAMAJ,EANA,CAMyBE,CAP7B,CAiBAI,QAAO,GAAa,CAACC,CAAD,CACpB,CACQV,EAAA,CAAuBU,CAAvB,CAAJ,EACIC,EAAA,CAAgBX,EAAA,CAAuBU,CAAvB,CAAhB,CAFR,CAOJ,IAAA9C,GAAe,IAAf,CAEAoC,GAAyB,CACrB,KAAQ,EADa,CAErB,KAAQ,EAFa,CAGrB,KAAQ,EAHa,CAFzB,CAUAM,GAAkB,CAAA,CAVlB,CAWAE,GAAkB,CAAA,CAXlB,CAYAL,GAAyB,CAAA,CAZzB,CAqBAtD,GAAoB,IASpB+D,GAAA,CAAgB,QAAhB,CAA0BC,QAAmB,EAAG,CAC5CP,EAAA,CAAkB,CAAA,CAClBK,GAAA,CAAgBX,EAAA,KAAhB,CAF4C,CAAhD,CAKAY,GAAA,CAAgB,YAAhB,CAA8BE,QAAmB,EAAG,CAChDN,EAAA,CAAkB,CAAA,CAClBG,GAAA,CAAgBX,EAAA,KAAhB,CAFgD,CAApD,CAKAY;EAAA,CAAgBG,EAAA,CAAgB,KAAhB,CAAA,CAAwB,YAAxB,CAAwCA,EAAA,CAAgB,OAAhB,CAAA,CAA0B,UAA1B,CAAuC,gBAA/F,CAAkHC,QAAqB,EAAG,CACtIL,EAAA,CAAgBX,EAAA,KAAhB,CADsI,CAA1I,CA6EIiB;QApBEC,EAoBS,CAAC3H,CAAD,CAAO4H,CAAP,CAAcC,CAAd,CACX,CACI,IAAA7H,KAAA,CAAYA,CAEP4H,EAAL,GAAYA,CAAZ,CAAoB,CAAC,GAAM,EAAP,CAAW,KAAQ,EAAnB,CAApB,CAEA,KAAAE,GAAA,CAAUF,CAAA,GAAV,EAAyB,EACzB,KAAAG,KAAA,CAAYH,CAAA,KACZ,KAAAI,GAAA,CAAeJ,CAAA,QACf,KAAAA,GAAA,CAAaA,CAWE,KAAA,QAAf,CAAiC,EACjC,KAAAK,EAAA,CAAgB,IAAA,SAAhB,CAAmC,EAE/BvO,EAAAA,CAAI,IAAAoO,GAAA7M,QAAA,CAAgB,GAAhB,CACA,EAAR,CAAIvB,CAAJ,CACI,IAAAwO,GADJ,CACuB,IAAAJ,GADvB,EAGI,IAAAK,GACA,CADiB,IAAAL,GAAAzM,OAAA,CAAe,CAAf,CAAkB3B,CAAlB,CACjB,CAAA,IAAAwO,GAAA,CAAmB,IAAAJ,GAAAzM,OAAA,CAAe3B,CAAf,CAAmB,CAAnB,CAJvB,CAWA,KAAA0O,MAAA,CAAa,CACTC,MAAY,CAAA,CADH,CAETC,GAAY,CAAA,CAFH,CAGTC,GAAY,CAAA,CAHH,CAITC,GAAY,CAAA,CAJH,CAKTC,GAAY,CAAA,CALH,CAMTC,GAAY,CAAA,CANH,CAOTC,MAAY,CAAA,CAPH,CAUb,KAAAC,GAAA,CAAe,IACfC,KAghCAT,MAAAO,MAAA,CAAmB,CAAA,CA/gCnB,KAAAd,GAAA,CAAmBA,CAAnB,EAAkC,CAKlC,KAAAiB,EAAA,CADA,IAAAC,EACA,CAFA,IAAAC,EAEA,CAHA,IAAAC,EAGA,CAHW,IA8BXC,GAAAjG,KAAA,CAfckG,IAed,CA9EJ,CAkGAC,QAAO,GAAkB,CAACjB,CAAD,CAAYkB,CAAZ,CAAmBhH,CAAnB,CACzB,CAKQiH,EAAA,CAAmBnB,CAAnB,CAAJ,EAAqCkB,CAArC,GACIC,EAAA,CAAmBnB,CAAnB,CAAA,CAA8BkB,CAA9B,CADJ,CAC2ChH,CAD3C,CALJ,CA0BAkH,QAAO,GAAO,EACd,CACI,MAAOvK,KAAAwK,IAAA,EAAP,EAAqB,CAAC,IAAIxK,IAD9B;AA+IAyK,QAAO,EAAS,CAACC,CAAD,CAChB,CACQ9I,MAAJ,EACIA,MAAA+I,MAAA,CAAaD,CAAb,CAFR,CAcAE,QAAO,GAAW,CAACC,CAAD,CAClB,CACI,IAAIC,EAAY,CAAA,CACZlJ,OAAJ,GACIkJ,CADJ,CACgBlJ,MAAAmJ,QAAA,CAAeF,CAAf,CADhB,CAGA,OAAOC,EALX,CA8BAE,QAAO,GAAa,CAACC,CAAD,CAAUC,CAAV,CACpB,CACID,CAAAnO,MAAA,EAAiBoO,CAKbA,EAAA,CAAQD,CAAAnO,MACW,KAAnB,CAAIoO,CAAAtM,OAAJ,GAAyBqM,CAAAnO,MAAzB,CAAyCoO,CAAA7O,OAAA,CAAa6O,CAAAtM,OAAb,CAA4B,IAA5B,CAAzC,CAEJqM,EAAAE,UAAA,CAAoBF,CAAAG,aATxB;AAiEAC,QAAO,GAAqB,CAAClB,CAAD,CAAYmB,CAAZ,CAC5B,CADiDC,IAAAA,EAg5GMC,CA94G/CC,EAAAA,CAAaC,CAAA,CAA6BJ,CAAAK,WAA7B,CAAiDJ,CAAjD,CAA6D,UAA7D,CAEjB,KAAK,IAAIK,EAAW,CAApB,CAAuBA,CAAvB,CAAkCH,CAAA7M,OAAlC,CAAqDgN,CAAA,EAArD,CAII,IAFA,IAAIC,EAAeJ,CAAA,CAAWG,CAAX,CAAAE,WAAnB,CAESC,EAAQ,CAAjB,CAAoBA,CAApB,CAA4BF,CAAAjN,OAA5B,CAAiDmN,CAAA,EAAjD,CAA0D,CACtD,IAAId,EAAUY,CAAA,CAAaE,CAAb,CACd,IAAyB,CAAzB,GAAId,CAAAe,SAAJ,CAAA,CAGA,IAAIC,EAAShB,CAAAiB,aAAA,CAAqB,OAArB,CACb,IAAKD,CAAL,CAEA,IADA,IAAIE,EAAWF,CAAAjI,MAAA,CAAa,GAAb,CAAf,CACSoI,EAAS,CAAlB,CAAqBA,CAArB,CAA8BD,CAAAvN,OAA9B,CAA+CwN,CAAA,EAA/C,CAGI,OADAH,CACQA,CADCE,CAAA,CAASC,CAAT,CACDH,CAAAA,CAAR,EACI,KAAKV,CAAL,CAAiB,UAAjB,CAOI,CANA3C,CAMA,CANQyD,EAAA,CAAuDpB,CAAvD,CAMR,GALarC,CAAA,QAKb,EAJIuB,CAAAmC,GAAA,CAAqB1D,CAAA,KAArB,CAAoCA,CAAA,QAApC,CAAiFqC,CAAjF,CAA2FrC,CAAA,MAA3F,CAIJ,CAAAwD,CAAA,CAASD,CAAAvN,OARjB,CATJ,CAFsD,CAPlE,CA8CA2N,QAAO,GAAa,CAACC,CAAD,CACpB,CACI,IAAI9R,CAAJ,CACI+R,EAAc,EAQdD,EAAJ,GAEQA,CAFR,CACuC,CAAnC,EAAK9R,CAAL,CAAS8R,CAAAvQ,QAAA,CAAkB,GAAlB,CAAT,EACgBuQ,CAAAnQ,OAAA,CAAiB,CAAjB,CAAoB3B,CAApB,CAAwB,CAAxB,CADhB,CAGgB,EAJpB,CAMA,KAAKA,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBgS,EAAA9N,OAAhB,CAA6ClE,CAAA,EAA7C,CAAkD,CAC9C,IAAIyP,EAAYwC,EAAA,CAAqBjS,CAArB,CACX8R,EAAL,EAAmBrC,CAAArB,GAAA7M,QAAA,CAAqBuQ,CAArB,CAAnB,EACIC,CAAAxI,KAAA,CAAiBkG,CAAjB,CAH0C,CAMlD,MAAOsC,EAtBX;AAmCAG,QAAO,GAAgB,CAAC9D,CAAD,CACvB,CACI,GAAWpJ,IAAAA,EAAX,GAAIoJ,CAAJ,CAAsB,CAClB,IAAIpO,CASJ,KAAKA,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBgS,EAAA9N,OAAhB,CAA6ClE,CAAA,EAA7C,CACI,GAAIiS,EAAA,CAAqBjS,CAArB,CAAAoO,GAAJ,GAAmCA,CAAnC,CACI,MAAO6D,GAAA,CAAqBjS,CAArB,CAZG,CAmBtB,MAAO,KApBX,CA+BAmS,QAAO,GAAkB,CAACC,CAAD,CAAQN,CAAR,CACzB,CAD4CO,IAAAA,CAExC,IAAcrN,IAAAA,EAAd,GAAIoN,CAAJ,CAAyB,CACrB,IAAIpS,CAMA8R,EAAJ,GAEQA,CAFR,CACuC,CAAnC,EAAK9R,CAAL,CAAS8R,CAAAvQ,QAAA,CAAkB,GAAlB,CAAT,EACgBuQ,CAAAnQ,OAAA,CAAiB,CAAjB,CAAoB3B,CAApB,CAAwB,CAAxB,CADhB,CAGgB,EAJpB,CAOA,KAAKA,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBgS,EAAA9N,OAAhB,CAA6ClE,CAAA,EAA7C,CACI,GAAIqS,CAAJ,CACQA,CAAJ,EAAqBJ,EAAA,CAAqBjS,CAArB,CAArB,GAA8CqS,CAA9C,CAA8D,IAA9D,CADJ,KAIA,IAAI,EAAAD,CAAA,EAASH,EAAA,CAAqBjS,CAArB,CAAAsG,KAAT,EAA2CwL,CAA3C,EAAyDG,EAAA,CAAqBjS,CAArB,CAAAoO,GAAA7M,QAAA,CAAmCuQ,CAAnC,CAAzD,CAAJ,CACI,MAAOG,GAAA,CAAqBjS,CAArB,CApBM,CAyBzB,MAAO,KA1BX,CAkCAsS,QAAO,GAAiB,CAAC1B,CAAD,CACxB,CACI,IAAI1C,EAAQ,IAEZ,IADItD,CACJ,CADagG,CAAAY,aAAA,CAAqB,YAArB,CACb,CACI,GAAI,CACAtD,CAAA,CAAQpF,IAAA,CAAK,GAAL,CAAW8B,CAAX,CAAoB,GAApB,CADR,CAUF,MAAMhL,CAAN,CAAS,CA7RfqJ,CAAA,CA8RwBrJ,CAAAsJ,QA9RxB,CA8RoC,IA9RpC,CA8R2C0B,CA9R3C,CA8RoD,GA9RpD,CA6Re,CAIf,MAAOsD,EAlBX;AAkCAqE,QAAO,EAAkB,CAAC3B,CAAD,CAAUW,CAAV,CAAkBiB,CAAlB,CACzB,CACQA,CAAJ,GAAejB,CAAf,EAAyB,GAAzB,CAA+BiB,CAA/B,CAA2C,SAA3C,CAKA,IAAI5B,CAAA6B,uBAAJ,CACI,MAAO7B,EAAA6B,uBAAA,CAA+BlB,CAA/B,CAPf,KASWtR,CAAGyS,EAAAA,CAAK,EACXC,EAAAA,CAAQ/B,CAAAgC,qBAAA,CAA6B,GAA7B,CACZ,KAAIC,EAAK,IAAIC,MAAJ,CAAW,OAAX,CAAqBvB,CAArB,CAA8B,OAA9B,CACJvR,EAAA,CAAI,CAAT,KAAYC,CAAZ,CAAgB0S,CAAAzO,OAAhB,CAA8BlE,CAA9B,CAAkCC,CAAlC,CAAqCD,CAAA,EAArC,CACQ6S,CAAAE,KAAA,CAAQJ,CAAA,CAAM3S,CAAN,CAAAgT,UAAR,CAAJ,EACIN,CAAAnJ,KAAA,CAAQoJ,CAAA,CAAM3S,CAAN,CAAR,CAMR,OAAO0S,EApBX;AAiIAO,QAAO,GAAe,CAACxE,CAAD,CACtB,CAMI,IALA,IAAIyE,EAAW,CAAA,CAAf,CACIC,EAAYC,EAAA,CAAmB3E,CAAnB,CAIhB,CAAO0E,CAAP,EAAoBA,CAAAjP,OAApB,CAAA,CAAsC,CAElC,IAAImP,EAAUF,CAAAG,OAAA,CAAiB,CAAjB,CAAoB,CAApB,CAAA,CAAuB,CAAvB,CAAd,CACIC,EAAWF,CAAA,CAAQ,CAAR,CADf,CAUIG,EAAc,IAC+B,EAAjD,EAAIC,EAAAlS,QAAA,CAAgCgS,CAAhC,CAAJ,GACIC,CADJ,CACkBE,QAA2B,EAAG,CACxC,MAAO,SAAQ,EAAG,CACdC,EAAA,CAA0BlF,CAA1B,CADc,CADsB,CAA9B,EADlB,CAQA,KAAImF,EAAYC,EAAA,CAAyBN,CAAzB,CAChB,IAAIK,CAAJ,CACI,GAAI,CAACJ,CAAL,CACIN,CAAA,CAAWU,CAAA,CAAUP,CAAA,CAAQ,CAAR,CAAV,CAAsBA,CAAA,CAAQ,CAAR,CAAtB,CAAkCA,CAAA,CAAQ,CAAR,CAAlC,CADf,KAGI,IAAI,CAACO,CAAA,CAAUJ,CAAV,CAAuBH,CAAA,CAAQ,CAAR,CAAvB,CAAmCA,CAAA,CAAQ,CAAR,CAAnC,CAA+CA,CAAA,CAAQ,CAAR,CAA/C,CAAL,CAAiE,KAAjE,CAJR,IAOK,CACDH,CAAA,CAAW,CAAA,CACX,KAAIzD,EAAYqE,EAAA,CAA6BT,CAAA,CAAQ,CAAR,CAA7B,CAAyC5E,CAAzC,CAChB,IAAIgB,CAAJ,CAEI,GADAmE,CACA,CADYG,EAAA,CAA4BR,CAA5B,CACZ,CACIL,CAAA,CAAWU,CAAA,CAAUnE,CAAV,CAAqB4D,CAAA,CAAQ,CAAR,CAArB,CAAiCA,CAAA,CAAQ,CAAR,CAAjC,CADf,KAGK,CACD,IAAIW,EAAUvE,CAAA,QACd,IAAIuE,CAAJ,GACIJ,CADJ,CACgBI,CAAA,CAAQT,CAAR,CADhB,EAIQ,GADAL,CACI,CADO,CAAA,CACP,CAAA,CAACM,CAAL,CACIN,CAAA,CAAWU,CAAAK,KAAA,CAAexE,CAAf,CAA0B4D,CAAA,CAAQ,CAAR,CAA1B,CAAsCA,CAAA,CAAQ,CAAR,CAAtC,CADf,KAGI,IAAI,CAACO,CAAAK,KAAA,CAAexE,CAAf,CAA0B+D,CAA1B,CAAuCH,CAAA,CAAQ,CAAR,CAAvC,CAAmDA,CAAA,CAAQ,CAAR,CAAnD,CAAL,CAAqE,KAThF,CARR,CAyBL,GAAI,CAACH,CAAL,CAAe,CACXjK,CAAA,CAAoB,iBAApB,CAAwCsK,CAAxC,EAAoDK,CAAA,CAAW,SAAX,CAAuB,eAA3E,EACA,MAFW,CAtDmB,CA4DlCT,CAAJ,EAAiB,CAACA,CAAAjP,OAAlB,EACI,OAAOkP,EAAA,CAAmB3E,CAAnB,CAGX,OAAOyE,EAtEX,CAmIA,CAAA,CAvqHJ,CAAAgB,UAuqHIC;CAAAC,SAAA,CAAAA,QAAQ,EACR,CACI,MAAQ,KAAA/F,KAAA,CAAW,IAAAA,KAAX,CAAwB,IAAAD,GAAxB,EAAmC,IAAA9H,KAD/C,CAiCA6N;CAAAvC,GAAA,CAAAA,QAAU,CAACyC,CAAD,CAAYC,CAAZ,CAAsB/D,CAAtB,CACV,CACI,OAAQ+D,CAAR,EACA,KAAK,OAAL,CAWI,MAVK,KAAA/F,EAAA,CAAc+F,CAAd,CAUE,GATH,IAAA/F,EAAA,CAAc+F,CAAd,CACA,CAD0B/D,CAC1B,CAAAA,CAAAgE,QAAA,CAAmB,QAAQ,CAAC9E,CAAD,CAAY,CACnC,MAAO+E,SAAqB,EAAG,CACvB/E,CAAAlB,EAAA,MAAJ,GACIkB,CAAAlB,EAAA,MAAAnM,MADJ,CACwC,EADxC,CAD2B,CADI,CAApB,CAMjB,IANiB,CAQhB,EAAA,CAAA,CACX,MAAK,OAAL,CAqCI,MApCK,KAAAmM,EAAA,CAAc+F,CAAd,CAoCE,GAlCH,IAAA/F,EAAA,CAAc+F,CAAd,CAqBA,CAtByD/D,CAsBzD,CAbA,IAAAkE,EAaA,CAbcC,QAAsB,CAAChU,CAAD,CAAyB,CACzD,IAAAiU,EAAA,CAAajU,CAAb,CAAgB,IAAA4F,KAAhB,CACA,OAAO,CAAA,CAFkD,CAa7D,CAtByDiK,CAgBzDnO,MAMA,CANwB,EAMxB,CALA,IAAAwS,MAKA,CALa,QAAQ,CAACrE,CAAD,CAAU,CAC3B,MAAOsE,SAAqB,CAACnU,CAAD,CAAI,CAC5BoU,EAAA,CAAwBvE,CAAxB,CAAiC7P,CAAjC,CAD4B,CADL,CAAlB,CAjB4C6P,CAiB5C,CAKb,CAAA,IAAAoE,EAAA,CAAe,QAAQ,CAAClF,CAAD,CAAYc,CAAZ,CAAqB,CACxC,MAAOwE,SAAuB,CAACrU,CAAD,CAAI4F,CAAJ,CAAc,CACnC5F,CAAL,GAAQA,CAAR,CAAY,EAAZ,CACA,IAAI4F,CAAJ,EAAY0O,EAAZ,EAAuD,KAAvD,EAAwCtU,CAAAmB,MAAA,CAAS,EAAT,CAAxC,CACQyE,CACJ,GADU5F,CACV,CADc4F,CACd,CADqB,IACrB,CAD4B5F,CAC5B,EAAAoU,EAAA,CAAwBvE,CAAxB,CAAiC7P,CAAjC,CAAqC,IAArC,CAFJ,KAGO,CA1jBnB8P,CAAAA,CA2jByCD,CA3jBjCnO,MACZ,KAAIpC,EAAIwQ,CAAA7M,YAAA,CA0jB8CjD,CA1jB9C,CACA,EAAR,CAAIV,CAAJ,CACIwQ,CADJ,EAyjBsD9P,CAzjBtD,CACuB,IADvB,CAGI8P,CAHJ,CAGYA,CAAA7O,OAAA,CAAa,CAAb,CAAgB3B,CAAhB,CAHZ,EAyjByDU,CAzjBzD,CAyjB6D,GAzjB7D;AAG4C8P,CAAA7O,OAAA,CAAa3B,CAAb,CAsjBUU,CAtjBOwD,OAAjB,CAKb,KAA/B,CAAgBsM,CAAAtM,OAAhB,GAAqCsM,CAArC,CAA6CA,CAAA7O,OAAA,CAAa6O,CAAAtM,OAAb,CAA4B,IAA5B,CAA7C,CAijB6CqM,EAhjB7CnO,MAAA,CAAgBoO,CAgjB6BD,EA/iB7CE,UAAA,CA+iB6CF,CA/iBzBG,aA8iBG,CALiC,CADJ,CAA7B,CAWb,IAXa,CAtB0CH,CAsB1C,CAaZ,EAAA,CAAA,CACX,SACI,MAAO,CAAA,CApDX,CADJ,CAsEA4D,EAAAxR,IAAA,CAAAA,QAAG,EACH,EAiEAwR,EAAAS,MAAA,CAAAA,QAAK,EACL,EAeAT,EAAAQ,EAAA,CAAAA,QAAO,EACP,EAaAR,EAAAlN,OAAA,CAAAA,QAAM,CAACvG,CAAD,CACN,CACI,IAAAiU,EAAA,CAAa,IAAArO,KAAb,CAAyB,IAAzB,CAAgC5F,CAAhC,CADJ,CAiBAyT,EAAAM,EAAA,CAAAA,QAAM,CAAC/T,CAAD,CAAIuU,CAAJ,CAAgB7G,CAAhB,CACN,CACI,GAAI,CAAC6G,CAAL,CAAiB,CAIb,IAAIC,EAAWpB,EAAA,CAA6B,UAA7B,CAAyC,IAAA1F,GAAzC,CACf,IAAI8G,CAAJ,EAAgBA,CAAAxG,MAAAM,GAAhB,CAEI,MADAmG,QAAAxS,IAAA,CAAY,iCAAZ,CAAgDjC,CAAhD,CACO,CAAA,CAAA,CAPE,CAUe,CAAA,CAAA0N,CAAA,EAAM,IAAA9H,KAAlB2O,EAzzBpB,EAAiBhM,CAAA,EAAqBmF,CAAA,CAAKA,CAAL,CAAU,IAAV,CAAkB,EAAvC,EAyzBA1N,CAzzBA,CA0zBjB,OAAO,CAAA,CAZX,CAuBA0U,SAAA,GAAQ,CAARA,CAAQ,CAAC1U,CAAD,CACR,CACI,CAAAgO,MAAAO,MAAA,CAAmB,CAAA,CACnB,EAAAwF,EAAA,CAAY/T,CAAZ,CAFJ;AAwBA2U,QAAA,GAAO,CAAPA,CAAO,CACP,CACI,MAAI,EAAA3G,MAAAO,MAAJ,EACI,CAAA0F,EAAA,CAAa,CAAAP,SAAA,EAAb,CAA+B,QAA/B,CACO,CAAA,CAAA,CAFX,EAIO,CAAA,CALX,CAqBAkB,QAAA,GAAO,CAAPA,CAAO,CAACpG,CAAD,CACP,CACQA,CAAJ,GACQ,CAAAR,MAAAC,MAAJ,CACIO,CAAA,EADJ,CAII,CAAAA,GAJJ,CAImBA,CALvB,CAQA,OAAO,EAAAR,MAAAC,MATX,CAoBA4G,QAAA,EAAQ,CAARA,CAAQ,CAACC,CAAD,CACR,CACS,CAAA9G,MAAAO,MAAL,GACI,CAAAP,MAAAC,MACA,CAD+B,CAAA,CAC/B,GADoB6G,CACpB,CAAI,CAAA9G,MAAAC,MAAJ,GAEQO,CAEJ,CAFc,CAAAA,GAEd,CADA,CAAAA,GACA,CADe,IACf,CAAIA,CAAJ,EAAaA,CAAA,EAJjB,CAFJ,CADJ,CAqBAuG,QAAA,GAAM,CAANA,CAAM,CAACC,CAAD,CACN,CACQ,CAAAhH,MAAAE,GAAJ,GACQ8G,CAAJ,CACI,CAAAhH,MAAAG,GADJ,CAC4B,CAAA,CAD5B,CAEuB7J,IAAAA,EAFvB,GAEW0Q,CAFX,EAGI,CAAAf,EAAA,CAAa,CAAAP,SAAA,EAAb,CAA+B,OAA/B,CAJR,CAOA,OAAO,EAAA1F,MAAAE,GARX,CAoBA+G,QAAA,GAAO,CAAPA,CAAO,CAACC,CAAD,CACP,CACI,GAAI,CAAAlH,MAAAG,GAAJ,CAGI,MAFA,EAAAH,MAAAE,GACA,CADkB,CAAA,CAClB,CAAA,CAAAF,MAAAG,GAAA,CAAwB,CAAA,CAG5B,IAAI,CAAAH,MAAAO,MAAJ,CAEI,MADA,EAAA0F,EAAA,CAAa,CAAAP,SAAA,EAAb,CAA+B,QAA/B,CACO,CAAA,CAAA,CAEX,EAAA1F,MAAAE,GAAA,CAAkBgH,CAClB,OAAO,EAAAlH,MAAAE,GAXX;AAsBAuF,CAAA0B,GAAA,CAAAA,QAAO,EACP,CAEI,MADA,KAAAnH,MAAAK,GACA,CADqB,CAAA,CADzB,CAaAoF,EAAA2B,GAAA,CAAAA,QAAS,CAACC,CAAD,CAAQC,CAAR,CACT,CACQA,CAAJ,GAAe,IAAAtH,MAAAK,GAAf,CAAoC,CAAA,CAApC,CACA,OAAO,CAAA,CAFX,CAcAkH,SAAA,EAAc,CAAdA,CAAc,CAAC9H,CAAD,CACd,CADeA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAc,CAAd,CAAAA,CAEX,OAAgB,EAAAiB,EAAhB,GACQ,CAaA,GAbS,CAAAA,EAaT,GAZAjB,CAYA,CAZcA,CAYd,EAZ6B,CAAAA,GAY7B,EAVA+H,CAUA,CAVc,CAAA9G,EAAAjB,GAUd,CAVqCA,CAUrC,CAHCA,CAGD,CAHe,UAGf,EAH+BA,CAG/B,CAH6C,SAG7C,GAFM+H,CAEN,CAFoB,UAEpB,EAFqCA,CAErC,CAFmD,SAEnD,GAFgEA,CAEhE,CAF8E,CAE9E,GAAA/H,CAAA,EAAe+H,CAAf,GAA+B/H,CAdvC,EAee,CAAA,CAff,CAkBO,CAAA,CAnBX,CAqDAgI,QAAA,EAAY,CAAZA,CAAY,CAACnG,CAAD,CAAW7B,CAAX,CAAwBiI,CAAxB,CACZ,CACoB,CAAAhH,EAAhB,GACwB,CAAA,CADxB,GACQjB,CADR,EACgC8H,CAAA,CAAAA,CAAA,CAAoB9H,CAApB,CAAkC,CAAlC,CADhC,GAEQ,CAAAiB,EAAAlG,QAAA,CAAiB8G,CAAjB,CAA2BoG,CAA3B,CAHZ,CAyJAC,IAAAA,GAAYA,UAiBZnP;MAAJ,GACSA,MAAA,KAGL,GAHqBA,MAAA,KAGrB,CAHsC,EAGtC,EAFKA,MAAA,KAAA,SAEL,GAFiCA,MAAA,KAAA,SAEjC,CAF8D,EAE9D,EADKA,MAAA,KAAA,WACL,GADmCA,MAAA,KAAA,WACnC,CADkE,EAClE,EAAKA,MAAA,KAAA,SAAL,GAAiCA,MAAA,KAAA,SAAjC,CAA8D,EAA9D,CAJJ,CAMA;IAAA0I,GAAqB1I,MAAA,CAAQA,MAAA,KAAA,SAAR,CAAqC,EAA1D,CACA+K,GAAuB/K,MAAA,CAAQA,MAAA,KAAA,WAAR,CAAuC,EAD9D,CAEAkM,GAAqBlM,MAAA,CAAQA,MAAA,KAAA,SAAR,CAAqC,EAF1D,CAIAoP,GAA0B,CACtB,MADsB,CACd,OADc,CACL,MADK,CAJ1B,CAOAzC,GAA2B,CACvB,MAzrBA0C,QAAkB,CAACvG,CAAD,CAClB,CACI/G,CAAA,CAAoB+G,CAApB,CACA,OAAO,CAAA,CAFX,CAurBuB,CAEvB,MAlpBAwG,QAAkB,CAACC,CAAD,CAAaC,CAAb,CAClB,CACInL,UAAA,CAAWkL,CAAX,CAAuB,CAACC,CAAxB,CACA,OAAO,CAAA,CAFX,CA+oBuB,CAP3B,CAWA3C,GAA8B,CAC1B,OA/qBA4C,QAAmB,CAAClH,CAAD,CAAY6E,CAAZ,CAAsBlK,CAAtB,CACnB,CACI,IAAI8I,EAAW,CAAA,CAGf,IADI3C,CACJ,CAFgBd,CAAAmH,SACF,CAAUtC,CAAV,CACd,CACI,IAAStU,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAAoBuQ,CAAAsG,QAAA3S,OAApB,CAA4ClE,CAAA,EAA5C,CACI,GAAIuQ,CAAAsG,QAAA,CAAgB7W,CAAhB,CAAA8W,YAAJ,EAAsC1M,CAAtC,CAA8C,CACtCmG,CAAAwG,cAAJ,EAA6B/W,CAA7B,GACIuQ,CAAAwG,cADJ,CAC4B/W,CAD5B,CAGAkT,EAAA,CAAW,CAAA,CACX,MAL0C,CAStD,MAAOA,EAfX,CA6qB0B,CAmBzBnK;KAAAtE,UAAAlD,QAAL,GACIwH,KAAAtE,UAAAlD,QADJ,CAC8ByV,QAAQ,CAACC,CAAD,CAAMC,CAAN,CAAa,CAClClX,CAAAA,CAAKkX,CAALlX,EAAc,CAAvB,KAAK,IAAsBC,EAAI,IAAAiE,OAA/B,CAA4ClE,CAA5C,CAAgDC,CAAhD,CAAmDD,CAAA,EAAnD,CACI,GAAI,IAAA,CAAKA,CAAL,CAAJ,GAAgBiX,CAAhB,CAAuB,MAAOjX,EAElC,OAAQ,EAJmC,CADnD,CAYK+I,MAAAoO,QAAL,GACIpO,KAAAoO,QADJ,CACoBC,QAAQ,CAACC,CAAD,CAAM,CAC1B,MAA+C,gBAA/C,GAAOC,MAAA7S,UAAA2P,SAAAH,KAAA,CAA+BoD,CAA/B,CADmB,CADlC,CASKE;QAAA9S,UAAA+S,KAAL,GACID,QAAA9S,UAAA+S,KADJ,CAC8BC,QAAQ,CAACR,CAAD,CAAM,CAQtBS,QAAA,EAAQ,EAAG,CACrB,MAAOC,EAAAC,MAAA,CAAc,IAAA,WAAgBC,EAAhB,EAAyBZ,CAAzB,CAA8B,IAA9B,CAAqCA,CAAnD,CAAwDa,CAAAC,OAAA,CAAiChP,KAAAtE,UAAA5C,MAAAoS,KAAA,CAA2B+D,SAA3B,CAAjC,CAAxD,CADc,CADQH,QAAA,EAAQ,EAAG,EAN5C,GAAmB,UAAnB,EAAI,MAAO,KAAX,CAEI,KAAM,KAAII,SAAJ,CAAc,8CAAd,CAAN,CAEJ,IAAIH,EAAO/O,KAAAtE,UAAA5C,MAAAoS,KAAA,CAA2B+D,SAA3B,CAAsC,CAAtC,CAAX,CACIL,EAAU,IAKdE,EAAApT,UAAA,CAAkB,IAAAA,UAClBiT,EAAAjT,UAAA,CAAoB,IAAIoT,CACxB,OAAOH,EAb6B,CAD5C,CAoEA;IAAIQ,GAAsC,WAAtCA,GAAe,MAAOC,YAA1B,CA8BIC,EAvEWA,OAyCf,CA+BIC,GAhEUA,OAiCd,CAiCIC,GAzCaA,CAAAA,CAQjB,CAwCIJ,GAAYA,EAxChB,CAyCIK,GA7BWA,CAAAA,CAZf,CA0CIC,GAnBUA,CAAAA,CAvBd,CA2KIC,GAASA,0EAAAA,MAAAA,CAAAA,GAAAA,CA3Kb,CAomBIC,GAAMA,CACFC,GAAYD,CADVA,CAEFE,GAAYF,GAFVA,CAGFG,GAAYH,CAHVA,CAIFI,GAAMJ,CACFK,GAAQL,EADNA,CAEFM,GAAQN,EAFNA,CAGFO,GAAQP,EAHNA,CAIFQ,GAAQR,EAJNA,CAKFS,GAAQT,GALNA,CAMFU,GAAQV,GANNA,CAOFW,GAAQX,GAPNA,CAQFY,GAAQZ,IARNA,CASFa,GAAQb,IATNA,CAUFc,GAAQd,IAVNA,CAWFe,GAAQf,KAXNA,CAYFgB,GAAOhB,CACHe,GAAQf,EADLA,CAZLA,CAJJA,CAoBFiB,GAAMjB,CACFkB,GAAQlB,CADNA,CAEFmB,GAAQnB,CAFNA,CAGFoB,GAAQpB,CAHNA,CAIFqB,GAAQrB,EAJNA,CAKFsB,GAAQtB,EALNA,CAMFuB,GAAQvB,EANNA,CAOFwB,GAAQxB,GAPNA,CAQFyB,GAAQzB,GARNA,CASF0B,GAAQ1B,GATNA,CAUF2B,GAAQ3B,IAVNA,CAWF4B,GAAQ5B,IAXNA,CAYF6B,GAAQ7B,IAZNA,CAaF8B,GAAQ9B,IAbNA,CAcF+B,GAAQ/B,KAdNA,CAeFgC,GAAQhC,KAfNA,CAgBFiC,GAAQjC,KAhBNA,CApBJA,CAsCFkC,GAAMlC,CACFmC,GAAQnC,CADNA,CAEFoC,GAAQpC,EAFNA,CAGFqC,GAAQrC,EAHNA,CAIFsC,GAAQtC,EAJNA,CAKFuC,GAAQvC,GALNA,CAMFwC,GAAQxC,GANNA,CAOFyC,GAAQzC,GAPNA,CAQF0C,GAAQ1C,IARNA,CASF2C,GAAQ3C,IATNA,CAUF4C,GAAQ5C,IAVNA,CAWFiC,GAAQjC,KAXNA,CAYF6C,GAAQ7C,KAZNA,CAaFqB,GAAQrB,IAbNA;AAcF8C,GAAQ9C,KAdNA,CAeF+C,GAAQ/C,IAfNA,CAgBFgB,GAAOhB,CACHoC,GAAQpC,CADLA,CAEHqC,GAAQrC,CAFLA,CAhBLA,CAtCJA,CA2DFgD,GAAMhD,CACFiD,GAAQjD,EADNA,CAEFkD,GAAQlD,EAFNA,CAGFmD,GAAQnD,IAHNA,CAIFoD,GAAQpD,KAJNA,CAKFgB,GAAOhB,CACHkD,GAAQlD,CADLA,CAEHmD,GAAQnD,CAFLA,CAGHoD,GAAQpD,EAHLA,CALLA,CA3DJA,CAsEFoC,GAAMpC,CACFqD,GAAQrD,CADNA,CAEFsD,GAAQtD,CAFNA,CAGFuD,GAAQvD,CAHNA,CAIFwD,GAAQxD,CAJNA,CAKFyD,GAAQzD,CALNA,CAMF0D,GAAQ1D,EANNA,CAOF2D,GAAQ3D,EAPNA,CAQF4D,GAAQ5D,EARNA,CAtEJA,CApmBV,CAqrBI6D,GAAMA,CACF5D,GAAY4D,CADVA,CAEF3D,GAAY2D,GAFVA,CAGF1D,GAAY0D,CAHVA,CAIFC,GAAYD,IAJVA,CAKFE,GAAMF,CACFpD,GAAQoD,CADNA,CAEFzB,GAAQyB,EAFNA,CAGFG,GAAQH,EAHNA,CAIFvB,GAAQuB,EAJNA,CAKFtB,GAAQsB,GALNA,CAMFT,GAAQS,GANNA,CAOFI,GAAQJ,KAPNA,CAQFK,GAAQL,KARNA,CASFhB,GAAQgB,KATNA,CAUFM,GAAQN,KAVNA,CAWFO,GAAQP,GAXNA,CAYFf,GAAQe,KAZNA,CAaFd,GAAQc,IAbNA,CAcF7C,GAAO6C,CACHzB,GAAQyB,CADLA,CAEHG,GAAQH,CAFLA,CAGHT,GAAQS,CAHLA,CAdLA,CALJA,CAyBFQ,GAAMR,CACFd,GAAQc,KADNA,CAzBJA,CA+BFS,GAAMT,CACFU,GAAYV,CADVA,CAEFW,GAAYX,CAFVA,CAGFY,GAAYZ,EAHVA,CAIFa,GAAYb,KAJVA,CAKFc,GAAYd,EALVA,CAMFe,GAAYf,EANVA,CAOFgB,GAAYhB,KAPVA,CAQFiB,GAAYjB,CARVA,CASFkB,GAAYlB,CATVA,CAUF7C,GAAO6C,CACHe,GAAQf,CADLA,CAEHgB,GAAQhB,CAFLA,CAVLA,CA/BJA,CAiDFmB,GAAMnB,CACFoB,GAAOpB,CACHqB,GAAQrB,CADLA,CAEHsB,GAAQtB,CAFLA,CAGHuB,GAAQvB,CAHLA,CAIHwB,GAAQxB,CAJLA,CAKHJ,GAAQI,CALLA,CAMHyB,GAAQzB,CANLA,CAOH0B,GAAQ1B,CAPLA,CAQH2B,GAAQ3B,CARLA,CADLA,CAWF4B,GAAY5B,CAXVA,CAYF6B,GAAY7B,EAZVA,CAaF8B,GAAY9B,EAbVA,CAcF+B,GAAY/B,EAdVA,CAeFgC,GAAYhC,GAfVA,CAgBFiC,GAAYjC,GAhBVA,CAiBFkC,GAAYlC,GAjBVA,CAkBFmC,GAAYnC,IAlBVA,CAmBFoC,GAAYpC,IAnBVA,CAoBFqC,GAAYrC,IApBVA,CAqBFsC,GAAYtC,IArBVA;AAsBFuC,GAAYvC,KAtBVA,CAuBFwC,GAAYxC,KAvBVA,CAjDJA,CA0EFyC,GAAMzC,CACF0C,GAAQ1C,EADNA,CA1EJA,CA6EFI,GAAMJ,CACF2C,GAAQ3C,IADNA,CAEF4C,GAAQ5C,IAFNA,CAGF3C,GAAQ2C,IAHNA,CAIF6C,GAAQ7C,IAJNA,CAKFnC,GAAQmC,IALNA,CAMF8C,GAAQ9C,IANNA,CAOFlC,GAAQkC,IAPNA,CAQF+C,GAAQ/C,IARNA,CA7EJA,CAuFFzB,GAAMyB,CACFgD,GAAQhD,CADNA,CAEFL,GAAQK,CAFNA,CAGFiD,GAAQjD,CAHNA,CAIFJ,GAAQI,CAJNA,CAKFkD,GAAQlD,CALNA,CAMFmD,GAAQnD,EANNA,CAOFoD,GAAQpD,EAPNA,CAQFqD,GAAQrD,EARNA,CAvFJA,CArrBV,CAuxBIsD,GAAMA,CACFlH,GAAYkH,CADVA,CAEFjH,GAAYiH,GAFVA,CAGFhH,GAAYgH,CAHVA,CAIFrD,GAAYqD,IAJVA,CAKFC,GAAMD,CACFhF,GAAQgF,CADNA,CAEF/E,GAAQ+E,EAFNA,CAGFE,GAAQF,EAHNA,CAIFG,KAAQH,EAJNA,CAKF7E,GAAQ6E,EALNA,CAMFI,GAAQJ,GANNA,CAOFK,KAAQL,KAPNA,CAQFtE,GAAQsE,KARNA,CASF9F,GAAQ8F,KATNA,CAUFrE,GAAQqE,KAVNA,CAWFpE,GAAQoE,KAXNA,CALJA,CAkBFM,GAAMN,EAlBJA,CAoBFO,GAAMP,CACFZ,GAAQY,GADNA,CApBJA,CAuBFQ,GAAMR,CACFZ,GAAQY,EADNA,CAvBJA,CA0BFS,GAAMT,CASFU,GAAQV,CATNA,CAUFW,GAAQX,CAVNA,CAWFpG,GAAQoG,CAXNA,CAYF3e,GAAQ2e,EAZNA,CAaF1G,GAAQ0G,GAbNA,CA1BJA,CAyCF/E,GAAM+E,CACFY,GAAQZ,CADNA,CAEFa,MAAQb,CAFNA,CAGF7D,GAAQ6D,CAHNA,CAIF5D,GAAQ4D,CAJNA,CAKF9F,GAAQ8F,CALNA,CAMFc,GAAQd,EANNA,CAOFe,GAAQf,EAPNA,CAQFgB,GAAQhB,EARNA,CAzCJA,CAmDFiB,GAAOjB,CACHkB,GAAYlB,CADTA,CAEHmB,GAAYnB,EAFTA,CAGHoB,GAAYpB,EAHTA,CAIHqB,GAAYrB,EAJTA,CAKHsB,GAAYtB,EALTA,CAMHuB,GAAYvB,EANTA,CAOHwB,GAAYxB,EAPTA,CAQHyB,GAAYzB,EARTA,CASH0B,GAAY1B,EATTA,CAUH2B,GAAY3B,EAVTA,CAWH4B,GAAY5B,EAXTA,CAYH6B,GAAY7B,GAZTA,CAaH8B,GAAY9B,GAbTA,CAcH+B,GAAY/B,GAdTA,CAeHgC,GAAYhC,GAfTA,CAgBHiC,GAAYjC,GAhBTA,CAnDLA,CAvxBV,CA61BIkC,GAASA,CACLA,GAAQA,OADHA;AAELA,GAAQA,OAFHA,CAGLA,GAAQA,OAHHA,CAILA,GAAQA,OAJHA,CAKLA,GAAQA,MALHA,CAMLA,IAAQA,MANHA,CAOLA,IAAQA,MAPHA,CAQLA,IAAQA,MARHA,CAYbC,GAAAC,GAAA,CAAkB,CACd,IADc,CAEd,EAFc,CAET,CAFS,CAEN,EAFM,CAEF,GAFE,CAGd,CAHc,CAGT,CAHS,CAGL,CAHK,CAGF,GAHE,CAId,CAJc,CAOlBC,GAAA3I,GAAA,CAAkB,CACd,IADc,CAEd,GAFc,CAET,CAFS,CAEN,EAFM,CAEF,GAFE,CAGd,CAHc,CAGT,CAHS,CAGL,CAHK,CAGF,GAHE,CAId4I,EAAArJ,GAAAS,GAJc,CAIS6I,EAAAtJ,GAAAM,GAJT,CAI+BiJ,EAAAvJ,GAAAI,GAJ/B,CAOlBoJ,GAAAC,GAAA,CAAmB,CACf,IADe,CAEf,GAFe,CAEV,CAFU,CAEP,EAFO,CAEH,GAFG,CAGf,CAHe,CAGV,CAHU,CAGN,CAHM,CAGH,GAHG,CAIfC,EAAA9E,GAAAC,GAAAK,GAJe,CAIgByE,EAAA/E,GAAAS,GAJhB,CAIwCuE,EAAAhF,GAAAU,GAJxC,CAuBnBtN,EAAA,CAv7BesH,OAw7BfuK,GAAA,CAh7BctK,OAk7BduK,GAAA,CAz5BiBtK,CAAAA,CA05BjBuK,GAAA,CAA0B3K,EAE1B4K,GAAA,CADAC,EACA,CAx4BexK,CAAAA,CA67Bf;IAAAyK,GAA2B,CACvB,IA9CYC,CA6CW,CAEvB,KA9CYC,CA4CW,CAGvB,MA9CYC,CA2CW,CAIvB,MA9CYC,CA0CW,CAKvB,IA9CYC,EAyCW,CAMvB,OA9CYC,EAwCW,CAOvB,IA9CYC,EAuCW,CAQvB,IA9CYC,GAsCW,CASvB,OA9CYC,GAqCW,CAUvB,MA9CYC,GAoCW,CAWvB,SA9CYC,IAmCW,CAYvB,IA9CYC,IAkCW,CAavB,KA9CYC,IAiCW,CAcvB,MA9CYC,IAgCW,CAevB,KA9CYC,IA+BW,CAgBvB,KA9CY9H,KA8BW,CAiBvB,MA9CYD,KA6BW,CAkBvB,KA9CYtD,KA4BW,CAmBvB,KA9CY6D,MA2BW,CAoBvB,KA9CYsD,MA0BW,CAqBvB,KA9CYmE,OAyBW,CAsBvB,OA9CYC,OAwBW,CAuBvB,KA9CYC,OAuBW,CAwBvB,MA9CYC,OAsBW,CAyBvB,QA9CYC,QAqBW,CA0BvB,SA9CYC,QAoBW,CAkCvB,OArDYC,SAmBW,CAmCvB,KArDYC,UAkBW,CAoCvB,KArDYC,WAiBW,CAgFvBxW;QATEyW,GASS,CAACC,CAAD,CAAaC,CAAb,CACX,CACI,CAAA,KAAA,CAAA,IAAA,CAAM,OAAN,CAAeD,CAAf,CAtHQhB,GAsHR,CAOA,KAAAkB,EAAA,CADA,IAAAC,EACA,CADiB,CAIjB,KAAAF,EAAA,CAAiBA,CAiBjB,KAAAG,GAAA,CAAe,IAAAC,EAAf,CADA,IAAAC,GACA,CAFA,IAAAC,GAEA,CAFkB,CAGlB,KAAAC,EAAA,CAAe,IAAAC,EAAf,CAA+B,EAa/B,KAAAC,EAAA,CADA,IAAAC,EACA,CAFA,IAAAC,EAEA,CAFgB,CAAA,CAGhB,KAAAC,EAAA,CAAgBC,EAShB,KAAAC,EAAA,CAAY,EAsBZ,KAAAC,EAAA,CAAgB,CACZ,MAAY,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAA,CAAP,CAAc,CAAA,CAAd,CAAqB,IAAAC,GAArB,CADA,CAEZ,KAAY,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAA,CAAP,CAAc,CAAA,CAAd,CAAqB,IAAAC,GAArB,CAFA,CAGZ,OAAY,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAA,CAAP,CAAc,CAAA,CAAd,CAAqB,IAAAC,GAArB,CAHA,CAIZ,KAAY,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAA,CAAP,CAAc,CAAA,CAAd,CAAqB,IAAAC,GAArB,CAJA,CAKZ,IAAY,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAA,CAAP,CAAc,CAAA,CAAd,CAAqB,IAAAC,GAArB,CALA,CAMZ,KAAY,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAA,CAAP,CAAc,CAAA,CAAd,CAAqB,IAAAC,GAArB,CANA,CAOZ,KAAY,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAA,CAAP,CAAc,CAAA,CAAd,CAAqB,IAAAC,GAArB,CAPA,CAQZ,KAAY,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAA,CAAP,CAAc,CAAA,CAAd,CAAqB,IAAAC,GAArB,CARA,CAUhB,KAASlmB,CAAT,CAAa,CAAb,CAAoB,EAApB,CAAgBA,CAAhB,CAAwBA,CAAA,EAAxB,CACI,IAAA0lB,EAAA,CAAc,GAAd,CAAkB1lB,CAAlB,CAAA,CAAuB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAA,CAAP,CAAc,CAAA,CAAd,CAAqB,IAAAmmB,GAArB,CAA2CnmB,CAA3C,CAa3B,KAAAoP,EAAA,CAHA,IAAAC,EAGA,CANA,IAAAC,EAMA,CATA,IAAAC,EASA,CATW,IAyBX,KAAA,QAAA,CAAkB,CACd,KAAQ,IAAA6W,GADM,CAEd,OAAU,IAAAC,GAFI;AAGd,MAAS,IAAAC,GAHK,CAId,IAAO,IAAAC,GAJO,CAOlBhR,EAAA,CAAAA,IAAA,CAzHJ,CAVqBiR,CAAAvY,CAAnBwW,EAAmBxW,CAAAA,CAAAA,CA8KrBwY,SAAA,GAAK,CAALA,CAAK,CAACrkB,CAAD,CACL,CACI,MAAOskB,GAAA,CAAAA,CAAA,CAAgB,CAAAzB,GAAhB,CAAkC7iB,CAAlC,CADX,CAgDA,CAAA,CA1oLJ,EAAAukB,UA0oLIxS,EAAAyS,MAAA,CAAAA,QAAK,CAACC,CAAD,CACL,CAII,IAAAC,KAAA,EACID,EAAJ,EAAcJ,EAAA,CAAAA,IAAA,CAAW,CAAX,CALlB,CAuBAtS;CAAAvC,GAAA,CAAAA,QAAU,CAACQ,CAAD,CAAQkC,CAAR,CAAkB/D,CAAlB,CAA2BnG,CAA3B,CACV,CAOI,GANI,IAAAmF,EAMJ,EANgB,IAAAA,EAAAqC,GAAA,CAAoBQ,CAApB,CAA2BkC,CAA3B,CAAqC/D,CAArC,CAA8CnG,CAA9C,CAMhB,EAHI,IAAAiF,EAGJ,EAHgB,IAAAA,EAAAuC,GAAA,CAAoBQ,CAApB,CAA2BkC,CAA3B,CAAqC/D,CAArC,CAA8CnG,CAA9C,CAGhB,EAAgB,IAAAgF,EAAhB,EAA4B,IAAAA,EAAAwC,GAAA,CAAoBQ,CAApB,CAA2BkC,CAA3B,CAAqC/D,CAArC,CAA8CnG,CAA9C,CAA5B,CACI,MAAO,CAAA,CAGX,QAAQkK,CAAR,EACA,KAAK,IAAL,CACA,KAAK,IAAL,CACA,KAAK,IAAL,CACA,KAAK,IAAL,CACA,KAAK,IAAL,CACA,KAAK,IAAL,CACA,KAAK,IAAL,CACA,KAAK,IAAL,CACA,KAAK,IAAL,CACA,KAAK,IAAL,CACA,KAAK,IAAL,CACA,KAAK,IAAL,CACA,KAAK,IAAL,CAGI,MAFA,KAAA/F,EAAA,CAAc+F,CAAd,CAEO,CAFmB/D,CAEnB,CADP,IAAAsU,EAAA,EACO,CAAA,CAAA,CAEX,SAQI,MAAa,KAAb,EAAIzS,CAAJ,EAA+B,MAA/B,EAAsBA,CAAtB,EACI,IAAA7D,EAAA,CAAc+F,CAAd,CAGO,CAHmB/D,CAGnB,CAFP,IAAAkV,EAAA,CAAUnR,CAAV,CAEO,CAFelK,CAAA,CAAQ,CAAR,CAAY,CAE3B,CADP,IAAAya,EAAA,EACO,CAAA,CAAA,CAJX,EAgBa,QAAb,EAAIzS,CAAJ,EAKoCpN,IAAAA,EA2BzB,GA3BH,IAAA0gB,EAAA,CAAcpR,CAAd,CA2BG,GA1BH,IAAAoR,EAAA,CAAcpR,CAAd,CA0BG,CA1BuB,CAAClK,CAAA,CAAQ,CAAR,CAAY,CAAb,CAAgBA,CAAA,CAAQ,CAAR,CAAY,CAA5B,CA0BvB,EAxBP,IAAAmE,EAAA,CAAc+F,CAAd,CAwBO,CAxBmB/D,CAwBnB,CAvBHwW,CAuBG,CAvBMxW,CAAAyW,cAuBN,EAvB+BzW,CAuB/B,CAtBPwW,CAsBO,CAtBEA,CAAAC,cAsBF,EAtB0BD,CAsB1B,CArBPA,CAAAhb,YAqBO,CArBc,QAAQ,CAACkb,CAAD;AAAQ3S,CAAR,CAAkB,CAC3C,MAAO4S,SAAsB,EAAG,CAC5BC,EAAA,CAAAF,CAAA,CAAkB3S,CAAlB,CAD4B,CADW,CAA1B,CAInB,IAJmB,CAIbA,CAJa,CAqBd,CAhBPyS,CAAA3a,UAgBO,CAhBY2a,CAAA1a,WAgBZ,CAhBgC,QAAQ,CAAC4a,CAAD,CAAQ3S,CAAR,CAAkB,CAC7D,MAAO8S,SAAwB,EAAG,CAC9BC,EAAA,CAAAJ,CAAA,CAAoB3S,CAApB,CAD8B,CAD2B,CAA1B,CAIrC,IAJqC,CAI/BA,CAJ+B,CAgBhC,CAXPyS,CAAA7a,aAWO,CAXe,QAAQ,CAAC+a,CAAD,CAAQ3S,CAAR,CAAkB,CAC5C,MAAO4S,SAAsB,CAACI,CAAD,CAAQ,CACjCH,EAAA,CAAAF,CAAA,CAAkB3S,CAAlB,CACAgT,EAAAC,eAAA,EAFiC,CADO,CAA1B,CAKpB,IALoB,CAKdjT,CALc,CAWf,CALPyS,CAAAva,WAKO,CALa,QAAQ,CAACya,CAAD,CAAQ3S,CAAR,CAAkB,CAC1C,MAAO8S,SAAwB,EAAG,CAC9BC,EAAA,CAAAJ,CAAA,CAAoB3S,CAApB,CAD8B,CADQ,CAA1B,CAIlB,IAJkB,CAIZA,CAJY,CAKb,CAAA,CAAA,CAhCX,EAkCO1C,CAAAA,UAAAA,GAAAA,KAAAA,CAAAA,IAAAA,CAAiBQ,CAAjBR,CAAwB0C,CAAxB1C,CAAkCrB,CAAlCqB,CAA2CxH,CAA3CwH,CA5EX,CAXJ,CAoGAuC,EAAAqT,GAAA,CAAAA,QAAO,CAACjY,CAAD,CAAMD,CAAN,CAAWD,CAAX,CAAgBD,CAAhB,CACP,CACI,IAAAG,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CAEXqY,GAAA,CAAAnY,CAAA,CAAe,IAAf,CAAqBoY,EAArB,CACAC,GAAA,CAAArY,CAAA,CAAoB,IAAAsX,MAAApP,KAAA,CAAgB,IAAhB,CAApB,CAEAoQ,GAAA,CAAAA,IAAA,CACAC,GAAA,CAAAA,IAAA,CAVJ,CAqBA1T;CAAA0B,GAAA,CAAAA,QAAO,CAAClN,CAAD,CAAOmf,CAAP,CACP,CACI,GAAI,CAACA,CAAL,CAQI,GAFI,IAAAnD,EAEA,EAFgBoD,EAAA,EAEhB,CAAA,CAACpf,CAAL,CACI,IAAAie,MAAA,CAAW,CAAA,CAAX,CADJ,KAGI,IAAI,CAAC,IAAAoB,QAAA,CAAarf,CAAb,CAAL,CAAyB,MAAO,CAAA,CAGxC,OAAO,CAAA,CAfX,CA0BAwL,EAAA2B,GAAA,CAAAA,QAAS,CAACC,CAAD,CACT,CACI,MAAOA,EAAA,CAAO,IAAAkS,KAAA,EAAP,CAAqB,CAAA,CADhC,CAYA9T,EAAA8T,KAAA,CAAAA,QAAI,EACJ,CACI,IAAIC,EAAQ,IAAIC,CAAJ,CAAU,IAAV,CACZD,EAAAE,IAAA,CAAU,CAAV,CAAa,CACTC,IAhRGvD,GA+QM,CAETwD,IA3PGrD,GAyPM,CAGTsD,IArOGvD,GAkOM,CAAb,CAKA,OAAOkD,EAAAvf,KAAA,EAPX,CAmBAwL,EAAA6T,QAAA,CAAAA,QAAO,CAACrf,CAAD,CACP,CAEI,GADInJ,CACJ,CADQmJ,CAAA,CAAK,CAAL,CACR,CAxRA6f,EAAA,CAyRIC,IAzRJ,CAyRIA,IAzRY3D,GAAhB,CAyRetlB,CAAA4C,CAAE,CAAFA,CAzRf,CA6CA,CA6OIqkB,EAAA,CAAAA,IAAA,CAAWjnB,CAAA,CAAE,CAAF,CAAX,CA7OJ,CAAAkpB,EAAA,CA8OIC,IA9OJ,CA8OenpB,CAAA4C,CAAE,CAAFA,CA9Of,CAgPA,OAAO,CAAA,CAPX,CAgBA+R,EAAAmS,GAAA,CAAAA,QAAa,EACb,CACI,IAAKhS,IAAIA,CAAT,GAAqB,KAAAoR,EAArB,CAAoC,CAChC,IAAIkD,EAAK,IAAAlD,EAAA,CAAcpR,CAAd,CACTsU,EAAA,CAAG,CAAH,CAAA,CAAQA,CAAA,CAAG,CAAH,CAFwB,CAIpCf,EAAA,CAAAA,IAAA,CACA,OAAO,CAAA,CANX,CAgBAgB,SAAA,GAAU,CAAVA,CAAU,CAACvU,CAAD,CAAWlS,CAAX,CACV,CAEI,GADImO,CACJ,CADc,CAAAhC,EAAA,CAAc+F,CAAd,CACd,CAII/D,CAAAuY,MAAAC,gBAAA,CAAiC3mB,CAAA,CAAO,SAAP,CAAmB,SAN5D;AAgBAwlB,QAAA,GAAW,CAAXA,CAAW,CAACoB,CAAD,CACX,CACI,IAAK1U,IAAIA,CAAT,GAAqB,EAAAmR,EAArB,CACIoD,EAAA,CAAAA,CAAA,CAAgBvU,CAAhB,CAAsC,IAAZ,EAAA0U,CAAA,CAAkBA,CAAlB,CAA6B,CAAAvD,EAAA,CAAUnR,CAAV,CAAvD,CAFR,CAaA2U,QAAA,GAAa,CAAbA,CAAa,CAAC3U,CAAD,CAAWlS,CAAX,CACb,CAEI,GADImO,CACJ,CADc,CAAAhC,EAAA,CAAc+F,CAAd,CACd,CACI/D,CAAAuY,MAAAI,UACA,CAD2B9mB,CAAA,CAAO,KAAP,CAAe,MAC1C,CAAAmO,CAAAuY,MAAAC,gBAAA,CAAiC3mB,CAAA,CAAO,SAAP,CAAmB,SAJ5D,CAaAylB,QAAA,GAAe,CAAfA,CAAe,CACf,CACI,IAAKvT,IAAIA,CAAT,GAAqB,EAAAoR,EAArB,CACIuD,EAAA,CAAAA,CAAA,CAAmB3U,CAAnB,CAA6B,CAAAoR,EAAA,CAAcpR,CAAd,CAAA,CAAwB,CAAxB,CAA7B,CAFR,CAiBA6U,QAAA,GAAY,CAAZA,CAAY,CAACC,CAAD,CAASC,CAAT,CAAiB9mB,CAAjB,CACZ,CACI,GAAI,CAAAgM,EAAA,CAAc6a,CAAd,CAAJ,CAA2B,CAEvB,IAAIE,EAAQ,CAAAla,EAARka,EAAoB,CAAAla,EAAAka,EAApBA,EAAsC,CAC1CD,EAAA,CAASA,CAAT,EAAmB,CAEfE,EAAA,CAAgB,CAAT,EAAAD,CAAA,CAAYE,CAAA,CAAUH,CAAV,CAAkB9mB,CAAlB,CAAZ,CAAqCe,CAAA,CAAU+lB,CAAV,CAAkB9mB,CAAlB,CAU5C,EAAAgM,EAAA,CAAc6a,CAAd,CAAAtS,YAAJ,EAAyCyS,CAAzC,GAA+C,CAAAhb,EAAA,CAAc6a,CAAd,CAAAtS,YAA/C,CAAmFyS,CAAnF,CAfuB,CAD/B,CA6BApV,CAAAiS,GAAA,CAAAA,QAAU,CAAC3P,CAAD,CAAanC,CAAb,CAAuBoC,CAAvB,CACV,CACI,GAAIyQ,EAAA,CAAAA,IAAA,CAAiB7S,CAAjB,CAAJ,CAAgC,CAC5B,GAAIoC,CAAJ,CAAY,CACR,IAAIuQ,EAAQ,IACZ1b,WAAA,CAAW,QAAQ,EAAG,CAClB8b,EAAA,CAAAJ,CAAA,CAAoB3S,CAApB,CACImC,EAAJ,EAAgBA,CAAA,EAFE,CAAtB,CAGG,CAACC,CAHJ,CAIA,OAAO,CAAA,CANC,CAQR2Q,EAAA,CAAAA,IAAA,CAAmB/S,CAAnB,CATwB,CAYhC,MAAO,CAAA,CAbX,CAwBAH;CAAAoS,GAAA,CAAAA,QAAS,CAACjS,CAAD,CAAWlK,CAAX,CACT,CACI,GAAgB,IAAhB,EAAIkK,CAAJ,CACI,MAAOoU,GAAA,CAAAA,IAAA,CAAmBe,EAAA,CAAarf,CAAb,CAAqB,CAArB,CAAnB,CAEX,KAAIwe,EAAK,IAAAlD,EAAA,CAAcpR,CAAd,CACT,OAAIsU,EAAJ,EACIA,CAAA,CAAG,CAAH,CAEO,CAFC,CAACxe,CAAD,CAAS,CAAT,CAAa,CAEd,CADP6e,EAAA,CAAAA,IAAA,CAAmB3U,CAAnB,CAA6BsU,CAAA,CAAG,CAAH,CAA7B,CACO,CAAA,CAAA,CAHX,EAKO,CAAA,CAVX,CAoBAzU,EAAAkS,GAAA,CAAAA,QAAY,CAAC/R,CAAD,CACZ,CACI,MAAI6S,GAAA,CAAAA,IAAA,CAAiB7S,CAAjB,CAAJ,EACI+S,EAAA,CAAAA,IAAA,CAAmB/S,CAAnB,CACO,CAAA,CAAA,CAFX,EAIO,CAAA,CALX,CAeA6S,SAAA,GAAW,CAAXA,CAAW,CAAC7S,CAAD,CACX,CACI,IAAIsU,EAAK,CAAAlD,EAAA,CAAcpR,CAAd,CACT,OAAIsU,EAAJ,EAIIK,EAAA,CAAAA,CAAA,CAAmB3U,CAAnB,CAA8BsU,CAAA,CAAG,CAAH,CAA9B,CAAsC,CAAtC,CAA0CA,CAAA,CAAG,CAAH,CAA1C,CAoBO,CAfPA,CAAA,CAAG,CAAH,CAeO,CAfC,CAAA,CAeD,CAVHA,CAAA,CAAG,CAAH,CAUG,EAVIA,CAAA,CAAG,CAAH,CAAA3U,KAAA,CAAW,CAAX,CAAiB2U,CAAA,CAAG,CAAH,CAAjB,CAAwBA,CAAA,CAAG,CAAH,CAAxB,CAUJ,CAJHtU,CAIG,EAJSoV,EAIT,GAHH,CAAAtE,EACA,CADiB9Q,CACjB,EAD6BqV,EAC7B,CAAA,CAAAtE,EAAA,CAAiB/Q,CAAjB,EAA6BsV,EAE1B,EAAA,CAAA,CAxBX,EA0BO,CAAA,CA5BX,CAsCAvC,QAAA,GAAa,CAAbA,CAAa,CAAC/S,CAAD,CACb,CAUI,IAAIsU,EAAK,CAAAlD,EAAA,CAAcpR,CAAd,CACLsU,EAAJ,GACQA,CAAA,CAAG,CAAH,CAcJ,EAdaA,CAAA,CAAG,CAAH,CAcb,GAVIK,EAAA,CAAAA,CAAA,CAAmB3U,CAAnB,CAA8BsU,CAAA,CAAG,CAAH,CAA9B,CAAsCA,CAAA,CAAG,CAAH,CAAtC,CAKA,CAAIA,CAAA,CAAG,CAAH,CAAJ,EAAWA,CAAA,CAAG,CAAH,CAAA3U,KAAA,CAAW,CAAX,CAAiB2U,CAAA,CAAG,CAAH,CAAjB,CAAwBA,CAAA,CAAG,CAAH,CAAxB,CAKf,EAAAA,CAAA,CAAG,CAAH,CAAA,CAAQ,CAAA,CAfZ,CAXJ;AAuCAzU,CAAAwR,GAAA,CAAAA,QAAY,CAACvjB,CAAD,CACZ,CACSA,CAAL,EAAe,IAAAiN,EAi4IRX,MAAAmb,EAj4IP,GAEIC,EAAA,CAAA,IAAAza,EAAA,CAAe,IAAAyV,GAAf,CAcA,CAPAzV,CAOA,CAPAA,IAAAA,EAOA,CA4oLJ,CAAAC,EAAAsX,MAAA,EA5oLI,CA6oLJmD,EAAA,CAAAA,CAAA,CA7oLI,CAAIC,IA1fDtE,EAAA,CA0fgBuE,EA1fhB,CA0fH,EAAID,IA1fsBtE,EAAA,CA0fPuE,EA1fO,CAAA,CAAoB,CAApB,CA0f1B,EACIC,EAAA,CAAA,IAAA7a,EAAA,CAjBR,CADJ,CAwCA8E,EAAAyR,GAAA,CAAAA,QAAW,EACX,EAgBAzR,EAAA0R,GAAA,CAAAA,QAAa,CAACzjB,CAAD,CACb,CAMSA,CAAL,EACI+nB,CAAA,CAAA,IAAA9a,EAAA,CAPR,CAkBA8E,EAAA2R,GAAA,CAAAA,QAAe,CAAC1jB,CAAD,CACf,CACI,GAAI,CAACA,CAAL,EAAc,CAAC,IAAAiN,EAozIRX,MAAAmb,EApzIP,CAKI,GAAKG,IA5jBFtE,EAAA,CA4jBiBuE,EA5jBjB,CA4jBH,EAAKD,IA5jBqBtE,EAAA,CA4jBNuE,EA5jBM,CAAA,CAAoB,CAApB,CA4jB1B,CAoDIC,EAAA,CAAA,IAAA7a,EAAA,CApDJ,KAA+C,CAO3C,IADID,CACJ,CADU,IAAAA,EACV,GAAW,CAACqG,EAAA,CAAArG,CAAA,CAAW,CAAA,CAAX,CAAZ,CACIuG,EAAA,CAAAvG,CAAA,CAAY,CAAA,CAAZ,CAEA,CADAgb,EAAA,CAAAhb,CAAA,CAAY,CAAZ,CAAe,IAAf,CACA,CAAAuG,EAAA,CAAAvG,CAAA,CAAY,CAAA,CAAZ,CAHJ,KASI,IAAI,CACA,IAAIib,EAAc,IAAAhb,EAAA+a,GAAA,CAAiB,CAAjB,CACA,EAAlB,CAAIC,CAAJ,GACIC,EAAA,CAAA,IAAAjb,EAAA,CAAsBgb,CAAtB,CAEA,CADAE,EAAA,CAAA,IAAAlb,EAAA,CAAmBgb,CAAnB,CAAgC,CAAA,CAAhC,CACA,CAAAG,EAAA,CAAA,IAAAnb,EAAA,CAAwBgb,CAAxB,CAHJ,CAFA,CAQJ,MAAMI,CAAN,CAAiB,CAKW,QAAxB,EAAI,MAAOA,EAAX,GACQ7qB,CACJ,CADQ6qB,CACR,CAAArV,EAAA,CAAA,IAAA/F,EAAA,CAAkBzP,CAAA8qB,MAAlB,EAA6B9qB,CAAAsJ,QAA7B,CAFJ,CALa,CAerB,IAAA4d,KAAA,EAUI,KAAAvX,EAAJ,EAAcob,EAAA,CAAA,IAAApb,EAAA,CAjD6B,CANvD,CAsEA4E;CAAA4R,GAAA,CAAAA,QAAc,CAAC3jB,CAAD,CACd,CACI,GAAIA,CAAJ,EAAa,CAAC,IAAAiN,EA6uIPX,MAAAmb,EA7uIP,CAQI,GAPI,IAAAzE,EAOA,EAPewF,EAAA,CAAAA,IAAA,CAOf,CAFA9pB,CAEA,CAFI2lB,EAAA,CAAAA,IAAA,CAAW,IAAAzB,GAAX,CAEJ,CAAA,IAAAO,EAAA,EAAiBC,EAArB,CAIIqF,EAAA,CAAA,IAAAvb,EAAA,CAAuB,IAAAwV,GAAvB,CAAqChkB,CAArC,CAJJ,KAAA,CASIuO,IAAAA,EAAAA,IAAAA,EAAAA,CAAqByV,EAAAA,IAAAA,GAi+O7B,EAAAgG,GAAA,EACA,EAAAxb,EAAAyb,GAAA,CAAiBC,EAAA,CAAAA,CAAA,CAA0BC,CAA1B,CAn9QEC,CAm9QF,CAAjB,CAl+O2CpqB,CAk+O3C,CACA,EAAAgqB,GAAA,EA5+OI,CATR,CA8BA3W,EAAA6R,GAAA,CAAAA,QAAc,CAAC5jB,CAAD,CACd,CACSA,CAAL,EAAe,IAAAiN,EA8sIRX,MAAAmb,EA9sIP,GAEQ,IAAAxE,EAgBJ,EAhBmBuF,EAAA,CAAAA,IAAA,CAgBnB,CAXI9pB,CAWJ,CAfI,IAAAykB,EAAJ,EAAqBC,EAArB,CAIQ2F,EAAA,CAAA,IAAA7b,EAAA,CAAuB,IAAAwV,GAAvB,CAJR,CASQsG,EAAA,CAAA,IAAA/b,EAAA,CAAqB,IAAAyV,GAArB,CAMR,CAAA2B,EAAA,CAAAA,IAAA,CAAW3lB,CAAX,CAlBJ,CADJ,CA8BAqT,EAAA8R,GAAA,CAAAA,QAAe,CAAC7jB,CAAD,CACf,CACSA,CAAL,EAAe,IAAAiN,EA+qIRX,MAAAmb,EA/qIP,EACIrB,EAAA,CAAAA,IAAA,CAAgB,IAAAxD,GAAhB,CAFR,CAaA7Q,EAAA+R,GAAA,CAAAA,QAAc,CAAC9jB,CAAD,CACd,CACQA,CAAJ,EACI,IAAAkjB,EACA,CADgB,CAAA,CAChB,CAAAsC,EAAA,CAAAA,IAAA,CAAiB,CAAA,CAAjB,CAFJ,GAII,IAAAtC,EAKA,CALgB,CAAA,CAKhB,CAJAsC,EAAA,CAAAA,IAAA,CAIA,CAAAc,EAAA,CAAAA,IAAA,CAAmB,CAAnB,CATJ,CADJ,CAqBAvU,EAAAgS,GAAA,CAAAA,QAAe,CAAC/jB,CAAD,CAAQipB,CAAR,CACf,CAEQ,IAAArG,GAAA,CADA5iB,CAAJ,CACI,IAAA4iB,GADJ,CACwB,CADxB,EAC6BqG,CAD7B,CAGI,IAAArG,GAHJ,CAGwB,EAAE,CAAF,EAAOqG,CAAP,CAJ5B,CAuBAT;QAAA,GAAW,CAAXA,CAAW,CACX,CACI,IAAIU,EA55DIC,IA45DI,EAAA,CAAAlc,EAAAmc,GAAA,CAAoC,CAApC,CAAwC,EAApD,CACIC,EA/+CQC,KA++CRD,EAAY,CAAA3G,GAAZ2G,EAA8D,CAAA3G,GAA9D2G,CA/+CQC,KA++CRD,CAAmGH,CACnGK,EAAAA,CAAMF,CAAA,CAAU,CAAV,CAAc,CACpBG,EAAAA,CAAOH,CAAA,CAAU,EAAV,CAAgB,CAAAnc,EAAAuc,EACtB7B,EA5vBEtE,EAAA,CA4vBagE,EA5vBb,CA4vBP,EAAKM,CA5vByBtE,EAAA,CA4vBVgE,EA5vBU,CAAA,CAAoB,CAApB,CA4vB9B,GAA6CiC,CAA7C,CAAmD,CAACA,CAApD,CACOnD,GAAA,CAAAA,CAAA,CAAiB,CAAA1D,GAAjB,CAAgC,CAAC8G,CAAjC,CAA2C,CAAA9G,GAA3C,CAA0D6G,CAA1D,CAAiEC,CAAjE,CANX,CAgBApD,QAAA,GAAU,CAAVA,CAAU,CAACpmB,CAAD,CACV,CACI,CAAA0iB,GAAA,CAAe1iB,CAAf,CAAuB,CAAAkN,EAAAuc,EACvB,IAAI,CAAA3G,EAAJ,GAAqB,CAAAJ,GAArB,CAAmC,CAC/B,CAAAI,EAAA,CAAe,CAAAJ,GACUI,EAAAA,CAAAA,CAAAA,EA+C7B,KAAK,IAAIllB,EAAI,CAAb,CA/C2C8rB,EA+C3C,CAAgB9rB,CAAhB,CAA2BA,CAAA,EAA3B,CAEI+rB,EAAA,CAjDAC,CAiDA,CAjDoBxpB,GAiDpB,CADyBxC,CACzB,CAAyBoC,CAAzB,CAAkC,CAAlC,EAAuCpC,CAAvC,CAnD+B,CAFvC,CAgBA0mB,QAAA,GAAU,CAAVA,CAAU,CAACtkB,CAAD,CACV,CACI,CAAA2iB,EAAA,CAAe3iB,CAAf,CAAuB,KACvB,IAAI,CAAA+iB,EAAJ,GAAqB,CAAAJ,EAArB,CAAmC,CAC/B,CAAAI,EAAA,CAAe,CAAAJ,EACUI,EAAAA,CAAAA,CAAAA,EA8B7B,KAAK,IAAInlB,EAAI,CAAb,CA9B2C8rB,EA8B3C,CAAgB9rB,CAAhB,CAA2BA,CAAA,EAA3B,CAEI+rB,EAAA,CAhCAC,CAgCA,CAhCoBxpB,GAgCpB,CADyBxC,CACzB,CAAyBoC,CAAzB,CAAkC,CAAlC,EAAuCpC,CAAvC,CAlC+B,CAInC,MAAO,EAAA+kB,EANX,CAiBAgH,QAAA,GAAS,CAATA,CAAS,CAACzX,CAAD,CAAWlS,CAAX,CACT,CACI,CAAAqjB,EAAA,CAAUnR,CAAV,CAAA,CAAsBlS,CACjB,EAAAkjB,EAAL,EAAoBuD,EAAA,CAAAA,CAAA,CAAgBvU,CAAhB,CAA0BlS,CAA1B,CAFxB,CA6BAsmB,QAAA,GAAa,CAAbA,CAAa,CAACtmB,CAAD,CACb,CACI,CAAA4iB,GAAA,CAAmB5iB,CAAnB,CAA2B,CAC3B,KAASpC,CAAT,CAAa,CAAb,CAAoB,EAApB,CAAgBA,CAAhB,CAAwBA,CAAA,EAAxB,CACI,CAAA0lB,EAAA,CAAc,GAAd,CAAkB1lB,CAAlB,CAAA,CAAqB,CAArB,CAAA,CAA2B,CAAAglB,GAAD,CAAqB,CAArB,EAA0BhlB,CAA1B,CAA+B,CAA/B,CAAmC,CAKjE6nB,GAAA,CAAAA,CAAA,CACA,OAAO,CAAA,CATX;AAqBA1T,CAAA2S,KAAA,CAAAA,QAAI,EACJ,CACI0B,EAAA,CAAAA,IAAA,CAAgB,IAAAnZ,EAAA4c,EAAA,CAAiB,CAAjB,CAAhB,CADJ,CAcA9X,EAAA+X,GAAA,CAAAA,QAAO,CAAC9pB,CAAD,CACP,CACI,IAAA0iB,GAAA,CAAe1iB,CADnB,CAcA+R,EAAAgY,QAAA,CAAAA,QAAO,CAAC/pB,CAAD,CAAQgqB,CAAR,CACP,CACSA,CAAL,CAGI,IAAAnH,GAHJ,CAGsB7iB,CAHtB,CACI,IAAA2iB,EADJ,CACmB3iB,CAFvB,CAkFA+R,EAAAkY,GAAA,CAAAA,QAAQ,CAACpB,CAAD,CAAOqB,CAAP,CACR,CACI,OAAQA,CAAA,CAAW,IAAArH,GAAX,CAA6B,IAAAD,GAArC,EAAyD,KAD7D,CAaA7Q,EAAAoY,GAAA,CAAAA,QAAS,CAACnqB,CAAD,CACT,CACI,IAAA6iB,GAAA,CAAkB7iB,CADtB,CAqBAoqB,SAAO,GAAI,EACX,CAEI,IADA,IAAIC,EAAWzb,CAAA,CAA6B0b,QAA7B,CAAuC5b,CAAvC,CAAuD,OAAvD,CAAf,CACS6b,EAAO,CAAhB,CAAmBA,CAAnB,CAA4BF,CAAAvoB,OAA5B,CAA6CyoB,CAAA,EAA7C,CAAuD,CACnD,IAAIC,EAASH,CAAA,CAASE,CAAT,CAAb,CACIjI,EAAa/S,EAAA,CAA4Bib,CAA5B,CADjB,CAEI3F,EAAQ4F,EAAA,CAA2BnI,CAAA,GAA3B,CACPuC,EAAL,GAAYA,CAAZ,CAAoB,IAAIxC,EAAJ,CAAeC,CAAf,CAA2B,CAAA,CAA3B,CAApB,CACAoI,GAAA,CAAgC7F,CAAhC,CAAuC2F,CAAvC,CALmD,CAF3D,CAoBAG,IAAAA,GAAYA,CAAZA,CAaAC,GAAQA,KAbRD,CAcAE,GAAQA,QAdRF,CAeAG,GAAQA,MAfRH,CAgBAI,GAAQA,MAhBRJ,CAyBJ,GAA4B,EAzBxBA,CAyBJrF,IAA4B,EAAA,CA3zDRgE,KA2zDQ,CAAA,CACgB,CAAC,IAAD,CAAO,IAAP,CAAajH,EAAAhgB,UAAA4nB,GAAb,CAA4C5H,EAAAhgB,UAAA8nB,GAA5C,CAA4E,MAA5E,CADhB,CAAA,EAA5B7E,CAOA0F,GAAA,CAAWrF,EAAX,CA4DI/Z;QApBEqf,GAoBS,CAACC,CAAD,CAAWje,CAAX,CAAgBD,CAAhB,CACX,CACI,CAAA,KAAA,CAAA,IAAA,CAAM,KAAN,CAAake,CAAb,CAx6CQjK,EAw6CR,CAEA,KAAAhU,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CAMX,KAAAme,EAAA,CAAiB,CAACD,CAAA,SAAlB,EAA0C,EAY1C,KAAAE,EAAA,CAAiB,CAAjB,EAAsB,IAAAD,EACtB,KAAA1B,EAAA,CAAiB,IAAA2B,EAAjB,CAAkC,CAClC,KAAAC,EAAA,CAAkBC,EAClB,KAAAC,EAAA,CAAmB1rB,IAAA2rB,KAAA,CAAU,IAAAH,EAAV,CACnB,KAAAI,EAAA,CAAiB,IAAAJ,EAAjB,EAAoC,CACpC,KAAAK,EAAA,CAAmB,IAAAL,EAAnB,CAAqC,CACrC,KAAAM,EAAA,CAAoB,IAAAP,EAApB,CAAqC,IAAAC,EAArC,CAAwD,CACxD,KAAAO,EAAA,CAAkB,IAAAD,EAAlB,CAAqC,CA+BrC,KAAAE,GAAA,CAAmB,EAEnB,KAAAC,GAAA,CAAsB,CACtB,KAAAC,EAAA,CAAc,CAAA,CAKd,KAAAC,EAAA,CAAgB,EAMhB,KAAAC,GAAA,CAAiB,CACbC,EADa,CAEbC,EAFa,CAGbC,EAHa,CAIbC,EAJa,CAUjB,KAAAC,EAAA,CAAkB,IAAAC,EAAlB,CAAoC,EAEpC,KAAAC,EAAA,CAAkB,IAAAC,EAAlB,CAAsC,IAAAC,EAAtC,CADA,IAAAC,EACA,CADuB,IAAAC,EACvB,CAD8C,CA4B1CC,EAAAA,CAAQ,IAAIC,CAAJ,CArBZC,IAqBY,CACZC,GAAA,CAAAH,CAAA,CAtBAE,IAsBsB/f,EAAtB,CAtBA+f,KAwBAT,EAAA,CAAsB3lB,KAAJ,CAxBlBomB,IAwB4BpB,EAAV,CAxBlBoB,KAyBAR,EAAA,CAAsB5lB,KAAJ,CAzBlBomB,IAyB4BpB,EAAV,CAClB,KAASsB,CAAT,CAAkB,CAAlB,CAAqBA,CAArB,CA1BAF,IA0B8BpB,EAA9B,CAAgDsB,CAAA,EAAhD,CA1BAF,IA2BIT,EAAA,CAAgBW,CAAhB,CAAA,CA3BJF,IA2B8BR,EAAA,CAAgBU,CAAhB,CAA1B,CAAoDJ,CA3BxDE,KAiCAP,EAAA,CAjCAO,IAiCkB3B,EAAlB,CAAmCE,EACnC4B,GAAA,CAlCAH,IAkCA,CAlCAA,IAkCeP,EAAf,CAAgClB,EAAhC,CAAwD6B,EAAxD,CAlCAJ,IAkCA,CAlCAA,KAqCAH,EAAA;AArCAG,IAoCAJ,EACA,EArCAI,IAoCwBP,EACxB,CArCAO,IAoC0CtD,EAC1C,IArCAsD,IAoC6DxB,EApC7DwB,KAuCAN,EAAA,CAAoB,CAvCpBM,KAwCAL,EAAA,CAxCAK,IAwCgBtD,EAtChBtW,EAAA,CAAAA,IAAA,CA9FJ,CArBmBiR,CAAAvY,CAAjBof,EAAiBpf,CAAAA,CAAAA,CAuKnBuhB,SAAA,GAAc,CAAdA,CAAc,CAACC,CAAD,CACd,CACI,GAAIA,CAAJ,EAAc,CAAAZ,EAAd,CAAiC,CAC7B,IAAK,IAAIQ,EAAS,CAAlB,CAAqBA,CAArB,CAA8B,CAAAtB,EAA9B,CAAgDsB,CAAA,EAAhD,CACI,CAAAV,EAAA,CAAgBU,CAAhB,CAAA,CAA0B,CAAAX,EAAA,CAAgBW,CAAhB,CAE9B,EAAAR,EAAA,CAAoB,CACpB,EAAAC,EAAA,CAAgB,CAAAjD,EACZ4D,EAAJ,GACI,CAAAZ,EAKA,CALoBY,CAKpB,CAJIxE,CAIJ,CAJY,CAIZ,EAJiBwE,CAIjB,CAHA,CAAAX,EAGA,CAHiB7D,CAGjB,CAHwB,CAGxB,CAFAA,CAEA,EAFQyC,EAER,CADA,CAAAsB,EACA,EADwB/D,CACxB,CAD+B,CAAA6D,EAC/B,IADkD,CAAAnB,EAClD,CAAA,CAAAgB,EAAA,CAAgB,CAAAK,EAAhB,CAAA,CAAwC,CAAAN,EAAA,CAAgB,CAAAK,EAAhB,CAN5C,CAN6B,CADrC,CAkEA,CAAA,CAv7NJ,EAAAW,UAu7NIvb,EAAAyS,MAAA,CAAAA,QAAK,EACL,CACI,IAAK,IAAI5mB,EAAI,CAAb,CAAgBA,CAAhB,CAAoB,IAAAouB,EAAAlqB,OAApB,CAA0ClE,CAAA,EAA1C,CACI,IAAAouB,EAAA,CAAcpuB,CAAd,CAAA,EAEJwvB,GAAA,CAAAA,IAAA,CAAoB,EAApB,CAJJ,CAeArb,EAAA0B,GAAA,CAAAA,QAAO,CAAClN,CAAD,CAAOmf,CAAP,CACP,CACI,GAAI,CAACA,CAAL,CACI,GAAI,CAACnf,CAAL,CACI,IAAAie,MAAA,EADJ,KAGI,IAAI,CAAC,IAAAoB,QAAA,CAAarf,CAAb,CAAL,CAAyB,MAAO,CAAA,CAGxC,OAAO,CAAA,CARX,CAmBAwL,EAAA2B,GAAA,CAAAA,QAAS,CAACC,CAAD,CACT,CACI,MAAOA,EAAA,CAAO,IAAAkS,KAAA,EAAP,CAAqB,CAAA,CADhC,CAUA9T,EAAA8T,KAAA,CAAAA,QAAI,EACJ,CACI,IAAIC,EAAQ,IAAIC,CAAJ,CAAU,IAAV,CACZD,EAAAE,IAAA,CAAU,CAAV,CAAauH,EAAA,CAAAA,IAAA,CAAb,CACA,OAAOzH,EAAAvf,KAAA,EAHX,CAaAwL;CAAA6T,QAAA,CAAAA,QAAO,CAACrf,CAAD,CACP,CA6hBA,CAAA,CAAA,CA5hB8B,CAAA,CAAAA,CAAA,CAAK,CAAL,CA6hB1B,KAAI3I,CACJ,KAAKA,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBR,CAAA0E,OAAhB,CAA2B,CAA3B,CAA8BlE,CAA9B,EAAmC,CAAnC,CAAsC,CAClC,IAAIqvB,EAAS7vB,CAAA,CAAEQ,CAAF,CAAb,CACI4vB,EAAMpwB,CAAA,CAAEQ,CAAF,CAAI,CAAJ,CACV,IAAI4vB,CAAJ,EAAWA,CAAA1rB,OAAX,CAjiBG2rB,IAiiBqBhC,EAAxB,CAAA,CAg7uBJ,IAHA,IAAIiC,EAAO,CAAX,CACIC,EAAWhnB,KAAJ,CA/8vBJ8mB,IAkiB6BhC,EA66uBzB,CADX,CAEImC,EAAQ,CACZ,CAAOA,CAAP,CAAeC,CAAA/rB,OAAf,CAA8B,CAA9B,CAAA,CAGI,IAFA,IAAIxE,EAAIuwB,CAAA,CAAMD,CAAA,EAAN,CAAR,CACI3vB,EAAI4vB,CAAA,CAAMD,CAAA,EAAN,CACR,CAAOtwB,CAAA,EAAP,CAAA,CACIqwB,CAAA,CAAKD,CAAA,EAAL,CAAA,CAAezvB,CAIvB,EAAA,CAAO0vB,CAx7uBH,CAGId,CAAAA,CApiBDY,IAoiBSnB,EAAA,CAAgBW,CAAhB,CACZ,IAAI,CAACJ,CAAL,EAAc,CAACA,CAAAjH,QAAA,CAAc4H,CAAd,CAAf,CAAmC,CA36IvC3mB,CAAA,CAi7IwB,iCAj7IxB,CAi7I4DomB,CAj7I5D,CAk7IQ,EAAA,CAAO,CAAA,CAAP,OAAA,CAP+B,CAPD,CAiBtC,CAAA,CAAO,CAAA,CAnBX,CA5hBI,MAAO,EADX,CAkCAC;QAAA,GAAS,CAATA,CAAS,CAACrE,CAAD,CAAOiF,CAAP,CAAa5pB,CAAb,CAAmB6pB,CAAnB,CACT,CAKI,IAJA,IAAIC,EAAWnF,CAAf,CACIoF,EAAWH,CADf,CAEIb,EAASe,CAATf,GAAsB,CAAA1B,EAE1B,CAAkB,CAAlB,CAAO0C,CAAP,EAAuBhB,CAAvB,CAAgC,CAAAX,EAAAxqB,OAAhC,CAAA,CAAwD,CAEpD,IAAI+qB,EAAQ,CAAAP,EAAA,CAAgBW,CAAhB,CAAZ,CACIiB,EAAYjB,CAAZiB,CAAqB,CAAA7C,EADzB,CAEI8C,EAAY,CAAA9C,EAAZ8C,EAA+BH,CAA/BG,CAA0CD,CAA1CC,CACAA,EAAJ,CAAgBF,CAAhB,GAA0BE,CAA1B,CAAsCF,CAAtC,CAOA,IAAI,CAACF,CAAL,EAAmBlB,CAAnB,EAA4BA,CAAAiB,KAA5B,CAAwC,CACpC,GAAIjB,CAAA3oB,KAAJ,EAAkBA,CAAlB,CAAgE,CAO5D,GAAI8pB,CAAJ,CAAeC,CAAf,EAA2BpB,CAAAhE,EAA3B,CAGI,MAFAgE,EAAAuB,GAEO,EAFQvB,CAAAhE,EAER,CAFqBmF,CAErB,CADPnB,CAAAhE,EACO,CADMmF,CACN,CAAA,CAAA,CAEX,IAAIA,CAAJ,EAAgBnB,CAAAhE,EAAhB,CAA6BgE,CAAAuB,GAA7B,CAAyC,CACjCC,CAAAA,CAAYxB,CAAAiB,KAAZO,EAA0BL,CAA1BK,CAAqCH,CAArCG,CACAA,EAAJ,CAAgBJ,CAAhB,GAA0BI,CAA1B,CAAsCJ,CAAtC,CACApB,EAAAuB,GAAA,CAAaJ,CAAb,CAAwBnB,CAAAhE,EAAxB,CAAqCwF,CACrCL,EAAA,CAAWE,CAAX,CAAuB,CAAA7C,EACvB4C,EAAA,EAAYI,CACZpB,EAAA,EACA,SAPqC,CAZmB,CAsBhE,MAAOqB,GAAA,CAAiBC,EAAjB,CAA6CP,CAA7C,CAAuDC,CAAvD,CAvB6B,CA0BpCO,CAAAA,CAAW,IAAI1B,CAAJ,CAAgB,CAAhB,CAAsBkB,CAAtB,CAAgCG,CAAhC,CAA2C,CAAA9C,EAA3C,CAA4DnnB,CAA5D,CAAkE6pB,CAAlE,CACff,GAAA,CAAAwB,CAAA,CAAyB,CAAAxhB,EAAzB,CAAmC6f,CAAnC,CACA,EAAAP,EAAA,CAAgBW,CAAA,EAAhB,CAAA,CAA4BuB,CAE5BR,EAAA,CAAWE,CAAX,CAAuB,CAAA7C,EACvB4C,EAAA,EAAYE,CA3CwC,CA8CxD,MAAgB,EAAhB,EAAIF,CAAJ,EACI,CAAAppB,OAAA,CAAY,QAAZ,EAAwBipB,CAAxB,EAAgC,EAAhC,EAAsC,KAAtC,CAA8CW,EAAA,CAAuBvqB,CAAvB,CAA9C,CAA6E,MAA7E,CAAsFkjB,CAAA,CAAUyB,CAAV,CAAtF,CACO,CAAA,CAAA,CAFX,EAKOyF,EAAA,CAAiBI,EAAjB,CAA+C7F,CAA/C,CAAqDiF,CAArD,CAxDX,CAkQA/b,CAAA4c,GAAA,CAAAC,QAAO,CAAC/F,CAAD,CACP,CACI,MAAO,KAAA0D,EAAA,EAAiB1D,CAAjB,CAAwB,IAAA6D,EAAxB,IAA2C,IAAAnB,EAA3C,CAAAsD,GAAA,CAAsEhG,CAAtE,CAA6E,IAAA6C,EAA7E,CAA+F7C,CAA/F,CADX,CAWA9W;CAAA+c,GAAA,CAAAC,QAAO,CAAClG,CAAD,CACP,CACI,IAAImG,EAAMnG,CAANmG,CAAa,IAAAtD,EAAjB,CACIuB,GAAUpE,CAAVoE,CAAiB,IAAAP,EAAjBO,IAAoC,IAAA1B,EACxC,OAAK7K,GAAL,EAAsBsO,CAAtB,EAA6B,IAAAtD,EAA7B,CAGO,IAAAa,EAAA,CAAgBU,CAAhB,CAAAgC,GAAA,CAAiCD,CAAjC,CAAsCnG,CAAtC,CAHP,CACW,IAAA0D,EAAA,CAAgBU,CAAA,EAAhB,CAAA4B,GAAA,CAAmCG,CAAnC,CAAwCnG,CAAxC,CADX,CAC4D,IAAA0D,EAAA,CAAgBU,CAAhB,CAAyB,IAAArB,EAAzB,CAAAiD,GAAA,CAAmD,CAAnD,CAAsDhG,CAAtD,CAA6D,CAA7D,CAD5D,EAC+H,CAJnI,CAgBA9W,EAAAmd,GAAA,CAAAC,QAAO,CAACtG,CAAD,CAAOxrB,CAAP,CACP,CAEI,IAAAkvB,EAAA,EAAiB1D,CAAjB,CAAwB,IAAA6D,EAAxB,IAA2C,IAAAnB,EAA3C,CAAA6D,GAAA,CAAuEvG,CAAvE,CAA8E,IAAA6C,EAA9E,CAAgGruB,CAAhG,CAAmGwrB,CAAnG,CAFJ,CAYA9W,EAAAsd,GAAA,CAAA1G,QAAO,CAACE,CAAD,CAAOnqB,CAAP,CACP,CACI,IAAIswB,EAAMnG,CAANmG,CAAa,IAAAtD,EAAjB,CACIuB,GAAUpE,CAAVoE,CAAiB,IAAAP,EAAjBO,IAAoC,IAAA1B,EACnC7K,GAAL,EAAsBsO,CAAtB,EAA6B,IAAAtD,EAA7B,CAKA,IAAAa,EAAA,CAAgBU,CAAhB,CAAAqC,GAAA,CAAkCN,CAAlC,CAAuCtwB,CAAvC,CAA0CmqB,CAA1C,CALA,EACI,IAAA0D,EAAA,CAAgBU,CAAA,EAAhB,CAAAmC,GAAA,CAAoCJ,CAApC,CAAyCtwB,CAAzC,CAA6C,GAA7C,CAAmDmqB,CAAnD,CACA,CAAA,IAAA0D,EAAA,CAAgBU,CAAhB,CAAyB,IAAArB,EAAzB,CAAAwD,GAAA,CAAoD,CAApD,CAAwD1wB,CAAxD,EAA6D,CAA7D,CAAkE,GAAlE,CAAwEmqB,CAAxE,CAA+E,CAA/E,CAFJ,CAHJ,CAkBA0G,SAAA,GAAc,CAAdA,CAAc,CAAC1G,CAAD,CACd,CACI,MAAO,EAAAyD,EAAA,EAAiBzD,CAAjB,CAAwB,CAAAY,EAAxB,IAA2C,CAAA8B,EAA3C,CADX;AA+BAxC,QAAA,GAAa,CAAbA,CAAa,CAACF,CAAD,CACb,CACI,IAAInqB,CACJ,EAAAqtB,EAAA,CAAc,CAAA,CACd,EAAAD,GAAA,EACA,KAAIkD,EAAMnG,CAANmG,CAAa,CAAAtD,EAAjB,CACImB,EAAQ0C,EAAA,CAAAA,CAAA,CAAoB1G,CAApB,CACPnI,GAAL,EAAsBsO,CAAtB,EAA6B,CAAAtD,EAA7B,CAGIhtB,CAHJ,CAGQmuB,CAAA2C,EAAA,CAAqBR,CAArB,CAA0BnG,CAA1B,CAHR,CACInqB,CADJ,CACQmuB,CAAA4C,EAAA,CAAqBT,CAArB,CAA0BnG,CAA1B,CADR,CAC2C0G,EAAA,CAAAA,CAAA,CAAoB1G,CAApB,CAA2B,CAA3B,CAAA4G,EAAA,CAA6C,CAA7C,CAAgD5G,CAAhD,CAAuD,CAAvD,CAD3C,EACwG,CAIxG,EAAAiD,GAAA,EACA,OAAOptB,EAZX,CAwBAgxB,QAAA,GAAa,CAAbA,CAAa,CAAC7G,CAAD,CAAOxrB,CAAP,CACb,CACI,CAAA0uB,EAAA,CAAc,CAAA,CACd,EAAAD,GAAA,EACAyD,GAAA,CAAAA,CAAA,CAAoB1G,CAApB,CAAA8G,EAAA,CAA0C9G,CAA1C,CAAiD,CAAA6C,EAAjD,CAAmEruB,CAAnE,CAAuE,GAAvE,CAA6EwrB,CAA7E,CACA,EAAAiD,GAAA,EAJJ,CAgBArD,QAAA,GAAa,CAAbA,CAAa,CAACI,CAAD,CAAOnqB,CAAP,CACb,CACI,CAAAqtB,EAAA,CAAc,CAAA,CACd,EAAAD,GAAA,EACA,KAAIkD,EAAMnG,CAANmG,CAAa,CAAAtD,EAAjB,CACImB,EAAQ0C,EAAA,CAAAA,CAAA,CAAoB1G,CAApB,CACPnI,GAAL,EAAsBsO,CAAtB,EAA6B,CAAAtD,EAA7B,CAIImB,CAAA+C,EAAA,CAAsBZ,CAAtB,CAA2BtwB,CAA3B,CAA+B,KAA/B,CAAuCmqB,CAAvC,CAJJ,EACIgE,CAAA8C,EAAA,CAAsBX,CAAtB,CAA2BtwB,CAA3B,CAA+B,GAA/B,CAAqCmqB,CAArC,CACA,CAAA0G,EAAA,CAAAA,CAAA,CAAoB1G,CAApB,CAA2B,CAA3B,CAAA8G,EAAA,CAA8C,CAA9C,CAAkDjxB,CAAlD,EAAuD,CAAvD,CAA4D,GAA5D,CAAkEmqB,CAAlE,CAAyE,CAAzE,CAFJ,CAMA,EAAAiD,GAAA,EAXJ,CAoCA+D,QAAA,GAAc,CAAdA,CAAc,CAAChH,CAAD,CAAOiH,CAAP,CACd,CAGQC,CAAAA,CAAAA,CAAAzD,EAAAyD,CADalH,CACbkH,GADsBA,CAAAxE,EACtBwE,CAAkED,EAgxEtE,CAQqC,CARrC,GAQQ,EAAE,CAAAE,EARV,GASQC,CA1DRb,GACA,CAyDQa,CA1DSC,EAAA,CA0DTD,CA1DyBE,GAAhB,CA0DTF,CA1D0CN,EAClD,CAyDQM,CAzDRX,GAAA,CAyDQW,CAzDSC,EAAA,CAyDTD,CAzDyBG,GAAhB,CAyDTH,CAzDiDL,EAgDzD,EACoC,CADpC,GACQ,EAAE,CAAAS,EADV,GAEQC,CA9DRzB,GACA,CA6DQyB,CA9DQb,EAChB,CA6DQa,CA7DRrB,GAAA,CA6DQqB,CA7DQd,EA2DhB,CAnxEJ;AAoCAjC,QAAA,GAAU,CAAVA,CAAU,CACV,CAII,IAHA,IAAI3vB,EAAI,CAAR,CACIR,EAAI,EADR,CAGS6vB,EAAS,CAAlB,CAAqBA,CAArB,CAA8B,CAAAtB,EAA9B,CAAgDsB,CAAA,EAAhD,CAA0D,CACtD,IAAIJ,EAAQ,CAAAP,EAAA,CAAgBW,CAAhB,CAMZ,IAAkDJ,CAAA0D,GAAlD,EAAkE1D,CAAA2D,GAAlE,CAAoF,CAChFpzB,CAAA,CAAEQ,CAAA,EAAF,CAAA,CAASqvB,CACP,KAAA,EAAArvB,CAAA,EAg7uBV,IAh7uBgC,CAg7uBhC,CAh7uBgCivB,CAAAhH,KAAA,EAg7uBhC,CAAU,CAIN,IAHA,IAAI4K,EAAO,CAAX,CACI7C,EAAQ,CADZ,CAEIC,EAAQ,EACZ,CAAO4C,CAAP,CAAcC,CAAA5uB,OAAd,CAAA,CAA2B,CAIvB,IAHA,IAAI7D,EAAIyyB,CAAA,CAAKD,CAAL,CAAR,CAEIE,EAAWF,CAAXE,CAAkB,CACtB,CAAOA,CAAP,CAAkBD,CAAA5uB,OAAlB,EAAiC4uB,CAAA,CAAKC,CAAL,CAAjC,GAAoD1yB,CAApD,CAAA,CAAuD0yB,CAAA,EACvD9C,EAAA,CAAMD,CAAA,EAAN,CAAA,CAAiB+C,CAAjB,CAA4BF,CAC5B5C,EAAA,CAAMD,CAAA,EAAN,CAAA,CAAiB3vB,CACjBwyB,EAAA,CAAOE,CAPgB,CASvB9C,CAAA/rB,OAAJ,CAAmB4uB,CAAA5uB,OAAnB,GAAgC,CAAhC,CAAuC+rB,CAAvC,CAbM,CAh7uBFzwB,CAAA,CAAE,CAAF,CAAA,CAAS,CAFuE,CAP9B,CAa1D,MAAOA,EAjBX,CAmEAwzB,QAAA,GAAc,CAAdA,CAAc,CACd,CAEI,IAHW1sB,IAAAA,EAq7CkD2sB,EAr7ClD3sB,CAEP2kB,EAAO,CAFA3kB,CAGF+oB,EAAS,CAAlB,CAAqBA,CAArB,CAA8B,CAAAX,EAAAxqB,OAA9B,CAAsDmrB,CAAA,EAAtD,CAAgE,CAC5D,IAAIJ,EAAQ,CAAAP,EAAA,CAAgBW,CAAhB,CACRJ,EAAA3oB,KAAJ,EAAkBA,CAAlB,GACI2kB,CADJ,CACWgE,CAAAhE,EADX,CACwBgE,CAAAuB,GADxB,CAF4D,CAMhE,MAAOvF,EARX;AAoCAiI,QAAA,GAAa,CAAbA,CAAa,CAAChc,CAAD,CAAQic,CAAR,CAAaC,CAAb,CAAyBC,CAAzB,CAAsCC,CAAtC,CAAkDC,CAAlD,CAA+DrqB,CAA/D,CAAwEyG,CAAxE,CACb,CAEI,IADA,IAAI0b,EAASnU,CAAA,EAASic,CAAT,CAAe,EAAf,CAAmB,CAChC,CAAuBlI,CAAvB,EAA+BkI,CAA/B,CAAoClI,CAApC,EAA4C,CAA5C,CAA+C,CAC3C,IAAImG,EAAMnG,CAANmG,CAAaoC,EACjB,IAA8BxuB,IAAAA,EAA9B,GAAI,CAAAipB,GAAA,CAAiBmD,CAAjB,CAAJ,CAEI,MAx/IRnoB,EAAA,CAu/I0B,kCAv/I1B,CA3hEO3F,CAAA,CAkhNsE2nB,CAlhNtE,CAAa,CAAb,CAAgB,CAAA,CAAhB,CA2hEP,CAw/Ie,CAAA,CAAA,CAEX,KAAIvqB,EAAIiP,CAAJjP,EAAa,SACbA,EAAJ,EAAkB,CAAlB,EAAS2qB,CAAT,GAAqB3qB,CAArB,EAA0B2qB,CAAA,EAA1B,CACA,EAAA4C,GAAA,CAAiBmD,CAAjB,CAAA,CAAwB,CAACgC,CAAD,CAAaC,CAAb,CAA0BC,CAA1B,CAAsCC,CAAtC,CAAmD7yB,CAAnD,CAAsDwI,CAAtD,EApyEpBma,EAoyEoB,CAAoF,CAAA,CAApF,CARmB,CAW/C,MAAO,CAAA,CAbX;AA2BAoE,QAAA,GAAU,CAAVA,CAAU,CAAChY,CAAD,CAAYgkB,CAAZ,CAAmBC,CAAnB,CACV,CACI,IAAKC,IAAIA,CAAT,GAAgBF,EAAhB,CAAuB,CACnB,IAAIxI,EAAO,CAAC0I,CAAR1I,EAAeyI,CAAfzI,EAAyB,CAAzBA,CAAJ,CACIhe,EAAMwmB,CAAA,CAAME,CAAN,CAMV,IAAI,EAAA1mB,CAAA,CAAI,CAAJ,CAAA,EAAUA,CAAA,CAAI,CAAJ,CAAV,CAAmB,CAAAoC,EAAAmc,GAAnB,CAAJ,CAAA,CAEA,IAAI4H,EAAanmB,CAAA,CAAI,CAAJ,CAAA,CAAQA,CAAA,CAAI,CAAJ,CAAAuK,KAAA,CAAY/H,CAAZ,CAAR,CAAiC,IAAlD,CACI4jB,EAAcpmB,CAAA,CAAI,CAAJ,CAAA,CAAQA,CAAA,CAAI,CAAJ,CAAAuK,KAAA,CAAY/H,CAAZ,CAAR,CAAiC,IADnD,CAEI6jB,EAAarmB,CAAA,CAAI,CAAJ,CAAA,CAAQA,CAAA,CAAI,CAAJ,CAAAuK,KAAA,CAAY/H,CAAZ,CAAR,CAAiC,IAFlD,CAGI8jB,EAActmB,CAAA,CAAI,CAAJ,CAAA,CAAQA,CAAA,CAAI,CAAJ,CAAAuK,KAAA,CAAY/H,CAAZ,CAAR,CAAiC,IAxvF3Cic,MA8vFR,EAAIT,CAAJ,EA/uFQS,KA+uFR,EAAmCT,CAAnC,GACQ,CAACmI,CAOL,EAPmBE,CAOnB,GANIF,CAMJ,CANiBQ,QAA2B,CAACvC,CAAD,CAAW,CAC/C,MAAO,SAAQ,CAACpG,CAAD,CAAO,CAClB,MAAOoG,EAAA,CAASpG,CAAT,CAAP,CAAwB,GADN,CAAfzT,KAAA,CAEA/H,CAFA,CADwC,CAAtC,CAIX6jB,CAJW,CAMjB,EAAI,CAACD,CAAL,EAAoBE,CAApB,GACIF,CADJ,CACkBQ,QAA4B,CAACnC,CAAD,CAAY,CAClD,MAAO,SAAQ,CAAC/oB,CAAD,CAAOsiB,CAAP,CAAa,CACxB,MAAOyG,EAAA,CAAU/oB,CAAV,CAAgBsiB,CAAhB,CADiB,CAArBzT,KAAA,CAEA/H,CAFA,CAD2C,CAAxC,CAIZ8jB,CAJY,CADlB,CARJ,CAoBA,KAHA,IAAIO,EAAO7mB,CAAA,CAAI,CAAJ,CAAX,CACIqe,EAAQre,CAAA,CAAI,CAAJ,CAARqe,EAAkB,CADtB,CAGSyI,EAAO,CAAhB,CAAmBA,CAAnB,CAA0BzI,CAA1B,CAAiCyI,CAAA,EAAA,CAAQ9I,CAAR,EAAgB,CAAjD,CAEI,GADI6I,CACA,EADgB,CAChB,CADQxI,CACR,GADmBwI,CACnB,CAD0B7mB,CAAA,CAAI,CAAJ,CAC1B,CADmC8mB,CACnC,EAAA,CAACb,EAAA,CAAAA,CAAA,CAAmBjI,CAAnB,CAAyBA,CAAzB,CAA+BmI,CAA/B,CAA2CC,CAA3C,CAAwDC,CAAxD,CAAoEC,CAApE,CAAiFtmB,CAAA,CAAI,CAAJ,CAAjF,EAA2FwC,CAAAtB,GAA3F,CAAkH2lB,CAAlH,EAA0HrkB,CAAAjB,GAA1H,CAAL,CACI,MAAO,CAAA,CAlCf,CARmB,CA8CvB,MAAO,CAAA,CA/CX;AAkGAmZ,QAAA,GAAe,CAAfA,CAAe,CAACqM,CAAD,CACf,CACI,CAAA5F,EAAA7kB,KAAA,CAAmByqB,CAAnB,CADJ,CAcA7f,CAAA8f,GAAA,CAAAA,QAAK,CAAChJ,CAAD,CAAOjkB,CAAP,CAAYktB,CAAZ,CACL,CACI,IAAA/F,EAAA,CAAc,CAAA,CACT,KAAAD,GAAL,GACoB,IAAA9e,EAIhB,EAJ4B6G,CAAA,CAAA,IAAA7G,EAAA,CA76ExB+T,CA66EwB,CAI5B,EAHIhN,CAAA,CAAA,IAAA/G,EAAA,CAAsB,gBAAtB,CAAyC8kB,CAAzC,CAAkD,OAAlD,CAA4DC,CAAA,CAAA,IAAA/kB,EAAA,CAAmB6b,CAAnB,CAA5D,CAAsF,CAAA,CAAtF,CAA4F,CAAA,CAA5F,CAGJ,CADIjkB,CACJ,GADS,IAAAqI,EAAA+kB,EACT,EAD4BptB,CAC5B,EAAA,IAAAqI,EAAAglB,GAAA,CA/rGQnR,CA+rGR,CAA8B,CAA9B,CAAiC+H,CAAjC,CALJ,CAFJ,CAmBAqJ,SAAA,GAAU,CAAVA,CAAU,CACV,CACI,IAAIz0B,EAAI,CAAAsuB,EACR,EAAAA,EAAA,CAAc,CAAA,CACd,OAAOtuB,EAHX,CAgBA6wB,QAAA,GAAW,CAAC6D,CAAD,CAAStJ,CAAT,CAAeiF,CAAf,CACX,CAxpJIjnB,CAAA,CAypJa,sBAzpJb,CAypJsCsrB,CAzpJtC,CAypJ+C,IAzpJ/C,CAypJsDjxB,CAAA,CAAU2nB,CAAV,CAzpJtD,CAypJwE,GAzpJxE,CAypJ8E3nB,CAAA,CAAU4sB,CAAV,CAzpJ9E,CAypJgG,GAzpJhG,CAmqJA,OAAO,CAAA,CAXX,CAkBJ,IAAAxC,GAA0B,IAA1B,CACA8F,GAA0B9F,EAA1B8F,CAAmD,CADnD,CASIgB,GAAoBA,CATxB,CAUIC,GAAoBA,CA+DVxD;QAAAA,GAAQA,CAACG,CAADH,CAAMhG,CAANgG,CAClBA,CACIA,IAAIxxB,EAAKwxB,EAATA,CACI3hB,EAAM2hB,IAAAd,WADVc,CAEIhkB,EAAMqC,CAAA2e,GAAAgD,CAAgBG,CAAhBH,CAFVA,CAQIyD,EAAazJ,CAAbyJ,CAAoBzD,KAEpBhkB,EAAJgkB,CACQhkB,CAAAgkB,CApEQ0D,CAoER1D,CAAJA,CACIxxB,CADJwxB,CACQhkB,CAAAgkB,CArEI0D,CAqEJ1D,CAAAA,CAAkCyD,CAAlCzD,CADRA,CAEWhkB,CAAAgkB,CApEC2D,CAoED3D,CAFXA,GAMQxxB,CANRwxB,CAGUyD,CAANzD,CAAmBA,CAAnBA,CAGQhkB,CAAAgkB,CAxEA2D,CAwEA3D,CAAAA,CAAkCyD,CAAlCzD,CAA+CA,EAA/CA,CAHRA,EAGgEA,CAHhEA,CACQhkB,CAAAgkB,CAtEA2D,CAsEA3D,CAAAA,CAAkCyD,CAAlCzD,CADRA,CACwDA,GAJ5DA,CADJA,CAUWyD,CAVXzD,CAUwBA,CAVxBA,GAWIhkB,CAXJgkB,CAWU3hB,CAAA2e,GAAAgD,CAAgBG,CAAhBH,CAAsBA,EAAtBA,CAXVA,IAaYhkB,CAAAgkB,CA9EI2D,CA8EJ3D,CAAJA,CACIxxB,CADJwxB,CACQhkB,CAAAgkB,CA/EA2D,CA+EA3D,CAAAA,CAAkCyD,CAAlCzD,CAA+CA,EAA/CA,CADRA,EACgEA,CADhEA,CAEWhkB,CAAAgkB,CAlFH0D,CAkFG1D,CAFXA,GAQIxxB,CARJwxB,CAQQhkB,CAAAgkB,CAxFA0D,CAwFA1D,CAAAA,CAAkCyD,CAAlCzD,CARRA,CAbRA,CAyBAA,IAASA,CAATA,EAAIxxB,CAAJwxB,CAIIA,MAHgBA,KAAA7hB,EAGT3P,EAHqBwW,CAAAgb,CAAAA,IAAA7hB,EAAA6hB,CA9kFxB5N,EA8kFwB4N,CAA4ChkB,CAAAgkB,CAxF5D4D,CAwF4D5D,CAA5CA,CAGrBxxB,EAFH0W,CAAA8a,CAAAA,IAAA7hB,EAAA6hB,CAAsBhkB,CAAAgkB,CA1Fd6D,CA0Fc7D,CAAtBA,CAAyDA,YAAzDA,CAAwEkD,CAAAlD,CAAAA,IAAA7hB,EAAA6hB,CAAmBhG,CAAnBgG,CAAxEA,CAAmGA,KAAnGA,CAA2GkD,CAAAlD,CAAAA,IAAA7hB,EAAA6hB,CAAmBxxB,CAAnBwxB,CAA3GA,CAAkIA,CAAAA,CAAlIA,CAAwIA,CAAC3hB,CAAA4e,GAAzI+C,CAEGxxB,CAAAA,CAEX6P,EAAA2kB,GAAAhD,CAAUhG,CAAVgG,CA1tGY8D,EA0tGZ9D,CApnFmB+D,CAonFnB/D,CACAxxB,EAAAwxB,CAAIA,GACYA,KAAA7hB,EAAhB6hB,EAA4Bhb,CAAAgb,CAAAA,IAAA7hB,EAAA6hB,CArlFpB5N,EAqlFoB4N,CAA5BA,EACI9a,CAAA8a,CAAAA,IAAA7hB,EAAA6hB,CAAsBA,4CAAtBA,CAAqEkD,CAAAlD,CAAAA,IAAA7hB,EAAA6hB,CAAmBhG,CAAnBgG,CAArEA,CAAgGA,IAAhGA,CAAuGkD,CAAAlD,CAAAA,IAAA7hB,EAAA6hB,CAAmBxxB,CAAnBwxB,CAAvGA,CAA8HA,CAAAA,CAA9HA,CAAoIA,CAAC3hB,CAAA4e,GAArI+C,CAEJA,OAAOxxB,EA/CXwxB;AA0DWO,QAAAA,GAAQA,CAACJ,CAADI,CAAM/xB,CAAN+xB,CAASvG,CAATuG,CACnBA,CAEIA,IAAIU,EAASV,CAAAA,CAAbA,CACIliB,EAAMkiB,IAAArB,WADVqB,CAEIvkB,EAAMqC,CAAA2e,GAAAuD,CAAgBJ,CAAhBI,CAFVA,CAQIkD,EAAazJ,CAAbyJ,CAAoBlD,KAExBA,IAAIvkB,CAAJukB,CAIIA,GAAIvkB,CAAAukB,CAlIQyD,CAkIRzD,CAAJA,CACIvkB,CAAAukB,CAnIQyD,CAmIRzD,CAAAA,CAAmC/xB,CAAnC+xB,CAAsCkD,CAAtClD,CACAA,CAAAU,CAAAV,CAASA,CAAAA,CAFbA,KAQKA,IAAIvkB,CAAAukB,CAxIG0D,CAwIH1D,CAAJA,CAAwCA,CACzC1wB,CAAA0wB,CAAIvkB,CAAAukB,CA1IIoD,CA0IJpD,CAAAA,CAAmCvkB,CAAAukB,CA1I/BoD,CA0I+BpD,CAAAA,CAAkCkD,CAAlClD,CAA8CA,CAAAA,CAA9CA,CAAnCA,CAAyFA,CAC7FA,IAAMkD,CAANlD,CAAmBA,CAAnBA,CAIIvkB,CAAAukB,CA9II0D,CA8IJ1D,CAAAA,CAAoC1wB,CAApC0wB,CAAwCA,GAAxCA,CAAiD/xB,CAAjD+xB,EAAsDA,CAAtDA,CAA0DkD,CAA1DlD,CAAuEA,EAAvEA,CAJJA,KACIvkB,EAAAukB,CA3II0D,CA2IJ1D,CAAAA,CAAoC1wB,CAApC0wB,CAAwCA,IAAxCA,CAAiD/xB,CAAjD+xB,CAAoDkD,CAApDlD,CACAU,EAAAV,CAASA,CAAAA,CAJ4BA,CAAxCA,CAZTA,IAsBWkD,EAAJlD,CAAiBA,CAAjBA,GAMHvkB,CANGukB,CAMGliB,CAAA2e,GAAAuD,CAAgBJ,CAAhBI,CAAsBA,EAAtBA,CANHA,IAQKvkB,CAAAukB,CA1JI0D,CA0JJ1D,CAAJA,EACIkD,CAGAlD,EAHcA,EAGdA,CAFA1wB,CAEA0wB,CAFIvkB,CAAAukB,CA7JAoD,CA6JApD,CAAAA,CAAmCvkB,CAAAukB,CA7JnCoD,CA6JmCpD,CAAAA,CAAkCkD,CAAlClD,CAA8CA,CAAAA,CAA9CA,CAAnCA,CAAyFA,CAE7FA,CADAvkB,CAAAukB,CA7JI0D,CA6JJ1D,CAAAA,CAAoC1wB,CAApC0wB,CAAwCA,GAAxCA,CAAiD/xB,CAAjD+xB,EAAsDA,CAAtDA,CAA0DkD,CAA1DlD,CACAA,CAAAU,CAAAV,CAASA,CAAAA,CAJbA,EAKWvkB,CAAAukB,CAjKHyD,CAiKGzD,CALXA,GAWIvkB,CAAAukB,CAvKIyD,CAuKJzD,CAAAA,CAAmC/xB,CAAnC+xB,CAAsCkD,CAAtClD,CACAA,CAAAU,CAAAV,CAASA,CAAAA,CAZbA,CARDA,CAwBHU,EAAJV,CACoBA,IAAApiB,EADpBoiB,EACgCvb,CAAAub,CAAAA,IAAApiB,EAAAoiB,CA/pFxBnO,EA+pFwBmO,CAA4CvkB,CAAAukB,CAzK5DqD,CAyK4DrD,CAA5CA,CADhCA,EAEQrb,CAAAqb,CAAAA,IAAApiB,EAAAoiB,CAAsBvkB,CAAAukB,CA3KdsD,CA2KctD,CAAtBA,CAAyDA,aAAzDA,CAAyE2C,CAAA3C,CAAAA,IAAApiB,EAAAoiB,CAAmBvG,CAAnBuG,CAAzEA,CAAoGA,GAApGA,CAA0G2C,CAAA3C,CAAAA,IAAApiB,EAAAoiB,CAAmB/xB,CAAnB+xB,CAA1GA,CAAkIA,GAAlIA,CAAuIA,CAAAA,CAAvIA,CAA6IA,CAACliB,CAAA4e,GAA9IsD,CAFRA,EAMAliB,CAAA2kB,GAAAzC,CAAUvG,CAAVuG,CA3yGYuD,EA2yGZvD,CAnsFmB2D,CAmsFnB3D,CACAA,CAAgBA,IAAApiB,EAAhBoiB,EAA4Bvb,CAAAub,CAAAA,IAAApiB,EAAAoiB,CArqFpBnO,EAqqFoBmO,CAA5BA,EACIrb,CAAAqb,CAAAA,IAAApiB,EAAAoiB,CAAsBA,6CAAtBA,CAAsE2C,CAAA3C,CAAAA,IAAApiB,EAAAoiB,CAAmBvG,CAAnBuG,CAAtEA,CAAiGA,IAAjGA,CAAwG2C,CAAA3C,CAAAA,IAAApiB,EAAAoiB;AAAmB/xB,CAAnB+xB,CAAxGA,CAA+HA,CAAAA,CAA/HA,CAAqIA,CAACliB,CAAA4e,GAAtIsD,CARJA,CA1DJA,CA8EUH,QAAAA,GAAQA,CAACD,CAADC,CAAMpG,CAANoG,CAClBA,CACIA,IAAIvwB,EAAKuwB,EAATA,CACI/hB,EAAM+hB,IAAAlB,WACNljB,EAAAA,CAAMqC,CAAA2e,GAAAoD,CAAgBD,CAAhBC,CAMVA,KAAIqD,EAAazJ,CAAbyJ,CAAoBrD,KAEpBpkB,EAAJokB,GACQpkB,CAAAokB,CA5MQuD,CA4MRvD,CAAJA,CACIvwB,CADJuwB,CACQpkB,CAAAokB,CA7MIuD,CA6MJvD,CAAAA,CAAkCqD,CAAlCrD,CADRA,CAEWpkB,CAAAokB,CAhNCsD,CAgNDtD,CAFXA,GAGIvwB,CAHJuwB,CAGQpkB,CAAAokB,CAjNIsD,CAiNJtD,CAAAA,CAAkCqD,CAAlCrD,CAHRA,CAGyDpkB,CAAAokB,CAjN7CsD,CAiN6CtD,CAAAA,CAAkCqD,CAAlCrD,CAA+CA,CAA/CA,CAHzDA,EAG8GA,CAH9GA,CADJA,CAOAA,IAASA,CAATA,EAAIvwB,CAAJuwB,CAIIA,MAHgBA,KAAAjiB,EAGTtO,EAHqBmV,CAAAob,CAAAA,IAAAjiB,EAAAiiB,CAtsFxBhO,EAssFwBgO,CAA4CpkB,CAAAokB,CAhN5DwD,CAgN4DxD,CAA5CA,CAGrBvwB,EAFHqV,CAAAkb,CAAAA,IAAAjiB,EAAAiiB,CAAsBpkB,CAAAokB,CAlNdyD,CAkNczD,CAAtBA,CAAyDA,YAAzDA,CAAwE8C,CAAA9C,CAAAA,IAAAjiB,EAAAiiB,CAAmBpG,CAAnBoG,CAAxEA,CAAmGA,KAAnGA,CAA2G8C,CAAA9C,CAAAA,IAAAjiB,EAAAiiB,CAAmBvwB,CAAnBuwB,CAA3GA,CAAkIA,CAAAA,CAAlIA,CAAwIA,CAAC/hB,CAAA4e,GAAzImD,CAEGvwB,CAAAA,CAEXwO,EAAA2kB,GAAA5C,CAAUpG,CAAVoG,CAl1GY0D,EAk1GZ1D,CA7uFmB+D,CA6uFnB/D,CACAvwB,EAAAuwB,CAAIA,KACYA,KAAAjiB,EAAhBiiB,EAA4Bpb,CAAAob,CAAAA,IAAAjiB,EAAAiiB,CA7sFpBhO,EA6sFoBgO,CAA5BA,EACIlb,CAAAkb,CAAAA,IAAAjiB,EAAAiiB,CAAsBA,4CAAtBA,CAAqE8C,CAAA9C,CAAAA,IAAAjiB,EAAAiiB,CAAmBpG,CAAnBoG,CAArEA,CAAgGA,IAAhGA,CAAuG8C,CAAA9C,CAAAA,IAAAjiB,EAAAiiB,CAAmBvwB,CAAnBuwB,CAAvGA,CAA8HA,CAAAA,CAA9HA,CAAoIA,CAAC/hB,CAAA4e,GAArImD,CAEJA,OAAOvwB,EA7BXuwB;AAwCWK,QAAAA,GAAQA,CAACN,CAADM,CAAM5wB,CAAN4wB,CAASzG,CAATyG,CACnBA,CACIA,IAAIQ,EAASR,CAAAA,CAAbA,CACIpiB,EAAMoiB,IAAAvB,WACNljB,EAAAA,CAAMqC,CAAA2e,GAAAyD,CAAgBN,CAAhBM,CAMVA,KAAIgD,EAAazJ,CAAbyJ,CAAoBhD,KAEpBzkB,EAAJykB,GACQzkB,CAAAykB,CApPQwD,CAoPRxD,CAAJA,EACIzkB,CAAAykB,CArPQwD,CAqPRxD,CAAAA,CAAmC5wB,CAAnC4wB,CAAsCgD,CAAtChD,CACAA,CAAAQ,CAAAR,CAASA,CAAAA,CAFbA,EAGWzkB,CAAAykB,CAzPCuD,CAyPDvD,CAHXA,GAIIzkB,CAAAykB,CA1PQuD,CA0PRvD,CAAAA,CAAmC5wB,CAAnC4wB,CAAuCA,GAAvCA,CAA6CgD,CAA7ChD,CAEAA,CADAzkB,CAAAykB,CA3PQuD,CA2PRvD,CAAAA,CAAmC5wB,CAAnC4wB,EAAwCA,CAAxCA,CAA2CgD,CAA3ChD,CAAwDA,CAAxDA,CACAA,CAAAQ,CAAAR,CAASA,CAAAA,CANbA,CADJA,CAUIQ,EAAJR,CACoBA,IAAAtiB,EADpBsiB,EACgCzb,CAAAyb,CAAAA,IAAAtiB,EAAAsiB,CAlvFxBrO,EAkvFwBqO,CAA4CzkB,CAAAykB,CA5P5DmD,CA4P4DnD,CAA5CA,CADhCA,EAEQvb,CAAAub,CAAAA,IAAAtiB,EAAAsiB,CAAsBzkB,CAAAykB,CA9PdoD,CA8PcpD,CAAtBA,CAAyDA,aAAzDA,CAAyEyC,CAAAzC,CAAAA,IAAAtiB,EAAAsiB,CAAmBzG,CAAnByG,CAAzEA,CAAoGA,GAApGA,CAA0GyC,CAAAzC,CAAAA,IAAAtiB,EAAAsiB,CAAmB5wB,CAAnB4wB,CAA1GA,CAAkIA,GAAlIA,CAAuIA,CAAAA,CAAvIA,CAA6IA,CAACpiB,CAAA4e,GAA9IwD,CAFRA,EAMApiB,CAAA2kB,GAAAvC,CAAUzG,CAAVyG,CA93GYqD,EA83GZrD,CAvxFmBxG,CAuxFnBwG,CACAA,CAAgBA,IAAAtiB,EAAhBsiB,EAA4Bzb,CAAAyb,CAAAA,IAAAtiB,EAAAsiB,CAxvFpBrO,EAwvFoBqO,CAA5BA,EACIvb,CAAAub,CAAAA,IAAAtiB,EAAAsiB,CAAsBA,6CAAtBA,CAAsEyC,CAAAzC,CAAAA,IAAAtiB,EAAAsiB,CAAmBzG,CAAnByG,CAAtEA,CAAiGA,IAAjGA,CAAwGyC,CAAAzC,CAAAA,IAAAtiB,EAAAsiB,CAAmB5wB,CAAnB4wB,CAAxGA,CAA+HA,CAAAA,CAA/HA,CAAqIA,CAACpiB,CAAA4e,GAAtIwD,CARJA,CArBJA,CAqDA1jB,QAZEqnB,EAYS,CAACC,CAAD,CACX,CACI,CAAA,KAAA,CAAA,IAAA,CAAM,QAAN,CAAgBA,CAAhB,CA/wFQ7R,GA+wFR,CAEA,KAAA8R,EAAA,CAAY,CACRC,GAnnGQtR,GAknGA,CAERrY,GAAa,EAFL,CAHhB,CAbsB2a,CAAAvY,CAApBonB,CAAoBpnB,CAAAA,CAAAA,CA+BtB,EAAA,CA/lQJ,CAAAwnB,UA+lQIthB;CAAAqT,GAAA,CAAAA,QAAO,CAACjY,CAAD,CAAMD,CAAN,CAAWD,CAAX,CAAgBD,CAAhB,CACP,CACI,IAAAE,EAAA,CAAWA,CACX,KAAAC,EAAA,CAAWA,CACX,KAAAF,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CAEX,KAAIsmB,EAAS,IACb,KAAAH,EAAA1pB,GAAA,CAAkB8pB,EAAA,CAAAtmB,CAAA,CAAa,QAAQ,EAAG,CACtCqmB,CAiLJH,EAAAC,GAAA,EA3zGYtR,GA0oGRwR,EAkLAH,EAAAC,GAAJ,CA7zGYtR,EA6zGZ,EACI0R,EAAA,CAnLAF,CAmLArmB,EAAA,CAnLAqmB,CAmLgBH,EAAAM,GAAhB,CAnLAH,EAqLAnmB,EAAJ,EAAcob,EAAA,CArLV+K,CAqLUnmB,EAAA,CAAwB,CAAxB,CACdumB,GAAA,CAtLIJ,CAsLJrmB,EAAA,CAtLIqmB,CAsLcH,EAAA1pB,GAAlB,CAAmC,GAAnC,CAAwC,EAAxC,CAvL0C,CAAxB,CAIlB,KAAA0pB,EAAAM,GAAA,CAAgBE,EAAA,CAAA1mB,CAAA,CAjpGJ6U,EAipGI,CAlpGJA,CAkpGI,CA9xFRA,OA8xFQ,CAEhBuD,GAAA,CAAAnY,CAAA,CAAe,IAAf,CAAqB0mB,EAArB,CACArO,GAAA,CAAArY,CAAA,CAAoB,IAAAsX,MAAApP,KAAA,CAAgB,IAAhB,CAApB,CAEgBpI,EAAhB,EACI6mB,EAAA,CAAA7mB,CAAA,CApzFImU,EAozFJ,CAAmC2S,QAAkB,CAACC,CAAD,CAAS,CAgB9D,IAAI9mB,EAfAqmB,CAeMrmB,EACV+mB,GAAA,CAhBIV,CAgBJ,CAAc,OAAd,CAAuBrmB,CAAAgnB,EAAA,CAAY,CAAZ,CAAvB,CAAuC,CAAvC,CAhBmBF,CAgBuB,CAAO,CAAP,CAA1C,CACAC,GAAA,CAjBIV,CAiBJ,CAAc,OAAd,CAAuBrmB,CAAAgnB,EAAA,CAAY,CAAZ,CAAvB,CAAuC,CAAvC,CAjBmBF,CAiBuB,CAAO,CAAP,CAA1C,CACAC,GAAA,CAlBIV,CAkBJ,CAAc,OAAd,CAAuBrmB,CAAAinB,EAAA,CAAY,CAAZ,CAAvB,CAAuC,CAAvC,CAlBmBH,CAkBuB,CAAO,CAAP,CAA1C,CACAC,GAAA,CAnBIV,CAmBJ,CAAc,OAAd,CAAuBrmB,CAAAinB,EAAA,CAAY,CAAZ,CAAvB,CAAuC,CAAvC,CAnBmBH,CAmBuB,CAAO,CAAP,CAA1C,CAAqD,CAAA,CAArD,CACAC,GAAA,CApBIV,CAoBJ,CAAc,OAAd,CAAuBrmB,CAAAgnB,EAAA,CAAY,CAAZ,CAAvB,CAAuC,CAAvC,CApBmBF,CAoBuB,CAAO,CAAP,CAA1C,CACAC,GAAA,CArBIV,CAqBJ,CAAc,OAAd,CAAuBrmB,CAAAgnB,EAAA,CAAY,CAAZ,CAAvB,CAAuC,CAAvC,CArBmBF,CAqBuB,CAAO,CAAP,CAA1C,CACAC,GAAA,CAtBIV,CAsBJ,CAAc,OAAd,CAAuBrmB,CAAAinB,EAAA,CAAY,CAAZ,CAAvB,CAAuC,CAAvC,CAtBmBH,CAsBuB,CAAO,CAAP,CAA1C,CACAC,GAAA,CAvBIV,CAuBJ,CAAc,OAAd,CAAuBrmB,CAAAinB,EAAA,CAAY,CAAZ,CAAvB,CAAuC,CAAvC,CAvBmBH,CAuBuB,CAAO,CAAP,CAA1C;AAAqD,CAAA,CAArD,CACAC,GAAA,CAxBIV,CAwBJ,CAAc,OAAd,CAAuBrmB,CAAAgnB,EAAA,CAAY,CAAZ,CAAvB,CAAuC,CAAvC,CAxBmBF,CAwBuB,CAAO,CAAP,CAA1C,CACAC,GAAA,CAzBIV,CAyBJ,CAAc,OAAd,CAAuBrmB,CAAAgnB,EAAA,CAAY,CAAZ,CAAvB,CAAuC,CAAvC,CAzBmBF,CAyBuB,CAAO,CAAP,CAA1C,CACAC,GAAA,CA1BIV,CA0BJ,CAAc,OAAd,CAAuBrmB,CAAAinB,EAAA,CAAY,CAAZ,CAAvB,CAAuC,CAAvC,CA1BmBH,CA0BuB,CAAO,CAAP,CAA1C,CACAC,GAAA,CA3BIV,CA2BJ,CAAc,OAAd,CAAuBrmB,CAAAinB,EAAA,CAAY,CAAZ,CAAvB,CAAuC,CAAvC,CA3BmBH,CA2BuB,CAAO,CAAP,CAA1C,CAAqD,CAAA,CAArD,CACI9mB,EAAAknB,EAAJ,CAn7GQC,EAm7GR,EACIJ,EAAA,CA7BAV,CA6BA,CAAc,QAAd,CAAwBrmB,CAAAonB,GAAxB,CAAyC,EAAzC,CA7BeN,CA6B6B,CAAO,CAAP,CAA5C,CA9B0D,CAA9D,CAIJ5gB,EAAA,CAAAA,IAAA,CArBJ,CA8DA6gB,SAAA,GAAQ,CAARA,CAAQ,CAACzmB,CAAD,CAAQ+mB,CAAR,CAAeC,CAAf,CAAuBC,CAAvB,CAAgCC,CAAhC,CACR,CAEYznB,CAAAA,CAAM,CAAAA,EACV,IAAI,EAAAwnB,CAAA,EAAkD,CAAlD,CAAWjnB,CAAApO,QAAA,CAAcq1B,CAAAE,YAAA,EAAd,CAAX,CAAJ,CAAA,CACIC,CAAAA,CAAQ,CACZ,KAAIzL,EAAQ,CAAZ,CACI0L,EAAQ,EADZ,CAEIC,EAAS,CAAA,CAFb,CAGIC,EAAS,CACA,EAAb,CAAIP,CAAJ,GACII,CAIA,CAJQ,EAIR,CAHAzL,CAGA,CAHQoL,CAAAxyB,OAGR,CAFAyyB,CAEA,CAFS,CAET,CADAM,CACA,CADS,CAAA,CACT,CAAAC,CAAA,CAAS,CALb,CAOA,KAAK,IAAIl3B,EAAI,CAAb,CAAgBA,CAAhB,CAAoBsrB,CAApB,CAA2BtrB,CAAA,EAA3B,CACsB,CAIlB,EAJIA,CAIJ,CAJQk3B,CAIR,GAHQF,CACJ,GADWA,CACX,EADoB,IACpB,EAAAA,CAAA,EAASrnB,CAAT,EAAkBsnB,CAAA,CAAS,GAAT,CAAeE,EAAA,CAAUn3B,CAAV,CAAa,CAAb,CAAf,CAAiC,GAAjC,CAAwC,EAA1D,EAAgE,GAEpE,EAAAg3B,CAAA,EAAS,GAAT,CAAe7C,CAAA,CAAA/kB,CAAA,CAAcsnB,CAAA,CAAMC,CAAN,CAAe32B,CAAf,CAAd,CAAiC+2B,CAAjC,CAEnB3nB,EAAAuF,EAAA,CAAYqiB,CAAZ,EAAqBH,CAAA,CAAQ,IAAR,CAAe,EAApC,EApBA,CAHR,CAmCA1iB,CAAA0B,GAAA,CAAAA,QAAO,CAAClN,CAAD,CAAOmf,CAAP,CACP,CACI,GAAI,CAACA,CAAL,CACI,GAAI,CAACnf,CAAL,CACI,IAAAie,MAAA,EADJ,KAGI,IAAI,CAAC,IAAAoB,QAAA,CAAarf,CAAb,CAAL,CAAyB,MAAO,CAAA,CAGxC,OAAO,CAAA,CARX,CAmBAwL;CAAA2B,GAAA,CAAAA,QAAS,CAACC,CAAD,CACT,CACI,MAAOA,EAAA,CAAO,IAAAkS,KAAA,EAAP,CAAqB,CAAA,CADhC,CASA9T,EAAAyS,MAAA,CAAAA,QAAK,EACL,CACI,IAAA2O,EAAAC,GAAA,CApwGYtR,GAqwGZ4R,GAAA,CAAA,IAAAzmB,EAAA,CAAkB,IAAAkmB,EAAA1pB,GAAlB,CAAmC,GAAnC,CAAwC,EAAxC,CAA4C,CAAA,CAA5C,CAFJ,CAaAsI,EAAA8T,KAAA,CAAAA,QAAI,EACJ,CACI,IAAIC,EAAQ,IAAIC,CAAJ,CAAU,IAAV,CACZD,EAAAE,IAAA,CAAU,CAAV,CAAa,CACT,IAAAmN,EAAAC,GADS,CAAb,CAGA,OAAOtN,EAAAvf,KAAA,EALX,CAiBAwL,EAAA6T,QAAA,CAAAA,QAAO,CAACrf,CAAD,CACP,CAKI,CAAA,CAAAyuB,EAAA,CAEIzuB,CAAA,CAAK,CAAL,CAFJ,CACI,KAAA4sB,EAAAC,GADJ,CAAA,CAAA,KAAA,EAAA,MAIA,OAAO,CAAA,CATX,CAuCArhB,EAAAkjB,GAAA,CAAAA,QAAO,EACP,CAMI,MAAO,KAAA9B,EAAAC,GANX,CAgBArhB,EAAAmjB,GAAA,CAAAA,QAAQ,CAAC3uB,CAAD,CACR,CAMI,IAAA4sB,EAAAC,GAAA,CAAgB7sB,CAAhB,CAj2GYub,GAk2GN,KAAAqR,EAAAC,GAAN,CAp2GYtR,EAo2GZ,EAA0CqT,EAAA,CAAA,IAAAloB,EAAA,CAAkB,IAAAkmB,EAAAM,GAAlB,CAP9C,CAiBA1hB,EAAAqjB,GAAA,CAAAA,QAAQ,EACR,CACI,MAAOC,GAAA,CAAA,IAAApoB,EAAA,CADX,CAWA8E,EAAAujB,GAAA,CAAAA,QAAS,CAAC/uB,CAAD,CACT,CACIgvB,EAAA,CAAA,IAAAtoB,EAAA,CAAkB1G,CAAlB,CAAyB,IAAzB,CAAmD,IAAA0G,EAAAuoB,EAAnD,CA1pHYC,GA0pHZ,CADJ,CAWA1jB,EAAA2jB,GAAA,CAAAA,QAAQ,EACR,CACI,MAAOC,GAAA,CAAA,IAAA1oB,EAAA,CADX,CAWA8E,EAAA6jB,GAAA,CAAAA,QAAQ,EACR,CACI,MAAOC,GAAA,CAAA,IAAA5oB,EAAA,CADX,CAWA8E;CAAA+jB,GAAA,CAAAA,QAAQ,EACR,CACI,MAAO,KAAA7oB,EAsiHAknB,EAviHX,CAWApiB,EAAAgkB,GAAA,CAAAA,QAAS,CAACxvB,CAAD,CACT,CACIyvB,EAAA,CAAA,IAAA/oB,EAAA,CAAiB1G,CAAjB,CADJ,CAaAwL,EAAAkkB,GAAA,CAAAA,QAAU,CAACpN,CAAD,CACV,CACQqN,CAAAA,CAAQrN,CAARqN,EAAgB,CAAhBA,CAAqB,EACzB,KAAI3vB,EAAO,IAAA0G,EAAAonB,GAAA,CAD0B6B,CAC1B,EADkC,CAClC,CACX,OAAQA,EAAD,CAAQ,CAAR,CAAa3vB,CAAb,EAAqB,EAArB,CAA4BA,CAA5B,CAAmC,KAH9C,CAeAwL,EAAAokB,GAAA,CAAAA,QAAW,CAAC5vB,CAAD,CAAOsiB,CAAP,CACX,CACQqN,CAAAA,CAAQrN,CAARqN,EAAgB,CAAhBA,CAAqB,EAAzB,KAA+B3E,EAAM2E,CAAN3E,EAAc,CAEzC,KAAAtkB,EAAAonB,GAAA,CAAoB9C,CAApB,CAAA,CADA2E,CAAJ,CAAW,CAAX,CACgC,IAAAjpB,EAAAonB,GAAA,CAAoB9C,CAApB,CADhC,CAC2D,KAD3D,EACuEhrB,CADvE,CAC8E,EAD9E,GACyF,EADzF,CAGgC,IAAA0G,EAAAonB,GAAA,CAAoB9C,CAApB,CAHhC,CAG2D,MAH3D,CAGuEhrB,CAHvE,CAG8E,KALlF,CAgBAwL,EAAAqkB,GAAA,CAAAA,QAAS,CAACvN,CAAD,CACT,CAEI,MAAO,KAAA5b,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,CADIpL,CACJ,EADY,CACZ,CADiB,CACjB,CAFX,CAYA9W,EAAAskB,GAAA,CAAAA,QAAU,CAAC9vB,CAAD,CAAOsiB,CAAP,CACV,CAEI,IAAA5b,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,CADWpL,CACX,EADmB,CACnB,CADwB,CACxB,CAAA,CAA2BtiB,CAA3B,CAAkC,KAFtC,CAYAwL,EAAAukB,GAAA,CAAAA,QAAS,CAACzN,CAAD,CACT,CAEI,MAAO,KAAA5b,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,EADKpL,CACL,EADa,CACb,CADkB,CAClB,EADuB,CACvB,CAFX,CAYA9W,EAAAwkB,GAAA,CAAAA,QAAU,CAAChwB,CAAD,CAAOsiB,CAAP,CACV,CAEI,IAAA5b,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,EADYpL,CACZ,EADoB,CACpB,CADyB,CACzB,EAD8B,CAC9B,CAAA,CAA2BtiB,CAA3B,CAAkC,KAFtC,CAYAwL,EAAAykB,GAAA,CAAAA,QAAS,CAAC3N,CAAD,CACT,CAEI,MAAO,KAAA5b,EAAAinB,EAAA,CAAiB,CAAjB,CAAA,CADIrL,CACJ,EADY,CACZ,CADiB,CACjB,CAFX,CAYA9W;CAAA0kB,GAAA,CAAAA,QAAU,CAAClwB,CAAD,CAAOsiB,CAAP,CACV,CACQ0I,CAAAA,CAAO1I,CAAP0I,EAAe,CAAfA,CAAoB,CACxB,KAAAtkB,EAAAinB,EAAA,CAAiB,CAAjB,CAAA,CAAoB3C,CAApB,CAAA,CAA2BhrB,CAC3B,KAAA0G,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,CAAoB1C,CAApB,CAAA,EAA4B,KAHhC,CAcAxf,EAAA2kB,GAAA,CAAAA,QAAS,CAAC7N,CAAD,CACT,CAEI,MAAO,KAAA5b,EAAAinB,EAAA,CAAiB,CAAjB,CAAA,EADKrL,CACL,EADa,CACb,CADkB,CAClB,EADuB,CACvB,CAFX,CAYA9W,EAAA4kB,GAAA,CAAAA,QAAU,CAACpwB,CAAD,CAAOsiB,CAAP,CACV,CACQ0I,CAAAA,EAAQ1I,CAAR0I,EAAgB,CAAhBA,CAAqB,CAArBA,EAA0B,CAC9B,KAAAtkB,EAAAinB,EAAA,CAAiB,CAAjB,CAAA,CAAoB3C,CAApB,CAAA,CAA2BhrB,CAC3B,KAAA0G,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,CAAoB1C,CAApB,CAAA,EAA4B,KAHhC,CAaAxf,EAAA6kB,GAAA,CAAAA,QAAS,CAAC/N,CAAD,CACT,CAEI,MAAO,KAAA5b,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,CADIpL,CACJ,EADY,CACZ,CADiB,CACjB,CAFX,CAYA9W,EAAA8kB,GAAA,CAAAA,QAAU,CAACtwB,CAAD,CAAOsiB,CAAP,CACV,CAEI,IAAA5b,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,CADWpL,CACX,EADmB,CACnB,CADwB,CACxB,CAAA,CAA2BtiB,CAA3B,CAAkC,KAFtC,CAYAwL,EAAA+kB,GAAA,CAAAA,QAAS,CAACjO,CAAD,CACT,CAEI,MAAO,KAAA5b,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,EADKpL,CACL,EADa,CACb,CADkB,CAClB,EADuB,CACvB,CAFX,CAYA9W,EAAAglB,GAAA,CAAAA,QAAU,CAACxwB,CAAD,CAAOsiB,CAAP,CACV,CAEI,IAAA5b,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,EADYpL,CACZ,EADoB,CACpB,CADyB,CACzB,EAD8B,CAC9B,CAAA,CAA2BtiB,CAA3B,CAAkC,KAFtC,CAYAwL,EAAAilB,GAAA,CAAAA,QAAS,CAACnO,CAAD,CACT,CAEI,MAAO,KAAA5b,EAAAinB,EAAA,CAAiB,CAAjB,CAAA,CADIrL,CACJ,EADY,CACZ,CADiB,CACjB,CAFX,CAYA9W,EAAAklB,GAAA,CAAAA,QAAU,CAAC1wB,CAAD,CAAOsiB,CAAP,CACV,CACQ0I,CAAAA,CAAO1I,CAAP0I,EAAe,CAAfA,CAAoB,CACxB,KAAAtkB,EAAAinB,EAAA,CAAiB,CAAjB,CAAA,CAAoB3C,CAApB,CAAA,CAA2BhrB,CAC3B,KAAA0G,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,CAAoB1C,CAApB,CAAA,EAA4B,KAHhC,CAcAxf;CAAAmlB,GAAA,CAAAA,QAAS,CAACrO,CAAD,CACT,CAEI,MAAO,KAAA5b,EAAAinB,EAAA,CAAiB,CAAjB,CAAA,EADKrL,CACL,EADa,CACb,CADkB,CAClB,EADuB,CACvB,CAFX,CAYA9W,EAAAolB,GAAA,CAAAA,QAAU,CAAC5wB,CAAD,CAAOsiB,CAAP,CACV,CACQ0I,CAAAA,EAAQ1I,CAAR0I,EAAgB,CAAhBA,CAAqB,CAArBA,EAA0B,CAC9B,KAAAtkB,EAAAinB,EAAA,CAAiB,CAAjB,CAAA,CAAoB3C,CAApB,CAAA,CAA2BhrB,CAC3B,KAAA0G,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,CAAoB1C,CAApB,CAAA,EAA4B,KAHhC,CAaAxf,EAAAqlB,GAAA,CAAAA,QAAS,CAACvO,CAAD,CACT,CAEI,MAAO,KAAA5b,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,CADIpL,CACJ,EADY,CACZ,CADiB,CACjB,CAFX,CAYA9W,EAAAslB,GAAA,CAAAA,QAAU,CAAC9wB,CAAD,CAAOsiB,CAAP,CACV,CAEI,IAAA5b,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,CADWpL,CACX,EADmB,CACnB,CADwB,CACxB,CAAA,CAA2BtiB,CAA3B,CAAkC,KAFtC,CAYAwL,EAAAulB,GAAA,CAAAA,QAAS,CAACzO,CAAD,CACT,CAEI,MAAO,KAAA5b,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,EADKpL,CACL,EADa,CACb,CADkB,CAClB,EADuB,CACvB,CAFX,CAYA9W,EAAAwlB,GAAA,CAAAA,QAAU,CAAChxB,CAAD,CAAOsiB,CAAP,CACV,CAEI,IAAA5b,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,EADYpL,CACZ,EADoB,CACpB,CADyB,CACzB,EAD8B,CAC9B,CAAA,CAA2BtiB,CAA3B,CAAkC,KAFtC,CAYAwL,EAAAylB,GAAA,CAAAA,QAAS,CAAC3O,CAAD,CACT,CAEI,MAAO,KAAA5b,EAAAinB,EAAA,CAAiB,CAAjB,CAAA,CADIrL,CACJ,EADY,CACZ,CADiB,CACjB,CAFX,CAYA9W,EAAA0lB,GAAA,CAAAA,QAAU,CAAClxB,CAAD,CAAOsiB,CAAP,CACV,CACQ0I,CAAAA,CAAO1I,CAAP0I,EAAe,CAAfA,CAAoB,CACxB,KAAAtkB,EAAAinB,EAAA,CAAiB,CAAjB,CAAA,CAAoB3C,CAApB,CAAA,CAA2BhrB,CAC3B,KAAA0G,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,CAAoB1C,CAApB,CAAA,EAA4B,KAHhC,CAcAxf,EAAA2lB,GAAA,CAAAA,QAAS,CAAC7O,CAAD,CACT,CAEI,MAAO,KAAA5b,EAAAinB,EAAA,CAAiB,CAAjB,CAAA,EADKrL,CACL,EADa,CACb,CADkB,CAClB,EADuB,CACvB,CAFX,CAYA9W;CAAA4lB,GAAA,CAAAA,QAAU,CAACpxB,CAAD,CAAOsiB,CAAP,CACV,CACQ0I,CAAAA,EAAQ1I,CAAR0I,EAAgB,CAAhBA,CAAqB,CAArBA,EAA0B,CAC9B,KAAAtkB,EAAAinB,EAAA,CAAiB,CAAjB,CAAA,CAAoB3C,CAApB,CAAA,CAA2BhrB,CAC3B,KAAA0G,EAAAgnB,EAAA,CAAiB,CAAjB,CAAA,CAAoB1C,CAApB,CAAA,EAA4B,KAHhC,CAaAxf,EAAA6lB,GAAA,CAAAA,QAAS,CAAC/O,CAAD,CACT,CAEcA,CAAN0I,EAAa,CAMjB,OALI,KAAAtkB,EAAA4qB,EAAJtxB,CAnvIYuxB,IAmvIZvxB,CACW,IAAA0G,EAAA8qB,GAAA,CAAiBxG,CAAjB,CADXhrB,CAGW,IAAA0G,EAAA4c,EAAA,CAAiB0H,CAAjB,CANf,CAkBAxf,EAAAimB,GAAA,CAAAA,QAAU,CAACzxB,CAAD,CAAOsiB,CAAP,CACV,CACcA,CAAN0I,EAAa,CACb,KAAAtkB,EAAA4qB,EAAJ,CArwIYC,IAqwIZ,CACI,IAAA7qB,EAAA8qB,GAAA,CAAiBxG,CAAjB,CADJ,CAC4BhrB,CAD5B,CAGI,IAAA0G,EAAA4c,EAAA,CAAiB0H,CAAjB,CAHJ,CAG4BhrB,CALhC,CAgBAwL,EAAAkmB,GAAA,CAAAA,QAAY,EACZ,CAOI,MALM,KAAAhrB,EAAA4qB,EAANtxB,CAjxIYuxB,KAixIZvxB,CAGW,IAAA0G,EAAAirB,EAAA,CAAsB,CAAtB,CAHX3xB,CACW,IAAA0G,EAAA4c,EAAA,CAAiB,CAAjB,CAHf,CAiBA9X,EAAAomB,GAAA,CAAAA,QAAa,CAAC5xB,CAAD,CACb,CACU,IAAA0G,EAAA4qB,EAAN,CAlyIYC,KAkyIZ,CAGI,IAAA7qB,EAAAirB,EAAA,CAAsB,CAAtB,CAHJ,CAG+B3xB,CAH/B,CACI,IAAA0G,EAAA4c,EAAA,CAAiB,CAAjB,CADJ,CAC0BtjB,CAF9B,CAeAwL,EAAAqmB,GAAA,CAAAA,QAAY,EACZ,CACI,MAAO,KAAAnrB,EAAA4c,EAAA,CAAiB,CAAjB,CADX,CAWA9X,EAAAsmB,GAAA,CAAAA,QAAa,CAAC9xB,CAAD,CACb,CACI,IAAA0G,EAAA4c,EAAA,CAAiB,CAAjB,CAAA,CAAsBtjB,CAD1B,CAWAwL,EAAAumB,GAAA,CAAAA,QAAS,CAACzP,CAAD,CACT,CAEcA,CAAN0I,EAAa,CAMjB,OALI,KAAAtkB,EAAA4qB,EAAJtxB,CAj1IYuxB,IAi1IZvxB,CACW,IAAA0G,EAAA4c,EAAA,CAAiB0H,CAAjB,CADXhrB,CAGW,IAAA0G,EAAA8qB,GAAA,CAAiBxG,CAAjB,CANf,CAkBAxf;CAAAwmB,GAAA,CAAAA,QAAU,CAAChyB,CAAD,CAAOsiB,CAAP,CACV,CACcA,CAAN0I,EAAa,CACb,KAAAtkB,EAAA4qB,EAAJ,CAn2IYC,IAm2IZ,CACI,IAAA7qB,EAAA4c,EAAA,CAAiB0H,CAAjB,CADJ,CAC4BhrB,CAD5B,CAGI,IAAA0G,EAAA8qB,GAAA,CAAiBxG,CAAjB,CAHJ,CAG4BhrB,CALhC,CAgBAwL,EAAAymB,GAAA,CAAAA,QAAW,EACX,CAOI,MA74IYC,EAw4IZlyB,GAAM,IAAA0G,EAAA4qB,EAANtxB,CA/2IYuxB,KA+2IZvxB,GAt2IYuxB,EAs2IZvxB,CACW,IAAA0G,EAAA4c,EAAA,CAAiB,CAAjB,CADXtjB,CAGW,IAAA0G,EAAAirB,EAAA,CAAsB,CAAtB,CALf,CAiBAnmB,EAAA2mB,GAAA,CAAAA,QAAY,CAACnyB,CAAD,CACZ,CAx5IgBkyB,CAy5IZ,GAAM,IAAAxrB,EAAA4qB,EAAN,CAh4IYC,KAg4IZ,GAv3IYA,EAu3IZ,CACI,IAAA7qB,EAAA4c,EAAA,CAAiB,CAAjB,CADJ,CAC0BtjB,CAD1B,CAGI,IAAA0G,EAAAirB,EAAA,CAAsB,CAAtB,CAHJ,CAG+B3xB,CAJnC,CAeAwL,EAAA4mB,GAAA,CAAAA,QAAU,EACV,CAOI,MA76IYF,EAw6IZlyB,GAAM,IAAA0G,EAAA4qB,EAANtxB,CAj5IYuxB,KAi5IZvxB,GAx4IYuxB,EAw4IZvxB,CACW,IAAA0G,EAAA4c,EAAA,CAAiB,CAAjB,CADXtjB,CAGW,IAAA0G,EAAAirB,EAAA,CAAsB,CAAtB,CALf,CAiBAnmB,EAAA6mB,GAAA,CAAAA,QAAW,CAACryB,CAAD,CACX,CAx7IgBkyB,CAy7IZ,GAAM,IAAAxrB,EAAA4qB,EAAN,CAl6IYC,KAk6IZ,GAz5IYA,EAy5IZ,CACI,IAAA7qB,EAAA4c,EAAA,CAAiB,CAAjB,CADJ,CAC0BtjB,CAD1B,CAGI,IAAA0G,EAAAirB,EAAA,CAAsB,CAAtB,CAHJ,CAG+B3xB,CAJnC,CAeAwL,EAAA8mB,GAAA,CAAAA,QAAQ,CAAChQ,CAAD,CACR,CAEI,MAAO,KAAA5b,EAAA6rB,GAAA,CADIjQ,CACJ,CAriIKS,KAqiIL,EADiC,CACjC,CAFX,CAYAvX,EAAAgnB,GAAA,CAAAA,QAAS,CAACxyB,CAAD,CAAOsiB,CAAP,CACT,CAEI,IAAA5b,EAAA6rB,GAAA,CADWjQ,CACX,CAljIYS,KAkjIZ,EADwC,CACxC,CAAA,CAA4B/iB,CAFhC,CAuBAwL,EAAAinB,GAAA,CAAAA,QAAQ,CAACnQ,CAAD,CACR,CACI,MAhkIYS,MAgkIL,EAAAT,CAAA,EAA8B+H,EAAA,CAAA,IAAA1jB,EAAA,CAA9B,EAA+E,CAA/E,EAAoF,CAApF,CAAyF,CADpG,CAWA6E;CAAAknB,GAAA,CAAAA,QAAS,EACT,EAYAlnB,EAAAmnB,GAAA,CAAAA,QAAS,EACT,CACI,MAAO,EADX,CAaAnnB,EAAAonB,GAAA,CAAAA,QAAU,EACV,EAUApnB,EAAAqnB,GAAA,CAAAA,QAAU,EACV,CACI,MAAO,KAAAnsB,EAAA+kB,EADX,CAWAjgB,EAAAsnB,GAAA,CAAAA,QAAW,EACX,CACI,IAAApsB,EAAA+kB,EAAA,CAAkB,CADtB,CAWAjgB,EAAAunB,GAAA,CAAAA,QAAO,EACP,CACI,MAAO,KAAArsB,EAAAssB,GADX,CAWAxnB,EAAAynB,GAAA,CAAAA,QAAQ,CAACjzB,CAAD,CAAOsiB,CAAP,CACR,CACUA,CAAN,CAAa,CAAb,GACItiB,CADJ,EACY,GADZ,CAGA,KAAA0G,EAAAssB,GAAA,CAAkBhzB,CAJtB,CAeAwL,EAAA0nB,GAAA,CAAAA,QAAO,CAAC5Q,CAAD,CAAOqB,CAAP,CACP,CACI,MAAIA,EAAJ,CAAsB,CAAtB,CACO,IAAAjd,EA0qHAysB,GA5qHX,CAYA3nB,EAAA4nB,GAAA,CAAAA,QAAQ,CAACpzB,CAAD,CACR,CACIqzB,EAAA,CAAA,IAAA3sB,EAAA,CAAgB1G,CAAhB,CADJ,CAYAwL,EAAA8nB,GAAA,CAAAA,QAAO,CAAChR,CAAD,CAAOqB,CAAP,CACP,CACI,MAAIA,EAAJ,CAAsB,CAAtB,CACO,IAAAjd,EA0nHA6sB,GA3nHP,CA2nHqB,KA5nHzB,CAYA/nB,EAAAgoB,GAAA,CAAAA,QAAQ,CAACxzB,CAAD,CACR,CACI,IAAA0G,EAynHA6sB,GAAA,CAznHgBvzB,CAynHhB,CAAuB,GA1nH3B,CAWAwL,EAAAioB,GAAA,CAAAA,QAAO,EACP,CACI,MAAOC,GAAA,CAAA,IAAAhtB,EAAA,CADX,CAWA8E,EAAAmoB,GAAA,CAAAA,QAAQ,CAAC3zB,CAAD,CACR,CAaI4zB,EAAA,CAAA,IAAAltB,EAAA,CAAgB1G,CAAhB,CAbJ,CAuBAwL,EAAAqoB,GAAA,CAAAA,QAAY,CAAC7zB,CAAD,CAAOsiB,CAAP,CACZ,CACQhV,CAAA,CAAAA,IAAA,CAAJ,EACIE,CAAA,CAAAA,IAAA,CAAkB,eAAlB,CAAoCqT,CAAA,CAAUyB,CAAV,CAApC,CAAsD,KAAtD,CAA8DzB,CAAA,CAAU7gB,CAAV,CAA9D,CAA+E,CAAA,CAA/E,CAAqF,CAAA,CAArF,CAFR,CAkDJ;IAAA,EAA6B,EAA7B,CAAAqtB,IAA6B,CAAA,CA18ITtK,KA08IS,CAAA,CACe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAA4zB,GAAb,CAAgDhD,CAAA5wB,UAAA8zB,GAAhD,CAAoF,QAApF,CAAgG,EAAhG,CAxvJ5BkE,IAwvJ4B,CADf,CAAA,CAAA,CAz8IT/Q,KAy8IS,CAAA,CAEe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAA+zB,GAAb,CAAgDnD,CAAA5wB,UAAAg0B,GAAhD,CAAoF,OAApF,CAAgG,CAAhG,CA1vJ5BiE,IA0vJ4B,CAv5H5BnZ,EAu5H4B,CAFf,CAAA,CAAA,CAj8ITmI,KAi8IS,CAAA,CAGe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAi0B,GAAb,CAAgDrD,CAAA5wB,UAAAk0B,GAAhD,CAAoF,OAApF,CAAgG,CAAhG,CA3vJ5B+D,IA2vJ4B,CAx5H5BnZ,EAw5H4B,CAHf,CAAA,CAAA,CAz7ITmI,KAy7IS,CAAA,CAIe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAm0B,GAAb,CAAgDvD,CAAA5wB,UAAAo0B,GAAhD,CAAoF,OAApF,CAAgG,CAAhG,CA5vJ5B6D,IA4vJ4B,CAz5H5BnZ,EAy5H4B,CAJf,CAAA,CAAA,CAj7ITmI,KAi7IS,CAAA,CAKe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAq0B,GAAb,CAAgDzD,CAAA5wB,UAAAs0B,GAAhD,CAAoF,OAApF,CAAgG,CAAhG,CA7vJ5B2D,IA6vJ4B,CA15H5BnZ,EA05H4B,CALf,CAAA,CAAA,CAz6ITmI,KAy6IS,CAAA,CAMe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAu0B,GAAb,CAAgD3D,CAAA5wB,UAAAw0B,GAAhD,CAAoF,OAApF,CAAgG,CAAhG,CA/vJ5B1N,IA+vJ4B,CA35H5BhI,EA25H4B,CANf,CAAA,CAAA,CAj6ITmI,KAi6IS,CAAA,CAOe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAy0B,GAAb,CAAgD7D,CAAA5wB,UAAA00B,GAAhD,CAAoF,OAApF,CAAgG,CAAhG,CA/vJ5BuD,IA+vJ4B,CA55H5BnZ,EA45H4B,CAPf,CAAA,CAAA,CAz5ITmI,KAy5IS,CAAA;AAQe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAA20B,GAAb,CAAgD/D,CAAA5wB,UAAA40B,GAAhD,CAAoF,OAApF,CAAgG,CAAhG,CAjwJ5B9N,IAiwJ4B,CA75H5BhI,EA65H4B,CARf,CAAA,CAAA,CAj5ITmI,KAi5IS,CAAA,CASe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAA60B,GAAb,CAAgDjE,CAAA5wB,UAAA80B,GAAhD,CAAoF,OAApF,CAAgG,CAAhG,CAjwJ5BmD,IAiwJ4B,CA95H5BnZ,EA85H4B,CATf,CAAA,CAAA,CAz4ITmI,KAy4IS,CAAA,CAUe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAyzB,GAAb,CAAgD7C,CAAA5wB,UAAA0zB,GAAhD,CAAoF,MAApF,CAAgG,CAAhG,CAlwJ5BuE,IAkwJ4B,CA/5H5BnZ,EA+5H4B,CAVf,CAAA,CAAA,CAx3ITmI,KAw3IS,CAAA,CAWe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAA4yB,GAAb,CAAgDhC,CAAA5wB,UAAA6yB,GAAhD,CAAoF,KAApF,CAXf,CAAA,CAAA,CA92IT5L,KA82IS,CAAA,CAYe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAA+yB,GAAb,CAAgDnC,CAAA5wB,UAAAizB,GAAhD,CAAoF,MAApF,CAAgG,CAAhG,CArwJ5BnM,IAqwJ4B,CAj6H5BhI,EAi6H4B,CAZf,CAAA,CAAA,CA72ITmI,KA62IS,CAAA,CAae,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAqzB,GAAb,CAAgDzC,CAAA5wB,UAAA+3B,GAAhD,CAAoF,MAApF,CAAgG,CAAhG,CArwJ5BE,IAqwJ4B,CAl6H5BnZ,EAk6H4B,CAbf,CAAA,CAAA,CA52ITmI,KA42IS,CAAA,CAce,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAuzB,GAAb,CAAgD3C,CAAA5wB,UAAA+3B,GAAhD,CAAoF,MAApF,CAAgG,CAAhG,CAvwJ5BjR,IAuwJ4B,CAn6H5BhI,EAm6H4B,CAdf,CAAA,CAAA,CA32ITmI,KA22IS,CAAA,CAee,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAA+0B,GAAb,CAAgDnE,CAAA5wB,UAAAg1B,GAAhD;AAAoF,OAApF,CAAgG,CAAhG,CAxwJ5BlO,IAwwJ4B,CAp6H5BhI,EAo6H4B,CAff,CAAA,CAAA,CAn2ITmI,KAm2IS,CAAA,CAgBe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAi1B,GAAb,CAAgDrE,CAAA5wB,UAAAk1B,GAAhD,CAAoF,OAApF,CAAgG,CAAhG,CAxwJ5B+C,IAwwJ4B,CAr6H5BnZ,EAq6H4B,CAhBf,CAAA,CAAA,CA31ITmI,KA21IS,CAAA,CAiBe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAm1B,GAAb,CAAgDvE,CAAA5wB,UAAAo1B,GAAhD,CAAoF,OAApF,CAAgG,CAAhG,CA1wJ5BtO,IA0wJ4B,CAt6H5BhI,EAs6H4B,CAjBf,CAAA,CAAA,CAn1ITmI,KAm1IS,CAAA,CAkBe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAq1B,GAAb,CAAgDzE,CAAA5wB,UAAAs1B,GAAhD,CAAoF,OAApF,CAAgG,CAAhG,CA1wJ5B2C,IA0wJ4B,CAv6H5BnZ,EAu6H4B,CAlBf,CAAA,CAAA,CA30ITmI,KA20IS,CAAA,CAmBe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAu1B,GAAb,CAAgD3E,CAAA5wB,UAAA21B,GAAhD,CAAoF,QAApF,CAnBf,CAAA,CAAA,CA10IT1O,KA00IS,CAAA,CAoBe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAu1B,GAAb,CAAgD3E,CAAA5wB,UAAA21B,GAAhD,CAAoF,QAApF,CApBf,CAAA,CAAA,CAz0IT1O,KAy0IS,CAAA,CAqBe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAu1B,GAAb,CAAgD3E,CAAA5wB,UAAA21B,GAAhD,CAAoF,QAApF,CArBf,CAAA,CAAA,CAx0IT1O,KAw0IS,CAAA,CAsBe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAu1B,GAAb,CAAgD3E,CAAA5wB,UAAA21B,GAAhD,CAAoF,QAApF,CAtBf,CAAA,CAAA,CAv0IT1O,KAu0IS,CAAA,CAuBe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAu1B,GAAb;AAAgD3E,CAAA5wB,UAAA21B,GAAhD,CAAoF,QAApF,CAvBf,CAAA,CAAA,CAt0IT1O,KAs0IS,CAAA,CAwBe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAu1B,GAAb,CAAgD3E,CAAA5wB,UAAA21B,GAAhD,CAAoF,QAApF,CAxBf,CAAA,CAAA,CAr0IT1O,KAq0IS,CAAA,CAyBe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAA41B,GAAb,CAAgDhF,CAAA5wB,UAAA81B,GAAhD,CAAoF,UAApF,CAzBf,CAAA,CAAA,CAp0IT7O,KAo0IS,CAAA,CA0Be,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAA+1B,GAAb,CAAgDnF,CAAA5wB,UAAAg2B,GAAhD,CAAoF,UAApF,CA1Bf,CAAA,CAAA,CAn0IT/O,KAm0IS,CAAA,CA2Be,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAi2B,GAAb,CAAgDrF,CAAA5wB,UAAAk2B,GAAhD,CAAoF,QAApF,CAAgG,CAAhG,CAnxJ5B+B,IAmxJ4B,CA3Bf,CAAA,CAAA,CAl0IThR,KAk0IS,CAAA,CA4Be,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAi2B,GAAb,CAAgDrF,CAAA5wB,UAAAk2B,GAAhD,CAAoF,QAApF,CAAgG,CAAhG,CApxJ5B+B,IAoxJ4B,CA5Bf,CAAA,CAAA,CAj0IThR,KAi0IS,CAAA,CA6Be,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAi2B,GAAb,CAAgDrF,CAAA5wB,UAAAk2B,GAAhD,CAAoF,QAApF,CAAgG,CAAhG,CArxJ5B+B,IAqxJ4B,CA7Bf,CAAA,CAAA,CAh0IThR,KAg0IS,CAAA,CA8Be,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAi2B,GAAb,CAAgDrF,CAAA5wB,UAAAk2B,GAAhD,CAAoF,QAApF,CAAgG,CAAhG,CAtxJ5B+B,IAsxJ4B,CA9Bf,CAAA,CAAA,CA/zIThR,KA+zIS,CAAA,CA+Be,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAi2B,GAAb;AAAgDrF,CAAA5wB,UAAAk2B,GAAhD,CAAoF,QAApF,CAAgG,CAAhG,CAvxJ5B+B,IAuxJ4B,CA/Bf,CAAA,CAAA,CA9zIThR,KA8zIS,CAAA,CAgCe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAi2B,GAAb,CAAgDrF,CAAA5wB,UAAAk2B,GAAhD,CAAoF,QAApF,CAAgG,CAAhG,CAxxJ5B+B,IAwxJ4B,CAhCf,CAAA,CAAA,CA7zIThR,KA6zIS,CAAA,CAiCe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAm2B,GAAb,CAAgDvF,CAAA5wB,UAAAq2B,GAAhD,CAAoF,SAApF,CAAgG,CAAhG,CAzxJ5B4B,IAyxJ4B,CAjCf,CAAA,CAAA,CA5zIThR,KA4zIS,CAAA,CAkCe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAs2B,GAAb,CAAgD1F,CAAA5wB,UAAAu2B,GAAhD,CAAoF,QAApF,CAAgG,CAAhG,CA1xJ5B0B,IA0xJ4B,CAlCf,CAAA,CAAA,CAvzIThR,KAuzIS,CAAA,CAmCe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAw2B,GAAb,CAAgD5F,CAAA5wB,UAAA02B,GAAhD,CAAoF,MAApF,CAAgG,CAAhG,CA1xJ5BsB,IA0xJ4B,CAnCf,CAAA,CAAA,CA9yIT/Q,KA8yIS,CAAA,CAoCe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAA22B,GAAb,CAAgD/F,CAAA5wB,UAAA42B,GAAhD,CAAoF,OAApF,CAAgG,CAAhG,CA3xJ5BoB,IA2xJ4B,CApCf,CAAA,CAAA,CA7yIT/Q,KA6yIS,CAAA,CAqCe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAA22B,GAAb,CAAgD/F,CAAA5wB,UAAA42B,GAAhD,CAAoF,OAApF,CAAgG,CAAhG,CA5xJ5BoB,IA4xJ4B,CArCf,CAAA,CAAA,CA5yIT/Q,KA4yIS,CAAA,CAsCe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAA62B,GAAb,CAAgDjG,CAAA5wB,UAAA82B,GAAhD,CAAoF,OAApF,CAAgG,CAAhG,CA7xJ5BkB,IA6xJ4B,CAtCf,CAAA,CAAA,CA3yIT/Q,KA2yIS,CAAA;AAuCe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAA+2B,GAAb,CAAgDnG,CAAA5wB,UAAAg3B,GAAhD,CAAoF,KAApF,CAAgG,CAAhG,CA9xJ5BgB,IA8xJ4B,CAvCf,CAAA,CAAA,CA1yIT/Q,KA0yIS,CAAA,CAwCe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAi3B,GAAb,CAAgDrG,CAAA5wB,UAAAm3B,GAAhD,CAAoF,KAApF,CAAgG,CAAhG,CA/xJ5Ba,IA+xJ4B,CAxCf,CAAA,CAAA,CAzyIT/Q,KAyyIS,CAAA,CAyCe,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAo3B,GAAb,CAAgDxG,CAAA5wB,UAAAs3B,GAAhD,CAAoF,KAApF,CAzCf,CAAA,CAAA,CAxyITrQ,KAwyIS,CAAA,CA0Ce,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAAw3B,GAAb,CAAgD5G,CAAA5wB,UAAA03B,GAAhD,CAAoF,KAApF,CA1Cf,CAAA,CAAA,CAvyITzQ,KAuyIS,CAAA,CA2Ce,CAAC,IAAD,CAAO,IAAP,CAAa2J,CAAA5wB,UAAA23B,GAAb,CAAgD/G,CAAA5wB,UAAA63B,GAAhD,CAAoF,KAApF,CA3Cf,CAAA,CAA7BtG,CAiDA5I;EAAA,CArFIZ,QAAW,EACX,CAEI,IADA,IAAImQ,EAAW3rB,CAAA,CAA6B0b,QAA7B,CAAuC5b,CAAvC,CAAuD,QAAvD,CAAf,CACS8rB,EAAU,CAAnB,CAAsBA,CAAtB,CAAgCD,CAAAz4B,OAAhC,CAAiD04B,CAAA,EAAjD,CAA4D,CACxD,IACIC,EAAUF,CAAA,CAASC,CAAT,CACVtH,KAAAA,EAAc3jB,EAAA,CAA4BkrB,CAA5B,CAClB,QAAOvH,CAAA,KAAP,EACA,KAAK,SAAL,CACII,CAAA,CAAS,IAAIL,CAAJ,CAAgBC,CAAhB,CACTxI,GAAA,CAAgC4I,CAAhC,CAAwCmH,CAAxC,CACA,MACJ,MAAK,MAAL,CACInH,CAAA,CAAS,IAAI7R,EAAJ,CAASyR,CAAT,CACTxI,GAAA,CAAgC4I,CAAhC,CAAwCmH,CAAxC,CACA,MACJ,MAAK,MAAL,CACInH,CAAA,CAAS,IAAInZ,EAAJ,CAAS+Y,CAAT,CACTxI,GAAA,CAAgC4I,CAAhC,CAAwCmH,CAAxC,CACA,MACJ,MAAK,MAAL,CACInH,CAAA,CAAS,IAAIhd,CAAJ,CAAS4c,CAAT,CACTxI,GAAA,CAAgC4I,CAAhC,CAAwCmH,CAAxC,CACA,MACJ,MAAK,MAAL,CACInH,CACA,CADS,IAAI7V,EAAJ,CAASyV,CAAT,CACT,CAAAxI,EAAA,CAAgC4I,CAAhC,CAAwCmH,CAAxC,CAnBJ,CAJwD,CAFhE,CAoFJ,CA2DI7uB;QAzCEkhB,EAyCS,CAAC5f,CAAD,CAAM2b,CAAN,CAAYuF,CAAZ,CAAkBN,CAAlB,CAAwB5pB,CAAxB,CAA8B6pB,CAA9B,CACX,CAEI,IAAA7gB,EAAA,CAAWA,CACX,KAAAlB,GAAA,CAAW0uB,EAAX,EAAkC,CAClC,KAAAlN,EAAA,CAAW,IAEX,KAAA3E,EAAA,CAAYA,CACZ,KAAAuF,GAAA,CAAYA,CACZ,KAAAN,KAAA,CAAYA,CAAZ,EAAoB,CACpB,KAAA5pB,KAAA,CAAYA,CAAZ,EAAoBy2B,EACpB,KAAAzK,EAAA,CAAkBhsB,CAAlB,EAA0B02B,EAE1B,KAAA5tB,EAAA,CADA,IAAA+gB,WACA,CADkB,IAElB,KAAAc,GAAA,CAAgB,IAAAY,EAAhB,CAAsC,IAAAoL,GACtC,KAAA5L,GAAA,CAAgB,IAAAO,EAAhB,CAAsC,IAAAsL,GACtC,KAAA1L,GAAA,CAAiB,IAAAO,EAAjB,CAAwC,IAAAQ,GACxC,KAAAb,GAAA,CAAiB,IAAAM,EAAjB,CAAwC,IAAAQ,GACxC,KAAAC,EAAA,CAAwB,IAAAL,EAAxB,CAAiD,CACjDhD,GAAA,CAAAA,IAAA,CAWA,KAAAuD,GAAA,CAAc,IAAAC,GAAd,CAAgC,CAAA,CAKhC,IAAK,IAAA1C,KAAL,CASA,GAAIC,CAAJ,CACI,IAAAA,WAIA,CAJkBA,CAIlB,CAHA3wB,CAGA,CA19EG,CAAC,IAAD,CAAO,CAAP,CA09EH,CAFA,IAAAowB,EAEA,CAFWpwB,CAAA,CAAE,CAAF,CAEX,CAAA29B,EAAA,CAAAA,IAAA,CAAehN,CA78EZ9B,GA68EH,CALJ,KAiBA,IAAInW,EAAJ,CACI,IAAAklB,EAUA,CAVc,IAAIjlB,WAAJ,CAAgB,IAAA+X,KAAhB,CAUd,CATA,IAAAmN,EASA,CATU,IAAIC,QAAJ,CAAa,IAAAF,EAAb,CAA0B,CAA1B,CAA6B,IAAAlN,KAA7B,CASV,CAHA,IAAA/mB,EAGA,CAHU,IAAIo0B,UAAJ,CAAe,IAAAH,EAAf,CAA4B,CAA5B,CAA+B,IAAAlN,KAA/B,CAGV,CAFA,IAAAsN,EAEA,CAFU,IAAIC,WAAJ,CAAgB,IAAAL,EAAhB;AAA6B,CAA7B,CAAgC,IAAAlN,KAAhC,EAA6C,CAA7C,CAEV,CADA,IAAAN,EACA,CADW,IAAI8N,UAAJ,CAAe,IAAAN,EAAf,CAA4B,CAA5B,CAA+B,IAAAlN,KAA/B,EAA4C,CAA5C,CACX,CAAAiN,EAAA,CAAAA,IAAA,CAAeQ,EAAA,CAAcC,EAAd,CAAuCC,EAAtD,CAXJ,KAYO,CAaCr+B,CAAA,CAAI,IAAAowB,EAAJ,CAAmB7mB,KAAJ,CAAU,IAAAmnB,KAAV,EAAuB,CAAvB,CAEnB,KAAKlwB,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBR,CAAA0E,OAAhB,CAA0BlE,CAAA,EAA1B,CAA+BR,CAAA,CAAEQ,CAAF,CAAA,CAAO,CACtCm9B,GAAA,CAAAA,IAAA,CAAeW,EAAf,CAhBG,CAtCP,IACIX,GAAA,CAAAA,IAAA,CAnCR,CAgKA,CAAA,CA/9SJ,CAAAY,UA+9SI5pB,EAAA8T,KAAA,CAAAA,QAAI,EACJ,CAAA,IACajoB,CACT,IAAI,IAAAmwB,WAAJ,CACI,IAAAP,EAAM,IADV,KAWK,IAAI1X,EAAJ,CAYD,IADA0X,CACK,CADK7mB,KAAJ,CAAU,IAAAmnB,KAAV,EAAuB,CAAvB,CACD,CAAAlwB,CAAA,CAAI,CAAT,CAAYA,CAAZ,CAAgB4vB,CAAA1rB,OAAhB,CAA4BlE,CAAA,EAA5B,CACI4vB,CAAA,CAAI5vB,CAAJ,CAAA,CAAS,IAAAq9B,EAAAW,SAAA,CAAiBh+B,CAAjB,EAAsB,CAAtB,CAAyB,CAAA,CAAzB,CAbZ,KAiBD4vB,EAAA,CAAM,IAAAA,EAEV,OAAOA,EAhCX,CA+CAzb;CAAA6T,QAAA,CAAAA,QAAO,CAAC4H,CAAD,CACP,CACI,GAAI,IAAAO,WAAJ,CACI,MAAe,KAAf,EAAQP,CAWZ,IAAIA,CAAJ,EAAW,IAAAM,KAAX,EAAwBN,CAAA1rB,OAAxB,EAAsC,CAAtC,CAAyC,CACrC,IAAIlE,CAUG,IAAIkY,EAAJ,CACH,IAAKlY,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgB4vB,CAAA1rB,OAAhB,CAA4BlE,CAAA,EAA5B,CACI,IAAAq9B,EAAAY,SAAA,CAAiBj+B,CAAjB,EAAsB,CAAtB,CAAyB4vB,CAAA,CAAI5vB,CAAJ,CAAzB,CAAiC,CAAA,CAAjC,CAFD,KAKH,KAAA4vB,EAAA,CAAWA,CAGf,OADA,KAAA+C,GACA,CADc,CAAA,CAlBuB,CAqBzC,MAAO,CAAA,CAlCX,CAuFAwK,SAAA,GAAS,CAATA,CAAS,CAAClwB,CAAD,CACT,CACSA,CAAL,GAEIA,CAFJ,CAEUixB,EAFV,CAIAC,GAAA,CAAAA,CAAA,CAAmBlxB,CAAnB,CANWmxB,IAAAA,EAMX,CACAC,GAAA,CAAAA,CAAA,CAAoBpxB,CAApB,CAPWmxB,IAAAA,EAOX,CANJ,CAgBAD,QAAA,GAAa,CAAbA,CAAa,CAAClxB,CAAD,CAAMmxB,CAAN,CACb,CACSA,CAAL,EAAiB,CAAA3L,EAAjB,GACI,CAAAxB,GACA,CADgBhkB,CAAA,CAAI,CAAJ,CAChB,EAD0B,CAAAgwB,GAC1B,CAAA,CAAA5L,GAAA,CAAgBpkB,CAAA,CAAI,CAAJ,CAAhB,EAA0B,CAAAiwB,GAF9B,CAIA,IAAIkB,CAAJ,EAA2Bp5B,IAAAA,EAA3B,GAAeo5B,CAAf,CACI,CAAAvM,EACA,CADsB5kB,CAAA,CAAI,CAAJ,CACtB,EADgC,CAAAgwB,GAChC,CAAA,CAAArL,EAAA,CAAsB3kB,CAAA,CAAI,CAAJ,CAAtB,EAAgC,CAAAiwB,GAPxC,CAkBAmB,QAAA,GAAc,CAAdA,CAAc,CAACpxB,CAAD,CAAMmxB,CAAN,CACd,CACSA,CAAL,EAAiB,CAAAhM,EAAjB,GACI,CAAAZ,GACA,CADiB,CAAC,CAAAc,EAClB,EADoCrlB,CAAA,CAAI,CAAJ,CACpC,EAD8C,CAAAslB,GAC9C,CAAA,CAAAb,GAAA,CAAiB,CAAC,CAAAY,EAAlB,EAAoCrlB,CAAA,CAAI,CAAJ,CAApC,EAA8C,CAAAulB,GAFlD,CAIA,IAAI4L,CAAJ,EAA2Bp5B,IAAAA,EAA3B,GAAeo5B,CAAf,CACI,CAAArM,EACA,CADuB9kB,CAAA,CAAI,CAAJ,CACvB,EADiC,CAAAslB,GACjC,CAAA,CAAAP,EAAA,CAAuB/kB,CAAA,CAAI,CAAJ,CAAvB,EAAiC,CAAAulB,GAPzC;AAqDAre,CAAAmqB,GAAA,CAAAA,QAAa,CAAClN,CAAD,CAAMc,CAAN,CACb,CACSA,CAAL,CAOqC,CAPrC,GAOQ,IAAAE,EAAA,EAPR,EAQQiM,EAAA,CAAAA,IAAA,CAAoBE,EAApB,CAA4C,CAAA,CAA5C,CARR,CACoC,CADpC,GACQ,IAAA9L,EAAA,EADR,EAEQ0L,EAAA,CAAAA,IAAA,CAAmBI,EAAnB,CAA2C,CAAA,CAA3C,CAHZ,CA+CAnP,SAAA,GAAe,CAAfA,CAAe,CAAChgB,CAAD,CAAMovB,CAAN,CACf,CACI,CAAApvB,EAAA,CAAWA,CACX,EAAAqjB,EAAA,CAAwB,CAAAL,EAAxB,CAAiD,CAC7CoM,EAAJ,GAII,CAHK,CAAA/L,EAGL,CAH6B+L,CAAA/L,EAG7B,GAFI0L,EAAA,CAAAA,CAAA,CAAmBI,EAAnB,CAA2C,CAAA,CAA3C,CAEJ,EAAK,CAAAnM,EAAL,CAA8BoM,CAAApM,EAA9B,GACIiM,EAAA,CAAAA,CAAA,CAAoBE,EAApB,CAA4C,CAAA,CAA5C,CALR,CAHJ,CAmCApqB,CAAA8oB,GAAA,CAAAA,QAAQ,CAAC7L,CAAD,CAAMnG,CAAN,CACR,CACoB,IAAA7b,EAAhB,EAA4B6G,CAAA,CAAA,IAAA7G,EAAA,CA39IpBkU,EA29IoB,CAA5B,EACInN,CAAA,CAAA,IAAA/G,EAAA,CAAsB,kCAAtB,CAA2D+kB,CAAA,CAAA,IAAA/kB,EAAA,CAAmB6b,CAAnB,CAA3D,CAAqF,CAAA,CAArF,CAEJ,KAAA3b,EAAA2kB,GAAA,CAAehJ,CAAf,CArmKY8J,EAqmKZ,CAznKY0J,CAynKZ,CACA,OAAO,IALX,CAgBAtqB,EAAAoe,GAAA,CAAAA,QAAS,CAACnB,CAAD,CAAMvwB,CAAN,CAASoqB,CAAT,CACT,CACoB,IAAA7b,EAAhB,EAA4B6G,CAAA,CAAA,IAAA7G,EAAA,CA5+IpBkU,EA4+IoB,CAA5B,EACInN,CAAA,CAAA,IAAA/G,EAAA,CAAsB,mBAAtB,CAA4C+kB,CAAA,CAAA,IAAA/kB,EAAA,CAAmBvO,CAAnB,CAA5C,CAAoE,wBAApE,CAA+FszB,CAAA,CAAA,IAAA/kB,EAAA,CAAmB6b,CAAnB,CAA/F,CAAyH,CAAA,CAAzH,CAEJ,KAAA3b,EAAA2kB,GAAA,CAAehJ,CAAf,CAtnKY8J,EAsnKZ,CAzoKY0J,CAyoKZ,CAJJ,CAeAtqB,EAAA+oB,GAAA,CAAAA,QAAe,CAAC9L,CAAD,CAAMnG,CAAN,CACf,CACI,MAAO,KAAAgG,GAAA,CAAcG,CAAA,EAAd,CAAqBnG,CAAA,EAArB,CAAP,CAAuC,IAAAgG,GAAA,CAAcG,CAAd,CAAmBnG,CAAnB,CAAvC,EAAmE,CADvE,CAYA9W;CAAAqe,GAAA,CAAAA,QAAgB,CAACpB,CAAD,CAAMtwB,CAAN,CAASmqB,CAAT,CAChB,CACI,IAAAuG,GAAA,CAAeJ,CAAA,EAAf,CAAsBtwB,CAAtB,CAA0B,GAA1B,CAAgCmqB,CAAA,EAAhC,CACA,KAAAuG,GAAA,CAAeJ,CAAf,CAAoBtwB,CAApB,EAAyB,CAAzB,CAA4BmqB,CAA5B,CAFJ,CAaA9W,EAAAuqB,GAAA,CAAAA,QAAc,CAACtN,CAAD,CACd,CAII,MAAS,KAAAxB,EAAA,CAASwB,CAAT,EAAgB,CAAhB,CAAT,KAAkCA,CAAlC,CAAwC,CAAxC,GAAgD,CAAhD,EAAsD,GAJ1D,CAeAjd,EAAAwqB,GAAA,CAAAA,QAAc,CAACvN,CAAD,CAAMnG,CAAN,CACd,CACQlI,EAAJ,EAAuBqO,CAAvB,CAA6B,CAA7B,EACI,IAAA9hB,EAAA2kB,GAAA,CAAehJ,CAAf,CA9qKQ8J,EA8qKR,CA3kJeK,CA2kJf,CAMAwJ,EAAAA,CAAMxN,CAANwN,EAAa,CACbC,EAAAA,EAAUzN,CAAVyN,CAAgB,CAAhBA,GAAwB,CAC5B,KAAIC,EAAM,IAAAlP,EAAA,CAASgP,CAAT,CAANE,EAAuBD,CAM3B,OALa,GAAb/9B,CAAI+9B,CAAJ/9B,CACQg+B,CADRh+B,CACa,KADbA,CAGSg+B,CAHTh+B,CAGc,GAHdA,EAGwB,IAAA8uB,EAAA,CAASgP,CAAT,CAAe,CAAf,CAHxB99B,CAG4C,GAH5CA,GAGqD,CAdzD,CA2BAqT,EAAA4qB,GAAA,CAAAA,QAAe,CAAC3N,CAAD,CAAM3xB,CAAN,CACf,CAIQ,IAAIm/B,EAAMxN,CAANwN,EAAa,CACbC,EAAAA,EAAUzN,CAAVyN,CAAgB,CAAhBA,GAAwB,CAC5B,KAAAjP,EAAA,CAASgP,CAAT,CAAA,CAAiB,IAAAhP,EAAA,CAASgP,CAAT,CAAjB,CAAiC,EAAE,GAAF,EAAUC,CAAV,CAAjC,CAAuDp/B,CAAvD,EAA4Do/B,CAEhE,KAAAlM,GAAA,CAAc,CAAA,CARlB,CAmBAxe;CAAA6qB,GAAA,CAAAA,QAAe,CAAC5N,CAAD,CAAMtwB,CAAN,CAASmqB,CAAT,CACf,CACQlI,EAAJ,EAAuBqO,CAAvB,CAA6B,CAA7B,EACI,IAAA9hB,EAAA2kB,GAAA,CAAehJ,CAAf,CA9tKQ8J,EA8tKR,CAznJe7J,CAynJf,CAMI0T,EAAAA,CAAMxN,CAANwN,EAAa,CACbC,EAAAA,EAAUzN,CAAVyN,CAAgB,CAAhBA,GAAwB,CACf,GAAb,CAAIA,CAAJ,CACI,IAAAjP,EAAA,CAASgP,CAAT,CADJ,CACqB,IAAAhP,EAAA,CAASgP,CAAT,CADrB,CACqC,EAAE,KAAF,EAAYC,CAAZ,CADrC,CAC6D/9B,CAD7D,EACkE+9B,CADlE,EAGI,IAAAjP,EAAA,CAASgP,CAAT,CAEA,CAFiB,IAAAhP,EAAA,CAASgP,CAAT,CAEjB,CAFiC,QAEjC,CAFgD99B,CAEhD,EAFqD,EAErD,CADA89B,CAAA,EACA,CAAA,IAAAhP,EAAA,CAASgP,CAAT,CAAA,CAAiB,IAAAhP,EAAA,CAASgP,CAAT,CAAjB,CAAkC,IAAlC,CAAoD99B,CAApD,EAAyD,CAL7D,CAQJ,KAAA6xB,GAAA,CAAc,CAAA,CAlBlB,CA6BAxe,EAAA8qB,GAAA,CAAAA,QAAe,CAAC7N,CAAD,CAAMnG,CAAN,CACf,CACoB,IAAA7b,EAAhB,EAAyC,IAAzC,EAA4B,IAAA6b,EAA5B,EACIiU,EAAA,CAAA,IAAA9vB,EAAA,CAAyB,IAAA6b,EAAzB,CAAqCmG,CAArC,CAEJ,OAAO,KAAAS,EAAA,CAAoBT,CAApB,CAAyBnG,CAAzB,CAJX,CAeA9W,EAAAgrB,GAAA,CAAAA,QAAe,CAAC/N,CAAD,CAAMnG,CAAN,CACf,CACoB,IAAA7b,EAAhB,EAAyC,IAAzC,EAA4B,IAAA6b,EAA5B,EACIiU,EAAA,CAAA,IAAA9vB,EAAA,CAAyB,IAAA6b,EAAzB,CAAqCmG,CAArC,CAA0C,CAA1C,CAEJ,OAAO,KAAAQ,EAAA,CAAoBR,CAApB,CAAyBnG,CAAzB,CAJX,CAeA9W,EAAAirB,GAAA,CAAAA,QAAgB,CAAChO,CAAD,CAAM3xB,CAAN,CAASwrB,CAAT,CAChB,CACoB,IAAA7b,EAAhB,EAAyC,IAAzC,EAA4B,IAAA6b,EAA5B,EACIoU,EAAA,CAAA,IAAAjwB,EAAA,CAA0B,IAAA6b,EAA1B,CAAsCmG,CAAtC,CAEA,KAAAkB,EAAJ,CAAoB,IAAAC,GAAA,CAAenB,CAAf,CAAoB3xB,CAApB,CAAuBwrB,CAAvB,CAApB,CAAuD,IAAA8G,EAAA,CAAqBX,CAArB,CAA0B3xB,CAA1B,CAA6BwrB,CAA7B,CAJ3D,CAeA9W;CAAAmrB,GAAA,CAAAA,QAAgB,CAAClO,CAAD,CAAMtwB,CAAN,CAASmqB,CAAT,CAChB,CACoB,IAAA7b,EAAhB,EAAyC,IAAzC,EAA4B,IAAA6b,EAA5B,EACIoU,EAAA,CAAA,IAAAjwB,EAAA,CAA0B,IAAA6b,EAA1B,CAAsCmG,CAAtC,CAA2C,CAA3C,CAEA,KAAAkB,EAAJ,CAAoB,IAAAC,GAAA,CAAenB,CAAf,CAAoBtwB,CAApB,CAAuBmqB,CAAvB,CAApB,CAAuD,IAAA+G,EAAA,CAAqBZ,CAArB,CAA0BtwB,CAA1B,CAA6BmqB,CAA7B,CAJ3D,CAeA9W,EAAAorB,GAAA,CAAAA,QAAU,CAACnO,CAAD,CACV,CACI,MAAO,KAAAjoB,EAAA,CAAQioB,CAAR,CADX,CAYAjd,EAAAqrB,GAAA,CAAAA,QAAU,CAACpO,CAAD,CAAMnG,CAAN,CACV,CACQxrB,CAAAA,CAAI,IAAA0J,EAAA,CAAQioB,CAAR,CACQ,KAAAhiB,EAAhB,EAA4B6G,CAAA,CAAA,IAAA7G,EAAA,CAnsJpBkU,EAmsJoB,CAA5B,EACInN,CAAA,CAAA,IAAA/G,EAAA,CAAsB,kBAAtB,CAA2C+kB,CAAA,CAAA,IAAA/kB,EAAA,CAAmB6b,CAAnB,CAA3C,CAAsE,KAAtE,CAA8EkJ,CAAA,CAAA,IAAA/kB,EAAA,CAAmB3P,CAAnB,CAA9E,CAAqG,CAAA,CAArG,CAEJ,OAAOA,EALX,CAgBA0U,EAAAsrB,GAAA,CAAAA,QAAU,CAACrO,CAAD,CAAMnG,CAAN,CACV,CACQlI,EAAJ,EAAuBqO,CAAvB,CAA6B,CAA7B,EACI,IAAA9hB,EAAA2kB,GAAA,CAAehJ,CAAf,CA11KQ8J,EA01KR,CAvvJeK,CAuvJf,CAEJ,OAAO,KAAAiI,EAAAqC,UAAA,CAAkBtO,CAAlB,CAAuB,CAAA,CAAvB,CAJX,CAeAjd;CAAAwrB,GAAA,CAAAA,QAAU,CAACvO,CAAD,CAAMnG,CAAN,CACV,CAEQlI,EAAJ,EAAuBqO,CAAvB,CAA6B,CAA7B,EACI,IAAA9hB,EAAA2kB,GAAA,CAAehJ,CAAf,CA32KQ8J,EA22KR,CAxwJeK,CAwwJf,CASAt0B,EAAA,CAHAgiB,CAAAA,EAAJ,EAAuBsO,CAAvB,CAA6B,CAA7B,CAGQ,IAAAjoB,EAAA,CAAQioB,CAAR,CAHR,CAGwB,IAAAjoB,EAAA,CAAQioB,CAAR,CAAY,CAAZ,CAHxB,EAG0C,CAH1C,CACQ,IAAAoM,EAAA,CAAQpM,CAAR,EAAe,CAAf,CAIQ,KAAAhiB,EAAhB,EAA4B6G,CAAA,CAAA,IAAA7G,EAAA,CAhvJpBkU,EAgvJoB,CAA5B,EACInN,CAAA,CAAA,IAAA/G,EAAA,CAAsB,kBAAtB,CAA2C+kB,CAAA,CAAA,IAAA/kB,EAAA,CAAmB6b,CAAnB,CAA3C,CAAsE,KAAtE,CAA8EkJ,CAAA,CAAA,IAAA/kB,EAAA,CAAmBtO,CAAnB,CAA9E,CAAqG,CAAA,CAArG,CAEJ,OAAOA,EAjBX,CA4BAqT,EAAAyrB,GAAA,CAAAA,QAAW,CAACxO,CAAD,CAAM3xB,CAAN,CACX,CACI,IAAA0J,EAAA,CAAQioB,CAAR,CAAA,CAAe3xB,CACf,KAAAkzB,GAAA,CAAc,CAAA,CAFlB,CAaAxe,EAAA0rB,GAAA,CAAAA,QAAW,CAACzO,CAAD,CAAM3xB,CAAN,CAASwrB,CAAT,CACX,CACI,IAAA9hB,EAAA,CAAQioB,CAAR,CAAA,CAAe3xB,CACf,KAAAkzB,GAAA,CAAc,CAAA,CACE,KAAAvjB,EAAhB,EAA4B6G,CAAA,CAAA,IAAA7G,EAAA,CAhxJpBkU,EAgxJoB,CAA5B,EACInN,CAAA,CAAA,IAAA/G,EAAA,CAAsB,mBAAtB,CAA4C+kB,CAAA,CAAA,IAAA/kB,EAAA,CAAmB6b,CAAnB,CAA5C,CAAuE,GAAvE,CAA6EkJ,CAAA,CAAA,IAAA/kB,EAAA,CAAmB3P,CAAnB,CAA7E,CAAqG,GAArG,CAA0G,CAAA,CAA1G,CAJR,CAgBA0U,EAAA2rB,GAAA,CAAAA,QAAW,CAAC1O,CAAD,CAAMtwB,CAAN,CAASmqB,CAAT,CACX,CACQlI,EAAJ,EAAuBqO,CAAvB,CAA6B,CAA7B,EACI,IAAA9hB,EAAA2kB,GAAA,CAAehJ,CAAf,CAt6KQ8J,EAs6KR,CAj0Je7J,CAi0Jf,CAEJ,KAAAmS,EAAA0C,UAAA,CAAkB3O,CAAlB,CAAuBtwB,CAAvB,CAA0B,CAAA,CAA1B,CACA,KAAA6xB,GAAA,CAAc,CAAA,CALlB,CAgBAxe;CAAA6rB,GAAA,CAAAA,QAAW,CAAC5O,CAAD,CAAMtwB,CAAN,CAASmqB,CAAT,CACX,CACQlI,EAAJ,EAAuBqO,CAAvB,CAA6B,CAA7B,EACI,IAAA9hB,EAAA2kB,GAAA,CAAehJ,CAAf,CAv7KQ8J,EAu7KR,CAl1Je7J,CAk1Jf,CAMApI,EAAAA,EAAJ,EAAuBsO,CAAvB,CAA6B,CAA7B,EAGI,IAAAjoB,EAAA,CAAQioB,CAAR,CACA,CADetwB,CACf,CAAA,IAAAqI,EAAA,CAAQioB,CAAR,CAAY,CAAZ,CAAA,CAAiBtwB,CAAjB,EAAsB,CAJ1B,EACI,IAAA08B,EAAA,CAAQpM,CAAR,EAAe,CAAf,CADJ,CACwBtwB,CAKxB,KAAA6xB,GAAA,CAAc,CAAA,CACE,KAAAvjB,EAAhB,EAA4B6G,CAAA,CAAA,IAAA7G,EAAA,CA9zJpBkU,EA8zJoB,CAA5B,EACInN,CAAA,CAAA,IAAA/G,EAAA,CAAsB,mBAAtB,CAA4C+kB,CAAA,CAAA,IAAA/kB,EAAA,CAAmB6b,CAAnB,CAA5C,CAAuE,GAAvE,CAA6EkJ,CAAA,CAAA,IAAA/kB,EAAA,CAAmBtO,CAAnB,CAA7E,CAAqG,GAArG,CAA0G,CAAA,CAA1G,CAhBR,CA4CAm/B,KAAAA,GAAYA,CAAZA,CACAC,GAAYA,CADZD,CAEAzc,GAAYA,CAFZyc,CAIAE,GAAYA,CAJZF,CAOJpP,GAA0B,CAAC,MAAD,CAAU,KAAV,CAAkB,KAAlB,CAA2B,KAA3B,CAAmC,KAAnC,CAPtBoP,CAYJnD,GAAsB,CAZlBmD,CAyBJ/B,GAAsB,EAzBlB+B,CA2BJnC,GAAwB,CACpB5O,CAAAzqB,UAAAi6B,GADoB,CAEpBxP,CAAAzqB,UAAAs6B,GAFoB,CAGpB7P,CAAAzqB,UAAAk6B,GAHoB,CAIpBzP,CAAAzqB,UAAAu6B,GAJoB,CA3BpBiB,CAkCJ1B,GAAyB,CACrBrP,CAAAzqB,UAAAw6B,GADqB,CAErB/P,CAAAzqB,UAAA26B,GAFqB,CAGrBlQ,CAAAzqB,UAAA06B,GAHqB,CAIrBjQ,CAAAzqB,UAAA66B,GAJqB,CAOzB;GAAIpnB,EAAJ,CACI,IAAA2lB,GAAyB,CACrB3O,CAAAzqB,UAAA86B,GADqB,CAErBrQ,CAAAzqB,UAAAm7B,GAFqB,CAGrB1Q,CAAAzqB,UAAAg7B,GAHqB,CAIrBvQ,CAAAzqB,UAAAq7B,GAJqB,CAAzB,CAOAlC,GAAyB,CACrB1O,CAAAzqB,UAAA+6B,GADqB,CAErBtQ,CAAAzqB,UAAAo7B,GAFqB,CAGrB3Q,CAAAzqB,UAAAk7B,GAHqB,CAIrBzQ,CAAAzqB,UAAAu7B,GAJqB,CAQT,KAAA,EAAA,IAAA9nB,EAAA,CAAA,CAChB,IAAIklB,GAAS,IAAIjlB,WAAJ,CAAgB,CAAhB,CACb4nB,EAAA,IAAIzC,QAAJ,CAAaF,EAAb,CAAA2C,WAAA,CAA+B,CAA/B,CAAkC,GAAlC,CAAuC,CAAA,CAAvC,CACA,GAAA,CAAsC,GAAtC,GAAO,CAAA,IAAItC,WAAJ,CAAgBL,EAAhB,CAAA,EAAwB,CAAxB,CAHS,CAAA,IAIb,GAAA,CAAA,CAAA,CAJP,KAAIO,GAAgB,EA6ChB3vB;QAhCEoyB,GAgCS,CAACC,CAAD,CAAWC,CAAX,CACX,CACI,CAAA,KAAA,CAAA,IAAA,CAAM,KAAN,CAAaD,CAAb,CAx8JQpd,CAw8JR,CAEIsd,EAAAA,CAAU,CAACF,CAAA,OAAXE,EAAiCD,CAErC,KAAIE,EAAc,CAACH,CAAA,WAAfG,EAAyC,CAE7C,KAAA5b,GAAA,CAAqB,CAErB,KAAA6b,GAAA,CAAwBF,CAOxB,KAAAG,GAAA,CAAyBF,CACzB,KAAAG,GAAA,CAAkB1+B,IAAA2+B,MAAA,CAAW,IAAAH,GAAX,CAAmC,GAAnC,CAAlB,CAA8D,GAC9D,KAAAI,GAAA,CAAiB,IAAAF,GAAjB,CAAmC,IAAAD,GACnC,KAAAI,GAAA,CAAkB,IAAAC,GAAlB,CAAyC,IAAAC,GAAzC,CAAiE,IAAAC,GAAjE,CAAsF,CAKtF,KAAAvyB,MAAAmb,EAAA,CAAqB,IAAAnb,MAAAwyB,GAArB,CAA2C,CAAA,CAC3C,KAAAxyB,MAAAyyB,GAAA,CAAuBd,CAAA,UACY,SAAnC,EAAI,MAAO,KAAA3xB,MAAAyyB,GAAX,GAA6C,IAAAzyB,MAAAyyB,GAA7C,CAA6F,MAA7F,EAAqE,IAAAzyB,MAAAyyB,GAArE,CAWA,KAAAzyB,MAAA0yB,GAAA,CAAsB,CAAA,CACtB,KAAAC,GAAA,CAAiB,IAAAC,GAAjB,CAA4C,CAC5C,KAAAC,GAAA,CAA4B,CAAClB,CAAA,QAC7B,KAAAmB,GAAA,CAA+B,CAACnB,CAAA,WAChC,KAAAoB,GAAA,CAA2B,CAACpB,CAAA,OAK5B,KAAAqB,GAAA,CAAe,EAEf,KAAAC,GAAA,CAAoB,IAAAC,GAAApqB,KAAA,CAAiB,IAAjB,CAQpB,KAAAqqB,GAAA,CAAoB,IAAAC,GAApB,CAAsC,IAAAC,GAAtC,CAA0D,IAAAC,EAA1D,CAA6E,IAAAC,GAA7E,CADA,IAAAC,GACA;AADkB,IAAAC,GAClB,CADwC,IAAAC,GACxC,CAD4D,IAAAC,GAC5D,CAFA,IAAAC,GAEA,CAHA,IAAAC,GAGA,CAHW,CAIX,KAAAtb,GAAA,CAAa,IAEb1R,EAAA,CAAAA,IAAA,CA3DJ,CAjCmBiR,CAAAvY,CAAjBmyB,EAAiBnyB,CAAAA,CAAAA,CAwGnB,EAAA,CAr0UJ,EAAAu0B,UAq0UIruB,EAAAqT,GAAA,CAAAA,QAAO,CAACjY,CAAD,CAAMD,CAAN,CAAWD,CAAX,CAAgBD,CAAhB,CACP,CACI,IAAAG,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CACX,KAAAF,EAAA,CAAWA,CACX,KAAA6X,GAAA,CAAa1X,CAAA0X,EACb,KAASjnB,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAAoByiC,EAAAv+B,OAApB,CAA6ClE,CAAA,EAA7C,CAEI,CADIuQ,CACJ,CADc,IAAAhC,EAAA,CAAcm0B,EAAA,CAAiB1iC,CAAjB,CAAd,CACd,GAAa,IAAAuP,EAAAqC,GAAA,CAAoB,IAApB,CAA0B8wB,EAAA,CAAiB1iC,CAAjB,CAA1B,CAA+CuQ,CAA/C,CAEjBgF,EAAA,CAAAA,IAAA,CATJ,CAmBApB,EAAAyS,MAAA,CAAAA,QAAK,EACL,EAWAzS,EAAA8T,KAAA,CAAAA,QAAI,EACJ,CACI,MAAO,KADX,CAaA9T,EAAA6T,QAAA,CAAAA,QAAO,EACP,CACI,MAAO,CAAA,CADX,CAYA7T;CAAA0B,GAAA,CAAAA,QAAO,CAAClN,CAAD,CAAOmf,CAAP,CACP,CAII,IAAI6a,EAAaC,EAAA,CAAA,IAAArzB,EAAA,CAAwB,WAAxB,CACC,KAAlB,EAAIozB,CAAJ,CACI,IAAAj0B,MAAAyyB,GADJ,CAC0C,MAAd,EAAAwB,CAAA,CAAsB,CAAA,CAAtB,CAA6C,OAAf,EAAAA,CAAA,CAAwB,CAAA,CAAxB,CAAgC,CAAC,CAACA,CAD5F,CAGiC,IAHjC,EAGS,IAAAj0B,MAAAyyB,GAHT,GAQI,IAAAzyB,MAAAyyB,GARJ,CAQ0C,CAAC,IAAA/xB,EAR3C,EAQiFpK,IAAAA,EARjF,GAQwD,IAAAuJ,EAAA,IARxD,CAWA,IAAI,CAACuZ,CAAL,CAAe,CACX,GAAKnf,CAAL,CAEO,CACHk6B,EAAA,CAAAA,IAAA,CACA,IAAI,CAAC,IAAA7a,QAAA,CAAarf,CAAb,CAAL,CAAyB,MAAO,CAAA,CAChCm6B,GAAA,CAAAA,IAAA,CAHG,CAFP,IACI,KAAAlc,MAAA,EASY,KAAAxX,EAAhB,EACIA,CAi9eR,CAj9eQA,IAAAA,EAi9eR,CAj9esB+xB,CAi9etB,CAj9esBA,IAAAzyB,MAAAyyB,GAi9etB,CAJA,CAAA4B,GAIA,CAJa,CAAA,CAIb,CAHA,CAAApuB,EAAA,CAAa,8CAAb,CAGA,CAFAquB,EAAA,CAAAA,CAAA,CAEA,CADKC,CACL,EADiBC,EAAA,CAAAA,CAAA,CACjB,CAAI,CAAAC,GAAJ,GACQC,CAEJ,CAFY,CAAAD,GAEZ,CADA,CAAAA,GACA,CADqB,IACrB,CAAAE,EAAA,CAAAA,CAAA,CAAgBD,CAAhB,CAHJ,CAl9eI,EAGI,IAAAn8B,OAAA,CAAY,sBAAZ,CAEC,KAAAyH,MAAAyyB,GAAL,EACI,IAAAxsB,EAAA,CAAa,+BAAb,EAAgD,IAAAsS,GAAA,CAAY,sBAAZ;AAAqC,sBAArF,EAjBO,CA0Bf,MAAO,CAAA,CA1CX,CAqDA9S,EAAA2B,GAAA,CAAAA,QAAS,CAACC,CAAD,CACT,CACI,MAAOA,EAAA,CAAO,IAAAkS,KAAA,EAAP,CAAqB,CAAA,CADhC,CAUA9T,EAAAgtB,GAAA,CAAAA,QAAS,EACT,CACI,MAAI,KAAAzyB,MAAAmb,EAAJ,CACW,CAAA,CADX,CAGI,IAAAnb,MAAAyyB,GAAJ,CAMWjX,EAAA,CAAAA,IAAA,CANX,CAQO,CAAA,CAZX,CAiDA/V,EAAAmvB,GAAA,CAAAA,QAAW,EACX,CACI,MAAO,EADX,CAcAR,SAAA,GAAa,CAAbA,CAAa,CACb,CACsC99B,IAAAA,EAAlC,GAAI,CAAAu8B,GAAJ,GAA6C,CAAAA,GAA7C,CAAyE,CAAzE,CACqCv8B,KAAAA,EAArC,GAAI,CAAAw8B,GAAJ,GAAgD,CAAAA,GAAhD,CAAgF,EAAhF,CACiCx8B,KAAAA,EAAjC,GAAI,CAAAy8B,GAAJ,GAA4C,CAAAA,GAA5C,CAAwE,EAAxE,CACA,EAAA/yB,MAAA0yB,GAAA,CAAoD,CAApD,EAAuB,CAAAG,GAAvB,EAAwF,CAAxF,CAAyD,CAAAC,GACrD,EAAA9yB,MAAA0yB,GAAJ,GACI,CAAAC,GACA,CADiB,CACjB,CAAA,CAAAC,GAAA,CAA2B,CAAAC,GAA3B,CAAuD,CAAAM,GAF3D,CALJ;AA4BArX,QAAA,GAAc,CAAdA,CAAc,CAAC+V,CAAD,CACd,CACI,GAAI,CAAA7xB,MAAA0yB,GAAJ,CAAyB,CAIrB,IAAImC,EAAW,CAAA,CACf,EAAAlC,GAAA,CAAkB,CAAAA,GAAlB,CAAmC,CAAAiC,GAAA,EAAnC,CAAuD,CACvD,EAAAhC,GAAA,EAA4Bf,CACI,EAAhC,EAAI,CAAAe,GAAJ,GACI,CAAAA,GACA,EAD4B,CAAAE,GAC5B,CAAA+B,CAAA,CAAW,CAAA,CAFf,CAIgC,EAAhC,EAAI,CAAA9B,GAAJ,EACQ,CAAAA,GADR,EACoC+B,EAAA,CAAAA,CAAA,CADpC,GAEQ,CAAAhC,GAGA,CAH+B,CAAAC,GAG/B,CAH2D,EAG3D,CAFAqB,EAAA,CAAAA,CAAA,CAEA,CADA3Y,CAAA,CAAAA,CAAA,CACA,CAAAoZ,CAAA,CAAW,CAAA,CALnB,CAQIA,EAAJ,EAAcE,CAelB9uB,EAAA,CAAa6uB,EAAA,CAfKC,CAeL,CAAb,CAA8C,uBAA9C,CAA4DngC,CAAA,CAf1CmgC,CAeoDpC,GAAV,CAA5D,CAlCyB,CAD7B;AAgDAltB,CAAAvC,GAAA,CAAAA,QAAU,CAACQ,CAAD,CAAQkC,CAAR,CAAkB/D,CAAlB,CACV,CACI,IAAIlB,EAAM,IAEV,QAAQiF,CAAR,EACA,KAAK,OAAL,CACA,KAAK,OAAL,CAOI,MADA,KAAA/F,EAAA,CAAc+F,CAAd,CACO,CADmB/D,CACnB,CAAA,CAAA,CAEX,MAAK,KAAL,CAcI,MAbA,KAAAhC,EAAA,CAAc+F,CAAd,CAaO,CAbmB/D,CAanB,CAZPA,CAAAgE,QAYO,CAZWmvB,QAAmB,EAAG,CAChC,IAAA,CAAA,IAACn0B,CAAD,CAACA,CAAAA,EAAD,CAotmBZ,GAptmByB,CAotmBrBR,CAptmBqB,CAAA,EAotmBrBA,CAAA,CAAAL,MAAAK,GAAJ,CAAwB,CAAA,CAAO,CAAA,CAA/B,KAAA,CADJ,IAGQU,EAAY,IAHpB,CAG0Bk0B,CAH1B,CAIQ5xB,EAAc6xB,EAAA,CAAwB,CAAAx1B,GAAxB,CAClB,KAAKu1B,CAAL,CAAkB,CAAlB,CAAqBA,CAArB,CAAkC5xB,CAAA7N,OAAlC,GACIuL,CACI,CADQsC,CAAA,CAAY4xB,CAAZ,CACR,CAAAl0B,CAAA,GAAc,CAAd,EAAuBA,CAAAf,MAAAC,MAF/B,EAAsDg1B,CAAA,EAAtD,EAIA,GAAIA,CAAJ,EAAkB5xB,CAAA7N,OAAlB,CACI,IAAKy/B,CAAL,CAAkB,CAAlB,CAAqBA,CAArB,CAAkC5xB,CAAA7N,OAAlC,GACIuL,CACI,CADQsC,CAAA,CAAY4xB,CAAZ,CACR,CAAAl0B,CAAA,GAAc,CAAd,EAAuBA,CAAAf,MAAAK,GAF/B,EAAsD40B,CAAA,EAAtD,EAKAA,CAAJ,EAAkB5xB,CAAA7N,OAAlB,GAAsCuL,CAAtC,CAAkD,CAAlD,CAEAxG,EAAA,CADQ,MACR,CADiBwG,CAAAnJ,KACjB,CADkC,cAClC,CADmDmJ,CAAArB,GACnD,CADkE,WAClE,EADkFqB,CAAAf,MAAAC,MAAD,CAAgG,aAAhG,CAAwB,WAAxB,EAAuCc,CAAAP,GAAA,CAAmB,6BAAnB,CAAmD,EAA1F,CACjF,EADkM,GAClM,CACA,EAAA,CAAO,CAAA,CAjBP,CAptmBY,CAAJ,GAMKG,CAAAX,MAAAmb,EAAL;AAGIM,CAAA,CAAA9a,CAAA,CAHJ,CACI6a,EAAA,CAAA7a,CAAA,CAPJ,CADoC,CAYjC,CAAA,CAAA,CAEX,MAAK,OAAL,CAEI,MADA,KAAAd,EAAA,CAAc+F,CAAd,CACO,CADmB/D,CACnB,CAAA,CAAA,CAEX,MAAK,UAAL,CAMI,MALA,KAAAhC,EAAA,CAAc+F,CAAd,CAKO,CALmB/D,CAKnB,CAJPA,CAAAgE,QAIO,CAJWmvB,QAAwB,EAAG,CACzCG,EAAA,CAAAx0B,CAAA,CAAaA,CAAAqxB,GAAb,EAAsC,CAAtC,CAAyC,CAAA,CAAzC,CADyC,CAItC,CADPnwB,CAAAuG,YACO,CADegtB,IA6MnBjD,GAAAkD,QAAA,CAAuB,CAAvB,CA5MI,CA4MwB,KA5MxB,CAAA,CAAA,CArCX,CA0CA,MAAO,CAAA,CA7CX,CAwFAxZ,SAAA,GAAS,CAATA,CAAS,CAACgW,CAAD,CAAUyD,CAAV,CACT,CACI,CAAAnC,GAAA,EAAqBtB,CACjByD,EAAJ,GACI,CAAAjC,GADJ,CACwB,CAAAC,EADxB,CAC2C,CAAAC,GAD3C,CAC8D,CAD9D,CAFJ,CAsBAgC,QAAA,GAAU,CAAVA,CAAU,CAACC,CAAD,CACV,CAII,IAAIC,EAAc,CACdD,EAAJ,EACiC,CADjC,CACQ,CAAAxD,GADR,EACsC,CAAA6B,GADtC,GAEQ4B,CAFR,CAEuB,CAAA5B,GAFvB,CAEkC,CAAA5B,GAFlC,CAMA,EAAAG,GAAA,CAAkB7+B,IAAA2+B,MAAA,CAAW,GAAX,CAAkBwD,EAAlB,CAClB,EAAArD,GAAA,CAAuB9+B,IAAAoiC,MAAA,CAAW,CAAA5D,GAAX,CAAmC2D,EAAnC,CAAgED,CAAhE,CAKlBD,EAAL,GAAc,CAAAlD,GAAd,CAAsC,CAAAD,GAAtC,CACA,EAAAE,GAAA,CAAqB,CAlBzB,CAsCAuC,QAAA,GAAS,CAATA,CAAS,CACT,CAuBI,MAtBc,EAAA3B,GAsBd,CAtBkC,CAAAC,GAsBlC,CAtBoD,CAAAC,GAsBpD,CAtBwE,CAAAC,EAD5E,CAgDAa,QAAA,GAAW,CAAXA,CAAW,CACX,CACI,CAAAN,GAAA,CAAW,CACX,EAAAD,GAAA,CAAgC,CAChC,EAAAT,GAAA,CAAoB,CAAAC,GAApB,CAAsC,CAAAC,GAAtC,CAA0D,CAAAC,EAA1D,CAA6E,CAAAC,GAA7E,CAAgG,CAChGa,GAAA,CAAAA,CAAA,CACAe,GAAA,CAAAA,CAAA,CAAc,CAAd,CALJ;AA6DAA,QAAA,GAAQ,CAARA,CAAQ,CAACrD,CAAD,CAAc8D,CAAd,CACR,CACI,IAAIpxB,EAAW,CAAA,CACf,IAAoBlO,IAAAA,EAApB,GAAIw7B,CAAJ,CAA+B,CAIK,EAAhC,CAAI,CAAA+B,GAAJ,CAAe,CAAA1B,GAAf,CACIL,CADJ,CACkB,CADlB,CAGIttB,CAHJ,CAGe,CAAA,CAEf,EAAAwtB,GAAA,CAAyBF,CACrB+B,EAAAA,CAAM,CAAA5B,GAAN4B,CAAwB,CAAA7B,GAC5B,IAAI,CAAAG,GAAJ,EAAsB0B,CAAtB,CAA2B,CACvB,CAAA1B,GAAA,CAAiB0B,CACbgC,EAAAA,CAAST,CAjCdjD,GAAAkD,QAAA,CAAuB,CAAvB,CAiCKQ,CAjCuB,KAkC3B,KAAIC,EAAe,CAAAj2B,EAAA,SACfi2B,EAAJ,GAAkBA,CAAA1tB,YAAlB,CAA6CytB,CAA7C,CACA,EAAA5vB,EAAA,CAAa,gBAAb,CAAgC4vB,CAAhC,CALuB,CAOvBD,CAAJ,EAAoB,CAAA/0B,EAApB,EAA8B2zB,EAAA,CAAA,CAAA3zB,EAAA,CAlBH,CAoB/Bgb,EAAA,CAAAA,CAAA,CAAe,CAAAuX,GAAf,CACA,EAAAA,GAAA,CAAkB,CAClB,EAAAI,GAAA,CAAkBuC,EAAA,EAClB,EAAArC,GAAA,CAAoB,CACpB6B,GAAA,CAAAA,CAAA,CACA,OAAO/wB,EA3BX,CA6MAyiB,QAAA,GAAQ,CAARA,CAAQ,CAAC+O,CAAD,CACR,CACI,IAAIC,EAAS,CAAAjD,GAAAx9B,OACb,EAAAw9B,GAAAn4B,KAAA,CAAkB,CAAE,EAAF,CAAKm7B,CAAL,CAAlB,CACA,OAAOC,EAHX,CA2BA7O,QAAA,GAAQ,CAARA,CAAQ,CAAC6O,CAAD,CAAS/4B,CAAT,CAAag5B,CAAb,CACR,CAEkB,CAAd,EAAID,CAAJ,EAAmBA,CAAnB,CAA4B,CAAAjD,GAAAx9B,OAA5B,GACQ0gC,CADR,EAC4C,CAD5C,CACkB,CAAAlD,GAAA,CAAaiD,CAAb,CAAA,CAAqB,CAArB,CADlB,IAEQpE,CAUA,CAVUsE,CAyBTpE,GAfD,CAVUoE,CAyBenE,GAfzB,CAemD,GAfnD,CAV2B90B,CAU3B,CAe8D,CAf9D,CAHI,CAAA8C,MAAAmb,EAGJ,GAFI0W,CAEJ,EAFeuE,EAAA,CAAAA,CAAA,CAEf,EAAA,CAAApD,GAAA,CAAaiD,CAAb,CAAA,CAAqB,CAArB,CAAA,CAA0BpE,CAZlC,CAFJ;AAyCAwE,QAAA,GAAc,CAAdA,CAAc,CAACxE,CAAD,CACd,CACI,IAAK,IAAIvgC,EAAI,CAAA0hC,GAAAx9B,OAAJlE,CAA0B,CAAnC,CAA2C,CAA3C,EAAsCA,CAAtC,CAA8CA,CAAA,EAA9C,CAAmD,CAC/C,IAAI6L,EAAQ,CAAA61B,GAAA,CAAa1hC,CAAb,CAEG,EAAf,CAAI6L,CAAA,CAAM,CAAN,CAAJ,EACI00B,CADJ,CACc10B,CAAA,CAAM,CAAN,CADd,GAEI00B,CAFJ,CAEc10B,CAAA,CAAM,CAAN,CAFd,CAH+C,CAQnD,MAAO00B,EATX,CAkBAyE,QAAA,GAAU,CAAVA,CAAU,CACV,CAEI,IADA,IAAIC,EAAe,EAAnB,CACSjlC,EAAI,CAAb,CAAgBA,CAAhB,CAAoB,CAAA0hC,GAAAx9B,OAApB,CAAyClE,CAAA,EAAzC,CAEIilC,CAAA17B,KAAA,CADY,CAAAm4B,GAAA71B,CAAa7L,CAAb6L,CACM,CAAM,CAAN,CAAlB,CAEJ,OAAOo5B,EANX,CAkCA3a,QAAA,GAAY,CAAZA,CAAY,CAACiW,CAAD,CACZ,CACI,IAAK,IAAIvgC,EAAI,CAAA0hC,GAAAx9B,OAAJlE,CAA0B,CAAnC,CAA2C,CAA3C,EAAsCA,CAAtC,CAA8CA,CAAA,EAA9C,CAAmD,CAC/C,IAAI6L,EAAQ,CAAA61B,GAAA,CAAa1hC,CAAb,CAEG,EAAf,CAAI6L,CAAA,CAAM,CAAN,CAAJ,GACAA,CAAA,CAAM,CAAN,CACA,EADY00B,CACZ,CAAgB,CAAhB,EAAI10B,CAAA,CAAM,CAAN,CAAJ,GACIA,CAAA,CAAM,CAAN,CACA,CADY,EACZ,CAAAA,CAAA,CAAM,CAAN,CAAA,EAFJ,CAFA,CAH+C,CADvD,CAoBAi5B,QAAA,GAAQ,CAARA,CAAQ,CAACF,CAAD,CACR,CACI,IAAIrE,EAAU,CAAAwB,GAAVxB,EAA+B,CAAAyB,EAOnC,EAAAA,EAAA,CAAmB,CAAAC,GAAnB,CAAsC,CAClC2C,EAAJ,GAAY,CAAA7C,GAAZ,CAAgC,CAAhC,CACA,OAAOxB,EAVX;AAkBApsB,CAAAytB,GAAA,CAAAA,QAAM,EACN,CACI,GAAK,IAAAlzB,MAAAmb,EAAL,CAAA,CAMAqb,IAlUIjE,GAAJ,EAkUAiE,IAlU0BzE,GAA1B,EACIwD,EAAA,CAiUJiB,IAjUI,CAAgB,CAAA,CAAhB,CAiUJA,KA/TA7C,GAAA,CAAsB,CA+TtB6C,KA9TA/C,GAAA,CAAsBsC,EAAA,EA2BtB,IAmSAS,IAnSI9C,GAAJ,CAAuB,CACnB,IAAI+C,EAkSRD,IAlSkB/C,GAAVgD,CAkSRD,IAlSwC9C,GAChC+C,EAAJ,CAiSJD,IAjSkBpE,GAAd,GAiSJoE,IA/RQhD,GAOA,EAPmBiD,CAOnB,CAwRRD,IAxRYhD,GAAJ,CAwRRgD,IAxR8B/C,GAAtB,GAwRR+C,IAvRYhD,GADJ,CAwRRgD,IAvR8B/C,GADtB,CATJ,CAFmB,CAqSvB,GAAI,CACA,EAAG,CAMC,IAAI5B,EAAUwE,EAAA,CAAAA,IAAA,CAAoB,IAAAr2B,MAAA0yB,GAAA,CAAqB,CAArB,CAAyB,IAAAL,GAA7C,CAKd,IAAI,CACA,IAAA3W,GAAA,CAAamW,CAAb,CADA,CAGJ,MAAM9V,CAAN,CAAiB,CAMb,GAAwB,QAAxB,EAAI,MAAOA,EAAX,CAAkC,KAAMA,EAAN,CANrB,CAYjB8V,CAAA,CAAUuE,EAAA,CAAAA,IAAA,CAAc,CAAA,CAAd,CAKV,KAAAzC,GAAA,EAAuB9B,CACvB,KAAAuB,GAAA,EAAmBvB,CACnB/V,GAAA,CAAAA,IAAA,CAAoB+V,CAApB,CAKAjW,GAAA,CAAAA,IAAA,CAAkBiW,CAAlB,CAEA,KAAAS,GAAA,EAAyBT,CACzB,IAA6B,CAA7B,EAAI,IAAAS,GAAJ,CAAgC,CAC5B,IAAAA,GAAA,EAAyB,IAAAD,GACrB,GAAE,IAAAuB,GAAN,EAAuC8C,EAAvC,GACIza,IApnBZpb,EAqnBY,EArnBFob,EAAA,CAonBEA,IApnBFpb,EAAA,CAFH81B,IAAAA,EAEG,CAqnBE,CAAA,IAAA/C,GAAA,CAAgC,CAFpC,CAIA,MAN4B,CAzCjC,CAAH,MAiDS,IAAA5zB,MAAAmb,EAjDT,CADA,CAoDJ,MAAOjqB,CAAP,CAAU,CACNuqB,CAAA,CAAAA,IAAA,CACI,KAAA5a,EAAJ,EAAc,IAAAA,EAAAuX,KAAA,CAAc2d,EAAA,EAAd;AAAmCjB,EAAA,CAAAA,IAAA,CAAnC,CACdpuB,GAAA,CAAAA,IAAA,CAAcxV,CAAA8qB,MAAd,EAAyB9qB,CAAAsJ,QAAzB,CACA,OAJM,CAOV,GAAI,IAAAwF,MAAAmb,EAAJ,CAAA,CAAwBte,CAAAA,CAAAA,UAAWo2B,EAAAA,CAAA,IAAAA,GAAmB2D,KAtUtDlD,GAAA,CAAoBqC,EAAA,EAEpB,KAAIc,EAoUkDD,IApUxCxE,GAoUwCwE,KAnUlDjD,GAAJ,GAOIkD,CAPJ,CAOctjC,IAAA2+B,MAAA,CAAW2E,CAAX,CA4TwCD,IA5TnBjD,GAArB,CA4TwCiD,IA5TGvE,GAA3C,CAPd,CAWuBwE,EAAnBC,EAwTkDF,IAzT/BlD,GACnBoD,CAwTkDF,IAzTXnD,GAmB3BsD,KAAAA,EAsSsCH,IAtStClD,GAAAqD,CAsSsCH,IAtSlBpD,GAzGhCuD,EAAJ,GA+YsDH,IA9YlD/C,GACA,CADWtgC,IAAA2+B,MAAA,CA8YuC0E,IAvSxCxD,GAvGC,EAAkC,EAAlC,CAAsB2D,CAAtB,EACX,CADoD,GACpD,CAAiB,KAAjB,EAAIA,CAAJ,GA6YkDH,IA5Y9CzD,GACA,CADoB,CACpB,CAAAgC,EAAA,CA2Y8CyB,IA3Y9C,CAFJ,CAFJ,CAiHA,IAAuB,CAAvB,CAAIE,CAAJ,EA8RsDF,IA9R1B/C,GAA5B,CA8RsD+C,IA9RfzE,GAAvC,CAM4B,IAQxB,CARI2E,CAQJ,GAgRkDF,IAvR9CpD,GAOJ,EAPuBsD,CAOvB,EAAAA,CAAA,CAAmB,CAgR+BF,KAzQtDrE,GAAA,EAyQsDqE,IAzQhCjD,GAyQgCiD,KAnQtDlD,GAAA,EAAqBoD,CAmQGj6B,EAAA,CAAWo2B,CAAX,CAlQjB6D,CAkQiB,CAAxB,CAnEA,CADJ,CA+EAtb;QAAA,GAAQ,CAARA,CAAQ,CAACoa,CAAD,CACR,CACI,GAAIjvB,EAAA,CAAAA,CAAA,CAAJ,CACI,MAAO,CAAA,CAEX,IAAI,CAAA3G,MAAAmb,EAAJ,CAEI,MADA,EAAAlV,EAAA,CAAa,CAAAP,SAAA,EAAb,CAA+B,OAA/B,CACO,CAAA,CAAA,CAQXyvB,GAAA,CAAAA,CAAA,CACA,EAAAn1B,MAAAmb,EAAA,CAAqB,CAAA,CACrB,EAAAnb,MAAAwyB,GAAA,CAAsB,CAAA,CACtB,KAAIwE,EAAa,CAAAn3B,EAAA,IACbm3B,EAAJ,GAAgBA,CAAA5uB,YAAhB,CAAyC,MAAzC,CACI,EAAAvH,EAAJ,GACQ+0B,CACJ,EADkBpB,EAAA,CAAA,CAAA3zB,EAAA,CAAkB,CAAA,CAAlB,CAClB,CAAA,CAAAA,EAAA2H,MAAA,CAAe,CAAAgrB,GAAf,CAAgCsB,EAAA,CAAAA,CAAA,CAAhC,CAFJ,CAIK,EAAAp0B,EAAL,EAAe,CAAAnI,OAAA,CAAY,SAAZ,CACfsE,WAAA,CAAW,CAAAo2B,GAAX,CAA8B,CAA9B,CACA,OAAO,CAAA,CAzBX,CAqCAxtB,CAAAwxB,GAAA,CAAAvb,QAAO,EACP,CACI,MAAO,EADX,CAgBAD,SAAA,EAAO,CAAPA,CAAO,CAACyb,CAAD,CACP,CACI,IAAIC,EAAW,CAAA,CACf,IAAI,CAAAn3B,MAAAmb,EAAJ,CAAwB,CACpBib,EAAA,CAAAA,CAAA,CACAva,GAAA,CAAAA,CAAA,CAAe,CAAAuX,GAAf,CACA,EAAAA,GAAA,CAAkB,CAClB,EAAApzB,MAAAmb,EAAA,CAAqB,CAAA,CAErB,IADI6b,CACJ,CADiB,CAAAn3B,EAAA,IACjB,CAAgBm3B,CAAA5uB,YAAA,CAAyB,KACrC,EAAAvH,EAAJ,EACI,CAAAA,EAAAuX,KAAA,CAAc2d,EAAA,EAAd,CAAmCjB,EAAA,CAAAA,CAAA,CAAnC,CAEJqC,EAAA,CAAW,CAAA,CACN,EAAAz2B,EAAL,EAAe,CAAAnI,OAAA,CAAY,SAAZ,CAXK,CAaxB,CAAAyH,MAAAo3B,SAAA,CAAsBF,CACtB,OAAOC,EAhBX,CAsDJ,IAAAzB,GAAkC,EAAlC,CACAgB,GAAkC,EADlC,CAGA1C,GAAmB,CAAC,OAAD,CAAU,OAAV,CA+Ef10B;QApCE+3B,GAoCS,CAAC1F,CAAD,CACX,CAEI,IAAI7U,EAAQ,CAAC6U,CAAA,MAAT7U,EAhgOIiR,IA4gOR,GAAA,KAAA,CAAA,IAAA,CAAM4D,CAAN,CAPqBC,OAOrB,CAEA,KAAA9U,GAAA,CAAaA,CACb,KAAAwa,GAAA,CAAiB,CAAC3F,CAAA,UAAlB,EAA2C,CAO3C,KAAA4F,GAAA,CADA,IAAAhM,EACA,CADc,IAAAiM,EACd,CAFA,IAAAC,EAEA,CAFa,IAAAC,EAEb,CAF0B,IAAAC,EAE1B,CAFuC,IAAAC,EAEvC,CAFoD,CAGpD,KAAAra,EAAA,CAAe,IAAAkO,GAAf,CAA8B,IAAAG,EAA9B,CAAkD,EAClD,KAAAhE,EAAA,CAAe,IAAAD,EAAf,CAA8B,IAAAI,GAA9B,CAAgD,IAAAyE,GAAhD,CAAmE,EASnE,KAAAqL,GAAA,CAAgB,IAAAC,EAAhB,CAA8B,IAAAC,GAA9B,CADA,IAAAC,GACA,CADiB,IAAAC,GACjB,CADoC,IAAAC,GACpC,CADuD,IAAAC,GACvD,CAFA,IAAAzS,EAEA,CAFc,IAAAuH,GAEd,CAF4B,IAAAG,GAE5B,CAF0C,IAAAI,GAE1C,CAHA,IAAAtE,EAGA,CAHe,IAAAkP,GAGf,CAH8B,IAAAC,GAG9B,CAH6C,IAAAxQ,EAG7C,CARA,IAAAyQ,EAQA,CARe,CAUf,KAAAC,GAAA,CAAe,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAWf,KAAAC,GAAA,CAAiB,CACjB,KAAAC,GAAA,CAAsB,GAljOdC,KAojOR,EAAI,IAAA5b,GAAJ,EACI,IAAA6b,GAKA,CALgBC,EAAA9vB,KAAA,CAAkB,IAAlB,CAKhB,CAJA,IAAA+vB,GAIA,CAJuB,IAAAC,GAIvB,CAHA,IAAAN,GAGA,CAHiB,CAGjB,CAFA,IAAAC,GAEA,CAFuB,EAEvB,CADA,IAAAM,GACA,CADe,GACf,CAAA,IAAAC,GAAA,CAAiB,CANrB,GAQI,IAAAL,GAOA,CAPgBM,EAAAnwB,KAAA,CAAkB,IAAlB,CAOhB,CANA,IAAA+vB,GAMA,CANuB,IAAAK,GAMvB;AADA,IAAAH,GACA,CADe,EAvhOPvN,IAuhOO,EAjkOX3O,IAikOiC,EAAA,IAAAC,GAAA,CAlhO7B0O,IAkhO6B,CAAmD,CAAzE,EACf,CAD8F,KAC9F,CAAA,IAAAwN,GAAA,CAlkOInc,IAkkOc,CAAA,IAAAC,GAAA,CAnhOV0O,IAmhOU,CAAkD,CAfxE,CAmBA,KAAA2N,GAAA,CAAkB,IAAAC,GAAlB,CADA,IAAAhd,GACA,CADqB,CAIrB,KAAAid,EAAA,CAAe,IAGf,KAAAC,GAAA,CAAa,EAEb,KAAAhX,GAAA,CAAe,IAAAiX,GAAf,CAAoC,IAAAC,GACpC,KAAA/W,GAAA,CAAe,IAAAhG,GAAf,CAAoC,IAAAgd,GACpC,KAAA5W,GAAA,CAAe,IAAAO,GAAf,CAAoC,IAAAsW,GACpC,KAAArd,GAAA,CAAe,IAAAF,GAAf,CAAoC,IAAAwd,GAGpC,KAAAC,GAAA,CAAkB,IAAA1Z,GAAlB,CAFA,IAAA2Z,GAEA,CAFmB,IAAAC,GAEnB,CAFuC,CAGvC,KAAAC,GAAA,CAAe,IAAAC,GACf,KAAArX,GAAA,CAAgB,IAAAsX,GAChB,KAAAjX,GAAA,CAAiB,IAAAkX,GAGjB,KAAAC,EAAA,CAAe,IAAAC,EAAf,CAA6B,IAAAC,GAA7B,CADA,IAAAC,EACA,CADe,IAAAC,EACf,CAD6B,CAG7B,KAAAv6B,MAAAo3B,SAAA,CAAsB,CAAA,CA5F1B,CArCwBtf,CAAA4Z,CAAtB2F,EAAsB3F,CAAAA,EAAAA,CA+IxB,EAAA,CAnkXJ,EAAA8I,UAmkXI/0B;CAAAqT,GAAA,CAAAA,QAAO,CAACjY,CAAD,CAAMD,CAAN,CAAWD,CAAX,CAAgBD,CAAhB,CACP,CACIoY,EAAAA,UAAAA,GAAAA,KAAAA,CAAAA,IAAAA,CAAcjY,CAAdiY,CAAmBlY,CAAnBkY,CAAwBnY,CAAxBmY,CAA6BpY,CAA7BoY,CACA,KAAAygB,GAAA,CAAqB34B,CAAA0hB,GAAAxZ,KAAA,CAAiBlI,CAAjB,CACrB,KAAA6b,GAAA,CAAqB7b,CAAA6hB,GAAA3Z,KAAA,CAAiBlI,CAAjB,CACrB,KAAAwiB,GAAA,CAAqBxiB,CAAAiiB,GAAA/Z,KAAA,CAAiBlI,CAAjB,CACrB,KAAAub,GAAA,CAAqBvb,CAAAyb,GAAAvT,KAAA,CAAiBlI,CAAjB,CALzB,CAmBA6E,EAAA0B,GAAA,CAAAA,QAAO,CAAClN,CAAD,CAAOmf,CAAP,CACP,CAEI,IADA,IAAIqhB,EAAiB,GAArB,CACSnpC,EAAI,CAAb,CAAgBA,CAAhB,CAAoB,IAAAgoC,GAAA9jC,OAApB,CAAuClE,CAAA,EAAvC,CAA4C,CACxC,IAAI61B,EAAM,IAAAmS,GAAA,CAAWhoC,CAAX,CACO,EAAjB,CAAI61B,CAAAuT,GAAJ,GACIvT,CAAAuT,GACA,CADaD,CACb,CAAAA,CAAA,EAAkB,CAFtB,CAFwC,CAO5C,MAAOtzB,GAAAA,UAAAA,GAAAA,KAAAA,CAAAA,IAAAA,CAAclN,CAAdkN,CAAoBiS,CAApBjS,CATX,CAiBA1B;CAAAyS,MAAA,CAAAA,QAAK,EACL,CACI,IAAA3f,OAAA,CAAY,QAAZ,CAAuB,IAAAukB,GAAvB,CACI,KAAA9c,MAAAmb,EAAJ,EAAwBM,CAAA,CAAAA,IAAA,CACxBkf,KAuBAlD,EAAA,CAAa,KAvBbkD,KAwBAjD,EAAA,CAAc,KAxBdiD,KAyBAhD,EAAA,CAHQxmC,KAtBRwpC,KA0BA/C,EAAA,CAAc,KA1Bd+C,KA2BApP,EAAA,CAAc,EA3BdoP,KA6BApd,EAAA,CAAe,CACX,CADW,CACR,CADQ,CACL,CADK,CACF,CADE,CACC,CADD,CACI,CADJ,CACO,CADP,CA7Bfod,IA8ByBrD,GADV,CAC2B,EAD3B,CAC+B,EAD/B,CACmC,EADnC,CACuC,EADvC,CAC2C,EAD3C,CAC+C,EAD/C,CACmD,EADnD,CACuD,EADvD,CA7BfqD,KAgCAlP,GAAA,CAAe,CACX,CADW,CACR,CADQ,CACL,CADK,CACF,CADE,CACC,CADD,CACI,CADJ,CAhCfkP,KAmCA/O,EAAA,CAAoB,CAChB,CADgB,CACb,CADa,CACV,CADU,CACP,CADO,CAnCpB+O,KAsCA/S,EAAA,CAAe,CACX,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAa,CAAb,CAAgB,CAAhB,CAAmB,CAAnB,CAAsB,CAAtB,CAAyB,CAAzB,CAA4B,CAA5B,CAA+B,CAA/B,CAAkC,CAAlC,CAAqC,CAArC,CAAwC,CAAxC,CAA2C,CAA3C,CAA8C,CAA9C,CADW,CAEX,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAa,CAAb,CAAgB,CAAhB,CAAmB,CAAnB,CAAsB,CAAtB,CAAyB,CAAzB,CAA4B,CAA5B,CAA+B,CAA/B,CAAkC,CAAlC,CAAqC,CAArC,CAAwC,CAAxC,CAA2C,CAA3C,CAA8C,CAA9C,CAFW,CAGX,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAa,CAAb,CAAgB,CAAhB,CAAmB,CAAnB,CAAsB,CAAtB,CAAyB,CAAzB,CAA4B,CAA5B,CAA+B,CAA/B,CAAkC,CAAlC,CAAqC,CAArC,CAAwC,CAAxC,CAA2C,CAA3C,CAA8C,CAA9C,CAHW,CAIX,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAa,CAAb,CAAgB,CAAhB,CAAmB,CAAnB,CAAsB,CAAtB,CAAyB,CAAzB,CAA4B,CAA5B,CAA+B,CAA/B,CAAkC,CAAlC,CAAqC,CAArC,CAAwC,CAAxC,CAA2C,CAA3C,CAA8C,CAA9C,CAJW,CAtCf+S,KA4CAhT,EAAA,CAAe,CACX,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAa,CAAb,CAAgB,CAAhB,CAAmB,CAAnB,CAAsB,CAAtB,CAAyB,CAAzB,CAA4B,CAA5B,CAA+B,CAA/B,CAAkC,CAAlC,CAAqC,CAArC,CAAwC,CAAxC,CAA2C,CAA3C,CAA8C,CAA9C,CADW,CAEX,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAa,CAAb,CAAgB,CAAhB,CAAmB,CAAnB,CAAsB,CAAtB,CAAyB,CAAzB,CAA4B,CAA5B,CAA+B,CAA/B,CAAkC,CAAlC,CAAqC,CAArC,CAAwC,CAAxC,CAA2C,CAA3C,CAA8C,CAA9C,CAFW,CAGX,CAzBIx2B,KAyBJ,CAzBIA,KAyBJ,CAzBIA,KAyBJ,CAzBIA,KAyBJ,CAzBIA,KAyBJ,CAzBIA,KAyBJ,CAzBIA,KAyBJ,CAzBIA,KAyBJ,CAzBIA,KAyBJ;AAzBIA,KAyBJ,CAzBIA,KAyBJ,CAzBIA,KAyBJ,CAzBIA,KAyBJ,CAzBIA,KAyBJ,CAzBIA,KAyBJ,CAzBIA,KAyBJ,CAHW,CAIX,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAa,CAAb,CAAgB,CAAhB,CAAmB,CAAnB,CAAsB,CAAtB,CAAyB,CAAzB,CAA4B,CAA5B,CAA+B,CAA/B,CAAkC,CAAlC,CAAqC,CAArC,CAAwC,CAAxC,CAA2C,CAA3C,CAA8C,CAA9C,CAJW,CA5CfwpC,KAkDA5S,GAAA,CAAkB,CACd,CADc,CACX,CADW,CACR,CADQ,CACL,CADK,CACF,CADE,CACC,CADD,CACI,CADJ,CACO,CADP,CACU,CADV,CACa,CADb,CACgB,CADhB,CACmB,CADnB,CACsB,CADtB,CACyB,CADzB,CAC4B,CAD5B,CAC+B,CAD/B,CACkC,CADlC,CACqC,CADrC,CACwC,CADxC,CAC2C,CAD3C,CAC8C,CAD9C,CACiD,CADjD,CACoD,CADpD,CACuD,CADvD,CAC0D,CAD1D,CAC6D,CAD7D,CACgE,CADhE,CACmE,CADnE,CACsE,CADtE,CACyE,CADzE,CAC4E,CAD5E,CAC+E,CAD/E,CAlDlB4S,KAqDAnO,GAAA,CAAmB,CACf,CADe,CACZ,CADY,CACT,CADS,CACN,CADM,CACH,CADG,CACA,CADA,CACG,CADH,CACM,CADN,CArDnBmO,KAyDAnD,EAAA,CAAe,CAzDfmD,KA0DApD,GAAA,CAAgB,EA1DhBoD,KAyEAR,EAAA,CAzEAQ,IAyEeP,EAAf,CAzEAO,IAyE6BN,GAA7B,CAzEAM,IAwEAL,EACA,CAzEAK,IAwEeJ,EACf,CAzEAI,IAgEArC,EASA,CAzEAqC,IA2DA1N,GAcA,CAdc,CAgBd5R,GAAA,CA3EAsf,IA2EA,CA1EAxG,GAAA,CAAAA,IAAA,CACA1zB,KAvsPAT,MAAAO,MAAA,CAAmB,CAAA,CAwsPnB2X,GAAAA,UAAAA,MAAAA,KAAAA,CAAAA,IAAAA,CANJ,CA0FAmD,SAAA,GAAO,CAAPA,CAAO,CACP,CACI,CAAA6N,EAAA,CAAe,CACf,EAAAkP,GAAA,CAAe,CACf,EAAAC,GAAA,CAAe,CACf,EAAAxQ,EAAA,CAAe,CACf,EAAAnC,EAAA,CAAc,CACd,EAAA0H,GAAA,CAAc,CACd,EAAAI,GAAA,CAAc,GACd,EAAAwK,GAAA,CAAiB,CACjB,EAAAC,GAAA,CAAmB,CACnB,EAAAC,GAAA,CAAmB,CACnB,EAAAC,GAAA,CAAe,MAUf,EAAAN,GAAA,CAAgB,CAAAta,EAAA,CAAa,CAAb,CAOhB,EAAAua,EAAA,CAAc,CAEd8C,EAwwBAvB,EAAA,CAAe,IAlwBX,EAAAz4B,EAAJ,GACIi6B,EAAA,CAAAA,CAAA,CACA,CAAA,CAAA9C,GAAA,CAAmBzT,EAAA,CAAA,CAAA1jB,EAAA,CAFvB,CApCJ;AA0EAi6B,QAAA,GAAe,CAAfA,CAAe,CACf,CACI,CAAAvY,GAAA,CAAe,CAAAiX,GACf,EAAA9W,GAAA,CAAe,CAAAhG,GACf,EAAAoG,GAAA,CAAe,CAAAO,GACf,EAAA/G,GAAA,CAAe,CAAAF,GACX,EAAA0d,GAAJ,GACI,CAAAvX,GACA,CADe,CAAAkX,GACf,CAAA,CAAA/W,GAAA,CAAe,CAAAgX,GAFnB,CAII,EAAAK,GAAJ,GACI,CAAAjX,GACA,CADe,CAAA6W,GACf,CAAA,CAAArd,GAAA,CAAe,CAAAsd,GAFnB,CAII,EAAA3B,GAAJ,EACI,CAAA4B,GAKA,CA7nOQ7J,KA6nOR,CAJA,CAAA7P,GAIA,CAJmB,CAAA2H,EAAD,CArkOVC,EAqkOU,CAtgIJgT,OAsgII,CAvgIJC,MA2gId,CAHA,CAAAhB,GAGA,CAHe,CAAAC,GAGf,CAFA,CAAArX,GAEA,CAFgB,CAAAkX,GAAA,CAAkB,CAAAmB,GAAlB,CAAoD,CAAAf,GAEpE,CADA,CAAAjX,GACA,CADiB,CAAA8W,GAAA,CAAmB,CAAAmB,GAAnB,CAAoD,CAAAf,GACrE,CAAApZ,EAAA,CAAA,CAAAlgB,EAAA,CAAyB,CAAAinB,EAAD,CAzkOhBC,EAykOgB,CAAuC,EAAvC,CAA4C,EAApE,CANJ,GAQI,CAAA8R,GAKA,CALkB,CAKlB,CAJA,CAAA1Z,GAIA,CAnhIcgb,KAmhId,CAHA,CAAAnB,GAGA,CAHe,CAAAoB,GAGf,CAFA,CAAAxY,GAEA,CAFgB,CAAAkX,GAAA,CAAkB,CAAAuB,GAAlB,CAAqD,CAAAC,GAErE,CADA,CAAArY,GACA,CADiB,CAAA8W,GAAA,CAAmB,CAAAwB,GAAnB,CAAqD,CAAAC,GACtE,CAAAza,EAAA,CAAA,CAAAlgB,EAAA,CAAwB,EAAxB,CAbJ,CAbJ,CAyCAmoB,QAAA,GAAO,CAAPA,CAAO,CACP,CACI,IAAI9uB,EAAO,CAAAivB,EACLjvB,EAAN,CArnOYkvB,KAqnOZ,GACIlvB,CADJ,CACYA,CADZ,CACmB,KADnB,CACgF,CAAAg+B,GADhF,EACoG,CADpG,CAC0G,CAAAC,GAD1G,EAC8H,CAD9H,CAGA,OAAOj+B,EALX;AAcAgvB,QAAA,GAAO,CAAPA,CAAO,CAACuS,CAAD,CACP,CACIA,CAAA,EAAW,KAEX,IAAI,CAAAtS,EAAJ,EAAoBsS,CAApB,CAA6B,CACrBA,CAAJ,CAtoOQrS,KAsoOR,EAKQ,EAAE,CAAAD,EAAF,CA3oOAC,KA2oOA,CALR,GAMQ,CAAAiP,GACA,CADgB,CAAAN,EAChB,EAD+B,EAC/B,CADqC,KACrC,CAAA,CAAAO,GAAA,CAAe,CAAAP,EAAf,CAA6B,KAPrC,CAaA,EAAA5O,EAAA,CAAesS,CACf,EAAAvD,GAAA,EAAoBuD,CAApB,CA7pOQrS,EA6pOR,GAhpOQA,CAipOR,EAAA+O,GAAA,EAAoBsD,CAApB,CA/pOQrS,EA+pOR,GAlpOQA,CAmpOR,KAAI6O,EAAY,CACZwD,EAAJ,CAAe,GAAf,GACIxD,CACA,CA9rOIjI,CA8rOJ,CAAIyL,CAAJ,CAtqOIrS,CAsqOJ,GAAkC6O,CAAlC,EA/rOIjI,CA+rOJ,CAFJ,CAII,EAAAiI,GAAJ,EAAsBA,CAAtB,GACI,CAAAA,GACA,CADiBA,CACjB,CAAA6C,EAAA,CAAAA,CAAA,CAFJ,CAtByB,CAHjC,CAsCAxR,QAAA,GAAO,CAAPA,CAAO,CACP,CAUU,CAAAH,EAAN,CAnrOYC,KAmrOZ,GACI,CAAAiP,GADJ,CACoB,CAAAN,EADpB,EACmC,EADnC,CACyC,KADzC,CAGI2D,EAAAA,CAAS,CAAArD,GACTqD,EAAJ,CAAa,KAAb,GACIA,CADJ,EACeA,CADf,EACyB,CADzB,CAC+BA,CAD/B,EACyC,CADzC,EAC+C,KAD/C,CAGA,OAAOA,EAjBX,CA0BAlS,QAAA,GAAO,CAAPA,CAAO,CACP,CAUU,CAAAL,EAAN,CA9sOYC,KA8sOZ,GACI,CAAAkP,GADJ,CACmB,CAAAP,EADnB,CACiC,KADjC,CAGA,OAAO,EAAAO,GAbX,CAiCA3O,QAAA,GAAO,CAAPA,CAAO,CAACgS,CAAD,CACP,CAl9OY3N,IAs9OR,CAAI,CAAAjR,GAAJ,GACI4e,CADJ,EACe,GADf,CAGI,EAAA7T,EAAJ,EAAoB6T,CAApB,GACI,CAAA7T,EAEA,CAFe6T,CAEf,CADA,CAAAvD,GACA,CADgBuD,CAAD,CA5tOP5T,EA4tOO,CAtpID6T,OAspIC,CAzpIDC,MA0pId,CAAAf,EAAA,CAAAA,CAAA,CAHJ,CAPJ;AAuBAgB,QAAA,GAAQ,CAARA,CAAQ,CAACtf,CAAD,CAAOuf,CAAP,CAAeC,CAAf,CACR,CACI,CAAAzE,GAAA,CAAiB/a,CAEjBnB,GAAA,CAAAA,CAAA,CAAWmB,CAAX,CACAsR,GAAA,CAAAA,CAAA,CAAY,CAAZ,CAEAmO,EAxMAp7B,EAAAsX,MAAA,EACAmD,GAAA,CAuMA2gB,CAvMA,CAyMA,IAAIF,CAAJ,CAAY,CACR,CAAAve,EAAA,CAAa,CAAb,CAAA,CAAkBwe,CAAlB,EAA2B,CAC3B,KAASzqC,CAAT,CAAa,CAAb,CAAqB,CAArB,EAAgBA,CAAhB,CAAwBA,CAAA,EAAxB,CAA6B,CAAAisB,EAAA,CAAajsB,CAAb,CAAA,CAAkB,CAC/C,EAAAisB,EAAA,CAAa,CAAb,CAAA,CAA+B,IAC1B,EAAAvd,MAAAK,GAAL,CAGU,CAAAL,MAAAmb,EAHV,EAIIK,EAAA,CAAAA,CAAA,CAJJ,CACI,CAAAxb,MAAAyyB,GADJ,CAC2B,CAAA,CALnB,CAAZ,IAYQ,EAAA/xB,EAAJ,EAAgB,CAAAV,MAAAK,GAAhB,CAUSob,CAAA,CAAAA,CAAA,CAVT,EAU4B,CAAA5a,EAAAb,MAAAkY,MAV5B,GAWQoc,EAAA,CAAA,CAAA5zB,EAAA,CACA,CAAAub,EAAA,CAAA,CAAApb,EAAA,CAAyB,EAAzB,CAZR,EAeoB,CAAA,CAfpB,GAeSi7B,CAfT,EAgBIrgB,CAAA,CAAAA,CAAA,CAGJ,EAACwgB,CApgDEj8B,MAAAmb,EAogDP,EAAyB,CAAA5C,GAAzB,EAAqC,CAAAA,GAAAH,KAAA,EAvCzC,CAkDA3S,CAAAmvB,GAAA,CAAAA,QAAW,EACX,CACI,MAAO,EADX,CAUAnvB;CAAA8T,KAAA,CAAAA,QAAI,EACJ,CACI,IAAIC,EAAQ,IAAIC,CAAJ,CAAU,IAAV,CACZD,EAAAE,IAAA,CAAU,CAAV,CAAa,CACT,IAAA6D,EADS,CAET,IAAAkO,GAFS,CAGT,IAAAG,EAHS,CAIT,IAAAhE,EAJS,CAKT,IAAAD,EALS,CAMT,IAAAI,GANS,CAOT,IAAAyE,GAPS,CAQT,IAAA9G,EARS,CAST,IAAAuH,GATS,CAUT,IAAAG,GAVS,CAWT,IAAAI,GAXS,CAYT,IAAAyK,GAZS,CAaT,IAAAC,GAbS,CAcT,IAAAL,GAdS,CAeT,IAAAS,EAfS,CAgBT,IAAAR,EAhBS,CAiBT,IAAAP,GAjBS,CAkBT,IAAA6B,GAlBS,CAmBT,IAAAD,GAnBS,CAoBT,IAAA7B,GApBS,CAAb,CAsBA9d,EAAAE,IAAA,CAAU,CAAV,CAAa,CAACiU,EAAA,CAAAA,IAAA,CAAD,CAAe5E,EAAA,CAAAA,IAAA,CAAf,CAA8BM,EAAA,CAAAA,IAAA,CAA9B,CAA6CE,EAAA,CAAAA,IAAA,CAA7C,CAA4D2S,IAxHlErU,EAwHM,CAAb,CACArO,EAAAE,IAAA,CAAU,CAAV,CAAa,CAAC,IAAAyZ,GAAD,CAAoBgJ,IAnvC1BnK,GAmvCM,CAAqC,IAAAhyB,MAAAyyB,GAArC,CAAb,CACAjZ,EAAAE,IAAA,CAAU,CAAV,CAAa0iB,EAAA,CAAAA,IAAA,CAAb,CACA5iB,EAAAE,IAAA,CAAU,CAAV,CAAa4c,EAAA,CAAAA,IAAA,CAAb,CACA,OAAO9c,EAAAvf,KAAA,EA5BX,CAsCAwL;CAAA6T,QAAA,CAAAA,QAAO,CAACrf,CAAD,CACP,CAKI,IAAA,EAAAyuB,EAAA,CAqBIzuB,CAAA,CAAK,CAAL,CArBJ,CACI,KAAAsjB,EADJ,CAAA,CAAA,KAAA,EAAA,MAEI,KAAAkO,GAFJ,CAAA,CAAA,KAAA,EAAA,MAGI,KAAAG,EAHJ,CAAA,CAAA,KAAA,EAAA,MAII,KAAAhE,EAJJ,CAAA,CAAA,KAAA,EAAA,MAKI,KAAAD,EALJ,CAAA,CAAA,KAAA,EAAA,MAMI,KAAAI,GANJ,CAAA,CAAA,KAAA,EAAA,MAOI,KAAAyE,GAPJ,CAAA,CAAA,KAAA,EAAA,MAQI,KAAA9G,EARJ,CAAA,CAAA,KAAA,EAAA,MASI,KAAAuH,GATJ,CAAA,CAAA,KAAA,EAAA,MAUI,KAAAG,GAVJ,CAAA,CAAA,KAAA,EAAA,MAWI,KAAAI,GAXJ,CAAA,CAAA,KAAA,EAAA,MAYI,KAAAyK,GAZJ,CAAA,CAAA,KAAA,EAAA,MAaI,KAAAC,GAbJ,CAAA,CAAA,KAAA,EAAA,MAcI,KAAAL,GAdJ,CAAA,CAAA,KAAA,EAAA,MAeI,KAAAS,EAfJ,CAAA,CAAA,KAAA,EAAA,MAgBI,KAAAR,EAhBJ,CAAA,CAAA,KAAA,EAAA,MAiBI,KAAAP,GAjBJ,CAAA,CAAA,KAAA,EAAA,MAkBI,KAAA6B,GAlBJ,CAAA,CAAA,KAAA,EAAA,MAmBI,KAAAD,GAnBJ,CAAA,CAAA,KAAA,EAAA,MAoBI,KAAA7B,GApBJ,CAAA,CAAA,KAAA,EAAA,MAuBIxmC,EAAAA,CAAImJ,CAAA,CAAK,CAAL,CACR4zB,GAAA,CAAAA,IAAA;AAAY/8B,CAAA,CAAE,CAAF,CAAZ,CACAm4B,GAAA,CAAAA,IAAA,CAAan4B,CAAA,CAAE,CAAF,CAAb,CACA,KAAAsnC,GAAA,CAAetnC,CAAA,CAAE,CAAF,CACf,KAAAunC,GAAA,CAAevnC,CAAA,CAAE,CAAF,CACf44B,GAAA,CAAAA,IAAA,CAAa54B,CAAA,CAAE,CAAF,CAAb,CAEAA,EAAA,CAAImJ,CAAA,CAAK,CAAL,CACJ,KAAAk5B,GAAA,CAAoBriC,CAAA,CAAE,CAAF,CACpBqkC,GAAA,CAAAA,IAAA,CAAcrkC,CAAA,CAAE,CAAF,CAAd,CACA,KAAAkP,MAAAyyB,GAAA,CAAuB3hC,CAAA,CAAE,CAAF,CAEN,EAAA,CAAAmJ,CAAA,CAAK,CAAL,CAqbjB,KAAK,IAAI3I,EAAI+qC,CAAA7mC,OAAJlE,CAAyB,CAAlC,CAA0C,CAA1C,EAAqCA,CAArC,CAA6CA,CAAA,EAA7C,CAAkD,CAC9C,IAAI61B,CAxDZ,EAAA,CAAA,CACI,IAAS71B,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CA/XAgrC,IA+XoBhD,GAAA9jC,OAApB,CAAuClE,CAAA,EAAvC,CAA4C,CACxC,IAAI61B,EAhYRmV,IAgYchD,GAAA,CAAWhoC,CAAX,CACV,IAAI61B,CAAAuT,GAAJ,GAqDuB2B,CAAA3B,CAAYppC,CAAZopC,CArDvB,CAA2B,CAAA,CAAA,CAAOvT,CAAP,OAAA,CAAA,CAFa,CAI5C,CAAA,CAAO,IALX,CA0DYA,CAAJ,GACIA,CAAAoV,KACA,CA1bRD,IAybmBjD,EACX,CA1bRiD,IA0bQjD,EAAA,CAAelS,CAFnB,CAH8C,CApb/B,CAAA,CAAAltB,CAAA,CAAK,CAAL,CAn8BnB,KAAS3I,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAm8BAkrC,IAn8BoBxJ,GAAAx9B,OAApB,EAA2ClE,CAA3C,CAA+CilC,CAAA/gC,OAA/C,CAAoElE,CAAA,EAApE,CAm8BAkrC,IAl8BgBxJ,GAAA71B,CAAa7L,CAAb6L,CACZ,CAAM,CAAN,CAAA,CAAWo5B,CAAA,CAAajlC,CAAb,CAk8Bf,OAAO,CAAA,CA1CX,CA6DAmrC,SAAA,GAAK,CAALA,CAAK,CACL,CACI,MAAQ,EAAAhF,EAAD,CAAc,KAAd,CA5mPKjM,CA4mPL,CAAsC,CADjD,CA8BAkR,QAAA,GAAK,CAALA,CAAK,CACL,CACI,MAAQ,EAAAhF,EAAD,CAAc,KAAd,CA1oPKlM,CA0oPL,CAAqC,CADhD,CA8BAmR,QAAA,GAAK,CAALA,CAAK,CACL,CACI,MAAQ,EAAAhF,EAAD,CAAc,KAAd,CAAuB,CAAvB,CAxqPKnM,CAuqPhB,CA8BAoR,QAAA,GAAK,CAALA,CAAK,CACL,CACI,MAAQ,EAAAhF,EAAD,CAAc,KAAd,CAtsPKpM,CAssPL,CAAsC,CADjD;AA0CAqR,QAAA,GAAS,CAATA,CAAS,CAACna,CAAD,CACT,CACI,IAAIoa,EAAK,CAAAvf,EAAA,CAxlPGwf,CAwlPH,CACT,EAAAxf,EAAA,CAzlPYwf,CAylPZ,CAAA,CAA8BD,CAA9B,CAAmCpa,CAAnC,CAA0C,KAC1C,OAAOoa,EAHX,CAaAE,QAAA,GAAM,CAANA,CAAM,CAACC,CAAD,CAASC,CAAT,CACN,CACQA,CAAJ,GAKI9hB,EAAA,CAAAA,CAAA,CAAW+hB,CAgBR5f,EAAA,CA3nPKwf,CA2nPL,CAhBH,EAJYE,CAIZ,EAJsB,EAItB,EAJ6B,EAI7B,EACA,CAAA,CAAA3J,EAAA,EAAoB,CANxB,CAQA,EAAAA,EAAA,EAAqB,CATzB,CAyDAlY,QAAA,GAAK,CAALA,CAAK,CAACmB,CAAD,CACL,CACI,CAAAgB,EAAA,CAhqPYwf,CAgqPZ,CAAA,CAA6BxgB,CAA7B,CAAoC,KADxC,CAyCA8K,QAAA,GAAM,CAANA,CAAM,CAACqT,CAAD,CAAS0C,CAAT,CAAmB5iC,CAAnB,CACN,CACQ2sB,CAAAA,CAAM,CAACuT,GAAQA,CAAT,CAAiB0C,GAAUA,CAA3B,CAAqC5iC,QAASA,CAATA,EAAoB,CAAzD,CAA4DmF,KAAM09B,EAAA,CAAc3C,CAAd,CAAlE,CAAyF6B,KAAM,IAA/F,CACV,EAAAjD,GAAAz+B,KAAA,CAAgBssB,CAAhB,CACA,OAAOA,EAHX,CA4CAmW,QAAA,GAAS,CAATA,CAAS,CAACnW,CAAD,CACT,CACI,IAAIoW,EAAU,CAAAlE,EACd,IAAIkE,CAAJ,EAAepW,CAAf,CACI,CAAAkS,EAAA,CAAelS,CAAAoV,KADnB,KAGI,KAAA,CAAOgB,CAAP,CAAA,CAAgB,CACZ,IAAIlE,EAAUkE,CAAAhB,KACd,IAAIlD,CAAJ,EAAelS,CAAf,CAAoB,CAChBoW,CAAAhB,KAAA,CAAelD,CAAAkD,KACf,MAFgB,CAIpBgB,CAAA,CAAUlE,CANE,CAehB,CAAAA,EAAJ,GACI,CAAAf,EADJ,EA1zPYkF,CA0zPZ,CApBJ;AA+BAtW,QAAA,GAAM,CAANA,CAAM,CAACC,CAAD,CACN,CACI,GAAIA,CAAJ,CAAS,CAhET,GAiEmBA,CAjEnB,EAiEIsW,CAjEOpE,EAAX,CAAyB,CACrB,IAAIkE,EAgEJE,CAhEcpE,EACd,IAAI,CAACkE,CAAL,EAAgBA,CAAAH,GAAhB,EA+DejW,CA/DqBiW,GAApC,CA+DejW,CA9DXoV,KACA,CADWgB,CACX,CA6DJE,CA7DIpE,EAAA,CA6DWlS,CA/Df,MAII,EAAG,CACC,IAAIkS,EAAUkE,CAAAhB,KACd,IAAI,CAAClD,CAAL,EAAgBA,CAAA+D,GAAhB,EAyDOjW,CAzD6BiW,GAApC,CAAkD,CAyD3CjW,CAxDHoV,KAAA,CAAWlD,CACXkE,EAAAhB,KAAA,CAuDGpV,CAtDH,MAH8C,CAKlDoW,CAAA,CAAUlE,CAPX,CAAH,MAQSkE,CART,CAJJ,CAFqB,CAiErBE,CA5CJnF,EAAA,EA5xPYkF,CAy0PJrW,EAAA3sB,QAAJ,EAAmB+M,CAAA,CAAAA,CAAA,CAAoB4f,CAAA3sB,QAApB,CAxnOfka,CAwnOe,CAAnB,EACIjN,CAAA,CAAAA,CAAA,CAAkB,mBAAlB,CAAqCqT,CAAA,CAAUqM,CAAAuT,GAAV,CAArC,CAA6D,eAA7D,CAA4EvT,CAAAiW,GAA5E,CAA2F,GAA3F,CAAgG,CAAA,CAAhG,CAAsG,CAAA,CAAtG,CAHC,CADb,CAeAvU,QAAA,GAAQ,CAARA,CAAQ,CAAC1B,CAAD,CACR,CACQA,CAAJ,GACImW,EAAA,CAAAA,CAAA,CAAenW,CAAf,CACA,CAAIA,CAAA3sB,QAAJ,EAAmB+M,CAAA,CAAAA,CAAA,CAAoB4f,CAAA3sB,QAApB,CAxoOfka,CAwoOe,CAAnB,EACIjN,CAAA,CAAAA,CAAA,CAAkB,qBAAlB,CAAuCqT,CAAA,CAAUqM,CAAAuT,GAAV,CAAvC,CAA+D,eAA/D,CAA8EvT,CAAAiW,GAA9E,CAA6F,GAA7F,CAAkG,CAAA,CAAlG,CAAwG,CAAA,CAAxG,CAHR,CADJ,CAqDAhB,QAAA,GAAQ,CAARA,CAAQ,CACR,CACI,IAAIC,EAAc,EAElB,KADIlV,CACJ,CADU,CAAAkS,EACV,CAAOlS,CAAP,CAAA,CACIkV,CAAAxhC,KAAA,CAAiBssB,CAAAuT,GAAjB,CACA,CAAAvT,CAAA,CAAMA,CAAAoV,KAEV,OAAOF,EAPX;AAuIAqB,QAAA,GAAU,CAAVA,CAAU,CACV,CACI,MAAI,EAAApF,EAAJ,CA7gQYkF,EA6gQZ,EACI,CAAA7X,GAAA,CA5kQQnR,GA4kQR,CA9gQQgpB,EA8gQR,CA/jQSG,EA+jQT,CACO,CAAA,CAAA,CAFX,EAII,CAAArF,EAAJ,CAlhQYkF,EAkhQZ,EACI,CAAA7X,GAAA,CAxlQQnR,CAwlQR,CAnhQQgpB,EAmhQR,CApkQSG,EAokQT,CACO,CAAA,CAAA,CAFX,EAII,CAAArF,EAAJ,CAvhQYkF,EAuhQZ,EACI,CAAA7X,GAAA,CA1lQQnR,EA0lQR,CAxhQQgpB,EAwhQR,CAtkQSG,EAskQT,CACO,CAAA,CAAA,CAFX,EAIO,CAAA,CAbX,CAiCAhQ,QAAA,GAAM,CAANA,CAAM,CACN,CAEI,MAAO,EAAApC,EAAP,CAAsB,CAAAA,EAAtB,CADWrO,KACX,CAA4C0f,EAAA,CAAAA,CAAA,CAA5C,CAA2DD,EAAA,CAAAA,CAAA,CAA3D,CAA0ED,EAAA,CAAAA,CAAA,CAA1E,CAAyFD,EAAA,CAAAA,CAAA,CAF7F,CAmBA5O,QAAA,GAAM,CAANA,CAAM,CAAC+P,CAAD,CACN,CACIA,CAAA,EAAU,CAAA7E,GACV,EAAAnB,EAAA,CAAagG,CAAb,EAAuB,EACvB,EAAAjG,EAAA,CAAc,CAACiG,CAAf,CAAyB,CACzB,EAAAlG,EAAA,CAAakG,CAAb,EAAuB,EACvB,EAAAnG,EAAA,CAAamG,CAAb,EAAuB,EACvB,KAAKA,CAAL,CAAc,CAAArS,EAAd,EAA6B,CAAAyN,GAA7B,CAII,IAAK,IAAI1nC,EAAI,CAAAm6B,GAAAj2B,OAAb,CAAyC,CAAzC,EAAkC,EAAElE,CAApC,CAAA,CAA6C,CACzC,IAAIusC,EAAM,CAAAtgB,EAAA,CAAajsB,CAAb,CACV,EAAAisB,EAAA,CAAajsB,CAAb,CAAA,CAAkB,CAAAm6B,GAAA,CAAan6B,CAAb,CAClB,EAAAm6B,GAAA,CAAan6B,CAAb,CAAA,CAAkBusC,CAHuB,CAMjD,CAAArG,EAAA,CAAgBoG,CAAhB,EA7qQYpS,EA6qQZ,CA5sQYW,CA6sQR2R,EAAAA,CAAW,CAAAvS,EAAXuS,EA9qQQtS,EA8qQRsS,CA7sQQ3R,CA8sQR,EAAAqL,EAAJ,EAAoBsG,CAApB,GAII,CAAAlS,EAAA,CAAkBkS,CAAlB,CACA,CAD6B,CAAAvgB,EAAA,CAAa,CAAb,CAC7B,CAAA,CAAAA,EAAA,CAAa,CAAb,CAAA,CAAkB,CAAAqO,EAAA,CAAkB,CAAA4L,EAAlB,CALtB,CAOA,EAAAjM,EAAA,CAAcqS,CAOd,EAAAtF,EAAA,EAAgB,EAChB,EAAAA,EAAA,EAAiB,CAAAe,EAAA,CA1mQLmE,CA0mQK,CA3mQLA,CA0kQhB,CA2EAlQ,QAAA,GAAM,CAANA,CAAM,CAACyQ,CAAD,CACN,CAEI,GADAA,CACA,EAluQYC,KAkuQZ,CAAY,CACR,IAAIC,EAAOF,CAAPE,EA/tQID,CAguQR,GACID,EAAA,EAnuQIC,EAkuQR,OAESC,CAFT,GAEkB,CAFlB,CAGA,EAAA3F,EAAA,EA7pQQkF,CAwpQA,CAOZ,CAAApQ,GAAA,CAAc2Q,CATlB;AAoBAt4B,CAAAy4B,GAAA,CAAAA,QAAc,CAACzC,CAAD,CACd,CACI,IAAA7D,EAAA,CAAa,IAAAD,EAAb,CAA0B8D,CAC1B,KAAA/D,EAAA,CAAa,CAFjB,CA4BAjyB,EAAA04B,GAAA,CAAAA,QAAc,CAAC1C,CAAD,CAAS2C,CAAT,CACd,CACI,IAAAxG,EAAA,CAAa,IAAAD,EAAb,CAA0B,IAAAF,EAA1B,CAAuCgE,CACvC,KAAA/D,EAAA,CAAa0G,CAAb,EAAyB,CAF7B,CA2EAC,SAAA,GAAgB,CAAhBA,CAAgB,CAAC5C,CAAD,CAChB,CACI,CAAA7D,EAAA,CAAa,CAAAD,EAAb,CAA0B,CAAAF,EAA1B,CAAuCgE,CACvC,EAAA/D,EAAA,CAAa,CAAAE,EAAb,CAA2B,CAAAH,EAA3B,EAAyC,CAF7C,CAgBA6G,QAAA,GAAc,CAAdA,CAAc,CAAC7C,CAAD,CAAS8C,CAAT,CAAcC,CAAd,CACd,CACI,CAAA5G,EAAA,CAAa,CAAAD,EAAb,CAA0B,CAAAF,EAA1B,CAAuCgE,CACvC,EAAA/D,EAAA,EAAc6G,CAAd,CAAoBC,CAApB,GAA4BA,CAA5B,CAAkC/C,CAAlC,CAFJ;AAiBAh2B,CAAAkgB,GAAA,CAAAA,QAAI,CAAC+U,CAAD,CAAS+D,CAAT,CAAeC,CAAf,CACJ,CAQI,GAAItiB,CAAA,IAAAA,GAAJ,CAAA,CAEmB,CAAnB,CAAI,IAAAmb,GAAJ,CACI,IAAAA,GADJ,CACmB5J,EAAA,CAAAA,IAAA,CADnB,CAEY,IAAA6J,EAFZ,GAGIkH,CAHJ,CA52Qaf,EA42Qb,CA52QaA,GAk3Qb,EAAIe,CAAJ,GACQ,IAAApG,EASJ,CAt0QQkF,GAs0QR,GARIkB,CAQJ,CA/3QSf,EA+3QT,EANA,IAAArF,EAMA,EAt0QQkF,GAs0QR,CADA,IAAA9X,EACA,EAxwQQW,CAwwQR,CAAA,IAAA9I,EAAA,CAAa,CAAb,CAAA,CAAkBmd,CAAlB,CAA2B,CAV/B,CAaA,IAl4QaiD,EAk4Qb,EAAIe,CAAJ,CAAkC,CAa9B,IAAA5G,EAAA,CAAc4C,CAAd,CAAuB,UAKvB,KAAAlD,EAAA,CAAe,CACf,KAAImH,EAAQ,IAAAhc,GAAA,CAAc+X,CAAd,CAAuB,IAAAd,GAAvB,CAAZ,CACIgE,EAAS,IAAAjb,GAAA,CAAgB+X,CAAhB,CAAyB,CAAzB,CAA8B,KAA9B,CAAwC,IAAAd,GAAxC,CAKb/L,GAAA,CAAAA,IAAA,CAAa+P,CAAb,CAAsB,MAAtB,CAA4C,IAAArG,GAA5C,EAA4D,CAA5D,CA18QQ/L,KA08QR,CAEAoT,GAAA,CAAAA,IAAA,CAAc,IAAArH,GAAd,CACAqH,GAAA,CAAAA,IAAA,CAAc,IAAArhB,EAAA,CAAa,CAAb,CAAd,CACAnC,GAAA,CAAAA,IAAA,CAAWujB,CAAX,CA7B8B,CAqClC,IAAArL,EAAA,EAAqB,CAgCrB,KAAAgF,EAAA,EAAgB,EAAEmG,CAAF,CAv5QJjB,EAu5QI,CAChB,KAAAlF,EAAA,EAAgB,GAEhB,KAAAf,GAAA,CAAgB,EAMhB,KAAA6B,GAAA,CAAkBsF,CAClB,KAAAvF,GAAA,CAAkBuB,CAj9QLiD,GAm9Qb,EAAIe,CAAJ,EACIjjB,CAAA,CAAAA,IAAA,CAEJ,IAn9QakiB,EAm9Qb,EAAIe,CAAJ,CAAgC,KAAMhE,EAAN,CAzGhC,CARJ,CAyHAmE;QAAA,GAAU,CAAVA,CAAU,CACV,CAKI,IAAItiB,EAAOuiB,EAAA,CAAAA,CAAA,CAAX,CACIlB,EAASkB,EAAA,CAAAA,CAAA,CACT,EAAAvT,EAAJ,CAphRYC,KAohRZ,GAOIoS,CAPJ,CAOcA,CAPd,CAOuB,IAPvB,CAO0C,CAAArS,EAP1C,CAOyD,KAPzD,CASAnQ,GAAA,CAAAA,CAAA,CAAWmB,CAAX,CACAsR,GAAA,CAAAA,CAAA,CAAY+P,CAAZ,CACA,EAAAtF,EAAA,EAAgB,GAlBpB,CAmEAyG,QAAA,GAAS,CAATA,CAAS,CAACxiB,CAAD,CACT,CACI,IAAIyiB,EAAOziB,CAAPyiB,EAAe,EAAfA,CAAqB,EACf,GAAV,CAAIA,CAAJ,GAKQziB,CALR,CACQ,CAAAsL,EAAJ,CAt4QQC,EAs4QR,CAIY,CAAAC,GAAA,CAAgBiX,CAAhB,CAJZ,EAIoCziB,CAJpC,CAI2C,IAJ3C,EAj0Kcof,OAi0Kd,CAiBIpf,CAjBJ,CAiBY,QAlBhB,CAqBA,OAAOA,EAvBX;AAkCA0iB,QAAA,GAAW,CAAXA,CAAW,CAAC1iB,CAAD,CAAO2iB,CAAP,CACX,CACI,IAAIpuC,EAAI,EAGR,IAAIouC,CAAJ,CAAe,CACXC,CAAA,CAAeJ,EAAA,CAAAA,CAAA,CAAexiB,CAAf,CACf,KAAIyiB,EAAOziB,CAAPyiB,EAAe,EAAfA,CAAqB,EACzBluC,EAAA+J,KAAA,CAAOskC,CAAP,CACAruC,EAAA+J,KAAA,CAAOmkC,CAAP,CACI,EAAAnX,EAAJ,CA/6QQC,EA+6QR,GACIh3B,CAAA+J,KAAA,CAAO,CAAAktB,GAAA,CAAgBiX,CAAhB,CAAP,CACA,CAAAluC,CAAA+J,KAAA,CAAO0hB,CAAP,CAAc,IAAd,CAFJ,CALW,CAAf,IAUK,IAAK,CAAAyb,GAAL,CAKA,CACGoH,CAAAA,CAAO,CAAA5H,EAAP4H,EAAuB,CAC3B,KAAIC,EAAO9iB,CAAP8iB,EAAe,EACR,EAAX,CAAIA,CAAJ,GAAcD,CAAd,EAAsB,CAAtB,CACM,EAAAvX,EAAN,CAAqB,CAAA0Q,GAAA,CAAa,CAAAf,EAAb,CAArB,GAAkD6H,CAAlD,EAA0D,CAA1D,CAEU9iB,EAANmG,EAAa,IACjB,KAAI4c,EAAO,CAAA1X,EAAA,CAAa,CAAA4P,EAAb,CAAA,CAA2B6H,CAA3B,CAAPC,EAA2C,CAC/CH,EAAA,CAAgBG,CAAhB,CAAsB5c,CAAtB,CAA6B,CAAAyV,GA73KfoH,QA83Kd,EAAIJ,CAAJ,GAA2CA,CAA3C,CAA0DJ,EAAA,CAAAA,CAAA,CAAeI,CAAf,CAA1D,CACAruC,EAAA+J,KAAA,CAAOskC,CAAP,CACAruC,EAAA+J,KAAA,CAAO6nB,CAAP,CACA5xB,EAAA+J,KAAA,CAAOukC,CAAP,CACAtuC,EAAA+J,KAAA,CAAOwkC,CAAP,CAAc,CAAd,CACAvuC,EAAA+J,KAAA,CAAOykC,CAAP,CACAxuC,EAAA+J,KAAA,CAAO,CAAAs9B,GAAP,CAfC,CALA,IACDgH,EAEA,CAFe5iB,CAEf,CAFsB,KAEtB,CA33Kc2e,KA23Kd,EADIiE,CACJ,GAD2CA,CAC3C,EAD2D,CAAAjf,GAC3D,EAAApvB,CAAA+J,KAAA,CAAOskC,CAAP,CAmBJ,OAAOruC,EApCX;AA0FAwrB,QAAA,GAAoB,CAApBA,CAAoB,CAACkjB,CAAD,CAAcha,CAAd,CACpB,CAMI,GAAI,EAAEA,CAAF,CAAW,CAAAwS,GAAX,CAAJ,CAAgC,CAC5B,IAAAzb,EAAOijB,CAAPjjB,CAAqB,KA58KP2e,MA68Kd,EAAI3e,CAAJ,GAAmCA,CAAnC,EAA2C,CAAA2D,GAA3C,CACA,OAAO3D,EAHqB,CAMhC,IAAA8iB,EAAOG,CAAPH,EAAsB,EAChB,EAAAxX,EAAN,CAAqB,CAAA0Q,GAAA,CAAa,CAAAf,EAAb,CAArB,GAAkD6H,CAAlD,EAA0D,CAA1D,CACA,KAAAI,EAAM,CAAA9X,EAAA,CAAa,CAAA6P,EAAb,CAAA,CAA2B6H,CAA3B,CACN9iB,EAAA,EAAS,CAAAqL,EAAA,CAAa,CAAA4P,EAAb,CAAA,CAA2B6H,CAA3B,CAAT,EAA6C,CAA7C,GAAmDG,CAAnD,CAAiE,IAAjE,EAA4E,CAAArH,GA58K1DoH,QA88KlB,EAAIhjB,CAAJ,GAAmCA,CAAnC,CAA0CwiB,EAAA,CAAAA,CAAA,CAAexiB,CAAf,CAA1C,CAEA,IAAI,CAAAH,GAAJ,CAAwB,MAAOG,EAqB3BA,EAAJ,EAAY,CAAAwb,GAAZ,EAAgCxb,CAAhC,CAAuC,CAAA2D,GAAvC,EACI,CAAAwF,EACA,EAjlRQW,EAilRR,CAAA,CAAAV,GAAA,CA3tRQnR,CA2tRR,CAA0B,CAA1B,CAA6B+H,CAA7B,CAFJ,EAIUA,CAJV,CAIiB,CAJjB,EAIyB,EAAEiJ,CAAF,CAxmRbuK,CAwmRa,CAJzB,GAKI,CAAArK,EACA,EAplRQW,EAolRR,CAAA,CAAAV,GAAA,CA/tRQnR,CA+tRR,CAA0B,CAA1B,CAA6B+H,CAA7B,CANJ,CASA,KAAIif,EAAU,CACd,QAAQiE,CAAR,CAviRYC,CAuiRZ,EAEA,KAhjRYA,CAgjRZ,CACIlE,CAAA,CA9kRQrS,IAilRZ,MAnjRYuW,CAmjRZ,CACID,CAAA,EAziRQC,GA0iRJla,EAAJ,CApnRQuK,CAonRR,GACIyL,CADJ,CAllRQrS,IAklRR,CAGA,MAEJ,MAxjRYuW,CAwjRZ,CACIlE,CAAA,CAzlRQrS,IA4lRZ,MA3jRYuW,CA2jRZ,CACQla,CAAJ,CA9nRQuK,CA8nRR,GACIyL,CADJ,CA7lRQrS,IA6lRR,CAKJ,MAhkRYuW,CAgkRZ,CACID,CAAA,EAASja,CAAD,CApoRAuK,CAooRA,CAAiC,GAAjC,CA1jRA2P,GA2jRR,MAEJ,SACIlE,CAAA,CApmRQrS,KAwkRZ,CAjiRYuW,KAikRZ,GAAKD,CAAL,CAAY,KAAZ,IAMQA,CAAJ,CA3kRQC,CA2kRR,CACQD,CADR,CAvkRQC,KAukRR,GAEaF,CAFb,CAE2B,IAF3B,GAEuCC,CAFvC,EAE8C,CAF9C,CAEmD,IAFnD,IAGYjE,CAHZ,EA/mRQrS,KA+mRR,GAOSqW,CAPT,CAOuB,IAPvB,GAOmCC,CAPnC,EAO0C,CAP1C;AAO+C,IAP/C,IAQQjE,CARR,EA/mRQrS,KA+mRR,CANJ,CAsBA,EAAAxB,EAAA,CAAa,CAAA6P,EAAb,CAAA,CAA2B6H,CAA3B,CAAA,CAAmCI,CACnC,IAAIljB,CAAJ,GAAc,OAAd,CAA2D,CAAA4b,GAA3D,GAA4E,CAAAX,EAA5E,CACI,CAAAS,GACA,CADmB,CAAAT,EACnB,CAAA,CAAAU,GAAA,CAAmBmH,CAGnB7D,EAAJ,GACQA,CAoBJ,CAxpRQrS,KAwpRR,GAnBwB,CAiBpB,EAjBI,CAAAoO,GAiBJ,GAhBIiE,CAgBJ,EA9pRIrS,GA8pRJ,EAdM,CAAAD,EAcN,CAtpRIC,KAspRJ,GAbIqS,CAEA,EAFY,CAAAtS,EAEZ,CA/oRAC,IA+oRA,CAFmD,CAAA8O,GAEnD,EAFuE,CAEvE,CAF6E,CAAAC,GAE7E,EAFiG,CAEjG,CAAAjP,EAAA,CAAAA,CAAA,CAAc,CAAAC,EAAd,CAA6B,MAA7B,CAAoDsS,CAApD,CA1oRArS,KA0oRA,CAWJ,EAAA,CAAAxD,GAAA,CA1yRInR,GA0yRJ,CA5uRIgpB,EA4uRJ,CAjyRKG,EAiyRL,CAEJ,EAAM,CAAAzU,EAAN,CAAsB,KAAtB,EAIQ,EAAA3M,CAAA,EAAS,OAAT,CAAwD,CAAA4b,GAAxD,GACA5b,CADA,EACS,OADT,CAC8D,CAAA4b,GAD9D,EAJR,GAMQ,CAAAjP,EACA,EAnqRAC,IAmqRA,CAAI,CAAAD,EAAJ,CArqRAC,GAqqRA,GAAyC,CAAAmP,EAAzC,EArvRAkF,EAqvRA,CAPR,CArBJ,CAgCA,OAAOjhB,EA9IX,CAuJAuiB,QAAA,GAAO,CAAPA,CAAO,CACP,CACI,IAAIrD,EAAS,CAAA9Y,GAAA,CAAc,CAAApF,EAAA,CAAa,CAAb,CAAd,CAAgC,CAAAqc,GAAhC,CACb,EAAArc,EAAA,CAAa,CAAb,CAAA,CAAmB,CAAAA,EAAA,CAAa,CAAb,CAAnB,CAAqC,CAArC,CAA0C,KAC1C,OAAOke,EAHX,CAYAmD,QAAA,GAAQ,CAARA,CAAQ,CAAC3kC,CAAD,CACR,CACI,IAAIulC,EAAe,CAAAjiB,EAAA,CAAa,CAAb,CAAfiiB,CAAiC,CAAjCA,CAAsC,KAC1C,EAAAjiB,EAAA,CAAa,CAAb,CAAA,CAAkBiiB,CAClB,EAAA1H,EAAA,CAAe,CAAAA,EAAf,CAA6B,KAA7B,EAAyC,CAAAA,EAAzC,CAAuD,MAAvD,GAAmE,CAAnE,CAAyE,QACnE,EAAAQ,EAAN,CAjxRYkF,GAixRZ,EAA6C,CAAA3E,GAAA,CA1mQ1Brc,CA0mQ0B,CAA+C,EAA/C,CAAkDgjB,CAAlD,CAC7C,EAAAxc,GAAA,CAAewc,CAAf,CAA4BvlC,CAA5B,CALJ;AAsDA0lC,QAAA,GAAa,CAAbA,CAAa,CAACP,CAAD,CAAOna,CAAP,CAAYO,CAAZ,CACb,CAAA,IAEQoU,EAAcpU,CAAD,CAtxRLuK,CAsxRK,CAA8B,CAA9B,CAAkC,CAAA6J,GAMnD,QAAQwF,CAAR,EASA,KAAK,CAAL,CAEI,MADA,EAAAzZ,GAAA,CA/5RQnR,CA+5RR,CAA0B,CAA1B,CA74RSmpB,EA64RT,CACO,CAAA,CAKX,MAAK,CAAL,CAGI,MAFW,EAEH,EAFJ1Y,CAEI,EAFM,CAAA4T,GAAA,CAAqBrT,CAArB,CAA6B,CAA7B,CAAgC,CAAAjI,EAAA,CAAa,CAAb,CAAhC,CAEN,CADR,CAAA+V,EACQ,EADa,CACb,CAAO,CAAP,EAAArO,CAAA,CAAU,CAAA1H,EAAA,CAAa0H,CAAb,CAAV,CAA+B,CAAA1H,EAAA,CAAa0H,CAAb,CAA/B,CAAmD2U,CAK/D,MAAK,CAAL,CACI,IAAAgG,EAAO,CACP,KAAAJ,EAAc,CAAAjiB,EAAA,CAAa0H,CAAb,CACH,EAAX,EAAIA,CAAJ,EAAc,CAAA4T,GAAA,CAAqBrT,CAArB,CAA6Boa,CAA7B,CAAmCJ,CAAnC,CACH,EAAX,EAAIva,CAAJ,GACIua,CACA,EADe5F,CACf,CAAU,CAAV,CAAI3U,CAAJ,EAAgBO,CAAhB,CA9zRIuK,CA8zRJ,GAA6C6P,CAA7C,CAAoD,CAApD,CAFJ,CAIA,EAAAtM,EAAA,EAAqB,CACrB,MAKJ,MAAK,CAAL,CACIsM,CAAA,CAAO,CACPJ,EAAA,CAAc,CAAAjiB,EAAA,CAAa0H,CAAb,CACH,EAAX,EAAIA,CAAJ,GAAcua,CAAd,EAA6B5F,CAA7B,CACA4F,EAAA,CAAc,CAAA7c,GAAA,CAAc6c,CAAd,CACdA,EAAA,EAAe5F,CACf,EAAAtG,EAAA,EAAqB,CACrB,MAKJ,MAAK,CAAL,CACIsM,CAAA,CAAQ,EACE,EAAV,CAAI3a,CAAJ,EAAgBO,CAAhB,CAp1RQuK,CAo1RR,GAA6C6P,CAA7C,CAAqD,EAArD,CACAJ,EAAA,CAAe,CAAAjiB,EAAA,CAAa0H,CAAb,CAAf,CAAmC2a,CAAnC,CAA2C,KAChC,EAAX,EAAI3a,CAAJ,EAAc,CAAA4T,GAAA,CAAqBrT,CAArB,CAA6Boa,CAA7B,CAAmCJ,CAAnC,CACH,EAAX,EAAIva,CAAJ,GAAcua,CAAd,EAA6B5F,CAA7B,CACA,EAAAtG,EAAA,EAAqB,CACrB,MAKJ,MAAK,CAAL,CACIsM,CAAA,CAAQ,EACRJ,EAAA,CAAe,CAAAjiB,EAAA,CAAa0H,CAAb,CAAf,CAAmC,CAAnC,CAAwC,KAC7B,EAAX,EAAIA,CAAJ,GAAcua,CAAd,EAA6B5F,CAA7B,CACA4F,EAAA,CAAc,CAAA7c,GAAA,CAAc6c,CAAd,CAAd,CAA2C5F,CAC3C,EAAAtG,EAAA,EAAqB,CACrB,MAKJ,MAAK,CAAL,CAKI,MAJAkM,EAIO,CAJO,CAAA7c,GAAA,CAAcka,EAAA,CAAAA,CAAA,CAAe,CAAf,CAAd,CAIP,CAHP2C,CAGO,CAHQA,CAGR,CAHsB,CAAAjiB,EAAA,CAAa0H,CAAb,CAGtB,CAH2C,KAG3C,CAFI,CAEJ,EAFHA,CAEG;AAFO,CAAA4T,GAAA,CAAqBrT,CAArB,CAA6B,CAA7B,CAAgCga,CAAhC,CAEP,CADP,CAAAlM,EACO,EADc,CACd,CAAAkM,CAAA,CAAc5F,CAKzB,MAAK,CAAL,CAKI,MAJA4F,EAIO,CAJO,CAAA7c,GAAA,CAAcka,EAAA,CAAAA,CAAA,CAAe,CAAf,CAAd,CAIP,CAHP2C,CAGO,CAHQA,CAGR,CAHsB,CAAAjiB,EAAA,CAAa0H,CAAb,CAGtB,CAH2C,KAG3C,CAFPua,CAEO,CAFO,CAAA7c,GAAA,CAAc6c,CAAd,CAA4B,CAAA5F,GAA5B,CAEP,CADP,CAAAtG,EACO,EADc,EACd,CAAAkM,CAAA,CAAc5F,CAxFzB,CA2FA,CAAArc,EAAA,CAAa0H,CAAb,CAAA,CAAqB,CAAA1H,EAAA,CAAa0H,CAAb,CAArB,CAAyC2a,CAAzC,CAAiD,KACjD,EAAA9H,EAAA,CAAe,CAAAA,EAAf,CAA6B,KAA7B,EAAyC,CAAAA,EAAzC,CAAuD,MAAvD,GAAmE,CAAnE,EAA4E8H,CAA5E,EAAoF,CAApF,CAAyF,GAAzF,CAAiG3a,CAAjG,GAAyG,EAEzG,OAAOua,EAtGX,CAiHA/5B,CAAAqzB,GAAA,CAAAA,QAAmB,CAACtT,CAAD,CAASoa,CAAT,CAAerjB,CAAf,CACnB,CAYQ,CAAC,IAAAib,EAAL,EAA6B,CAA7B,EAAqBoI,CAArB,EAAkCrjB,CAAlC,EAA0C,IAAAiR,GAA1C,GAKI,IAAA8K,EALJ,EAt8RYkF,EAs8RZ,CAZJ,CA6BA/3B,EAAAyzB,GAAA,CAAAA,QAAmB,CAAC1T,CAAD,CAASoa,CAAT,CAAerjB,CAAf,CACnB,CACS,IAAAib,EAAL,GAegB,KACZ,EADIjb,CACJ,GADoBA,CACpB,EAD4B,MAC5B,EAAKiJ,CAAL,CAv7RQuK,CAu7RR,EAAqCxT,CAArC,EAA6C,IAAAiR,GAA7C,GAKQjR,CAAJ,EAAY,IAAAiR,GAAZ,CAA0B,EAA1B,CACI,IAAA7H,GAAA,CApjSAnR,CAojSA,CAA0B,CAA1B,CAjiSCmpB,EAiiSD,CADJ,EAGI,IAAAjY,EACA,EA/6RAW,CA+6RA,CAAA,IAAAiS,EAAA,EAl/RAkF,EA8+RJ,CALJ,CAhBJ,CADJ,CA0CA/3B,EAAA+zB,GAAA,CAAAA,QAAc,CAACjd,CAAD,CACd,CACoB,IAAA7b,EAAhB,EACI8vB,EAAA,CAAA,IAAA9vB,EAAA,CAAyB6b,CAAzB,CAA+B,CAA/B,CAEJ,OAAO,KAAAgd,GAAA,CAAmBhd,CAAnB,CAJX,CAiBA9W,EAAAg0B,GAAA,CAAAA,QAAc,CAACld,CAAD,CACd,CACoB,IAAA7b,EAAhB,EACI8vB,EAAA,CAAA,IAAA9vB,EAAA,CAAyB6b,CAAzB,CAA+B,CAA/B,CAEJ,OAAO,KAAAE,GAAA,CAAmBF,CAAnB,CAJX,CAiBA9W;CAAAi0B,GAAA,CAAAA,QAAc,CAACnd,CAAD,CAAOtiB,CAAP,CACd,CACoB,IAAAyG,EAAhB,EACIiwB,EAAA,CAAA,IAAAjwB,EAAA,CAA0B6b,CAA1B,CAAgC,CAAhC,CAEJ,KAAA6G,GAAA,CAAmB7G,CAAnB,CAAyBtiB,CAAzB,CAJJ,CAiBAwL,EAAAk0B,GAAA,CAAAA,QAAc,CAACpd,CAAD,CAAOtiB,CAAP,CACd,CACoB,IAAAyG,EAAhB,EACIiwB,EAAA,CAAA,IAAAjwB,EAAA,CAA0B6b,CAA1B,CAAgC,CAAhC,CAEJ,KAAAJ,GAAA,CAAmBI,CAAnB,CAAyBtiB,CAAzB,CAJJ,CAiCAyiB,SAAA,GAAW,CAAXA,CAAW,CAACH,CAAD,CACX,CACI,CAAAH,GAAA,EACIhqB,EAAAA,CAAI,CAAAwO,EAAA6hB,GAAA,CAAiBnG,EAAA,CAAAA,CAAA,CAA0BC,CAA1B,CAp7QNmK,CAo7QM,CAAjB,CACR,EAAAtK,GAAA,EACA,OAAOhqB,EAJX,CAkFAqT,CAAA01B,GAAA,CAAAA,QAAqB,CAACiE,CAAD,CAAOna,CAAP,CAAYO,CAAZ,CACrB,CACI,MAAOma,GAAA,CAAAA,IAAA,CAAmBP,CAAnB,CAAyBna,CAAzB,CAA8BO,CAA9B,CADX,CAeA/f,EAAAu0B,GAAA,CAAAA,QAAoB,CAACoF,CAAD,CAAOna,CAAP,CAAYO,CAAZ,CACpB,CACI,MAAOlJ,GAAA,CAAAA,IAAA,CAA0BqjB,EAAA,CAAAA,IAAA,CAAmBP,CAAnB,CAAyBna,CAAzB,CAA8BO,CAA9B,CAA1B,CAAiEA,CAAjE,CADX,CAaA/f,EAAA41B,GAAA,CAAAA,QAAoB,CAAC9e,CAAD,CACpB,CACI,MAAO,KAAA3b,EAAA6hB,GAAA,CAAiB,IAAAoV,GAAjB,CAAiCtb,CAAjC,CADX,CAaA9W,EAAA21B,GAAA,CAAAA,QAA2B,CAAC7e,CAAD,CAC3B,CACoB,IAAA7b,EAAhB,EACI8vB,EAAA,CAAA,IAAA9vB,EAAA,CAAyB6b,CAAzB,CAA+B,CAA/B,CAEJ,OAAO,KAAA8e,GAAA,CAA0B9e,CAA1B,CAJX,CAgBA9W,EAAAw0B,GAAA,CAAAA,QAAmB,CAACuF,CAAD,CACnB,CACI,MAAO,KAAA5+B,EAAA6hB,GAAA,CAAiB,IAAAoV,GAAjB,CAAiCvb,EAAA,CAAAA,IAAA,CAA0BkjB,CAA1B,CAnkRrB9Y,CAmkRqB,CAAjC,CADX,CAaAjhB,EAAAu1B,GAAA,CAAAA,QAA0B,CAACwE,CAAD,CAC1B,CACoB,IAAA9+B,EAAhB,EACI8vB,EAAA,CAAA,IAAA9vB,EAAA,CAAyB8+B,CAAzB,CAAsC,CAAtC,CAEJ,OAAO,KAAAvF,GAAA,CAAyBuF,CAAzB,CAJX,CAgBA/5B;CAAA81B,GAAA,CAAAA,QAAmB,CAAChf,CAAD,CAAOtiB,CAAP,CACnB,CACI,IAAA2G,EAAAyb,GAAA,CAAiB,IAAAwb,GAAjB,CAAiCtb,CAAjC,CAAuCtiB,CAAvC,CADJ,CAaAwL,EAAA61B,GAAA,CAAAA,QAA0B,CAAC/e,CAAD,CAAOtiB,CAAP,CAC1B,CACoB,IAAAyG,EAAhB,EACIiwB,EAAA,CAAA,IAAAjwB,EAAA,CAA0B6b,CAA1B,CAAgC,CAAhC,CAEJ,KAAAgf,GAAA,CAAyBhf,CAAzB,CAA+BtiB,CAA/B,CAJJ,CAgBAwL,EAAAy0B,GAAA,CAAAA,QAAkB,CAACsF,CAAD,CAAcvlC,CAAd,CAClB,CACI,IAAA2G,EAAAyb,GAAA,CAAiB,IAAAwb,GAAjB,CAAiCvb,EAAA,CAAAA,IAAA,CAA0BkjB,CAA1B,CA/nRdhjB,CA+nRc,CAAjC,CAAkGviB,CAAlG,CADJ,CAaAwL,EAAAw1B,GAAA,CAAAA,QAAyB,CAACuE,CAAD,CAAcvlC,CAAd,CACzB,CACoB,IAAAyG,EAAhB,EACIiwB,EAAA,CAAA,IAAAjwB,EAAA,CAA0B8+B,CAA1B,CAAuC,CAAvC,CAEJ,KAAAtF,GAAA,CAAwBsF,CAAxB,CAAqCvlC,CAArC,CAJJ,CAeA4lC,SAAA,GAAqB,CAArBA,CAAqB,CAAC5C,CAAD,CAASzX,CAAT,CACrB,CAEI,IAAIP,EAAM,CAAAmV,EAANnV,CAAoBgY,CAApBhY,CA/zSQ6a,CAi0SZ,EADIV,CACJ,CADW,CAAAjF,EACX,EAD2B8C,CAC3B,CAnzSY8C,EAmzSZ,GAlzSYA,CAkzSZ,GAOQxjB,CAMJ,CANWojB,EAAA,CAAAA,CAAA,CAAmBP,CAAnB,CAAyBna,CAAzB,CAzqRIyB,CAyqRJ,CAMX,CALMlB,CAKN,CAlySQuK,KAkySR,EAJmC,KAInC,IAJS,CAAAxE,EAIT,CAJuB,KAIvB,IAJ2ChP,CAI3C,EAJmD,KAInD,EAFA,CAAAib,EAEA,CAFgB,CAAAjM,EAEhB,EAF+B,EAE/B,CAFqC,CAErC,CADAtxB,CACA,CADO,CAAA0oB,GAAA,CAAcpG,CAAd,CAAsBiJ,CAAtB,CAA+B,CAAAoU,GAA/B,CACP,CAAA,CAAApC,EAAA,CAAgB,CAAAjM,EAAhB,EAA+B,EAA/B,CAAqC,CAbzC,EAEQtxB,CAFR,CACe,CAAX,EAAIgrB,CAAJ,GAAkB,CAAAsG,EAAlB,EAAiC,CAAjC,CAh7SQC,KAg7SR,KAA4D,CAAAD,EAA5D,CAh7SQC,KAg7SR,EACW,CAAAjO,EAAA,CAAa0H,CAAb,CADX,CAGW,CAAA2G,EAAA,CAAmB,CAAAL,EAAnB,EAAkC,EAAlC,CAAwC,CAAxC,CAWf,OAAOtxB,EAnBX;AA8BA+lC,QAAA,GAAoB,CAApBA,CAAoB,CAAC/C,CAAD,CAASzX,CAAT,CAAiBvrB,CAAjB,CACpB,CACI,CAAA69B,EAAA,CAAe,CAAAA,EAAf,CAA6B,KAA7B,CAAwC,OACxC,KAAI7S,EAAM,CAAAmV,EAANnV,CAAoBgY,CAApBhY,CA91SQ6a,CAg2SZ,EADIV,CACJ,CADW,CAAAjF,EACX,EAD2B8C,CAC3B,CAl1SY8C,EAk1SZ,GAj1SYA,CAi1SZ,GAOQxjB,CAWJ,CAXWojB,EAAA,CAAAA,CAAA,CAAmBP,CAAnB,CAAyBna,CAAzB,CAtsRIzI,CAssRJ,CAWX,CAVMgJ,CAUN,CAt0SQuK,KAs0SR,GAVqCxT,CAUrC,EAV6C,KAU7C,EAHA,CAAAib,EAGA,CAHgB,CAAAjM,EAGhB,EAH+B,EAG/B,CAHqC,CAGrC,CAFAhP,CAEA,CAFOD,EAAA,CAAAA,CAAA,CAA0BC,CAA1B,CAAkCiJ,CAAlC,CAp0SCuK,KAo0SD,CAx0SCA,CAw0SD,CAEP,CADA,CAAAyH,EACA,CADgB,CAAAjM,EAChB,EAD+B,EAC/B,CADqC,CACrC,CAAA,CAAAlP,GAAA,CAAaE,CAAb,CAAmBtiB,CAAnB,CAlBJ,EACe,CAAX,EAAIgrB,CAAJ,GAAkB,CAAAsG,EAAlB,EAAiC,CAAjC,CA/8SQC,KA+8SR,KAA4D,CAAAD,EAA5D,CA/8SQC,KA+8SR,EACI,CAAAjO,EAAA,CAAa0H,CAAb,CADJ,CACwBhrB,CADxB,CAGI,CAAA2xB,EAAA,CAAmB,CAAAL,EAAnB,EAAkC,EAAlC,CAAwC,CAAxC,CAHJ,CAGiDtxB,CARzD,CAsCAgmC,QAAA,GAAW,CAAXA,CAAW,CAAChD,CAAD,CACX,CAEIA,CAAA,GA12SYiD,CA22SZ,KAAIjb,EAAM,CAAAsV,EAANtV,CAAoBgY,CAApBhY,CAt4SQ6a,CA64SZ,OALArE,CADI2D,CACJ3D,CADW,CAAAnB,EACXmB,EAD2BwB,CAC3BxB,CA13SYsE,EA03SZtE,GAz3SYsE,CAy3SZtE,EAGa,CAAAnZ,GAAA,CAAa,CAAAyX,GAAA,CAAaqF,CAAb,CAAmBna,CAAnB,CA3uRPqB,CA2uRO,CAAb,CAHbmV,CACa,CAAAle,EAAA,CAAa0H,CAAb,CAAmB,CAAAuT,GAAnB,CADbiD,CACkD,CAAAhD,GANtD,CAyCA0H,QAAA,GAAW,CAAXA,CAAW,CAAClD,CAAD,CACX,CACI,IAAIxB,CACJwB,EAAA,GAp5SYiD,CAq5SZ,KAAIjb,EAAM,CAAAsV,EAANtV,CAAoBgY,CAApBhY,CAh7SQ6a,CAk7SZ,EADIV,CACJ,CADW,CAAA9E,EACX,EAD2B2C,CAC3B,CAp6SY8C,EAo6SZ,GAn6SYA,CAm6SZ,EAGItE,CAHJ,CAGa,CAAAhZ,GAAA,CAAa,CAAAsX,GAAA,CAAaqF,CAAb,CAAmBna,CAAnB,CAtxRPyB,CAsxRO,CAAb,CAHb,CACI+U,CADJ,CACa,CAAAle,EAAA,CAAa0H,CAAb,CAAmB,CAAAuT,GAAnB,CAIb,OAAOiD,EAVX,CAoBA2E,QAAA,GAAW,CAAXA,CAAW,CAACnD,CAAD,CACX,CACI,IAAIhY,EAAM,CAAAmV,EAANnV,CAAoBgY,CAApBhY,CAn8SQ6a,CAo8SRV,EAAAA,CAAO,CAAAjF,EAAPiF,EAAuBnC,CAAvBmC,CAt7SQW,EAs7SRX,GAr7SQW,CAs7SZ,OAAOJ,GAAA,CAAAA,CAAA,CAAmBP,CAAnB,CAAyBna,CAAzB,CA35SK8K,CA25SL,CAHX;AAaAsQ,QAAA,GAAW,CAAXA,CAAW,CAACpD,CAAD,CACX,CAEI,IAAIhY,EAAM,CAAAmV,EAANnV,CAAoBgY,CAApBhY,CAl9SQ6a,CAy9SZ,OALArE,CADI2D,CACJ3D,CADW,CAAAtB,EACXsB,EAD2BwB,CAC3BxB,CAt8SYsE,EAs8SZtE,GAr8SYsE,CAq8SZtE,EAGa,CAAAnZ,GAAA,CAAa,CAAAyX,GAAA,CAAaqF,CAAb,CAAmBna,CAAnB,CAvzRPqB,CAuzRO,CAAb,CAHbmV,CACa,CAAAle,EAAA,CAAa0H,CAAb,CADbwW,CACiC,GALrC,CAmBA6E,QAAA,GAAW,CAAXA,CAAW,CAACrD,CAAD,CACX,CACI,IAAIxB,CAAJ,CACIxW,EAAM,CAAAmV,EAANnV,CAAoBgY,CAApBhY,CAt+SQ6a,CAw+SZ,EADIV,CACJ,CADW,CAAAjF,EACX,EAD2B8C,CAC3B,CA19SY8C,EA09SZ,GAz9SYA,CAy9SZ,EAGItE,CAHJ,CAGa,CAAAhZ,GAAA,CAAa,CAAAsX,GAAA,CAAaqF,CAAb,CAAmBna,CAAnB,CA50RPyB,CA40RO,CAAb,CAHb,CACI+U,CADJ,CACa,CAAAle,EAAA,CAAa0H,CAAb,CAIb,OAAOwW,EATX,CAsBA8E,QAAA,GAAa,CAAbA,CAAa,CAACtD,CAAD,CAAShjC,CAAT,CAAeumC,CAAf,CACb,CACI,IAAIvb,EAAM,CAAAmV,EAANnV,CAAoBgY,CAApBhY,CA5/SQ6a,CA8/SZ,EADIV,CACJ,CADW,CAAAjF,EACX,EAD2B8C,CAC3B,CAh/SY8C,EAg/SZ,GA/+SYA,CA++SZ,GAKQxjB,CAGJ,CAHW,CAAA8d,GAGX,CAH0B,CAAAN,GAAA,CAAaqF,CAAb,CAAmBna,CAAnB,CA/1RXwb,CA+1RW,CAG1B,CAFAxmC,CAEA,CAFe,CAAP,CAAAA,CAAA,CAAW,CAAAsjB,EAAA,CAAa,CAACtjB,CAAd,CAAmB,CAAnB,CAAX,CAAmC,GAAnC,CAA2CA,CAEnD,CADA,CAAA4oB,GAAA,CAAatG,CAAb,CAAmBikB,CAAAj7B,KAAA,CAAU,CAAV,CAAgBtL,CAAhB,CAAsB,CAAAqoB,GAAA,CAAa/F,CAAb,CAAtB,CAAnB,CACA,CAAIA,CAAJ,CAAW,CAAX,EAAc,CAAA+W,EAAA,EARlB,GACQkL,CAEJ,CAFU,CAAAjhB,EAAA,CAAa0H,CAAb,CAEV,CADAhrB,CACA,CADe,CAAP,CAAAA,CAAA,CAAW,CAAAsjB,EAAA,CAAa,CAACtjB,CAAd,CAAmB,CAAnB,CAAX,CAAmC,GAAnC,CAA2CA,CACnD,CAAA,CAAAsjB,EAAA,CAAa0H,CAAb,CAAA,CAAqBuZ,CAArB,CAA2B,KAA3B,CAAqCgC,CAAAj7B,KAAA,CAAU,CAAV,CAAgBtL,CAAhB,CAAsBukC,CAAtB,CAA4B,GAA5B,CAHzC,CAHJ;AAyBAkC,QAAA,EAAa,CAAbA,CAAa,CAACzD,CAAD,CAAShjC,CAAT,CAAeumC,CAAf,CACb,CACI,IAAIvb,EAAM,CAAAmV,EAANnV,CAAoBgY,CAApBhY,CAthTQ6a,CA2hTZ,EAJIV,CAIJ,CAJW,CAAAjF,EAIX,EAJ2B8C,CAI3B,CA7gTY8C,EA6gTZ,GA5gTYA,CA4gTZ,GAGQxjB,CACJ,CADW,CAAAwd,GAAA,CAAaqF,CAAb,CAAmBna,CAAnB,CA33RI0b,CA23RJ,CACX,CAAA,CAAAtkB,GAAA,CAAaE,CAAb,CAAmBikB,CAAAj7B,KAAA,CAAU,CAAV,CAAuB,CAAP,CAAAtL,CAAA,CAAU,CAAAsjB,EAAA,CAAa,CAACtjB,CAAd,CAAmB,CAAnB,CAAV,CAAkCA,CAAlD,CAAwD,CAAAwoB,GAAA,CAAalG,CAAb,CAAxD,CAAnB,CAJJ,EACI,CAAAgB,EAAA,CAAa0H,CAAb,CADJ,CACwBub,CAAAj7B,KAAA,CAAU,CAAV,CAAuB,CAAP,CAAAtL,CAAA,CAAU,CAAAsjB,EAAA,CAAa,CAACtjB,CAAd,CAAmB,CAAnB,CAAV,CAAkCA,CAAlD,CAAwD,CAAAsjB,EAAA,CAAa0H,CAAb,CAAxD,CAP5B,CAyBA2b,QAAA,GAAY,CAAZA,CAAY,CAAC3D,CAAD,CAAShjC,CAAT,CAAe4mC,CAAf,CAA2BC,CAA3B,CACZ,CAEI,IAAI7b,EAAM,CAAAmV,EAANnV,CAAoBgY,CAApBhY,CAjjTQ6a,CAmjTZ,EADIV,CACJ,CADW,CAAAjF,EACX,EAD2B8C,CAC3B,CAriTY8C,EAqiTZ,GApiTYA,CAoiTZ,GAgBQxjB,CAGJ,CAHW,CAAAwd,GAAA,CAAaqF,CAAb,CAAmBna,CAAnB,CAj6RIwB,CAi6RJ,CAGX,CAFAqa,CAAAv7B,KAAA,CAAa,CAAb,EAAoBtL,CAApB,CAAkC,CAAP,CAAAA,CAAA,CAAW,CAAAsjB,EAAA,CAAa,CAACtjB,CAAd,CAAmB,CAAnB,CAAX,CAAmC,GAAnC,CAA2CA,CAAtE,GAA+E,CAA/E,CAEA,CADA,CAAA4oB,GAAA,CAAatG,CAAb,CAAmBtiB,CAAnB,CACA,CAAIsiB,CAAJ,CAAW,CAAX,EAAc,CAAA+W,EAAA,EAnBlB,GACSr5B,CAAL,EAUIA,CACA,CADe,CAAP,CAAAA,CAAA,CAAW,CAAAsjB,EAAA,CAAa,CAACtjB,CAAd,CAAmB,CAAnB,CAAX,CAAmC,GAAnC,CAA0CA,CAClD,CAAA,CAAAsjB,EAAA,CAAa0H,CAAb,CAAA,CAAqB,CAAA1H,EAAA,CAAa0H,CAAb,CAArB,CAAyC,CAAC4b,CAA1C,CAA2D5mC,CAA3D,EAAmE,EAAnE,EAA0E,EAA1E,CAAgF4mC,CAXpF,EAII,CAAAtjB,EAAA,CAAa0H,CAAb,CAJJ,EAIyB,CAAC4b,CAS1B,CAAAC,CAAAv7B,KAAA,CAAa,CAAb,CAAmBtL,CAAnB,EAA2B,CAA3B,CAdJ,CAJJ;AAqCA8mC,QAAA,GAAY,CAAZA,CAAY,CAAC9D,CAAD,CAAShjC,CAAT,CAAe6mC,CAAf,CACZ,CACI,IAAI7b,EAAM,CAAAmV,EAANnV,CAAoBgY,CAApBhY,CAtlTQ6a,CA2lTZ,EAJIV,CAIJ,CAJW,CAAAjF,EAIX,EAJ2B8C,CAI3B,CA7kTY8C,EA6kTZ,GA5kTYA,CA4kTZ,GAIQxjB,CAEJ,CAFW,CAAAwd,GAAA,CAAaqF,CAAb,CAAmBna,CAAnB,CA97RIzI,CA87RJ,CAEX,CADAskB,CAAAv7B,KAAA,CAAa,CAAb,CAAoBtL,CAApB,CAAkC,CAAP,CAAAA,CAAA,CAAU,CAAAsjB,EAAA,CAAa,CAACtjB,CAAd,CAAmB,CAAnB,CAAV,CAAkCA,CAA7D,CACA,CAAA,CAAAoiB,GAAA,CAAaE,CAAb,CAAmBtiB,CAAnB,CANJ,GACI,CAAAsjB,EAAA,CAAa0H,CAAb,CACA,CADqBhrB,CACrB,CADmC,CAAP,CAAAA,CAAA,CAAU,CAAAsjB,EAAA,CAAa,CAACtjB,CAAd,CAAmB,CAAnB,CAAV,CAAkCA,CAC9D,CAAA6mC,CAAAv7B,KAAA,CAAa,CAAb,CAAmBtL,CAAnB,CAFJ,CANJ;AA+BAwL,CAAAwxB,GAAA,CAAAvb,QAAO,CAACslB,CAAD,CACP,CAWI,IAAAhhC,MAAAo3B,SAAA,CAAsB,CAAA,CAMtB,KAAI6J,EAA2B,IAAAvgC,EAAb,CAAyBwgC,EAAA,CAAA,IAAAxgC,EAAA,CAAA,CAA0B,CAA1B,CAA+B,IAAAV,MAAAwyB,GAAA,CAAsB,EAAtB,CAA0B,CAAlF,CAAwF,CAA1G,CAQI2O,EAAgBH,CAAF,CAAqB,IAAAhhC,MAAAwyB,GAAA,CAAqB,CAArB,CAAyB,CAA9C,CAAgB,EAClC,KAAAxyB,MAAAwyB,GAAA,CAAsB,CAAA,CAOtB,KAAAa,GAAA,CAAoB,IAAAC,EAApB,CAAuC0N,CAKvC,KAAA1I,EAAA,CAAgB,IAAAA,EAAhB,CAA+B,EAA/B,EAA0D2I,CAAA,CAzqT9CzD,CAyqT8C,CAAqC,CAA/F,CAEA,GAAG,CACC,GAAI,IAAAlF,EAAJ,CAAkB,CAKd,GAAiB,IAAAA,EAAjB,CAjrTIkF,CAirTJ,CAAwD,CACpD,GAAI4D,EAAA,CAAA,IAAA1gC,EAAA,CAA0By8B,IA1gEnC5f,EAAA,CA3nPKwf,CA2nPL,CA0gES,CAAwCoE,CAAxC,CAAJ,CAA0D,CACtD1lB,CAAA,CAAAA,IAAA,CACA,MAFsD,CAIrD,EAAEwlB,CAAP,GAAoB,IAAA3I,EAApB,EAAoC,EAApC,CACK6I,EAAL,EAAkBA,CAAA,EANkC,CAgBnD,GAAA,CAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAlxDb,GAFIE,CAEA,CAFa,CAAA,CAEb,CAmxDY,IAnxDZ/I,EAAA,CAj7PQkF,CAi7PZ,CAAqC,CAEjC,IAAI9C,EA3+PIlmB,GA2+PR,CACI4oB,GAgxDQ,IAhxDIhQ,GAAZgQ,CA5hQI5R,GA4hQJ4R,GA1gQI5R,CAygQR,CAGIrE,EA8wDQma,IA70DRjI,EAAD,EA60DSiI,IA70DQjI,EAAA+D,GAAjB,CA+DsBA,CA/DtB,CA60DSkE,IA70D2CjI,EAApD,CAAmE,IAgElElS,EAAJ,GACIuT,CACA,CADSvT,CAAAuT,GACT,CAAA0C,CAAA,CAAWjW,CAAAiW,GAFf,CAKmCA,EAiCvC,EAuuDgBmE,IAxuDGhW,EACnB,CArkQYC,GAqkQZ,GAnjQYA,CAmjQZ,EAuuDgB+V,IAtuDRjJ,EAKJ,CAh+PQkF,CAg+PR,GAJIX,EAAA,CAquDQ0E,IAruDR,CAAe,CAAf,CACA,CAouDQA,IApuDRjJ,EAAA,EAAgB,EAGpB,EAiuDYiJ,IAluDZ5b,GAAA,CAAU+U,CAAV,CAAkB,CAAlB,CAxgQSiD,GAwgQT,CACA,CAAA,CAAA,CAAO,CAAA,CANX,EAQA,CARA,CAQO,CAAA,CAzCC,EAAJ,GACQxW,CACJ,EADSmW,EAAA,CAuwDDA,IAvwDC,CAAenW,CAAf,CACT,CAAAka,CAAA,CAAa,CAAA,CAFjB,CAwwDY,KAnwDPhI,EAAL,EAmwDY,IAnwDUjM,GAAtB;CAmwDY,IAlwDRkL,EADJ,EACoB,EADpB,CAhBiC,CAArC,IAmxDgB,KA/vDPA,EAAJ,CAt8POkF,CAs8PP,EA+vDW,IA1vDZlF,EAAA,EAyvDI,IAAK,CAAL,CACgC,CACxB,GAAK,IAAAA,EAAL,CAnsTJkF,CAmsTI,EAA8C4D,EAAA,CAAA,IAAA1gC,EAAA,CAA0By8B,IA3hEjF5f,EAAA,CA3nPKwf,CA2nPL,CA2hEuD,CAAwCoE,CAAxC,CAA9C,CAAoG,CAChG1lB,CAAA,CAAAA,IAAA,CACA,MAFgG,CAWpG,GAAkB,CAAlB,CAAI0lB,CAAJ,CAAqB,KAZG,CAsBhC,GAAI,IAAA7I,EAAJ,CAltTIkF,GAktTJ,EACQE,EAAA,CAAAA,IAAA,CADR,CAC2B,CACnB,GAAK,IAAApF,EAAL,CA1tTJkF,CA0tTI,EAA8C4D,EAAA,CAAA,IAAA1gC,EAAA,CAA0By8B,IAljEjF5f,EAAA,CA3nPKwf,CA2nPL,CAkjEuD,CAAwCoE,CAAxC,CAA9C,CAAoG,CAChG1lB,CAAA,CAAAA,IAAA,CACA,MAFgG,CAIpG,GAAkB,CAAlB,CAAI0lB,CAAJ,CAAqB,KALF,CA7Cb,CA2DlB,IAAA7I,EAAA,CAAgB,IAAAA,EAAhB,CAruTQkF,EAquTR,CAAyD,IAAAjS,EAAzD,CAl1TQC,EA0tPRsR,EAAAA,CA0nEa0E,IA1nER1J,EAALgF,CA0nEa0E,IA1nEMjkB,EAAA,CAlkPXwf,CAkkPW,CAMnBE,EAAAA,CAonEauE,IApnEJ7e,GAAA,CAAcma,CAAd,CAonEI0E,KAnnEjBjkB,EAAA,CAzkPYwf,CAykPZ,CAAA,CAA8BD,CAA9B,CAAmC,CAAnC,CAAwC,KAonEpC,KAAAnE,GAAA,CAnnEGsE,CAmnEH,CA/DD,CAAH,MAiE4B,CAjE5B,CAiES,IAAA3J,EAjET,CAmEA,OAAQ,KAAAtzB,MAAAo3B,SAAA,CAAqB,IAAA/D,GAArB,CAAyC,IAAAC,EAAzC,CAAqF,CAAA,CAAxB,GAAA,IAAAtzB,MAAAo3B,SAAA,CAAgC,EAAhC,CAAoC,CA3G7G,CAsIJ1Y,GAAA,CAfIZ,QAAW,EACX,CAEI,IADA,IAAI2jB,EAASn/B,CAAA,CAA6B0b,QAA7B,CAAuC5b,CAAvC,CAAuD,KAAvD,CAAb,CACSs/B,EAAO,CAAhB,CAAmBA,CAAnB,CAA0BD,CAAAjsC,OAA1B,CAAyCksC,CAAA,EAAzC,CAAiD,CAC7C,IAAIC,EAAOF,CAAA,CAAOC,CAAP,CAAX,CACI/P,EAAW1uB,EAAA,CAA4B0+B,CAA5B,CACXhhC,EAAAA,CAAM,IAAI02B,EAAJ,CAAkB1F,CAAlB,CACVvT,GAAA,CAAgCzd,CAAhC,CAAqCghC,CAArC,CAJ6C,CAFrD,CAcJ,CA6CcC;QAAA,GAAQ,CAACrD,CAAD,CAAMC,CAAN,CACtB,CACI,IAAI/C,EAAS+C,CAAT/C,CAAe8C,CACnBsD,KArmDIjK,EAAA,CAqmDJiK,IArmDiBlK,EAAb,CAqmDJkK,IArmD8BpK,EAA1B,CAqmDgBgE,CAApBoG,KApmDInK,EAAA,EAomDwB6G,CApmDxB,CAomDgB9C,CApmDhB,GAomD6B+C,CApmD7B,CAomDgB/C,CApmDhB,CAqmDJ,OAAOA,EAAP,CAAgB,KAHpB,CAceqG,QAAA,GAAQ,CAACvD,CAAD,CAAMC,CAAN,CACvB,CACI,IAAI/C,EAAS+C,CAAT/C,CAAe8C,CAAnB,CACoB,EAAA9C,CAAA,EAAU,CAA9BoG,KApnDIjK,EAAA,CAonDJiK,IApnDiBlK,EAAb,CAonDJkK,IApnD8BpK,EAA1B,CAAuCgE,CAonD3CoG,KAnnDInK,EAAA,EAmnD6B6G,CAnnD7B,EAmnDoC,CAnnDpC,CAAoB9C,CAApB,GAmnDuC+C,CAnnDvC,EAmnD8C,CAnnD9C,CAAqC/C,CAArC,CAonDJ,OAAOA,EAAP,CAAgB,GAHpB,CAccsG,QAAA,GAAQ,CAACxD,CAAD,CAAMC,CAAN,CACtB,CACQ/C,CAAAA,CAAS+C,CAAT/C,EAAgB,CACpB4C,GAAA,CAAAA,IAAA,CAAsB5C,CAAtB,CACA,OAAOA,EAAP,CAAgB,KAHpB,CAceuG,QAAA,GAAQ,CAACzD,CAAD,CAAMC,CAAN,CACvB,CACQ/C,CAAAA,CAAS+C,CAAT/C,EAAgB,CACpB4C,GAAA,CAAAA,IAAA,CAAsB5C,CAAtB,EAAgC,CAAhC,CACA,OAAOA,EAAP,CAAgB,GAHpB,CAccwG,QAAA,GAAQ,CAAC1D,CAAD,CAAMC,CAAN,CACtB,CACQ/C,CAAAA,CAAU+C,CAAV/C,CAAgB,KAAhBA,CAA2B+C,CAA3B/C,EAAkC,CAAlCA,CAAwC+C,CAAxC/C,EAA+C,EACnD4C,GAAA,CAAAA,IAAA,CAAsB5C,CAAtB,CACA,OAAOA,EAAP,CAAgB,KAHpB,CAceyG,QAAA,GAAQ,CAAC3D,CAAD,CAAMC,CAAN,CACvB,CACQ/C,CAAAA,CAAU+C,CAAV/C,CAAgB,GAAhBA,CAAyB+C,CAAzB/C,EAAgC,CAAhCA,CAAsC+C,CAAtC/C,EAA6C,CACjD4C,GAAA,CAAAA,IAAA,CAAsB5C,CAAtB,EAAgC,CAAhC,CACA,OAAOA,EAAP,CAAgB,GAHpB,CAcc0G,QAAA,GAAQ,CAAC5D,CAAD,CAAMC,CAAN,CACtB,CACQ/C,CAAAA,CAAS+C,CAAT/C,CAAe,CAAC8C,CACpB,KAAAL,GAAA,CAAoBzC,CAApB,CACA,OAAOA,EAHX,CAce2G,QAAA,GAAQ,CAAC7D,CAAD,CAAMC,CAAN,CACvB,CACQ/C,CAAAA,CAAS+C,CAAT/C,CAAe,CAAC8C,CACpB,KAAAL,GAAA,CAAoBzC,CAApB,EAA8B,CAA9B,CACA,OAAOA,EAHX;AAcc4G,QAAA,GAAQ,CAAC9D,CAAD,CAAMC,CAAN,CACtB,CACQ/C,CAAAA,EAAS+C,CACb,KAAAN,GAAA,CAAoBzC,CAApB,CACA,OAAOA,EAHX,CAce6G,QAAA,GAAQ,CAAC/D,CAAD,CAAMC,CAAN,CACvB,CACQ/C,CAAAA,EAAS+C,CACb,KAAAN,GAAA,CAAoBzC,CAApB,EAA8B,CAA9B,CACA,OAAOA,EAHX,CAcc8G,QAAA,GAAQ,CAAChE,CAAD,CAAMC,CAAN,CACtB,CACQ/C,CAAAA,CAAS,CAAC+C,CAAV/C,CAAgB,KACpB,KAAA0C,GAAA,CAAoB1C,CAApB,CACA,OAAOA,EAAP,CAAgB,KAHpB,CAce+G,QAAA,GAAQ,CAACjE,CAAD,CAAMC,CAAN,CACvB,CACQ/C,CAAAA,CAAS,CAAC+C,CAAV/C,CAAgB,GACpB,KAAA0C,GAAA,CAAoB1C,CAApB,EAA8B,CAA9B,CACA,OAAOA,EAAP,CAAgB,GAHpB,CAccgH,QAAA,GAAQ,CAAClE,CAAD,CAAMC,CAAN,CACtB,CAEIkE,IA1wDI9K,EAAA,CA0wDJ8K,IA1wDiB/K,EAAb,CAywDA8D,CAzwDA,CAywDS+C,CAzwDT,CAywDeD,CACnBmE,KAtwDIhL,EAAA,CAswDwB8G,CAtwDxB,EAswDwBA,CAtwDxB,CAswDgB/C,CAtwDhB,CAuwDJ,OAAOA,EAAP,CAAgB,KAHpB,CAcekH,QAAA,GAAQ,CAACpE,CAAD,CAAMC,CAAN,CACvB,CACQ/C,CAAAA,CAAS+C,CAAT/C,CAAe8C,CACC,KAAA,EAAA9C,CAAA,EAAU,CAAG+C,EAAA,GAAO,CAAxCkE,KAzxDI9K,EAAA,CAyxDJ8K,IAzxDiB/K,EAAb,CAA0B8D,CAyxD9BiH,KArxDIhL,EAAA,CAA0B8G,CAA1B,EAAkCA,CAAlC,CAAwC/C,CAAxC,CAsxDJ,OAAOA,EAAP,CAAgB,GAHpB,CAccmH,QAAA,GAAQ,CAACrE,CAAD,CAAMC,CAAN,CACtB,CAEIqE,IAtxDIjL,EAAA,CAsxDJiL,IAtxDiBlL,EAAb,CAqxDA8D,CArxDA,CAqxDS+C,CArxDT,CAqxDeD,CACnBsE,KAlxDInL,EAAA,CAkxDgB+D,CAlxDhB,EAkxDwB+C,CAlxDxB,CAkxDgB/C,CAlxDhB,CAmxDJ,OAAOA,EAAP,CAAgB,KAHpB,CAceqH,QAAA,GAAQ,CAACvE,CAAD,CAAMC,CAAN,CACvB,CACQ/C,CAAAA,CAAS+C,CAAT/C,CAAe8C,CACC,KAAA,EAAA9C,CAAA,EAAU,CAA9BoH,KAryDIjL,EAAA,CAqyDJiL,IAryDiBlL,EAAb,CAA0B8D,CAqyD9BoH,KAjyDInL,EAAA,CAA0B+D,CAA1B,EAiyD6B+C,CAjyD7B,EAiyDoC,CAjyDpC,CAA2C/C,CAA3C,CAkyDJ,OAAOA,EAAP,CAAgB,GAHpB;AAccsH,QAAA,GAAQ,CAACxE,CAAD,CAAMC,CAAN,CACtB,CACQ/C,CAAAA,CAAS,CAAC+C,CAId,KAAAL,GAAA,CAAoB1C,CAApB,CAA4BA,CAA5B,CAAqC+C,CAArC,CAA2C,KAA3C,CACA,OAAO/C,EAAP,CAAgB,KANpB,CAiBeuH,QAAA,GAAQ,CAACzE,CAAD,CAAMC,CAAN,CACvB,CACQ/C,CAAAA,CAAS,CAAC+C,CAId,KAAAL,GAAA,CAAoB1C,CAApB,EAA8B,CAA9B,EAAkCA,CAAlC,CAA2C+C,CAA3C,CAAiD,GAAjD,GAA0D,CAA1D,CACA,OAAO/C,EAAP,CAAgB,GANpB,CAiBcwH,QAAA,GAAQ,CAAC1E,CAAD,CAAMC,CAAN,CACtB,CACQ/C,CAAAA,CAAU+C,CAAV/C,EAAiB,CAAjBA,CAAwB,IAAAhE,EAAxBgE,EAAsC,EAAtCA,CAA4C,CAChD4C,GAAA,CAAAA,IAAA,CAAsB5C,CAAtB,CACA,OAAOA,EAAP,CAAgB,KAHpB,CAceyH,QAAA,GAAQ,CAAC3E,CAAD,CAAMC,CAAN,CACvB,CACQ/C,CAAAA,CAAU+C,CAAV/C,EAAiB,CAAjBA,CAAwB,IAAAhE,EAAxBgE,EAAsC,EAAtCA,CAA4C,CAChD4C,GAAA,CAAAA,IAAA,CAAsB5C,CAAtB,EAAgC,CAAhC,CACA,OAAOA,EAAP,CAAgB,GAHpB,CAcc0H,QAAA,GAAQ,CAAC5E,CAAD,CAAMC,CAAN,CACtB,CACQ/C,CAAAA,EAAY,IAAAhE,EAAZgE,CAAyB,KAAzBA,CAAoC+C,CAApC/C,GAA4C,CAA5CA,CAAkD+C,CAAlD/C,EAAyD,EAC7D4C,GAAA,CAAAA,IAAA,CAAsB5C,CAAtB,CACA,OAAOA,EAAP,CAAgB,KAHpB,CAce2H,QAAA,GAAQ,CAAC7E,CAAD,CAAMC,CAAN,CACvB,CACQ/C,CAAAA,GAAa,IAAAhE,EAAbgE,CAA0B,KAA1BA,GAAsC,CAAtCA,CAA2C+C,CAA3C/C,GAAmD,CAAnDA,CAAyD+C,CAAzD/C,EAAgE,CACpE4C,GAAA,CAAAA,IAAA,CAAsB5C,CAAtB,EAAgC,CAAhC,CACA,OAAOA,EAAP,CAAgB,GAHpB,CAcc4H,QAAA,GAAQ,CAAC9E,CAAD,CAAMC,CAAN,CACtB,CACI,IAAI/C,EAAS+C,CAAT/C,CAAe8C,CACnBD,GAAA,CAAAA,IAAA,CAAoB7C,CAApB,CAA4B8C,CAA5B,CAAiCC,CAAjC,CACA,OAAO/C,EAAP,CAAgB,KAHpB;AAce6H,QAAA,GAAQ,CAAC/E,CAAD,CAAMC,CAAN,CACvB,CACI,IAAI/C,EAAS+C,CAAT/C,CAAe8C,CACnBD,GAAA,CAAAA,IAAA,CAAoB7C,CAApB,EAA8B,CAA9B,CAAiC8C,CAAjC,EAAwC,CAAxC,CAA2CC,CAA3C,EAAkD,CAAlD,CACA,OAAO/C,EAAP,CAAgB,GAHpB,CAce8H,QAAA,GAAQ,CAAChF,CAAD,CAAMC,CAAN,CACvB,CAKIgF,IAn/DI5L,EAAA,CAm/DJ4L,IAn/DiB7L,EAAb,CAm/DiB6G,CAn/DjB,CAm/DuB,KAA3BgF,KAl/DI9L,EAAA,CAk/DJ8L,IAl/DiB/L,EAAb,CAA0B,CAm/D9B,QALc+G,CAKd,EALqB,CAKrB,CAL2BA,CAK3B,EALkC,CAKlC,EAAgB,KANpB,CAiBciF,QAAA,GAAQ,CAAClF,CAAD,CAAMC,CAAN,CACtB,CACQ/C,CAAAA,EAAS+C,CACb,KAAAN,GAAA,CAAoBzC,CAApB,CACA,OAAOA,EAAP,CAAgB,KAHpB,CA+DciI,QAAA,GAAQ,CAACzG,CAAD,CACtB,CACIyD,CAAA,CAAAA,IAAA,CAAmBzD,CAAnB,CAA2BkD,EAAA,CAAAA,IAAA,CAAiBlD,CAAjB,CAA3B,CAAqD2E,EAArD,CACA,KAAAtO,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,EAAyB,IAAAI,EAAA,EAA8B,CAA9B,EAAe,IAAAH,EAAf,CAAiC,CAAjC,CAAqC,CAA9D,GAAoE,IAAAE,EAAA,CAAe,CAAf,CAAyB,CAA7F,GAAuH,CAAf,EAAA,IAAAF,EAAA,CAAkB,CAAlB,CAAsB,CAA9H,CAFzB;AAWcuJ,QAAA,GAAQ,CAAC1G,CAAD,CACtB,CACI,IAAIsB,EAAM+B,EAAA,CAAAA,IAAA,CAAiBrD,CAAjB,CACNhY,EAAAA,CAAOgY,CAAPhY,EAAiB,CAAjBA,CAAsB,CAC1B,KAAIwW,EAAS,IAAAle,EAAA,CAAa0H,CAAb,CACTwW,EAAJ,CAAa,KAAb,GAAqBA,CAArB,EAA+B,UAA/B,CACA,KAAAhE,EAAA,CAAa,IAAAC,EAAb,CAA0B,CAC1B6G,EAAA,EAAO,EACP,IAAIA,CAAJ,CAAU,EAAV,CACIA,CAGS,CAHH,EAGG,CAHEA,CAGF,CAFC,EAED,CAFLA,CAEK,GAFKA,CAEL,CAFW,EAEX,EADT,IAAA9G,EACS,CADIgE,CACJ,EADe,EACf,CADoB8C,CACpB,CAAA9C,CAAA,GAAU8C,CAJvB,KAKO,IAAIA,CAAJ,CACH,GAAU,EAAV,CAAIA,CAAJ,CACI,IAAA7G,EACA,CADa+D,CACb,CAAAA,CAAA,CAAS,CAFb,KAGO,CAEH,IAAAhE,EAAA,CADSgE,CACT,GADmB8C,CAEnB,KAAIC,EAAO/C,CAAP+C,EAAiB,EAAjBA,CAAuB,KACvBA,EAAJ,EAAmB,KAAnB,GAAWA,CAAX,GAA2B,IAAA9G,EAA3B,CAAwC,KAAxC,CAJG,CAOX,IAAAna,EAAA,CAAa0H,CAAb,CAAA,CAAoBwW,CAApB,CAA6B,KAC7B,KAAA7D,EAAA,CAAa,IAAAD,EAAb,CAA0B8D,CAC1B,KAAAnI,EAAA,GAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAA9C,EAAwDoE,CAzB5D;AAkCeqF,QAAA,GAAQ,CAAC3G,CAAD,CACvB,CACI,IAAIsB,EAAM+B,EAAA,CAAAA,IAAA,CAAiBrD,CAAjB,CACNhY,EAAAA,CAAOgY,CAAPhY,EAAiB,CAAjBA,CAAsB,CAC1B,KAAIuZ,EAAO,IAAAjhB,EAAA,CAAa0H,CAAb,CAAPuZ,EAA4B,EAA5BA,CAAkC,IAAAjhB,EAAA,CAAa0H,CAAb,CAAmB,CAAnB,CACtC,KAAAwS,EAAA,CAAa,IAAAC,EAAb,CAA0B,CAC1B6G,EAAA,EAAO,EACP,IAAIA,CAAJ,CAAU,EAAV,CAAgB,CACZA,CAAA,CAAM,EAAN,CAAWA,CACD,GAAV,CAAIA,CAAJ,GAAcA,CAAd,CAAoB,EAApB,CACA,KAAI9C,EAAS+C,CAAT/C,EAAiB8C,CAAjB9C,CAAuB,CAC3B,KAAAhE,EAAA,CAAagE,CAAb,EAAuB,EACvBA,EAAA,GAAW,CACP+C,EAAJ,CAAU,UAAV,GAAsB/C,CAAtB,EAAgC,UAAhC,EAA+C,EAA/C,CAAoD8C,CAApD,CANY,CAAhB,IAQQA,EAAJ,EACI9C,CAKA,CALS+C,CAKT,EALiBD,CAKjB,CALuB,CAKvB,CAJA,IAAA9G,EAIA,CAJagE,CAIb,EAJuB,EAIvB,CAHAA,CAGA,GAHW,CAGX,CAFU,EAEV,CAFI8C,CAEJ,GAFcA,CAEd,CAFoB,EAEpB,GADMC,CACN,GADc,EACd,CADmBD,CACnB,GAEgB,UAFhB,IACIC,CADJ,CACY,UADZ,EAC0BD,CAD1B,CACiC,UADjC,IAE4B,IAAA7G,EAF5B,CAEyC,KAFzC,CANJ,EAWI+D,CAXJ,CAWa+C,CAGjB,KAAAjhB,EAAA,CAAa0H,CAAb,CAAA,CAAqBwW,CAArB,EAA+B,EAA/B,CAAqC,KACrC,KAAAle,EAAA,CAAa0H,CAAb,CAAmB,CAAnB,CAAA,CAAwBwW,CAAxB,CAAiC,KACjC,KAAA7D,EAAA,CAAa6D,CAAb,EAAuB,EACvB,KAAA9D,EAAA,CAAa8D,CAAb,EAAuB,EAAvB,CAA4BA,CAC5B,KAAAnI,EAAA,GAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAA9C,EAAwDoE,CAhC5D,CAyFcsF,QAAA,GAAQ,CAAC5G,CAAD,CACtB,CACID,EAAA,CAAAA,IAAA,CAAYC,CAAZ,CAAoB,CAACR,EAAA,CAAAA,IAAA,CAArB,CADJ,CAUcqH,QAAA,GAAQ,CAAC7G,CAAD,CACtB,CACID,EAAA,CAAAA,IAAA,CAAYC,CAAZ,CAAoBR,EAAA,CAAAA,IAAA,CAApB,CADJ;AAUcsH,QAAA,GAAQ,CAAC9G,CAAD,CACtB,CACIyD,CAAA,CAAAA,IAAA,CAAmBzD,CAAnB,CAA2BkD,EAAA,CAAAA,IAAA,CAAiBlD,CAAjB,CAA3B,CAAqDkF,EAArD,CACA,KAAA7O,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,EAAyB,IAAAI,EAAA,EAA8B,CAA9B,EAAe,IAAAH,EAAf,CAAiC,CAAjC,CAAqC,CAA9D,GAAoE,IAAAE,EAAA,CAAe,CAAf,CAAyB,CAA7F,GAAuH,CAAf,EAAA,IAAAF,EAAA,CAAkB,CAAlB,CAAsB,CAA9H,CAFzB,CAWe4J,QAAA,GAAQ,CAAC/G,CAAD,CACvB,CACIsD,EAAA,CAAAA,IAAA,CAAmBtD,CAAnB,CAA2BgD,EAAA,CAAAA,IAAA,CAAiBhD,CAAjB,CAA3B,CAAqDmF,EAArD,CACA,KAAA9O,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,EAAyB,IAAAI,EAAA,EAA8B,CAA9B,EAAe,IAAAH,EAAf,CAAiC,CAAjC,CAAqC,CAA9D,GAAoE,IAAAE,EAAA,CAAe,CAAf,CAAyB,CAA7F,GAAuH,CAAf,EAAA,IAAAF,EAAA,CAAkB,CAAlB,CAAsB,CAA9H,CAFzB,CAWc6J,QAAA,GAAQ,CAAChH,CAAD,CACtB,CACIyD,CAAA,CAAAA,IAAA,CAAmBzD,CAAnB,CAA2BkD,EAAA,CAAAA,IAAA,CAAiBlD,CAAjB,CAA3B,CAAqDoF,EAArD,CACA,KAAA/O,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,EAAyB,IAAAI,EAAA,EAA8B,CAA9B,EAAe,IAAAH,EAAf,CAAiC,CAAjC,CAAqC,CAA9D,GAAoE,IAAAE,EAAA,CAAe,CAAf,CAAyB,CAA7F,GAAuH,CAAf,EAAA,IAAAF,EAAA,CAAkB,CAAlB,CAAsB,CAA9H,CAFzB,CAWe8J,QAAA,GAAQ,CAACjH,CAAD,CACvB,CACIsD,EAAA,CAAAA,IAAA,CAAmBtD,CAAnB,CAA2BgD,EAAA,CAAAA,IAAA,CAAiBhD,CAAjB,CAA3B,CAAqDqF,EAArD,CACA,KAAAhP,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,EAAyB,IAAAI,EAAA,EAA8B,CAA9B,EAAe,IAAAH,EAAf,CAAiC,CAAjC,CAAqC,CAA9D,GAAoE,IAAAE,EAAA,CAAe,CAAf,CAAyB,CAA7F,GAAuH,CAAf,EAAA,IAAAF,EAAA,CAAkB,CAAlB,CAAsB,CAA9H,CAFzB;AAWc+J,QAAA,GAAQ,CAAClH,CAAD,CACtB,CACI,IAAIsB,EAAM4B,EAAA,CAAAA,IAAA,CAAiBlD,CAAjB,CACNuB,EAAAA,CAAM8B,EAAA,CAAAA,IAAA,CAAiBrD,CAAjB,CACV,KAAAiB,GAAA,EAA2B,CAAN,CAAAK,CAAA,CAAS,IAAAhhB,EAAA,CAAa,CAACghB,CAAd,CAAkB,CAAlB,CAAT,CAAgCA,CAArD,EAA4DC,CAA5D,CACA,KAAAlL,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,EAAyB,IAAAI,EAAA,EAA8B,CAA9B,EAAe,IAAAH,EAAf,CAAiC,CAAjC,CAAqC,CAA9D,GAAoE,IAAAE,EAAA,CAAe,CAAf,CAAyB,CAA7F,GAAuH,CAAf,EAAA,IAAAF,EAAA,CAAkB,CAAlB,CAAsB,CAA9H,CAJzB,CAaegK,QAAA,GAAQ,CAACnH,CAAD,CACvB,CACI,IAAIsB,EAAM0B,EAAA,CAAAA,IAAA,CAAiBhD,CAAjB,CACNuB,EAAAA,CAAM6B,EAAA,CAAAA,IAAA,CAAiBpD,CAAjB,CACV,KAAAiB,GAAA,GAA4B,CAAN,CAAAK,CAAA,CAAU,IAAAhhB,EAAA,CAAa,CAACghB,CAAd,CAAkB,CAAlB,CAAV,CAAiC,GAAjC,CAAyCA,CAA/D,EAAsEC,CAAtE,GAA8E,CAA9E,CACA,KAAAlL,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,EAAyB,IAAAI,EAAA,EAA8B,CAA9B,EAAe,IAAAH,EAAf,CAAiC,CAAjC,CAAqC,CAA9D,GAAoE,IAAAE,EAAA,CAAe,CAAf,CAAyB,CAA7F,GAAuH,CAAf,EAAA,IAAAF,EAAA,CAAkB,CAAlB,CAAsB,CAA9H,CAJzB,CAaciK,QAAA,GAAQ,CAACpH,CAAD,CACtB,CACID,EAAA,CAAAA,IAAA,CAAYC,CAAZ,CAAoBN,EAAA,CAAAA,IAAA,CAApB,CADJ,CAUc2H,QAAA,GAAQ,CAACrH,CAAD,CACtB,CACID,EAAA,CAAAA,IAAA,CAAYC,CAAZ,CAAoB,CAACL,EAAA,CAAAA,IAAA,CAArB,EAAqC,CAACF,EAAA,CAAAA,IAAA,CAAtC,CADJ,CAUc6H,QAAA,GAAQ,CAACtH,CAAD,CACtB,CACID,EAAA,CAAAA,IAAA,CAAYC,CAAZ,CAAoB,CAACN,EAAA,CAAAA,IAAA,CAArB,EAAsC,CAACC,EAAA,CAAAA,IAAA,CAAvC,EAAuD,CAACF,EAAA,CAAAA,IAAA,CAAxD,CADJ,CAUc8H,QAAA,GAAQ,CAACvH,CAAD,CACtB,CACID,EAAA,CAAAA,IAAA,CAAYC,CAAZ,CAAoB,CAACR,EAAA,CAAAA,IAAA,CAArB,EAAqC,CAACE,EAAA,CAAAA,IAAA,CAAtC,CADJ;AAUc8H,QAAA,GAAQ,CAACxH,CAAD,CACtB,CACID,EAAA,CAAAA,IAAA,CAAYC,CAAZ,CAAoBN,EAAA,CAAAA,IAAA,CAApB,EAAqC,CAACC,EAAA,CAAAA,IAAA,CAAtC,EAAsD,CAACF,EAAA,CAAAA,IAAA,CAAvD,CADJ,CAUegI,QAAA,GAAQ,CAACzH,CAAD,CACvB,CACID,EAAA,CAAAA,IAAA,CAAYC,CAAZ,CAAoBR,EAAA,CAAAA,IAAA,CAApB,EAAoCE,EAAA,CAAAA,IAAA,CAApC,CADJ,CAUcgI,QAAA,GAAQ,CAAC1H,CAAD,CACtB,CACID,EAAA,CAAAA,IAAA,CAAYC,CAAZ,CAAoB,CAACL,EAAA,CAAAA,IAAA,CAArB,EAAqC,CAACF,EAAA,CAAAA,IAAA,CAAtC,CADJ,CAUckI,QAAA,GAAQ,CAAC3H,CAAD,CACtB,CACID,EAAA,CAAAA,IAAA,CAAYC,CAAZ,CAAoBL,EAAA,CAAAA,IAAA,CAApB,CADJ,CAUciI,QAAA,GAAQ,CAAC5H,CAAD,CACtB,CACID,EAAA,CAAAA,IAAA,CAAYC,CAAZ,CAAoB,CAACN,EAAA,CAAAA,IAAA,CAArB,CADJ,CAUcmI,QAAA,GAAQ,CAAC7H,CAAD,CACtB,CACID,EAAA,CAAAA,IAAA,CAAYC,CAAZ,CAAoB,CAACL,EAAA,CAAAA,IAAA,CAArB,CADJ,CAUcmI,QAAA,GAAQ,EACtB,CACI,IAAApf,GAAA,CAhpVgBnR,EAgpVhB,CAA0B,CAA1B,CA1nViBmpB,EA0nVjB,CADJ,CAUaqH,QAAA,GAAQ,CAAC/H,CAAD,CACrB,CACID,EAAA,CAAAA,IAAA,CAAYC,CAAZ,CAAoB,CAAA,CAApB,CADJ,CAUcgI,QAAA,GAAQ,CAAChI,CAAD,CACtB,CACID,EAAA,CAAAA,IAAA,CAAYC,CAAZ,CAAoB,CAACP,EAAA,CAAAA,IAAA,CAArB,CADJ,CAUcwI,QAAA,GAAQ,CAACjI,CAAD,CACtB,CACID,EAAA,CAAAA,IAAA,CAAYC,CAAZ,CAAoBP,EAAA,CAAAA,IAAA,CAApB,CADJ,CAkFcyI,QAAA,GAAQ,CAAClI,CAAD,CACtB,CACQA,CAAJ,CAAa,CAAb,GAAkBmI,IAntGd3N,EAmtGJ,CAntGiB,CAmtGjB,CACIwF,EAAJ,CAAa,CAAb,GAAkBoI,IArrGd3N,EAqrGJ,CArrGiB,CAqrGjB,CACIuF,EAAJ,CAAa,CAAb,GAAkBqI,IAvpGd3N,EAupGJ,CAvpGiB,CAupGjB,CACIsF,EAAJ,CAAa,CAAb,GAAkBsI,IAznGd3N,EAynGJ,CAznGiB,CAynGjB,CAIA,KAAAtE,EAAA,EAAqB,CARzB;AAiBckS,QAAA,GAAQ,CAACvI,CAAD,CACtB,CACI,IAAIsB,EAAM4B,EAAA,CAAAA,IAAA,CAAiBlD,CAAjB,CACNuB,EAAAA,CAAM8B,EAAA,CAAAA,IAAA,CAAiBrD,CAAjB,CACV,KAAIxB,GAAU8C,CAAV9C,CAAuB,CAAN,CAAA8C,CAAA,CAAS,IAAAhhB,EAAA,CAAa,CAACghB,CAAd,CAAkB,CAAlB,CAAT,CAAgCA,CAAjD9C,EAAyD+C,CAI7DF,GAAA,CAAAA,IAAA,CAAoB7C,CAApB,CAA4B+C,CAA5B,CAAiCD,CAAjC,CACA,KAAAjL,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,EAAyB,IAAAI,EAAA,EAA8B,CAA9B,EAAe,IAAAH,EAAf,CAAiC,CAAjC,CAAqC,CAA9D,GAAoE,IAAAE,EAAA,CAAe,CAAf,CAAyB,CAA7F,GAAuH,CAAf,EAAA,IAAAF,EAAA,CAAkB,CAAlB,CAAsB,CAA9H,CARzB,CAiBeqL,QAAA,GAAQ,CAACxI,CAAD,CACvB,CACI,IAAIsB,EAAM0B,EAAA,CAAAA,IAAA,CAAiBhD,CAAjB,CACNuB,EAAAA,CAAM6B,EAAA,CAAAA,IAAA,CAAiBpD,CAAjB,CACV,KAAIxB,GAAU8C,CAAV9C,EAAuB,CAAN,CAAA8C,CAAA,CAAU,IAAAhhB,EAAA,CAAa,CAACghB,CAAd,CAAkB,CAAlB,CAAV,CAAiC,GAAjC,CAAwCA,CAAzD9C,GAAiE,CAAjEA,GAAuE+C,CAAvE/C,GAA+E,CAA/EA,CAIJ6C,GAAA,CAAAA,IAAA,CAAoB7C,CAApB,CAA4B+C,CAA5B,CAAiCD,CAAjC,CACA,KAAAjL,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,EAAyB,IAAAI,EAAA,EAA8B,CAA9B,EAAe,IAAAH,EAAf,CAAiC,CAAjC,CAAqC,CAA9D,GAAoE,IAAAE,EAAA,CAAe,CAAf,CAAyB,CAA7F,GAAuH,CAAf,EAAA,IAAAF,EAAA,CAAkB,CAAlB,CAAsB,CAA9H,CARzB;AA+EcsL,QAAA,GAAQ,CAACzI,CAAD,CACtB,CAII,IAAIsB,EAAM+B,EAAA,CAAAA,IAAA,CAAiBrD,CAAjB,CACV,IAAKsB,CAAL,CAMO,CACCtZ,CAAAA,CAAOgY,CAAPhY,EAAiB,CAAjBA,CAAsB,CAC1B,KAAIuZ,EAAO,IAAAjhB,EAAA,CAAa0H,CAAb,CAAPuZ,EAA4B,EAA5BA,CAAkC,IAAAjhB,EAAA,CAAa0H,CAAb,CAAmB,CAAnB,CACtC,KAAAwS,EAAA,CAAa,IAAAC,EAAb,CAA0B,CACtB6G,EAAJ,CAAU,KAAV,GAAkBA,CAAlB,EAAyB,MAAzB,CACA,KAAI9C,EAAS,CAAC,EAAE+C,CAAF,CAAQD,CAAR,CACC,OAAf,EAAI9C,CAAJ,EAAkC,KAAlC,EAAwBA,CAAxB,EACI,IAAAle,EAAA,CAAa0H,CAAb,CAGA,CAHoBwW,CAGpB,CAH6B,KAG7B,CAFA,IAAAle,EAAA,CAAa0H,CAAb,CAAmB,CAAnB,CAEA,CAFyBuZ,CAEzB,CAFgC/C,CAEhC,CAFyC8C,CAEzC,CAFiD,KAEjD,CADA,IAAA5G,EACA,CADc8D,CACd,EADwB,EACxB,CAD8BA,CAC9B,CAAA,IAAA7D,EAAA,CAAa6D,CAAb,EAAuB,EAJ3B,GAMI,IAAA/D,EAGA,CAHa,KAGb,CAFA,IAAAC,EAEA,CAFc8D,CAEd,EAFwB,EAExB,CAF8BA,CAE9B,CADA,IAAA7D,EACA,CADa4G,CACb,EADoB,EACpB,CAAa,EAAb,GAAID,CAAJ,EAAwC,KAAxC,GAAkB,IAAAhhB,EAAA,CAAa0H,CAAb,CAAlB,GACI,IAAA1H,EAAA,CAAa0H,CAAb,CADJ,CACwB,IAAA1H,EAAA,CAAa0H,CAAb,CAAmB,CAAnB,CADxB,CACgD,CADhD,CATJ,CAaA,KAAAqO,EAAA,EAAqB,EAnBlB,CANP,IAEI,KAAAqE,EAGA,CAJA,IAAAC,EAIA,CAJa,CAIb,CAFA,IAAAF,EAEA,CAFa,KAEb,CADA,IAAAD,EACA,CADa,KACb,CAAA,IAAAnE,EAAA,EAAqB,CAV7B,CAwCcqS,QAAA,GAAQ,EACtB,CACI,IAAAhgB,GAAA,CA95VgBnR,EA85VhB,CAA0B,CAA1B,CA34ViBmpB,EA24VjB,CACA,KAAArK,EAAA,EAAqB,EAFzB;AAWesS,QAAA,GAAQ,EACvB,CACQ,IAAAra,EAAJ,CA78VgBC,KA68VhB,EACI,IAAA9F,EACA,EAryVYW,GAqyVZ,CAAA,IAAAV,GAAA,CAj7VYnR,CAi7VZ,CAA0B,CAA1B,CA15VampB,EA05Vb,CAFJ,GAIQ,IAAAplB,GA8BJ,EApiWQmgB,IAoiWR,EAJQ,IAAA5b,GAIR,EAHQ,IAAAvE,GAAAkF,QAAA,CAAmB,IAAAF,EAAA,CAAa,CAAb,CAAnB,CAAoC,CAAA,CAApC,CAGR,CAAK,IAAA7c,EAAL,CAgBImlC,EAAA,CAAA,IAAAnlC,EAAA,CAhBJ,CAII+a,CAAA,CAAAA,IAAA,CAtCR,CAqDA,KAAA6X,EAAA,EAAoB,CAtDxB,CAuFcwS,QAAA,GAAQ,EACtB,CACI,IAAAngB,GAAA,CApgWgBnR,EAogWhB,CAA0B,CAA1B,CA/+ViBmpB,EA++VjB,CACA,KAAArK,EAAA,EAAqB,EAFzB,CAKA,IAAAyS,GAAmB,CACf,CADe,CACZ,CADY,CACL,CADK,CACE,EADF,CACS,CADT,CACgB,EADhB,CACuB,CADvB,CAC8B,EAD9B,CAULC,SAAA,GAAQ,CAAC/I,CAAD,CACtB,CAKI,IAAA1J,GAAA,CAAmB,IAAAD,EACnBlY,GAAA,CAAAA,IAAA,CAAWglB,EAAA,CAAAA,IAAA,CAAiBnD,CAAjB,CAAX,CACA,KAAA3J,EAAA,CAAmB,IAAAC,GAAnB,CAAsCwS,EAAA,CAAiB,IAAA5L,EAAjB,CAP1C,CAUA,IAAA8L,GAAmB,CACf,CADe,CACZ,EADY,CACJ,EADI,CACI,EADJ,CACY,EADZ,CACoB,EADpB,CAC4B,EAD5B,CACoC,EADpC,CAULC,SAAA,GAAQ,CAACjJ,CAAD,CACtB,CAKI,IAAA1J,GAAA,CAAmB,IAAAD,EACnB,KAAI/W,EAAO6jB,EAAA,CAAAA,IAAA,CAAiBnD,CAAjB,CAKPhY,EAAAA,CAAOgY,CAAPhY,EA58VYib,CA48VZjb,CAv+VY6a,CAw+VhBlB,GAAA,CAAAA,IAAA,CAAc,IAAArhB,EAAA,CAAa0H,CAAb,CAAd,CACA,KAAA1H,EAAA,CAAa0H,CAAb,CAAA,CAAoBkY,IA/0GT5f,EAAA,CA3nPKwf,CA2nPL,CAg1GX3hB,GAAA,CAAAA,IAAA,CAAWmB,CAAX,CACA,KAAA+W,EAAA,CAAmB,IAAAC,GAAnB,CAAsC0S,EAAA,CAAiB,IAAA9L,EAAjB,CAf1C;AAqGA,IAAAgM,GAAmB,CACf,CADe,CACR,CADQ,CACD,CADC,CACM,EADN,CACc,EADd,CACqB,EADrB,CAC6B,EAD7B,CACqC,EADrC,CAEf,CAFe,CAER,CAFQ,CAED,CAFC,CAEM,EAFN,CAEc,EAFd,CAEqB,EAFrB,CAE6B,EAF7B,CAEqC,EAFrC,CAWLC,SAAA,GAAQ,CAACnJ,CAAD,CACtB,CAKI,IAAIhjC,EAAOkmC,EAAA,CAAAA,IAAA,CAAiBlD,CAAjB,CACX,KAAA1J,GAAA,CAAmB,IAAAD,EACnByN,GAAA,CAAAA,IAAA,CAAkB9D,CAAlB,CAA0BhjC,CAA1B,CAAgC,IAAAikC,GAAhC,CACA,KAAA5K,EAAA,CAAmB,IAAAC,GAAnB,CAAsC4S,EAAA,EAAkB,IAAA7L,EAAA,CAAc,CAAd,CAAkB,CAApC,EAAyC,IAAAH,EAAzC,CAAtC,EAA+G,CAAf,EAAA,IAAAC,EAAA,EAAqB,IAAAD,EAArB,CAAuC,CAAvC,CAAmC,CAAnI,CARJ,CAiBekM,QAAA,GAAQ,CAACpJ,CAAD,CACvB,CACI,IAAIhjC,EAAOgmC,EAAA,CAAAA,IAAA,CAAiBhD,CAAjB,CACX2D,GAAA,CAAAA,IAAA,CAAkB3D,CAAlB,CAA0BhjC,CAA1B,CA5iWgBqT,KA4iWhB,CAAmD,IAAA4wB,GAAnD,CACA,KAAA5K,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,EAAyB,IAAAI,EAAA,EAA8B,CAA9B,EAAe,IAAAH,EAAf,CAAiC,CAAjC,CAAqC,CAA9D,GAAoE,IAAAE,EAAA,CAAe,CAAf,CAAyB,CAA7F,GAAuH,CAAf,EAAA,IAAAF,EAAA,CAAkB,CAAlB,CAAsB,CAA9H,CAHzB,CAMA,IAAAkM,GAAmB,CACf,CADe,CACR,EADQ,CACA,EADA,CACQ,EADR,CACgB,EADhB,CACwB,EADxB,CACgC,EADhC,CACwC,EADxC,CAiELC;QAAA,GAAQ,CAACtJ,CAAD,CACtB,CACI,IAAIsB,EAAM+B,EAAA,CAAAA,IAAA,CAAiBrD,CAAjB,CACNhY,EAAAA,CAAOgY,CAAPhY,EAAiB,CAAjBA,CAAsB,CAEtBwW,EAAAA,EAAW8C,CAAX9C,EAAkB,EAAlBA,EAAyB,EAAzBA,GADM,IAAAle,EAAAihB,CAAavZ,CAAbuZ,CACN/C,EAAwC,EAAxCA,EAA+C,EAA/CA,CACJ,KAAAle,EAAA,CAAa0H,CAAb,CAAA,CAAqBwW,CAArB,EAA+B,EAA/B,CAAqC,KACrC,KAAAle,EAAA,CAAa0H,CAAb,CAAmB,CAAnB,CAAA,CAAwBwW,CAAxB,CAAiC,KACbA,EAAA,EAAO,CAA3B+K,KAx7FI5O,EAAA,CAAa6D,CAAb,EAAuB,EAw7F3B+K,KAv7FI7O,EAAA,CAu7FJ6O,IAv7FiB5O,EAAb,CAA0B6D,CAu7F9B+K,KAt7FI9O,EAAA,CAAa,CAs7FjB8O,KAr7FI/O,EAAA,CAAwB,MAAX,CAACgE,CAAD,EAA6B,KAA7B,CAAoBA,CAApB,CAAqC,KAArC,CAA+C,CAs7FhE,KAAAnI,EAAA,EAAqB,EARzB,CAyCcmT,QAAA,GAAQ,EACtB,CACI,IAAAnT,EAAA,EAAqB,CADzB,CAUgBoT,QAAA,GAAQ,EACxB,CACU,IAAAnb,EAAN,CA10WgBC,KA00WhB,GACIwQ,IArlIAp7B,EAAAsX,MAAA,EAulIA,CAtlIAmD,EAAA,CAolIA2gB,IAplIA,CAslIA,CAAI,IAAAzjB,GAAJ,EA6CI,IAAAA,GAAAkF,QAAA,CAAmB,IAAAF,EAAA,CAAa,CAAb,CAAnB,CAAoC,CAAA,CAApC,CAhDR,CAmDA,KAAA+V,EAAA,EAAoB,GApDxB,CAkIcqT,QAAA,GAAQ,CAAC1J,CAAD,CACtB,CACI,GAAIA,CAAJ,CAAa,CAAb,CACI2J,CAAArhC,KAAA,CAAuB,IAAvB,CAA6B03B,CAA7B,CADJ,KAAA,CAIA,IAAIsB,EAAMO,EAAA,CAAAA,IAAA,CACA7B,EAANhY,EAr2WY6a,CA+BA/C,EA00WhB,EAAI9X,CAAJ,CACI7J,EAAA,CAAAA,IAAA,CAAWmjB,CAAX,CADJ,EAGInjB,EAAA,CAAAA,IAAA,CAAW,IAAAmC,EAAA,CAAa0H,CAAb,CAAX,CACA,CAAA,IAAA1H,EAAA,CAAa0H,CAAb,CAAA,CAAoBsZ,CAJxB,CAMA,KAAAjL,EAAA,EAAqB,CAfrB,CADJ,CAyBcuT,QAAA,GAAQ,EACtB,CACIhI,EAAA,CAAAA,IAAA,CACA,KAAAvL,EAAA,EAAqB,EAFzB;AAmFcwT,QAAA,GAAQ,CAAC7J,CAAD,CACtB,CACQA,CAAJ,CAAa,CAAb,GAAkB8J,IAr9HdtP,EAq9HJ,CAr9HiB,KAq9HjB,CACIwF,EAAJ,CAAa,CAAb,GAAkB+J,IAv7HdtP,EAu7HJ,CAv7HiB,KAu7HjB,CACIuF,EAAJ,CAAa,CAAb,GAAkBgK,IAz5HdtP,EAy5HJ,CAz5HiB,CAy5HjB,CACIsF,EAAJ,CAAa,CAAb,GAAkBiK,IA33HdtP,EA23HJ,CA33HiB,KA23HjB,CAIA,KAAAtE,EAAA,EAAqB,CARzB,CAiBc6T,QAAA,GAAQ,CAAClK,CAAD,CACtB,CACI,IAAIhY,GAAOgY,CAAPhY,CAx8WYib,GAw8WZjb,GAr8WYib,CAs8WhB,IAAK,IAAA3iB,EAAA,CAAa0H,CAAb,CAAL,CAA2B,IAAA1H,EAAA,CAAa0H,CAAb,CAA3B,CAA+C,CAA/C,CAAoD,KAApD,CACI7J,EAAA,CAAAA,IAAA,CAAW+hB,IAx0HJ5f,EAAA,CA3nPKwf,CA2nPL,CAw0HP,GAA4BE,CAA5B,CA98WYmK,EA88WZ,GAA4D,CAA5D,EACA,CAAA,IAAA9T,EAAA,EAAoB,CAExB,KAAAA,EAAA,EAAqB,CANzB,CAgEc+T,QAAA,GAAQ,CAACpK,CAAD,CACtB,CACIyD,CAAA,CAAAA,IAAA,CAAmBzD,CAAnB,CAA2BkD,EAAA,CAAAA,IAAA,CAAiBlD,CAAjB,CAA3B,CAAqDoG,EAArD,CACA,KAAA/P,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,EAAyB,IAAAI,EAAA,EAA8B,CAA9B,EAAe,IAAAH,EAAf,CAAiC,CAAjC,CAAqC,CAA9D,GAAoE,IAAAE,EAAA,CAAe,CAAf,CAAyB,CAA7F,GAAuH,CAAf,EAAA,IAAAF,EAAA,CAAkB,CAAlB,CAAsB,CAA9H,CAFzB,CAWekN,QAAA,GAAQ,CAACrK,CAAD,CACvB,CACIyD,CAAA,CAAAA,IAAA,CAAmBzD,CAAnB,CAA2B,CAA3B,CAA8BsG,EAA9B,CACA,KAAAjQ,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CAuBemN,QAAA,GAAQ,EACvB,CACI,IAAA5hB,GAAA,CA9oXgBnR,EA8oXhB,CAA2B,CAA3B,CA5nXiBmpB,EA4nXjB,CADJ;AAsCe6J,QAAA,GAAQ,EACvB,CAuCQ,IAAAjvB,GAAJ,GACI,IAAAA,GAAAiF,GAAA,CAAmB,IAAAD,EAAA,CAAa,CAAb,CAAnB,CAAoC,CAAA,CAApC,CACA,CAAA,IAAAhF,GAAAkF,QAAA,CAAmB,IAAAF,EAAA,CAAa,CAAb,CAAnB,CAAoC,CAAA,CAApC,CAFJ,CAIA,KAAA+a,EAAA,EAnqXgBkF,CAoqXhBX,GAAA,CAAAA,IAAA,CAAgB,EAAhB,CACA,KAAAvJ,EAAA,EAAoB,CA7CxB,CAsDcmU,QAAA,GAAQ,CAACxK,CAAD,CACtB,CAEIyD,CAAA,CAAAA,IAAA,CAAmBzD,CAAnB,CAA2B,IAAA1f,EAAA,EADhB0f,CACgB,EAzoXXiD,CAyoXW,CApqXXJ,CAoqXW,EAAmB,IAAAtH,GAAnB,CAA3B,CAA+DiL,EAA/D,CACA,KAAAnQ,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAHzB,CAYoBsN,QAAA,EAAQ,CAACzK,CAAD,CAC5B,CACoBv8B,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAAA,EAAAA,CACR,CAqkUJ,CArkUI,IAAA,EAqkUJ,CAAI6G,CAAA,CAAAA,CAAA,CAzjqBIgN,CAyjqBJ,CAAJ,EACI9M,CAAA,CAAAA,CAAA,CAAkB,mBAAlB,CAAwCge,CAAA,CAAAA,CAAA,CAtkUxCwX,CAskUwC,CAAxC,CAAgE,CAAA,CAAhE,CAAsE,CAAA,CAAtE,CACA,CAAA,CAAA,CAAO4I,EAAA,CAAAA,CAAA,CAFX,EAIA,CAJA,CAIO,CAAA,CA1kUKnlC,EAAhB,EAGA,IAAAilB,GAAA,CAjwXgBnR,CAiwXhB,CAA+B,CAA/B,CA1uXiBmpB,EA0uXjB,CAJJ,CAaegK,QAAA,GAAQ,CAAC1K,CAAD,CACvB,CACI2K,EAAA,CAAmB3K,CAAnB,EAA6B,EAA7B,CAAA13B,KAAA,CAAsC,IAAtC,CAA4C03B,CAA5C,CADJ,CAqBoB4K,QAAA,GAAQ,CAAC5K,CAAD,CAC5B,CACI6K,EAAA,CAAoB7K,CAApB,EAA8B,CAA9B,CAAmC,CAAnC,CAAA13B,KAAA,CAA6C,IAA7C,CAAmD03B,CAAnD,CADJ,CAUoB8K,QAAA,GAAQ,CAAC9K,CAAD,CAC5B,CACI+K,EAAA,CAAoB/K,CAApB,EAA8B,CAA9B,CAAmC,CAAnC,CAAA13B,KAAA,CAA6C,IAA7C,CAAmD03B,CAAnD,CADJ,CAUoBgL,QAAA,GAAQ,CAAChL,CAAD,CAC5B,CACIiL,EAAA,CAAoBjL,CAApB,EAA8B,CAA9B,CAAmC,CAAnC,CAAA13B,KAAA,CAA6C,IAA7C,CAAmD03B,CAAnD,CADJ;AAqBoBkL,QAAA,GAAQ,CAAClL,CAAD,CAC5B,CACImL,EAAA,CAAmBnL,CAAnB,CAA4B,EAA5B,CAAA13B,KAAA,CAAsC,IAAtC,CAA4C03B,CAA5C,CADJ,CAUoBoL,QAAA,GAAQ,CAACpL,CAAD,CAC5B,CACIqL,EAAA,CAAmBrL,CAAnB,CAA4B,EAA5B,CAAA13B,KAAA,CAAsC,IAAtC,CAA4C03B,CAA5C,CADJ,CAgCoBsL,QAAA,GAAQ,CAACtL,CAAD,CAC5B,CACIuL,EAAA,CAAoBvL,CAApB,EAA8B,CAA9B,CAAmC,CAAnC,CAAA13B,KAAA,CAA6C,IAA7C,CAAmD03B,CAAnD,CADJ,CAUoBwL,QAAA,GAAQ,CAACxL,CAAD,CAC5B,CACIyL,EAAA,CAAoBzL,CAApB,EAA8B,CAA9B,CAAmC,CAAnC,CAAA13B,KAAA,CAA6C,IAA7C,CAAmD03B,CAAnD,CADJ,CAUoB0L,QAAA,GAAQ,CAAC1L,CAAD,CAC5B,CACI2L,EAAA,CAAoB3L,CAApB,EAA8B,CAA9B,CAAmC,CAAnC,CAAA13B,KAAA,CAA6C,IAA7C,CAAmD03B,CAAnD,CADJ;AAIA,IAAA2K,GAAqB,CA9HDiB,QAAQ,CAAC5L,CAAD,CAC5B,CACI6L,EAAA,CAAoB7L,CAApB,EAA8B,CAA9B,CAAmC,EAAnC,CAAA13B,KAAA,CAA6C,IAA7C,CAAmD03B,CAAnD,CADJ,CA6HqB,CAEjBmJ,EAFiB,CAGjBZ,EAHiB,CAIjBrB,EAJiB,CAKjBJ,EALiB,CAMjBE,EANiB,CAOjBP,EAPiB,CAQjBgE,CARiB,CAtCDqB,QAAQ,CAAC9L,CAAD,CAC5B,CACI+L,EAAA,CAAoB/L,CAApB,EAA8B,CAA9B,CAAmC,EAAnC,CAAA13B,KAAA,CAA6C,IAA7C,CAAmD03B,CAAnD,CADJ,CAqCqB,CAUjBoJ,EAViB,CAWjBZ,EAXiB,CAYjBrB,EAZiB,CAajBJ,EAbiB,CAcjBE,EAdiB,CAejBmD,EAfiB,CAgBjBK,CAhBiB,CAArB,CAmBAoB,GAAqB,CArGDG,QAAQ,CAAChM,CAAD,CAC5B,CACIiM,EAAA,CAAoBjM,CAApB,EAA8B,CAA9B,CAAmC,EAAnC,CAAA13B,KAAA,CAA6C,IAA7C,CAAmD03B,CAAnD,CADJ,CAoGqB,CAEjB+H,EAFiB,CAGjBH,EAHiB,CAIjBR,EAJiB,CAKjBC,EALiB,CAMjBK,EANiB,CAOjBJ,EAPiB,CAQjBE,EARiB,CASjByB,EATiB,CAUjBA,EAViB,CAWjB2B,EAXiB,CAYjBE,EAZiB,CAajBE,EAbiB,CAcjBP,CAdiB,CAejBA,CAfiB,CAgBjBA,CAhBiB,CAnBrB,CAsCAI,GAAqB,CA9vCPqB,QAAQ,CAAClM,CAAD,CACtB,CACI8D,EAAA,CAAAA,IAAA,CAAkB9D,CAAlB,CAA0B,CAA1B,CAA6B,IAAAkB,GAA7B,CACA,KAAA7K,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CA6vCqB,CAhoCPgP,QAAQ,CAACnM,CAAD,CACtB,CACIyD,CAAA,CAAAA,IAAA,CAAmBzD,CAAnB,CAA2B,CAA3B,CAA8BsF,EAA9B,CACA,KAAAjP,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CA+nCqB,CA78BPiP,QAAQ,CAACpM,CAAD,CACtB,CACIyD,CAAA,CAAAA,IAAA,CAAmBzD,CAAnB,CAA2B,CAA3B,CAA8B2F,EAA9B,CACA,KAAAtP,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CA48BqB,CAxmCPkP,QAAQ,CAACrM,CAAD,CACtB,CACIyD,CAAA,CAAAA,IAAA,CAAmBzD,CAAnB,CAA2B,CAA3B,CAA8BwF,EAA9B,CACA,KAAAnP,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CAumCqB,CAtCrB,CA6CA4N,GAAqB,CA1rBPuB,QAAQ,CAACtM,CAAD,CACtB,CACIyD,CAAA,CAAAA,IAAA,CAAmBzD,CAAnB,CAA2B,CAA3B,CAA8B8F,EAA9B,CACA;IAAAzP,EAAA,EAAqB,IAAA6G,EAAA,CAAe,EAAf,CAA0B,CAFnD,CAyrBqB,CA7rDPqP,QAAQ,CAACvM,CAAD,CACtB,CACIyD,CAAA,CAAAA,IAAA,CAAmBzD,CAAnB,CAA2BR,EAAA,CAAAA,IAAA,CAAA,CAAc,CAAd,CAAkB,CAA7C,CAAgDmF,EAAhD,CACA,KAAAtO,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CA4rDqB,CA9ePqP,QAAQ,CAACxM,CAAD,CACtB,CACIyD,CAAA,CAAAA,IAAA,CAAmBzD,CAAnB,CAA2BR,EAAA,CAAAA,IAAA,CAAA,CAAc,CAAd,CAAkB,CAA7C,CAAgD4G,EAAhD,CACA,KAAA/P,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CA6eqB,CApSPsP,QAAQ,CAACzM,CAAD,CACtB,CACQxB,CAAAA,CAAS6E,EAAA,CAAAA,IAAA,CAAiBrD,CAAjB,CAEb,KAAAkB,GAAA,CAAoB1C,CAApB,CACA,KAAAnI,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAJzB,CAmSqB,CA7CrB,CAoDA8N,GAAqB,CAxkBPyB,QAAQ,CAAC1M,CAAD,CACtB,CACIyD,CAAA,CAAAA,IAAA,CAAmBzD,CAAnB,CAA2B,CAA3B,CAA8BkG,EAA9B,CACA,KAAA7P,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CAukBqB,CAhmBPwP,QAAQ,CAAC3M,CAAD,CACtB,CACIyD,CAAA,CAAAA,IAAA,CAAmBzD,CAAnB,CAA2B,CAA3B,CAA8BgG,EAA9B,CACA,KAAA3P,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CA+lBqB,CAhiDPyP,QAAQ,CAAC5M,CAAD,CACtB,CACIyD,CAAA,CAAAA,IAAA,CAAmBzD,CAAnB,CAA2B,CAA3B,CAA8BgF,EAA9B,CACA,KAAA3O,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CA+hDqB,CAxjDP0P,QAAQ,CAAC7M,CAAD,CACtB,CACIyD,CAAA,CAAAA,IAAA,CAAmBzD,CAAnB,CAA2B,CAA3B,CAA8B8E,EAA9B,CACA,KAAAzO,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CAujDqB,CApDrB,CA2DA8O;AAAqB,CA5GDa,QAAQ,CAAC9M,CAAD,CAC5B,CACI+M,EAAA,CAAmB/M,CAAnB,CAA4B,EAA5B,CAAA13B,KAAA,CAAsC,IAAtC,CAA4C03B,CAA5C,CADJ,CA2GqB,CAEjByK,CAFiB,CAGjBA,CAHiB,CAIjBA,CAJiB,CAKjB1B,EALiB,CAMjBA,EANiB,CAOjBA,EAPiB,CAQjBA,EARiB,CASjBW,EATiB,CAUjBe,CAViB,CAWjBS,EAXiB,CAYjBE,EAZiB,CAajBf,EAbiB,CAcjBA,EAdiB,CAejBA,EAfiB,CAgBjBA,EAhBiB,CA3DrB,CA8EA0C,GAAqB,CACjBpE,EADiB,CAEjB4B,EAFiB,CAGjBX,EAHiB,CAIjB9B,EAJiB,CAKjBe,EALiB,CAMjBY,EANiB,CAOjBgB,CAPiB,CAQjBA,CARiB,CASjBA,CATiB,CAUjBA,CAViB,CAWjBA,CAXiB,CAYjBA,CAZiB,CAajBA,CAbiB,CAcjBA,CAdiB,CAejBA,CAfiB,CAgBjBA,CAhBiB,CA9ErB,CAiGAU,GAAqB,CACjB3B,EADiB,CAjyCPwD,QAAQ,EACtB,CACI7E,IAnqGI3N,EAAA,CAAa,CAoqGjB,KAAAnE,EAAA,EAAqB,CAFzB,CAgyCqB,CAzwCP4W,QAAQ,EACtB,CACI7E,IA5pGI3N,EAAA,CAAa,CA6pGjB,KAAApE,EAAA,EAAqB,CAFzB,CAwwCqB,CAIjB6R,EAJiB,CA7vCPgF,QAAQ,EACtB,CACI7E,IAzoGI3N,EAAA,CAAa,CA0oGjB,KAAArE,EAAA,EAAqB,CAFzB,CA4vCqB,CAMjB6R,EANiB,CAOjBA,EAPiB,CAQjBA,EARiB,CArxCPiF,QAAQ,EACtB,CACI7E,IAllGI3N,EAAA,CAAa,CAmlGjB,KAAAtE,EAAA,EAAqB,CAFzB,CAoxCqB,CAUjB6R,EAViB,CAWjBA,EAXiB,CAYjBA,EAZiB,CAajBA,EAbiB,CAcjBA,EAdiB,CAejBA,EAfiB,CAgBjBA,EAhBiB,CAjGrB,CAoHAmD,GAAqB,CACjB7B,EADiB,CA7hBP4D,QAAQ,EACtB,CACItD,IAr6HItP,EAAA,CAAa,KAs6HjB,KAAAnE,EAAA,EAAqB,CAFzB,CA4hBqB,CArgBPgX,QAAQ,EACtB,CACItD,IA95HItP,EAAA,CAAa,KA+5HjB,KAAApE,EAAA,EAAqB,CAFzB,CAogBqB,CAIjBwT,EAJiB,CAzfPyD,QAAQ,EACtB,CACItD,IA34HItP,EAAA,CAAa,CA44HjB,KAAArE,EAAA,EAAqB,CAFzB,CAwfqB,CAMjBwT,EANiB,CAOjBA,EAPiB,CAQjBA,EARiB,CAjhBP0D,QAAQ,EACtB,CACItD,IAp1HItP,EAAA,CAAa,KAq1HjB,KAAAtE,EAAA,EAAqB,CAFzB,CAghBqB,CAUjBwT,EAViB,CAWjBA,EAXiB,CAYjBA,EAZiB,CAajBA,EAbiB,CAcjBA,EAdiB,CAejBA,EAfiB,CAgBjBA,EAhBiB,CApHrB,CAuIAkC,GAAqB,CACjBlE,EADiB,CAEjBF,EAFiB,CAGjBJ,EAHiB,CAIjBE,EAJiB,CAKjBO,EALiB,CAMjBC,EANiB,CAOjBrB,EAPiB,CAQjBC,EARiB,CASjB6B,EATiB,CAUjB4B,EAViB,CAWjBgB,EAXiB,CAYjBE,EAZiB;AAajBE,EAbiB,CAcjBjB,CAdiB,CAejBA,CAfiB,CAgBjBA,CAhBiB,CAvIrB,CA0JAc,GAAqB,CAt2CNiC,QAAQ,CAACxN,CAAD,CACvB,CACI2D,EAAA,CAAAA,IAAA,CAAkB3D,CAAlB,CAA0B,CAA1B,CAvkVgB3vB,GAukVhB,CAA+C,IAAA6wB,GAA/C,CACA,KAAA7K,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CAq2CqB,CAxuCNsQ,QAAQ,CAACzN,CAAD,CACvB,CACIsD,EAAA,CAAAA,IAAA,CAAmBtD,CAAnB,CAA2B,CAA3B,CAA8BuF,EAA9B,CACA,KAAAlP,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CAuuCqB,CArjCNuQ,QAAQ,CAAC1N,CAAD,CACvB,CACIsD,EAAA,CAAAA,IAAA,CAAmBtD,CAAnB,CAA2B,CAA3B,CAA8B6F,EAA9B,CACA,KAAAxP,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CAojCqB,CAhtCNwQ,QAAQ,CAAC3N,CAAD,CACvB,CACIsD,EAAA,CAAAA,IAAA,CAAmBtD,CAAnB,CAA2B,CAA3B,CAA8B0F,EAA9B,CACA,KAAArP,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CA+sCqB,CA1JrB,CAiKAsO,GAAqB,CAlyBNmC,QAAQ,CAAC5N,CAAD,CACvB,CACIsD,EAAA,CAAAA,IAAA,CAAmBtD,CAAnB,CAA2B,CAA3B,CAA8B+F,EAA9B,CACA,KAAA1P,EAAA,EAAqB,IAAA6G,EAAA,CAAe,EAAf,CAA0B,CAFnD,CAiyBqB,CAryDN2Q,QAAQ,CAAC7N,CAAD,CACvB,CACIsD,EAAA,CAAAA,IAAA,CAAmBtD,CAAnB,CAA2BR,EAAA,CAAAA,IAAA,CAAA,CAAc,CAAd,CAAkB,CAA7C,CAAgDqF,EAAhD,CACA,KAAAxO,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CAoyDqB,CAtlBN2Q,QAAQ,CAAC9N,CAAD,CACvB,CACIsD,EAAA,CAAAA,IAAA,CAAmBtD,CAAnB,CAA2BR,EAAA,CAAAA,IAAA,CAAA,CAAc,CAAd,CAAkB,CAA7C,CAAgD6G,EAAhD,CACA,KAAAhQ,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CAqlBqB,CA1YN4Q,QAAQ,CAAC/N,CAAD,CACvB,CACQxB,CAAAA,CAAS4E,EAAA,CAAAA,IAAA;AAAiBpD,CAAjB,CAEb,KAAAkB,GAAA,CAAoB1C,CAApB,EAA8B,CAA9B,CACA,KAAAnI,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAJzB,CAyYqB,CAjKrB,CAwKAwO,GAAqB,CAhrBNqC,QAAQ,CAAChO,CAAD,CACvB,CACIsD,EAAA,CAAAA,IAAA,CAAmBtD,CAAnB,CAA2B,CAA3B,CAA8BmG,EAA9B,CACA,KAAA9P,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,EAAyB,IAAAE,GAAzB,CAAwC,CAAxC,EAA8C,CAA9C,EAAuE,CAAf,EAAA,IAAAD,EAAA,CAAkB,CAAlB,CAAsB,CAA9E,CAFzB,CA+qBqB,CAxsBN8Q,QAAQ,CAACjO,CAAD,CACvB,CACIsD,EAAA,CAAAA,IAAA,CAAmBtD,CAAnB,CAA2B,CAA3B,CAA8BiG,EAA9B,CACA,KAAA5P,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CAusBqB,CAxoDN+Q,QAAQ,CAAClO,CAAD,CACvB,CACIsD,EAAA,CAAAA,IAAA,CAAmBtD,CAAnB,CAA2B,CAA3B,CAA8BiF,EAA9B,CACA,KAAA5O,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,EAAyB,IAAAE,GAAzB,CAAwC,CAAxC,EAA8C,CAA9C,EAAuE,CAAf,EAAA,IAAAD,EAAA,CAAkB,CAAlB,CAAsB,CAA9E,CAFzB,CAuoDqB,CAhqDNgR,QAAQ,CAACnO,CAAD,CACvB,CACIsD,EAAA,CAAAA,IAAA,CAAmBtD,CAAnB,CAA2B,CAA3B,CAA8B+E,EAA9B,CACA,KAAA1O,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CA+pDqB,CAaNiR,SAAA,GAAQ,CAACpO,CAAD,CACvB,CACIqO,EAAA,CAAmBrO,CAAnB,EAA6B,EAA7B,CAAA13B,KAAA,CAAsC,IAAtC,CAA4C03B,CAA5C,CADJ;AAqFA,IAAAqO,GAAqB,CA3EDC,QAAQ,CAACtO,CAAD,CAC5B,CACIuO,EAAA,CAAoBvO,CAApB,EAA8B,CAA9B,CAAmC,EAAnC,CAAA13B,KAAA,CAA6C,IAA7C,CAAmD03B,CAAnD,CADJ,CA0EqB,CAEjBmJ,EAFiB,CAGjBZ,EAHiB,CAIjBrB,EAJiB,CAKjBJ,EALiB,CAMjBE,EANiB,CAOjBP,EAPiB,CA/BD+H,QAAQ,CAACxO,CAAD,CAC5B,CACIyO,EAAA,CAAoBzO,CAApB,EAA8B,CAA9B,CAAmC,EAAnC,CAAA13B,KAAA,CAA6C,IAA7C,CAAmD03B,CAAnD,CADJ,CA8BqB,CApBD0O,QAAQ,CAAC1O,CAAD,CAC5B,CACI2O,EAAA,CAAoB3O,CAApB,EAA8B,CAA9B,CAAmC,EAAnC,CAAA13B,KAAA,CAA6C,IAA7C,CAAmD03B,CAAnD,CADJ,CAmBqB,CAUjBoJ,EAViB,CAWjBZ,EAXiB,CAYjBrB,EAZiB,CAajBJ,EAbiB,CAcjBE,EAdiB,CAejBmD,EAfiB,CAgBjBK,CAhBiB,CAArB,CAmBA8D,GAAqB,CAxEDK,QAAQ,CAAC5O,CAAD,CAC5B,CACI6O,EAAA,CAAoB7O,CAApB,EAA8B,CAA9B,CAAmC,EAAnC,CAAA13B,KAAA,CAA6C,IAA7C,CAAmD03B,CAAnD,CADJ,CAuEqB,CAEjB+H,EAFiB,CAGjBH,EAHiB,CAIjBR,EAJiB,CAKjBC,EALiB,CAMjBK,EANiB,CAOjBJ,EAPiB,CAQjBE,EARiB,CASjByB,EATiB,CAUjBA,EAViB,CAWjB2B,EAXiB,CAYjBE,EAZiB,CAajBE,EAbiB,CAnFD8D,QAAQ,CAAC9O,CAAD,CAC5B,CACI+O,EAAA,CAAoB/O,CAApB,EAA8B,CAA9B,CAAmC,CAAnC,CAAA13B,KAAA,CAA6C,IAA7C,CAAmD03B,CAAnD,CADJ,CAkFqB,CAejByK,CAfiB,CAgBjBA,CAhBiB,CAnBrB,CAsCAsE,GAAqB,CAloCNC,QAAQ,CAAChP,CAAD,CACvB,CACQ1gB,CAAAA,CAAQ4gB,IA51GD5f,EAAA,CA3nPKwf,CA2nPL,CA41GPxgB,GAAyB0gB,CAAzB1gB,CAAkC,EAAlCA,GAA2C,CAA3CA,EAAiD,KACrD,KAAIgiB,EAAM,IAAA5b,GAAA,CAAcpG,CAAd,CAAqB,IAAAqd,GAArB,CACVxe,GAAA,CAAAA,IAAA,CAAW,IAAAmC,EAAA,CAAa,CAAb,CAAX,CACA2uB,KA9xGI3uB,EAAA,CA7rPYwf,CA6rPZ,CAAA,CA8xGOxgB,CA9xGP,CA8xGc,CA9xGd,CAAoC,KA+xGxC,KAAAgB,EAAA,CAAa,CAAb,CAAA,CAAkBghB,CAClB,KAAAjL,EAAA,EAAqB,CANzB,CAioCqB,CApmCN6Y,QAAQ,CAAClP,CAAD,CACvB,CACQhjC,CAAAA,CAAO4lC,EAAA,CAAAA,IAAA,CAA2B5C,CAA3B,CAz+VKlN,CAy+VL,CACX,KAAAmO,GAAA,CAAoBjkC,CAApB,CACA2kC,GAAA,CAAAA,IAAA,CAAc3kC,CAAd,CACA,KAAAq5B,EAAA,EAAqB,EAJzB,CAmmCqB,CAp/BN8Y,QAAQ,CAACnP,CAAD,CACvB,CAKI,IAAIhjC,EAAO6kC,EAAA,CAAAA,IAAA,CACX;IAAAvL,GAAA,CAAmB,IAAAD,EACnB,KAAA4K,GAAA,CAAoBjkC,CAApB,CACA+lC,GAAA,CAAAA,IAAA,CAA0B/C,CAA1B,CAhmWgBlN,CAgmWhB,CAAuD91B,CAAvD,CACA,KAAAq5B,EAAA,CAAmB,IAAAC,GAAnB,CAAsC+S,EAAA,CAAiB,IAAAnM,EAAjB,CAT1C,CAm/BqB,CA/jBPkS,QAAQ,CAACpP,CAAD,CACtB,CACI8D,EAAA,CAAAA,IAAA,CAAkB9D,CAAlB,CAA0BL,EAAA,CAAAA,IAAA,CAAA,CAAc,KAAd,CAAuB,CAAjD,CAAoD,IAAAsB,GAApD,CACA,KAAA5K,EAAA,EAAqB,IAAA6G,EAAA,CAAe,CAAf,CAAyB,CAAzB,EAAkD,CAAf,EAAA,IAAAC,EAAA,CAAkB,CAAlB,CAAsB,CAAzD,CAFzB,CA8jBqB,CAtCrB,CA6CA0R,GAAqB,CAvFDQ,QAAQ,CAACrP,CAAD,CAC5B,CACIsP,EAAA,CAAmBtP,CAAnB,CAA4B,EAA5B,CAAA13B,KAAA,CAAsC,IAAtC,CAA4C03B,CAA5C,CADJ,CAsFqB,CAEjByK,CAFiB,CAGjBA,CAHiB,CAIjBA,CAJiB,CAKjB1B,EALiB,CAMjBA,EANiB,CAOjBA,EAPiB,CAQjBA,EARiB,CASjBW,EATiB,CA/oBP6F,QAAQ,CAACvP,CAAD,CACtB,CACQ,EAAEA,CAAF,CAAW,CAAX,CAAJ,EAhpXYjP,IAgpXZ,CAAwB,IAAAlR,GAAxB,CACI8pB,CAAArhC,KAAA,CAAuB,IAAvB,CAA6B03B,CAA7B,CADJ,EAIM,IAAA1R,EAKN,CAtmXgBC,KAsmXhB,GAJI,IAAAD,EAEA,CAFe,IAAAA,EAEf,CAF6B,IAE7B,EAFiD0R,CAEjD,CAF0D,CAE1D,GA7lXYzR,CA6lXZ,CADA,IAAA8M,EACA,EAxgXYkF,CAwgXZ,CAAA,IAAAlF,EAAA,EAAgB,EAEpB,EAAA,IAAAhF,EAAA,EAAqB,CATrB,CADJ,CA8oBqB,CAWjB6U,EAXiB,CAYjBE,EAZiB,CAajBf,EAbiB,CAcjBA,EAdiB,CAejBA,EAfiB,CAgBjBA,EAhBiB,CA7CrB,CAgEAiF,GAAqB,CACjB3G,EADiB,CAEjB4B,EAFiB,CAv0BPiF,QAAQ,EACtB,CACI5N,EAAA,CAAAA,IAAA,CASA,KAAAvG,EAAA,EAAiB,IAAA/M,EAAjB,CA78WgBC,EA88WhB,KAAA8H,EAAA,EAAqB,EAXzB,CAs0BqB,CAIjByR,EAJiB,CAKjBe,EALiB,CAMjBY,EANiB,CAOjBG,EAPiB,CAplCN6F,QAAQ,CAACzP,CAAD,CACvB,CACI2J,CAAArhC,KAAA,CAAuB,IAAvB,CAA6B03B,CAA7B,CADJ,CAmlCqB,CASjByK,CATiB,CAUjBA,CAViB,CAWjBA,CAXiB,CAYjBA,CAZiB,CAajBA,CAbiB,CAcjBA,CAdiB,CAejBA,CAfiB,CAgBjBA,CAhBiB,CAhErB,CAmFAgE,GAAqB,CACjBnF,EADiB,CAEjBA,EAFiB,CAGjBb,EAHiB,CAIjBA,EAJiB,CAKjB/B,EALiB,CAMjBA,EANiB,CAOjBC,EAPiB,CAQjBA,EARiB;AASjB6D,EATiB,CAUjBA,EAViB,CAWjBC,CAXiB,CAYjBA,CAZiB,CAajBA,CAbiB,CAcjBA,CAdiB,CAejBP,EAfiB,CAgBjBA,EAhBiB,CAnFrB,CAsGAyE,GAAqB,CACjB9G,EADiB,CAEjBF,EAFiB,CAGjBJ,EAHiB,CAIjBE,EAJiB,CAKjBO,EALiB,CAMjBC,EANiB,CAOjBrB,EAPiB,CAQjBC,EARiB,CASjB6B,EATiB,CAUjB4B,EAViB,CAWjBgB,EAXiB,CAYjBE,EAZiB,CAajBE,EAbiB,CA/GDgE,QAAQ,CAAC1P,CAAD,CAC5B,CAxuYgBjP,IAyuYZ,CAAI,IAAAlR,GAAJ,CACI8pB,CAAArhC,KAAA,CAAuB,IAAvB,CAA6B03B,CAA7B,CADJ,CAIA2P,EAAA,CAAoB3P,CAApB,EAA8B,CAA9B,CAAmC,CAAnC,CAAA13B,KAAA,CAA6C,IAA7C,CAAmD03B,CAAnD,CALJ,CA8GqB,CAejByK,CAfiB,CAgBjBA,CAhBiB,CAtGrB,CAyHAkF,GAAqB,CA9iCNC,QAAQ,CAAC5P,CAAD,CACvB,CACI2J,CAAArhC,KAAA,CAAuB,IAAvB,CAA6B03B,CAA7B,CADJ,CA6iCqB,CArsCN6P,QAAQ,CAAC7P,CAAD,CACvB,CACQhjC,CAAAA,CAAO4lC,EAAA,CAAAA,IAAA,CAA2B5C,CAA3B,CA19VKlN,KA09VL,CACX,KAAAmO,GAAA,CAAoBjkC,CAApB,CACA2kC,GAAA,CAAAA,IAAA,CAAc3kC,CAAd,CACA,KAAAq5B,EAAA,EAAqB,EAJzB,CAosCqB,CA1lCNyZ,QAAQ,CAAC9P,CAAD,CACvB,CAKI,IAAIhjC,EAAO6kC,EAAA,CAAAA,IAAA,CACX,KAAAvL,GAAA,CAAmB,IAAAD,EACnB,KAAA4K,GAAA,CAAoBjkC,CAApB,CACA+lC,GAAA,CAAAA,IAAA,CAA0B/C,CAA1B,CA5kWgBlN,KA4kWhB,CAAuD91B,CAAvD,CACA,KAAAq5B,EAAA,CAAmB,IAAAC,GAAnB,CAAsC+S,EAAA,CAAiB,IAAAnM,EAAjB,CAT1C,CAylCqB,CAnqCN6S,QAAQ,CAAC/P,CAAD,CACvB,CACI2J,CAAArhC,KAAA,CAAuB,IAAvB,CAA6B03B,CAA7B,CADJ,CAkqCqB,CA+BjB39B;QAnBE2tC,GAmBS,CAACC,CAAD,CACX,CACI,CAAA,KAAA,CAAA,IAAA,CAAM,KAAN,CAAaA,CAAb,CAtiXQp4B,GAsiXR,CAGA,KAAAlb,GAAA,CADA,IAAAuzC,EACA,CADc,IAGd,KAAAC,EAAA,CAAe,CAACF,CAAA,KAChB,KAAAG,EAAA,CAAe,CAACH,CAAA,KAChB,KAAAI,EAAA,CAAkB,CAAA,CAalB,KAAAC,EAAA,CAAiBL,CAAA,MACY,SAA7B,EAAI,MAAO,KAAAK,EAAX,GACI,IAAAA,EADJ,CACqBnzC,IAAA,CAAK,IAAAmzC,EAAL,CADrB,CAIA,KAAAC,EAAA,CAAiBN,CAAA,KACjB,KAAAp4C,EAAA,CAAiB24C,EAAA,CAAgB,IAAAD,EAAhB,CAEjB,IAAI,IAAAA,EAAJ,CAAoB,CACZE,CAAAA,CAAW,IAAAF,EAOf,KAAIG,EAAWC,EAAA,CAAiB,IAAA94C,EAAjB,CA9hhBP+4C,OA+hhBR,EAAIF,CAAJ,EA5hhBQE,KA4hhBR,EAAuCF,CAAvC,GACID,CADJ,CACeI,EAAA,EADf,CAC6E,uBAD7E,CACmF,IAAAN,EADnF,CAC4L,wCAD5L,CAGA,KAAIO,EAAM,IACVC,GAAA,CAAgBN,CAAhB,CAA0B,IAA1B,CAAgC,CAAA,CAAhC,CAAsCO,QAAiB,CAACt2C,CAAD,CAAOu2C,CAAP,CAAkBv1C,CAAlB,CAA8B,CACjDA,CAyExC,EAzEQo1C,CA0EJhoC,EAAA,CAAY,qCAAZ,CA1EoCpN,CA0EpC,CAAiE,IAAjE,CA1EmBhB,CA0EnB,CAA+E,GAA/E,CACA,CA3EIo2C,CA2EJP,EAAA,CAAiB,IAFrB,GAKIW,EAAA,CA9EIJ,CA8EyBhuC,GAA7B,CA9EmBpI,CA8EnB,CA9EyBu2C,CA8EzB,CAEA,CAAA,CADIh2C,CACJ,CADek2C,EAAA,CA/EIz2C,CA+EJ,CA/EUu2C,CA+EV,CACf,GAhFIH,CAiFAZ,EACA,CADcj1C,CAAAyB,EACd,CAlFAo0C,CAkFAn0C,GAAA,CAAgB1B,CAAA0B,GAFpB,EAhFIm0C,CAoFAP,EAJJ,CAIqB,IAXzB,CAcAa,GAAA,CAvFQN,CAuFR,CAxFyF,CAArF,CAbgB,CA7BxB;AApBmBj2B,CAAAvY,CAAjB0tC,EAAiB1tC,CAAAA,CAAAA,CA6EnB,EAAA,CA55hBJ,EAAA+uC,UA45hBI7oC,EAAAqT,GAAA,CAAAA,QAAO,CAACjY,CAAD,CAAMD,CAAN,CAAWD,CAAX,CAAgBD,CAAhB,CACP,CACI,IAAAE,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CACX2tC,GAAA,CAAAA,IAAA,CAJJ,CAeA5oC,EAAA0B,GAAA,CAAAA,QAAO,EACP,CACQ,IAAAvN,GAAJ,GACQ,IAAA8G,EAOJ,EANI6tC,EAAA,CAAA,IAAA7tC,EAAA,CAAoB,IAAAhB,GAApB,CAA6B,IAAA0tC,EAA7B,CAA2C,IAAAC,EAA3C,CAAyD,IAAAzzC,GAAzD,CAMJ,CAAA,OAAO,IAAAA,GARX,CAUA,OAAO,CAAA,CAXX,CA2BA6L,EAAA2B,GAAA,CAAAA,QAAS,EACT,CACI,MAAO,CAAA,CADX,CAwCAinC;QAAA,GAAO,CAAPA,CAAO,CACP,CACI,GAAI,CAACznC,EAAA,CAAAA,CAAA,CAAL,CAAqB,CACjB,GAAI,CAAA4mC,EAAJ,CAAoB,CAIhB,GAAI,CAAC,CAAAL,EAAL,EAAoB,CAAC,CAAAvsC,EAArB,CAA+B,MAK1B,EAAAysC,EAAL,GACI,CAAAA,EADJ,CACmB,CAAAF,EAAA33C,OADnB,CAGA,IAAI,CAAA23C,EAAA33C,OAAJ,EAA0B,CAAA63C,EAA1B,CAOI3mC,EAAA,CAAAA,CAAA,CAAc,YAAd,CA/7fL9R,CAAA,CA+7fgD,CAAAu4C,EAAA33C,OA/7fhD,CAAa,CAAb,CAAgB,CAAA,CAAhB,CA+7fK,CAAiE,mCAAjE,CA/7fLZ,CAAA,CA+7f0H,CAAAy4C,EA/7f1H,CAAa,CAAb,CAAgB,CAAA,CAAhB,CA+7fK,CAAqI,GAArI,CAPJ,KASK,CAsCjB,CAAA,CAAA,CAtCiCD,IAAAA,EAAAA,CAAAA,EAuC7B,IAzxSkBlS,KAyxSlB,EAAI3e,CAAJ,EAAqCA,CAArC,CAzxSkB2e,KAyxSlB,CAAoElc,EAApE,CAA4F,CAYxF,IAAA,EAAc,EAAVwvB,EAAAA,EAAU,CAAA,CACTjyB,CADS,CAAA,CACF,CAAC0wB,EAAAl3C,UAAA04C,GAAD,CAAiCxB,EAAAl3C,UAAA24C,GAAjC,CAAkE,IAAlE,CAAwE,IAAxE,CAA8E,IAA9E,CApDCC,CAoDmFtB,EAApF,EAAoG,CAApG,CADE,CAAA,CAAVmB,CAGJ,IAAIz1B,EAAA,CAtDS41B,CAsDT/tC,EAAA,CAtDS+tC,CAsDT,CAA0BH,CAA1B,CAAJ,CAAwC,CAtD3BG,CAuDTp2C,OAAA,CAAY,QAAZ,CAvDSo2C,CAuDctB,EAAvB,CAAsC,eAAtC,CAAwDvyB,CAAA,CAAUyB,CAAV,CAAxD,CAEA,EAAA,CAzDSoyB,CAwDTrB,EACA,CADkB,CAAA,CAClB,OAAA,CAHoC,CAfgD,CAA5F,IAqBK,IAAI1sB,EAAA,CA5DQ+tB,CA4DR/tC,EAAA,CAAmB2b,CAAnB,CA5DQoyB,CA4DiBtB,EAAzB,CAAuC/e,EAAvC,CAAJ,CAAkE,CAGnE,IAAKh9B,CAAL,CAAS,CAAT,CAAYA,CAAZ,CA/Daq9C,CA+DGxB,EAAA33C,OAAhB,CAAoClE,CAAA,EAApC,CACI8xB,EAAA,CAhESurB,CAgET/tC,EAAA,CAAuB2b,CAAvB,CAA8BjrB,CAA9B,CAhESq9C,CAgEwBxB,EAAA,CAAY77C,CAAZ,CAAjC,CAEJ,EAAA,CAAO,CAAA,CAAP,OAAA,CANmE,CAYvE,CAAA,CAAO,CAAA,CAlCX,CAtCiB,GAAI,CAAJ,CAA+B,CAE5Bs9C,CAAAA,CAAU,EACe,SAA7B,EAAI,MAAO,EAAArB,EAAX;AACIqB,CAAA/zC,KAAA,CAAa,CAAA0yC,EAAb,CADJ,CAE6B,IAF7B,EAEW,CAAAA,EAFX,EAEqC,CAAAA,EAAA/3C,OAFrC,GAGIo5C,CAHJ,CAGc,CAAArB,EAHd,CAKA,KAASj8C,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAAoBs9C,CAAAp5C,OAApB,CAAoClE,CAAA,EAApC,CAAyC,CAt0TrD,IAu0TgBu9C,IAAAA,EAAAA,CAAAA,CAAc,EAAAD,CAAA,CAAQt9C,CAAR,CAAdu9C,CAiFFjuC,EAAAA,CAAAA,EAjFEiuC,CAiFqCxB,EAAAA,CAAAA,EAjFrCwB,CAz0TZC,EAAU,EAy0TED,CAx0TZluB,EAy5TmC,CAAAysB,EAz5TnCzsB,GAAkB,CAAA1B,EACtB,CAAc,CAAd,CAAOuC,CAAP,EAAmBb,CAAnB,CAA4B,CAAAX,EAAAxqB,OAA5B,CAAA,CACIs5C,CAAAj0C,KAAA,CAAa,CAAAmlB,EAAA,CAAgBW,CAAA,EAAhB,CAAb,CACA,CAAAa,CAAA,EAAQ,CAAAzC,EAu5TZne,EAAAA,CAAAA,CAAAA,EAA+BysC,EAAAA,CAAAA,CAAAA,EAj2T3B/7C,EAAAA,CAAI,CAER,KA+1TyBirB,CA/1TzB,IADsB,CAAA0C,EACtB,CAAc,CAAd,CAAOuC,CAAP,EAAmBb,CAAnB,CAA4B,CAAAX,EAAAxqB,OAA5B,CAAA,CAAoD,CAC5C+qB,CAAAA,CAAQuuB,CAAA,CAAQx9C,CAAA,EAAR,CAEZ,IAAI,CAACivB,CAAL,CAAY,KAMZ,EAAAP,EAAA,CAAgBW,CAAA,EAAhB,CAAA,CAA4BJ,CAC5BiB,EAAA,EAAQ,CAAAzC,EAVwC,CA4wTC,CAapC,CAAAuuB,EAAL,EACI,OAAO,CAAAH,EAtBqB,CAA/B,CArBW,CA+CpBtmC,CAAA,CAAAA,CAAA,CAhDiB,CADzB,CA4HApB,CAAAgpC,GAAA,CAAAA,QAAW,CAAClyB,CAAD,CACX,CAEI,MAAO,KAAA4wB,EAAA,CADE5wB,CACF,CADS,IAAA6wB,EACT,CAFX,CAkBA3nC,EAAAipC,GAAA,CAAAA,QAAY,EACZ,EAuCJhwB,GAAA,CA5BIZ,QAAW,EACX,CAEI,IADA,IAAIixB,EAAQzsC,CAAA,CAA6B0b,QAA7B,CAAuC5b,CAAvC,CAAuD,KAAvD,CAAZ,CACS4sC,EAAO,CAAhB,CAAmBA,CAAnB,CAA0BD,CAAAv5C,OAA1B,CAAwCw5C,CAAA,EAAxC,CAAgD,CAC5C,IAAIC,EAAOF,CAAA,CAAMC,CAAN,CAAX,CACI9B,EAAWjqC,EAAA,CAA4BgsC,CAA5B,CACXlB,EAAAA,CAAM,IAAId,EAAJ,CAAaC,CAAb,CACV9uB,GAAA,CAAgC2vB,CAAhC,CAAqCkB,CAArC,CAJ4C,CAFpD,CA2BJ,CA+BI3vC;QAtBE4vC,GAsBS,CAACC,CAAD,CACX,CACI,CAAA,KAAA,CAAA,IAAA,CAAM,KAAN,CAAaA,CAAb,CAGA,KAAAv1C,GAAA,CADA,IAAAuzC,EACA,CADc,IAGd,KAAAiC,EAAA,CAAe,CAACD,CAAA,KAChB,KAAAE,EAAA,CAAe,CAACF,CAAA,KAEhB,KAAAt1C,GAAA,CAAgBs1C,CAAA,KAChB,KAAAr1C,GAAA,CAAgBq1C,CAAA,KACK,KAArB,EAAI,IAAAt1C,GAAJ,GAA2B,IAAAA,GAA3B,CAA2C,CAAC,IAAAA,GAA5C,CACqB,KAArB,EAAI,IAAAC,GAAJ,GAA2B,IAAAA,GAA3B,CAA2C,CAAC,IAAAA,GAA5C,CAGA,KAAAw1C,EAAA,CAAkB,IAAApZ,EAAlB,CAAgC,CAAA,CAEhC,KAAAsX,EAAA,CAAiB2B,CAAA,KACjB,KAAAr6C,EAAA,CAAiB24C,EAAA,CAAgB,IAAAD,EAAhB,CAEjB,IAAI,IAAAA,EAAJ,CAAoB,CACZE,CAAAA,CAAW,IAAAF,EAOf,KAAIG,EAAWC,EAAA,CAAiB,IAAA94C,EAAjB,CA33hBP+4C,OA43hBR,EAAIF,CAAJ,EAz3hBQE,KAy3hBR,EAAuCF,CAAvC,GACID,CADJ,CACeI,EAAA,EADf,CAC6E,uBAD7E,CACmF,IAAAN,EADnF,CAC4L,wCAD5L,CAGA,KAAI+B,EAAM,IACVvB,GAAA,CAAgBN,CAAhB,CAA0B,IAA1B,CAAgC,CAAA,CAAhC,CAAsCO,QAAiB,CAACt2C,CAAD,CAAOu2C,CAAP,CAAkBv1C,CAAlB,CAA8B,CACjDA,CAkFxC,EAlFQ42C,CAmFJxpC,EAAA,CAAY,qCAAZ,CAnFoCpN,CAmFpC,CAAiE,IAAjE,CAnFmBhB,CAmFnB,CAA+E,GAA/E,CACA,CApFI43C,CAoFJ/B,EAAA,CAAiB,IAFrB,GAKIW,EAAA,CAvFIoB,CAuFyBxvC,GAA7B,CAvFmBpI,CAuFnB,CAvFyBu2C,CAuFzB,CAEA,CAAA,CADIh2C,CACJ,CADek2C,EAAA,CAxFIz2C,CAwFJ;AAxFUu2C,CAwFV,CACf,GAzFIqB,CA0FApC,EAGA,CAHcj1C,CAAAyB,EAGd,CA7FA41C,CA2FA31C,GAEA,CAFgB1B,CAAA0B,GAEhB,CADqB,IACrB,EA7FA21C,CA4FI11C,GACJ,GA7FA01C,CA4F2B11C,GAC3B,CAD2C3B,CAAA2B,GAC3C,EAAqB,IAArB,EA7FA01C,CA6FIz1C,GAAJ,GA7FAy1C,CA6F2Bz1C,GAA3B,CAA2C5B,CAAA4B,GAA3C,CAJJ,EAzFIy1C,CA+FA/B,EANJ,CAMqB,IAbzB,CAgBAgC,GAAA,CAlGQD,CAkGR,CAnGyF,CAArF,CAbgB,CApBxB,CAvBmBz3B,CAAAvY,CAAjB2vC,EAAiB3vC,CAAAA,CAAAA,CAuEnB,GAAA,UAAA,GAAA,CAAAuZ,QAAO,CAACjY,CAAD,CAAMD,CAAN,CAAWD,CAAX,CAAgBD,CAAhB,CACP,CACI,IAAAE,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CACX8uC,GAAA,CAAAA,IAAA,CAJJ,CAeA,GAAA,UAAA,GAAA,CAAAroC,QAAO,CAAClN,CAAD,CAAOmf,CAAP,CACP,CACQ,IAAAxf,GAAJ,GACQ,IAAA8G,EAOJ,EANI6tC,EAAA,CAAA,IAAA7tC,EAAA,CAAoB,IAAAhB,GAApB,CAA6B,IAAA0vC,EAA7B,CAA2C,IAAAC,EAA3C,CAAyD,IAAAz1C,GAAzD,CAMJ,CAAA,OAAO,IAAAA,GARX,CAUKwf,EAAL,EAMI,IAAAlB,MAAA,EAEJ,OAAO,CAAA,CAnBX,CA8BA,GAAA,UAAA,GAAA,CAAA9Q,QAAS,EACT,CAOI,MAAO,CAAA,CAPX,CAgDAooC;QAAA,GAAO,CAAPA,CAAO,CACP,CACI,GAAK,CAAA5uC,EAAL,GAEI,CAAC,CAAA0uC,EAOD,EAPoB,CAAAD,EAOpB,GANIzuB,EAAA,CAAA,CAAAhgB,EAAA,CAAmB,CAAAwuC,EAAnB,CAAiC,CAAAC,EAAjC,CAA+C9qB,EAA/C,CAAJ,CACI,CAAA+qB,EADJ,CACsB,CAAA,CADtB,CAGI,CAAAD,EAHJ,CAGmB,CAGnB,EAAA,CAACzoC,EAAA,CAAAA,CAAA,CATL,EASqB,CACjB,GAAI,CAAC,CAAA0oC,EAAL,CArvcJ/0C,CAAA,CAsvcwBvI,kBAtvcxB,CAqvcI,KAGK,IAAI,CAAAw7C,EAAJ,CAAoB,CAIrB,GAAI,CAAC,CAAAL,EAAL,CAAkB,MAEdsC,GAAA,CAAAA,CAAA,CAAe,CAAAtC,EAAf,CAA4B,CAAAtzC,GAA5B,CAA2C,CAAAC,GAA3C,CAA0D,CAAAs1C,EAA1D,CAAJ,CACI,CAAA72C,OAAA,CAAY,gBAAZ,CAA+B,CAAAzD,EAA/B,CAAgD,GAAhD,CADJ,CAGI,CAAAiR,EAAA,CAAY,uBAAZ,CAAsC,CAAAjR,EAAtC,CAAuD,GAAvD,CATiB,CAkBzB,CAAAohC,EAAA,CAAc,CAAA,CACdrvB,EAAA,CAAAA,CAAA,CAvBiB,CAVzB;AA0CA,EAAA,UAAA,MAAA,CAAAqR,QAAK,EACL,CACI,GAAI,IAAAo3B,EAAJ,EAAuB,CAAC,IAAApZ,EAAxB,CAAqC,CAMjCt1B,IAAAA,EAAAA,IAAAA,EAAAA,CAAoBwuC,EAAAA,IAAAA,EAApBxuC,CAAkCyuC,EAAAA,IAAAA,EAAlCzuC,CAtxUA8hB,EAAMnG,CAANmG,CAAa,CAAAtD,EAEjB,KADa7C,CACb,IADsB,CAAA0C,EACtB,CAAc,CAAd,CAAOuC,CAAP,EAAmBb,CAAnB,CAA4B,CAAAX,EAAAxqB,OAA5B,CAAA,CAAoD,CAChDk6C,IAAAA,EAAAA,CAAA1vB,EAAA0vB,CAAgB/uB,CAAhB+uB,CAAAA,CAA6BhtB,EAAAA,CAA7BgtB,CAAkCluB,EAAAA,CAAlCkuB,CAw8EOC,EA20PyCA,CAx0PpDjtB,EAAA,CAAMA,CAAN,EAAa,CACbitB,EAAA,EAAWA,CAAX,EAAsB,CAAtB,EAA2B,GAIfr5C,KAAAA,EAAZ,GAAIs5C,CAAJ,GAAuBA,CAAvB,CAA6B,CAAApuB,KAA7B,CAEA,IAAKhY,EAAL,EAAmC,CAAA/O,EAAnC,CACI,IAAKnJ,CAAL,CAASoxB,CAAT,CAAcktB,CAAA,EAAd,EAAuBt+C,CAAvB,CAA2B,CAAAmJ,EAAAjF,OAA3B,CAA2ClE,CAAA,EAA3C,CAAgD,CAAAmJ,EAAA,CAAQnJ,CAAR,CAAA,CAAaq+C,CADjE,KAGI,KAAKr+C,CAAL,CAASoxB,CAAT,CAAcktB,CAAA,EAAd,EAAuBt+C,CAAvB,CAA2B,CAAAkwB,KAA3B,CAAsClwB,CAAA,EAAtC,CAA2C,CAAA+xB,EAAA,CAAqBX,CAArB,CAA0BitB,CAA1B,CAAmC,CAAApzB,EAAnC,CAA+CmG,CAA/C,CAp9E3ClB,EAAA,EAAQ,CAAAzC,EACR4B,EAAA,EACA+B,EAAA,CAAM,CAJ0C,CAqxU5C,IAAAyqB,EAAJ,EACIsC,EAAA,CAAAA,IAAA,CAAe,IAAAtC,EAAf,CAA4B,IAAAtzC,GAA5B,CAA2C,IAAAC,GAA3C,CAA0D,IAAAs1C,EAA1D,CAAwE,CAAC,IAAA1uC,EAAzE,CAR6B,CAWrC,IAAAw1B,EAAA,CAAc,CAAA,CAZlB,CA6BAuZ;QAAA,GAAS,CAATA,CAAS,CAAC91C,CAAD,CAASE,CAAT,CAAmBC,CAAnB,CAA6B+1C,CAA7B,CAAuC/T,CAAvC,CACT,CACI,IAAIgU,EAAQ,CAAA,CAAZ,CACIC,EAAU,CAAA,CA0Bd,IAAgB,IAAhB,EAAIl2C,CAAJ,CAEI,IAFkB,IACd6oB,EAAM,CACV,CAAOA,CAAP,CAAa/oB,CAAAnE,OAAb,CAA6B,CAA7B,CAAA,CAAgC,CAC5B,IAAIpD,EAAKuH,CAAA,CAAO+oB,CAAP,CAALtwB,CAAmB,GAAnBA,EAA6BuH,CAAA,CAAO+oB,CAAP,CAAW,CAAX,CAA7BtwB,CAA6C,GAA7CA,GAAsD,CAC1D,IAAKA,CAAL,CAIA,GAAMA,CAAN,CAAU,GAAV,CAAA,CAIA,IAAI49C,EAAWttB,CACf,IAAS,CAAT,EAAItwB,CAAJ,CAAiB,CACbqV,CAAA,CAAAA,CAAA,CAAkB,qBAAlB,CAA0CwoC,EAAA,CAAc79C,CAAd,CAA1C,CAA6D,cAA7D,CAA8E69C,EAAA,CAAcD,CAAd,CAA9E,CAzoYJ56B,IAyoYI,CACA,MAFa,CAIjB,GAAIsN,CAAJ,CAAU,CAAV,EAAe/oB,CAAAnE,OAAf,CAA8B,CAC1BiS,CAAA,CAAAA,CAAA,CAAkB,0BAAlB,CAA+CwoC,EAAA,CAAcD,CAAd,CAA/C,CA7oYJ56B,IA6oYI,CACA,MAF0B,CAI9BsN,CAAA,EAAO,CAEP,KAAIktB,EAAOj2C,CAAA,CAAO+oB,CAAA,EAAP,CAAPktB,CAAuB,GAAvBA,EAAiCj2C,CAAA,CAAO+oB,CAAA,EAAP,CAAjCktB,CAAiD,GAAjDA,GAA0D,CAA9D,CACIrzB,EAAQ5iB,CAAA,CAAO+oB,CAAA,EAAP,CAARnG,CAAwB,GAAxBA,EAAkC5iB,CAAA,CAAO+oB,CAAA,EAAP,CAAlCnG,CAAkD,GAAlDA,GAA2D,CAC/DmW,EAAA,GAAakd,CAAb,CAAmB,GAAnB,GAA4BA,CAA5B,EAAmC,CAAnC,GAAyCrzB,CAAzC,CAAgD,GAAhD,GAAyDA,CAAzD,EAAiE,CAAjE,CAEA,KAzB4B,IAwBxB2zB,EAAUxtB,CAxBc,CAwBTytB,EAASP,CAATO,EAAgB,CACnC,CAAa,CAAb,CAAOP,CAAP,EAAkBltB,CAAlB,CAAwB/oB,CAAAnE,OAAxB,CAAA,CACIk9B,CACA,EADY/4B,CAAA,CAAO+oB,CAAA,EAAP,CACZ,CAD4B,GAC5B,CAAAktB,CAAA,EAEJ,IAAW,CAAX,EAAIA,CAAJ,EAAgBltB,CAAhB,EAAuB/oB,CAAAnE,OAAvB,CAAsC,CAClCiS,CAAA,CAAAA,CAAA,CAAkB,wCAAlB,CAA6DwoC,EAAA,CAAcD,CAAd,CAA7D,CA3pYJ56B,IA2pYI,CACA;KAFkC,CAItCsd,CAAA,EAAY/4B,CAAA,CAAO+oB,CAAA,EAAP,CAAZ,CAA4B,GAC5B,IAAIgQ,CAAJ,CAAe,GAAf,CAAqB,CACjBjrB,CAAA,CAAAA,CAAA,CAAkB,oBAAlB,CAt7gBL7S,CAAA,CAs7gB4D89B,CAt7gB5D,CAAa,CAAb,CAAgB,CAAA,CAAhB,CAs7gBK,CAAmE,wBAAnE,CAA8Fud,EAAA,CAAcD,CAAd,CAA9F,CAhqYJ56B,IAgqYI,CACA,MAFiB,CAIrB,GAAK+6B,CAAL,CASI,IADA1oC,CAAA,CAAAA,CAAA,CAAkB,UAAlB,CAA+BwoC,EAAA,CAAcE,CAAd,CAA/B,CAAuD,YAAvD,CAAsEF,EAAA,CAAc1zB,CAAd,CAAtE,CAA4F,GAA5F,CAAkG0zB,EAAA,CAAc1zB,CAAd,CAAqB4zB,CAArB,CAAlG,CA3qYJ/6B,IA2qYI,CACA,CAAO+6B,CAAA,EAAP,CAAA,CACI/sB,EAAA,CAAA,CAAAxiB,EAAA,CAAuB2b,CAAA,EAAvB,CAA+B5iB,CAAA,CAAOu2C,CAAA,EAAP,CAA/B,CAAmD,GAAnD,CAVR,KACQ3zB,EAAJ,CAAW,CAAX,CACIuzB,CADJ,CACY,CAAA,CADZ,CAGoB,IAHpB,EAGQh2C,CAHR,GAG0BA,CAH1B,CAGqCyiB,CAHrC,CAKA,CAAgB,IAAhB,EAAIziB,CAAJ,EAAsB2N,CAAA,CAAAA,CAAA,CAAkB,oBAAlB,CAAyCwoC,EAAA,CAAcn2C,CAAd,CAAzC,CAzqY1Bsb,IAyqY0B,CAO1B26B,EAAA,CAAU,CAAA,CA7CV,CAAA,IACIrtB,EAAA,EALJ,KACIA,EAAA,EAAO,CAHiB,CAsDpC,GAAI,CAACqtB,CAAL,GACoB,IACZ,EADAl2C,CACA,GADkBA,CAClB,CAD6Bg2C,CAC7B,EAAY,IAAZ,EAAAh2C,CAFR,EAE0B,CAClB,IAASvI,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAAoBqI,CAAAnE,OAApB,CAAmClE,CAAA,EAAnC,CACI8xB,EAAA,CAAA,CAAAxiB,EAAA,CAAuB/G,CAAvB,CAAkCvI,CAAlC,CAAqCqI,CAAA,CAAOrI,CAAP,CAArC,CAEJy+C,EAAA,CAAU,CAAA,CAJQ,CAO1B,GAAIA,CAAJ,CAAa,CAST,GAAgB,IAAhB,EAAIj2C,CAAJ,EAAwBg2C,CAAxB,CACIr0B,CAAA,CAAA,CAAA9a,EAAA,CACA,CAAAm7B,CAAA,CAAS,CAAA,CAEG,KAAhB,EAAIhiC,CAAJ,EACI+hC,EAAA,CAAA,CAAAl7B,EAAA,CAAkB7G,CAAlB,CAA4BgiC,CAA5B,CAdK,CAiBb,MAAOiU,EA9GX;AAwIJrxB,EAAA,CAfIZ,QAAW,EACX,CAEI,IADA,IAAIsyB,EAAQ9tC,CAAA,CAA6B0b,QAA7B,CAAuC5b,CAAvC,CAAuD,KAAvD,CAAZ,CACSiuC,EAAO,CAAhB,CAAmBA,CAAnB,CAA0BD,CAAA56C,OAA1B,CAAwC66C,CAAA,EAAxC,CAAgD,CAC5C,IAAIC,EAAOF,CAAA,CAAMC,CAAN,CAAX,CACIlB,EAAWlsC,EAAA,CAA4BqtC,CAA5B,CACXf,EAAAA,CAAM,IAAIL,EAAJ,CAAaC,CAAb,CACV/wB,GAAA,CAAgCmxB,CAAhC,CAAqCe,CAArC,CAJ4C,CAFpD,CAcJ,CAeIhxC,SANEixC,GAMS,CAACC,CAAD,CACX,CACI,CAAA,KAAA,CAAA,IAAA,CAAM,UAAN,CAAkBA,CAAlB,CA3vYQv7B,IA2vYR,CAEApO,EAAA,CAAAA,IAAA,CAHJ,CAPwBiR,CAAAvY,CAAtBgxC,EAAsBhxC,CAAAA,CAAAA,CAuBxB,GAAA,UAAA,GAAA,CAAA2D,QAAU,EACV,CACI,MAAO,CAAA,CADX,CAaA,GAAA,UAAA,GAAA,CAAA4V,QAAO,CAACjY,CAAD,CAAMD,CAAN,CAAWD,CAAX,CAAgBD,CAAhB,CACP,CACI,IAAAG,EAAA,CAAWA,CACX,KAAAF,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CAHf,CA+BJge,GAAA,CAjBIZ,QAAW,EACX,CAEI,IADA,IAAI2yB,EAAQnuC,CAAA,CAA6B0b,QAA7B,CAAuC5b,CAAvC,CAAuD,UAAvD,CAAZ,CACSsuC,EAAO,CAAhB,CAAmBA,CAAnB,CAA0BD,CAAAj7C,OAA1B,CAAwCk7C,CAAA,EAAxC,CAAgD,CAC5C,IAAIC,EAAOF,CAAA,CAAMC,CAAN,CAAX,CACIF,EAAWvtC,EAAA,CAA4B0tC,CAA5B,CACXC,EAAAA,CAAM,IAAIL,EAAJ,CAAkBC,CAAlB,CACVpyB,GAAA,CAAgCwyB,CAAhC,CAAqCD,CAArC,CAJ4C,CAFpD,CAgBJ,CAiEIrxC;QA/BEuxC,GA+BS,CAACC,CAAD,CACX,CACI,CAAA,KAAA,CAAA,IAAA,CAAM,YAAN,CAAoBA,CAApB,CAh3YQv7B,OAg3YR,CAEA,KAAAw7B,EAAA,CAAgB,CAACD,CAAA,QACjB,KAAAE,EAAA,CAAoB,CAACF,CAAA,YAArB,EA7vZYx7B,IA8vZZ,KAAA27B,EAAA,CAAqB,CAACH,CAAA,aAAtB,EA9uZYx7B,IA+uZZ,KAAA47B,EAAA,CAAkBJ,CAAA,UACY,SAA9B,EAAI,MAAO,KAAAI,EAAX,GAAwC,IAAAA,EAAxC,CAA8E,MAA9E,EAA2D,IAAAA,EAA3D,CAwBA,KAAAC,EAAA,CAhBA,IAAAC,EAgBA,CAhBqB,IA0BrB,KAAAC,EAAA,CAAe,CAACP,CAAA,QAChB,KAAAQ,EAAA,CAAe,CAACR,CAAA,QAChB,KAAAS,EAAA,CAAmB,CACnB,KAAAC,EAAA,CAAkB,CAAA,CAElB,KAAAC,EAAA,CAAmB,IAAAC,EAAnB,CAAyC,IACzC,KAAAC,EAAA,CAA6B,IAAAC,EAA7B,CAA4D,EAE5D,KAAAC,EAAA,CAAe,IAAAC,EAAf,CAA8B,IAAAC,EAA9B,CAA6C,CAC7C,KAAAC,EAAA,CAAiB,EAEjB,KAAIpsC,EAAWkrC,CAAA,QACf,IAAgB,SAAhB,EAAIlrC,CAAJ,CACI,IAAAwrC,EAAA,CAAqB,EADzB,KAAA,CA7hd4CxrC,CAAAA,CAmidMqsC,EAnidIvuC,KAAAA,CAmiddkC,EAjidxC,GACkBtP,IAAAA,EAEd,GAFIoN,CAEJ,GAFyBA,CAEzB,CAFiC,OAEjC,GADIwuC,CACJ,CADa9sC,EAAA,CAA6B1B,CAA7B,CA+hdiB3C,IA/hdmBrB,GAApC,CACb,IACQyyC,CADR,CACmBD,CAAAryC,EAAA,CA6hdiB+F,CA7hdjB,CADnB,GA8hd8B7E,IA3hdtBmC,GAAA,CAAqB,IAArB,CAA2B0C,CAA3B,CAAqCusC,CAArC,CANZ,CA2hdA,CAaA,IAAAC,EAAA,CAAkB,IAAAC,EAAlB,CAAkC,IAAA/d,EAAlC,CAAsD,IAKtD,KAAA,QAAA;AAAkB,CACd,QAAW,IAAAge,GADG,CAEd,YAAe,IAAAC,GAFD,CAGd,cAAiB,IAAAC,GAHH,CAId,cAAiB,IAAAC,GAJH,CAvEtB,CAhC0B36B,CAAAvY,CAAxBsxC,EAAwBtxC,CAAAA,CAAAA,CAyH1B,EAAA,CApxjBJ,EAAAmzC,UAoxjBIjtC;CAAAvC,GAAA,CAAAA,QAAU,CAACQ,CAAD,CAAQkC,CAAR,CAAkB/D,CAAlB,CACV,CACI,IAAI8wC,EAAS,IAEb,QAAQ/sC,CAAR,EACA,KAAKqsC,EAAL,CAgGI,MA/FA,KAAApyC,EAAA,CAAc+F,CAAd,CA+FO,CA/FmB,IAAAurC,EA+FnB,CA/F0CtvC,CA+F1C,CArFPA,CAAA+wC,UAqFO,CArFaC,QAAkB,CAACj6B,CAAD,CAAQ,CAC1CA,CAAA,CAAQA,CAAR,EAAiBpgB,MAAAogB,MACjB,KAAIk6B,EAAS,CAAb,CACIC,EAAUn6B,CAAAm6B,QAvziBEC,EAk0iBhB,EAAID,CAAJ,CACID,CADJ,CACal6B,CAAAq6B,OAAA,CAAcC,EAAAllD,GAAd,CAAkCmlD,EAAA3gD,GAD/C,CA3yiBgBwgD,EA8yiBX,EAAID,CAAJ,CACDD,CADC,CACQI,EAAAllD,GADR,CAGI4qB,CAAAw6B,QAHJ,EAGqBL,CAHrB,EAGgCM,EAAAjkD,GAHhC,EAGgD2jD,CAHhD,EAG2DO,EAAAziD,GAH3D,GAIDiiD,CAJC,CAIQC,CAJR,EAImBM,EAAAjkD,GAJnB,CAIkCmkD,EAAA9lD,GAJlC,EAMDqlD,EAAJ,GACQl6B,CAAAC,eACJ,EAD0BD,CAAAC,eAAA,EAC1B,CAAA85B,CAAAJ,GAAA,CAAmBO,CAAnB,CAFJ,CAIA,OAAO,CAAA,CA3BmC,CAqFvC,CAvDPjxC,CAAA2xC,WAuDO,CAvDcC,QAAmB,CAAC76B,CAAD,CAAQ,CAM5CA,CAAA,CAAQA,CAAR,EAAiBpgB,MAAAogB,MAKjB,IAAI,CAACA,CAAA86B,QAAL,CAAoB,CAChB,IAAIZ,EAASl6B,CAAA+6B,MAATb,EAAwBl6B,CAAAm6B,QAKxBn6B,EAAAq6B,OAAJ,EACQH,CADR,EACkBc,EAAAvlD,GADlB,GAEQykD,CAFR,CAEiBe,EAAA3lD,GAFjB,CAKAykD,EAAAJ,GAAA,CAAmBO,CAAnB,CAQIl6B,EAAAC,eAAJ,EAA0BD,CAAAC,eAAA,EAnBV,CAqBpB,MAAO,CAAA,CAhCqC,CAuDzC,CApBPhX,CAAAiyC,QAoBO,CApBWC,QAAmB,CAACn7B,CAAD,CAAQ,CACrCA,CAAAo7B,gBAAJ,EAA2Bp7B,CAAAo7B,gBAAA,EACvBp7B;CAAAC,eAAJ,EAA0BD,CAAAC,eAAA,EAE1B,EADIo7B,CACJ,CADoBr7B,CAAAq7B,cACpB,EAD2Cz7C,MAAAy7C,cAC3C,GAKItB,CAAAJ,GAAA,CAAmB0B,CAAAC,QAAA,CAAsB,MAAtB,CAAnB,CATqC,CAoBtC,CAFPryC,CAAAsyC,gBAAA,CAAwB,UAAxB,CAEO,CAAA,CAAA,CAjGX,CAsGA,MAAO,CAAA,CAzGX,CAqHA1uC;CAAAqT,GAAA,CAAAA,QAAO,CAACjY,CAAD,CAAMD,CAAN,CAAWD,CAAX,CAAgBD,CAAhB,CACP,CACI,IAAAG,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CAEX,KAAIiyC,EAAS,IAEb,KAAAlB,EAAA,CAAmBpqB,EAAA,CAAA,IAAA1mB,EAAA,CAAgB,IAAAowC,EAAA,CAAgB,EAAhB,CAp+ZvBz7B,EAo+ZO,CAr+ZPA,CAq+ZO,CAxkZXA,OAwkZW,CAEnB,KAAAq8B,EAAA,CAA6B1qB,EAAA,CAAA,IAAAtmB,EAAA,CAAkByzC,QAAsB,EAAG,CAyRpErjD,IAAAA,EAAK,EAxRG4hD,EAyRRX,EAAAx8C,OAAJ,GAOIzE,CAUA,CA1SQ4hD,CAgSJX,EAAA5+C,MAAA,EAUJ,CAV6B,GAU7B,CATAqU,CAAA,CAjSQkrC,CAiSR,CAAkB,cAAlB,CAzoiBG/9C,CAAA,CAyoiB8C7D,CAzoiB9C,CAAa,CAAb,CAAgB,CAAA,CAAhB,CAyoiBH,CAAsD,GAAtD,CASA,CA1SQ4hD,CAkSJzB,EAQJ,EAFa,EAEb,EAFQngD,CAER,EAFyB,GAEzB,CAFqBA,CAErB,GAF+BA,CAE/B,EAFoC,EAEpC,EAAAq2B,EAAA,CA1SQurB,CA0SRhyC,EAAA,CA1SQgyC,CA0SUhB,EAAlB,CAvEG,GAuEH,CAxEkBp+C,IAAA2+B,MAAAmiB,CAlOV1B,CA0S0D3B,EAxEhDqD,CAAmB,EAAnBA,CAwElB,CAjBJ,CAxRa,EAAT,EAAItjD,CAAJ,GACI4hD,CAAAd,EAMA,CANiB9gD,CAMjB,CALM4hD,CAAAb,EAAN,CAj+ZIx8B,GAi+ZJ,CAGIq9B,CAAAd,EAHJ,EAGsB,KAHtB,CACIc,CAAAb,EADJ,EAj+ZIx8B,GAs+ZJ,CAAIq9B,CAAAb,EAAJ,CAv+ZIx8B,EAu+ZJ,EACI4R,EAAA,CAAAvmB,CAAA,CAAWgyC,CAAAlB,EAAX,CARR,CAFoE,CAA3C,CAe7B,KAAAC,EAAA,CAAsBrqB,EAAA,CAAA,IAAA1mB,EAAA,CAAgB,IAAAowC,EAAA,CAAgB,EAAhB,CAp/Z1Bz7B,EAo/ZU,CAt/ZVA,CAs/ZU,CAzlZdA,OAylZc,CAEtB,KAAAs8B,EAAA,CAA8B3qB,EAAA,CAAA,IAAAtmB,EAAA,CAAkB2zC,QAAyB,EAAG,CACxE3B,CAAAZ,EAAA,EAx9ZQz8B,GAy9ZJq9B,EAAAZ,EAAJ,CA19ZQz8B,EA09ZR,EACI4R,EAAA,CAAAvmB,CAAA,CAAWgyC,CAAAjB,EAAX,CAHoE,CAA9C,CAO9B34B,GAAA,CAAAnY,CAAA,CAAe,IAAf,CAAqB2zC,EAArB,CAAqD,IAAAxD,EAAA,CA9lazC/zB,KA8layC,CAA2D,CAA3D,EAAsC,IAAA+zB,EAAtC,CAAsD,CAAtD,EA9kazC/zB,KA8kayC,CAAqF,CAA1I,CACA/D,GAAA,CAAArY,CAAA,CAAoB,IAAAsX,MAAApP,KAAA,CAAgB,IAAhB,CAApB,CAEAjC;CAAA,CAAAA,IAAA,CArCJ,CA8DApB,EAAA6sC,GAAA,CAAAA,QAAc,CAACd,CAAD,CACd,CACI,GAAI,CAAC,IAAAY,EAAL,CAAsB,CAClB,IAAIoC,EAActgB,EAAA,CAAA,IAAArzB,EAAA,CAAwB,YAAxB,CAClB,IAAI2zC,CAAJ,CAAiB,CACb,IAAIC,EAAUD,CAAA55C,MAAA,CAAkB,OAAlB,CACd,IAAsB,CAAtB,EAAI65C,CAAAj/C,OAAJ,CAAyB,CACrB,IAAIk/C,EAAYC,EAAA,CAASF,CAAA,CAAQ,CAAR,CAAT,CAChB,IAAIC,CAAJ,EAAiB,IAAA50C,GAAjB,CAAmC,MAC/B80C,EAAAA,CAAYD,EAAA,CAASF,CAAA,CAAQ,CAAR,CAAT,CAEhB,IADA,IAAArC,EACA,CADkBj0B,EAAA,CAA2By2B,CAA3B,CAClB,CAAqB,CACjB,IAAItvC,EAAU,IAAA8sC,EAAA,QACd,IAAI9sC,CAAJ,CAAa,CACT,IAAIuvC,EAAYvvC,CAAA,QACZuvC,EAAJ,EAAeA,CAAAtvC,KAAA,CAAe,IAAA6sC,EAAf,CAAgC,IAAAZ,EAAhC,CAEf,IADA,IAAAa,EACA,CADgB/sC,CAAA,YAChB,CAAmB,CACf,IAAAksC,EAAA,CAAkBA,CAClB,KAAAld,EAAA,CAAoBhvB,CAAA,cACpB,KAAA/M,OAAA,CAAY,YAAZ,CAA2B,IAAAwH,GAA3B,CAA4C,GAA5C,CAAkD20C,CAAlD,CAA8D,MAA9D,CAAuEE,CAAvE,CACA,OAJe,CAJV,CAFI,CALA,CAuBzB,IAAAr8C,OAAA,CAAY,kCAAZ,CAAiDi8C,CAAjD,CAzBa,CAFC,CAD1B,CAyCA/uC;CAAA0B,GAAA,CAAAA,QAAO,CAAClN,CAAD,CAAOmf,CAAP,CACP,CACI,GAAI,CAACA,CAAL,CAUI,GAFA,IAAAk5B,GAAA,CAAoB,IAAAd,EAApB,CAEI,CAAA,CAACv3C,CAAL,CACI,IAAAie,MAAA,EADJ,KAGI,IAAI,CAAC,IAAAoB,QAAA,CAAarf,CAAb,CAAL,CAAyB,MAAO,CAAA,CAGxC,OAAO,CAAA,CAjBX,CA4BAwL,EAAA2B,GAAA,CAAAA,QAAS,CAACC,CAAD,CACT,CACI,MAAOA,EAAA,CAAO,IAAAkS,KAAA,EAAP,CAAqB,CAAA,CADhC,CASA9T,EAAAyS,MAAA,CAAAA,QAAK,EACL,CACI48B,EAAA,CAAAA,IAAA,CADJ,CAYArvC,EAAA8T,KAAA,CAAAA,QAAI,EACJ,CACI,IAAIC,EAAQ,IAAIC,CAAJ,CAAU,IAAV,CACZD,EAAAE,IAAA,CAAU,CAAV,CAuDO,CAvDMq7B,IAwDTlD,EADG,CAvDMkD,IAyDTjD,EAFG,CAvDMiD,IA0DThD,EAHG,CAvDMgD,IA2DT/C,EAJG,CAvDP,CACA,OAAOx4B,EAAAvf,KAAA,EAHX,CAeAwL,EAAA6T,QAAA,CAAAA,QAAO,CAACrf,CAAD,CACP,CACI,MAAO66C,GAAA,CAAAA,IAAA,CAAe76C,CAAA,CAAK,CAAL,CAAf,CADX,CAWA66C,SAAA,GAAS,CAATA,CAAS,CAAChkD,CAAD,CACT,CACSA,CAAL,GACIA,CADJ,CACQ,CAAC,CAAD,CA1oaIwkB,IA0oaJ,CAvnaIA,GAunaJ,CAAgD,CAAA08B,EAAhD,CADR,CAQA,EAAA,CAAAtpB,EAAA,CAKI53B,CALJ,CACI,EAAA+gD,EADJ,CAAA,CAAA,KAAA,EAAA,MAEI,EAAAC,EAFJ,CAAA,CAAA,KAAA,EAAA,MAGI,EAAAC,EAHJ,CAAA,CAAA,KAAA,EAAA,MAII,EAAAC,EAJJ,CAAA,CAAA,KAAA,EAAA,MAOA,OAAO,CAAA,CAhBX;AAmEAvsC,CAAA8sC,GAAA,CAAAA,QAAW,CAACt4C,CAAD,CACX,CACI,GAAmB,QAAnB,EAAI,MAAOA,EAAX,CACI,IAAA+3C,EAAAn3C,KAAA,CAAoBZ,CAApB,CADJ,KAGK,IAAmB,QAAnB,EAAI,MAAOA,EAAX,CAED,IAF8B,IAC1B64C,EAAS,CADiB,CACdkC,CADc,CAErB1jD,EAAI,CAAb,CAAgBA,CAAhB,CAAoB2I,CAAAzE,OAApB,CAAiClE,CAAA,EAAjC,CAAsC,CAClC0jD,CAAA,CAAalC,CACbA,EAAA,CAAS74C,CAAAg7C,WAAA,CAAgB3jD,CAAhB,CAMT,IA/shBJ4jD,EA+shBI,EAAIpC,CAAJ,CAA4B,CACxB,GA/shBRqC,EA+shBQ,EAAIH,CAAJ,CAAgC,QAChClC,EAAA,CAhthBRqC,EA8shBgC,CAI5B,IAAAnD,EAAAn3C,KAAA,CAAoBi4C,CAApB,CAZkC,CAFrC,IAkBD,KAAAd,EAAA,CAAiB,IAAAA,EAAA3oC,OAAA,CAAsBpP,CAAtB,CAGrBmtB,GAAA,CAAA,IAAAzmB,EAAA,CAAkB,IAAAgxC,EAAlB,CAxCO,GAwCP,CAzCsBp+C,IAAA2+B,MAAAmiB,CAyC4C,IAAArD,EAzC5CqD,CAAmB,EAAnBA,CAyCtB,CAEA,OAAO,CAAA,CA3BX,CAmEA5uC,EAAA+sC,GAAA,CAAAA,QAAa,CAAC4C,CAAD,CACb,CACI,IAAIC,EAAU,IAAAvD,EACd,KAAAA,EAAA,EAAgB,MACZsD,EAAJ,CA1okBME,EA0okBN,GACI,IAAAxD,EADJ,EAnxaYx8B,IAmxaZ,CAGI8/B,EAAJ,CArokBMG,GAqokBN,GACI,IAAAzD,EADJ,EAvxaYx8B,IAuxaZ,CAGI+/B,EAAJ,EAAe,IAAAvD,EAAf,GACI,IAAAA,EACA,EAzxaQx8B,KAyxaR,CAAI,IAAAw8B,EAAJ,CAjyaQx8B,EAiyaR,EACI4R,EAAA,CAAA,IAAAvmB,EAAA,CAAgB,IAAA8wC,EAAhB,CAHR,CATJ,CAyBAhsC,EAAAgtC,GAAA,CAAAA,QAAa,CAAC1xC,CAAD,CAAYhE,CAAZ,CACb,CACI,MAAK,KAAAq1C,EAAL,CAKO,CAAA,CALP,EACI,IAAAA,EAEO,CAFWrxC,CAEX,CADP,IAAAsxC,EACO,CADSt1C,CACT,CAAA,CAAA,CAHX,CADJ,CAgGA0I;CAAA+vC,GAAA,CAAAA,QAAQ,EACR,CACI,IAAIv7C,EAAO,IAAA63C,EAAP73C,CAz4aQqb,KA04aZ,KAAAw8B,EAAA,EAAgB,MAChB,OAAO73C,EAHX,CAaAwL,EAAAgwC,GAAA,CAAAA,QAAS,CAACx7C,CAAD,CACT,CACI,IAAIy7C,EAASz7C,CAATy7C,CAAgB,IAAA5D,EACpB,KAAAA,EAAA,CAAgB,IAAAA,EAAhB,CAA+B,IAA/B,CAA0D73C,CAA1D,CAv5aYqb,GA25aR,KAAAgf,EAAJ,EACQohB,CADR,CA15aYpgC,CA05aZ,GAEY8/B,CAQJ,CARW,CAQX,CALIA,CAKJ,CAPI,IAAA5D,EAAJ,CACI4D,CADJ,EACan7C,CAAD,CA36aRqb,CA26aQ,CA1xkBdggC,EA0xkBc,CAA+C,CAD3D,GAEar7C,CAAD,CA76aRqb,CA66aQ,CAA+B,GAA/B,CAAgE,CAF5E,EAII8/B,CAJJ,EAIan7C,CAAD,CA96aRqb,CA86aQ,CAjykBdqgC,EAiykBc,CAA+C,CAJ3D,GAKa17C,CAAD,CAh7aRqb,CAg7aQ,CAlxkBdsgC,OAkxkBc,CAA+C,CAL3D,CAOA,CAAA,IAAAthB,EAAA/uB,KAAA,CAAuB,IAAA6sC,EAAvB,CAAwCgD,CAAxC,CAVR,CANJ,CA4BA3vC,EAAAowC,GAAA,CAAAA,QAAQ,EACR,CACI,IAAA/D,EAAA,EAAgB,IAChB,OAAO,KAAAD,EAFX,CAYApsC,EAAAqwC,GAAA,CAAAA,QAAS,EACT,EAUArwC,EAAAswC,GAAA,CAAAA,QAAQ,EACR,CACI,MAAO,KAAAhE,EADX,CAWAtsC,EAAAuwC,GAAA,CAAAA,QAAS,CAAC/7C,CAAD,CACT,CAUQ,IAAA83C,EAAJ,CAj9aYz8B,GAi9aZ,GACQrb,CAAJ,CAn9aQqb,EAm9aR,CACI4R,EAAA,CAAA,IAAAvmB,EAAA,CAAgB,IAAA+wC,EAAhB,CADJ,CAGI7oB,EAAA,CAAA,IAAAloB,EAAA,CAAkB,IAAA+wC,EAAlB,CAJR,CAOA,KAAAK,EAAA,CAAgB,IAAAA,EAAhB,CAA+B,GAA/B,CAA0D93C,CAA1D,CAt9aYqb,EAq8ahB,CA2BA7P,EAAAwwC,GAAA,CAAAA,QAAQ,EACR,CACI,MAAO,EADX,CAWAxwC;CAAAywC,GAAA,CAAAA,QAAS,CAACj8C,CAAD,CACT,CACsBA,CAAA,EA1+aNqb,GA0+aZ6gC,KAnMI9D,EAAJ,EAmMA8D,IAlMQ9D,EAAA9sC,KAAA,CAkMR4wC,IAlM2B/D,EAAnB,CAAoCrhD,CAApC,CAQRA,EAAA,EAAK,GAEL,IAwLAolD,IAxLIhF,EAAJ,CACI,GAAS,EAAT,EAAIpgD,CAAJ,CAuLJolD,IAtLQ5E,EAAA,CAAmB,CADvB,KAGK,IAAS,CAAT,EAAIxgD,CAAJ,CAoLTolD,IAnLQhF,EAAAz9C,MAIA,CA+KRyiD,IAnLqChF,EAAAz9C,MAAAP,MAAA,CAAiC,CAAjC,CAAqC,EAArC,CAI7B,CAAuB,CAAvB,CA+KRgjD,IA/KY5E,EAAJ,EA+KR4E,IA/KkC5E,EAAA,EALzB,KAOA,IAAIxgD,CAAJ,CAAO,CASR,IAAIiB,CAn1hBRmjD,GAzGJ,EA47hBgCpkD,CA57hBhC,EAwGImkD,EAxGJ,EA47hBgCnkD,CA57hBhC,GACIiB,CADJ,CACQgE,EAAA,CA27hBwBjF,CA37hBxB,CADR,CAIIiB,EAAA,CADAA,CAAJ,CACQ,MADR,CACcA,CADd,CACkB,MADlB,CAGQkC,MAAAC,aAAA,CAs7hBwBpD,CAt7hBxB,CAu7hBA,KAAIqlD,EAASpkD,CAAAwD,OACL,GAAR,CAAIzE,CAAJ,EAA0B,CAA1B,EAAgBqlD,CAAhB,GAA6BA,CAA7B,CAAsC,CAAtC,CACS,EAAT,EAAIrlD,CAAJ,GACQsgD,CAEJ,CA8JZ8E,IAhK0B9E,EAEd,EAF8B,CAE9B,CADA+E,CACA,CADS/E,CACT,CA8JZ8E,IA/JgC5E,EACpB,CADuCF,CACvC,CA8JZ8E,IA9JgB9E,EAAJ,GAAkBr/C,CAAlB,CAAsBqkD,EAAA,CAAQ,EAAR,CAAYD,CAAZ,CAAtB,CAHJ,CAiKRD,KA5JY7E,EAAJ,EAAoB,CA4J5B6E,IA5J6B5E,EAArB,EAAyC6E,CAAzC,GAAiDpkD,CAAjD,CAAqDkC,MAAAC,aAAA,CA4J7DgiD,IA5JiF7E,EAApB,CAArD,CAAyFt/C,CAAzF,CA4JRmkD,KA3JQhF,EAAAz9C,MAAA,EAA8B1B,CA2JtCmkD,KA1JQhF,EAAApvC,UAAA,CA0JRo0C,IA1JyChF,EAAAnvC,aA0JzCm0C,KAzJQ5E,EAAA,EAAoB6E,CApBZ,CAAP,CAXT,IAmCK,IAA0B,IAA1B,EAqJLD,IArJS/E,EAAJ,CAAgC,CACjC,GAAS,EAAT,EAAIrgD,CAAJ,EAA8C,IAA9C,EAoJJolD,IApJqB/E,EAAA57C,OAAjB,CAoJJ2gD,IAnJQlwC,EAAA,CAmJRkwC,IAnJqB/E,EAAb,CACA;AAkJR+E,IAlJQ/E,EAAA,CAAqB,EAEhB,GAAT,EAAIrgD,CAAJ,GAgJJolD,IA/IQ/E,EADJ,EAC0Bl9C,MAAAC,aAAA,CAAoBpD,CAApB,CAD1B,CALiC,CAgBrCq2B,EAAA,CAqIA+uB,IArIAx1C,EAAA,CAqIAw1C,IArIkBvE,EAAlB,CAjMO,GAiMP,CAlMsBr+C,IAAA2+B,MAAAmiB,CAuUtB8B,IArImElF,EAlM7CoD,CAAmB,EAAnBA,CAkMtB,CAsIA,KAAAtC,EAAA,EAAgB,IAFpB,CAoCJ,KAAAE,GAA4B,QAA5B,CAKA,GAAiC,EALjC,CAKAsC,IAAiC,EAAA,CAxobbv3B,KAwoba,CAAA,CACW,CAAC,IAAD,CAAO,IAAP,CAAa6zB,EAAA96C,UAAAy/C,GAAb,CAAoD3E,EAAA96C,UAAA0/C,GAApD,CAA4F,MAA5F,CADX,CAAA,EAAA,CAvobbz4B,KAuoba,CAAA,CAEW,CAAC,IAAD,CAAO,IAAP,CAAa6zB,EAAA96C,UAAA8/C,GAAb,CAAoDhF,EAAA96C,UAAA+/C,GAApD,CAA4F,MAA5F,CAFX,CAAA,EAAA,CAtobb94B,KAsoba,CAAA,CAGW,CAAC,IAAD,CAAO,IAAP,CAAa6zB,EAAA96C,UAAAggD,GAAb,CAAoDlF,EAAA96C,UAAAigD,GAApD,CAA4F,MAA5F,CAHX,CAAA,EAAA,CArobbh5B,KAqoba,CAAA,CAIW,CAAC,IAAD,CAAO,IAAP,CAAa6zB,EAAA96C,UAAAkgD,GAAb,CAAoDpF,EAAA96C,UAAAmgD,GAApD,CAA4F,MAA5F,CAJX,CAAA,EAAjC3B,CAUA71B,GAAA,CAtCIZ,QAAW,EACX,CAEI,IADA,IAAIw4B,EAAWh0C,CAAA,CAA6B0b,QAA7B,CAAuC5b,CAAvC,CAAuD,QAAvD,CAAf,CACSm0C,EAAU,CAAnB,CAAsBA,CAAtB,CAAgCD,CAAA9gD,OAAhC,CAAiD+gD,CAAA,EAAjD,CAA4D,CACxD,IAAIC,EAAUF,CAAA,CAASC,CAAT,CAAd,CACIzF,EAAc7tC,EAAA,CAA4BuzC,CAA5B,CACd7D,EAAAA,CAAS,IAAI9B,EAAJ,CAAoBC,CAApB,CACb1yB,GAAA,CAAgCu0B,CAAhC,CAAwC6D,CAAxC,CAJwD,CAFhE,CAqCJ,CAiCIl3C;QAxBE6V,GAwBS,CAAC3V,CAAD,CACX,CACI,CAAA,KAAA,CAAA,IAAA,CAAM,MAAN,CAAcA,CAAd,CAjtaQ2V,IAitaR,CAQA,KAAAshC,EAAA,CAAmBC,EAAA,CAAAA,IAAA,CAAiBl3C,CAAA,UAAjB,CACnB,KAAAm3C,EAAA,CAAkB,CAClB,KAAA3F,EAAA,CAAoB,CAACxxC,CAAA,YAArB,EA/ibY2V,IAkjbZ,KAAAyhC,EAAA,CADA,IAAAC,EACA,CADc,CAEd,KAAAC,EAAA,CA3ibY3hC,KA6ibZ,KAAA4hC,EAAA,CADA,IAAAC,EACA,CADc,CAEd,KAAAC,EAAA,CAAiB,EACjB,KAAAC,EAAA,CAAmBC,EACnB,KAAAC,EAAA,CAAmBC,EACnB,KAAAC,EAAA,CAAiB,IAAAC,EAAjB,CAAkC,EAMlC,KAAA59C,EAAA,CAAc,IAAAE,GAAd,CAA8B,IAAAC,GAA9B,CAA8C,IAE9C,KAAA09C,EAAA,CAAqB,EAOrB,KAAAC,EAAA,CAAoB,CAzpgBbr4C,EAAA,CAAgB,MAAhB,CAypgBP,EAAuC5G,MAAvC,EAAiD,YAAjD,EAAiEA,OAEjE,KAAAk/C,EAAA,CAAiB,IACjB,KAAAC,EAAA,CAAoB,EACpB,KAAApI,EAAA,CAAW,IAxCf,CAzBez3B,CAAAvY,CAAb4V,EAAa5V,CAAAA,CAAAA,CA2Efm3C,SAAA,GAAW,CAAXA,CAAW,CAACkB,CAAD,CACX,CACI,GAAIA,CAAJ,EAA+B,QAA/B,EAAc,MAAOA,EAArB,CACI,GAAI,CAKAA,CAAA,CAASx9C,IAAA,CAAK,GAAL,CAAWw9C,CAAX,CAAoB,GAApB,CALT,CAMF,MAAO1mD,CAAP,CAAU,CA99ehBqJ,CAAA,CA+9ewB,CAAA3C,KA/9exB,CA+9eoC,qBA/9epC,CA+9e4D1G,CAAAsJ,QA/9e5D,CA+9ewE,IA/9exE,CA+9e+Eo9C,CA/9e/E,CA+9ewF,GA/9exF,CAg+eQ,CAAAA,CAAA,CAAS,IAFD,CAKhB,MAAOA,EAAP,EAAiB,EAbrB,CA0BA,CAAA,CAhmlBJ,EAAAC,UAgmlBIpyC;CAAAvC,GAAA,CAAAA,QAAU,CAACQ,CAAD,CAAQkC,CAAR,CAAkB/D,CAAlB,CACV,CACI,IAAIi2C,EAAO,IAAX,CACIV,EAAcC,EAElB,QAAQzxC,CAAR,EAEA,KAAK,WAAL,CAsBI,MArBA,KAAA/F,EAAA,CAAc+F,CAAd,CAqBO,CArBmB/D,CAqBnB,CApBPA,CAAAk2C,SAoBO,CApBYC,QAA0B,EAAQ,CACjD,IAAIC,EAAcH,CAAAj4C,EAAA,SAAlB,CACIq4C,EAAgBr2C,CAAAsG,QAAA,CAAgBtG,CAAAwG,cAAhB,CACpB,IAAI4vC,CAAJ,EAAmBC,CAAnB,CAAkC,CAC9B,IAAIC,EAAY,EAEhB,IADIz8C,CACJ,CADaw8C,CAAAp1C,aAAA,CAA2B,YAA3B,CACb,CACI,GAAI,CACAq1C,CAAA,CAAY/9C,IAAA,CAAK,GAAL,CAAWsB,CAAX,CAAoB,GAApB,CADZ,CAEF,MAAOxK,CAAP,CAAU,CAlgf5BqJ,CAAA,CAmgfoC,qBAngfpC,CAmgf4DrJ,CAAAsJ,QAngf5D,CAkgf4B,CAIZ9E,CAAAA,CAAQyiD,CAAA,KACE7hD,KAAAA,EAAd,GAAIZ,CAAJ,GAAyBA,CAAzB,CAAiC,EAAjC,CACI0iD,EAAAA,CAAQD,CAAA,KACE7hD,KAAAA,EAAd,GAAI8hD,CAAJ,GAAyB1iD,CAAzB,CAAiC,iBAAjC,CAAgD0iD,CAAhD,CAAwD,0BAAxD,CAAkF1iD,CAAlF,CAA0F,YAA1F,CACAuiD,EAAAI,UAAA,CAAwB3iD,CAdM,CAHe,CAoB9C,CAAA,CAAA,CAEX,MAAK,UAAL,CAEI,MADA,KAAAmK,EAAA,CAAc+F,CAAd,CACO,CADmB/D,CACnB,CAAA,CAAA,CAOX,MAAK,UAAL,CACIu1C,CAAA,CAAckB,EAGlB,MAAK,UAAL,CAWI,MAVKlB,EAUE,GAVWA,CAUX,CAVyBmB,EAUzB,EATP,IAAA14C,EAAA,CAAc+F,CAAd,CASO;AATmB/D,CASnB,CARPA,CAAAgE,QAQO,CARWmvB,QAAwB,EAAQ,CAC9C,IAAIwjB,EAAeV,CAAAj4C,EAAA,UACf24C,EAAJ,EAGIC,EAAA,CAAAX,CAAA,CAFgBU,CAAArwC,QAAA,CAAqBqwC,CAAAnwC,cAArB,CAAAqwC,KAEhB,CADgBF,CAAA9kD,MAChB,CAA4C0jD,CAA5C,CAL0C,CAQ3C,CAAA,CAAA,CAEX,MAAK,WAAL,CACI,GAAI,CAAC,IAAAK,EAAL,CAAuB,CASnB51C,CAAAU,WAAAo2C,YAAA,CAAoD92C,CAApD,CACA,MAVmB,CAavB,IAAAhC,EAAA,CAAc+F,CAAd,CAAA,CAA0B/D,CAK1BA,EAAA+2C,iBAAA,CAAyB,QAAzB,CAAmC,QAAQ,EAAG,CAC1C,IAAIC,EAAWh3C,CAAAi3C,SAAA,CAAiB,CAAjB,CAEFD,EAAAC,SAAAC,CAAkB,CAAlBA,CACbC,SAAA,CAAkB,CAFNH,CAAAC,SAAA,CAAkB,CAAlB,CAAAG,MAEOzjD,OAJuB,CAA9C,CAOAqM,EAAAq3C,SAAA,CAAmBC,QAAQ,CAACvgC,CAAD,CAAQ,CAE/B,GADIwgC,CACJ,CADWxgC,CAAAygC,cAAA,CAAoB,CAApB,CAAAJ,MAAA,CAA6B,CAA7B,CACX,CAAU,CACN,IAAI1B,EAAY6B,CAAAz5C,KAKhB84C,GAAA,CAAAX,CAAA,CAJgBrK,EAAA6J,CAAgBC,CAAhBD,CAA2B,CAAA,CAA3BA,CAIhB,CAAiCC,CAAjC,CAA4CgB,EAA5C,CAAgEa,CAAhE,CANM,CAWV,MAAO,CAAA,CAbwB,CAenC,OAAO,CAAA,CAEX,MAAKE,EAAL,CAEI,MADA,KAAAz5C,EAAA,CAAc+F,CAAd,CACO,CADmB/D,CACnB,CAAA,CAAA,CAjGX,CAsGA,MAAO,CAAA,CA1GX,CAsHA4D;CAAAqT,GAAA,CAAAA,QAAO,CAACjY,CAAD,CAAMD,CAAN,CAAWD,CAAX,CAAgBD,CAAhB,CACP,CACI,IAAAG,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CACX,KAAA6uC,EAAA,CAAoCgK,EAAA,CAAA14C,CAAA,CAEpC,KAAIi3C,EAAO,IAOX,IALIrB,CAKJ,CALkBC,EAAA,CAAAA,IAAA,CAAiBxiB,EAAA,CAAA,IAAArzB,EAAA,CAAwB,WAAxB,CAAjB,CAKlB,CACI,IAAK24C,IAAIA,CAAT,GAAoB/C,EAApB,CAjNW+C,KAkNP,EAAIA,CAAJ,GACA,IAAA/C,EAAA,CAAiB+C,CAAjB,CADA,CAC4B/C,CAAA,CAAY+C,CAAZ,CAD5B,CAKR,KAAA9B,EAAA,CAAiBrwB,EAAA,CAAA,IAAA1mB,EAAA,CAzwbLwU,EAywbK,CA1wbLA,CA0wbK,CA16aTA,IA06aS,CAEjB,KAAAwiC,EAAA,CAAmB1wB,EAAA,CAAA,IAAAtmB,EAAA,CAAkB84C,QAAoB,EAAG,CAxwbhDtkC,CA+xcZ,GAthBI2iC,CAshBCjB,EAAL,CAAoB,KAApB,GAthBIiB,CAuhBMjB,EADV,CA7xcY1hC,GA6xcZ,GAthBI2iC,CAwhBQf,EAAJ,CAxhBJe,CAwhByBb,EAAAzhD,OAArB,EAxhBJsiD,CA+hBQlB,EAGA,CAliBRkB,CA+hBsBb,EAAA,CA/hBtBa,CA+hBqCf,EAAf,CAGd,CAH+C,GAG/C,CAFIxvC,CAAA,CAhiBZuwC,CAgiBY,CAEJ,EAF2BrwC,CAAA,CAhiBnCqwC,CAgiBmC,CAhiBnCA,CAgiBqDlgD,KAAlB,CAA8B,iBAA9B,CAhiBnCkgD,CAgiBqFf,EAAlD,CAAmE,KAAnE,CAlukBhCniD,CAAA,CAksjBHkjD,CAgiB4HlB,EAlukBzH,CAAa,CAAb,CAAgB,CAAA,CAAhB,CAkukBgC,CAAuG,CAAA,CAAvG,CAE3B,CAliBRkB,CAiiBQf,EAAA,EACA,CAAA2C,EAAA,CAliBR5B,CAkiBQ,CAliBRA,CAkiB6Bf,EAArB,CAliBRe,CAkiB8Cb,EAAAzhD,OAAtC,CAA8D,GAA9D,CAVJ,EAxhBJsiD,CAqiBQjB,EAbJ,EA7xcI1hC,KA8ycJ,CAziBJ2iC,CAuiBIjB,EAEA,EAhzcI1hC,GAgzcJ,CAziBJ2iC,CAwiBIjB,EACA,EADe,KACf,CAziBJiB,CAyiBQjB,EAAJ,CAjzcI1hC,EAizcJ,EACI+R,EAAA,CA1iBR4wB,CA0iBQn3C,EAAA,CA1iBRm3C,CA0iBwBJ,EAAhB,CApBZ,CAvhB4D,CAAzC,CAInB3+B,GAAA,CAAAnY,CAAA,CAAe,IAAf,CAAqB+4C,EAArB,CACA1gC,GAAA,CAAArY,CAAA,CAAoB,IAAAsX,MAAApP,KAAA,CAAgB,IAAhB,CAApB,CAEA8wC,GAAA,CAAAA,IAAA,CAAa,MAAb,CAAqBzC,EAArB,CAAuC,CAAA,CAAvC,CACI,KAAAM,EAAJ,EAAsBmC,EAAA,CAAAA,IAAA;AAAa,YAAb,CAA2BC,EAA3B,CACtBD,GAAA,CAAAA,IAAA,CAAa,aAAb,CAA4BE,EAA5B,CAEKC,GAAA,CAAAA,IAAA,CAAL,EAAuBlzC,CAAA,CAAAA,IAAA,CAlC3B,CA6CApB,EAAA0B,GAAA,CAAAA,QAAO,CAAClN,CAAD,CAAOmf,CAAP,CACP,CACI,GAAI,CAACA,CAAL,CACI,GAAI,CAACnf,CAAL,CACI,IAAAie,MAAA,EADJ,KAGI,IAAI,CAAC,IAAAoB,QAAA,CAAarf,CAAb,CAAL,CAAyB,MAAO,CAAA,CAGxC,OAAO,CAAA,CARX,CAmBAwL,EAAA2B,GAAA,CAAAA,QAAS,CAACC,CAAD,CACT,CACI,MAAOA,EAAA,CAAO,IAAAkS,KAAA,EAAP,CAAqB,CAAA,CADhC,CAYA9T,EAAAyS,MAAA,CAAAA,QAAK,EACL,CACI,IAAA2+B,EAAA,EAAe,KACf,KAAAD,EAAA,CAAc,CAFlB,CAYAmD,SAAA,GAAS,CAATA,CAAS,CACT,CACmB,CAAApD,EAAA,CAAkB,CACjC,KAAIF,EAAc,CAAAA,EAAA,IAClB,IAAIA,CAAJ,CAAiB,CACb,IAAIc,EAAYd,CAAA,KAAZc,EAAmC,EACvB,IAAA,EAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CA0QxB,CAAA,CAAA,CAEI,IADIiB,CACJ,CA5Q2C,CA2QxB34C,EAAA,UACnB,GAAoB24C,CAAArwC,QAApB,CACI,IAAK,IAAI7W,EAAI,CAAb,CAAgBA,CAAhB,CAAoBknD,CAAArwC,QAAA3S,OAApB,CAAiDlE,CAAA,EAAjD,CAAsD,CAClD,IAAIuQ,EAAU22C,CAAArwC,QAAA,CAAqB7W,CAArB,CACd,IAAIuQ,CAAAnO,MAAJ,EA/QmCsmD,CA+QnC,CAA4B,CAAA,CAAA,CAAOn4C,CAAA62C,KAAP,OAAA,CAAA,CAFsB,CAK1D,CAAA,CAAOjL,EAAA,CAlRoCuM,CAkRpC,CAAuB,CAAA,CAAvB,CARX,CAzQYzC,CAAJ,EAAiBD,CAAjB,CAIS2C,EAAA,CAAAA,CAAA,CAAc3C,CAAd,CAAyBC,CAAzB,CAAoCgB,EAApC,CAAwD,CAAA,CAAxD,CAJT,CAYI2B,EAAA,CAAAA,CAAA,CAfS,CAkBjB,MAAO,CAAC,CAAC,CAAAvD,EArBb;AAiCA8B,QAAA,GAAgB,CAAhBA,CAAgB,CAACnB,CAAD,CAAYC,CAAZ,CAAuBH,CAAvB,CAAoCgC,CAApC,CAChB,CACI,GAAK7B,CAAL,CAKA,GAAIA,CAAJ,EAAiBsC,EAAjB,CACI,CAAA9zC,EAAA,CAAY,gEAAZ,CADJ,KAAA,CAcA,GAAIwxC,CAAJ,EAAiBuC,EAAjB,CAAqC,CACjCvC,CAAA,CAAY/+C,MAAA2hD,OAAA,CAAc,uCAAd,CAAuD,EAAvD,CAAZ,EAA0E,EAC1E,IAAI,CAAC5C,CAAL,CAAgB,MAChBD,EAAA,CAAY7J,EAAA,CAAgB8J,CAAhB,CACZ,EAAAh/C,OAAA,CAAY,qBAAZ,CAAoCg/C,CAApC,CAAgD,OAAhD,CAA2DD,CAA3D,CAAuE,GAAvE,CACA,EAAAJ,EAAA,CAAmB4C,EALc,CAArC,IAQI,EAAA5C,EAAA,CAAmBK,CAGvB0C,GAAA,CAAAA,CAAA,CAAc3C,CAAd,CAAyBC,CAAzB,CAAoCH,CAApC,CAAiD,CAAA,CAAjD,CAAwDgC,CAAxD,CAzBA,CALA,IACIgB,GAAA,CAAAA,CAAA,CAAgB,CAAA,CAAhB,CAFR;AA+CAH,QAAA,GAAQ,CAARA,CAAQ,CAAC3C,CAAD,CAAYC,CAAZ,CAAuBH,CAAvB,CAAoCiD,CAApC,CAAgDjB,CAAhD,CACR,CACI,IAAIkB,EAAW,EAEf,IAAI,CAAA/C,EAAAliD,YAAA,EAAJ,EAAoCkiD,CAAAliD,YAAA,EAApC,EAA+D,CAAA+hD,EAA/D,EAAmFA,CAAnF,CAEIkD,CAAA,EAGA,CAFAF,EAAA,CAAAA,CAAA,CAAgB,CAAA,CAAhB,CAEA,CAAI,CAAAp6C,MAAAE,GAAJ,CACI,CAAA6F,EAAA,CAAY,WAAZ,CADJ,EAKQs0C,CAIJ,GAHI,CAAA1D,EAAA,EACA,CAAIpvC,CAAA,CAAAA,CAAA,CAAJ,EAA2BE,CAAA,CAAAA,CAAA,CAAkB,qBAAlB,CAA0C6vC,CAA1C,CAE/B,EAAI,CAAAiD,KAAA,CAAUjD,CAAV,CAAqBC,CAArB,CAAgCH,CAAhC,CAA6CgC,CAA7C,CAAJ,CACIkB,CAAA,EADJ,CAGI,CAAAt6C,MAAAE,GAHJ,CAGsB,CAAA,CAZ1B,CAgBAo6C,EAAJ,EAOIE,EAAA,CAAAA,CAAA,CAAe,CAAAlD,EAAf,CAA+B,CAAAC,EAA/B,CAA+C,CAAAH,EAA/C,CAAiE,CAAAz9C,EAAjE,CAA8E,CAAAE,GAA9E,CAA6F,CAAAC,GAA7F,CA/BR;AA8CA2L,CAAA80C,KAAA,CAAAA,QAAI,CAACjD,CAAD,CAAYC,CAAZ,CAAuBH,CAAvB,CAAoCgC,CAApC,CACJ,CACI,IAAItB,EAAO,IAAX,CACI2C,EAAWlD,CAOf,IAAI6B,CAAJ,CAAU,CACN,IAAIsB,EAAS,IAAIC,UACjBD,EAAAE,OAAA,CAAgBC,QAAiB,EAAG,CACmBpf,IAAAA,EAAAif,CAAAjf,OAoFvD/M,EAAJ,GACQ/0B,CAEJ,CAFa,IAAIk1B,UAAJ,CAAeH,CAAf,CAAuB,CAAvB,CAA0BA,CAAAosB,WAA1B,CAEb,CADAN,EAAA,CAtFI1C,CAsFJ,CAtFoBR,CAsFpB,CAtF+BC,CAsF/B,CAtF0CH,CAsF1C,CAAkDz9C,CAAlD,CACA,CAvFIm+C,CAuFJZ,EAAA,CAAmB2C,EAHvB,CApFQ/B,EAyFR93C,MAAAE,GAAA,CAAkB,CAAA,CAClBg6C,GAAA,CA1FQpC,CA0FR,CA3FwC,CAGpC4C,EAAAK,kBAAA,CAAyB3B,CAAzB,CACA,OAAO,CAAA,CAND,CAagC,CAA1C,CAAI7B,CAAA1kD,QAAA,CA/mlBQmoD,cA+mlBR,CAAJ,GAMQC,CAEA,CAFWrN,EAAA,CAAiB2J,CAAjB,CAEX,CAAAkD,CAAA,CAzmlBI5M,MAwmlBR,EAAIoN,CAAJ,EAvmlBQpN,IAumlBR,EAAuCoN,CAAvC,CACeC,SAAA,CAAU3D,CAAV,CADf,CAIezJ,EAAA,EAJf,CAIoE,uBAJpE,CAI0E10C,kBAAA,CAAmBm+C,CAAnB,CAJ1E,CAxmlBQ1J,oBAimlBZ,CAeA,OAAO,CAAC,CAACG,EAAA,CAAgByM,CAAhB,CAA0B,IAA1B,CAAgC,CAAA,CAAhC,CAAsCxM,QAAiB,CAACt2C,CAAD,CAAOu2C,CAAP,CAAkBv1C,CAAlB,CAA8B,CAkB9F,IAAI4N,EAA2B,CAA3BA,CAjBoE5N,CAiBpE4N,EAAgC,CAAC,CAjBjCuxC,CAiBkCj3C,EAAlC0F,EAA8C,CAjB9CuxC,CAiB+Cj3C,EAAAb,MAAAK,GAjBqB1H,EAmBxE,CAnBIm/C,CA2BA/xC,EAAA,CAAY,uBAAZ,CA3BgBuxC,CA2BhB,CAAmD,WAAnD,CA3BoE3+C,CA2BpE,CAA+E,IAA/E,CA3B8DhB,CA2B9D,CAA6F,GAA7F,CAAkG4O,CAAlG,CARJ,EAcI4nC,EAAA,CAjCA2J,CAiC6B/3C,GAA7B,CAjC8DpI,CAiC9D;AAjCmDu2C,CAiCnD,CAEA,EADIh2C,CACJ,CADek2C,EAAA,CAlC+Cz2C,CAkC/C,CAlCoCu2C,CAkCpC,CACf,GACIsM,EAAA,CApCJ1C,CAoCI,CApCYR,CAoCZ,CApCuBC,CAoCvB,CApCkCH,CAoClC,CAAkDl/C,CAAAyB,EAAlD,CAAmEzB,CAAA2B,GAAnE,CAAsF3B,CAAA4B,GAAtF,CAjBR,CAnBIg+C,EAuCJ93C,MAAAE,GAAA,CAAkB,CAAA,CAvCd43C,EAwCAnB,EAAJ,GAxCImB,CAyCAnB,EAAA,EACA,CA1CAmB,CA0CKnB,EAAL,EAAsB9vC,CAAA,CA1CtBixC,CA0CsB,CAF1B,CAIAoC,GAAA,CA5CIpC,CA4CJ,CA7C8F,CAArF,CArCb,CAiHA8B,SAAA,GAAO,CAAPA,CAAO,CAAC34C,CAAD,CAAQ+4C,CAAR,CAAemB,CAAf,CACP,CAEI,IADI3C,CACJ,CADmB,CAAA34C,EAAA,UACnB,GAAoB24C,CAAArwC,QAApB,CAA0C,CACtC,IAAK,IAAI7W,EAAI,CAAb,CAAgBA,CAAhB,CAAoBknD,CAAArwC,QAAA3S,OAApB,CAAiDlE,CAAA,EAAjD,CACI,GAAIknD,CAAArwC,QAAA,CAAqB7W,CAArB,CAAAoC,MAAJ,EAAqCsmD,CAArC,CAA4C,MAE5C9B,EAAAA,CAAgBl6B,QAAAo9B,cAAA,CAAuB,QAAvB,CACpBlD,EAAAQ,KAAA,CAAqBz3C,CACrBi3C,EAAAxkD,MAAA,CAAsBsmD,CAClBmB,EAAJ,EAAY3C,CAAA91C,WAAA,CAAwB,CAAxB,CAAZ,CACI81C,CAAA6C,aAAA,CAA0BnD,CAA1B,CAAyCM,CAAA91C,WAAA,CAAwB,CAAxB,CAAzC,CADJ,CAGI81C,CAAA8C,YAAA,CAAyBpD,CAAzB,CAVkC,CAF9C;AA4CAgC,QAAA,GAAW,CAAXA,CAAW,CACX,CACI,IAAI1B,EAAe,CAAA34C,EAAA,UACnB,IAAI24C,CAAJ,EAAoBA,CAAArwC,QAApB,CAA0C,CAClCozC,CAAAA,CAAc,CAAArE,EAAdqE,EAAkC,CAAAhE,EACtC,KAAK,IAAIjmD,EAAI,CAAb,CAAgBA,CAAhB,CAAoBknD,CAAArwC,QAAA3S,OAApB,CAAiDlE,CAAA,EAAjD,CACI,GAAIknD,CAAArwC,QAAA,CAAqB7W,CAArB,CAAAoC,MAAJ,EAAqC6nD,CAArC,CAAkD,CAC1C/C,CAAAnwC,cAAJ,EAAkC/W,CAAlC,GACIknD,CAAAnwC,cADJ,CACiC/W,CADjC,CAGA,MAJ8C,CAOlDA,CAAJ,EAASknD,CAAArwC,QAAA3S,OAAT,GAAsCgjD,CAAAnwC,cAAtC,CAAmE,CAAnE,CAVsC,CAF9C,CAsBAqxC,QAAA,GAAe,CAAfA,CAAe,CAAC8B,CAAD,CACf,CACIA,CAAA,EAAY,CACZ,IAAIA,CAAJ,GAAiB,CAAAhE,EAAjB,CAAoC,CAChC,IAAI31C,EAAU,CAAAhC,EAAA,CAAcy5C,EAAd,CACVz3C,EAAJ,GAEQ45C,CAFR,EACQp5C,CADR,CACqBC,CAAA,CAA6BT,CAA7B,CAAsC65C,EAAtC,CADrB,GAEmCr5C,CAAA,CAAW,CAAX,CAFnC,GAGsBo5C,CAAArhC,MAHtB,GAIQqhC,CAAArhC,MAAAuhC,MAJR,CAIiCH,CAJjC,CAI4C,GAJ5C,CAOA,EAAAhE,EAAA,CAAoBgE,CATY,CAFxC;AA0BAhB,QAAA,GAAS,CAATA,CAAS,CAAClD,CAAD,CAAYC,CAAZ,CAAuBH,CAAvB,CAAoCz9C,CAApC,CAA4CE,CAA5C,CAAsDC,CAAtD,CACT,CACI,CAAAw9C,EAAA,CAAiBA,CACjB,EAAAC,EAAA,CAAiBA,CACjB,EAAAH,EAAA,CAAmBA,CACnB,EAAAz9C,EAAA,CAAcA,CACd,EAAAE,GAAA,CAAgBA,CAChB,EAAAC,GAAA,CAAgBA,CAEZs9C,EAAJ,EAAmBkB,EAAnB,CAcS,CAAA/I,EAAL,EAAkBE,EAAA,CAAA,CAAAF,EAAA,CAAmB51C,CAAnB,CAA2BE,CAA3B,CAAqCC,CAArC,CAA+C,IAA/C,CAAqD,CAAA,CAArD,CAAlB,CAaA,CAAAvB,OAAA,CAAY,aAAZ,CAA4B++C,CAA5B,CAAwC,GAAxC,CAbA,CAUI,CAAAvxC,EAAA,CAAY,oCAAZ,CAAmDuxC,CAAnD,CAA+D,GAA/D,CAxBR,EA+BA,CAAAP,EAKA,CALiB,CAKjB,CAJA,CAAAE,EAIA,CAJiBt9C,CAIjB,CAHA,CAAAk9C,EAGA,EAHe,MAGf,CADA,CAAAt+C,OAAA,CAAY,eAAZ,CAA8B++C,CAA9B,CAA0C,KAA1C,CAAkD39C,CAAAnE,OAAlD,CAAkE,SAAlE,CACA,CAAAkkD,EAAA,CAAAA,CAAA,CAAqB,CAArB,CApCA,CARJ,CAqDAU,QAAA,GAAU,CAAVA,CAAU,CAACwB,CAAD,CACV,CACI,GAAI,CAAArE,EAAJ,EAAmC,CAAA,CAAnC,GAAsBqE,CAAtB,CACI,CAAAtE,EAKA,CALiB,EAKjB,CAJA,CAAAC,EAIA,CAJiB,EAIjB,CAAKqE,CAAL,GACQ,CAAAxE,EAGJ,EAHsB,CAAA7+C,OAAA,CAAY,CAAA6+C,EAAA,EAAoBmB,EAApB,CAAwC,eAAxC,CAA0D,eAAtE,CAGtB,CAFA,CAAArB,EAEA,CAFmBC,EAEnB,CADA,CAAAC,EACA,CADmBC,EACnB,CAAA6C,EAAA,CAAAA,CAAA,CAJJ,CAPR,CAwBAz0C,CAAA8T,KAAA,CAAAA,QAAI,EACJ,CAEI,MAAOtf,CADKuf,IAAIC,CAAJD,CAAU,IAAVA,CACLvf,MAAA,EAFX,CAcAwL,EAAA6T,QAAA,CAAAA,QAAO,EACP,CACI,MAAO,CAAA,CADX,CAwEA7T,EAAAo2C,GAAA,CAAAA,QAAO,EACP,CACI,MAAO,KAAAhF,EAAP,CAj0cY1hC,KAg0chB,CAWA1P;CAAAq2C,GAAA,CAAAA,QAAQ,CAAC7hD,CAAD,CACR,CACQA,CAAJ,CAn1cYkb,CAm1cZ,GAQQ,IAAA0hC,EAAJ,CAv1cQ1hC,KAu1cR,EACIlb,CACA,EADQ,EACR,CAAI,IAAA48C,EAAJ,CA51cI1hC,EA41cJ,EACI+R,EAAA,CAAA,IAAAvmB,EAAA,CAAgB,IAAA+2C,EAAhB,CAHR,GAMI,IAAAb,EAQA,EARe,IAQf,CAPA,IAAAA,EAOA,EAt2cI1hC,IAs2cJ,CANA,IAAAyhC,EAMA,CANc,CAMd,CAAAxvB,EAAA,CAAA,IAAAzmB,EAAA,CAAkB,IAAAg3C,EAAlB,CAxFD,GAwFC,CAzFcpkD,IAAA2+B,MAAAmiB,CAyF0C,IAAArD,EAzF1CqD,CAAmB,EAAnBA,CAyFd,CAdJ,CARJ,CAyBA,KAAAwC,EAAA,CAAe,IAAAA,EAAf,CAA6B,GAA7B,CAAuD58C,CAAvD,CAr2cYkb,EA20chB,CAoCA1P,EAAAs2C,GAAA,CAAAA,QAAO,EACP,CAKI,IAAAlF,EAAA,EAAe,IACf,KAAAA,EAAA,EA13cY1hC,IA23cZ,OAAO,KAAAyhC,EAPX,CAiBAnxC,EAAAu2C,GAAA,CAAAA,QAAQ,EACR,EAUAv2C,EAAAw2C,GAAA,CAAAA,QAAO,EACP,CACI,MAAO,KAAAnF,EADX,CAoBArxC,EAAAy2C,GAAA,CAAAA,QAAQ,CAACjiD,CAAD,CACR,CACI,IAAA68C,EAAA,CAAe,IAAAA,EAAf,CAA6B,GAA7B,CAAuD78C,CAAvD,CAz5cYkb,EAw5chB,CAWA1P,EAAA02C,GAAA,CAAAA,QAAO,EACP,CACI,MAAO,KAAAnF,EADX,CAWAvxC,EAAA22C,GAAA,CAAAA,QAAQ,CAACniD,CAAD,CACR,CACI,IAAA+8C,EAAA,CAAe/8C,CAAf,CA76cYkb,GA46chB,CASAoc;IAAAA,GAAQA,EAARA,CACA8qB,GAAQA,GADR9qB,CAEA+qB,GAAQA,IAFR/qB,CAMAA,GAAQA,CANRA,CAOAgrB,GAAQA,CAPRhrB,CAQA3c,GAAQA,CARR2c,CAYAirB,GAAgBA,cAZhBjrB,CAgBAkrB,GAAgBA,mBAhBhBlrB,CAsBJ,GAAsB,EAtBlBA,CAsBJooB,IAAsB,EAAA,CA5mdF38B,KA4mdE,CAAA,CACsB,CAAC,IAAD,CAAO,IAAP,CAAa7H,EAAApf,UAAA8lD,GAAb,CAAwC1mC,EAAApf,UAAA+lD,GAAxC,CAAoE,KAApE,CADtB,CAAA,EAAA,CA3mdF9+B,KA2mdE,CAAA,CAEsB,CAAC,IAAD,CAAO,IAAP,CAAa7H,EAAApf,UAAAgmD,GAAb,CAAwC5mC,EAAApf,UAAAimD,GAAxC,CAAoE,KAApE,CAFtB,CAAA,EAAA,CA1mdFh/B,KA0mdE,CAAA,CAGsB,CAAC,IAAD,CAAO,IAAP,CAAa7H,EAAApf,UAAAkmD,GAAb,CAAwC9mC,EAAApf,UAAAmmD,GAAxC,CAAoE,KAApE,CAHtB,CAAA,EAAA,CAzmdFl/B,KAymdE,CAAA,CAIsB,CAAC,IAAD,CAAO,IAAP,CAAa7H,EAAApf,UAAAomD,GAAb,CAAwChnC,EAAApf,UAAAqmD,GAAxC,CAAoE,KAApE,CAJtB,CAAA,EAAtBzC,CAoFIr6C;QArBEo9C,GAqBS,CAACj7B,CAAD,CAAak7B,CAAb,CAAoBvd,CAApB,CACX,CACI,CAAA,KAAA,CAAA,IAAA,CAAM,MAAN,CAAc,CAAC,GAAM3d,CAAA1hB,GAAN,CAA6B,OAA7B,CAAuCnL,CAAA,CAAU,EAAEgoD,EAAZ,CAA8B,CAA9B,CAAxC,CAAd,CAxtcQvnC,IAwtcR,CAQA,KAAAoM,WAAA,CAAkBA,CAClB,KAAA5gB,EAAA,CAAW4gB,CAAA5gB,EACX,KAAAH,EAAA,CAAW+gB,CAAA/gB,EACX,KAAAi8C,EAAA,CAAaA,CAKb,KAAAE,GAAA,CAAiBF,CAAAh9C,KACjB,KAAAm9C,GAAA,CAAiB,IAAAC,GAAjB,CAAkC,EAClC,KAAAC,GAAA,CAAkBL,CAAAK,GAMlB,KAAAC,GAAA,CAAkB,IAAAC,GAAlB,CAAgC,IAAAC,GAAhC,CAAgD,IAAAC,GAAhD,CADA,IAAAhe,KACA,CADY,CAEZ,KAAAie,EAAA,CAAiB,EACjB,KAAAC,EAAA,CAAkB,IAClB,KAAAC,EAAA,CAAuB,CAAA,CACvB,KAAAC,OAAA,CAAYpe,CAAZ,CAAkBud,CAAAM,GAAlB,CAAoCN,CAAAO,GAApC,CAAkDP,CAAAQ,GAAlD,CAAkER,CAAAS,GAAlE,CAEA,KAAAK,EAAA,CAAgB,IAAAC,EAAhB,CAAwC,IAExC72C,EAAA,CAAAA,IAAA,CAjCJ,CAtBoBiR,CAAAvY,CAAlBm9C,EAAkBn9C,CAAAA,CAAAA,CAuEpB,EAAA,CA7knBJ,EAAAo+C,UA6knBIl4C,EAAAqT,GAAA,CAAAA,QAAO,CAACjY,CAAD,CAAMD,CAAN,CAAWD,CAAX,CAAgBD,CAAhB,CACP,CACI,IAAAA,EAAA,CAAWA,CADf,CAgBA+E;CAAA+3C,OAAA,CAAAA,QAAM,CAACpe,CAAD,CAAO6d,CAAP,CAAmBC,CAAnB,CAA2BC,CAA3B,CAAqCC,CAArC,CACN,CACI,IAAAhe,KAAA,CAAYA,CACZ,KAAA6d,GAAA,CAAkBA,CAClB,KAAAC,GAAA,CAAcA,CACd,KAAAC,GAAA,CAAgBA,CAChB,KAAAC,GAAA,CAAgBA,CAChB,KAAAC,EAAA,CAAiB,EAKjB,IA9+mBYlxB,SA8+mBZ,EAAI,IAAAiT,KAAJ,CAAuC,CAI/Bwe,CAAAA,CAAiBvjD,KAAJ,CAAU,IAAA4iD,GAAV,CACjB,KAASY,CAAT,CAAqB,CAArB,CAAwBA,CAAxB,CAAoCD,CAAApoD,OAApC,CAAuDqoD,CAAA,EAAvD,CAAoE,CAC5DC,CAAAA,CAAazjD,KAAJ,CAAU,IAAA6iD,GAAV,CACb,KAASa,CAAT,CAAiB,CAAjB,CAAoBA,CAApB,CAA4BD,CAAAtoD,OAA5B,CAA2CuoD,CAAA,EAA3C,CAAoD,CAC5CC,CAAAA,CAAe3jD,KAAJ,CAAU,IAAA8iD,GAAV,CACf,KAAK,IAAIc,EAAU,CAAnB,CAAsBA,CAAtB,EAAiCD,CAAAxoD,OAAjC,CAAkDyoD,CAAA,EAAlD,CAMID,CAAA,CAASC,CAAT,CAAmB,CAAnB,CAAA,CAAwBC,EAAA,CAAgB,IAAhB,CAAsBL,CAAtB,CAAiCE,CAAjC,CAAwCE,CAAxC,CAAiD,IAAAb,GAAjD,CAAgE,CAAhE,CAE5BU,EAAA,CAAOC,CAAP,CAAA,CAAgBC,CAVgC,CAYpDJ,CAAA,CAAWC,CAAX,CAAA,CAAwBC,CAdwC,CAgBpE,IAAAT,EAAA,CAAiBO,CArBkB,CAuBvC,IAAAN,EAAA,CAAkB,IAlCtB,CA6DA73C;CAAA80C,KAAA,CAAAA,QAAI,CAACsC,CAAD,CAAYC,CAAZ,CAAuB1D,CAAvB,CAA6BqE,CAA7B,CAAuCh8B,CAAvC,CACJ,CACI,IAAI08B,EAAWrB,CAWf,IAAI,IAAAW,EAAJ,CAEI,MAAO,CAAA,CAGX,KAAAZ,GAAA,CAAiBA,CACjB,KAAAC,GAAA,CAAiBA,CACjB,KAAAC,GAAA,CAAiBtP,EAAA,CAAgBqP,CAAhB,CAEjB,KAAIsB,EAAO,IACX,KAAAX,EAAA,CAAgBA,CAChB,KAAAC,EAAA,CAAwBj8B,CAAxB,EAAsC,IAAAA,WAEtC,IAAI23B,CAAJ,CAAU,CACN,IAAIsB,EAAS,IAAIC,UACjBD,EAAAE,OAAA,CAAgBC,QAAQ,EAAG,CACZpf,IAAAA,EAAAif,CAAAjf,OAAAA,CAqEf4iB,EAAa3vB,CAAA,CAAQA,CAAAosB,WAAR,CAA4B,CArE1Brf,CAsEf6iB,EAAahxD,EAAA,CAAmB+wD,CAAnB,CAEjB,IAAIC,CAAJ,CAAgB,CAxERF,CAyEJnB,GAAA,CAAkBqB,CAAA,CAAW,CAAX,CAzEdF,EA0EJlB,GAAA,CAAcoB,CAAA,CAAW,CAAX,CA1EVF,EA2EJjB,GAAA,CAAgBmB,CAAA,CAAW,CAAX,CA3EZF,EA4EJhB,GAAA,CAAiBkB,CAAA,CAAW,CAAX,CAAjB,EAAkC,GAE9BC,KAAAA,EA9EAH,CA8EMhB,GAANmB,EAAuB,CAC3B,KAAIxkD,EADyCujD,CACzCvjD,CADsD,CAEtD40B,EAAAA,CAAK,IAAIC,QAAJ,CAAaF,CAAb,CAAqB,CAArB,CAAwB2vB,CAAxB,CAhFLD,EAkFJf,EAAA,CAAqBhjD,KAAJ,CAlFb+jD,CAkFuBnB,GAAV,CACjB,KAASY,CAAT,CAAqB,CAArB,CAAwBA,CAAxB,CAnFIO,CAmFgCf,EAAA7nD,OAApC,CAA2DqoD,CAAA,EAA3D,CAEI,IADA,IAAIW,EApFJJ,CAoFef,EAAA,CAAeQ,CAAf,CAAXW,CAA2CnkD,KAAJ,CApF3C+jD,CAoFqDlB,GAAV,CAA3C,CACSa,EAAQ,CAAjB,CAAoBA,CAApB,CAA4BS,CAAAhpD,OAA5B,CAA6CuoD,CAAA,EAA7C,CAEI,IADA,IAAIU,EAAOD,CAAA,CAAST,CAAT,CAAPU,CAA6BpkD,KAAJ,CAtFjC+jD,CAsF2CjB,GAAV,CAA7B,CACSc,EAAU,CAAnB,CAAsBA,CAAtB,CAAgCQ,CAAAjpD,OAAhC,CAA6CyoD,CAAA,EAA7C,CAAwD,CAGpD,IAFA,IAAIS,EAASR,EAAA,CAAgB,IAAhB,CAAsBL,CAAtB,CAAiCE,CAAjC,CAAwCE,CAAxC,CAAkD,CAAlD,CAxFrBG,CAwF0EhB,GAArD,CAViBuB,CAUjB,CAAb,CACIz9B,GAAMw9B,CAAA,KADV,CAESxuB;AAAM,CAAf,CAAkBA,EAAlB,CAAwBquB,CAAxB,CAA6BruB,EAAA,EAAA,CAAOn2B,CAAP,EAAa,CAA1C,CAA6C,CACzC,IAAIq2B,GAAKlP,EAAA,CAAIgP,EAAJ,CAALE,CAAgBzB,CAAAW,SAAA,CAAYv1B,CAAZ,CAAgB,CAAA,CAAhB,CACpBujD,EAAA,CAAcA,CAAd,CAA2BltB,EAA3B,CAAkC,EAFO,CAI9BsuB,CAAAE,GAAA,CAAiBL,CAChCE,EAAA,CAAKR,CAAL,CAAA,CAAgBS,CARoC,CAvF5DN,CAmGJd,EAAA,CAAkBA,CAClBc,EAAA,CApGIA,CAwEQ,CAAhB,IAxEQA,EAsGJr4C,EAAA,CAAY,4BAAZ,CAA2Cs4C,CAA3C,CAAwD,SAAxD,CAtGID,EAyGJX,EAAJ,GAzGQW,CA0GJX,EAAAl4C,KAAA,CA1GI64C,CA0Ge38B,WAAnB,CA1GI28B,CA0GgCzB,EAApC,CAAgDyB,CAAhD,CA1GIA,CA0GkDvB,GAAtD,CA1GIuB,CA0GkEtB,GAAtE,CACA,CA3GIsB,CA2GJX,EAAA,CAAgB,IAFpB,CA1G+B,CAG3B/C,EAAAK,kBAAA,CAAyB3B,CAAzB,CACA,OAAO,CAAA,CAND,CAagC,CAA1C,CAAI0D,CAAAjqD,QAAA,CAv2mBQmoD,cAu2mBR,CAAJ,GAMQ6D,CACJ,CADejR,EAAA,CAAiBkP,CAAjB,CACf,CAh2mBQjP,MAg2mBR,EAAIgR,CAAJ,EA/1mBQhR,IA+1mBR,EAAuCgR,CAAvC,CACIV,CADJ,CACejD,SAAA,CAAU4B,CAAV,CADf,EAGQgC,CA6BJ,CAx4mBIC,MAw4mBJ,CA5BIC,CA4BJ,CA5BgB,gBA4BhB,CANI,CAAClC,CAAAjqD,QAAA,CAAkB,OAAlB,CAAL,EAAmC,CAACiqD,CAAAjqD,QAAA,CAAkB,MAAlB,CAApC,EAAuI,CAAvI,EAAiE,4BAAA,MAAA,CAAA,GAAA,CAAAA,QAAA,CAAyDgsD,CAAzD,CAAjE,EACIC,CACA,CAv4mBAC,MAu4mBA,CAAAC,CAAA,CAAY,eAFhB,EAGWC,EAAA,CAAanC,CAAb,CAAwB,GAAxB,CAHX,GAIIgC,CAJJ,CAt4mBIC,KAs4mBJ,CAMA,CAAAZ,CAAA,CAAWrQ,EAAA,EAAX,CAA8C,eAA9C,CAAoDgR,CAApD,CAAgE,MAAhE,CAAsE1lD,kBAAA,CAAmB0jD,CAAnB,CAAtE;CAAuG,IAAAE,GAAA,CAAkB,EAAlB,CAAuBgC,CAA9H,EAh4mBInR,oBAg2mBR,CAPJ,CA0CA,OAAO,CAAC,CAACG,EAAA,CAAgBmQ,CAAhB,CAA0B,IAA1B,CAAgC,CAAA,CAAhC,CAAsC,QAAQ,CAACxmD,CAAD,CAAOu2C,CAAP,CAAkBv1C,CAAlB,CAA8B,CACjFs1C,EAAA,CAAAmQ,CAAA,CAAczmD,CAAd,CAAoBu2C,CAApB,CAA+Bv1C,CAA/B,CADiF,CAA5E,CAhFb,CAsJAs1C;QAAA,GAAQ,CAARA,CAAQ,CAACt2C,CAAD,CAAOunD,CAAP,CAAkBvmD,CAAlB,CACR,CACI,IAAIylD,EAAO,IAAX,CACI73C,EAA2B,CAA3BA,CAAc5N,CAAd4N,EAAgC,CAAC,CAAC,CAAA1F,EAAlC0F,EAA8C,CAAC,CAAA1F,EAAAb,MAAAK,GAEnD,EAAAk9C,EAAA,CAAuB,CAAA,CAEvB,IAAI5kD,CAAJ,CAQI,CAAA8oB,WAAA1b,EAAA,CAAuB,uBAAvB,CAAkD,CAAA82C,GAAlD,CAAmE,WAAnE,CAAkFlkD,CAAlF,CAA+F,IAA/F,CAAsGhB,CAAtG,CAA6G,GAA7G,CAAkH4O,CAAlH,CARJ,KASO,CAKH4nC,EAAA,CAA6B,CAAA1sB,WAAA1hB,GAA7B,CAAwDpI,CAAxD,CAA8DunD,CAA9D,CAEA,IAAI,CAWA,GAAqC,CAArC,CADgBzR,EAAA,CAAgB,CAAAsP,GAAhB,CAAgC,CAAA,CAAhC,CAAA1nD,YAAAL,EACZnC,QAAA,CAAkB,WAAlB,CAAJ,CACI,CAAA0qD,EAAA,CAAuB,CAAA,CAD3B,KAEO,CACH,IAAI4B,EAAOD,CAAArsD,QAAA,CAAkB,IAAlB,CACA,EAAX,CAAIssD,CAAJ,EAAuB,IAAvB,CAAgBA,CAAhB,EAE6C,CAF7C,CACkBD,CAAAhqD,UAAAkqD,CAAoB,CAApBA,CAAuBD,CAAvBC,CACVvsD,QAAA,CAAgB,iBAAhB,CAFR,GAGQ,CAAA0qD,EAHR,CAG+B,CAAA,CAH/B,CAFG,CAYP,IAAIF,CAC0B,OAA9B,EAAI6B,CAAAjsD,OAAA,CAAiB,CAAjB,CAAoB,CAApB,CAAJ,CAUIoqD,CAVJ,CAUgB,CAAC,sBAAD,CAA0B,CAAAR,GAA1B,CAVhB,CAgCQQ,CAhCR,CA+BkC,CAA9B,CAAI6B,CAAArsD,QAAA,CAAkB,IAAlB,CAAJ,EAA6D,IAA7D,EAAmCqsD,CAAAjsD,OAAA,CAAiB,CAAjB,CAAoB,CAApB,CAAnC,CACgBiH,IAAAC,MAAA,CAAW+kD,CAAApsD,QAAA,CAAkB,aAAlB,CAAiC,OAAjC,CAAAA,QAAA,CAAoD,cAApD,CAAoE,EAApE,CAAX,CADhB;AAGgBsH,IAAA,CAAK,GAAL,CAAW8kD,CAAX,CAAuB,GAAvB,CAIpB,IAAK7B,CAAA7nD,OAAL,CAGK,GAAwB,CAAxB,EAAI6nD,CAAA7nD,OAAJ,CA7xhBb+E,CAAA,CA8xhB4B8iD,CAAArrD,CAAU,CAAVA,CA9xhB5B,CA6xhBa,KAuBA,CAgBD,CAAAirD,GAAA,CAAkBI,CAAA7nD,OAClB,EAAA0nD,GAAA,CAAcG,CAAA,CAAU,CAAV,CAAA7nD,OACd,EAAA2nD,GAAA,CAAgBE,CAAA,CAAU,CAAV,CAAA,CAAa,CAAb,CAAA7nD,OAChB,KAAIkpD,EAASrB,CAAA,CAAU,CAAV,CAAA,CAAa,CAAb,CAAA,CAAgB,CAAhB,CACb,EAAAD,GAAA,CAAiBsB,CAAjB,EAA2BA,CAAA,OAA3B,EAAgD,GAGhD,KAASb,CAAT,CADIP,CACJ,CADiB,CACjB,CAAwBO,CAAxB,CAAoC,CAAAZ,GAApC,CAAqDY,CAAA,EAArD,CACI,IAASE,CAAT,CAAiB,CAAjB,CAAoBA,CAApB,CAA4B,CAAAb,GAA5B,CAAyCa,CAAA,EAAzC,CACI,IAASE,CAAT,CAAmB,CAAnB,CAAsBA,CAAtB,CAAgC,CAAAd,GAAhC,CAA+Cc,CAAA,EAA/C,CAEI,GADAS,CACA,CADSrB,CAAA,CAAUQ,CAAV,CAAA,CAAqBE,CAArB,CAAA,CAA4BE,CAA5B,CACT,CAAA,CACA,IAAIzoD,EAASkpD,CAAA,OACEpoD,KAAAA,EAAf,GAAId,CAAJ,GACIA,CADJ,CACakpD,CAAA,OADb,CACgC,GADhC,CAGAlpD,EAAA,GAAW,CACX,KAAImpD,EAAYD,CAAA,QACEpoD,KAAAA,EAAlB,GAAIqoD,CAAJ,GACIA,CADJ,CACgBD,CAAA,QADhB,CACoC,CADpC,CAGA,KAAIx9B,EAAMw9B,CAAA,KACV,IAAYpoD,IAAAA,EAAZ,GAAI4qB,CAAJ,CAAuB,CACnB,IAAIzmB,EAAKikD,CAAA,MACT,IAAWpoD,IAAAA,EAAX,GAAImE,CAAJ,EAAyBA,CAAAjF,OAAzB,CAWO,CAOH,IADA,IAAI6pD,EAAK7pD,CAAL6pD,EAAe,CAAnB,CACStlD,EAAKU,CAAAjF,OAAd,CAAyBuE,CAAzB,CAA8BslD,CAA9B,CAAkCtlD,CAAA,EAAlC,CACIU,CAAA,CAAGV,CAAH,CAAA,CAAS4kD,CAEbW,GAAA,CAAUZ,CAAV,CAAkBjkD,CAAlB,CAVG,CAXP,IAOIymB,EAGA,CAHM,EAGN,CADAy9B,CACA,CADYD,CAAA,QACZ,CADiCC,CACjC,CAD8CA,CAC9C,EAD2D,CAC3D,CADiEA,CACjE,EAD8E,EAC9E,CADqFA,CACrF,EADkG,EAClG,CAAAD,CAAA,KAAA,CAAiBx9B,CAarB,QAAOw9B,CAAA,MAzBY,CA2BvBR,EAAA,CAAgBQ,CAAhB;AAAwBb,CAAxB,CAAmCE,CAAnC,CASA,KAAS7tB,CAAT,CAAe,CAAf,CAAkBA,CAAlB,CAAwBhP,CAAA1rB,OAAxB,CAAoC06B,CAAA,EAApC,CACIotB,CAAA,CAAcA,CAAd,CAA2Bp8B,CAAA,CAAIgP,CAAJ,CAA3B,CAAwC,EAhD5C,CAqDZ,CAAAmtB,EAAA,CAAiBA,CACjB,EAAAC,EAAA,CAAkBA,CAClBc,EAAA,CAAO,CAlFN,CA1BL,IA1xhBR7jD,EAAA,CA2xhB4B,oBA3xhB5B,CA2xhBmD,CAAAsiD,GA3xhBnD,CA0thBQ,CA8KF,MAAO3rD,CAAP,CAAU,CAx4hBhBqJ,CAAA,CAy4hBwB,oBAz4hBxB,CAy4hB+C5C,CAz4hB/C,CAy4hBsD,KAz4hBtD,CAy4hB8DzG,CAAAsJ,QAz4hB9D,CAw4hBgB,CArLT,CA0LH,CAAAijD,EAAJ,GACI,CAAAA,EAAAl4C,KAAA,CAAmB,CAAAm4C,EAAnB,CAA0C,CAAAf,EAA1C,CAAsDyB,CAAtD,CAA4D,CAAAvB,GAA5D,CAA4E,CAAAC,GAA5E,CACA,CAAA,CAAAW,EAAA,CAAgB,IAFpB,CAzMJ,CA+PAS,QAAA,GAAU,CAACQ,CAAD,CAASb,CAAT,CAAoBE,CAApB,CAA2BE,CAA3B,CAAoCb,CAApC,CAA8CuB,CAA9C,CACV,CACSD,CAAL,GACIA,CADJ,CACa,CAAC,OAAUT,CAAX,CAAoB,OAAUb,CAA9B,CAAwC,KAAQ,EAAhD,CAAoD,QAAWuB,CAA/D,CADb,CAGAD,EAAAb,GAAA,CAAmBA,CACnBa,EAAAX,GAAA,CAAeA,CACfW,EAAAa,GAAA,CAAiBb,CAAAE,GAAjB,CAAkC,CAClCF,EAAAz6B,GAAA,CAAgB,CAAA,CAChB,OAAOy6B,EARX;AAgDAj5C,CAAA+5C,KAAA,CAAAA,QAAI,CAAC3B,CAAD,CAAYE,CAAZ,CAAmBE,CAAnB,CAA4Bz6B,CAA5B,CAAoC1rB,CAApC,CACJ,CACQ4mD,CAAAA,CAAS,IACb,KAAI/B,EAAQ,IAAAA,EAAZ,CACI6B,EAAW,IAAAnB,EAAA,CAAeQ,CAAf,CACf,IAAIW,CAAJ,CAAc,CAEV,IAAIiB,EAAQjB,CAAA,CAAST,CAAT,CAKZ,IAAI,CAAC0B,CAAL,EAAc9C,CAAA+C,GAAd,EAAmC3B,CAAnC,CAA2CpB,CAAAO,GAA3C,CAEI,IADAuC,CACK,CADGjB,CAAA,CAAST,CAAT,CACH,CADyB1jD,KAAJ,CAAUsiD,CAAAgD,GAAV,CACrB,CAAAruD,CAAA,CAAI,CAAT,CAAYA,CAAZ,CAAgBmuD,CAAAjqD,OAAhB,CAA8BlE,CAAA,EAA9B,CACImuD,CAAA,CAAMnuD,CAAN,CAAA,CAAW4sD,EAAA,CAAgB,IAAhB,CAAsBL,CAAtB,CAAiCE,CAAjC,CAAwCzsD,CAAxC,CAA4C,CAA5C,CAA+CqrD,CAAAiD,GAA/C,CAA6D,CAA7D,CAGnB,IAAIH,CAAJ,CAAW,CACP,IAAKnuD,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBmuD,CAAAjqD,OAAhB,CAA8BlE,CAAA,EAA9B,CACI,GAAImuD,CAAA,CAAMnuD,CAAN,CAAJ,EAAgBmuD,CAAA,CAAMnuD,CAAN,CAAA,OAAhB,EAAsC2sD,CAAtC,CAA+C,CAK3CS,CAAA,CAASe,CAAA,CAAMnuD,CAAN,CACT,MAN2C,CAY/C,CAACotD,CAAL,EAAe/B,CAAA+C,GAAf,EAAqD,CAArD,EAAoC/C,CAAAkD,GAApC,GACInB,CADJ,CACae,CAAA,CAAMnuD,CAAN,CADb,CACwB4sD,EAAA,CAAgB,IAAhB,CAAsBL,CAAtB,CAAiCE,CAAjC,CAAwCpB,CAAAkD,GAAxC,CAAuDlD,CAAAiD,GAAvD,CAAqE,CAArE,CADxB,CAdO,CAbD,CAgCV9nD,CAAJ,EAAUA,CAAA,CAAK4mD,CAAL,CAAa,CAAA,CAAb,CACV,OAAOA,EArCX,CAgDAY,SAAA,GAAI,CAACZ,CAAD,CAASjkD,CAAT,CACJ,CAGI,IAJaioB,IAAAA,EApLyC,CAoLzCA,CAET67B,EAAMG,CAAA,OAANH,EAA0B,CAFjB77B,CAGTxB,EAAU7mB,KAAJ,CAAUkkD,CAAV,CAHG77B,CAIJwN,EAAM,CAAf,CAAkBA,CAAlB,CAAwBquB,CAAxB,CAA6BruB,CAAA,EAA7B,CACIhP,CAAA,CAAIgP,CAAJ,CACA,CADWz1B,CAAA,CAAGioB,CAAH,CACX,CADsBjoB,CAAA,CAAGioB,CAAH,CAAS,CAAT,CACtB,EADqC,CACrC,CAD2CjoB,CAAA,CAAGioB,CAAH,CAAS,CAAT,CAC3C,EAD0D,EAC1D,CADiEjoB,CAAA,CAAGioB,CAAH,CAAS,CAAT,CACjE,EADgF,EAChF,CAAAA,CAAA,EAAO,CAEXg8B,EAAA,KAAA,CAAiBx9B,CAPrB;AAgDAzb,CAAAq6C,KAAA,CAAAA,QAAI,CAACpB,CAAD,CAASqB,CAAT,CACJ,CACI,IAAIhvD,EAAK,EACT,IAAI2tD,CAAJ,EACQqB,CADR,CACmBrB,CAAA,OADnB,CACqC,CACzBx9B,CAAAA,CAAMw9B,CAAA,KACV,KAAIxuB,EAAM6vB,CAAN7vB,EAAkB,CAEtBn/B,EAAA,EADUm/B,CAAAE,CAAMlP,CAAA1rB,OAAN46B,CAAmBlP,CAAA,CAAIgP,CAAJ,CAAnBE,CAA8BsuB,CAAA,QACxC,KAAcqB,CAAd,CAAyB,CAAzB,GAAiC,CAAjC,EAAuC,GAJV,CAUrC,MAAOhvD,EAbX,CAyBA0U,EAAAu6C,MAAA,CAAAA,QAAK,CAACtB,CAAD,CAASqB,CAAT,CAAmBhvD,CAAnB,CACL,CACI,GAAI,IAAAwsD,EAAJ,CACI,MAAO,CAAA,CAMX,IAAIwC,CAAJ,CAAerB,CAAA,OAAf,CAAiC,CAC7B,GAAI3tD,CAAJ,EAAS,IAAA+uD,KAAA,CAAUpB,CAAV,CAAkBqB,CAAlB,CAA4B,CAAA,CAA5B,CAAT,CAA4C,CACxC,IAAI7+B,EAAMw9B,CAAA,KAAV,CACIC,EAAYD,CAAA,QADhB,CAEIxuB,EAAM6vB,CAAN7vB,EAAkB,CAClBC,EAAAA,EAAU4vB,CAAV5vB,CAAqB,CAArBA,GAA6B,CAKjC,KAAK,IAAI7+B,EAAI4vB,CAAA1rB,OAAb,CAAyBlE,CAAzB,EAA8B4+B,CAA9B,CAAmC5+B,CAAA,EAAnC,CAAwC4vB,CAAA,CAAI5vB,CAAJ,CAAA,CAASqtD,CAE5CD,EAAAE,GAAL,CAGW1uB,CAAJ,CAAUwuB,CAAAa,GAAV,EACHb,CAAAE,GACA,EADkBF,CAAAa,GAClB,CADmCrvB,CACnC,CAAAwuB,CAAAa,GAAA,CAAiBrvB,CAFd,EAGIA,CAHJ,EAGWwuB,CAAAa,GAHX,CAG4Bb,CAAAE,GAH5B,GAIHF,CAAAE,GAJG,EAIe1uB,CAJf,EAIsBwuB,CAAAa,GAJtB,CAIuCb,CAAAE,GAJvC,EAIyD,CAJzD,CAHP,EACIF,CAAAa,GACA,CADiBrvB,CACjB,CAAAwuB,CAAAE,GAAA,CAAiB,CAFrB,CASA19B,EAAA,CAAIgP,CAAJ,CAAA,CAAYhP,CAAA,CAAIgP,CAAJ,CAAZ,CAAuB,EAAE,GAAF,EAAUC,CAAV,CAAvB,CAA6Cp/B,CAA7C,EAAkDo/B,CApBV,CAsB5C,MAAO,CAAA,CAvBsB,CAyBjC,MAAO,KAjCX,CA2CA8vB;QAAA,GAAS,CAATA,CAAS,CAACC,CAAD,CACT,CACI,IAAIC,EAAsB,CAAAjD,GAAtBiD,CAAoC,CAAAhD,GAAxC,CACIU,EAAaqC,CAAbrC,CAAmBsC,CAAnBtC,CAA0C,CAC9C,OAAIA,EAAJ,CAAgB,CAAAZ,GAAhB,EAC6BiD,CAMlB,EANwBC,CAMxB,CAAA,CAAAX,KAAA,CAAU3B,CAAV,CALMuC,CAKN,CAL0B,CAAAjD,GAK1B,CAL2C,CAK3C,CADQiD,CACR,CAD4B,CAAAjD,GAC5B,CAD6C,CAC7C,CAPX,EASO,IAZX,CA8BAkD,QAAA,GAAa,CAAbA,CAAa,CAAC3B,CAAD,CAASh8B,CAAT,CACb,CAII,IALuBktB,IAAAA,EA8B0C,CA9B1CA,CAEnBxf,EAAK,CAFcwf,CAGnBzf,EAAS,CAEb,CAAOyf,CAAA,EAAP,CAAA,CAAc,CAEV,IAAI7+C,EAAI,CAAA+uD,KAAA,CAAUpB,CAAV,CAAkBh8B,CAAA,EAAlB,CAER,IAAQ,CAAR,CAAI3xB,CAAJ,CAAW,KACXq/B,EAAA,EAAOr/B,CAAP,EAAYo/B,CACZA,EAAA,EAAU,CANA,CAQd,MAAOC,EAZX;AAmDA3qB,CAAA8T,KAAA,CAAAA,QAAI,EACJ,CACI,IAAIjoB,EAAI,CAAR,CACIgvD,EAAS,EACbA,EAAA,CAAOhvD,CAAA,EAAP,CAAA,CAAc,CAAC,IAAAwrD,GAAD,CAAiB,IAAAQ,EAAjB,CAAkC,IAAAL,GAAlC,CAAmD,IAAAC,GAAnD,CAAgE,IAAAC,GAAhE,CAA+E,IAAAC,GAA/E,CACd,IAAI,CAAC,IAAAG,EAAL,CAEI,IADA,IAAIF,EAAY,IAAAA,EAAhB,CACSQ,EAAY,CAArB,CAAwBA,CAAxB,CAAoCR,CAAA7nD,OAApC,CAAsDqoD,CAAA,EAAtD,CACI,IAAK,IAAIE,EAAQ,CAAjB,CAAoBA,CAApB,CAA4BV,CAAA,CAAUQ,CAAV,CAAAroD,OAA5B,CAAyDuoD,CAAA,EAAzD,CACI,IAAK,IAAIE,EAAU,CAAnB,CAAsBA,CAAtB,CAAgCZ,CAAA,CAAUQ,CAAV,CAAA,CAAqBE,CAArB,CAAAvoD,OAAhC,CAAoEyoD,CAAA,EAApE,CAA+E,CAC3E,IAAIS,EAASrB,CAAA,CAAUQ,CAAV,CAAA,CAAqBE,CAArB,CAAA,CAA4BE,CAA5B,CACb,IAAIS,CAAJ,EAAcA,CAAAE,GAAd,CAA8B,CAG1B,IAH0B,IACtB2B,EAAO,EADe,CACX5uD,EAAI,CADO,CAEtB4tD,EAAUb,CAAAa,GAFY,CAEIiB,EAAe9B,CAAAa,GAAfiB,CAAgC9B,CAAAE,GAC9D,CAAOW,CAAP,CAAiBiB,CAAjB,CAAA,CACID,CAAA,CAAK5uD,CAAA,EAAL,CAAA,CAAY+sD,CAAA,KAAA,CAAea,CAAA,EAAf,CAEhBe,EAAA,CAAOhvD,CAAA,EAAP,CAAA,CAAc,CAACusD,CAAD,CAAYE,CAAZ,CAAmBE,CAAnB,CAA4BS,CAAAa,GAA5B,CAA4CgB,CAA5C,CANY,CAF6C,CAiB3F,MAAOD,EAzBX,CA6CA76C;CAAA6T,QAAA,CAAAA,QAAO,CAACgnC,CAAD,CACP,CAKI,IAAIG,EAAW,CAAf,CACIC,EAAU,4BASd,IAAIJ,CAAJ,EAA8B,CAA9B,CAAcA,CAAA9qD,OAAd,CAAiC,CAE7B,IAAIlE,EAAI,CAAR,CACIqvD,EAAYL,CAAA,CAAOhvD,CAAA,EAAP,CAEZqvD,EAAJ,EAAqC,CAArC,EAAiBA,CAAAnrD,OAAjB,GAMQ,CAAC,IAAA6nD,EAAA7nD,OAAL,EAAkD,CAAlD,EAA8BmrD,CAAAnrD,OAA9B,CACI,IAAAgoD,OAAA,CA9yoBArxB,OA8yoBA,CAAgCw0B,CAAA,CAAU,CAAV,CAAhC,CAA8CA,CAAA,CAAU,CAAV,CAA9C,CAA4DA,CAAA,CAAU,CAAV,CAA5D,CAA0EA,CAAA,CAAU,CAAV,CAA1E,CADJ,CAgByB,IAhBzB,EAgBSA,CAAA,CAAU,CAAV,CAhBT,EAgBoD,IAhBpD,EAgBiC,IAAArD,EAhBjC,EAgB4DqD,CAAA,CAAU,CAAV,CAhB5D,EAgB4E,IAAArD,EAhB5E,GAiBIoD,CACA,CADU,qBACV,CADkCC,CAAA,CAAU,CAAV,CAClC,CADiD,mCACjD,CADuF,IAAArD,EACvF,CADyG,GACzG,CAAAmD,CAAA,CAAY,EAlBhB,CANJ,CAsCA,KAFK,IAAApD,EAAA7nD,OAEL,GAF4BirD,CAE5B,CAFwC,EAExC,EAAOnvD,CAAP,CAAWgvD,CAAA9qD,OAAX,EAAwC,CAAxC,EAA4BirD,CAA5B,CAAA,CAA2C,CACvC,IAAI/uD,EAAI,CAAR,CACIkvD,EAAMN,CAAA,CAAOhvD,CAAA,EAAP,CADV,CAEIusD,EAAY+C,CAAA,CAAIlvD,CAAA,EAAJ,CAFhB,CAGIqsD,EAAQ6C,CAAA,CAAIlvD,CAAA,EAAJ,CAHZ,CAIIusD,EAAU2C,CAAA,CAAIlvD,CAAA,EAAJ,CAOd,IAAImsD,CAAJ,EAAiB,IAAAR,EAAA7nD,OAAjB,EAA0CuoD,CAA1C,EAAmD,IAAAV,EAAA,CAAeQ,CAAf,CAAAroD,OAAnD,EAAuFyoD,CAAvF,EAAkG,IAAAZ,EAAA,CAAeQ,CAAf,CAAA,CAA0BE,CAA1B,CAAAvoD,OAAlG,CAA2I,CACvIkrD,CAAA,CAAU,iBAAV,CAA2B7C,CAA3B,CAAuC,GAAvC,CAA6CE,CAA7C,CAAqD,GAArD,CAA2DE,CAA3D,CAAqE,kBAArE;AAA0FwC,CAA1F,CAAqG,mBACrGA,EAAA,CAAY,EACZ,MAHuI,CAK3I,GAAI,IAAAlD,EAAJ,CAA0B,CACtBmD,CAAA,CAAU,uCACVD,EAAA,CAAY,EACZ,MAHsB,CAKtBlB,CAAAA,CAAUqB,CAAA,CAAIlvD,CAAA,EAAJ,CACV6uD,EAAAA,CAAOK,CAAA,CAAIlvD,CAAA,EAAJ,CACP8uD,EAAAA,CAAejB,CAAfiB,CAAyBD,CAAA/qD,OAE7B,IADIkpD,CACJ,CADa,IAAArB,EAAA,CAAeQ,CAAf,CAAA,CAA0BE,CAA1B,CAAA,CAAiCE,CAAjC,CACb,CAAA,CAOA,IADI/tB,CACJ,CADUwuB,CAAA,KAAAlpD,OACV,CAAO06B,CAAP,CAAaqvB,CAAb,CAAA,CACIb,CAAA,KAAA,CAAexuB,CAAA,EAAf,CAAA,CAAwBwuB,CAAA,QAExB/sD,EAAAA,CAAI,CACR+sD,EAAAa,GAAA,CAAiBA,CAEjB,KADAb,CAAAE,GACA,CADiB2B,CAAA/qD,OACjB,CAAO+pD,CAAP,CAAiBiB,CAAjB,CAAA,CACI9B,CAAA,KAAA,CAAea,CAAA,EAAf,CAAA,CAA4BgB,CAAA,CAAK5uD,CAAA,EAAL,CAEhC8uD,EAAA,EAhBA,CA1BuC,CA3Cd,CAyFlB,CAAf,CAAIA,CAAJ,EAI8B,EAJ9B,EAIiBA,CAJjB,EAKQ,IAAAh/B,WAAA1b,EAAA,CAAuB,0BAAvB,CAAoD,IAAA82C,GAApD,CAAqE,IAArE,CAA4E6D,CAA5E,CAOR,OAAOD,EApHX,CA0PJ,KAAA7D,GAAmB,CA2Dft9C;QAhBEuhD,GAgBS,CAACjpD,CAAD,CAAO4H,CAAP,CAAcC,CAAd,CAA2BqhD,CAA3B,CAAqCC,CAArC,CAAkDC,CAAlD,CACX,CACI,CAAA,KAAA,CAAA,IAAA,CAAMppD,CAAN,CAAY4H,CAAZ,CAAmBC,CAAnB,CAMA,KAAAg3C,EAAA,CAAmBC,EAAA,CAAAA,IAAA,CAAiBl3C,CAAA,UAAjB,CACnB,KAAAm3C,EAAA,CAAkB,CAElB,KAAAmK,EAAA,CAAgBA,CAChB,KAAAC,EAAA,CAAmBA,CACnB,KAAAC,EAAA,CAAgBA,CAEhB,KAAAC,EAAA,CAAeH,CAAA32C,GACf,KAAA+2C,EAAA,CAAmB7mD,KAAJ,CAAU,IAAA4mD,EAAV,CACf,KAAAE,EAAA,CAAoB,CAtzkBb/hD,EAAA,CAAgB,MAAhB,CAszkBP,EAAuC5G,MAAvC,EAAiD,YAAjD,EAAiEA,OAajE,KAAA4oD,EAAA,CAAoB,EAEpB,KAAAj6B,GAAA,CAAW,IAEX,KAAA,QAAA,CAAkB,CACd,SAAgB,IAAAk6B,GADF,CAEd,SAAgB,IAAAC,GAFF,CAGd,YAAgB,IAAAC,GAHF,CAId,KAAgB,IAAAC,GAJF,CAjCtB,CAjB0B1pC,CAAAvY,CAAxBshD,EAAwBthD,CAAAA,CAAAA,CAiE1Bm3C,SAAA,GAAW,CAAXA,CAAW,CAACkB,CAAD,CACX,CACI,GAAIA,CAAJ,EAA+B,QAA/B,EAAc,MAAOA,EAArB,CACI,GAAI,CAKAA,CAAA,CAASx9C,IAAA,CAAK,GAAL,CAAWw9C,CAAX,CAAoB,GAApB,CALT,CAMF,MAAO1mD,CAAP,CAAU,CA7ojBhBqJ,CAAA,CA8ojBwB,CAAA3C,KA9ojBxB,CA8ojBoC,qBA9ojBpC,CA8ojB4D1G,CAAAsJ,QA9ojB5D,CA8ojBwE,IA9ojBxE,CA8ojB+Eo9C,CA9ojB/E,CA8ojBwF,GA9ojBxF,CA+ojBQ,CAAAA,CAAA,CAAS,IAFD,CAKhB,MAAOA,EAAP,EAAiB,EAbrB,CA0BA,CAAA,CA/wpBJ,EAAA6J,UA+wpBIh8C;CAAAvC,GAAA,CAAAA,QAAU,CAACQ,CAAD,CAAQkC,CAAR,CAAkB/D,CAAlB,CACV,CACI,IAAI6/C,EAAK,IAET,QAAQ97C,CAAR,EAEA,KAAK,WAAL,CAKI,MAJA,KAAA/F,EAAA,CAAc+F,CAAd,CAIO,CAJmB/D,CAInB,CAHPA,CAAAk2C,SAGO,CAHYC,QAA0B,EAAQ,CACjD2J,EAAA,CAAAD,CAAA,CADiD,CAG9C,CAAA,CAAA,CAEX,MAAK,UAAL,CACA,KAAK,YAAL,CAWI,MAVA,KAAA7hD,EAAA,CAAc+F,CAAd,CAUO,CAVmB/D,CAUnB,CAJPA,CAAAk2C,SAIO,CAJYC,QAA2B,EAAQ,CAClD,IAAI4J,EAAS7mC,EAAA,CAAalZ,CAAAnO,MAAb,CAA4B,EAA5B,CACC,KAAd,EAAIkuD,CAAJ,EAAoBC,EAAA,CAAAH,CAAA,CAAeE,CAAf,CAF8B,CAI/C,CAAA,CAAA,CAEX,MAAK,UAAL,CAKI,MAJA,KAAA/hD,EAAA,CAAc+F,CAAd,CAIO,CAJmB/D,CAInB,CAHPA,CAAAgE,QAGO,CAHWmvB,QAAyB,EAAQ,CAC/C0sB,CAAAJ,GAAA,EAD+C,CAG5C,CAAA,CAAA,CAEX,MAAK,UAAL,CAKI,MAJA,KAAAzhD,EAAA,CAAc+F,CAAd,CAIO,CAJmB/D,CAInB,CAHPA,CAAAgE,QAGO,CAHWmvB,QAAwB,EAAQ,CAC9C0sB,CAAAL,GAAA,EAD8C,CAG3C,CAAA,CAAA,CAEX,MAAK,UAAL,CAMI,GAAI,CAAC,IAAAF,EAAL,CAAuB,CASnBt/C,CAAAU,WAAAo2C,YAAA,CAAoD92C,CAApD,CACA,MAVmB,CAavB,IAAAhC,EAAA,CAAc+F,CAAd,CAAA,CAA0B/D,CAE1BA,EAAAgE,QAAA,CAAkBmvB,QAAyB,EAAQ,CAC/C,IAAI8sB,EAAgBJ,CAAA7hD,EAAA,WACpB,IAAIiiD,CAAJ,EAAqBA,CAAA35C,QAArB,EAA8Cu5C,CAAAR,EAA9C,CAGI,GADIvE,CACJ;AADY+E,CAAAR,EAAA,CADSnmC,EAAA,CAAa+mC,CAAApuD,MAAb,CAAkC,EAAlC,CACT,EADkD,CAClD,CACZ,CAKI,GADI0qD,CACJ,CADWzB,CAAAyB,GACX,CAAU,CAjhBtBpsD,IAAAA,EAAI,EACR,KALJ,IAIgBkuD,EAAM,CAJtB,CAIyBxB,CACrB,CAAQA,CAAR,CAAiBuB,EAAA,CAkhBiC7B,CAlhBjC,CAAe8B,CAAA,EAAf,CAAjB,CAAA,CACI,IADqC,IAC5Bx9B,EAAM,CADsB,CACnBktB,EAAM8O,CAAA,OAAxB,CAA0Ch8B,CAA1C,CAAgDktB,CAAhD,CAAqDltB,CAAA,EAArD,CACI1wB,CAAA,EAAKkC,MAAAC,aAAA,CAAoBksD,EAAA,CAghBiBjC,CAhhBjB,CAAmBM,CAAnB,CAA2Bh8B,CAA3B,CAApB,CAGb,EAAA,CAAOq/B,IAAA,CAAK/vD,CAAL,CA6gBwF,EAAA,CAAAosD,CAAArB,GAAAjqD,QAAA,CAAuB,OAAvB,CAAgC,MAAhC,CAv1kB3FkvD,EAAAA,CAAO,IAMPC,EAAA,CALOA,uCAKP,CAi1kB8CvoD,CA/0kB9C5E,EAAJ,GACIktD,CACA,CADOhkC,QAAAo9B,cAAA,CAAuB,GAAvB,CACP,CAA4B,QAA5B,EAAI,MAAO4G,EAAAE,SAAX,GAAsCF,CAAtC,CAA6C,IAA7C,CAFJ,CAIIA,EAAJ,EACIA,CAAAG,KAKA,CALYF,CAKZ,CAJAD,CAAAE,SAIA,CAJgBptD,CAIhB,CAHAkpB,QAAAokC,KAAA9G,YAAA,CAA0B0G,CAA1B,CAGA,CAFAA,CAAAK,MAAA,EAEA,CADArkC,QAAAokC,KAAAzJ,YAAA,CAA0BqJ,CAA1B,CACA,CAAAM,CAAA,CAAS,kCAAT,CAA8CxtD,CAA9C,CAA0D,GAN9D,GAQI0D,MAAAa,KAAA,CAAY4oD,CAAZ,CACA,CAAAK,CAAA,CAAS,uEAAT;CAAoFxtD,CAAA,CAAY,IAAZ,CAAmBA,CAAnB,CAA+B,GAA/B,CAAsC,EAA1H,EAAgI,GATpI,CA40kBoByF,EAAA,CAj0kBb+nD,CAi0kBa,CAHM,CAAV,IAKIZ,EAAA37C,EAAA,CAAU,0BAAV,CAVR,KAaI27C,EAAA37C,EAAA,CAAU,yBAAV,CAlBuC,CAsBnD,OAAO,CAAA,CAEX,MAAK,WAAL,CACI,GAAK,IAAAo7C,EAAL,CAqCA,MAxBA,KAAAthD,EAAA,CAAc+F,CAAd,CAwBO,CAxBmB/D,CAwBnB,CAnBPA,CAAA+2C,iBAAA,CAAyB,QAAzB,CAAmC,QAAQ,EAAG,CAC1C,IAAIC,EAAWh3C,CAAAi3C,SAAA,CAAiB,CAAjB,CAEFD,EAAAC,SAAAC,CAAkB,CAAlBA,CACbC,SAAA,CAAkB,CAFNH,CAAAC,SAAA,CAAkB,CAAlB,CAAAG,MAEOzjD,OAJuB,CAA9C,CAmBO,CAZPqM,CAAAq3C,SAYO,CAZYC,QAAQ,CAACvgC,CAAD,CAAQ,CAE/B,GADIwgC,CACJ,CADWxgC,CAAAygC,cAAA,CAAoB,CAApB,CAAAJ,MAAA,CAA6B,CAA7B,CACX,CAAU,CACN,IAAI6D,EAAY1D,CAAAz5C,KAEhB+hD,EAAAJ,GAAA,CADgB7T,EAAAoP,CAAgBC,CAAhBD,CAA2B,CAAA,CAA3BA,CAChB,CAA+BC,CAA/B,CAA0C1D,CAA1C,CAHM,CAQV,MAAO,CAAA,CAVwB,CAY5B,CAAA,CAAA,CA5BHv3C,EAAAU,WAAAo2C,YAAA,CAAoD92C,CAApD,CA5FR,CA6HA,MAAO,CAAA,CAhIX,CA4IA4D;CAAAqT,GAAA,CAAAA,QAAO,CAACjY,CAAD,CAAMD,CAAN,CAAWD,CAAX,CAAgBD,CAAhB,CACP,CACI,IAAAG,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CACX,KAAAD,EAAA,CAAWA,CAOX,IALI+1C,CAKJ,CALkBC,EAAA,CAAAA,IAAA,CAAiBxiB,EAAA,CAAA,IAAArzB,EAAA,CAAwB,WAAxB,CAAjB,CAKlB,CACI,IAAK0hD,IAAIA,CAAT,GAAmB9L,EAAnB,CACQ8L,CAAAtvD,OAAA,CAAc,CAAd,CAAiB,CAAjB,CAAJ,EAA2B,IAAA2E,KAAA3E,OAAA,CAAiB,CAAjB,CAAoB,CAApB,CAA3B,GACA,IAAAwjD,EAAA,CAAiB8L,CAAjB,CADA,CAC2B9L,CAAA,CAAY8L,CAAZ,CAD3B,CAUR,KAAArqC,MAAA,EAEA,KAAAiP,GAAA,CAAWE,EAAA,CAAA,IAAA1mB,EAAA,CAAgB,IAAAmgD,EAAA52C,GAAhB,CAAmC,IAAA42C,EAAA72C,GAAnC,CAAsD,IAAAxK,GAAtD,CAEXsZ,GAAA,CAAAnY,CAAA,CAAe,IAAf,CAAqB,IAAAogD,EAArB,CACA/nC,GAAA,CAAArY,CAAA,CAAoB,IAAAsX,MAAApP,KAAA,CAAgB,IAAhB,CAApB,CAEA05C,GAAA,CAAAA,IAAA,CAAa,MAAb,CAAqBC,EAArB,CAAkD,CAAA,CAAlD,CACI,KAAAtB,EAAJ,EAAsBqB,EAAA,CAAAA,IAAA,CAAa,YAAb,CAA2BE,EAA3B,CACtBF,GAAA,CAAAA,IAAA,CAAa,aAAb,CAA4BG,EAA5B,CAEK5I,GAAA,CAAAA,IAAA,CAAL,EAAuBlzC,CAAA,CAAAA,IAAA,CAlC3B,CA6EApB;CAAA0B,GAAA,CAAAA,QAAO,CAAClN,CAAD,CAAOmf,CAAP,CACP,CACI,GAAI,CAACA,CAAL,CAAe,CACX,GAAI,CAACnf,CAAL,CAEI,IADA,IAAAie,MAAA,EACI0qC,CAAA,IAAA/hD,EAAA+hD,EAAJ,CAAsB,CAKlBC,IA8xBEzB,EAAA,CAAoB,EAElC,KAASQ,CAAT,CAAkB,CAAlB,CAAqBA,CAArB,CAhyBYiB,IAgyBkB3B,EAAA1rD,OAA9B,CAAmDosD,CAAA,EAAnD,CACIkB,EAAA,CAjyBQD,IAiyBR,CAAiBjB,CAAjB,CAAyB,CAAA,CAAzB,CAhyBQ7H,GAAA,CAAAA,IAAA,CAAe,CAAA,CAAf,CANkB,CAAtB,CAFJ,IAWI,IAAI,CAAC,IAAAzgC,QAAA,CAAarf,CAAb,CAAL,CAAyB,MAAO,CAAA,CAMpC,IAAK6nD,CAAL,CAAqB,IAAAjiD,EAAA,WAArB,CAAmD,CAC/C,IAAA,CAAOiiD,CAAAiB,WAAP,CAAA,CACIjB,CAAAnJ,YAAA,CAA0BmJ,CAAAiB,WAA1B,CAEJjB,EAAApuD,MAAA,CAAsB,EACtB,KAASkuD,CAAT,CAAkB,CAAlB,CAAqBA,CAArB,CAA8B,IAAAX,EAA9B,CAA4CW,CAAA,EAA5C,CAAsD,CAClD,IAAI1J,EAAgBl6B,QAAAo9B,cAAA,CAAuB,QAAvB,CACpBlD,EAAAxkD,MAAA,CAAsBkuD,CACtB1J,EAAAQ,KAAA,CAAqBsK,IAzDrB9B,EAAAvE,CAyDuCiF,CAzDvCjF,CACL17C,GAwDK,EAxDU,KAyDV6gD,EAAAxG,YAAA,CAA0BpD,CAA1B,CAJkD,CAMnC,CAAnB,CAAI,IAAA+I,EAAJ,GACIa,CAAApuD,MACA,CADsB,GACtB,CAAAmuD,EAAA,CAAAA,IAAA,CAAiB,CAAjB,CAFJ,CAX+C,CAlBxC,CAmCf,MAAO,CAAA,CApCX,CA+CAp8C,EAAA2B,GAAA,CAAAA,QAAS,CAACC,CAAD,CACT,CACI,MAAOA,EAAA,CAAO,IAAAkS,KAAA,EAAP,CAAqB,CAAA,CADhC,CASA9T,EAAAyS,MAAA,CAAAA,QAAK,EACL,CACI,IAAA+qC,GAAA,EACAC,GAAA,CAAAA,IAAA,CAFJ,CAaAz9C;CAAA8T,KAAA,CAAAA,QAAI,EACJ,CACI,IAAIC,EAAQ,IAAIC,CAAJ,CAAU,IAAV,CACZD,EAAAE,IAAA,CAAU,CAAV,CAAa,IAAAypC,GAAA,EAAb,CACA3pC,EAAAE,IAAA,CAAU,CAAV,CAAa0pC,EAAA,CAAAA,IAAA,CAAb,CACA5pC,EAAAE,IAAA,CAAU,CAAV,CAAa2pC,EAAA,CAAAA,IAAA,CAAb,CACA,OAAO7pC,EAAAvf,KAAA,EALX,CAiBAwL,EAAA6T,QAAA,CAAAA,QAAO,CAACrf,CAAD,CACP,CACI,IAAIuK,EAAW,CAAA,CACV,KAAAy+C,GAAA,CAAoBhpD,CAAA,CAAK,CAAL,CAApB,CAAL,GAAmCuK,CAAnC,CAA8C,CAAA,CAA9C,CACsB,KAAA,EAAAvK,CAAA,CAAK,CAAL,CA4LlBqpD,EAAJ,GA5LKC,IA4LSnC,EAAd,CAAkCkC,CAAlC,CA3LKJ,GAAA,CAAAA,IAAA,CAAgBjpD,CAAA,CAAK,CAAL,CAAhB,CAAL,GAA+BuK,CAA/B,CAA0C,CAAA,CAA1C,CACA,OAAOA,EALX,CAiBAiB,EAAAw9C,GAAA,CAAAA,QAAc,EACd,CACI,MAAO,CAAA,CADX,CAYAx9C,EAAA09C,GAAA,CAAAA,QAAc,EACd,CACI,MAAO,EADX,CAoGAD;QAAA,GAAU,CAAVA,CAAU,CAACM,CAAD,CACV,CAEI,IAAK,IAAI5B,EAAS,CAAlB,CAAqBA,CAArB,CAA8B,CAAAV,EAAA1rD,OAA9B,CAAmDosD,CAAA,EAAnD,CAA6D,CACzD,IAAIjF,EAAQ,CAAAuE,EAAA,CAAaU,CAAb,CACEtrD,KAAAA,EAAd,GAAIqmD,CAAJ,GACIA,CADJ,CACY,CAAAuE,EAAA,CAAaU,CAAb,CADZ,CACmC,EADnC,CAIK6B,KAAAA,EAAAA,CAAAA,CAAe9G,EAAAA,CAAOiF,EAAAA,CAAAA,CAAQb,KAAAA,EAAAA,CAAAA,EAAAA,CADlB2C,EAAAF,CAAAE,EAAgBF,CAAAE,CAAa9B,CAAb8B,CACE3C,CA7FnCzvD,EAAI,CAGRqrD,EAAAiF,GAAA,CAAeA,CACfjF,EAAAh9C,KAAA,CAAa,CAAAG,GACb68C,EAAAz1C,GAAA,CAAcy1C,CAAAgH,GAAd,CAA6B,CAAA,CAC7BhH,EAAA73C,GAAA,CAAoB,IACpB63C,EAAAK,GAAA,CAAmB,CAAA,CAMnBL,EAAA17C,GAAA,CAAc8/C,CAAA,CAAYzvD,CAAA,EAAZ,CAAd,CAAiCswD,CACjCjF,EAAAM,GAAA,CAAmB8D,CAAA,CAAYzvD,CAAA,EAAZ,CACnBqrD,EAAAO,GAAA,CAAe6D,CAAA,CAAYzvD,CAAA,EAAZ,CACfqrD,EAAAQ,GAAA,CAAiB4D,CAAA,CAAYzvD,CAAA,EAAZ,CACjBqrD,EAAAS,GAAA,CAAiB2D,CAAA,CAAYzvD,CAAA,EAAZ,CACjBqrD,EAAAiH,GAAA,CAAsB7C,CAAA,CAAYzvD,CAAA,EAAZ,CACtBqrD,EAAAkH,GAAA,CAAkB9C,CAAA,CAAYzvD,CAAA,EAAZ,CAClBqrD,EAAAmH,GAAA,CAAoB/C,CAAA,CAAYzvD,CAAA,EAAZ,CACpBqrD,EAAAoH,GAAA,CAAqBhD,CAAA,CAAYzvD,CAAA,EAAZ,CACrBqrD,EAAApkD,OAAA,CAAewoD,CAAA,CAAYzvD,CAAZ,CAKfqrD,EAAAqH,GAAA,CAAc,CACdrH,EAAAsH,GAAA,CAAkB,CAClBtH,EAAAkD,GAAA,CAAgB,CAChBlD,EAAAgD,GAAA,CAAmBhD,CAAAQ,GACnBR,EAAAiD,GAAA,CAAejD,CAAAS,GAKfT,EAAAoD,GAAA,CAAiB,CACjBpD,EAAA+B,GAAA,CAAe,IAEV/B,EAAAyB,GAAL,GACIzB,CAAAG,GADJ,CACsB,EADtB,CAII4G,EAAJ,GAEQ7G,CAcJ,CAdgB6G,CAAA,CAAW,CAAX,CAchB,CAbI5G,CAaJ,CAbgB4G,CAAA,CAAW,CAAX,CAahB,CAfaA,CAAAC,CAAW,CAAXA,CAeb,EAC4B9G,CA+PhC,CA/PgCA,CA+PhC,CA/P2CC,CA+P3C,CA/P2CA,CA+P3C,CAJIH,CAIJ,CAJY,CAAAuE,EAAA,CA3PYU,CA2PZ,CAIZ,CAHAkB,EAAA,CAAAA,CAAA,CA5PwBlB,CA4PxB,CAAyB,CAAA,CAAzB,CAGA,CAFAjF,CAAAgH,GAEA,CAFe,CAAA,CAEf,CADIvF,CACJ,CADW,IAAI1B,EAAJ,CAAc,CAAd,CAAoBC,CAApB,CAlzqBCxwB,SAkzqBD,CACX,CAAA,CAAA+3B,GAAA,CAAmBvH,CAAnB,CAA0ByB,CAA1B,CAAgCvB,CAAhC,CAA2CC,CAA3C,CAAsD,CAAA,CAAtD,CAhQI,EAGSqH,EAAA,CAAAA,CAAA,CAAevC,CAAf,CAAuB/E,CAAvB,CAAkCC,CAAlC,CAA6C,CAAA,CAA7C,CAAJ,CACGH,CAAAyB,GADH,EAEOtB,CAFP,EAGOsH,EAAA,CAAAA,CAAA;AAAoBvH,CAApB,CAA+BC,CAA/B,CAA0CH,CAAAyB,GAA1C,CAHP,CASDv3C,CAAA,CAAAA,CAAA,CAAc,CAAA,CAAd,CA5BR,CA4C6D,CAU7D,MAXerC,CAAAA,CADnB,CAqCA6+C,QAAA,GAAU,CAAVA,CAAU,CACV,CAEI,IADA,IAAIppD,EAAO,EAAX,CACS2nD,EAAS,CAAlB,CAAqBA,CAArB,CAA8B,CAAAV,EAAA1rD,OAA9B,CAAmDosD,CAAA,EAAnD,CAA6D,CAChC,IAAA,EAAA,CAAAV,EAAA,CAAaU,CAAb,CAAzB3nD,EAAAY,KAAA,CAjBG,CACH8hD,CAAAgH,GADG,CAEHhH,CAAAE,GAFG,CAGHF,CAAAG,GAHG,CAiBH,CADyD,CAG7D,MAAO7iD,EALX,CAuCAmpD,QAAA,GAAW,CAAXA,CAAW,CACX,CACI,IAAK,IAAIxB,EAAS,CAAlB,CAAqBA,CAArB,CAA8B,CAAAV,EAAA1rD,OAA9B,CAAmDosD,CAAA,EAAnD,CAA6D,CACzD,IAAIjF,EAAQ,CAAAuE,EAAA,CAAaU,CAAb,CACRjF,EAAAyB,GAAJ,EACIiG,EAAA,CAAAA,CAAA,CAAwC1H,CAAAG,GAAxC,CAAyDH,CAAAyB,GAAzD,CAHqD,CAM7D,MAAO,EAAAgD,EAPX;AAiBArH,QAAA,GAAS,CAATA,CAAS,CAACuK,CAAD,CACT,CACSA,CAAL,GAAe,CAAA3N,EAAf,CAAiC,CAAjC,CACA,KAAK4L,IAAIA,CAAT,GAAmB,EAAA9L,EAAnB,CAAqC,CACjC,IAAIiN,EAAa,CAAAjN,EAAA,CAAiB8L,CAAjB,CAAjB,CACIzF,EAAY4G,CAAA,KAAZ5G,EAAkC,EADtC,CAEgB,CAAA,IAAA,EAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAqSxB,CAAA,CAAA,CAEI,IADIyH,CACJ,CAvS0C,CAsSvB1kD,EAAA,UACnB,GAAoB0kD,CAAAp8C,QAApB,CACI,IAAK,IAAI7W,EAAI,CAAb,CAAgBA,CAAhB,CAAoBizD,CAAAp8C,QAAA3S,OAApB,CAAiDlE,CAAA,EAAjD,CAAsD,CAClD,IAAIuQ,EAAU0iD,CAAAp8C,QAAA,CAAqB7W,CAArB,CACd,IAAIuQ,CAAAnO,MAAJ,EA1SkCsmD,CA0SlC,CAA4B,CAAA,CAAA,CAAOn4C,CAAA62C,KAAP,OAAA,CAAA,CAFsB,CAK1D,CAAA,CAAOjL,EAAA,CA7SmCuM,CA6SnC,CAAuB,CAAA,CAAvB,CARX,CApSQ,GAAI8C,CAAJ,EAAiBD,CAAjB,GArVA+E,CAuVQ,CAvVE,EAuVF,CAD6BW,CAC7B,GArVRX,CACI,CAmViCW,CApV5BtN,WAAA,CAoV4BsN,CApVV/sD,OAAlB,CAAkC,CAAlC,CACL,CAD4C,EAC5C,CAAS,CAAT,CAAAosD,CAAA,EAAuB,CAAvB,CAAcA,CAoVV,IApVsBA,CAoVtB,CApVgC,EAoVhC,EAAU,CAAV,EAAAA,CAAA,EAAeA,CAAf,CAAwB,CAAAV,EAAA1rD,OAFhC,EAEqD,CACzC,CAAC2uD,EAAA,CAAAA,CAAA,CAAevC,CAAf,CAAuB/E,CAAvB,CAAkCC,CAAlC,CAA6C,CAAA,CAA7C,CAAL,EAA2DwH,CAA3D,EACIz9C,CAAA,CAAAA,CAAA,CAAc,CAAA,CAAd,CAEJ,SAJ6C,CAOrD,CAAAd,EAAA,CAAY,0CAAZ,CAAyDw8C,CAAzD,CAAkE,IAAlE,CAAyEroD,IAAAsqD,UAAA,CAAed,CAAf,CAAzE,CAAsG,GAAtG,CAbiC,CAerC,MAAO,CAAC,CAAC,CAAA/M,EAjBb;AA6BAlxC,CAAA67C,GAAA,CAAAA,QAAgB,CAACzE,CAAD,CAAYC,CAAZ,CAAuB1D,CAAvB,CAChB,CACI,GAAI,CAACyD,CAAL,EAAkB,CAACC,CAAnB,CAA8B,CAC1B,IAAIyH,EAAe,IAAA1kD,EAAA,UACf0kD,EAAJ,EAAoBA,CAAAp8C,QAApB,GACI00C,CACA,CADY0H,CAAAp8C,QAAA,CAAqBo8C,CAAAl8C,cAArB,CAAAqwC,KACZ,CAAAoE,CAAA,CAAYyH,CAAA7wD,MAFhB,CAF0B,CAS1BkuD,CAAAA,EADAE,CACAF,CADgB,IAAA/hD,EAAA,WAChB+hD,GAA0B7mC,EAAA,CAAa+mC,CAAApuD,MAAb,CAAkC,EAAlC,CAE9B,IAAe4C,IAAAA,EAAf,GAAIsrD,CAAJ,EAAqC,CAArC,CAA4BA,CAA5B,EAA0CA,CAA1C,EAAoD,IAAAV,EAAA1rD,OAApD,CAEI,MADA,KAAAuQ,EAAA,CAAY,mCAAZ,CACO,CAAA,CAAA,CAGX,IAAI,CAAC+2C,CAAL,CAEI,MADAgG,GAAA,CAAAA,IAAA,CAAiBlB,CAAjB,CACO,CAAA,CAAA,CAGX,IAAI9E,CAAJ,EAAiB4F,EAAjB,CAEI,MADA,KAAA38C,EAAA,CAAY,gEAAZ,CACO,CAAA,CAAA,CAYX,IAAI+2C,CAAJ,EAAiB6F,EAAjB,CAAgD,CAC5C7F,CAAA,CAAYtkD,MAAA2hD,OAAA,CAAc,uCAAd,CAAuD,EAAvD,CAAZ,EAA0E,EAC1E,IAAI,CAAC2C,CAAL,CAAgB,MAAO,CAAA,CACvBD,EAAA,CAAYpP,EAAA,CAAgBqP,CAAhB,CACZ,KAAAvkD,OAAA,CAAY,qBAAZ,CAAoCukD,CAApC,CAAgD,OAAhD;AAA2DD,CAA3D,CAAuE,GAAvE,CAJ4C,CAWhDsH,EAAA,CAAAA,IAAA,CAAevC,CAAf,CAAuB/E,CAAvB,CAAkCC,CAAlC,CAA6C,CAAA,CAA7C,CAAoD1D,CAApD,CACA,OAAO,CAAA,CAhDX,CAyDA3zC,EAAA47C,GAAA,CAAAA,QAAgB,EAChB,CACI,IAAI1E,CAAJ,CACImF,EAAgB,IAAAjiD,EAAA,WAChB+hD,EAAAA,CAASE,CAATF,EAA0B7mC,EAAA,CAAa+mC,CAAApuD,MAAb,CAAkC,EAAlC,CAE9B,IAAc,IAAd,EAAIkuD,CAAJ,EAA+B,CAA/B,CAAsBA,CAAtB,EAAoCA,CAApC,EAA8C,IAAAV,EAAA1rD,OAA9C,EAAqE,EAAEmnD,CAAF,CAAU,IAAAuE,EAAA,CAAaU,CAAb,CAAV,CAArE,CAEI,MADA,KAAA77C,EAAA,CAAY,mCAAZ,CACO,CAAA,CAAA,CAGX,IAAI,CAAC42C,CAAAyB,GAAL,CAEI,MADA,KAAAr4C,EAAA,CAAY,kCAAZ,CACO,CAAA,CAAA,CAUX81B,GAAA,CAAA,IAAAl7B,EAAA,CAAkB,CAAlB,CAAqB,CAAA,CAArB,CAA2BihD,CAA3B,CAGA,OAAA,CADItpD,CACJ,CADU,IAAAmsD,GAAA,CAAc9H,CAAd,CAAqBA,CAAAiH,GAArB,CAA0CjH,CAAAkH,GAA1C,CAA2DlH,CAAAmH,GAA3D,CAA8EnH,CAAAoH,GAA9E,CAAkG,CAAlG,CAA0G,CAA1G,CACV,GACI,IAAAh+C,EAAA,CAAY,kCAAZ,CAAiDzN,CAAjD,CAAuD,GAAvD,CACO,CAAA,CAAA,CAFX,EAIO,CAAA,CA7BX,CA8DA6rD;QAAA,GAAS,CAATA,CAAS,CAACvC,CAAD,CAAS/E,CAAT,CAAoBC,CAApB,CAA+BzC,CAA/B,CAA2CjB,CAA3C,CACT,CACI,IAAIkB,EAAW,EAAf,CACIqC,EAAQ,CAAAuE,EAAA,CAAaU,CAAb,CAERjF,EAAAG,GAAAznD,YAAA,EAAJ,EAAqCynD,CAAAznD,YAAA,EAArC,GAEIilD,CAAA,EAGA,CAFAwI,EAAA,CAAAA,CAAA,CAAiBlB,CAAjB,CAAyB,CAAA,CAAzB,CAEA,CAAIjF,CAAAz1C,GAAJ,CACI,CAAAnB,EAAA,CAAY,CAAAnO,KAAZ,CAAwB,OAAxB,CADJ,EAKI+kD,CAAAz1C,GAQA,CARc,CAAA,CAQd,CAPImzC,CAOJ,GANIsC,CAAAtC,GAEA,CAFmB,CAAA,CAEnB,CADA,CAAA1D,EAAA,EACA,CAAIpvC,CAAA,CAAAA,CAAA,CAAJ,EAA2BE,CAAA,CAAAA,CAAA,CAAkB,qBAAlB,CAA0Co1C,CAA1C,CAI/B,EAFAF,CAAAgH,GAEA,CAFe,CAAC,CAACvK,CAEjB,CAAImB,CADO6D,IAAI1B,EAAJ0B,CAAc,CAAdA,CAAoBzB,CAApByB,CAz1qBPjyB,SAy1qBOiyB,CACP7D,MAAA,CAAUsC,CAAV,CAAqBC,CAArB,CAAgC1D,CAAhC,CAAsC,CAAA8K,GAAtC,CAAJ,EACI5J,CAAA,EAdR,CALJ,CAuBA,OAAOA,EA3BX;AA0CA70C,CAAAy+C,GAAA,CAAAA,QAAa,CAACvH,CAAD,CAAQyB,CAAR,CAAcvB,CAAd,CAAyBC,CAAzB,CAAoCzC,CAApC,CACb,CACIsC,CAAAz1C,GAAA,CAAc,CAAA,CAEVk3C,EAAJ,GAKQA,CAAAnB,GALR,CAK0BN,CAAAM,GAL1B,EAK8CmB,CAAAlB,GAL9C,CAK4DP,CAAAO,GAL5D,IAMQ,IAAAn3C,EAAA,CAAY,QAAZ,CAAwB82C,CAAxB,CAAoC,wBAApC,EAAgEmG,IAviB5D9B,EAAAvE,CAuiB8EA,CAAAiF,GAviB9EjF,CACL17C,GAsiBC,EAtiBc,KAsiBd,EACA,CAAAm9C,CAAA,CAAO,IAPf,CAWIA,EAAJ,EACIzB,CAAAyB,GAiCA,CAjCaA,CAiCb,CAhCAzB,CAAAE,GAgCA,CAhCkBA,CAgClB,CA/BAF,CAAAG,GA+BA,CA/BkBA,CA+BlB,CA1BA,IAAA4H,GAAA,CAAgB/H,CAAAiF,GAAhB,CA0BA,CAZAwC,EAAA,CAAAA,IAAA,CAAoBvH,CAApB,CAA+BC,CAA/B,CAA0CsB,CAA1C,CAYA,CANA,IAAAr4C,EAAA,CAAY,eAAZ,CAA+B82C,CAA/B,CAA2C,aAA3C,EAA4DmG,IAxkBpD9B,EAAAvE,CAwkBsEA,CAAAiF,GAxkBtEjF,CACL17C,GAukBH,EAvkBkB,KAukBlB,EAA6F07C,CAAAtC,GAA7F,EAAiHA,CAAjH,CAMA,CAAI,IAAAx5C,EAAJ,EAAc2zB,EAAA,CAAA,IAAA3zB,EAAA,CAlClB,EAqCI87C,CAAAgH,GArCJ,CAqCmB,CAAA,CAGfhH,EAAAtC,GAAJ,GACIsC,CAAAtC,GACA,CADmB,CAAA,CACnB,CAAK,EAAE,IAAA1D,EAAP,EAAwB9vC,CAAA,CAAAA,IAAA,CAF5B,CAKAg7C,GAAA,CAAAA,IAAA,CAAiBlF,CAAAiF,GAAjB,CAEIjF,EAAA73C,GAAJ,GACI63C,CAAA73C,GAAA,EACA,CAAA63C,CAAA73C,GAAA,CAAoB,IAFxB,CA7DJ,CA2EA09C;QAAA,GAAO,CAAPA,CAAO,CAACvhD,CAAD,CAAQ+4C,CAAR,CAAemB,CAAf,CACP,CAEI,IADIoJ,CACJ,CADmB,CAAA1kD,EAAA,UACnB,GAAoB0kD,CAAAp8C,QAApB,CAA0C,CACtC,IAAK,IAAI7W,EAAI,CAAb,CAAgBA,CAAhB,CAAoBizD,CAAAp8C,QAAA3S,OAApB,CAAiDlE,CAAA,EAAjD,CACI,GAAIizD,CAAAp8C,QAAA,CAAqB7W,CAArB,CAAAoC,MAAJ,EAAqCsmD,CAArC,CAA4C,MAE5C9B,EAAAA,CAAgBl6B,QAAAo9B,cAAA,CAAuB,QAAvB,CACpBlD,EAAAQ,KAAA,CAAqBz3C,CACrBi3C,EAAAxkD,MAAA,CAAsBsmD,CAClBmB,EAAJ,EAAYoJ,CAAA7hD,WAAA,CAAwB,CAAxB,CAAZ,CACI6hD,CAAAlJ,aAAA,CAA0BnD,CAA1B,CAAyCqM,CAAA7hD,WAAA,CAAwB,CAAxB,CAAzC,CADJ,CAGI6hD,CAAAjJ,YAAA,CAAyBpD,CAAzB,CAVkC,CAF9C;AAkDA2J,QAAA,GAAW,CAAXA,CAAW,CAACD,CAAD,CAAS+C,CAAT,CACX,CAII,IAAIngD,EAAW,CAAA,CACf,IAAc,CAAd,EAAIo9C,CAAJ,EAAmBA,CAAnB,CAA4B,CAAAV,EAAA1rD,OAA5B,CAAiD,CAC7C,IAAImnD,EAAQ,CAAAuE,EAAA,CAAaU,CAAb,CAAZ,CACI2C,EAAe,CAAA1kD,EAAA,UACfiiD,EAAAA,CAAgB,CAAAjiD,EAAA,WAIpB,IAAI0kD,CAAJ,EAAoBzC,CAApB,EAAqCyC,CAAAp8C,QAArC,EAA6D25C,CAAA35C,QAA7D,CAAoF,CAKhF,GAAIw8C,CAAJ,CAEI,IAAKrzD,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBwwD,CAAA35C,QAAA3S,OAAhB,CAA8ClE,CAAA,EAA9C,CACI,GAAIypB,EAAA,CAAa+mC,CAAA35C,QAAA,CAAsB7W,CAAtB,CAAAoC,MAAb,CAA6C,EAA7C,CAAJ,EAAwDipD,CAAAiF,GAAxD,CAAsE,CAC9DE,CAAAz5C,cAAJ,EAAmC/W,CAAnC,GACIwwD,CAAAz5C,cADJ,CACkC/W,CADlC,CAGAkT,EAAA,CAAW,CAAA,CACX,MALkE,CAY1EogD,CAAAA,CAAiB7pC,EAAA,CAAa+mC,CAAApuD,MAAb,CAAkC,EAAlC,CACjB6nD,EAAAA,CAAeoB,CAAAgH,GAAA,CAAcjB,EAAd,CAA6C/F,CAAAG,GAChE,IAAI,CAACxpD,KAAA,CAAMsxD,CAAN,CAAL,EAA8BA,CAA9B,EAAgDhD,CAAhD,CAAwD,CACpD,IAAKtwD,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBizD,CAAAp8C,QAAA3S,OAAhB,CAA6ClE,CAAA,EAA7C,CACI,GAAIizD,CAAAp8C,QAAA,CAAqB7W,CAArB,CAAAoC,MAAJ,EAAqC6nD,CAArC,CAAkD,CAC1CgJ,CAAAl8C,cAAJ,EAAkC/W,CAAlC,GACIizD,CAAAl8C,cADJ,CACiC/W,CADjC,CAGAkT,EAAA,CAAW,CAAA,CACX,MAL8C,CAQlDlT,CAAJ,EAASizD,CAAAp8C,QAAA3S,OAAT,GAAsC+uD,CAAAl8C,cAAtC,CAAmE,CAAnE,CAVoD,CAtBwB,CAPvC,CA2CjD,MAAO7D,EAhDX;AA4DAiB,CAAA87C,GAAA,CAAAA,QAAW,CAACgB,CAAD,CACX,CACI,IAAIT,EAAgB,IAAAjiD,EAAA,WACpB,IAAIiiD,CAAJ,EAAqBA,CAAA35C,QAArB,CAEI,IADA,IAAI84C,EAAUa,CAAA35C,QAAA3S,OAAd,CACSlE,EAAI,CAAb,CAAgBA,CAAhB,CAAoB2vD,CAApB,CAA6B3vD,CAAA,EAA7B,CACI,GAAIwwD,CAAA35C,QAAA,CAAsB7W,CAAtB,CAAA8W,YAAJ,EAA4Cm6C,CAA5C,CAAoD,CAChD,IAAIX,EAAS7mC,EAAA,CAAa+mC,CAAA35C,QAAA,CAAsB7W,CAAtB,CAAAoC,MAAb,CAA6C,EAA7C,CACb,IAAc,CAAd,EAAIkuD,CAAJ,CACI,MAAOC,GAAA,CAAAA,IAAA,CAAiBD,CAAjB,CAAyB,CAAA,CAAzB,CAHqC,CAQ5D,MAAO,CAAA,CAbX,CAqBAD;QAAA,GAAkB,CAAlBA,CAAkB,CAClB,CACI,IAAI9/C,EAAU,CAAAhC,EAAA,UAAd,CACIo4C,EAAc,CAAAp4C,EAAA,SADlB,CAEIq4C,EAAgBr2C,CAAAsG,QAAhB+vC,EAAmCr2C,CAAAsG,QAAA,CAAgBtG,CAAAwG,cAAhB,CACvC,IAAI4vC,CAAJ,EAAmBC,CAAnB,CAAkC,CAC1BC,CAAAA,CAAY,EAEhB,IADIz8C,CACJ,CADaw8C,CAAAp1C,aAAA,CAA2B,YAA3B,CACb,CACI,GAAI,CACAq1C,CAAA,CAAY/9C,IAAA,CAAK,GAAL,CAAWsB,CAAX,CAAoB,GAApB,CADZ,CAEF,MAAOxK,CAAP,CAAU,CAvllBpBqJ,CAAA,CAwllB4B,CAAA3C,KAxllB5B,CAwllBwC,iBAxllBxC,CAwllB4D1G,CAAAsJ,QAxllB5D,CAullBoB,CAIZ9E,CAAAA,CAAQyiD,CAAA,KACE7hD,KAAAA,EAAd,GAAIZ,CAAJ,GAAyBA,CAAzB,CAAiC,EAAjC,CACI0iD,EAAAA,CAAQD,CAAA,KACE7hD,KAAAA,EAAd,GAAI8hD,CAAJ,GAAyB1iD,CAAzB,CAAiC,iBAAjC,CAAgD0iD,CAAhD,CAAwD,0BAAxD,CAAkF1iD,CAAlF,CAA0F,YAA1F,CACAuiD,EAAAI,UAAA,CAAwB3iD,CAdM,CAJtC,CA6BA+P,CAAA+7C,GAAA,CAAAA,QAAU,CAAC18C,CAAD,CACV,CACI,IAAK,IAAI88C,EAAS,CAAlB,CAAqBA,CAArB,CAA8B,IAAAV,EAAA1rD,OAA9B,CAAmDosD,CAAA,EAAnD,CAA6D,CACzD,IAAIjF,EAAQ,IAAAuE,EAAA,CAAaU,CAAb,CACZ,IAAIjF,CAAJ,EAAaA,CAAAz1C,GAAb,CAEI,MADKy1C,EAAA73C,GACE,GADiB63C,CAAA73C,GACjB,CADqCA,CACrC,EAAA,CAAA,CAJ8C,CAO7D,MAAO,CAAA,CARX,CAkBAg+C;QAAA,GAAW,CAAXA,CAAW,CAAClB,CAAD,CAAShG,CAAT,CACX,CACI,IAAIe,EAAQ,CAAAuE,EAAA,CAAaU,CAAb,CAEZ,IAAIjF,CAAAyB,GAAJ,EAA+B,CAAA,CAA/B,GAAkBxC,CAAlB,CAKIyI,EAAA,CAAAA,CAAA,CAAwC1H,CAAAG,GAAxC,CAAyDH,CAAAyB,GAAzD,CAOA,CALAzB,CAAAE,GAKA,CALkB,EAKlB,CAJAF,CAAAG,GAIA,CAJkB,EAIlB,CAHAH,CAAAyB,GAGA,CAHa,IAGb,CAFAzB,CAAAgH,GAEA,CAFe,CAAA,CAEf,CAAK/H,CAAL,GACI,CAAA71C,EAAA,CAAY,QAAZ,EAAuBi9C,CAjzBnB9B,EAAAvE,CAizBqCiF,CAjzBrCjF,CACL17C,GAgzBC,EAhzBc,KAgzBd,EAAmD,WAAnD,CAAgE26C,CAAhE,CAEA,CAAAiG,EAAA,CAAAA,CAAA,CAAiBD,CAAjB,CAHJ,CAfR,CAmDAwC,QAAA,GAAc,CAAdA,CAAc,CAACvH,CAAD,CAAYC,CAAZ,CAAuBsB,CAAvB,CACd,CACI,IAAI9sD,CAEJ,KAAKA,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgB,CAAA8vD,EAAA5rD,OAAhB,CAA0ClE,CAAA,EAA1C,CACI,GAAI,CAAA8vD,EAAA,CAAkB9vD,CAAlB,CAAA,CAAqB,CAArB,CAAJ,EAA+BwrD,CAA/B,CAA0C,CACvBsB,CAAA9kC,QAAA,CAAa,CAAA8nC,EAAA,CAAkB9vD,CAAlB,CAAA,CAAqB,CAArB,CAAb,CAIf,OALsC,CAW9C,CAAA8vD,EAAA,CAAkB9vD,CAAlB,CAAA,CAAuB,CAACurD,CAAD,CAAYC,CAAZ,CAAuB,EAAvB,CAf3B,CAkDAuH,QAAA,GAAiB,CAAjBA,CAAiB,CAAYvH,CAAZ,CAAuBsB,CAAvB,CACjB,CACI,IAAI9sD,CACJ,KAAKA,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgB,CAAA8vD,EAAA5rD,OAAhB,CAA0ClE,CAAA,EAA1C,CACI,GAAI,CAAA8vD,EAAA,CAAkB9vD,CAAlB,CAAA,CAAqB,CAArB,CAAJ,EAA+BwrD,CAA/B,CAA0C,CACtC,CAAAsE,EAAA,CAAkB9vD,CAAlB,CAAA,CAAqB,CAArB,CAAA,CAA0B8sD,CAAA7kC,KAAA,EAI1B,MALsC,CAHlD,CA8BA9T,CAAAi/C,GAAA,CAAAA,QAAU,EACV,EAgCAj/C,EAAAg/C,GAAA,CAAAA,QAAQ,EACR,CACI,MAAQ,EADZ,CAqBAh/C,EAAAo/C,GAAA,CAAAA,QAAS,EACT,CACI,MAAQ,EADZ,CASAtzB,KAAAA,GAAQA,EAARA,CACA8qB,GAAQA,GADR9qB,CAEA+qB,GAAQA,IA2BRh9C;QAjBE0K,EAiBS,CAACxK,CAAD,CACX,CACI,EAAA,KAAA,CAAA,IAAA,CAAM,MAAN,CAAcA,CAAd,CA3ohBQwK,KA2ohBR,CAAyC86C,EAAzC,CAAqDtxC,EAAA3I,GAArD,CAAsEk6C,EAAtE,CAOA,KAAAC,EAAA,CAAe,IAAAC,EAAf,CAA8B,IAAAC,EAA9B,CAA6C,IAAAC,EAA7C,CAA4D,IAAAC,EAA5D,CAA2E,IAAAC,EAA3E,CAA0F,IAAAC,EAA1F,CAAyG,CAR7G,CAlBextC,CAAA+oC,CAAb72C,CAAa62C,CAAAA,EAAAA,CAoCf,EAAA,CAp+rBJ,CAAA0E,UAo+rBI9/C,EAAAw9C,GAAA,CAAAA,QAAc,CAACj7B,CAAD,CACd,CACSA,CAAL,GACIA,CADJ,CACY,CAAEw9B,EAAA36C,GAAF,CAAmB46C,EAAA/6C,GAAnB,CAAmCg7C,EAAAl7C,GAAnC,CAAoD,CAApD,CAAwDm7C,CAAAp5C,GAAxD,CAAyE,CAAzE,CAA4E,CAA5E,CAA+E,CAA/E,CAAkF,CAAlF,CADZ,CAQA,EAAA,CAAAmc,EAAA,CAQIV,CARJ,CACI,KAAAg9B,EADJ,CAAA,CAAA,KAAA,EAAA,MAEI,KAAAC,EAFJ,CAAA,CAAA,KAAA,EAAA,MAGI,KAAAC,EAHJ,CAAA,CAAA,KAAA,EAAA,MAII,KAAAC,EAJJ,CAAA,CAAA,KAAA,EAAA,MAKI,KAAAC,EALJ,CAAA,CAAA,KAAA,EAAA,MAMI,KAAAC,EANJ,CAAA,CAAA,KAAA,EAAA,MAOI,KAAAC,EAPJ,CAAA,CAAA,KAAA,EAAA,MAUA,OAAO,CAAA,CAnBX,CA8BA7/C,EAAA09C,GAAA,CAAAA,QAAc,EACd,CACI,MAAO,CACH,IAAA6B,EADG,CAEH,IAAAC,EAFG,CAGH,IAAAC,EAHG,CAIH,IAAAC,EAJG,CAKH,IAAAC,EALG,CAMH,IAAAC,EANG,CAOH,IAAAC,EAPG,CADX,CAyHA7/C;CAAAg/C,GAAA,CAAAA,QAAQ,CAAC9H,CAAD,CAAQkB,CAAR,CAAmBE,CAAnB,CAA0BE,CAA1B,CAAmC2H,CAAnC,CAA2CrpC,CAA3C,CAAiDU,CAAjD,CAAsD4oC,CAAtD,CAA8D/tD,CAA9D,CACR,CACI,IAAIguD,EAAS,CACT1H,EAAAA,CAAOzB,CAAAyB,GAFf,KAGQM,EAAS,IAERN,EAAL,GACI0H,CACA,CADSC,CAAAv6C,GACT,CAAAo6C,CAAA,CAAS,CAFb,CAMA,KAAA,CAAOA,CAAP,CAAA,CAAe,CACX,GAAI,CAAClH,CAAL,CAAa,CACT,GAAIb,CAAJ,EAAiBO,CAAAnB,GAAjB,CAAkC,CAC9B6I,CAAA,CAASE,CAAAz6C,GACT,MAF8B,CAIlCmzC,CAAA,CAASN,CAAAoB,KAAA,CAAU3B,CAAV,CAAqBE,CAArB,CAA4BE,CAA5B,CAAsC,CAAtC,CACT,IAAI,CAACS,CAAL,CAAa,CACToH,CAAA,CAASG,CAAAp6C,GACT,MAFS,CAIb,IAAAk0C,EAAW,CACP,GAAE9B,CAAN,EAAiBG,CAAAjB,GAAjB,GACIc,CACA,CADU,CACV,CAAI,EAAEF,CAAN,EAAeK,CAAAlB,GAAf,GACIa,CACA,CADQ,CACR,CAAA,EAAEF,CAFN,CAFJ,CAXS,CADF,IAoBPqI,CApBO,CAoBHC,CACR,IAA2C,CAA3C,EAAKD,CAAL,CAAU9H,CAAA0B,KAAA,CAAUpB,CAAV,CAAkBqB,CAAA,EAAlB,CAAV,GAAuF,CAAvF,EAAiDoG,CAAjD,CAAsD/H,CAAA0B,KAAA,CAAUpB,CAAV,CAAkBqB,CAAA,EAAlB,CAAtD,EAA0F,CACtF+F,CAAA,CAASM,CAAA96C,GACT,MAFsF,CAI1F,GAAI,CAACu6C,CAAL,GAEI1pC,EAAA,CAAA,IAAAvb,EAAA,CAAuBm+B,EAAA,CAAA,IAAAp+B,EAAA,CAAmB4b,CAAnB,CAAvB,CADW2pC,CACX,CADiBC,CACjB,EADuB,CACvB,CASI,CAAAvgC,EAAA,CAAA,IAAAhlB,EAAA,CAXR,EAW+B,CACvBklD,CAAA,CAASO,CAAA16C,GACT,MAFuB,CAK3Bo0C,CAAJ,EAAgB3B,CAAAhB,GAAhB,GAA+BsB,CAA/B,CAAwC,IAAxC,CACAniC,EAAA,EAAQU,CACR2oC,EAAA,EA3CW,CA6Cf,MAAO9tD,EAAA,CAAMA,CAAA,CAAKguD,CAAL,CAAajI,CAAb,CAAwBE,CAAxB,CAA+BE,CAA/B,CAAwC2H,CAAxC,CAAgDrpC,CAAhD,CAAN,CAA8DupC,CAxDzE,CA0EArgD;CAAAo/C,GAAA,CAAAA,QAAS,CAAClI,CAAD,CAAQkB,CAAR,CAAmBE,CAAnB,CAA0BE,CAA1B,CAAmC2H,CAAnC,CAA2CrpC,CAA3C,CAAiDU,CAAjD,CAAsD4oC,CAAtD,CAA8D/tD,CAA9D,CACT,CACI,IAAIguD,EAAS,CACT1H,EAAAA,CAAOzB,CAAAyB,GAFf,KAGQM,EAAS,IAERN,EAAL,GACI0H,CACA,CADSC,CAAAv6C,GACT,CAAAo6C,CAAA,CAAS,CAFb,CAKA,KAAA,CAAOA,CAAP,CAAA,CAAe,CACX,IAAI3rD,EAAOwiB,EAAA,CAAA,IAAA7b,EAAA,CAAuBm+B,EAAA,CAAA,IAAAp+B,EAAA,CAAmB4b,CAAnB,CAAvB,CACX,IAAIqJ,EAAA,CAAA,IAAAhlB,EAAA,CAAJ,CAA2B,CACvBklD,CAAA,CAASO,CAAA16C,GACT,MAFuB,CAI3B,GAAI,CAAC+yC,CAAL,CAAa,CACT,GAAIb,CAAJ,EAAiBO,CAAAnB,GAAjB,CAAkC,CAC9B6I,CAAA,CAASE,CAAAz6C,GACT,MAF8B,CAIlCmzC,CAAA,CAASN,CAAAoB,KAAA,CAAU3B,CAAV,CAAqBE,CAArB,CAA4BE,CAA5B,CAAsC,CAAtC,CAAyC,CAAA,CAAzC,CACT,IAAI,CAACS,CAAL,CAAa,CACToH,CAAA,CAASG,CAAAp6C,GACT,MAFS,CAIb,IAAAk0C,EAAW,CACP,GAAE9B,CAAN,EAAiBG,CAAAjB,GAAjB,GACIc,CACA,CADU,CACV,CAAI,EAAEF,CAAN,EAAeK,CAAAlB,GAAf,GACIa,CACA,CADQ,CACR,CAAA,EAAEF,CAFN,CAFJ,CAXS,CAmBb,GAAIgI,CAAJ,CAAY,CAAA,IACJK,CADI,CACAC,CACR,IAA2C,CAA3C,EAAKD,CAAL,CAAU9H,CAAA0B,KAAA,CAAUpB,CAAV,CAAkBqB,CAAA,EAAlB,CAAV,GAAuF,CAAvF,EAAiDoG,CAAjD,CAAsD/H,CAAA0B,KAAA,CAAUpB,CAAV,CAAkBqB,CAAA,EAAlB,CAAtD,EAA0F,CACtF+F,CAAA,CAASM,CAAA96C,GACT,MAFsF,CAc1F,GAAIrR,CAAJ,GAAaisD,CAAb,CAAmBC,CAAnB,EAAyB,CAAzB,EAA8B,CAC1BL,CAAA,CAASQ,CAAAp7C,GACT,MAF0B,CAhBtB,CAAZ,IAqBI,IAAI,CAACkzC,CAAA4B,MAAA,CAAWtB,CAAX,CAAmBqB,CAAA,EAAnB,CAA+B9lD,CAA/B,CAAsC,GAAtC,CAAL,EAAoD,CAACmkD,CAAA4B,MAAA,CAAWtB,CAAX,CAAmBqB,CAAA,EAAnB,CAA+B9lD,CAA/B,EAAuC,CAAvC,CAArD,CAAgG,CAC5F6rD,CAAA,CAASM,CAAA96C,GACT,MAF4F,CAKhGy0C,CAAJ,EAAgB3B,CAAAhB,GAAhB,GAA+BsB,CAA/B,CAAwC,IAAxC,CACAniC,EAAA,EAAQU,CACR2oC,EAAA,EArDW,CAuDf,MAAO9tD,EAAA,CAAMA,CAAA,CAAKguD,CAAL,CAAajI,CAAb,CAAwBE,CAAxB,CAA+BE,CAA/B,CAAwC2H,CAAxC,CAAgDrpC,CAAhD,CAAN,CAA8DupC,CAjEzE,CAgFArgD;CAAA8gD,GAAA,CAAAC,QAAa,CAACV,CAAD,CAASjI,CAAT,CAAoBE,CAApB,CAA2BE,CAA3B,CAAoC2H,CAApC,CAA4CrpC,CAA5C,CACb,CACI,IAAA6oC,EAAA,CAAe7oC,CAAf,CAAsB,KACtB,KAAA2oC,EAAA,CAAgB,IAAAA,EAAhB,CAA+B,CAACuB,CAAAp6C,GAAhC,CAAmDkQ,CAAnD,EAA4D,EAA5D,CAAiEmqC,CAAA17C,GAAAqB,GAAjE,CAAyFo6C,CAAAp6C,GACzF,KAAA84C,EAAA,CAAgB,KAAhB,CAA0BS,CAA1B,CAAoC,KACpC,KAAAP,EAAA,CAAgB,IAAAA,EAAhB,CAA+B,CAACsB,EAAA15C,GAAhC,CAAiDgxC,CAAjD,CAA2D0I,EAAA15C,GAC3D,KAAAg4C,EAAA,EAAgBa,CAChBc,GAAA,CAAAA,IAAA,CACA,OAAO,CAAA,CAPX,CAeAA,SAAA,GAAY,CAAZA,CAAY,CACZ,CAaI,CAAA1B,EAAA,EAAgB,CAAC2B,CAAAh6C,GACb,EAAAo4C,EAAJ,GACI,CAAAA,EAGA,EAHgB6B,CAAA96C,GAGhB,CAFA,CAAAk5C,EAEA,EAFgB2B,CAAAh6C,GAEhB,CADI,CAAAo4C,EACJ,CADmB8B,CAAA96C,GACnB,GADiC,CAAAi5C,EACjC,EADiD8B,CAAA/6C,GACjD,EAAI1E,CAAA,CAAAA,CAAA,CAAJ,EAA2BE,CAAA,CAAAA,CAAA,CAAkB,CAAA7P,KAAlB,CAA8B,WAA9B,CAA4CkjB,CAAA,CAAU,CAAAmqC,EAAV,CAA5C,CAJ/B,CAdJ,CA6BAx/C,CAAAwhD,GAAA,CAAAA,QAAQ,EACR,CACI,MAAO,KAAAjC,EADX,CAWAv/C,EAAAyhD,GAAA,CAAAA,QAAS,EACT,EAaAzhD,EAAA0hD,GAAA,CAAAA,QAAQ,EACR,CACI,MAAO,KAAAlC,EADX,CAWAx/C,EAAA2hD,GAAA,CAAAA,QAAS,EACT,EAaA3hD,EAAA4hD,GAAA,CAAAA,QAAQ,EACR,CACI,MAAO,KAAAnC,EAAP,CAAsBoC,CAAAx6C,GAD1B,CAWArH;CAAA8hD,GAAA,CAAAA,QAAS,CAACttD,CAAD,CACT,CACI,IAAAirD,EAAA,CAAgB,IAAAA,EAAhB,CAA+B,CAACsC,CAAAz6C,GAAhC,CAAoD9S,CAApD,CAA2DutD,CAAAz6C,GAE3D,IAAI,IAAAm4C,EAAJ,CAAmBuC,CAAAt7C,GAAnB,CAAA,CApXIk1B,CAAAA,CAAa,CAAA,CADrB,KAEqBqmB,CAFrB,CAE2BxpD,EAAQ,EAFnC,CAGQ0jD,GAkX6B+F,IAlXnBtC,EAAVzD,CAAyBgG,EAAAx6C,GAAzBw0C,GAA0CiG,EAAA78C,GAAAoC,GAHlD,CAIQuvC,EAiX6BgL,IAjXrBzG,EAAA,CAAaU,CAAb,CAiXqB+F,KA9WjCzC,EAAA,EAAgB,EAAES,CAAAp5C,GAAF,CAAmBu7C,CAAAl7C,GAAnB,CA8WiB+6C,KA7WjC1C,EAAA,EAAgB,CAAE8C,CAAA38C,GAElB,QAAOs8C,CAAP,CA2WiCC,IA3WnBzC,EAAd,CAA6B8C,CAAA57C,GAA7B,EAEA,KAAK67C,EAAA56C,GAAL,CACQ9F,CAAA,CAwWyBogD,IAxWzB,CAAJ,EAA2BlgD,CAAA,CAwWEkgD,IAxWF,CAwWEA,IAxWgB/vD,KAAlB,CAA8B,WAA9B,CAA4CgqD,CAA5C,CAAqD,GAArD,CAA0D,CAAA,CAA1D,CAwWE+F,KAvW7B1C,EAAA,CAuW6B0C,IAvWdtC,EAAf,CAA8B,CAuWDsC,KAtW7BzC,EAAA,CAAeS,CAAAp5C,GACf,MAEJ,MAAK27C,EAAAx6C,GAAL,CACIxP,CAAA,CAAQ,MAGZ,MAAKiqD,EAAA56C,GAAL,CACSrP,CAAL,GAAYA,CAAZ,CAAoB,MAApB,CACA,KAAAkqD,EA6V6BT,IA7VflD,GAGlB,MAAK4D,EAAA76C,GAAL,CACStP,CAAL,GAAYA,CAAZ,CAAoB,MAApB,CAGJ,MAAKoqD,EAAAh7C,GAAL,CACSpP,CAAL,GAAYA,CAAZ,CAAoB,OAApB,CACKkqD,EAAL,GAAkBA,CAAlB,CAoV6BT,IApVG9C,GAAhC,CAEA,KAAAhH,GAkV6B8J,IAlVhBtC,EAAbxH,CAA4B0K,EAAAp7C,GAA5B0wC,GAA6C2K,EAAAx9C,GAAAmC,GAC7C,KAAA4wC,GAiV6B4J,IAjVpBtC,EAATtH,CAAwB0K,EAAAv7C,GAAxB6wC,GAAyC2K,EAAA19C,GAAAkC,GACzC,KAAA+wC,EAgV6B0J,IAhVnBtC,EAAVpH,CAAyB0I,EAAA15C,GACzB,KAAA24C,EAAU,KAAVA,CA+U6B+B,IA/UTxC,EAApBS,CAAoC,KACpC,KAAArpC;CA8U6BorC,IA9UnBzC,EAAV3oC,CAAyBkqC,CAAAp6C,GAAzBkQ,GAA6C,EAA7CA,CAAkDmqC,CAAA17C,GAAAqB,GAAlDkQ,CA8U6BorC,IA9U6CvC,EAC1E,KAAAnoC,EA6U6B0qC,IA7UtBzC,EAAD,CAAgByD,CAAAh8C,GAAhB,CAAgC,CAAhC,CAAoC,CAEtCpF,EAAA,CA2UyBogD,IA3UzB,CAAJ,EAA2BlgD,CAAA,CA2UEkgD,IA3UF,CA2UEA,IA3UgB/vD,KAAlB,CAA8B,IAA9B,CAAqCsG,CAArC,CAA6C,GAA7C,CAAmD2/C,CAAnD,CAA+D,GAA/D,CAAqEE,CAArE,CAA6E,GAA7E,CAAmFE,CAAnF,CAA6F,IAA7F,CAAoGnjC,CAAA,CAAUyB,CAAV,CAApG,CAAsH,IAAtH,CAA6HzB,CAAA,CAAUyB,CAAV,EAAkBqpC,CAAlB,EAA4B,CAA5B,EAA7H,CAA8J,CAAA,CAA9J,CAAoK,CAAA,CAApK,CAE3B,IAAI/H,CAAJ,EAAiBlB,CAAAM,GAAjB,CAAmC,CAyUN0K,IAxUzB1C,EAAA,EAAgBe,CAAAz6C,GAChB,MAF+B,CAInC,GAAI0yC,CAAJ,EAAetB,CAAAQ,GAAf,CAA+B,CAqUFwK,IApUzB1C,EAAA,EAAgBmB,CAAA96C,GAChB,MAF2B,CAK/B+1B,CAAA,CAAa+mB,CAAA7iD,KAAA,CAgUgBoiD,IAhUhB,CAAuBhL,CAAvB,CAA8BkB,CAA9B,CAAyCE,CAAzC,CAAgDE,CAAhD,CAAyD2H,CAAzD,CAAiErpC,CAAjE,CAAuEU,CAAvE,CAA6EyqC,CAA7E,EAAqFW,EAAA76C,GAArF,CAgUgBm6C,IAhUsFnB,GAAA19C,KAAA,CAgUtF6+C,IAhUsF,CAAtG,CACb,MAEJ,MAAKiB,EAAAn7C,GAAL,CACIowC,CAAA,EA4T6B8J,IA5ThBtC,EAAb,CAA4BkD,EAAAp7C,GAA5B,GAA6Cq7C,EAAAx9C,GAAAmC,GACzC5F,EAAA,CA2TyBogD,IA3TzB,CAAJ,EAA2BlgD,CAAA,CA2TEkgD,IA3TF,CA2TEA,IA3TgB/vD,KAAlB,CAA8B,SAA9B,CAA0CimD,CAA1C,CAAsD,GAAtD,CAA2D,CAAA,CAA3D,CACvBA,EAAJ,CAAgBlB,CAAAM,GAAhB,CA0T6B0K,IAzTzBzC,EADJ,EACoB4C,CAAAl7C,GADpB,CA0T6B+6C,IAvTzB1C,EAHJ,EAGoBe,CAAAz6C,GAEpB,MAEJ,MAAKs9C,EAAAl7C,GAAL,CACQpG,CAAA,CAkTyBogD,IAlTzB,CAAJ,EAA2BlgD,CAAA,CAkTEkgD,IAlTF,CAkTEA,IAlTgB/vD,KAAlB,CAA8B,WAA9B,CAA4CgqD,CAA5C,CAAqD,GAArD,CAkTE+F,KAjT7B1C,EAAA,CAiT6B0C,IAjTdtC,EAAf,CAA8B,CAiTDsC,KAhT7BzC,EAAA,CAAeS,CAAAp5C,GAAf,CAAgCu7C,CAAAl7C,GAChC,MAEJ,SACQrF,CAAA,CA4SyBogD,IA5SzB,CAAJ,EAA2BlgD,CAAA,CA4SEkgD,IA5SF;AA4SEA,IA5SgB/vD,KAAlB,CAA8B,gBAA9B,CAAiD8vD,CAAjD,CAAwD,GAAxD,CA/D/B,CA2WiCC,IAxSjC3C,EAAA,CAAerI,CAAApkD,OAAf,EAA+BokD,CAAAyB,GAAA,CAAY0K,EAAAr+C,GAAZ,CAA6B,CAA5D,EAAkEm3C,CAAlE,EAA4EmH,EAAA/9C,GAAAD,GAA5E,CAwSiC48C,IAxSkEtC,EAAnG,CAAkH2D,EAAA3+C,GAElHu8C,GAAA,CAsSiCe,IAtSjC,CAEItmB,EAAJ,GAoSiCsmB,IAnS7BzC,EAEA,EAFgB,CAACuC,CAAAt7C,GAEjB,CAiS6Bw7C,IAlS7BzC,EACA,EADgBS,CAAAp5C,GAChB,CAiS6Bo7C,IAjSzBzC,EAAJ,CAAmB+D,CAAA38C,GAAnB,EAAiC4a,EAAA,CAiSJygC,IAjSIhnD,EAAA,CAiSJgnD,IAjSoBxgC,GAAhB,CAHrC,CAoSA,CAHJ,CAaA1hB,EAAAyjD,GAAA,CAAAA,QAAQ,EACR,CACI,MAAO,KAAA/D,EADX,CAWA1/C,EAAA0jD,GAAA,CAAAA,QAAS,CAAClvD,CAAD,CACT,CACI,IAAAkrD,EAAA,CAAelrD,CADnB,CAWAwL,EAAA2jD,GAAA,CAAAA,QAAQ,EACR,CACI,MAAO,KAAAhE,EADX,CAWA3/C,EAAA4jD,GAAA,CAAAA,QAAS,CAACpvD,CAAD,CACT,CACI,IAAAmrD,EAAA,CAAenrD,CADnB,CAWAwL,EAAA6jD,GAAA,CAAAA,QAAQ,EACR,CACI,MAAO,KAAAjE,EADX,CAWA5/C,EAAA8jD,GAAA,CAAAA,QAAS,CAACtvD,CAAD,CACT,CACI,IAAAorD,EAAA,CAAeprD,CADnB,CAWAwL,EAAA+jD,GAAA,CAAAA,QAAQ,EACR,CACI,MAAO,KAAAlE,EADX,CAWA7/C,EAAAgkD,GAAA,CAAAA,QAAS,CAACxvD,CAAD,CACT,CACI,IAAAqrD,EAAA,CAAerrD,CADnB,CAQJ;IAAAyvD,GAAgBC,EAAAv/C,GAAhB,CACAw/C,EAAgBC,EAAA5+C,GADhB,CAEA6+C,EAAgBC,EAAA79C,GAFhB,CAGA89C,GAAgBC,EAAAj9C,GAHhB,CAIAk9C,GAAgBC,EAAA/9C,GAJhB,CASA,GAAsB,EATtB,CASA24C,IAAsB,EAAA,CAzqjBF/nC,KAyqjBE,CAAA,CACuB,CAAC,IAAD,CAAO,IAAP,CAAahT,CAAAjU,UAAAkxD,GAAb,CAAuCj9C,CAAAjU,UAAAmxD,GAAvC,CAAmE,MAAnE,CADvB,CAAA,EAAA,CAxqjBFlqC,KAwqjBE,CAAA,CAEuB,CAAC,IAAD,CAAO,IAAP,CAAahT,CAAAjU,UAAAoxD,GAAb,CAAuCn9C,CAAAjU,UAAAqxD,GAAvC,CAAmE,MAAnE,CAFvB,CAAA,EAAA,CAvqjBFpqC,KAuqjBE,CAAA,CAGuB,CAAC,IAAD,CAAO,IAAP,CAAahT,CAAAjU,UAAAsxD,GAAb,CAAuCr9C,CAAAjU,UAAAwxD,GAAvC,CAAmE,MAAnE,CAHvB,CAAA,EAAA,CAtqjBFvqC,KAsqjBE,CAAA,CAIuB,CAAC,IAAD,CAAO,IAAP,CAAahT,CAAAjU,UAAAmzD,GAAb,CAAuCl/C,CAAAjU,UAAAozD,GAAvC,CAAmE,MAAnE,CAJvB,CAAA,EAAA,CArqjBFnsC,KAqqjBE,CAAA,CAKuB,CAAC,IAAD,CAAO,IAAP,CAAahT,CAAAjU,UAAAqzD,GAAb,CAAuCp/C,CAAAjU,UAAAszD,GAAvC,CAAmE,MAAnE,CALvB,CAAA,EAAA,CApqjBFrsC,KAoqjBE,CAAA,CAMuB,CAAC,IAAD,CAAO,IAAP,CAAahT,CAAAjU,UAAAuzD,GAAb,CAAuCt/C,CAAAjU,UAAAwzD,GAAvC,CAAmE,MAAnE,CANvB,CAAA,EAAA,CAlqjBFvsC,KAkqjBE,CAAA,CAOuB,CAAC,IAAD,CAAO,IAAP,CAAahT,CAAAjU,UAAAyzD,GAAb,CAAuCx/C,CAAAjU,UAAA0zD,GAAvC,CAAmE,MAAnE,CAPvB,CAAA,EAAtB1E,CAoCIzlD;QAnBEuO,GAmBS,CAACrO,CAAD,CACX,CACI,EAAA,KAAA,CAAA,IAAA,CAAM,MAAN,CAAcA,CAAd,CAxtiBQqO,MAwtiBR,CAAyCu8C,EAAzC,CAAqDx2C,EAAAC,GAArD,CAAuEw2C,EAAvE,CAKA,KAAAC,EAAA,CAAe,IAAAC,EAAf,CAA8B,IAAAC,EAA9B,CAA6C,IAAAC,EAA7C,CAA4D,IAAAC,EAA5D,CAA2E,IAAAC,EAA3E,CAA0F,CAN9F,CApBe7yC,CAAA+oC,CAAbhzC,EAAagzC,CAAAA,EAAAA,CAoCf,EAAA,CAhjtBJ,EAAA+J,UAgjtBInlD,EAAAw9C,GAAA,CAAAA,QAAc,CAACj7B,CAAD,CACd,CACSA,CAAL,GACIA,CADJ,CACY,CAAE6iC,CAAApgD,GAAF,CAAmBqgD,CAAAv+C,GAAnB,CAAoC,CAApC,CAAuC,CAAvC,CAA0C,CAA1C,CAA6C,CAA7C,CAAgD,CAAhD,CADZ,CAQA,EAAA,CAAAmc,EAAA,CAOIV,CAPJ,CACI,KAAAsiC,EADJ,CAAA,CAAA,KAAA,EAAA,MAEI,KAAAC,EAFJ,CAAA,CAAA,KAAA,EAAA,MAGI,KAAAC,EAHJ,CAAA,CAAA,KAAA,EAAA,MAII,KAAAC,EAJJ,CAAA,CAAA,KAAA,EAAA,MAKI,KAAAC,EALJ,CAAA,CAAA,KAAA,EAAA,MAMI,KAAAC,EANJ,CAAA,CAAA,KAAA,EAAA,MASA,OAAO,CAAA,CAlBX,CA6BAllD,EAAA09C,GAAA,CAAAA,QAAc,EACd,CACI,MAAO,CACH,IAAAmH,EADG,CAEH,IAAAC,EAFG,CAGH,IAAAC,EAHG,CAIH,IAAAC,EAJG,CAKH,IAAAC,EALG,CAMH,IAAAC,EANG,CADX,CAuHAllD;CAAAg/C,GAAA,CAAAA,QAAQ,CAAC9H,CAAD,CAAQkB,CAAR,CAAmBE,CAAnB,CAA0BE,CAA1B,CAAmC2H,CAAnC,CAA2CrpC,CAA3C,CAAiDU,CAAjD,CAAsD4oC,CAAtD,CAA8D/tD,CAA9D,CACR,CACQguD,CAAAA,CAAS,CAET1H,EAAAA,CAAOzB,CAAAyB,GACPM,EAAAA,CAAS,IAERN,EAAL,GACI0H,CACA,CADSiF,EAAAp6C,GACT,CAAAi1C,CAAA,CAAS,CAFb,CAMA,KAAA,CAAOA,CAAP,CAAA,CAAe,CACX,GAAI,CAAClH,CAAL,CAAa,CACTA,CAAA,CAASN,CAAAoB,KAAA,CAAU3B,CAAV,CAAqBE,CAArB,CAA4BE,CAA5B,CAAsC,CAAtC,CACT,IAAI,CAACS,CAAL,CAAa,CACToH,CAAA,CAASiF,EAAAp6C,GACT,MAFS,CAIb,IAAAovC,EAAW,CANF,CADF,IASPmG,CATO,CASHC,CACR,IAA2C,CAA3C,EAAKD,CAAL,CAAU9H,CAAA0B,KAAA,CAAUpB,CAAV,CAAkBqB,CAAA,EAAlB,CAAV,GAAuF,CAAvF,EAAiDoG,CAAjD,CAAsD/H,CAAA0B,KAAA,CAAUpB,CAAV,CAAkBqB,CAAA,EAAlB,CAAtD,EAA0F,CACtF+F,CAAA,CAASiF,EAAAp6C,GACT,MAFsF,CAS1FwL,EAAA,CAAA,IAAAvb,EAAA,CAAuBm+B,EAAA,CAAA,IAAAp+B,EAAA,CAAmB4b,CAAnB,CAAvB,CAAwD2pC,CAAxD,CAA8DC,CAA9D,EAAoE,CAApE,CASA,IAAIvgC,EAAA,CAAA,IAAAhlB,EAAA,CAAJ,CAA2B,CACvBklD,CAAA,CAASkF,EAAAr/C,GACT,MAFuB,CAI3B4Q,CAAA,EAAQ,CACRqpC,EAAA,EAEA,IAAI7F,CAAJ,EAAgB3B,CAAAhB,GAAhB,GACIsB,CACI,CADK,IACL,CAAA,EAAET,CAAF,EAAaG,CAAAjB,GAAb,GACAc,CACI,CADM,CACN,CAAA,EAAEF,CAAF,EAAWK,CAAAlB,GAAX,GACAa,CACI,CADI,CACJ,CAAA,EAAEF,CAAF,EAAeO,CAAAnB,GAFnB,CAFJ,CAFR,EAMgD,CAChC6I,CAAA,CAASiF,EAAAp6C,GACT,MAFgC,CAzCrC,CAsDf,MAAO7Y,EAAA,CAAMA,CAAA,CAAKguD,CAAL,CAAajI,CAAb,CAAwBE,CAAxB,CAA+BE,CAA/B,CAAwC2H,CAAxC,CAAgDrpC,CAAhD,CAAN,CAA8DupC,CAlEzE,CAoFArgD;CAAAo/C,GAAA,CAAAA,QAAS,CAAClI,CAAD,CAAQkB,CAAR,CAAmBE,CAAnB,CAA0BE,CAA1B,CAAmC2H,CAAnC,CAA2CrpC,CAA3C,CAAiDU,CAAjD,CAAsD4oC,CAAtD,CAA8D/tD,CAA9D,CACT,CACQguD,CAAAA,CAAS,CAET1H,EAAAA,CAAOzB,CAAAyB,GACPM,EAAAA,CAAS,IAERN,EAAL,GACI0H,CACA,CADSiF,EAAAp6C,GACT,CAAAi1C,CAAA,CAAS,CAFb,CAMA,KAAA,CAAOA,CAAP,CAAA,CAAe,CAMX,IAAI3rD,EAAOwiB,EAAA,CAAA,IAAA7b,EAAA,CAAuBm+B,EAAA,CAAA,IAAAp+B,EAAA,CAAmB4b,CAAnB,CAAvB,CACX,IAAIqJ,EAAA,CAAA,IAAAhlB,EAAA,CAAJ,CAA2B,CACvBklD,CAAA,CAASkF,EAAAr/C,GACT,MAFuB,CAY3B4Q,CAAA,EAAQ,CACRqpC,EAAA,EAEA,IAAI,CAAClH,CAAL,CAAa,CACTA,CAAA,CAASN,CAAAoB,KAAA,CAAU3B,CAAV,CAAqBE,CAArB,CAA4BE,CAA5B,CAAsC,CAAtC,CAAyC,CAAA,CAAzC,CACT,IAAI,CAACS,CAAL,CAAa,CACToH,CAAA,CAASiF,EAAAp6C,GACT,MAFS,CAIb,IAAAovC,EAAW,CANF,CAQb,GAAI,CAAC3B,CAAA4B,MAAA,CAAWtB,CAAX,CAAmBqB,CAAA,EAAnB,CAA+B9lD,CAA/B,CAAsC,GAAtC,CAAL,EAAoD,CAACmkD,CAAA4B,MAAA,CAAWtB,CAAX,CAAmBqB,CAAA,EAAnB,CAA+B9lD,CAA/B,EAAuC,CAAvC,CAArD,CAAgG,CAC5F6rD,CAAA,CAASiF,EAAAp6C,GACT,MAF4F,CAIhG,GAAIovC,CAAJ,EAAgB3B,CAAAhB,GAAhB,GACIsB,CACI,CADK,IACL,CAAA,EAAET,CAAF,EAAaG,CAAAjB,GAAb,GACAc,CACI,CADM,CACN,CAAA,EAAEF,CAAF,EAAWK,CAAAlB,GAAX,GACAa,CACI,CADI,CACJ,CAAA,EAAEF,CAAF,EAAeO,CAAAnB,GAFnB,CAFJ,CAFR,EAMgD,CAChC6I,CAAA,CAASiF,EAAAp6C,GACT,MAFgC,CAxCrC,CAqDf,MAAO7Y,EAAA,CAAMA,CAAA,CAAKguD,CAAL,CAAajI,CAAb,CAAwBE,CAAxB,CAA+BE,CAA/B,CAAwC2H,CAAxC,CAAgDrpC,CAAhD,CAAN,CAA8DupC,CAjEzE,CAgFArgD;CAAAwlD,GAAA,CAAAzE,QAAa,CAACV,CAAD,CAASjI,CAAT,CAAoBE,CAApB,CAA2BE,CAA3B,CAAoC2H,CAApC,CAA4CrpC,CAA5C,CACb,CACI,IAAAguC,EAAA,CAAehuC,CAAf,CAAsB,KACtB,KAAA+tC,EAAA,CAAgB,IAAAA,EAAhB,CAA+B,CAACY,CAAAl9C,GAAhC,CAAmDuO,CAAnD,EAA4D,EAA5D,CAAiE4uC,CAAAngD,GAAAgD,GAAjE,CAAyFk9C,CAAAl9C,GACzF,KAAA28C,EAAA,CAAgBpuC,CAAhB,EAAwB,EAAxB,CAA8B6uC,EAAA76C,GAE9B,KAAAk6C,EAAA,CADA,IAAAD,EACA,CADgB3M,CAChB,EAD6BwN,EAAArgD,GAAA6D,GAC7B,EADuDkvC,CAAA,CAAOuN,EAAA18C,GAAP,CAAyB,CAChF,EADsFqvC,CACtF,CADgGsN,EAAA58C,GAEhG,KAAA+7C,EAAA,CAAgB,KAAhB,CAA0B9E,CAA1B,CAAoC,KAChCE,EAAJ,GACI,IAAAwE,EADJ,CACI,IAAAA,EADJ,CACoBxE,CADpB,CAC6B0F,CAAA3+C,GAD7B,CAGA,OAAO,CAAA,CAVX,CAoBApH,EAAAgmD,GAAA,CAAAA,QAAQ,EACR,CACI,MAAO,KAAAnB,EAAP,CAAsBoB,CAAA5+C,GAD1B,CAWArH;CAAAkmD,GAAA,CAAAA,QAAS,CAAC1xD,CAAD,CACT,CACI,IAAAqwD,EAAA,CAAgB,IAAAA,EAAhB,CAA+B,CAACsB,CAAA7+C,GAAhC,CAAoD9S,CAApD,CAA2D2xD,CAAA7+C,GAC3D,KAAA49C,EAAA,CAAgB,IAAAA,EAAhB,CAA+B,EAA/B,EAAyC1wD,CAAzC,CAAgDixD,CAAAl9C,GAAhD,GAAkEm9C,CAAAngD,GAAAgD,GAClE,IAAM,EAAA,IAAAs8C,EAAA,CAAeQ,CAAAv+C,GAAf,CAAN,CAAA,CAhTI80B,CAAAA,CAAa,CAAA,CADrB,KAEqBnjC,EAAQ,EAF7B,CAIQy+C,EA6SkCgL,IA7S1BzG,EAAA,EA6S0ByG,IA9SxB2C,EACF,CADiBuB,CAAAz+C,GACjB,GADkC0+C,CAAA9gD,GAAAoC,GAClC,CAJhB,CAKQgxC,EAAOzB,CAAAyB,GA4S2BuJ,KAlStC2C,EAAA,EAAgB,CAACO,CAAApgD,GAEjB,QAgSsCk9C,IAhS/B2C,EAAP,CAAsByB,CAAA3/C,GAAtB,EAOA,KAAK4/C,EAAAl7C,GAAL,CAyRsC62C,IAxR9B+C,EAAJ,CAAmBuB,EAAAx8C,GAAnB,GAwRkCk4C,IAvR9B2C,EADJ,EACqBO,CAAApgD,GADrB,CACsCshD,CAAA3/C,GADtC,CACuD8+C,CAAAl9C,GADvD,CAwRkC25C,KAhRlC+C,EAAA,CAAe/N,CAAApkD,OAAf,CAgRkCovD,IAhRH8C,EAA/B,CAA8Ca,EAAA18C,GAA9C,EAAkEwvC,CAAA,EAA2B,GAA3B,EAAQA,CAAAnB,GAAR,CAAgCiP,EAAAr8C,GAAhC,CAAkD,CAApH,CACA,MAEJ,MAAKs8C,EAAA1+C,GAAL,CACI,IA4QkCk6C,IA5Q7B6C,EAAL,CAAoB4B,EAAAt9C,GAApB,GAAyCu9C,EAAA99C,GAAzC,CAA6D,CACrD+9C,IAAAA,EA2Q0B3E,IA3QjB6C,EAAT8B,CAAwBC,EAAA19C,GACxB29C,EAAAA,EA0Q0B7E,IA1QjB6C,EAATgC,CAAwBC,EAAAh+C,GAAxB+9C,GAA8C,CA0QpB7E,KAxQ1B8C,EAAA,CAwQ0B9C,IAzQ1B6C,EAAJ,CAAmBkC,EAAAl+C,GAAnB,CAyQ8Bm5C,IAxQ1B8C,EADJ,CACoB6B,CADpB,CAyQ8B3E,IAtQ1B8C,EAHJ,CAGoB6B,CAsQU3E,KApQ9B6C,EAAA,CAoQ8B7C,IApQf8C,EAAf,CAoQ8B9C,IApQC8C,EAA/B,CAA8C8B,EAAA19C,GAA9C,CAAiE29C,CARR,CAU7D,KAEJ,MAAKG,EAAA57C,GAAL,CAgQsC42C,IA/PlC+C,EAAA,CA+PkC/C,IA/PnB8C,EACf,MAEJ,MAAKmC,EAAA37C,GAAL,CACI/S,CACA,CADQ,MACR,CAAAkqD,CAAA,CA0PkCT,IA1PpBlD,GAGlB;KAAKoI,EAAA77C,GAAL,CACS9S,CAAL,GAAYA,CAAZ,CAAoB,OAApB,CACKkqD,EAAL,GAAkBA,CAAlB,CAqPkCT,IArPF9C,GAAhC,CAEA,KAAAhH,EAmPkC8J,IAnPtB6C,EAAZ3M,EAA4BwN,EAAArgD,GAAA6D,GAC5B,KAAAkvC,EAkPkC4J,IAlPzB6C,EAAD,CAAgBc,EAAA18C,GAAhB,CAAkC,CAAlC,CAAsC,CAC9C,KAAAqvC,EAiPkC0J,IAjPxB6C,EAAVvM,CAAyBsN,EAAA58C,GACrB,EAACyvC,CAAL,EAAaP,CAAb,EAA0BO,CAAAnB,GAA1B,EAA6CgB,CAA7C,EAAwDG,CAAAjB,GAAxD,CAgPkCwK,IA/O9B2C,EADJ,CAgPkC3C,IA/O9B2C,EADJ,CACoBS,EAAAp6C,GADpB,CACoC66C,CAAA3+C,GADpC,EAIA+4C,CAKA,CALU,KAKV,CAuOkC+B,IA5Od+C,EAKpB,CALoC,KAKpC,CAJAnuC,CAIA,EAuOkCorC,IA3OxBgD,EAIV,CAJyBS,EAAA76C,GAIzB,GAJ6C,EAI7C,CAuOkCo3C,IA3OiB4C,EAInD,CAFIhjD,CAAA,CAyO8BogD,IAzO9B,CAEJ,EAF2BlgD,CAAA,CAyOOkgD,IAzOP,CAyOOA,IAzOW/vD,KAAlB,CAA8B,IAA9B,CAAqCsG,CAArC,CAA6C,GAA7C,CAAmD2/C,CAAnD,CAA+D,GAA/D,CAAqEE,CAArE,CAA6E,GAA7E,CAAmFE,CAAnF,CAA6F,IAA7F,CAAoGnjC,CAAA,CAAUyB,CAAV,CAApG,CAAsH,IAAtH,CAA6HzB,CAAA,CAAUyB,CAAV,EAAkBqpC,CAAlB,EAA4B,CAA5B,EAA7H,CAA8J,CAAA,CAA9J,CAAoK,CAAA,CAApK,CAE3B,CAAAvkB,CAAA,CAAa+mB,CAAA7iD,KAAA,CAuOqBoiD,IAvOrB,CAAuBhL,CAAvB,CAA8BkB,CAA9B,CAAyCE,CAAzC,CAAgDE,CAAhD,CAAyD2H,CAAzD,CAAiErpC,CAAjE,CAAuE,CAAvE,CAA0E,CAAA,CAA1E,CAuOqBorC,IAvO4DnB,GAAA19C,KAAA,CAuO5D6+C,IAvO4D,CAAjF,CATb,CAhDJ,CAgEItmB,CAAJ,GAgOsCsmB,IA/NlC2C,EACA,CA8NkC3C,IA/NlC2C,EACA,CADgBO,CAAApgD,GAChB,CADiCqgD,CAAAv+C,GACjC,CA8NkCo7C,IA9N9B2C,EAAJ,CAAmBwC,CAAAxgD,GAAnB,EAAiC4a,EAAA,CA8NCygC,IA9NDhnD,EAAA,CA8NCgnD,IA9NexgC,GAAhB,CAFrC,CAgOA,CAHJ,CAaA1hB,EAAAsnD,GAAA,CAAAA,QAAQ,EACR,CACI,MAAO,KAAAxC,EADX,CAWA9kD,EAAAunD,GAAA,CAAAA,QAAS,CAAC/yD,CAAD,CACT,CACI,IAAAswD,EAAA,CAAetwD,CAAf,CAAsBgzD,EAAAlgD,GAD1B,CAWAtH,EAAAynD,GAAA,CAAAA,QAAQ,EACR,CACI,MAAO,KAAA1C,EADX,CAWA/kD;CAAA0nD,GAAA,CAAAA,QAAS,CAAClzD,CAAD,CACT,CACI,IAAAuwD,EAAA,CAAevwD,CADnB,CAWAwL,EAAA2nD,GAAA,CAAAA,QAAQ,EACR,CACI,MAAO,KAAA1C,EADX,CAWAjlD,EAAA4nD,GAAA,CAAAA,QAAS,CAACpzD,CAAD,CACT,CACI,IAAAywD,EAAA,CAAezwD,CADnB,CAWAwL,EAAA6nD,GAAA,CAAAA,QAAQ,EACR,CACI,MAAO,KAAA3C,EADX,CAiBAllD,EAAA8nD,GAAA,CAAAA,QAAS,CAACtzD,CAAD,CACT,CACI,IAAA0wD,EAAA,CAAe1wD,CAAf,CAAsBmxD,EAAA76C,GACtB,KAAA+5C,EAAA,CAAgB,IAAAA,EAAhB,CAA+B,CAACY,CAAAl9C,GAAhC,EAAmD,IAAA28C,EAAnD,CAAkE,CAAlE,GAA0EQ,CAAAngD,GAAAgD,GAF9E,CASJ;IAAAw/C,EAAgBC,EAAA1/C,GAAhB,CACA2/C,GAAgBC,EAAAt/C,GADhB,CAEAu/C,GAAgBC,EAAAv/C,GAFhB,CAGAw/C,GAAgBC,EAAA/+C,GAHhB,CAIAg/C,GAAgBC,EAAA39C,GAJhB,CAKA49C,GAAgBC,EAAAlgD,GALhB,CAMAmgD,GAAgBC,EAAAjiD,GANhB,CAWA,GAAsB,EAXtB,CAWAi+C,IAAsB,EAAA,CAhskBFrtC,KAgskBE,CAAA,CACuB,CAAC,IAAD,CAAO,IAAP,CAAanP,EAAA9X,UAAA01D,GAAb,CAAuC59C,EAAA9X,UAAA41D,GAAvC,CAAmE,MAAnE,CADvB,CAAA,EAAA,CA/rkBF3uC,KA+rkBE,CAAA,CAEuB,CAAC,IAAD,CAAO,IAAP,CAAanP,EAAA9X,UAAAg3D,GAAb,CAAuCl/C,EAAA9X,UAAAi3D,GAAvC,CAAmE,MAAnE,CAFvB,CAAA,EAAA,CA9rkBFhwC,KA8rkBE,CAAA,CAGuB,CAAC,IAAD,CAAO,IAAP,CAAanP,EAAA9X,UAAAm3D,GAAb,CAAuCr/C,EAAA9X,UAAAo3D,GAAvC,CAAmE,MAAnE,CAHvB,CAAA,EAAA,CA7rkBFnwC,KA6rkBE,CAAA,CAIuB,CAAC,IAAD,CAAO,IAAP,CAAanP,EAAA9X,UAAAq3D,GAAb,CAAuCv/C,EAAA9X,UAAAs3D,GAAvC,CAAmE,MAAnE,CAJvB,CAAA,EAAA,CA5rkBFrwC,KA4rkBE,CAAA,CAKuB,CAAC,IAAD,CAAO,IAAP,CAAanP,EAAA9X,UAAAu3D,GAAb,CAAuCz/C,EAAA9X,UAAAw3D,GAAvC,CAAmE,MAAnE,CALvB,CAAA,EAAtBlD,CA+BI/qD;QAhBE6R,GAgBS,CAAC3R,CAAD,CACX,CACI,EAAA,KAAA,CAAA,IAAA,CAAM,MAAN,CAAcA,CAAd,CAjujBQ2R,MAiujBR,CAAyCm9C,EAAzC,CAAqDh7C,EAAAC,GAArD,CAAsEg7C,EAAtE,CAMA,KAAAC,EAAA,CAAe,IAAAC,EAAf,CAA8B,IAAAC,EAA9B,CAA6C,IAAAC,EAA7C,CADA,IAAAC,EACA,CADe,IAAAC,EACf,CAD8B,CAO9B,KAAAC,EAAA,CAAeC,CAAA1jD,GAEf,KAAA2jD,EAAA,CAAe,CAKf,KAAAC,EAAA,CAAoB50D,KAAJ,CAAU,GAAV,CAAAilD,KAAA,CAAoB,CAApB,CApBpB,CAjBexnC,CAAA+oC,CAAb1vC,EAAa0vC,CAAAA,EAAAA,CA+Cf,EAAA,CAxkuBJ,EAAAqO,UAwkuBIzpD,EAAAw9C,GAAA,CAAAA,QAAc,CAACj7B,CAAD,CACd,CACSA,CAAL,EAiBI,CAAA,CAAAU,EAAA,CAUIV,CAVJ,CAAA,CACI,IAAA4mC,EADJ,CAAA,CAAA,KAAA,EAAA,MAAA,CAEI,IAAAC,EAFJ,CAAA,CAAA,KAAA,EAAA,MAAA,CAGI,IAAAL,EAHJ,CAAA,CAAA,KAAA,EAAA,MAAA,CAII,IAAAC,EAJJ,CAAA,CAAA,KAAA,EAAA,MAAA,CAKI,IAAAC,EALJ,CAAA,CAAA,KAAA,EAAA,MAAA,CAMI,IAAAC,EANJ,CAAA,CAAA,KAAA,EAAA,MAAA,CAOI,IAAAG,EAPJ,CAAA,CAAA,KAAA,EAAA,MAAA,CAQI,IAAAE,EARJ,CAAA,CAAA,KAAA,EAAA,MAAA,CASI,IAAAC,EATJ,CAAA,CAAA,KAAA,EAAA,MAjBJ,GAEI,IAAAJ,EAQA,CATA,IAAAD,EASA,CATe,CASf,CANA,IAAAH,EAMA,CAPA,IAAAD,EAOA,CAPe,CAOf,CAJA,IAAAG,EAIA,CALA,IAAAD,EAKA,CALe,CAKf,CAHA,IAAAI,EAGA,CAHeK,CAAA5hD,GAGf,CAFA,IAAAyhD,EAEA,CAFe,CAEf,CADAnmC,EAAA,CAAA,IAAAloB,EAAA,CAAkB,IAAAwmB,GAAlB,CACA,CAAAioC,EAAA,CAAAA,IAAA,CAVJ,CA6BA,OAAO,CAAA,CA9BX,CAyCA3pD;CAAA09C,GAAA,CAAAA,QAAc,EACd,CACI,MAAO,CACH,IAAAyL,EADG,CAEH,IAAAC,EAFG,CAGH,IAAAL,EAHG,CAIH,IAAAC,EAJG,CAKH,IAAAC,EALG,CAMH,IAAAC,EANG,CAOH,IAAAG,EAPG,CAQH,IAAAE,EARG,CASH,IAAAC,EATG,CADX,CAyBAxpD,EAAAi/C,GAAA,CAAAA,QAAU,CAAC9C,CAAD,CACV,CACkB,CAAd,EAAIA,CAAJ,EAAiB,IAAAqB,GAAA,EADrB,CAqEAoM,SAAA,GAAW,CAAXA,CAAW,CAACvJ,CAAD,CACX,CACQA,CAAJ,GACI,CAAA6I,EAEA,CAFgB7I,CAEhB,CADA,CAAA+I,EACA,CADe,CAAAH,EACf,CAAA,CAAAE,EAAA,EAAgBU,CAAAziD,GAHpB,CAKA,EAAAiiD,EAAA,CAAeC,CAAA1jD,GACf,EAAAujD,EAAA,EAAgBW,CAAAj+C,KACZ,EAAAs9C,EAAJ,CAAmBY,CAAAljD,GAAnB,EAAiC4a,EAAA,CAAA,CAAAvmB,EAAA,CAAgB,CAAAwmB,GAAhB,CARrC;AA4BA1hB,CAAAg/C,GAAA,CAAAA,QAAQ,CAAC9H,CAAD,CAAQkB,CAAR,CAAmBE,CAAnB,CAA0BE,CAA1B,CAAmC2H,CAAnC,CAA2CrpC,CAA3C,CAAiDU,CAAjD,CAAsD4oC,CAAtD,CAA8D/tD,CAA9D,CACR,CACQguD,CAAAA,CAAS,CACb,KAAI1H,EAAOzB,CAAAyB,GAAX,CACIM,EAAS,IAETn3C,EAAA,CAAAA,IAAA,CAAJ,EAA2BE,CAAA,CAAAA,IAAA,CAAkB,IAAA7P,KAAlB,CAA8B,YAA9B,CAA6CimD,CAA7C,CAAyD,GAAzD,CAA+DE,CAA/D,CAAuE,GAAvE,CAA6EE,CAA7E,CAAuF,IAAvF,CAA8FnjC,CAAA,CAAUyB,CAAV,CAA9F,CAAgH,IAAhH,CAAuHzB,CAAA,CAAUyB,CAAV,EAAkBqpC,CAAlB,EAA4B,CAA5B,EAAvH,CAAwJ,CAAA,CAAxJ,CAA8J,CAAA,CAA9J,CAEtBxH,EAAL,GACI0H,CACA,CADSnJ,CAAAiF,GAAA,CAAe6N,EAAAn9C,GAAf,CAAkCo9C,EAAAr9C,GAC3C,CAAAuzC,CAAA,CAAS,CAFb,CAMA,KAAA,CAAOA,CAAP,CAAA,CAAe,CACX,GAAI,CAAClH,CAAL,CAAa,CACT,GAAIb,CAAJ,EAAiBO,CAAAnB,GAAjB,CAAkC,CAC9B6I,CAAA,CAAS6J,EAAAn9C,GACT,MAF8B,CAIlCksC,CAAA,CAASN,CAAAoB,KAAA,CAAU3B,CAAV,CAAqBE,CAArB,CAA4BE,CAA5B,CAAsC,CAAtC,CACT,IAAI,CAACS,CAAL,CAAa,CACToH,CAAA,CAAS8J,EAAAj9C,GACT,MAFS,CAIb,IAAAotC,EAAW,CACP,GAAE9B,CAAN,EAAiBG,CAAAjB,GAAjB,GACIc,CACA,CADU,CACV,CAAI,EAAEF,CAAN,EAAeK,CAAAlB,GAAf,GACIa,CACA,CADQ,CACR,CAAA,EAAEF,CAFN,CAFJ,CAXS,CAmBb,IAAQsI,CACR,IAA2C,CAA3C,EAAKD,CAAL,CAAU9H,CAAA0B,KAAA,CAAUpB,CAAV,CAAkBqB,CAAA,EAAlB,CAAV,GAAuF,CAAvF,EAAiDoG,CAAjD,CAAsD/H,CAAA0B,KAAA,CAAUpB,CAAV,CAAkBqB,CAAA,EAAlB,CAAtD,EAA0F,CACtF+F,CAAA,CAAS+J,EAAA38C,GACT,MAFsF,CAK1FiJ,EAAA,CAAA,IAAAvb,EAAA,CAAuBm+B,EAAA,CAAA,IAAAp+B,EAAA,CAAmB4b,CAAnB,CAAvB,CADW2pC,CACX,CADiBC,CACjB,EADuB,CACvB,CASIpG,EAAJ,EAAgB3B,CAAAhB,GAAhB,GAA+BsB,CAA/B,CAAwC,IAAxC,CACAniC,EAAA,EAAQU,CACR2oC,EAAA,EArCW,CAwCf,MAAO9tD,EAAA,CAAMA,CAAA,CAAKguD,CAAL,CAAajI,CAAb,CAAwBE,CAAxB,CAA+BE,CAA/B,CAAwC2H,CAAxC,CAAgDrpC,CAAhD,CAAN,CAA8DupC,CArDzE,CA6DAsJ;QAAA,GAAU,CAAVA,CAAU,CACV,CACI,IAAItJ,EAAS,CAAb,CACIlE,EAAU,CAAAgN,EAAD,CAAgBkB,CAAAz+C,GAAhB,CAAiC,CAAjC,CAAqC,CADlD,CAEIsrC,EAAQ,CAAAuE,EAAA,CAAaU,CAAb,CACRxD,EAAAA,CAAOzB,CAAPyB,EAAgBzB,CAAAyB,GAJxB,KAKQP,EAAY,CAAA2Q,EAAZ3Q,CAA2BkS,EAAAx/C,GALnC,CAK8Dy/C,EAAU,CAAAvB,EAAVuB,CAAyBC,EAAA1/C,GAEnF,EAAAm+C,EAAA,EAAgB,EAAEwB,EAAAr+C,GAAF,CAAkBs+C,EAAAr+C,GAAlB,CAAqCs+C,EAAA59D,GAArC,CAAqD69D,EAAA5lD,GAArD,CAEhB,IAAI2zC,CAAJ,CAKI,GAJA,CAAAsQ,EAGIhQ,EAHY2R,EAAA5lD,GAGZi0C,CAFAn3C,CAAA,CAAAA,CAAA,CAEAm3C,EAFuBj3C,CAAA,CAAAA,CAAA,CAAkB,CAAA7P,KAAlB,CAA8B,cAA9B,CAA+CimD,CAA/C,CAAyE,KAAzE,CAA+EmS,CAA/E,CAAyF,GAAzF,CAA8F,CAAA,CAA9F,CAAoG,CAAA,CAApG,CAEvBtR,CAAAA,CAAAA,CAASN,CAAAoB,KAAA,CAAU3B,CAAV,CARsCE,CAQtC,CAA4BiS,CAA5B,CAAqC,CAAA,CAArC,CACb,CAAY,CACJ1+D,CAAAA,CAAI,CACR,KADWsuD,CACX,CADoB,CAAAqP,EAAAz5D,OACpB,CAAOlE,CAAP,CAAWsuD,CAAX,CAAA,CAAmB,CACf,IAAI7uD,EAAIqtD,CAAA0B,KAAA,CAAUpB,CAAV,CAAkBptD,CAAlB,CACR,IAAQ,CAAR,CAAIP,CAAJ,CAAW,CACP+0D,CAAA,CAAS+J,EAAA38C,GACT,MAFO,CAIX,CAAA+7C,EAAA,CAAc39D,CAAA,EAAd,CAAA,CAAqBP,CANN,CAQf2tD,CAAA4R,GAAJ,GAAoB,CAAA5B,EAApB,EAAoC0B,EAAA59D,GAApC,CAVQ,CAAZ,IAYIszD,EAAA,CAAS8J,EAAAj9C,GAjBjB,KAoBImzC,EAAA,CAASlE,CAAA,CAAQ6N,EAAAn9C,GAAR,CAA2Bo9C,EAAAr9C,GAExCg9C,GAAA,CAAAA,CAAA,CAAiBvJ,CAAjB,CA/BJ;AA+GArgD,CAAA8qD,GAAA,CAAAA,QAAQ,CAACh0C,CAAD,CAAOqB,CAAP,CACR,CACQxrB,CAAAA,CAAI,IAAAw8D,EAER,IAAI,CAAChxC,CAAL,CAGI,OAFAxrB,CAEQ08D,EAFH0B,CAAA1jD,GAEGgiD,CAAA,IAAAA,EAAR,EAEA,KAAK2B,CAAA1+C,GAAL,CACA,KAAK2+C,CAAA1+C,MAAL,CACQ,IAAAg9C,EAAJ,CAAmB,IAAAC,EAAAz5D,OAAnB,GACI,IAAAo5D,EADJ,EACoB+B,CAAAp/C,GADpB,CAGA,MAEJ,MAAK49C,CAAA5hD,GAAL,CACA,KAAKqjD,CAAAtjD,GAAL,CACA,KAAKujD,CAAA3+C,GAAL,CACuB,CAAnB,CAAI,IAAA88C,EAAJ,GACI,IAAAJ,EADJ,EACoB+B,CAAAp/C,GADpB,CAZJ,CAkBJ,MAAOnf,EAxBX,CAkCAqT;CAAAqrD,GAAA,CAAAA,QAAS,CAAC72D,CAAD,CACT,CACI,IAAA20D,EAAA,CAAgB,IAAAA,EAAhB,CAA+B,CAACmC,CAAAhkD,GAAhC,CAAoD9S,CAApD,CAA2D82D,CAAAhkD,GAE3D,IAAI,IAAA6hD,EAAJ,CAAmBoC,CAAAx/C,KAAnB,CACI,IAAAyxC,GAAA,EADJ,KAKA,IAAK,IAAA2L,EAAL,CAAoBqC,CAAA9kD,GAApB,EAAqC,IAAA2iD,EAArC,EAAqDC,CAAA1jD,GAArD,CA/RA,OAgSIs8C,IAtSJmH,EAMOA,CAgSHnH,IAtSWiH,EAMRE,CANuBoC,CAAA9kD,GAMvB0iD,CAgSHnH,IArSJiH,EAKOE,EALS,EAAEmC,CAAA9kD,GAAF,CAAiBwkD,CAAAp/C,GAAjB,CAAgCg+C,CAAAj+C,KAAhC,CAAiDg+C,CAAAziD,GAAjD,CAKTiiD,CAJPjmC,EAAA,CAoSI8+B,IApSJhnD,EAAA,CAoSIgnD,IApScxgC,GAAlB,CAIO2nC,CAFHvnD,CAAA,CAkSAogD,IAlSA,CAEGmH,EAFoBrnD,CAAA,CAkSvBkgD,IAlSuB,CAkSvBA,IAlSyC/vD,KAAlB,CAA8B,kBAA9B,CAAmDu5D,EAAA,CAkS1ExJ,IAlSqFmH,EAAX,EAA2B,CAA3B,CAAnD,CAAkF,GAAlF,CAAuF,CAAA,CAAvF,CAA6F,CAAA,CAA7F,CAEpBA,CAgSHnH,IAhSGmH,EAAP,EAEA,KAAK2B,CAAA1+C,GAAL,CACA,KAAK2+C,CAAA1+C,MAAL,CACA,KAAKm9C,CAAA5hD,GAAL,CACA,KAAKqjD,CAAAtjD,GAAL,CACA,KAAKujD,CAAA3+C,GAAL,CA0RIy1C,IAjQJqH,EAAA,CAAe,CAvBX,MAEJ,MAAKoC,CAAAn/C,GAAL,CA6MI0qC,CAAAA,CAyEAgL,IAzEQzG,EAAA,CAyERyG,IA1EUiH,EAADhN,CAAgBkO,CAAAz+C,GAAhBuwC,CAAiC,CAAjCA,CAAqC,CACtC,CAyER+F,KAvEJ+G,EAAA,EAAgB,CAAC2B,EAAA5lD,GACbkyC,EAAJ,EAAaA,CAAAyB,GAAb,GAsEIuJ,IAtEqB+G,EAAzB,EAAyC2B,EAAA5lD,GAAzC,CAsEIk9C,KApEJkH,EAAA,CAoEIlH,IApEW+G,EACfW,GAAA,CAmEI1H,IAnEJ,CAjNI,MAEJ,MAAK0J,CAAAl/C,GAAL,CAkRIw1C,IAzDJkH,EACA,CAwDIlH,IAzDWgH,EACf,CAAAU,EAAA,CAwDI1H,IAxDJ,CAxOA,CA+RA,IAKM,KAAAiH,EAAN,CAAqBY,CAAAljD,GAArB,CAGS,IAAAsiD,EAHT,CAGwBW,CAAAj+C,KAHxB,EAII4V,EAAA,CAAA,IAAAvmB,EAAA;AAAgB,IAAAwmB,GAAhB,CAJJ,CACI0B,EAAA,CAAA,IAAAloB,EAAA,CAAkB,IAAAwmB,GAAlB,CAdR,CA6BA1hB,EAAA6rD,GAAA,CAAAA,QAAQ,CAAC/0C,CAAD,CAAOqB,CAAP,CACR,CACI,GAAI,CAACA,CAAL,CACI,OAAQ,IAAAkxC,EAAR,EAEA,KAAK4B,CAAA1+C,MAAL,CACQ,IAAA48C,EAAJ,CAAmB+B,CAAAp/C,GAAnB,GACI,IAAAq9C,EAIA,EAJgB,CAAC+B,CAAAp/C,GAIjB,CAFA,IAAAs9C,EAEA,CAFe,IAAAI,EAAA,CAAc,IAAAD,EAAd,CAEf,CAF6C,GAE7C,CADIznD,CAAA,CAAAA,IAAA,CACJ,EAD2BE,CAAA,CAAAA,IAAA,CAAkB,IAAA7P,KAAlB,CAA8B,YAA9B,CAA6C,IAAAo3D,EAA7C,CAA4D,KAA5D,CA17sBhCp6D,CAAA,CA07sBkH,IAAAi6D,EA17sBlH,CAAa,CAAb,CAAgB,CAAA,CAAhB,CA07sBgC,CAAiG,CAAA,CAAjG,CAAuG,CAAA,CAAvG,CAC3B,CAAI,EAAE,IAAAG,EAAN,EAAsB,IAAAC,EAAAz5D,OAAtB,EACI65D,EAAA,CAAAA,IAAA,CANR,CAHJ,CAeJ,MAAO,KAAAR,EAjBX,CA2BAppD;CAAA8rD,GAAA,CAAAA,QAAS,CAACt3D,CAAD,CACT,CACI,OAAO,IAAA60D,EAAP,EAEA,KAAK2B,CAAA1+C,GAAL,CACQ,IAAA68C,EAAJ,CAAmB+B,CAAAp/C,GAAnB,GACI,IAAAq9C,EAIA,EAJgB,CAAC+B,CAAAp/C,GAIjB,CAFA,IAAA09C,EAAA,CAAc,IAAAD,EAAd,CAEA,CAF8B/0D,CAE9B,CAFqC,GAErC,CADIsN,CAAA,CAAAA,IAAA,CACJ,EAD2BE,CAAA,CAAAA,IAAA,CAAkB,IAAA7P,KAAlB,CAA8B,aAA9B,CAA8C,IAAAo3D,EAA9C,CAA6D,GAA7D,CAr9sB5Bp6D,CAAA,CAq9sB6GqF,CAr9sB7G,CAAa,CAAb,CAAgB,CAAA,CAAhB,CAq9sB4B,CAAyF,GAAzF,CAA8F,CAAA,CAA9F,CAAoG,CAAA,CAApG,CAC3B,CAAI,EAAE,IAAA+0D,EAAN,EAAsB,IAAAC,EAAAz5D,OAAtB,EACI65D,EAAA,CAAAA,IAAA,CANR,CASA,MAEJ,MAAKF,CAAA5hD,GAAL,CACA,KAAKqjD,CAAAtjD,GAAL,CACA,KAAKujD,CAAA3+C,GAAL,CACI,GAAI,IAAA08C,EAAJ,CAAmB+B,CAAAp/C,GAAnB,CAGI,OAFA,IAAAq9C,EAEO,EAFS,CAAC+B,CAAAp/C,GAEV,CAAA,IAAAy9C,EAAA,EAAP,EACA,KAAK,CAAL,CACI,IAAAP,EAAA,CAAex0D,CACf,MAEJ,MAAK,CAAL,CAEI,GADA,IAAAu0D,EACI,CADWv0D,CACX,CAAA,IAAA60D,EAAA,EAAgBK,CAAA5hD,GAApB,CACI6hD,EAAA,CAAAA,IAAA,CADJ,KAAA,CAGqB,IAAA,EAAA,IAAAN,EAAA,EAAgB+B,CAAA3+C,GAAhB,CAlM7B4zC,EAAS,CAkMoB,CAjM7BlE,EAiMY4P,IAjMF5C,EAAD,CAAgBkB,CAAAz+C,GAAhB,CAAiC,CAAjC,CAAqC,CAiMjB,CAhM7BsrC,EAgMY6U,IAhMJtQ,EAAA,CAAaU,CAAb,CACRxD,EAAAA,CAAOzB,CAAPyB,EAAgBzB,CAAAyB,GAJxB,KAKQP,EA8LY2T,IA9LAhD,EAAZ3Q,CAA2BkS,EAAAx/C,GALnC,CAK8Dy/C,EA8L1CwB,IA9LoD/C,EAAVuB,CAAyBC,EAAA1/C,GA8LnEihD,KA5LhB9C,EAAA,EAAgB,EAAEwB,EAAAr+C,GAAF,CAAkBs+C,EAAAr+C,GAAlB,CAAqCs+C,EAAA59D,GAArC,CAAqD69D,EAAA5lD,GAArD,CAEhB,IAAI2zC,CAAJ,CAKI,GAqLYoT,IAzLZ9C,EAGIhQ,EAHY2R,EAAA5lD,GAGZi0C;AAFAn3C,CAAA,CAwLQiqD,IAxLR,CAEA9S,EAFuBj3C,CAAA,CAwLf+pD,IAxLe,CAwLfA,IAxLiC55D,KAAlB,CAA8B,eAA9B,CAAgDimD,CAAhD,CAA0E,KAA1E,CAAgFmS,CAAhF,CAA0F,GAA1F,CAA+F,CAAA,CAA/F,CAAqG,CAAA,CAArG,CAEvBtR,CAAAA,CAAAA,CAASN,CAAAoB,KAAA,CAAU3B,CAAV,CARsCE,CAQtC,CAA4BiS,CAA5B,CAAqC,CAAA,CAArC,CACb,CAGI,IAFIyB,CACO7R,GADGlB,CAAA4R,GACH1Q,CADoB,CAAA,CACpBA,EAAPtuD,CAAOsuD,CAAH,CAAGA,CAAAA,CAAAA,CAmLH4R,IAnLYvC,EAAAz5D,OACpB,CAAOlE,CAAP,CAAWsuD,CAAX,CAAA,CAAmB,CAEf,GAAI,CAACxB,CAAA4B,MAAA,CAAWtB,CAAX,CAAmBptD,CAAnB,CAgLDkgE,IAjLOvC,EAAAh1D,CAAc3I,CAAd2I,CACN,CAA6B,GAA7B,CAAL,CAAyC,CACrC6rD,CAAA,CAAS+J,EAAA38C,GACT,MAFqC,CAIzC5hB,CAAA,EANe,CAHvB,IAYIw0D,EAAA,CAAS8J,EAAAj9C,GAjBjB,KAoBImzC,EAAA,CAASlE,CAAA,CAAQ6N,EAAAn9C,GAAR,CAA2Bo9C,EAAAr9C,GAExCg9C,GAAA,CAoKgBmC,IApKhB,CAAiB1L,CAAjB,CAiKY,CAPJ,CApBR,CAyCA,IAAA+I,EAAA,CAAe50D,CA1CnB,CAiDJ,KAAAy3D,EAAgBC,EAAAvgD,GAAhB,CAEAwgD,GAAgBC,EAAAngD,GAFhB,CAGAogD,GAAgBC,EAAApgD,GAHhB,CAIAqgD,GAAgBC,EAAArgD,GAJhB,CAKAsgD,EAAgBC,EAAA/lD,GALhB,CAMAgmD,GAAgBC,EAAAjgD,GANhB,CAQA++C,GAAc,iDAAA,MAAA,CAAA,GAAA,CARd,CAeA,GAAsB,EAftB,CAeA5C,IAAsB,EAAA,CA3ulBFvxC,KA2ulBE,CAAA,CACuB,CAAC,IAAD,CAAO,IAAP,CAAa7L,EAAApb,UAAAw6D,GAAb,CAAuCp/C,EAAApb,UAAA+6D,GAAvC,CAAmE,MAAnE,CADvB,CAAA,EAAA,CA1ulBF9zC,KA0ulBE,CAAA,CAEuB,CAAC,IAAD,CAAO,IAAP,CAAa7L,EAAApb,UAAAu7D,GAAb,CAAuCngD,EAAApb,UAAAw7D,GAAvC,CAAmE,MAAnE,CAFvB,CAAA,EAAtBhD,CAuEIjvD;QAfEgzD,GAeS,CAACC,CAAD,CACX,CAGQ,CAAA,KAAA,CAAA,IAAA,CAAM,UAAN,CAAkBA,CAAlB,CAKA,KAAA33C,EAAA,CAAa,CAAC23C,CAAA,KAAd,EAAkC,EAQlC,KAAAC,EAAA,CAAgB,CAAC,GAAD,CAAK,GAAL,CAChB,KAAAC,GAAA,CAAkB,CAAC,GAAD,CAAK,GAAL,CAUlB,KAAA5gC,EAAA,CAAe,CAMf,KAAA6gC,EAAA,CAAiB,CAAA,CAMjB,KAAAC,EAAA,CAAiB,EACjB,KAAAC,EAAA,CAAiB,EAiBjB,KAAAC,EAAA,CAAkB,EAzD1B,CAhBmB/6C,CAAAvY,CAAjB+yD,EAAiB/yD,CAAAA,CAAAA,CAwFnB,GAAA,UAAA,GAAA,CAAAuzD,QAAW,EACX,CACI,MAAQ,EADZ,CAaA,GAAA,UAAA,GAAA,CAAAC,QAAW,EACX,EA+DAC;QAAA,GAAY,CAAZA,CAAY,CAACC,CAAD,CAAO5rD,CAAP,CAAc6rD,CAAd,CACZ,CACI,GAAI7rD,CAAJ,CACI,GAAK4rD,CAAL,CAMO,CACiB,CAApB,CAAI,CAAAN,EAAJ,EAAyB,CAAAC,EAAAp9D,OAAzB,GACI,CAAAm9D,EADJ,CACoB,CADpB,CAGA,IAAoB,CAApB,CAAI,CAAAA,EAAJ,EAAyBM,CAAzB,EAAiC,CAAAL,EAAA,CAAe,CAAAD,EAAf,CAAjC,CACI,CAAAC,EAAAhuD,OAAA,CAAsB,CAAtB,CAAyB,CAAzB,CAA4BquD,CAA5B,CACA,CAAA,CAAAN,EAAA,CAAgB,CAEpB,EAAAA,EAAA,EARG,CANP,IACQ,EAAAD,EAAJ,CACIO,CADJ,CACW,KADX,CAGIA,CAHJ,CAGW,CAAAL,EAAA,CAAe,CAAAD,EAAf,CAA6B,CAA7B,CAaf7hE,EAAAA,CAAI,EACR,IAAImiE,CAAJ,CAAU,CAaNA,CAAA,CAAOA,CAAAngE,QAAA,CAAa,KAAb,CAAoB,GAApB,CAEHqgE,EAAAA,CAAQ,CACZ,KAAIC,EAAU,IACdF,EAAA,CAAQA,CAAR,EAAiB,GAQjB,KAAK,IAAI5hE,EAAI,CAAb,CAAgBA,CAAhB,EAAqB2hE,CAAAz9D,OAArB,CAAkClE,CAAA,EAAlC,CAAuC,CACnC,IAAIyB,EAAKkgE,CAAAjgE,OAAA,CAAY1B,CAAZ,CACT,IAAU,GAAV,EAAIyB,CAAJ,EAAuB,GAAvB,EAAiBA,CAAjB,CACSqgE,CAAL,CAEWrgE,CAFX,EAEiBqgE,CAFjB,GAGIA,CAHJ,CAGc,IAHd,EACIA,CADJ,CACcrgE,CAFlB,KAOK,IAAIA,CAAJ,EAAUmgE,CAAV,EAAmB,CAACE,CAApB,EAA+B,CAACrgE,CAAhC,CAKDjC,CAAA+J,KAAA,CAAO85C,EAAA,CAASse,CAAA/9D,UAAA,CAAei+D,CAAf,CAAsB7hE,CAAtB,CAAT,CAAP,CACA,CAAA6hE,CAAA,CAAQ7hE,CAAR,CAAY,CAfmB,CAzBjC,CA4CV,MAAOR,EAhEX;AAkMAuiE,QAAA,GAAQ,CAAClhE,CAAD,CAAIk2B,CAAJ,CAAWirC,CAAX,CACR,CACI,IAAWC,EAAOphE,CAClBk2B,EAAA,CAAQA,CAAR,EA9UiBA,EAgVjB,IAAIirC,CAAJ,CACI,GAAa,EAAb,EAAIjrC,CAAJ,CACIkrC,CAAA,CAAOphE,CAAP,GAAa,CADjB,KAGK,IAAY,EAAZ,CAAIk2B,CAAJ,CACDkrC,CAAA,CAAOphE,CAAP,EAAa,CAAb,EAAkBk2B,CAAlB,EAA2B,CAD1B,KAKD,IADAmrC,CACI,CADIjgE,IAAAC,IAAA,CAAS,CAAT,CAAY60B,CAAZ,CACJ,CAAI,CAAJ,CAAAl2B,CAAA,EAASA,CAAT,EAAcqhE,CAAlB,CACID,CACA,CADOphE,CACP,CADWqhE,CACX,CAAW,CAAX,CAAID,CAAJ,GAAcA,CAAd,EAAsBC,CAAtB,CAFJ,CATR,IAgBiB,GAAb,EAAInrC,CAAJ,CACIkrC,CADJ,CACYphE,CADZ,EACkB,EADlB,CACuBk2B,CADvB,EACmC,EADnC,CACwCA,CADxC,EAIImrC,CACA,CADQjgE,IAAAC,IAAA,CAAS,CAAT,CAAY60B,CAAZ,CAAoB,CAApB,CACR,CAAIl2B,CAAJ,EAASqhE,CAAT,EACID,CACA,CADQphE,CACR,CADYqhE,CACZ,EAAMrhE,CAAN,CAAUqhE,CAAV,CAAiB,CAAjB,EAAsB,CAAtB,GAAyBD,CAAzB,EAAiCC,CAAjC,CAFJ,EAGWrhE,CAHX,CAGe,CAACqhE,CAHhB,GAIID,CACA,CADQphE,CACR,CADYqhE,CACZ,CAAA,EAAO,CAACrhE,CAAR,CAAY,CAAZ,EAAiBqhE,CAAjB,CAA0B,CAA1B,EAA+B,CAA/B,CACQD,CADR,GACcA,CADd,EACsBC,CADtB,EAISD,CAJT,GAIeA,CAJf,EAIuBC,CAJvB,CALJ,CALJ,CAmBArhE,EAAJ,EAASohE,CAAT,GAEIphE,CAFJ,CAEQohE,CAFR,CAIA,OAAOphE,EA3CX;AAyEAshE,QAAA,GAAO,CAACC,CAAD,CAAQC,CAAR,CAAcC,CAAd,CACP,CACI,IAFiBA,CAEjB,CAFiB,IAAA,EAAA,GAAAA,CAAA,CAAQ,EAAR,CAAAA,CAEjB,CAAOA,CAAA,EAAP,EAAiBD,CAAAn+D,OAAjB,CAAA,CAA8B,CAC1B,IAAIq+D,EAAOF,CAAAG,IAAA,EACX,IAAmB,CAAnB,CAAIJ,CAAAl+D,OAAJ,CAAsB,MAAO,CAAA,CAC7B,KACIu+D,EAAOL,CAAAI,IAAA,EACPE,KAAAA,EAAON,CAAAI,IAAA,EACX,QAAOD,CAAP,EACA,KAAK,GAAL,CAC0BG,CAAtB,EAA4BD,CAC5B,MACJ,MAAK,GAAL,CACI,GAAI,CAACA,CAAL,CAAW,MAAO,CAAA,CAClBE,EAAA,CAAS1gE,IAAAE,MAAA,CAAWugE,CAAX,CAAkBD,CAAlB,CACT,MACJ,MAAK,IAAL,CACI,GAAI,CAACA,CAAL,CAAW,MAAO,CAAA,CACTC,EAAT,EAAgBD,CAChB,MACJ,MAAK,GAAL,CACaC,CAAT,EAAgBD,CAChB,MACJ,MAAK,GAAL,CACaC,CAAT,EAAgBD,CAChB,MACJ,MAAK,UAAL,CACaC,CAAT,GAAiBD,CACjB,MACJ,MAAK,UAAL,CACaC,CAAT,GAAiBD,CACjB,MACJ,MAAK,cAAL,CACaC,CAAT,IAAkBD,CAClB,MACJ,MAAK,MAAL,CACIE,CAAA,CAAUD,CAAA,CAAOD,CAAP,CAAa,CAAb,CAAiB,CAC3B,MACJ,MAAK,UAAL,CACIE,CAAA,CAAUD,CAAA,EAAQD,CAAR,CAAc,CAAd,CAAkB,CAC5B,MACJ,MAAK,MAAL,CACIE,CAAA,CAAUD,CAAA,CAAOD,CAAP,CAAa,CAAb,CAAiB,CAC3B,MACJ,MAAK,UAAL,CACIE,CAAA,CAAUD,CAAA,EAAQD,CAAR,CAAc,CAAd,CAAkB,CAC5B,MACJ,MAAK,UAAL,CACIE,CAAA;AAAUD,CAAA,EAAQD,CAAR,CAAc,CAAd,CAAkB,CAC5B,MACJ,MAAK,OAAL,CACIE,CAAA,CAAUD,CAAA,EAAQD,CAAR,CAAc,CAAd,CAAkB,CAC5B,MACJ,MAAK,MAAL,CAC0BC,CAAtB,EAA4BD,CAC5B,MACJ,MAAK,GAAL,CACA,KAAK,GAAL,CAC0BC,CAzM1B,EAyMgCD,CAC5B,MACJ,MAAK,IAAL,CAC0BC,CAAtB,EAA4BD,CAC5B,MACJ,MAAK,UAAL,CACIE,CAAA,CAAUD,CAAA,EAAQD,CAAR,CAAc,CAAd,CAAkB,CAC5B,MACJ,MAAK,IAAL,CACIE,CAAA,CAAUD,CAAA,EAAQD,CAAR,CAAc,CAAd,CAAkB,CAC5B,MACJ,MAAK,IAAL,CACIE,CAAA,CAASZ,EAAA,CAAcW,CAAd,CAAoB,EAApB,CAAwB,CAAA,CAAxB,CAAT,CAAyCzgE,IAAAC,IAAA,CAAS,CAAT,CAAY,EAAZ,CAAzC,CAA2D6/D,EAAA,CAAcU,CAAd,CAAoB,EAApB,CAAwB,CAAA,CAAxB,CAC3D,MACJ,MAAK,GAAL,CACA,KAAK,IAAL,CAOgB,IAAZ,EAAIF,CAAJ,GAAkBE,CAAlB,CAAyB,EAAzB,EAA+BA,CAA/B,CAAsC,GAAtC,EACIA,EAAJ,GAKIE,CAEI,CAFKZ,EAAA,CAAcY,CAAd,CAAsB,CAAtB,CAAyB,CAAA,CAAzB,CAEL,CAAAA,CAAA,CADO,CAAX,CAAIF,CAAJ,CACIE,CADJ,CACc1gE,IAAAC,IAAA,CAAS,CAAT,CAAYugE,CAAZ,CADd,CAGaxgE,IAAAE,MAAA,CAAWwgE,CAAX,CAAoB1gE,IAAAC,IAAA,CAAS,CAAT,CAAY,CAACugE,CAAb,CAApB,CATjB,CAYA,MACJ,SACI,MAAO,CAAA,CAvFX,CAyFAL,CAAA74D,KAAA,CAAWw4D,EAAA,CAAcY,CAAd,CAAX,CA/F0B,CAiG9B,MAAO,CAAA,CAlGX;AA2HAC,QAAA,GAAU,CAAVA,CAAU,CAACC,CAAD,CAAWC,CAAX,CAAmBC,CAAnB,CAA2Bz5C,CAA3B,CAAkC05C,CAAlC,CACV,CACI,IAAI5gE,CAAJ,CAEI6gE,EAAS,CAAA,CAFb,CAGIC,EAAS,CAHb,CAIId,EAAQ,EAJZ,CAIgBC,EAAO,EAJvB,CAMIc,EAAY,CAAA75C,EAGhB,KAFA,CAAAA,EAEA,CAFaA,CAEb,CAAOw5C,CAAP,CAAgBC,CAAhB,CAAA,CAAwB,CAEpB,IAAA34D,EAASy4D,CAAA,CAASC,CAAA,EAAT,CAAAt+D,KAAA,EACT,KAAA4+D,EAAON,CAAA,CAASC,CAAT,CAAiBF,CAAA,CAASC,CAAA,EAAT,CAAjB,CAAsC,EAE7C,IAAI14D,CAAJ,CACI,IAAAvJ,EAAIwiE,EAAA,CAAAA,CAAA,CAAgBj5D,CAAhB,CAAwB,IAAxB,CAA8B44D,CAA9B,CAA0CE,CAA1C,CADR,KAGI,IAAW,GAAX,EAAIE,CAAJ,CAAgB,CACRE,CAAAA,CAAQ,CAEZ,KADIC,CACJ,CADaT,CACb,CAAOA,CAAP,CAAgBC,CAAhB,CAAA,CAGI,GAFkBD,CAAAt+D,EAEd,CADJ4+D,CACI,CADGN,CAAA,CAASD,CAAA3+D,OAAT,CAA0B2+D,CAAA,CAASC,CAAA,EAAT,CAA1B,CAA+C,EAClD,CAAO,GAAP,EAAAM,CAAJ,CACIE,CAAA,EADJ,KAEO,IAAW,GAAX,EAAIF,CAAJ,EACC,CAAC,EAAEE,CADJ,CACW,KAGtBziE,EAAA,CAAI+hE,EAAA,CAAAA,CAAA,CAAgBC,CAAhB,CAA0BU,CAA1B,CAAkCT,CAAlC,CAAyC,CAAzC,CAA4C,CAAAx5C,EAA5C,CAAwD05C,CAAxD,CACK,KAAT,EAAIniE,CAAJ,EAAiBqiE,CAAjB,GACIriE,CADJ,CACQ2iE,EAAA,CAAgB3iE,CAAhB,CAAmBqiE,CAAnB,CADR,CAGA94D,EAAA,CAAU04D,CAAA,CAASC,CAAT,CAAiBF,CAAA,CAASC,CAAA,EAAT,CAAAt+D,KAAA,EAAjB,CAA6C,EACvD4+D,EAAA,CAAON,CAAA,CAASC,CAAT,CAAiBF,CAAA,CAASC,CAAA,EAAT,CAAjB,CAAsC,EAjBjC,CAAhB,IAmBK,CAQD,GAAW,GAAX,EAAIM,CAAJ,CACI,QAEJ,IAAW,IAAX,EAAIA,CAAJ,CAAiB,CACb,CAAA95C,EAAA,CAAa,CACb,SAFa,CAIjB,GAAW,IAAX,EAAI85C,CAAJ,CAAiB,CACb,CAAA95C,EAAA,CAAa,CACb,SAFa,CAIjB,GAAW,IAAX,EAAI85C,CAAJ,CAAiB,CACb,CAAA95C,EAAA,CAAa,EACb,SAFa,CAIjB,GAAI,EAAE45C,CAAF,CAAY,WAAZ,CAAJ,CAAgC,CAC5B,GAAW,GAAX,EAAIE,CAAJ,CACI,QAEJ,IAAW,GAAX,EAAIA,CAAJ,CAAgB,CACZF,CAAA,CAAUA,CAAV,EAAoB,CAApB,CAAyB,CACzB,SAFY,CAIhB,GAAW,GAAX;AAAIE,CAAJ,EAAyB,IAAzB,EAAkBA,CAAlB,CAA+B,CAC3BF,CAAA,CAAUA,CAAV,EAAoB,CAApB,CAAyB,CACzB,SAF2B,CAI/B,GAAW,IAAX,EAAIE,CAAJ,CAAiB,CACbF,CAAA,CAAUA,CAAV,EAAoB,CAApB,CAAyB,CACzB,SAFa,CAZW,CAiBhCD,CAAA,CAAS,CAAA,CACT,MAzCC,CA6CT,GAAUj+D,IAAAA,EAAV,GAAInE,CAAJ,CACI,GAAImiE,CAAJ,CACIA,CAAAz5D,KAAA,CAAgBa,CAAhB,CACA,CAAAvJ,CAAA,CAAI,CAFR,KAGO,CACHoiE,CAAA,CAAS,CAAA,CACTD,EAAA,CAAa,EACb,MAHG,CAOXZ,CAAA74D,KAAA,CAAWw4D,EAAA,CAAclhE,CAAd,CAAX,CASA,IAAW,GAAX,EAAIuiE,CAAJ,CACI,GAAIN,CAAJ,CAAaD,CAAA3+D,OAAb,CAA+B,CAA/B,EAAoC,CAAC2+D,CAAA,CAASC,CAAT,CAArC,CACIA,CAAA,EACA,CAAAM,CAAA,CAAMP,CAAA,CAASC,CAAA,EAAT,CAFV,KAGO,CACHG,CAAA,CAAS,CAAA,CACT,MAFG,CAMX,GAAI,CAACG,CAAL,CAAU,KAENK,EAAAA,CAA8B,MAApB,EAAA,CAAAvC,EAAA,CAAc,CAAd,CAAA,CAAyBwC,EAAzB,CAAqDC,EACnE,IAAI,CAACF,CAAA,CAAOL,CAAP,CAAL,CAAkB,CACdH,CAAA,CAAS,CAAA,CACT,MAFc,CAIdZ,CAAAn+D,OAAJ,EAAmBu/D,CAAA,CAAOL,CAAP,CAAnB,EAAkCK,CAAA,CAAOpB,CAAA,CAAKA,CAAAn+D,OAAL,CAAmB,CAAnB,CAAP,CAAlC,EACIi+D,EAAA,CAAaC,CAAb,CAAoBC,CAApB,CAA0B,CAA1B,CAEJA,EAAA94D,KAAA,CAAU65D,CAAV,CAMA,EAAA95C,EAAA,CAAqB,IAAR,EAAC85C,CAAD,CAAe,EAAf,CAAoB95C,CACjC45C,EAAA,CAAS,CAvHW,CA0HxB,GAAID,CAAJ,EAAc,CAACd,EAAA,CAAaC,CAAb,CAAoBC,CAApB,CAAf,EAA4D,CAA5D,EAA4CD,CAAAl+D,OAA5C,CACI++D,CAAA,CAAS,CAAA,CAGRA,EAAL,CAGYD,CAHZ,EAII,CAAAruD,EAAA,CAAa,eAAb,EAAgCvK,CAAhC,EAA0Cg5D,CAA1C,EAAiD,GAAjD,CAJJ,CACIhhE,CADJ,CACYggE,CAAAI,IAAA,EAMZ,EAAAl5C,EAAA,CAAa65C,CACb,OAAO/gE,EAhJX;AA6JAwhE,QAAA,GAAU,CAAVA,CAAU,CAACC,CAAD,CAAOC,CAAP,CAAgB/sC,CAAhB,CAAuBgtC,CAAvB,CACV,CAEI,IADA,IAAI/jE,CACJ,CAAsC,CAAtC,GAAQA,CAAR,CAAY6jE,CAAAtiE,QAAA,CAAauiE,CAAb,CAAZ,EAAA,CAAyC,CAIrC,IAHA,IAAIjjE,EAAI,CAAR,CACIZ,EAAID,CAAJC,CAAQ,CADZ,CAEIsC,EAAMwhE,CACV,CAAO9jE,CAAP,CAAW4jE,CAAA3/D,OAAX,CAAA,CAAwB,CACpB,IAAIzC,EAAKoiE,CAAA,CAAK5jE,CAAA,EAAL,CACT,IAAIwB,CAAJ,EAAUqiE,CAAV,CAAmB,CACfvhE,CAAA,CAAO,EACP,MAFe,CAInB,GAAI,CAACA,CAAL,CAAU,KACVA,EAAA,EACI7C,EAAAA,CAAI+B,CAAAkiD,WAAA,CAAc,CAAd,CACK,EAAb,EAAI5sB,CAAJ,CACIr3B,CADJ,EACS,GADT,CAGIA,CAHJ,CAGSA,CAHT,CAGa,EAHb,CAGqB,EAErBmB,EAAA,CAAIkhE,EAAA,CAAclhE,CAAd,CAAkBoB,IAAAC,IAAA,CAAS,CAAT,CAAY60B,CAAZ,CAAlB,CAAuCr3B,CAAvC,CAA0Cq3B,CAA1C,CAAkDgtC,CAAlD,CAA0D,CAAA,CAA1D,CAdgB,CAgBxB,GAAW,CAAX,EAAIxhE,CAAJ,CAAc,CACV,CAAAoS,EAAA,CAAa,eAAb,CAA+BmvD,CAA/B,CAAyCD,CAAzC,CAAgDC,CAAhD,CAA0D,GAA1D,CACA,OAFU,CAIVD,CAAA,CAAOA,CAAAliE,OAAA,CAAY,CAAZ,CAAe3B,CAAf,CAAP,CAA2Bm0B,CAAA,CAAAA,CAAA,CAAetzB,CAAf,CAAmB,EAAnB,CAA3B,CAAmDgjE,CAAAliE,OAAA,CAAY1B,CAAZ,CAxBlB,CA2BzC,MAAO4jE,EA7BX;AA6DAG,QAAA,GAAe,CAAfA,CAAe,CAACH,CAAD,CAAOI,CAAP,CACf,CACI,IAAI7hE,EAAQ4C,IAAAA,EAAZ,CACIk/D,EAAqB,CAAA,CAArBA,GAAUD,CACVjB,EAAAA,CAAaj6D,KAAAoO,QAAA,CAAc8sD,CAAd,CAAA,CAAuBA,CAAvB,CAAgCj/D,IAAAA,EAEjD,IAAI6+D,CAAJ,CAAU,CAYkB,GAAxB,EAAI,CAAA3C,EAAA,CAAc,CAAd,CAAJ,GACI2C,CADJ,CACWA,CAAAv6D,MAAA,CAAW,CAAA43D,EAAA,CAAc,CAAd,CAAX,CAAAiD,KAAA,CAAkC,GAAlC,CAAA76D,MAAA,CAA6C,CAAA43D,EAAA,CAAc,CAAd,CAA7C,CAAAiD,KAAA,CAAoE,GAApE,CADX,CAQAN,EAAA,CAAOD,EAAA,CAAAA,CAAA,CAAgBC,CAAhB,CAAsB,GAAtB,CAA2B,CAA3B,CAA8B,CAA9B,CACP,IAAI,CAACA,CAAL,CAAW,MAAOzhE,EAClByhE,EAAA,CAAOD,EAAA,CAAAA,CAAA,CAAgBC,CAAhB,CAAsB,GAAtB,CAA2B,CAA3B,CAA8B,CAA9B,CACP,IAAI,CAACA,CAAL,CAAW,MAAOzhE,EAsCA,GAAlB,EAAI,CAAAknB,EAAJ,GACIu6C,CADJ,CACWA,CAAAriE,QAAA,CAAa,2BAAb,CAA0C,QAA1C,CAAAA,QAAA,CAA4D,MAA5D,CAAoE,GAApE,CADX,CAGIqhE,EAAAA,CAAWgB,CAAAv6D,MAAA,CAJF86D,qGAIE,CACfhiE,EAAA,CAAQwgE,EAAA,CAAAA,CAAA,CAAgBC,CAAhB,CAA0B,CAA1B,CAA6BA,CAAA3+D,OAA7B,CAA8C,CAAAolB,EAA9C,CAA0D05C,CAA1D,CACMh+D,KAAAA,EAAd,GAAI5C,CAAJ,EAA2B8hE,CAA3B,EACIG,EAAA,CAAAA,CAAA,CAAgB,IAAhB,CAAsBjiE,CAAtB,CAnEE,CAsEV,MAAOA,EA3EX;AA4KAohE,QAAA,GAAU,CAACphE,CAAD,CAAQ8gE,CAAR,CACV,CACI,IAAA,CAAOA,CAAP,CAAA,CAAe,CACX,OAAOA,CAAP,CAAgB,CAAhB,EACA,KAAK,CAAL,CACI9gE,CAAA,CAAQ,CAAC2/D,EAAA,CAAc3/D,CAAd,CACT,MACJ,MAAK,CAAL,CACyBA,CAArB,EAA6B6qC,EAC7B,MACJ,MAAK,CAAL,CAEI,IADA,IAAIq3B,EAAM,EACV,CAAc,CAAd,EAAOA,CAAP,EAAmB,EAAcliE,CAAd,CAAqBH,IAAAC,IAAA+qC,CAAS,CAATA,CAAYq3B,CAAZr3B,CAArB,CAAnB,CAAA,CAA2Dq3B,CAAA,EAC3DliE,EAAA,CAAQ,EAAR,CAAakiE,CAVjB,CAaApB,CAAA,IAAY,CAdD,CAgBf,MAAO9gE,EAjBX;AA8BAihE,QAAA,GAAU,CAAVA,CAAU,CAACj5D,CAAD,CAASuF,CAAT,CAAgBs0D,CAAhB,CAAwBf,CAAxB,CACV,CADkCA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAS,CAAT,CAAAA,CAE9B,KACIF,EAAaj6D,KAAAoO,QAAA,CAAc8sD,CAAd,CAAA,CAAuBA,CAAvB,CAAgCj/D,IAAAA,EAEjD,IAAc,IAAd,EAAIoF,CAAJ,CAAoB,CACZ2pB,IAAAA,EAAO,CAAAytC,GAAA,CAAiBp3D,CAAjB,CACX,IAAY,CAAZ,EAAI2pB,CAAJ,CACI3xB,CAAA,CAAQ,CAAAq/D,GAAA,CAAiB1tC,CAAjB,CADZ,KAII,IADyB3pB,CACrB,CADqBA,CACrB,CADIm6D,CAwIZhD,EAAA,CAAgBiD,CAAhB,CAAJ,CACI,CADJ,CAxIgBD,CAyILhD,EAAA,CAAgBiD,CAAhB,CAAApiE,MADX,EAGAoiE,CACA,CADOA,CAAA7iE,OAAA,CAAY,CAAZ,CAAe,CAAf,CACP,CAAA,CAAA,CA5IgB4iE,CA4IThD,EAAA,CAAgBiD,CAAhB,CAAP,EA5IgBD,CA4IgBhD,EAAA,CAAgBiD,CAAhB,CAAApiE,MAJhC,CAvIY,CAAS,IAAT,EAAAA,CAAJ,CAAmB,CACf,IAAIqiE,EAAaC,CAsJtBnD,EAAA,CAtJ4Cn3D,CAsJ5C,CAtJSq6D,EAAaC,CAsJGnD,EAAA,CAtJmBn3D,CAsJnB,CAAAq6D,GArJhBA,EAAJ,GACQzB,CAAJ,CACIA,CAAAz5D,KAAA,CAAgBk7D,CAAhB,CADJ,EAGQE,CACJ,CADqBX,EAAA,CAAAA,CAAA,CAAqBS,CAArB,CAAiCR,CAAjC,CACrB,CAAuBj/D,IAAAA,EAAvB,GAAI2/D,CAAJ,CACIviE,CADJ,EACauiE,CADb,EAGSV,CAGL,EAFI,CAAAtvD,EAAA,CAAa,YAAb,EAA6BhF,CAA7B,EAAsC,OAAtC,EAAiD,IAAjD,CAAwDvF,CAAxD,CAAiE,IAAjE,CAAwEq6D,CAAxE,CAAqF,GAArF,CAEJ,CAAAriE,CAAA,CAAQ4C,IAAAA,EANZ,CAJJ,CADJ,CAFe,CAAnB,IAqBI5C,EAAA,CAAQqnB,EAAA,CAAarf,CAAb,CAAqC,CAAhB,CAAAA,CAAAlG,OAAA,EAAkC,EAAlC,CAAqB,CAAAolB,EAArB,CAAsC,CAAAA,EAAtC,CAAmD,EAAxE,CAGH,KAAb,EAAIlnB,CAAJ,CACIA,CADJ,CACY2/D,EAAA,CAAcyB,EAAA,CAAgBphE,CAAhB,CAAuB8gE,CAAvB,CAAd,CADZ,CAGSe,CAHT,EAIQ,CAAAtvD,EAAA,CAAa,UAAb,EAA2BhF,CAA3B,EAAoC,OAApC,EAA+C,IAA/C,CAAsDvF,CAAtD,CAlCQ,CAApB,IAsCS65D,EAAL,EACI,CAAAtvD,EAAA,CAAa,UAAb,EAA2BhF,CAA3B,EAAoC,OAApC,EAGR,OAAOvN,EA9CX;AAyDAiiE,QAAA,GAAU,CAAVA,CAAU,CAACG,CAAD,CAAOpiE,CAAP,CACV,CACI,IACIwiE,EAAW,CAAA,CACf,IAAc5/D,IAAAA,EAAd,GAAI5C,CAAJ,CAAyB,CACrBwiE,CAAA,CAAW,CAAA,CAEP,KAAAx6D,EADc,CAAlB,EAAI,CAAAkf,EAAJ,CACa6K,CAAA,CAAAA,CAAA,CAAe/xB,CAAf,CA1/BA20B,EA0/BA,CAAkC,CAAlC,CAAqC,CAArC,CADb,CACuD,IADvD,CAC8D30B,CAD9D,CACsE,GADtE,CAGa+xB,CAAA,CAAAA,CAAA,CAAe/xB,CAAf,CA5/BA20B,EA4/BA,CAAkC,EAAlC,CAAsC,CAAtC,CAHb,CAGwD,IAHxD,CAG+D5C,CAAA,CAAAA,CAAA,CAAe/xB,CAAf,CA5/BlD20B,EA4/BkD,CAAkC,CAAlC,CAAqC,CAArC,CAH/D,CAGyG,IAHzG,CAGgH5C,CAAA,CAAAA,CAAA,CAAe/xB,CAAf,CA5/BnG20B,EA4/BmG,CAAkC,CAAlC,CAAuD,CAAvD,CAHhH,CAGgL,IAHhL,CAGuL30B,CAHvL,CAG+L,GAElL,GAAb,EAAIA,CAAJ,EAA6B,GAA7B,CAAqBA,CAArB,GACIgI,CADJ,EACc,IADd,CACqBxH,MAAAC,aAAA,CAAoBT,CAApB,CADrB,CACkD,GADlD,CAPqB,CAYzB,CAAAuS,EAAA,EADgB,IAAR6vD,EAAAA,CAAAA,CAAeA,CAAfA,CAAsB,IAAtBA,CAA8B,EACtC,EAAoBp6D,CAApB,CACA,OAAOw6D,EAhBX,CAkDAC,QAAA,GAAa,CAAbA,CAAa,CAACL,CAAD,CACb,CACI,IAAIM,EAAa,CACjB,IAAI,CAAAvD,EAAJ,CAAqB,CACjB,GAAIiD,CAAJ,CACI,MAAOH,GAAA,CAAAA,CAAA,CAAgBG,CAAhB,CAAsB,CAAAjD,EAAA,CAAgBiD,CAAhB,CAAtB,EAA+C,CAAAjD,EAAA,CAAgBiD,CAAhB,CAAApiE,MAA/C,CAEP2iE,EAAAA,CAAQztD,MAAA0tD,KAAA,CAAY,CAAAzD,EAAZ,CACZwD,EAAAE,KAAA,EACA,KAAK,IAAIjlE,EAAI,CAAb,CAAgBA,CAAhB,CAAoB+kE,CAAA7gE,OAApB,CAAkClE,CAAA,EAAlC,CACIqkE,EAAA,CAAAA,CAAA,CAAgBU,CAAA,CAAM/kE,CAAN,CAAhB,CAA0B,CAAAuhE,EAAA,CAAgBwD,CAAA,CAAM/kE,CAAN,CAAhB,CAAAoC,MAA1B,CACA,CAAA0iE,CAAA,EARa,CAWrB,MAAoB,EAApB,CAAOA,CAbX;AA4FA3wC,QAAA,EAAS,CAATA,CAAS,CAAC9zB,CAAD,CAAI02B,CAAJ,CAAezN,CAAf,CAA0B7mB,CAA1B,CACT,CADas0B,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAQ,CAAR,CAAAA,CAAsBt0B,EAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAY,CAAZ,CAAAA,CAG/B,SAHoB,IAAA,EAAA6mB,GAAAA,CAAAA,CAAQ,CAARA,CAAAA,CAGpB,GAAgB,CAAAA,EAAhB,EACA,KAAK,CAAL,CACI5oB,CAAA,CAAIwkE,EAAA,CAAU7kE,CAAV,CAAqB,CAAR,CAAA02B,CAAA,CAAWA,CAAX,CAAmB,CAAhC,CAAmCt0B,CAAnC,CACJ,MACJ,MAAK,CAAL,CACI/B,CAAA,CAAI8oB,CAAA,CAAUnpB,CAAV,CAAqB,CAAR,CAAA02B,CAAA,EAAaA,CAAb,CAAqB,CAArB,EAAwB,CAAxB,CAA2B,CAA3B,CAA+B,CAA5C,CAA+C,CAAC,CAACt0B,CAAjD,CACJ,MACJ,MAAK,EAAL,CAII/B,CAAA,CAAIy2B,EAAA,CAAU92B,CAAV,CAAqB,CAAR,CAAA02B,CAAA,CAAW90B,IAAAS,KAAA,CAAkB,EAAlB,CAAUq0B,CAAV,CAAX,CAAoC,CAAjD,CACJ,MAEJ,SACIr2B,CAAA,CAAI4C,CAAA,CAAUjD,CAAV,CAAqB,CAAR,CAAA02B,CAAA,CAAaA,CAAb,CAAqB,CAArB,EAA2B,CAA3B,CAAgC,CAA7C,CAAgD,CAAC,CAACt0B,CAAlD,CAfR,CAkBgB,CAAR,CAAAs0B,CAAA,CAt+uBRr2B,CAs+uBQ,CAAWA,CAt+uBfc,QAAA,CAAU,kBAAV,CAA8B,IAA9B,CAs+uBI,CAAsCd,CAAtC,CAAsCA,CAA9C,OAAQ,EApBZ;AAqCA,IAAAijE,GAA4B,CACxB,KAAQ,CADgB,CAExB,WAAQ,CAFgB,CAGxB,IAAQ,CAHgB,CAIxB,IAAQ,CAJgB,CAKxB,KAAQ,CALgB,CAMxB,OAAQ,CANgB,CAOxB,QAAQ,EAPgB,CAQxB,WAAQ,EARgB,CASxB,WAAQ,EATgB,CAUxB,OAAQ,EAVgB,CAWxB,WAAQ,EAXgB,CAYxB,OAAQ,EAZgB,CAaxB,eAAQ,EAbgB,CAcxB,WAAQ,EAdgB,CAexB,WAAQ,EAfgB,CAgBxB,IAAQ,EAhBgB,CAiBxB,IAAQ,EAjBgB,CAkBxB,KAAQ,EAlBgB,CAmBxB,IAAQ,EAnBgB,CAoBxB,IAAQ,EApBgB,CAqBxB,EAAQ,EArBgB,CAsBxB,KAAQ,EAtBgB,CAuBxB,IAAQ,EAvBgB,CAwBxB,IAAQ,EAxBgB,CAA5B,CA0BAD,GAA4B,CACxB,KAAQ,CADgB,CAExB,KAAQ,CAFgB,CAGxB,WAAQ,CAHgB,CAIxB,QAAQ,EAJgB,CAKxB,WAAQ,EALgB,CAMxB,WAAQ,EANgB,CAOxB,OAAQ,EAPgB,CAQxB,WAAQ,EARgB,CASxB,OAAQ,EATgB,CAUxB,eAAQ,EAVgB,CAWxB,WAAQ,EAXgB,CAYxB,WAAQ,EAZgB,CAaxB,IAAQ,EAbgB,CAcxB,IAAQ,EAdgB,CAexB,KAAQ,EAfgB,CAgBxB,IAAQ,EAhBgB,CAiBxB,IAAQ,EAjBgB,CAkBxB,IAAQ,EAlBgB,CAmBxB,IAAQ,EAnBgB,CAoBxB,KAAQ,EApBgB,CAqBxB,OAAQ,EArBgB,CAsBxB,EAAQ,EAtBgB,CAuBxB,KAAQ,EAvBgB,CAwBxB,IAAQ,EAxBgB,CAyBxB,IAAQ,EAzBgB,CA+E5B11D;QAhBEm3D,GAgBS,CAAClE,CAAD,CACX,CAGQ,EAAA,KAAA,CAAA,IAAA,CAAMA,CAAN,CAKA,KAAAl+B,GAAA,CAAa,CAAA,CAEb,KAAAm+B,EAAA,CAAgB,CAAC,GAAD,CAAK,GAAL,CAChB,KAAAC,GAAA,CAAkB,EAUlB,KAAAiE,EAAA,CAAuBC,CAAA,EACvB,KAAAC,GAAA,CAAuBD,CAAA,EACvB,KAAAE,EAAA,CAAuBF,CAAA,EAcvB,KAAAG,EAAA,CAAoB,EAapB,KAAAC,EAAA,CAAkB,IAAAC,EAAlB,CAAoC,IAAAC,EAApC,CAAuD,EACvDC,GAAA,CAAAA,IAAA,CAcA,KAAAC,EAAA,CARA,IAAAC,GAQA,CAR0B,CAS1B,KAAAC,EAAA,CAA2B,EAC3B,KAAAC,GAAA,CAAmBhhE,IAAAA,EACnBihE,GAAA,CAAAA,IAAA,CAKA,KAAA72D,EAAA,CAAW,IACX,KAAA82D,GAAA,CAAkB,EAClB,KAAA/3D,GAAA,CAAsC,CACtC,KAAAg4D,EAAA,CAAoB,IACpB,KAAAC,EAAA,CAAsB,EACtBC,GAAA,CAAAA,IAAA,CAAiBpF,CAAA,SAAjB,CACA,KAAA99B,GAAA,CAAqB89B,CAAA,SAKrB,KAAAqF,GAAA,CAAeC,EACf,KAAAC,EAAA,CAAmB,EACnB,KAAAC,EAAA,CAAa,CAEb,KAAAC,GAAA,CADA,IAAAC,GACA,CADqB,IAKrB,KAAApmC,EAAA,CAAe,IAAAqmC,GAAf,CAAmC,IAAAC,GAAnC,CADA,IAAAC,EACA,CAFA,IAAAC,GAEA,CAFuB,CAIvB,KAAA9/C,EAAA,CADA,IAAA+/C,EACA,CADoB,IAYpB,KAAI53D,EAAM,IACNlI,OAAJ,CACmClC,IAAAA,EADnC,GACQkC,MAAA,CAAO4J,CAAP,CADR,GAEQ5J,MAAA,CAAO4J,CAAP,CAFR,CAEiC,QAAQ,CAACpQ,CAAD,CAAI,CAAE,MAAO2iC,GAAA,CAAAj0B,CAAA,CAAe1O,CAAf,CAAT,CAF7C,EAKmCsE,IAAAA,EALnC,GAKQiiE,MAAA,CAAOn2D,CAAP,CALR,GAMQm2D,MAAA,CAAOn2D,CAAP,CANR;AAMiC,QAAQ,CAACpQ,CAAD,CAAI,CAAE,MAAO2iC,GAAA,CAAAj0B,CAAA,CAAe1O,CAAf,CAAT,CAN7C,CA1GR,CAjBwB8lB,CAAAw6C,CAAtBmE,EAAsBnE,CAAAA,EAAAA,CAiJxBv4B,SAAA,GAAO,CAACy+B,CAAD,CACP,CACQj8C,CAAAA,CAAOi8C,CAAPj8C,EAAkBi8C,CAAAj8C,EACV,KAAZ,EAAIA,CAAJ,GAAkBA,CAAlB,CAzjpBak8C,EAyjpBb,CACA,OAAOl8C,EAHX,CAiBAo6C,QAAA,EAAO,CAACp6C,CAAD,CAAc2iB,CAAd,CAAiCtkB,CAAjC,CACP,CACI,MAAO,CAAC2B,EAFJ,IAAA,EAAAA,GAAAA,CAAAA,CAAO,IAAPA,CAAAA,CAEG,CAAa2iB,GAFH,IAAA,EAAAA,GAAAA,CAAAA,CAAY,CAAA,CAAZA,CAAAA,CAEV,CAAmCw5B,GAAY,CAAA,CAA/C,CAAsD99C,EAAOA,CAA7D,CADX,CAcA,CAAA,CArkyBJ,EAAA+9C,UAqkyBIlzD,EAAA+X,GAAA,CAAAA,QAAO,CAACg7C,CAAD,CAAUj8C,CAAV,CACP,CACIi8C,CAAAj8C,EAAA,CAAeA,CACfi8C,EAAAE,GAAA,CAAqB,CAAA,CACrBF,EAAA59C,EAAA,CAAgBtkB,IAAAA,EAHpB,CAgBAsiE,SAAA,GAAQ,CAACJ,CAAD,CACR,CACI,MAAO,CAACA,CAAAj8C,EAAD,CAAei8C,CAAAt5B,GAAf,CAAkCs5B,CAAA59C,EAAlC,CAAiD49C,CAAAE,GAAjD,CAAqEF,CAAAvF,GAArE,CADX,CAaA4F,QAAA,GAAU,CAAVA,CAAU,CAACC,CAAD,CACV,CACI,IAAIN,EAAU7B,CAAA,CAAamC,CAAA,CAAM,CAAN,CAAb,CAAuBA,CAAA,CAAM,CAAN,CAAvB,CAAiCA,CAAA,CAAM,CAAN,CAAjC,CACdN,EAAAE,GAAA,CAAqBI,CAAA,CAAM,CAAN,CACjBA,EAAA,CAAM,CAAN,CAAJ,GACIN,CAAAO,GADJ,CACoB/F,EAAA,CAAAA,CAAA,CAAkBwF,CAAAvF,GAAlB,CAAiC6F,CAAA,CAAM,CAAN,CAAjC,CADpB,CAGA,OAAON,EANX;AAkBA/yD,CAAAqT,GAAA,CAAAA,QAAO,CAACjY,CAAD,CAAMD,CAAN,CAAWD,CAAX,CAAgBD,CAAhB,CACP,CACI,IAAAE,EAAA,CAAWA,CACX,KAAAC,EAAA,CAAWA,CACX,KAAAF,EAAA,CAAWA,CACX,KAAA4X,EAAA,CAAa1X,CAAA0X,EAMb,EADIygD,CACJ,CADiD9kC,EAAA,CAAArzB,CAAA,CAAmB,UAAnB,CACjD,GAAe82D,EAAA,CAAAA,IAAA,CAAiBqB,CAAjB,CAzqpBPn8C,KA2qpBR,CAAI,IAAAlc,EAAAmc,GAAJ,GACI,IAAAg7C,EADJ,CACuB,IAAAA,EAAAzuD,OAAA,CAAwB4vD,EAAxB,CADvB,CA1qpBQjrC,KA6qpBR,CAAI,IAAArtB,EAAAmc,GAAJ,GACI,IAAAg7C,EADJ,CACuB,IAAAA,EAAAzuD,OAAA,CAAwB6vD,EAAxB,CADvB,CAIA3xC,GAAA,CAAAA,IAAA,CAh1nBQ5S,EAg1nBR,CAAqCwkD,QAAkB,CAAC1xC,CAAD,CAAS,CAiWpE,CAAA,CAAA,CA6CoBzH,IAAAA,EA9YkDtf,CA8YlDE,EAAAof,EAAAA,CAAqB,EA9YyCyH,CA8YzC,CAAO,CAAP,CAArBzH,CA5CF1uB,EAAVirB,CAAUjrB,CAAH,CA4CK0uB,CA5CKruB,EAAIm9C,CAAAt5C,OAEzB,IAAI4jE,CAAJ,CAAW,CACP78C,CAAA,CAAOwd,EAAA,CAAas/B,EAAA,CArW0C34D,CAqW1C,CAAe04D,CAAf,CAAb,CACP,IAngqBSX,EAmgqBT,GAAIl8C,CAAJ,CAAiC,CAtW6B7b,CAuW1DuF,EAAA,CAAa,mBAAb,CAAmCmzD,CAAnC,CACA,OAAA,CAF6B,CAIjC9nE,CAAA,CAAIirB,CAAJ,GA1W8D7b,CA0WjDE,EAAAqe,EACbttB,EAAA,CAAI,CAPG,CApWuD+O,CA8WlEuF,EAAA,CAAa,sDAAb,CA9WkEvF,EA+WlEuF,EAAA,CAAa,sDAAb,CAEIqzD,EAAAA,CAAY,EAChB,KADA,IAAmBC,EAAQ,CAC3B,CAAO5nE,CAAA,EAAP,CAAA,CAAY,CACR,IAAI4uB,EAAQuuB,CAAA,CAAQx9C,CAAR,CACRivB,EAAA3oB,KAAJ,EAAkB0hE,CAAlB,CACSC,CAAA,EADT,EApX8D74D,CAqX5CuF,EAAA,CAAa,KAAb,CADlB;CAGIqzD,CAMA,CANW/4C,CAAA3oB,KAMX,CALI8L,CAKJ,CALYye,EAAA,CAAuBm3C,CAAvB,CAKZ,CAJI/4C,CAIJ,EA7X0D7f,CA0XtDuF,EAAA,CAAarR,CAAA,CAAU2rB,CAAA7gB,GAAV,CAAoB,CAApB,CAAb,CAAsC,KAAtC,CAA8C9K,CAAA,CAAUtD,CAAV,EA1XQoP,CA0XOE,EAAAqe,EAAf,CAAqC,CAArC,CAA9C,CAAwF,KAAxF,CAAgGrqB,CAAA,CAAU2rB,CAAAhE,EAAV,CAAsB,CAAtB,CAAhG,CAA2H,IAA3H,CAAkI0zB,EAAA,CAAc1vB,CAAAuB,GAAd,CAAlI,CAA8J,IAA9J,CAAqKmuB,EAAA,CAAc1vB,CAAAiB,KAAd,CAArK,CAAiM,IAAjM,CAAwM9d,CAAxM,CAGJ,CADI41D,CACJ,EADgBjrC,EAChB,GADuCirC,CACvC,CADmD,EACnD,EAAAC,CAAA,CAAQ,CATZ,CAWAh9C,EAAA,EA/X8D7b,CA+XtDE,EAAAme,EACRztB,EAAA,EAdQ,CAjBhB,CAjWoE,CAAhE,CAEAuV,EAAA,CAAAA,IAAA,CArBJ,CAkCApB;CAAAvC,GAAA,CAAAA,QAAU,CAACQ,CAAD,CAAQkC,CAAR,CAAkB/D,CAAlB,CACV,CACI,IAAInB,EAAM,IACV,QAAQkF,CAAR,EAEA,KAAK,YAAL,CAiCI,MA/BA,KAAA0yD,EA+BO,CAhCP,IAAAz4D,EAAA,CAAc+F,CAAd,CAgCO,CAhCmB/D,CAgCnB,CAzBPA,CAAA+wC,UAyBO,CAzBaC,QAA4B,CAACj6B,CAAD,CAAQ,CAEpD,GAtrxBgBo6B,EAsrxBhB,EAAIp6B,CAAAm6B,QAAJ,CAAsC,CAClC,IAAAkgB,EAAOpxD,CAAAnO,MACPmO,EAAAnO,MAAA,CAAgB,EAChBihC,GAAA,CAAAj0B,CAAA,CAAeuyD,CAAf,CAAqB,CAAA,CAArB,CAHkC,CAAtC,IAKK,IArrxBWjgB,EAqrxBX,EAAIp6B,CAAAm6B,QAAJ,CACDlxC,CAAAnO,MAAA,CAAgBu/D,CAAhB,CAAuB,EADtB,KAUD,IAxrxBYjgB,EAkrxBZ,EAAIp6B,CAAAm6B,QAAJ,EAz6CRkgB,CACJ,CADW,IACX,CAy6CuBvyD,CAz6CnBiyD,EAAJ,CAy6CuBjyD,CAz6CHkyD,EAAAp9D,OAApB,CAA4C,CAA5C,GACIy9D,CADJ,CAy6CuBvyD,CAx6CZkyD,EAAA,CAAe,EAw6CHlyD,CAx6CKiyD,EAAjB,CADX,CAw6CY,EA/qxBY3f,EA+qxBZ,EAGSp6B,CAAAm6B,QAHT,GA17CQ,CAApB,CA87CuBryC,CA97CnBiyD,EAAJ,CACIM,CADJ,CA87CuBvyD,CA77CZkyD,EAAA,CAAe,EA67CHlyD,CA77CKiyD,EAAjB,CADX,EAGIM,CACA,CADO,EACP,CA07CmBvyD,CA17CnBiyD,EAAA,CAAiB,EAJrB,CA07CY,CAMI,CAAQ,IAAR,EAAAM,CAAJ,CAAkB,CACd,IAAIp/D,EAAMo/D,CAAAz9D,OACVqM,EAAAnO,MAAA,CAAgBu/D,CAChBpxD,EAAA23D,kBAAA,CAA0B3lE,CAA1B,CAA+BA,CAA/B,CAHc,CAMV,IAAZ,EAAIo/D,CAAJ,EAAoBr6C,CAAAC,eAApB,EAA0CD,CAAAC,eAAA,EAvBU,CAyBjD,CAAA,CAAA,CAEX,MAAK,YAAL,CAgBI,MAfA,KAAAhZ,EAAA,CAAc+F,CAAd,CAeO,CAfmB/D,CAenB,CAdP43D,EAAA,CACI53D,CADJ,CAGI63D,QAA0B,EAAU,CAChC,GAAIh5D,CAAA43D,EAAJ,CAAsB,CAClB,IAAIrF,EAAOvyD,CAAA43D,EAAA5kE,MACXgN,EAAA43D,EAAA5kE,MAAA;AAAyB,EACzBihC,GAAA,CAAAj0B,CAAA,CAAeuyD,CAAf,CAAqB,CAAA,CAArB,CACA,OAAO,CAAA,CAJW,CAOtB,MAAO,CAAA,CARyB,CAHxC,CAcO,CAAA,CAAA,CAEX,MAAK,MAAL,CAeI,MAdA,KAAApzD,EAAA,CAAc+F,CAAd,CAcO,CAdmB/D,CAcnB,CAbP43D,EAAA,CACI53D,CADJ,CAGI83D,QAAoB,CAACC,CAAD,CAAU,CAC1B,IAAIC,EAAa,CAAA,CACZ9yD,GAAA,CAAArG,CAAA,CAAW,CAAA,CAAX,CAAL,GACIuG,EAAA,CAAAvG,CAAA,CAAY,CAAA,CAAZ,CAEA,CADAm5D,CACA,CADan+C,EAAA,CAAAhb,CAAA,CAAYk5D,CAAA,CAAS,CAAT,CAAa,CAAzB,CAA4B,IAA5B,CACb,CAAA3yD,EAAA,CAAAvG,CAAA,CAAY,CAAA,CAAZ,CAHJ,CAKA,OAAOm5D,EAPmB,CAHlC,CAaO,CAAA,CAAA,CAtEX,CA2EA,MAAO,CAAA,CA7EX,CAsFArlC,SAAA,GAAQ,CAARA,CAAQ,CACR,CACI,GAAI,CAAA8jC,EAAJ,CAAuB,CAAA,IAMfjmE,EAAI,CANW,CAMRC,EAAI,CACCkG,OAAhB,GACInG,CACA,CADImG,MAAAshE,QACJ,CAAAxnE,CAAA,CAAIkG,MAAAuhE,QAFR,CAKA,EAAAzB,EAAA0B,MAAA,EAEgBxhE,OAAhB,EACIA,MAAAyhE,SAAA,CAAgB5nE,CAAhB,CAAmBC,CAAnB,CAfe,CAD3B,CA2CAmT,CAAAy0D,GAAA,CAAA53C,QAAO,CAACk2C,CAAD,CAAUv7C,CAAV,CACP,CACI,IAAIlsB,EAAI,GAAR,CACIwrB,EAAOwd,EAAA,CAAay+B,CAAb,CAlzpBEC,GAmzpBb,GAAIl8C,CAAJ,GACSi8C,CAAAt5B,GAAD,EAA6B,KAA7B,CAAsB3iB,CAAtB,EAAsC,CAx7jB9C,CAw7jB8C,IAAA,EAx7jB9C,CAs6jBO,CAt6jBP,CAs6jBOwiB,EAAA,CAkBuC,IAlBvCp+B,EAAA,CAkBuC4b,CAlBvC,CAt6jBP,CAHA,CAAAkD,EAGA,CAHc,CAAA,CAGd,CAFA,CAAAD,GAAA,EAEA,CADIzuB,CACJ,CADQkyB,EAAA,CAAAA,CAAA,CAAoB1G,CAApB,CAAA4G,EAAA,CAAyC5G,CAAzC,CAAgD,CAAA6C,EAAhD,CAAkE7C,CAAlE,CACR,CAAA,CAAAiD,GAAA,EAw7jBQ,GAAqF,CArmX7F,CAqmX6F,IAAA,EArmX7F,CAFA,CAAApD,GAAA,EAEA,CADIrrB,CACJ,CADQ,CAAA6P,EAAA0hB,GAAA,CAAiBhG,EAAA,CAAAA,CAAA,CAsmXoEC,CAtmXpE,CAl6QN+J,CAk6QM,CAAjB,CACR,CAAA,CAAAlK,GAAA,EAqmXQ,CACJ,CADArrB,CACA,CADI,CACJ,CAAIksB,CAAJ,EAASk9C,EAAA,CAAa3B,CAAb,CAAsBv7C,CAAtB,CAFb,CAIA,OAAOlsB,EAPX,CAkBA0U;CAAA20D,GAAA,CAAA33C,QAAO,CAAC+1C,CAAD,CAAUv7C,CAAV,CACP,CACI,IAAI7qB,EAAI,KAAR,CACImqB,EAAOwd,EAAA,CAAay+B,CAAb,CAr0pBEC,GAs0pBb,GAAIl8C,CAAJ,GACInqB,CACA,CADKomE,CAAAt5B,GAAD,EAA6B,KAA7B,CAAsB3iB,CAAtB,CAAsCE,EAAA,CAAA,IAAA7b,EAAA,CArCvCm+B,EAAA,CAqC8DA,IArC9Dp+B,EAAA,CAqC6E4b,CArC7E,CAqCuC,CAAtC,CAAqFG,EAAA,CAAA,IAAA/b,EAAA,CAAqB4b,CAArB,CACzF,CAAIU,CAAJ,EAASk9C,EAAA,CAAa3B,CAAb,CAAsBv7C,CAAtB,CAFb,CAIA,OAAO7qB,EAPX,CAkBAqT,EAAA40D,GAAA,CAAAx3C,QAAO,CAAC21C,CAAD,CAAUznE,CAAV,CAAaksB,CAAb,CACP,CACI,IAAIV,EAAOwd,EAAA,CAAay+B,CAAb,CACX,IAx1pBaC,EAw1pBb,GAAIl8C,CAAJ,CAAiC,CAC7B,GAAIi8C,CAAAt5B,GAAJ,EAAgC,KAAhC,CAAyB3iB,CAAzB,CACI6G,EAAA,CAAA,IAAAxiB,EAAA,CAxDDm+B,EAAA,CAwDwBA,IAxDxBp+B,EAAA,CAwDuC4b,CAxDvC,CAwDC,CAA6CxrB,CAA7C,CADJ,KAAA,CAGI4P,IAAAA,EAAAA,IAAAA,EA7mXR,EAAAyb,GAAA,EACA,EAAAxb,EAAAiiB,GAAA,CAAiBvG,EAAA,CAAAA,CAAA,CA4mXYC,CA5mXZ,CAl8QEkK,CAk8QF,CAAjB,CA4mXmC11B,CA5mXnC,CACA,EAAAqrB,GAAA,EAwmXI,CAKIa,CAAJ,EAASk9C,EAAA,CAAa3B,CAAb,CAAsBv7C,CAAtB,CACThB,GAAA,CAAA,IAAApb,EAAA,CAAyB,EAAzB,CAP6B,CAFrC,CAqBA4E,EAAA60D,GAAA,CAAAj+C,QAAO,CAACm8C,CAAD,CAAUpmE,CAAV,CAAa6qB,CAAb,CACP,CACI,IAAIV,EAAOwd,EAAA,CAAay+B,CAAb,CACX,IA92pBaC,EA82pBb,GAAIl8C,CAAJ,CAAiC,CAC7B,GAAIi8C,CAAAt5B,GAAJ,EAAgC,KAAhC,CAAyB3iB,CAAzB,CACIJ,EAAA,CAAA,IAAAvb,EAAA,CA9EDm+B,EAAA,CA8EwBA,IA9ExBp+B,EAAA,CA8EuC4b,CA9EvC,CA8EC,CAA6CnqB,CAA7C,CADJ,KAAA,CAGIuO,IAAAA,EAAAA,IAAAA,EAnnXR,EAAAyb,GAAA,EACA,EAAAxb,EAAAyb,GAAA,CAAiBC,EAAA,CAAAA,CAAA,CAknXYC,CAlnXZ,CAn9QEC,CAm9QF,CAAjB,CAknXmCpqB,CAlnXnC,CACA,EAAAgqB,GAAA,EA8mXI,CAKIa,CAAJ,EAASk9C,EAAA,CAAa3B,CAAb,CAAsBv7C,CAAtB,CACThB,GAAA,CAAA,IAAApb,EAAA,CAAyB,EAAzB,CAP6B,CAFrC,CA6BAw4D;QAAA,GAAS,CAATA,CAAS,CAACD,CAAD,CAAQmB,CAAR,CACT,CAGQh+C,CAAAA,CAAOA,CADQg+C,CAAAC,CAAO,CAAA9D,EAAP8D,CAA8B,CAAA5D,GACtCr6C,GAHf,KAImB3B,CACf,IAActkB,IAAAA,EAAd,GAAI8iE,CAAJ,CAAyB,CAp6B7B,CAAA,CAAA,CAEQqB,IAAAA,EAm6BQC,CAn6BClI,EAAA,CAAc,CAAd,CACTmI,EAAAA,CAk6BQD,CAl6BElI,EAAA,CAAc,CAAd,CACVoI,KAAAA,EAAsB,GAAX,EAACH,CAAD,EAA4B,GAA5B,EAAkBA,CAAlB,EAA6C,GAA7C,EAAmCA,CAAnC,CAAmD,IAAnD,CAA0D,EACzE,KAAII,EAA2B,GAAV,EAAAJ,CAAA,CAAe,IAAf,CAAsB,EAE3C,KADIK,CACJ,CADe,IAAI12D,MAAJ,CAAWw2D,CAAX,CAAsBH,CAAtB,CAA+B,KAA/B,CAAuCI,CAAvC,CAAuDJ,CAAvD,CAAgEI,CAAhE,CAAgFF,CAAhF,CAA0F,KAA1F,CAAkGC,CAAlG,CAA6GD,CAA7G,CACf,CAAO7pE,CAAP,CAAWkB,CAAAqB,MAAA,CAAQynE,CAAR,CAAX,CAAA,CAA8B,CAC1B,IAAIpnE,EAAQ4hE,EAAA,CA65BJoF,CA75BI,CAAqB5pE,CAAA,CAAE,CAAF,CAArB,CACZ,IAAcwF,IAAAA,EAAd,GAAI5C,CAAJ,CAAyB,CAAA,CAAA,CAAA,IAAA,EAAA,OAAA,CAAA,CAazB1B,CAAA,CAAIA,CAAAc,QAAA,CAZU2nE,CAYV,CAZmB3pE,CAAA,CAAE,CAAF,CAYnB,CAZ0B6pE,CAY1B,CAXoB,IAATI,EAAArnE,CAAAqnE,CAAet1C,CAAA,CA05BtBi1C,CA15BsB,CAAehnE,CAAf,CAAfqnE,CAAuC,WAWlD,CAfsB,CAiB9B,GA64BYL,CA74BRjI,GAAAj9D,OAAJ,CAMI,IALAilE,CAIA,CAw4BQC,CA54BCjI,GAAA,CAAgB,CAAhB,CAIT,CAHAkI,CAGA,CAw4BQD,CA34BEjI,GAAA,CAAgB,CAAhB,CAGV,CAFAmI,CAEA,CAFsB,GAAX,EAACH,CAAD,EAA4B,GAA5B,EAAkBA,CAAlB,EAA6C,GAA7C,EAAmCA,CAAnC,CAAmD,IAAnD,CAA0D,EAErE,CADAI,CACA,CAD2B,GAAV,EAAAJ,CAAA,CAAe,IAAf,CAAsB,EACvC,CAAAK,CAAA,CAAW,IAAI12D,MAAJ,CAAWw2D,CAAX,CAAsBH,CAAtB,CAA+B,KAA/B,CAAuCI,CAAvC,CAAuDJ,CAAvD,CAAgEI,CAAhE,CAAgFF,CAAhF,CAA0F,KAA1F,CAAkGC,CAAlG,CAA6GD,CAA7G,CACX,CAAO7pE,CAAP,CAAWkB,CAAAqB,MAAA,CAAQynE,CAAR,CAAX,CAAA,CACI9oE,CAAA,CAA4BA,CA5wB7Bc,QAAA,CAAU,GAAV,CA4wBgChC,CAAAsoE,CAAE,CAAFA,CA5wBhC,CAAwB,GAAxB,CAA6B,eAA7B,CAgyBP,KAAA,CAAOtoE,CAAP,CAAWkB,CAAAqB,MAAA,CAAQ,aAAR,CAAX,CAAA,CAAmC,CAC3BlB,CAAAA;AAAI,IACR,QAAOrB,CAAA,CAAE,CAAF,CAAAuE,YAAA,EAAP,EACA,KAAK,KAAL,CACIlD,CAAA,CAAI,CAFR,CAKA,GAAS,IAAT,EAAIA,CAAJ,CAAe,KACfH,EAAA,CAAIA,CAAAc,QAAA,CAAUhC,CAAA,CAAE,CAAF,CAAV,CAAgBqB,CAAAuT,SAAA,EAAhB,CAR2B,CAnDvC,CAu6BQ,GAAU,GAAV,EADS0zD,CAAApmE,OAAAD,CAAa,CAAbA,CACT,CAAe,CACX,IAAAmsC,EAAY,CAAA,CACZk6B,EAAA,CAAQA,CAAAnmE,OAAA,CAAa,CAAb,CAFG,CAIemmE,CAAAA,CAAAA,CAu6DlC,KAAIZ,CA1mnBR,EAAA,CAAA,CA2mnBoB53D,CAAAA,CAx6DFo6D,CAw6DEp6D,EA1mnBhBK,EAAA,CA0mnBuCg6D,CA1mnB/B7yC,YAAA,EACR,KAAS92B,CAAT,GAAc,EAAAiuB,GAAd,CAGI,GAFImD,CAEA,CAFM,CAACpxB,CAEP,CADM,CAAAiuB,GAAAhhB,CAAiBmkB,CAAjBnkB,CACN,CA0GQ6nB,CA1GR,CAAA,EAAoCnlB,CAAxC,CAA+C,CAC3C,IAAA,EAAO,CAAAif,EAAP,CAAyBwC,CAAzB,OAAA,CAD2C,CAInD,CAAA,CAAO,IATX,CA6mnBI,GAAiB,IAAjB,EAAIw4C,CAAJ,EAAyBD,CAAA5nE,MAAA,CAAc,qBAAd,CAAzB,CAEI,IADI8nE,CACKC,CADQH,CAAA7yC,YAAA,EACRgzC,CAAAA,CAAAA,CAAS,CAAlB,CAAqBA,CAArB,CA56DUJ,CA46DoBlE,EAAAthE,OAA9B,CAAwD4lE,CAAA,EAAxD,CAGI,GADIC,CACA,CA/6DEL,CA66DYlE,EAAAwE,CAAkBF,CAAlBE,CACL1hE,GAAA,CAAqBuhE,CAArB,CACT,CAAU,IAAV,EAAAE,CAAJ,CAAoB,CAChBH,CAAA,CAAYG,CAAA,EAUZ,MAXgB,CAeX,IAAjB,EAAIH,CAAJ,GACI1C,CADJ,CACc7B,CAAA,CAAauE,CAAb,CADd,CA77DI,IAg8DJ,CAh8DI,CAg8DG1C,CAh8DH,CAAa,MAAOA,EACO,EAA3B,EAAIY,CAAAvmE,QAAA,CAAc,IAAd,CAAJ,CACI+nB,CADJ,CACY,EADZ,CAEkC,CAA3B,EAAIw+C,CAAAvmE,QAAA,CAAc,IAAd,CAAJ,CACH+nB,CADG,CACK,CADL,CAE0B,CAF1B,EAEIw+C,CAAAvmE,QAAA,CAAc,GAAd,CAFJ,GAGH+nB,CAHG,CAGK,EAHL,CAKP2B,EAAA,CAAO+4C,EAAA,CAAAA,CAAA,CAAqB8D,CAArB,CAhBc,CAkBb,IAAZ,EAAI78C,CAAJ,GACIi8C,CADJ,CACc7B,CAAA,CAAap6C,CAAb,CAAmB2iB,CAAnB;AAA8BtkB,CAA9B,CADd,CAGA,OAAO49C,EA1BX,CAoCA+C,QAAA,GAAgB,CAAhBA,CAAgB,CAAC/C,CAAD,CAAUgD,CAAV,CAChB,CACQA,CAAJ,GACQ1qE,CADR,CACY0qE,CAAAnoE,MAAA,CAAe,eAAf,CADZ,IAGQmlE,CAAAO,GAHR,CAGwB/F,EAAA,CAAAA,CAAA,CAAkBwF,CAAAvF,GAAlB,CAAiCniE,CAAA,CAAE,CAAF,CAAjC,CAHxB,CADJ,CAgBAqpE,QAAA,GAAO,CAAC3B,CAAD,CAAUv7C,CAAV,CACP,CACwB,IAApB,EAAIu7C,CAAAj8C,EAAJ,GACIi8C,CAAAj8C,EADJ,EACqBU,CADrB,EAC4B,CAD5B,CADJ,CAyBAw+C,QAAA,GAAS,CAATA,CAAS,CAACjD,CAAD,CACT,CACI,OAAQA,CAAAt5B,GAAA,CAAmB,GAAnB,CAAyB,EAAjC,EAZOzZ,CAAA,CAYgCi2C,CAZhC,CAYiDlD,CAAAj8C,EAZjD,CAWX;AAsNAo7C,QAAA,GAAW,CAAXA,CAAW,CAACgE,CAAD,CACX,CACI,CAAAj7D,EAAA,CAAW,CACX,EAAAjB,GAAA,CA/0oBQoW,UAg1oBR,EAAA4hD,EAAA,CAAoB,IACpB,EAAAC,EAAA,CAAsB,EAKlBkE,EAAAA,CAAU5I,EAAA,CAAAA,CAAA,CAAkB2I,CAAA7oE,QAAA,CAAgB,MAAhB,CAAuB,KAAvB,CAAAA,QAAA,CAAsC,KAAtC,CAA4C,UAA5C,CAAlB,CAA2E,CAAA,CAA3E,CAAkF,GAAlF,CACd,IAAI8oE,CAAApmE,OAAJ,CACI,IAAK9D,IAAIA,CAAT,GAAc4iB,GAAd,CAAwC,CAv7vBhD,CAAA,CAAA,CADqBhjB,IAAAA,EAAAA,IAAAA,EAEjB,IAAI+I,KAAAtE,UAAAlD,QAAJ,CACI,CAAA,CAs7vBoB+oE,CAt7vBb/oE,QAAA,CAs7vBsBnB,CAt7vBtB,CAAaJ,CAAb,CADX,KAAA,CAGAA,CAAA,CAAIA,CAAJ,EAAS,CACD,EAAR,CAAIA,CAAJ,GAAWA,CAAX,EAm7vBwBsqE,CAn7vBRpmE,OAAhB,CACQ,EAAR,CAAIlE,CAAJ,GAAWA,CAAX,CAAe,CAAf,CACA,KAAK,IAAIK,EAi7vBeiqE,CAj7vBXpmE,OAAb,CAAuBlE,CAAvB,CAA2BK,CAA3B,CAA8BL,CAAA,EAA9B,CACI,GAAIA,CAAJ,GAg7vBoBsqE,EAh7vBpB,EAg7vBoBA,CAh7vBN,CAAEtqE,CAAF,CAAd,GAg7vB6BI,CAh7vB7B,CAA0B,MAAA,CAE9B,EAAA,CAAQ,EATR,CADJ,CAw7vB2C,CAA/B,EAAI,CAAJ,GACI,CAAA+N,GACA,EADoB6U,EAAA,CAAyB5iB,CAAzB,CACpB,CAAA,CAAAuU,EAAA,CAAavU,CAAb,CAAiB,mBAAjB,CAFJ,CADoC,CAXhD,CA4BA61B,QAAA,GAAW,CAAXA,CAAW,CAACs0C,CAAD,CAAaC,CAAb,CACX,CACI,IAAKpqE,IAAIA,CAAT,GAAc4iB,GAAd,CACI,GAAIunD,CAAJ,EAAkBvnD,EAAA,CAAyB5iB,CAAzB,CAAlB,CAA+C,CAC3C,CAAA8lE,GAAA,CAAgB9lE,CAAhB,CAAA,CAAqBoqE,CACrB,MAF2C,CAFvD;AAkBAr2D,CAAAqtD,GAAA,CAAAA,QAAW,CAAC1tC,CAAD,CACX,CACIA,CAAA,CAAOA,CAAAgD,YAAA,EACP,KAAI/C,EAAO02C,EAAA,CAAmB32C,CAAnB,CACC,KAAZ,EAAIC,CAAJ,GACIA,CACI,CADI,EACJ,CAAkB,GAAlB,EAAAD,CAAApyB,OAAA,CAAY,CAAZ,CAAA,GACAqyB,CACI,CADG,CAACD,CAAApyB,OAAA,CAAY,CAAZ,CACJ,CAAO,CAAP,CAAAqyB,CAAA,EAAmB,CAAnB,CAAYA,CAFhB,CAFR,IAIkCA,CAJlC,CAI0C,EAJ1C,CAOA,OAAOA,EAVX,CAoBA22C,SAAA,GAAU,CAAVA,CAAU,CAAC32C,CAAD,CACV,CAEI,GAAIA,CAAJ,CAAW42C,EAAX,EAAmC,CAAA1jD,EAAnC,CAA+C,IAAA6M,EAAO82C,EAAA,CAAuB72C,CAAvB,CACtD,OAAOD,EAAP,EAAe,EAHnB;AAgBA3f,CAAAstD,GAAA,CAAAA,QAAW,CAAC1tC,CAAD,CACX,CAEI,GAAY,CAAZ,EAAIA,CAAJ,CACI,GAAW,CAAX,CAAIA,CAAJ,CACI,IAAA3xB,EAAQ,IAAAiN,EAAA4c,EAAA,CAAiB8H,CAAjB,CADZ,KAGK,IAAW,EAAX,CAAIA,CAAJ,CACD3xB,CAAA,CAAQ,IAAAiN,EAAA8qB,GAAA,CAAiBpG,CAAjB,CAAsB,CAAtB,CADP,KAGA,IAAW,EAAX,CAAIA,CAAJ,CACD3xB,CAAA,CAAQ,IAAAiN,EAAAirB,EAAA,CAAsBvG,CAAtB,CAA2B,EAA3B,CADP,KAGA,CACD,IAAI1kB,EAAM,IAAAA,EAAV,CACI4X,EAAQ,IAAAA,EACZ,QAAO8M,CAAP,EACA,KAAK82C,EAAL,CACIzoE,CAAA,CAAQi6B,EAAA,CAAA,IAAAhtB,EAAA,CACR,MACJ,MAAKy7D,EAAL,CACI1oE,CAAA,CAAQiN,CAphabysB,GAqhaK,MACJ,MAAKivC,EAAL,CACI3oE,CAAA,CAAQiN,CAAA+kB,EACR,MACJ,MAAK42C,EAAL,CACI5oE,CAAA,CAAQiN,CAhjab6sB,GAgjaK,CAhjaS,KAijaT,MACJ,MAAK+uC,EAAL,CACI7oE,CAAA,CAAQq1B,EAAA,CAAApoB,CAAA,CACR,MACJ,MAAK67D,EAAL,CACI9oE,CAAA,CAAQ21B,EAAA,CAAA1oB,CAAA,CACR,MACJ,MAAK87D,EAAL,CACI/oE,CAAA,CAAQ61B,EAAA,CAAA5oB,CAAA,CACR,MACJ,MAAK+7D,EAAL,CACIhpE,CAAA,CAAQiN,CAx3bbknB,EAy3bK,MACJ,MAAKo0C,EAAL,CACQ1jD,CAAJ,GAAW7kB,CAAX,CAAmB6kB,CAruoBxBnC,GAquoBK,CACA,MACJ,MAAKumD,EAAL,CACQpkD,CAAJ,GAAW7kB,CAAX,CAAmB6kB,CAltoBxBhC,GAktoBK,CACA,MACJ,MAAKqmD,EAAL,CACQrkD,CAAJ,GAAW7kB,CAAX,CAAmB6kB,CA9roBxBjC,GA8roBK,CAhCJ,CAHC,CAwCT,MAAO5iB,EApDX,CA4EA+R;CAAAjL,QAAA,CAAAA,QAAO,CAAC8G,CAAD,CAAWoG,CAAX,CACP,CACQA,CAAJ,GACIpG,CADJ,EACgB,IADhB,CACuBm6D,EAAA,CAAAA,IAAA,CAAe9E,CAAA,CAAa,IAAAh2D,EA1hb5Cm3B,EA0hb+B,CA1hbjB,KA0hbiB,CAAf,CADvB,CAIA,IAAI2/B,CAAA,IAAAA,EAAJ,EAAyBn2D,CAAzB,EAAqC,IAAAm2D,EAArC,CAGA,GAFA,IAAAA,EAEI,CAFgBn2D,CAEhB,CAAA,IAAA7B,GAAA,CAz/oBImW,SAy/oBR,CACI,IAAA8hD,EAAA78D,KAAA,CAAyByG,CAAzB,CADJ,KAAA,CAKA,IAAIu7D,CACJ,IAAK,IAAAp9D,GAAL,CA7/oBQqW,WA6/oBR,EAA+C,IAAAnV,EAA/C,GAA4Dk8D,CAA5D,CAAuE,IAAAl8D,EAx2ehEX,MAAAmb,EAw2eP,GAAgGpU,EAAA,CAAAA,IAAA,CAAY,CAAA,CAAZ,CAAhG,CACI0U,EAAA,CAAAA,IAAA,CACA,CAAIohD,CAAJ,GAAcv7D,CAAd,EAA0B,eAA1B,CAGJ,KAAA2E,EAAA,CAAa3E,CAAb,CAUI,KAAAX,EAAJ,GAAcA,CApted,CAotecA,IAAAA,EApted,CAkuBAy1B,EAAA,CAAAA,CAAA,CAluBA,CAmuBA,CAAA9D,GAnuBA,CAmuBwB,CAnuBxB,CAyuBArW,CAzuBIpb,EAAJ,EAAcob,EAAA,CAyuBdA,CAzuBcpb,EAAA,CAFH81B,IAAAA,EAEG,CAoted,CArBA,CARJ,CAgEA4gC;QAAA,GAAW,CAAXA,CAAW,CACX,CACI,IAAIjmE,CACJ,IAAI,CAAC4vC,EAAA,CAAAA,CAAA,CAAL,CACQ,CAAAm2B,EAIJ,EAJgC,CAAAA,EAAA7hE,OAIhC,EAHI,CAAAyQ,EAAA,CAAa,kCAAb,CAGJ,CADA,CAAAkxD,EACA,CAD2B,CAC3B,CAAA,CAAAE,EAAA,CAA2B,EAL/B,KAQA,IAAI,CAAC,CAAAA,EAAL,EAAiC,CAAC,CAAAA,EAAA7hE,OAAlC,CAAmE,CAC/D,CAAA6hE,EAAA,CAA+Bh9D,KAAJ,CAAUyiE,EAAV,CAC3B,KAAKxrE,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgB,CAAA+lE,EAAA7hE,OAAhB,CAAiDlE,CAAA,EAAjD,CAKI,CAAA+lE,EAAA,CAAyB/lE,CAAzB,CAAA,CAA8BqlE,CAAA,EAElC,EAAAQ,EAAA,CAA2B,CAEvB,EAAAlxD,EAAA,CAAa,sCAAb,CAX2D,CAVvE,CAkCAuV,QAAA,GAAQ,CAARA,CAAQ,CAACoa,CAAD,CAAe2/B,CAAf,CACR,CACI,GAAI,CAACwH,EAAA,CAAAA,CAAA,CAAcxH,CAAd,CAAL,CAA4B,MAAO,CAAA,CACnC/5C,GAAA,CAAA,CAAA7a,EAAA,CAAkBi1B,CAAlB,CACA,OAAO,CAAA,CAHX;AAeAla,QAAA,GAAO,CAAPA,CAAO,CAACmW,CAAD,CAAUmrC,CAAV,CAAiBC,CAAjB,CACP,CACI,GAAI,CAACF,EAAA,CAAAA,CAAA,CAAL,CAAsB,MAAO,CAAA,CAE7B,KAAI9J,EAAO,EACG,KAAd,GAAI+J,CAAJ,GAEI/J,CAFJ,CAEW,CADP+J,CACO,CADE,CAAC,CAAA/E,GACH,EAD+C,IAC/C,EADyB,CAAAA,GACzB,EAAO,IAAP,CAAc,GAFzB,CAKA,EAAApmC,EAAA,CAAe,CAEVA,EAAL,EAMQqP,EAAA,CAAAA,CAAA,CANR,EAM8BE,EAAA,CAAAA,CAAA,CAAsB,CAAAzgC,EAnrb7C4c,EAAA,CA3nPKwf,CA2nPL,CAmrbuB,CAAwC,CAAxC,CAK9B,IAAI,CACAlL,CAAA,CAAUwE,EAAA,CAAA,CAAA11B,EAAA,CAAwBkxB,CAAxB,CACV,KAAIlW,EAAc,CAAAhb,EAAA+a,GAAA,CAAiBmW,CAAjB,CACA,EAAlB,CAAIlW,CAAJ,GACIC,EAAA,CAAA,CAAAjb,EAAA,CAAsBgb,CAAtB,CAIA,CAHA,CAAAkW,EAGA,EAHgBlW,CAGhB,CAFAE,EAAA,CAAA,CAAAlb,EAAA,CAAmBgb,CAAnB,CAAgC,CAAA,CAAhC,CAEA,CADAG,EAAA,CAAA,CAAAnb,EAAA,CAAwBgb,CAAxB,CACA,CAAA,CAAAy8C,EAAA,EALJ,CAHA,CAWJ,MAAMr8C,CAAN,CAAiB,CAKW,QAAxB,EAAI,MAAOA,EAAX,GACQ7qB,CAEJ,CAFQ6qB,CAER,CADA,CAAA8V,EACA,CADe,CACf,CAAAnrB,EAAA,CAAA,CAAA/F,EAAA,CAAkBzP,CAAA8qB,MAAlB,EAA6B9qB,CAAAsJ,QAA7B,CAHJ,CALa,CAiBO,CAAA,CAAxB,GAAIyiE,CAAJ,GACQ,CAAA1kD,EACJ,EADgB,CAAAA,EAAAH,KAAA,EAChB,CAAA6D,EAAA,CAAA,CAAApb,EAAA,CAAyB,EAAzB,CAFJ,CAKAyzB,GAAA,CAAAA,CAAA,CAAkB0oC,CAAlB,EAA2B,CAAA,CAA3B,CAAkC/J,CAAlC,CACA,OAAuB,EAAvB,CAAQ,CAAAphC,EAxDZ,CAiEApW,QAAA,GAAO,CAAPA,CAAO,CAACyb,CAAD,CACP,CACQ,CAAAv2B,EAAJ,EAAc8a,CAAA,CAAA,CAAA9a,EAAA,CAAiBu2B,CAAjB,CADlB;AAWA5C,QAAA,GAAY,CAAZA,CAAY,CAAC0oC,CAAD,CAAQ/J,CAAR,CACZ,CACI,GAAK,CAAA5+B,GAAL,CAAA,CAEc/9B,IAAAA,EAAd,GAAI0mE,CAAJ,GAAyBA,CAAzB,CAAiC,CAAA,CAAjC,CAEI/J,EAAJ,EACI,CAAAhtD,EAAA,CAAai3D,EAAb,CAAoCjK,CAApC,CAGatyD,EAAAA,CAAAA,CAAAA,EACjB,IAv9ZA,CAu9ZA,CAv9ZQ,CAAA23B,EAAD,CAp8QKkF,GAo8QL,CAA0C,CAAArE,GAA1C,CAA4D,CAAAC,GAA5D,EAA+E,CAA/E,CAAoF,CAu9Z3F,CAAgB,CACZ,IAAIsF,EAASy+B,CAATz+B,EAAuB,CAE3B,EAAAz4B,EAAA,CAAa,aAAb,CAA6Bwf,CAAA,CAAAA,CAAA,CAAe03C,CAAf,CAA4B,GAA5B,CAAkC,CAAlC,CAA7B,CAAoE,IAApE,EADuB,CAATzc,CAAAhiB,CAAAgiB,CAAY0c,EAAA,CAAc,CAAC1+B,CAAf,CAAZgiB,CAAqCj7B,CAAA,CAAAA,CAAA,CAAeiZ,CAAf,CACnD,EAAqF,GAArF,CAHY,CAMhB,CAAAg4B,EAAA,CAAuBC,CAAA,CAAa,CAAAh2D,EAhwb7B4c,EAAA,CA3nPKwf,CA2nPL,CAgwbgB,CAMlBigC,EAAL,EAA4B,CAA5B,EAAc,CAAAjF,EAAd,CAGIsF,EAAA,CAAAA,CAAA,CAHJ,CACIC,EAAA,CAAAA,CAAA,CAtBJ,CADJ,CAsCAP,QAAA,GAAQ,CAARA,CAAQ,CAACxH,CAAD,CACR,CACQ,IAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,IAAoC,CAAA,CAAA,CAAA,EAAA,CAnlfnC,CAAAv1D,MAAAK,GAAL,CAIA,CAJA,CAIO,CAAA,CAJP,EACI,CAAA4F,EAAA,CAAa,CAAAP,SAAA,EAAb,CAA+B,cAA/B,CACA,CAAA,CAAA,CAAO,CAAA,CAFX,CAmlfwC,CAAA,CAAA,CAAA,CAAA,CAApC,CAAJ,OAAI,EAAJ,EAAiE,CAAA/E,EApkf1DX,MAAAmb,EAokfP,EACSo6C,CACE,EADM,CAAAtvD,EAAA,CAAa,0CAAb,CACN,CAAA,CAAA,CAFX,EAIO,CAACU,EAAA,CAAA,CAAAhG,EAAA,CALZ,CAgBA8E,CAAA0B,GAAA,CAAAA,QAAO,CAAClN,CAAD,CAAOmf,CAAP,CACP,CACI,MAAI,CAACA,CAAL,GAMI,IAAAlB,MAAA,CAAW,CAAA,CAAX,CAIIje,CAAAA,CAVR,EAWe,IAAAqf,QAAA,CAAarf,CAAb,CAXf,CAcO,CAAA,CAfX,CA0BAwL;CAAA2B,GAAA,CAAAA,QAAS,CAACC,CAAD,CAAQC,CAAR,CACT,CACQA,CAAJ,EAAe,IAAArB,EAAA,CAAaoB,CAAA,CAAO,YAAP,CAAsB,eAAnC,CACf,OAAOA,EAAA,CAAO,IAAAkS,KAAA,EAAP,CAAqB,CAAA,CAFhC,CAaA9T,EAAAyS,MAAA,CAAAA,QAAK,CAACq9C,CAAD,CACL,CACIgC,EAAA,CAAAA,IAAA,CACA,KAAAa,EAAA,CAA+C,CAC/C,KAAAX,EAAA,CAAoB,IACpB,KAAA5lC,EAAA,CAAe,CACf,KAAA6kC,EAAA,CAAuBC,CAAA,CAAa,IAAAh2D,EAt1b7B4c,EAAA,CA3nPKwf,CA2nPL,CAs1bgB,CAMvB,KAAA/8B,MAAAmb,EAAA,CAAqB,CAAA,CACrBoiD,GAAA,CAAAA,IAAA,CACKhI,EAAL,EAAajhC,EAAA,CAAAA,IAAA,CAbjB,CAwBA7uB,EAAA8T,KAAA,CAAAA,QAAI,EACJ,CACI,IAAIC,EAAQ,IAAIC,CAAJ,CAAU,IAAV,CACZD,EAAAE,IAAA,CAAU,CAAV,CAAak/C,EAAA,CAAc,IAAAlC,EAAd,CAAb,CACAl9C,EAAAE,IAAA,CAAU,CAAV,CAAak/C,EAAA,CAAc,IAAA/B,EAAd,CAAb,CACAr9C,EAAAE,IAAA,CAAU,CAAV,CAAa,CAAC,IAAAk5C,EAAD,CAAiB,IAAAF,EAAjB,CAAiC,IAAAjzD,GAAjC,CAAb,CACA+Z,EAAAE,IAAA,CAAU,CAAV,CAAa,IAAAo9C,EAAb,CACA,OAAOt9C,EAAAvf,KAAA,EANX,CAkBAwL;CAAA6T,QAAA,CAAAA,QAAO,CAACrf,CAAD,CACP,CACI,IAAI3I,EAAI,CACQgF,KAAAA,EAAhB,GAAI2D,CAAA,CAAK,CAAL,CAAJ,GACI,IAAAy8D,EAKA,CALuBmC,EAAA,CAAAA,IAAA,CAAgB5+D,CAAA,CAAK3I,CAAA,EAAL,CAAhB,CAKvB,CAJA,IAAAulE,EAIA,CAJuBgC,EAAA,CAAAA,IAAA,CAAgB5+D,CAAA,CAAK3I,CAAA,EAAL,CAAhB,CAIvB,CAHA,IAAAshE,EAGA,CAHiB34D,CAAA,CAAK3I,CAAL,CAAA,CAAQ,CAAR,CAGjB,CAF6B,QAE7B,EAFI,MAAO,KAAAshE,EAEX,GAFuC,IAAAA,EAEvC,CAFwD,CAAC,IAAAA,EAAD,CAExD,EADA,IAAAF,EACA,CADiBz4D,CAAA,CAAK3I,CAAL,CAAA,CAAQ,CAAR,CACjB,CAAA,IAAAmO,GAAA,EAAoBxF,CAAA,CAAK3I,CAAL,CAAA,CAAQ,CAAR,CANxB,CAQI2I,EAAA,CAAK,CAAL,CAAJ,GAAa,IAAA68D,EAAb,CAAiC78D,CAAA,CAAK,CAAL,CAAjC,CACA,OAAO,CAAA,CAXX,CAuBAwL,EAAA+C,MAAA,CAAAA,QAAK,CAACtL,CAAD,CAAK20B,CAAL,CACL,CACS,IAAAkmC,EAAL,EAAiB,IAAA9xD,EAAA,CAAa,SAAb,CACjB,KAAAjG,MAAAmb,EAAA,CAAqB,CAAA,CACrB,KAAAg9C,GAAA,CAAej7D,CACf,KAAAg7D,GAAA,CAAoBrmC,CAJxB,CAgBApsB;CAAA2S,KAAA,CAAAA,QAAI,CAAClb,CAAD,CAAK20B,CAAL,CACJ,CACI,GAAI,IAAA7xB,MAAAmb,EAAJ,CAAwB,CACpB,IAAAnb,MAAAmb,EAAA,CAAqB,CAAA,CACrB,KAAA0W,EAAA,CAAeA,CAAf,CAAyB,IAAAqmC,GACzB,IAAI,CAAC,IAAAH,EAAL,CAAiB,CACTyF,CAAAA,CAAW,SACf,IAAI,IAAA3rC,EAAJ,CAAkB,CACA30B,CAAVugE,EAAe,IAAAtF,GACnB,KAAIpmC,EAA8B,CAAV,CAAA0rC,CAAA,CAAalqE,IAAA2+B,MAAA,CAA0B,GAA1B,CAAW,IAAAL,EAAX,CAAiC4rC,CAAjC,CAAb,CAAyD,CACjFD,EAAA,EAAY,IACRt8B,GAAA,CAAAA,IAAA,CAAJ,GACIs8B,CAOA,EAPY,IAAApF,EAOZ,CAPiC,iBAOjC,CAAA,IAAAA,EAAA,CAAqB,CARzB,CAUAoF,EAAA,EAAY,IAAA3rC,EAAZ,CAA2B,WAA3B,CAAyC4rC,CAAzC,CAAmD,OAAnD,CAA6D1rC,CAA7D,CAAgF,MAdlE,CAAlB,IAgBQxqB,EAAA,CAAAA,IAAA,CA73pBRuO,WA63pBQ,CAAJ,GAMI0nD,CANJ,EAMgB,kDANhB,CASJ,KAAAv3D,EAAA,CAAau3D,CAAb,CA3Ba,CA6BjBlpC,EAAA,CAAAA,IAAA,CAAkB,CAAA,CAAlB,CACAE,GAAA,CAAAA,IAAA,CACA+oC,GAAA,CAAAA,IAAA,CAAyB,IAAA58D,EAz8btB4c,EAAA,CA3nPKwf,CA2nPL,CAy8bH,CACA,KAAA06B,EAAA,CAAoB,IAnCA,CAD5B,CAsDAv2B,SAAA,GAAa,CAAbA,CAAa,CACb,CACI,MAA+D,EAA/D,CAAsC,CAAA61B,EAAAvhE,OAAtC,EAAoE,CAAC,CAAC,CAAA4hE,GAD1E;AAeAh2B,QAAA,GAAgB,CAAhBA,CAAgB,CAAC7kB,CAAD,CAAOmhD,CAAP,CAChB,CACI,IAAIzgC,EAAU,EAQTygC,EAAL,GACIzgC,CA4BA,CA5BSvgB,EAAA,CAAA,CAAA/b,EAAA,CAAqB4b,CAArB,CA4BT,CAhtrBQohD,CAgtrBR,EAAI1gC,CAAJ,GAAmC,CAAAt8B,EA7/bhCm3B,EA6/bH,CA7/biB,KA6/bjB,GAA2Dvb,CAA3D,GACIA,CADJ,CACWsgB,EAAA,CAAA,CAAAl8B,EAAA,CAAmB,CAAnB,CADX,CA7BJ,CAqCA,IAAa,CAAb,CAAI+8D,CAAJ,GACQ,CAAAtG,GADR,EAEY,CAAC,EAAE,CAAAA,GAFf,EAIQwG,EAAA,CAAAA,CAAA,CAAqBrhD,CAArB,CAA2B,CAA3B,CAA8B,CAAAw6C,EAA9B,CAJR,EAKQ,MAAO,CAAA,CAUD,EAAd,EAAI2G,CAAJ,EAAmB,CAAArG,EAAA7hE,OAAnB,GACI,CAAA4iE,EAAA,EAIA,CAHa,CAGb,CAHIn7B,CAGJ,GAFIA,CAEJ,CAFavgB,EAAA,CAAA,CAAA/b,EAAA,CAAqB4b,CAArB,CAEb,EAhurBQohD,KAgurBR,GAAK1gC,CAAL,CAAc,KAAd,IAEI,CAAAzf,GAAA,CADc,CAAA65C,EAAAmB,CAAyB,CAAArB,EAAzBqB,CACd,CAAsBj8C,CAAtB,CAEA,CAAI,EAAE,CAAA46C,EAAN,EAAkC,CAAAE,EAAA7hE,OAAlC,GAAmE,CAAA2hE,EAAnE,CAA8F,CAA9F,CAJJ,CALJ,CAYA,OAAO,CAAA,CAzEX,CAqFAtxB,QAAA,GAAe,CAAfA,CAAe,CACf,CACI,IAAIllC,EAAM,CAAAA,EACV,IAAIA,CAj3fGX,MAAAmb,EAi3fP,CASI,KARAC,GAAA,CAAAza,CAAA,CAAU,CAAAA,EAhjcPm3B,EAgjcH,CAhjciB,KAgjcjB,CAQO,CANPrc,EAAA,CAAAA,CAAA,CAMO,CAAA,EAAP,CAEJ,MAAO,CAAA,CAbX,CAgDA+U,QAAA,GAAe,CAAfA,CAAe,CAACjU,CAAD,CAAOshD,CAAP,CACf,CACQD,EAAA,CAAAA,CAAA,CAAqBrhD,CAArB,CAA2BshD,CAA3B,EAAiC,CAAjC,CAAoC,CAAA7G,EAApC,CAAJ,EACIv7C,EAAA,CAAAA,CAAA,CAAa,CAAA,CAAb,CAFR,CAwBAkV,QAAA,GAAgB,CAAhBA,CAAgB,CAACpU,CAAD,CAAOshD,CAAP,CAChB,CACQD,EAAA,CAAAA,CAAA,CAAqBrhD,CAArB,CAA2BshD,CAA3B,EAAiC,CAAjC,CAAoC,CAAA5G,EAApC,CAAJ,EACIx7C,EAAA,CAAAA,CAAA,CAAa,CAAA,CAAb,CAFR;AAaAy7C,QAAA,GAAgB,CAAhBA,CAAgB,CAChB,CAAA,IACQ5lE,CACJ,EAAAylE,EAAA,CAAkB,CAAC,IAAD,CAClB,IAAwBzgE,IAAAA,EAAxB,GAAI,CAAA0gE,EAAJ,CACI,IAAK1lE,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgB,CAAA0lE,EAAAxhE,OAAhB,CAAwClE,CAAA,EAAxC,CAA6C,CACzC,IAAAknE,EAAU,CAAAxB,EAAA,CAAgB1lE,CAAhB,CACV,KAAAirB,EAAOwd,EAAA,CAAay+B,CAAb,CACFA,EAAAt5B,GAAL,CAGI3b,EAAA,CAAA,CAAA3iB,EAAA,CAAwB2b,CAAxB,CAA8B,CAAA,CAA9B,CAHJ,EACI5b,CAzqZR,CAyqZQA,CAAAA,EAzqZR,CAF4Cm9D,EAAE,CAAAjkC,GAE9C,EAAcgB,EAAA,CAAAA,CAAA,CAwqZV,CAHyC,CAUjD,CAAAm8B,EAAA,CAAkB,CAAC,IAAD,CAClB,IAAyB1gE,IAAAA,EAAzB,GAAI,CAAA2gE,EAAJ,CACI,IAAK3lE,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgB,CAAA2lE,EAAAzhE,OAAhB,CAAyClE,CAAA,EAAzC,CACIknE,CAEA,CAFU,CAAAvB,EAAA,CAAiB3lE,CAAjB,CAEV,CADAirB,CACA,CADOwd,EAAA,CAAay+B,CAAb,CACP,CAAKA,CAAAt5B,GAAL,CAGI3b,EAAA,CAAA,CAAA3iB,EAAA,CAAwB2b,CAAxB,CAA8B,CAAA,CAA9B,CAHJ,EACI5b,CArrZR,CAqrZQA,CAAAA,EArrZR,CAFsBm9D,EAAE,CAAAhkC,GAExB,EAAce,EAAA,CAAAA,CAAA,CAorZV,CAOR,EAAAo8B,EAAA,CAAmB,CAAC,IAAD,CAKnB,EAAAoB,GAAA,CAAuB,CACvB,EAAAjB,GAAA,CAA0B,CAhC9B;AA8DA3xD,CAAAmqB,GAAA,CAAAA,QAAa,CAACmuC,CAAD,CAASvF,CAAT,CAAkBE,CAAlB,CACb,CACI,IAAIl0D,EAAW,CAAA,CAYVk0D,EAAL,EACIsF,EAAA,CAAAA,IAAA,CAAoBD,CAApB,CAA4BvF,CAA5B,CAA2C,CAAA,CAA3C,CAAkD,CAAA,CAAlD,CAGJ,IAAIuF,CAAJ,EAAc,IAAAhH,EAAd,CAA+B,CAC3B,IAAIx6C,EAAOwd,EAAA,CAAay+B,CAAb,CACX,IAnhsBSC,EAmhsBT,GAAIl8C,CAAJ,CACI,IAAAtW,EAAA,CAAa,mBAAb,CAAmCw1D,EAAA,CAAAA,IAAA,CAAejD,CAAf,CAAnC,CACA,CAAAh0D,CAAA,CAAW,CAAA,CAFf,KAGO,CACH,IAAIgf,EAAUu6C,CAAVv6C,EAAoB,IAAAyzC,EAKb,MAAX,CAAI16C,CAAJ,GAAmBi8C,CAAAt5B,GAAnB,CAAuC,CAAA,CAAvC,CACA,IAAKs5B,CAAAt5B,GAAL,CAAA,CAGIt+B,IAAAA,EAAAA,IAAAA,EAnlmBR,EAAAof,EAAA,CAmlmB6BzD,CAnlmB7B,GADsB,CAAA0C,EACtB,CAAA2Q,GAAA,CAmlmB6BrT,CAnlmB7B,CAA6C,CAAA6C,EAA7C,CAmlmBmCoE,CAnlmBnC,CAglmBI,CAAA,IACI7iB,EA9wZR,CA8wZQA,IAAAA,EA9wZR,EA8wZmC6iB,CAhxZrBs6C,CAAQ,CAAAhkC,GAAA,EAARgkC,CAA8B,CAAAjkC,GAAA,EAE5C,GAAcgB,EAAA,CAAAA,CAAA,CAswZP,CALoB,CAoB3Br2B,CAAJ,GACIu5D,CAAAljE,KAAA,CAAY29D,CAAZ,CACA,CAAIE,CAAJ,CACIF,CAAAE,GADJ,CACyB,CAAA,CADzB,EAIIuF,EAAA,CAAAA,IAAA,CAAqBF,CAArB,CAA6BA,CAAAvoE,OAA7B,CAA2C,CAA3C,CAA8C,KAA9C,CACA,CAAA+hE,EAAA,CAAAA,IAAA,CALJ,CAFJ,CArCJ,CAgEAyG;QAAA,GAAc,CAAdA,CAAc,CAACD,CAAD,CAASvF,CAAT,CAA2BE,CAA3B,CAAuCnD,CAAvC,CACd,CAGI,IAFA,IAAI2I,EAAS,CAAA,CAAb,CACI3hD,EAAOwd,EAAA,CAAay+B,CAAb,CADX,CAESlnE,EAAI,CAAb,CAAgBA,CAAhB,CAAoBysE,CAAAvoE,OAApB,CAAmClE,CAAA,EAAnC,CAEI,GADI6sE,CACA,CADeJ,CAAA,CAAOzsE,CAAP,CACf,CAAAirB,CAAA,EAAQwd,EAAA,CAAaokC,CAAb,CAAR,GACI,CAACzF,CADL,EACmByF,CAAAzF,GADnB,CAAJ,CACgD,CACxCwF,CAAA,CAAS,CAAA,CAEAC,EAAAzF,GAAL,EAAiCnD,CAAjC,EACI0I,EAAA,CAAAA,CAAA,CAAqBF,CAArB,CAA6BzsE,CAA7B,CAAgC,SAAhC,CAEJysE,EAAAn5D,OAAA,CAActT,CAAd,CAAiB,CAAjB,CACIysE,EAAJ,EAAc,CAAAhH,EAAd,GACQvzC,CACJ,CADcu6C,CACd,EADwB,CAAA9G,EACxB,CAAKkH,CAAAj/B,GAAL,CAGI3b,EAAA,CAAA,CAAA3iB,EAAA,CAAwB2b,CAAxB,CAA8BiH,CAA9B,CAHJ,EACI7iB,CAjzZpB,CAizZoBA,CAAAA,EAjzZpB,EAizZkD6iB,CAnzZpCs6C,CAAQ,EAAE,CAAAhkC,GAAVgkC,CAA8B,EAAE,CAAAjkC,GAE9C,GAAcgB,EAAA,CAAAA,CAAA,CAgzZE,CAFJ,CAYKsjC,EAAAzF,GAAL,EACInB,EAAA,CAAAA,CAAA,CAEJ,MAtBoC,CA6BpD,MAAO2G,EAnCX,CA6CAE,QAAA,GAAe,CAAfA,CAAe,CAACL,CAAD,CACf,CACI,IAAK,IAAIzsE,EAAI,CAAb,CAAgBA,CAAhB,CAAoBysE,CAAAvoE,OAApB,CAAmClE,CAAA,EAAnC,CACI2sE,EAAA,CAAAA,CAAA,CAAqBF,CAArB,CAA6BzsE,CAA7B,CAEJ,OAAOysE,EAAAvoE,OAAP,CAAuB,CAJ3B,CAeAyoE,QAAA,GAAe,CAAfA,CAAe,CAACF,CAAD,CAASzsE,CAAT,CAAY+sE,CAAZ,CACf,CACQ7F,CAAAA,CAAUuF,CAAA,CAAOzsE,CAAP,CACd,EAAA2U,EAAA,CAAa83D,CAAA,CAAO,CAAP,CAAb,CAAyB,GAAzB,CAA+BtC,EAAA,CAAAA,CAAA,CAAejD,CAAf,CAA/B,EAA0D6F,CAAA,CAAU,GAAV,CAAgBA,CAAhB,CAA4B7F,CAAAvF,GAAA,CAAe,IAAf,CAAsBuF,CAAAvF,GAAtB,CAAqC,GAArC,CAA4C,EAAlI,EAFJ;AAsBAsK,QAAA,GAAmB,CAAnBA,CAAmB,CAAChhD,CAAD,CACnB,CACI,GAAajmB,IAAAA,EAAb,GAAIimB,CAAJ,CACIqhD,EAAA,CAAAA,CAAA,CAAqBrhD,CAArB,CAA2B,CAA3B,CAA8B,CAAAw6C,EAA9B,CAA+C,CAAA,CAA/C,CACA,CAAA,CAAAgB,EAAA,CAAa,CAFjB,KAII,KAASzmE,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAAoB,CAAAylE,EAAAvhE,OAApB,CAA4ClE,CAAA,EAA5C,CAAiD,CAC7C,IAAI6sE,EAAe,CAAApH,EAAA,CAAgBzlE,CAAhB,CACnB,IAAI6sE,CAAAzF,GAAJ,CAA6B,CACzB,GAAI,CAACsF,EAAA,CAAAA,CAAA,CAAoB,CAAAjH,EAApB,CAAqCoH,CAArC,CAAyD,CAAA,CAAzD,CAAL,CAAqE,KACrE7sE,EAAA,CAAI,CAFqB,CAFgB,CALzD;AAyBAssE,QAAA,GAAe,CAAfA,CAAe,CAACrhD,CAAD,CAAOshD,CAAP,CAAWE,CAAX,CAAmBrF,CAAnB,CACf,CAKI,IAAIvwC,EAAS,CAAA,CAEb,IAAI,CAAC,CAAAkwC,GAAA,EAAL,CAEI,IAAK,IAAI/mE,EAAI,CAAb,CAAgB,CAAC62B,CAAjB,EAA2B72B,CAA3B,CAA+BysE,CAAAvoE,OAA/B,CAA8ClE,CAAA,EAA9C,CAAmD,CAE/C,IAAI6sE,EAAeJ,CAAA,CAAOzsE,CAAP,CAEnB,IAAIonE,CAAAA,CAAJ,EAAmByF,CAAAzF,GAAnB,CAQA,IADA,IAAI4F,EAAYvkC,EAAA,CAAaokC,CAAb,CAAZG,EAA0CP,CAAA,EAAU,CAAAhH,EAAV,CAA2B,KAA3B,CAAqC,EAA/EuH,CAAJ,CACS3sE,EAAI,CAAb,CAAgBA,CAAhB,CAAoBksE,CAApB,CAAwBlsE,CAAA,EAAxB,CAEI,GAAK4qB,CAAL,CAAY5qB,CAAZ,EAAkB2sE,CAAlB,CAAA,CAEA,IAAIxtE,CACJq3B,EAAA,CAAS,CAAA,CACLg2C,EAAAzF,GAAJ,GACIsF,EAAA,CAAAA,CAAA,CAAoBD,CAApB,CAA4BI,CAA5B,CAAgD,CAAA,CAAhD,CACA,CAAAzF,CAAA,CAAa,CAAA,CAFjB,CAIA,IAAI5nE,CAAJ,CAAQqtE,CAAApF,GAAR,CAA4B,CAWxB5wC,CAAA,CAAS,CAAA,CACT,KAAK,IAAI52B,EAAI,CAAb,CAAgBA,CAAhB,CAAoBT,CAAA0E,OAApB,CAA8BjE,CAAA,EAA9B,CACI,GAAI,CAACgtE,EAAA,CAAAA,CAAA,CAAeztE,CAAA,CAAES,CAAF,CAAf,CAAqB,CAAA,CAArB,CAAL,CAAiC,CAC7B,GAAIT,CAAA,CAAES,CAAF,CAAAsB,QAAA,CAAa,IAAb,CAAJ,CAAwB,CACpBs1B,CAAA,CAAS,CAAA,CACT,MAFoB,CAKxB,IADA,IAAI32B,EAAID,CAAJC,CAAQ,CACZ,CAAOA,CAAP,CAAWV,CAAA0E,OAAX,EACS1E,CAAA,CAAEU,CAAF,CAAAqB,QAAA,CAAa,MAAb,CADT,CAAqBrB,CAAA,EAArB,CAEID,CAAA,EAEJ,IAAIC,CAAJ,EAASV,CAAA0E,OAAT,CAAmB,CACf2yB,CAAA,CAAS,CAAA,CACT,MAFe,CAVU,CAoBhC,CAAAxnB,EAtvgBdX,MAAAmb,EAsvgBS,GAA2BgN,CAA3B,CAAoC,CAAA,CAApC,CAjCwB,CAmC5B,GAAIA,CAAJ,CAAY,CACHuwC,CAAL,EAAiBuF,EAAA,CAAAA,CAAA,CAAqBF,CAArB,CAA6BzsE,CAA7B,CAAgC,KAAhC,CACjB,MAFQ,CA3CZ,CAd2C,CAiEvD,CAAA+mE,GAAA,EAEA,OAAOlwC,EA5EX;AA0FAq2C,QAAA,GAAc,CAAdA,CAAc,CAAChG,CAAD,CAAUiG,CAAV,CAAoBC,CAApB,CACd,CAEI,IAAIC,EAAYhI,CAAA,CAAa6B,CAAAj8C,EAAb,CAAhB,CACI0gB,EAAS,CAAAxa,GAAA,CAAa+1C,CAAb,CAAsB,CAAtB,CADb,CAGIoG,CAHJ,CAIS1hD,CAAT,KAASA,CAAT,GAAiB,EAAA06C,GAAjB,CAGI,GADAgH,CACA,CAFc,CAAAhH,GAAAiH,CAAa3hD,CAAb2hD,CACL,CAAQ5hC,CAAR,CAAiB/f,CAAjB,CACT,CAAY,KAGX0hD,EAAL,GACIA,CADJ,CACaE,EADb,CAIA,KAAIC,EAAQH,CAAA,CAAO,CAAP,CAC2B,EAAvC,EAAI,CAAA9G,EAAAjlE,QAAA,CAAyBksE,CAAzB,CAAJ,GACIH,CACA,CADSE,EACT,CAAAC,CAAA,CAAQH,CAAA,CAAO,CAAP,CAFZ,CAKA,KAAoBI,EAAhBC,CAAgBD,CAAJ,EAAhB,CACIE,EAtBUC,EAsBA,CAAQJ,CAAR,CADd,CAEIK,EAAYR,CAAAppE,OAAZ4pE,CAA4B,CAE3BL,EAAL,EAAeK,CAAf,GACIH,CADJ,CACgBx5C,CAAA,CAAAA,CAAA,CAAewX,CAAf,CADhB,CAIA,KAASoiC,CAAT,CAAoB,CAApB,CAAuBA,CAAvB,EAAmCD,CAAnC,CAA8CC,CAAA,EAA9C,CAA0D,CAEtD,IAAIC,EAASV,CAAA,CAAOS,CAAP,CACb,IAAe/oE,IAAAA,EAAf,GAAIgpE,CAAJ,CAAA,CAEeC,IAAAA,EAAAA,CAAwBD,KAAAA,EAAAA,CAAQ9G,EAAAA,CAAAA,CA+DvD,KACQgH,EAAW,EAKXC,KAAAA,EAAcH,CAAdG,CAAuBC,EAC3B,IAAID,CAAJ,EAAmBE,CAAnB,CAEIpjD,CACA,CADQi8C,CAAAj8C,EACR,GAzE+B0gB,CAyE/B,CAFkB,GAElB,GAF2B,EAE3B,EAFkC,EAElC,EAD+B,KAC/B,CAAAuiC,CAAA,CAAW/5C,CAAA,CAAAA,CAAA,CAAelJ,CAAf,CAHf,KAKK,IAAIkjD,CAAJ,EAAmBG,EAAnB,CAEDrjD,CACA,CADQi8C,CAAAj8C,EACR,GA9E+B0gB,CA8E/B,CAFiB,EAEjB,GAF0B,CAE1B,EAD+B,KAC/B,CAAAuiC,CAAA,CAAW/5C,CAAA,CAAAA,CAAA,CAAelJ,CAAf,CAHV,KAKA,IAAIkjD,CAAJ,EAAmBI,EAAnB,CAEDL,CAAA,CAAW/5C,CAAA,CAAAA,CAAA,CAlFoBwX,CAkFpB,CADM,CACN,CAAqB,CAArB,CAFV,KAIA,IAAIwiC,CAAJ,EAAmBK,EAAnB,CAEDN,CAAA,CAAW/5C,CAAA,CAAAA,CAAA,CAtFoBwX,CAsFpB,CADM,EACN,CAAqB,CAArB,CAFV,KAIA,IAAIwiC,CAAJ,EAAmBM,EAAnB,CAEDP,CAAA,CAAW/5C,CAAA,CAAAA,CAAA,CA1FoBwX,CA0FpB,CADM,GACN,CAAqB,CAArB,CAFV,KAiBD,IATI+iC,CASA,CAzG2B/iC,CAyG3B,CATkBqiC,CASlB,CAJAA,CAIA,CAJSW,EAIT,GAHAD,CACA,GADW,CACX,CAAAV,CAAA,GAAW,CAEX,EAAAA,CAAA,CAASY,CAAb,CAAmC,CAE3BlB,CAAAA,CAAU,IACd,KAAI/5C;AAAM+6C,CAAN/6C,CAAek7C,EAKnB,QAAQH,CAAR,CAAiBI,EAAjB,EAEA,KA/wsBIrgC,CA+wsBJ,CACIy/B,CAAA,CAAWxD,EAAA,CAAAA,CAAA,CAAgB/2C,CAAhB,CACX,MAEJ,MAlxsBI8a,CAkxsBJ,CACIy/B,CAAA,CAAW,GAAX,CAAiBxD,EAAA,CAAAA,CAAA,CAAgB/2C,CAAhB,CACjB+5C,EAAA,CAAUqB,EAAA,CAAAA,CAAA,CAAe,CAAA1/D,EAAA4c,EAAA,CAAiB0H,CAAjB,CAAf,CACV,MAEJ,MAtxsBI8a,EAsxsBJ,CACc,CAAV,CAAI9a,CAAJ,CACIu6C,CADJ,CACe,GADf,CACqBxD,EAAA,CAAAA,CAAA,CAAgB/2C,CAAhB,CADrB,CAC4C,IAD5C,EAMIq7C,CACA,CADS,CAAA79C,GAAA,CAAa+1C,CAAb,CAAsB,CAAtB,CACT,CAAAgH,CAAA,CAAW,GAAX,CAAiB/5C,CAAA,CAAAA,CAAA,CAAe66C,CAAf,CAAwB,EAAxB,CAPrB,CASA,MAEJ,MAjysBIvgC,EAiysBJ,CACc,CAAV,CAAI9a,CAAJ,CACIu6C,CADJ,CACe,IADf,CACsBxD,EAAA,CAAAA,CAAA,CAAgB/2C,CAAhB,CADtB,CAC6C,IAD7C,EAMIq7C,CAEA,CAFS,CAAA79C,GAAA,CAAa+1C,CAAb,CAAsB,CAAtB,CAET,CADAgH,CACA,CADW,IACX,CADkB/5C,CAAA,CAAAA,CAAA,CAAe66C,CAAf,CAAwB,EAAxB,CAClB,CAAAtB,CAAA,CAAUqB,EAAA,CAAAA,CAAA,CAAeC,CAAf,CARd,CAUA,MAEJ,MA7ysBIvgC,EA6ysBJ,CACIy/B,CAAA,CAAW,IAAX,CAAkBxD,EAAA,CAAAA,CAAA,CAAgB/2C,CAAhB,CAAlB,CAAyC,GACzC,MAEJ,MAhzsBI8a,EAgzsBJ,CACIy/B,CAAA,CAAW,KAAX,CAAmBxD,EAAA,CAAAA,CAAA,CAAgB/2C,CAAhB,CAAnB,CAA0C,GAC1C,MAEJ,MAnzsBI8a,EAmzsBJ,CACIugC,CAAA,CAAS,CAAA79C,GAAA,CAAa+1C,CAAb,CAAsB,CAAtB,CACTgH,EAAA,CAAW/5C,CAAA,CAAAA,CAAA,CAAe66C,CAAf,CAAwB,EAAxB,CAAX,CAAwC,GAAxC,CAA8CtE,EAAA,CAAAA,CAAA,CAAgB/2C,CAAhB,CAA9C,CAAqE,GAC1D,EAAX,EAAIA,CAAJ,GAeIu6C,CACA,CADW/5C,CAAA,CAAAA,CAAA,CAAe66C,CAAf,CAAyBA,CAAzB,CAAkC9H,CAAAj8C,EAAlC,CAAkD,KAAlD,CACX,CAAAyiD,CAAA,CAAUqB,EAAA,CAAAA,CAAA,CAAeC,CAAf,CAhBd,CAkBA,MAEJ,MAz0sBIvgC,EAy0sBJ,CACIugC,CAEA,CAFS,CAAA79C,GAAA,CAAa+1C,CAAb,CAAsB,CAAtB,CAET,CADAgH,CACA,CADW,GACX,CADiB/5C,CAAA,CAAAA,CAAA,CAAe66C,CAAf,CACjB,CAD0C,GAC1C,CADgDtE,EAAA,CAAAA,CAAA,CAAgB/2C,CAAhB,CAChD,CADuE,GACvE,CAAW,CAAX,EAAIA,CAAJ,GAOIu6C,CACA,CADW,GACX,CADiB/5C,CAAA,CAAAA,CAAA,CAAe66C,CAAf,CAAyBA,CAAzB,CAAkC9H,CAAAj8C,EAAlC,CAAkD,KAAlD,CACjB,CAAAyiD,CAAA,CAAUqB,EAAA,CAAAA,CAAA,CAAe3jD,EAAA,CAAA,CAAA/b,EAAA,CAAqB2/D,CAArB,CAAf,CARd,CAtEJ,CAuFItB,CAAJ,GAAaQ,CAAb,CAAwB,CAACA,CAAD,CAAWR,CAAX,CAAxB,CA/F+B,CAqGvC,CAAA;AAAOQ,CA5MH,IAAI,CAACA,CAAL,EAAiB,CAACA,CAAAhqE,OAAlB,CAAmC,CAC/BypE,CAAA,CAAY,SACZ,MAF+B,CASZ,QAAvB,EAAI,MAAOO,EAAX,GACIR,CACA,CADUQ,CAAA,CAAS,CAAT,CACV,CAAAA,CAAA,CAAWA,CAAA,CAAS,CAAT,CAFf,CAKuB,EAAvB,CAAIP,CAAAzpE,OAAJ,GAA0BypE,CAA1B,EAAuC,GAAvC,CACAA,EAAA,EAAcO,CAAd,EAA0B,KAnB1B,CAHsD,CAyBtDe,CAAAA,CAAW,EACXC,EAAAA,CAAQ/E,EAAA,CAAAA,CAAA,CAAekD,CAAf,CAAR6B,CAAoC,GACxC,IAp0sBa/H,EAo0sBb,GAAIkG,CAAApiD,EAAJ,EAp0sBak8C,EAo0sBb,GAA6CD,CAAAj8C,EAA7C,EACI,EAEI,IADAgkD,CACI,EADQ,GACR,CADc96C,CAAA,CAAAA,CAAA,CAAe,CAAAhD,GAAA,CAAak8C,CAAb,CAAwB,CAAxB,CAAf,CACd,CAAkB,IAAlB,EAAAA,CAAApiD,EAAJ,CAA4B,KAFhC,OAGSoiD,CAAApiD,EAHT,EAG2Bi8C,CAAAj8C,EAH3B,CADJ,CAOAikD,CAAA,EAASnqB,EAAA,CAAQkqB,CAAR,CAAkB,EAAlB,CACTC,EAAA,EAASnqB,EAAA,CAAQ6oB,CAAR,CAAiB,CAAjB,CACLD,EAAJ,GAAeuB,CAAf,EAAwB,GAAxB,CAA8BvB,CAA9B,CAEA,IAAIR,CAAJ,EAAgBO,CAAhB,CACIwB,CAOA,CAPQnqB,EAAA,CAAQmqB,CAAR,CAAe,EAAf,CAOR,CAP6B,GAO7B,EAPoC/B,CAOpC,EAPgD,EAOhD,EAFI+B,CAEJ,CANK,CAAA7/D,EAAAX,MAAA0yB,GAAL,CAII8tC,CAJJ,EAIa,YAJb,CAGkB1rC,EAAAjD,CAAA,CAAAlxB,EAAAkxB,CACOnsB,SAAA,EAJzB,CAI8C,SAJ9C,CAIuD9Q,CAAA,CAAU,CAAA+L,EAAAgyB,GAAV,CAJvD,EACI6tC,CADJ,EAC2B,IAAb,EAAA9B,CAAA,CAAmB,MAAnB,CAAyBA,CAAAh5D,SAAA,EAAzB,CAAgD,EAD9D,CAMA,CAAIs5D,CAAJ,GAC2B,GACvB,EADIwB,CAAArtE,MAAA,CAAa,EAAb,CACJ,GAD4BqtE,CAC5B,EADqC,GACrC,EAAAA,CAAA,EAASxB,CAFb,CAKJ,OAAOwB,EAjFX;AA2PAH,QAAA,GAAS,CAATA,CAAS,CAAC9jD,CAAD,CACT,CAGQ4iB,CAAAA,CADIF,EAAAnuC,CAAA,CAAA6P,EAAA7P,CAAqByrB,CAArBzrB,CACW,CAAE,CAAF,CACfquC,EAAJ,EAAoB,CAAAx+B,EAAAuf,GAApB,EAA2Cif,CAA3C,CAA0D,CAAAv+B,EAAAsf,EAA1D,GACIif,CADJ,CACoBA,CADpB,CACmC,CAAAx+B,EAAAuf,GADnC,CAC0D,CAAAtf,EAAAsf,EAD1D,CAGOtf,KAAAA,EAAAA,CAAAA,EA90mBHK,EAAAA,CAAQ,IA80mBgBk+B,EA70mB5B,EAAY,CAAAjf,EAAZ,GAEQ3hB,CAFR,CAEc,CAAAghB,GAAA,CA20mBc4f,CA30mBd,CADOra,EACP,CAFd,IAGa7jB,CAHb,CAGqB1C,CAAA,CA8HL6nB,CA9HK,CAHrB,CA60mBA,OAx0mBOnlB,EAi0mBX,CAmCAw/D,QAAA,GAAa,CAAbA,CAAa,CAACC,CAAD,CACb,CAEI,OAAQA,CAAR,EACA,KAAK,GAAL,CACI3vE,CAAA,CAAI6rC,EAAA,CAAA,CAAAj8B,EAAA,CACJ,MACJ,MAAK,GAAL,CACI5P,CAAA,CAAI4rC,EAAA,CAAA,CAAAh8B,EAAA,CACJ,MACJ,MAAK,GAAL,CACI5P,CAAA,CAAI2rC,EAAA,CAAA,CAAA/7B,EAAA,CACJ,MACJ,MAAK,GAAL,CACI5P,CAAA,CAAI0rC,EAAA,CAAA,CAAA97B,EAAA,CACJ,MACJ,SACI5P,CAAA,CAAI,CAdR,CAiBA,MAAO2vE,EAAA1tE,OAAA,CAAa,CAAb,CAAP,EAA0BjC,CAAA,CAAG,GAAH,CAAS,GAAnC,EAA0C,GAnB9C,CA6BA4vE,QAAA,GAAY,CAAZA,CAAY,CAACt7C,CAAD,CACZ,CACI,IAAID,EAAO42C,EAAA,CAAAA,CAAA,CAAgB32C,CAAhB,CACPD,EAAJ,GACIA,CADJ,EACY,MADZ,CACkBK,CAAA,CAAAA,CAAA,CAAe,CAAAstC,GAAA,CAAiB1tC,CAAjB,CAAf,CADlB,CAC2D,GAD3D,CAGA,OAAOD,EALX;AAwCAw7C,QAAA,GAAU,CAAVA,CAAU,CAACC,CAAD,CACV,CACI,IAAIvvE,CAAJ,CACIg3B,EAAQ,EACZ,KAAKh3B,CAAL,CAAS,CAAT,CA38sBYyrC,CA28sBZ,CAAYzrC,CAAZ,CAA8BA,CAAA,EAA9B,CACIg3B,CAAA,EAASq4C,EAAA,CAAAA,CAAA,CAAkBrvE,CAAlB,CAGbg3B,EAAA,CADAA,CACA,CADS,IACT,EAASq4C,EAAA,CAAAA,CAAA,CA/8sBG5jC,CA+8sBH,CAAT,CAA2C4jC,EAAA,CAAAA,CAAA,CA98sB/B5jC,CA88sB+B,CAA3C,CACAzU,EAAA,EAASq4C,EAAA,CAAAA,CAAA,CAAkBxE,EAAlB,CAAT,CAAmDwE,EAAA,CAAAA,CAAA,CAAkBvE,EAAlB,CAAnD,CAA6FuE,EAAA,CAAAA,CAAA,CAAkBrE,EAAlB,CAC7Fh0C,EAAA,EAASm4C,EAAA,CAAAA,CAAA,CAAmB,GAAnB,CAAT,CAAmCA,EAAA,CAAAA,CAAA,CAAmB,GAAnB,CAAnC,CAA6DA,EAAA,CAAAA,CAAA,CAAmB,GAAnB,CAA7D,CAAuFA,EAAA,CAAAA,CAAA,CAAmB,GAAnB,CAAvF,CAAiHA,EAAA,CAAAA,CAAA,CAAmB,GAAnB,CAC7GI,EAAJ,GAAWv4C,CAAA,CAAAA,CAAA,CA9BXA,CA8BW,CA/BCA,EA+BD,EA9BFq4C,EAAA,CA8BkBG,CA9BlB,CAAkBvE,EAAlB,CA8BE,CA9BwCoE,EAAA,CA8BxBG,CA9BwB,CAAkBtE,EAAlB,CA8BxC,EA7BXl0C,CA6BW,EA7BFq4C,EAAA,CA6BkBG,CA7BlB,CAAkBrE,EAAlB,CA6BE,CA7BwCkE,EAAA,CA6BxBG,CA7BwB,CAAkBpE,EAAlB,CA6BxC,CA7BkFiE,EAAA,CA6BlEG,CA7BkE,CAAkBzE,EAAlB,CA6BlF,CA3BX/zC,CA2BW,CA5BXA,CA4BW,CA5BF,IA4BE,EA3BFq4C,EAAA,CA2BkBG,CA3BlB,CAAkBlE,EAAlB,CA2BE,CA3BwC+D,EAAA,CA2BxBG,CA3BwB,CAAkB7E,EAAlB,CA2BxC,CA3BkF0E,EAAA,CA2BlEG,CA3BkE,CAAkBnE,EAAlB,CA2BlF,EAAAr0C,CAAA,CAAAA,CAAA,EAAS,IAAT,CA1BJA,CA0BI,CAAX,CACA,OAAOA,EAXX,CAsBA7iB,CAAAs7D,GAAA,CAAAA,QAAY,CAACC,CAAD,CAAKC,CAAL,CACZ,CACI,MAAOD,EAAA,CAAG,CAAH,CAAA,CAAQC,CAAA,CAAG,CAAH,CAAR,CAAe,CAAf,CAAmBD,CAAA,CAAG,CAAH,CAAA,CAAQC,CAAA,CAAG,CAAH,CAAR,CAAgB,EAAhB,CAAoB,CADlD,CAiFA1yB;QAAA,GAAU,CAAVA,CAAU,CAAC2yB,CAAD,CAAU3kD,CAAV,CAAgBqzB,CAAhB,CAAqBh2C,CAArB,CACV,CAEI,IAAIunE,EAAW,EAAf,CACSlG,CAAT,KAASA,CAAT,GAAoBrhE,EAApB,CAA8B,CAC1B,IAAIyhE,EAASzhE,CAAA,CAASqhE,CAAT,CACQ,SAArB,EAAI,MAAOI,EAAX,GACIzhE,CAAA,CAASqhE,CAAT,CADJ,CACwBI,CADxB,CACiC,CAAC,EAAKA,CAAN,CADjC,CAGA,KAAIH,EAAYG,CAAA,EAAhB,CACI+F,EAAc/F,CAAA,EAClB,IAAkB/kE,IAAAA,EAAlB,GAAI4kE,CAAJ,CAAA,CACqBiG,IAAAA,EAAAA,CAAU,EAAA,CAAA,CAACjG,CAAD,GAAe,CAAf,CAAkBD,CAAlB,CA5rzBnC,KAAIt+C,EAAQ0kD,EAAA,CAAiBvwE,CAAjB,CAAoBqB,CAApB,CA4rzBmD,CAAA4uE,GA5rzBnD,CACA,EAAZ,CAAIpkD,CAAJ,EACI7rB,CAAA8T,OAAA,CAAS,EAAE+X,CAAF,CAAU,CAAV,CAAT,CAAuB,CAAvB,CAA0BxqB,CAA1B,CAyrzBA,CAGIivE,CAAJ,GAAiB/F,CAAA,EAAjB,CAA+B+F,CAAAtuE,QAAA,CAAoB,KAApB,CAA2B,GAA3B,CAA/B,CAV0B,CAmB9B,CAAAgkE,EAAAj8D,KAAA,CAPkBygE,CACd4F,GAASA,CADK5F,CAEd/+C,EAAMA,CAFQ++C,CAGd1rB,GAAKA,CAHS0rB,CAId1hE,GAAUA,CAJI0hE,CAKd6F,GAAUA,CALI7F,CAOlB,CAtBJ,CA8DAgG,QAAA,GAAU,CAAVA,CAAU,CAAC9I,CAAD,CAAU+I,CAAV,CACV,CACI,IAAIC,EAAU,EAAd,CACIC,EAAa1nC,EAAA,CAAay+B,CAAb,CAAbiJ,GAAuC,CAC3C,KAASrG,CAAT,CAAkB,CAAlB,CAAqBA,CAArB,CAA8B,CAAAtE,EAAAthE,OAA9B,CAAwD4lE,CAAA,EAAxD,CAAkE,CAC9D,IAAIE,EAAc,CAAAxE,EAAA,CAAkBsE,CAAlB,CAAlB,CACI7+C,EAAO++C,CAAA/+C,EAAPA,GAA4B,CADhC,CAEIqzB,EAAM0rB,CAAA1rB,GACV,IAAI6xB,CAAJ,EAAkBllD,CAAlB,EAA0BklD,CAA1B,CAAuCllD,CAAvC,CAA8CqzB,CAA9C,CAAmD,CAE3CnU,CAAAA,CAAS4lC,EAAA,CAAiB/F,CAAA6F,GAAjB,CAAuC,CADpCM,CACoC,CADvBllD,CACuB,CAAvC,CAAoD,CAAAwkD,GAApD,CACC,EAAd,EAAItlC,CAAJ,CACIimC,EAAA,CAAAA,CAAA,CAAkBtG,CAAlB,CAA0B3/B,CAA1B,CAAkC+lC,CAAlC,CADJ,CAGSD,CAHT,GAII9lC,CAEA,CAFS,CAACA,CAEV,CADAimC,EAAA,CAAAA,CAAA,CAAkBtG,CAAlB,CAA0B3/B,CAA1B,CAAiC,CAAjC,CAAoC+lC,CAApC,CACA,CAAAE,EAAA,CAAAA,CAAA,CAAkBtG,CAAlB,CAA0B3/B,CAA1B,CAAkC+lC,CAAlC,CANJ,CAQA,MAX+C,CAJW,CAkBlE,MAAOA,EArBX;AAyEAE,QAAA,GAAY,CAAZA,CAAY,CAACtG,CAAD,CAASuG,CAAT,CAAkBH,CAAlB,CACZ,CACI,IAAInG,EAAS,EAAb,CACI8F,EAAW,CAAArK,EAAA,CAAkBsE,CAAlB,CAAA+F,GADf,CAEIl5C,EAAS,CAFb,CAEgBgzC,EAAU,IACX,EAAf,EAAI0G,CAAJ,EAAoBA,CAApB,CAA8BR,CAAA3rE,OAA9B,GACIyyB,CACA,CADSk5C,CAAA,CAASQ,CAAT,CAAA,CAAkB,CAAlB,CACT,CAAA1G,CAAA,CAAUkG,CAAA,CAASQ,CAAT,CAAA,CAAkB,CAAlB,CAFd,CAII1G,EAAJ,GACII,CACA,CADS,CAAAvE,EAAA,CAAkBsE,CAAlB,CAAAxhE,GAAA,CAAmCqhE,CAAnC,CACT,CAAAA,CAAA,CAAgC,GAArB,EAAAA,CAAAjoE,OAAA,CAAe,CAAf,CAAA,CAA0B,IAA1B,CAAkCqoE,CAAA,EAAlC,EAAiDJ,CAFhE,CAIAuG,EAAA3mE,KAAA,CAAaogE,CAAb,CACAuG,EAAA3mE,KAAA,CAAaotB,CAAb,CACAu5C,EAAA3mE,KAAA,CAAawgE,CAAA,EAAb,CACAmG,EAAA3mE,KAAA,CAAawgE,CAAA,EAAb,CAfJ,CA+gBAuG,QAAA,GAAK,CAALA,CAAK,CAAC3O,CAAD,CACL,CACI,IAAIniE,EAAImiE,CAAA5/D,MAAA,CAAW,yCAAX,CACR,IAAIvC,CAAJ,CAAO,CACH,GAAI,CAACA,CAAA,CAAE,CAAF,CAAL,CAEI,MADKqlE,GAAA,CAAAA,CAAA,CACE,EADoB,CAAAlwD,EAAA,CAAa,cAAb,CACpB,CAAA,CAAA,CAEX,IAAI,CAACnV,CAAA,CAAE,CAAF,CAAL,CACI,MAAOqlE,GAAA,CAAAA,CAAA,CAAmBrlE,CAAA,CAAE,CAAF,CAAnB,CAEX,IAAI,CAACA,CAAA,CAAE,CAAF,CAAL,CAEI,MA9pGR,QA6pGQ+wE,CA7pGDhP,EAAA,CA6pGkB/hE,CAAAglE,CAAE,CAAFA,CA7pGlB,CA8pGQ,CAAA,CAAA,CAEP3jE,EAAAA,CAAImjE,EAAA,CAAAA,CAAA,CAAqBxkE,CAAA,CAAE,CAAF,CAArB,CACR,OAAUwF,KAAAA,EAAV,GAAInE,CAAJ,EACI2vE,CA7mGRjP,EAAA,CA6mGyB/hE,CAAAglE,CAAE,CAAFA,CA7mGzB,CA8mGe,CA9mGS,CAACpiE,MA6mGMvB,CA7mGP,CAAQ4jE,GAFXA,IAAAA,EAEG,CA8mGT,CAAA,CAAA,CAFX,EAIO,CAAA,CAjBJ,CAmBP,CAAA9vD,EAAA,CAAa,qBAAb,CAAqCgtD,CAArC,CACA,OAAO,CAAA,CAtBX;AAiCA8O,QAAA,GAAM,CAANA,CAAM,CAAC3I,CAAD,CAAQ5D,CAAR,CACN,CACI,IAAIyF,EAAU,IAGd,IADIzC,CACJ,CADca,EAAA,CAAAA,CAAA,CAAeD,CAAf,CAAsB,CAAA,CAAtB,CACd,CAAa,CAET,IAAIoI,EAAUF,EAAA,CAAAA,CAAA,CAAgB9I,CAAhB,CAAyB,CAAA,CAAzB,CACd,IAAIgJ,CAAAhsE,OAAJ,CAAoB,CAAA,IACZwsE,CACJ,IAAIR,CAAA,CAAQ,CAAR,CAAJ,CAAgB,CACZ,IAAAS,EAAS,EAET,EADAD,CACA,CADSxJ,CAAAj8C,EACT,CADwBilD,CAAA,CAAQ,CAAR,CACxB,IAAYS,CAAZ,CAAqB,KAArB,CAA6BhyB,EAAA,CAAc+xB,CAAd,CAA7B,CACAhwE,EAAA,CAAIwvE,CAAA,CAAQ,CAAR,CAAJ,CAAiB,IAAjB,CAp9EL/7C,CAAA,CAo9E6Bi2C,CAp9E7B,CAo9E8C8F,CAAA9+C,CAAQ,CAARA,CAp9E9C,CAo9EK,CAAuD,GAAvD,CAA6Du/C,CACzDzM,EAAJ,EAAY,CAAAvvD,EAAA,CAAajU,CAAb,CACZipE,EAAA,CAAUjpE,CANE,CAQK,CAArB,CAAIwvE,CAAAhsE,OAAJ,EAA0BgsE,CAAA,CAAQ,CAAR,CAA1B,GACIS,CAKA,CALS,EAKT,EAJAD,CAIA,CAJSR,CAAA,CAAQ,CAAR,CAIT,CAJsBhJ,CAAAj8C,EAItB,IAHY0lD,CAGZ,CAHqB,KAGrB,CAH6BhyB,EAAA,CAAc+xB,CAAd,CAG7B,EAFAhwE,CAEA,CAFIwvE,CAAA,CAAQ,CAAR,CAEJ,CAFiB,IAEjB,CA99EL/7C,CAAA,CA49E6Bi2C,CA59E7B,CA49E8C8F,CAAA9+C,CAAQ,CAARA,CA59E9C,CA89EK,CAFuD,GAEvD,CAF6Du/C,CAE7D,CADIzM,CACJ,EADY,CAAAvvD,EAAA,CAAajU,CAAb,CACZ,CAAKipE,CAAL,GAAcA,CAAd,CAAwBjpE,CAAxB,CANJ,CAVgB,CAApB,IAmBQwjE,EAAJ,EAAY,CAAAvvD,EAAA,CAAa,YAAb,CAtBP,CAyBb,MAAOg1D,EA7BX;AA4MAoC,QAAA,GAAW,CAAXA,CAAW,CAAC51C,CAAD,CACX,CADoBy6C,IAAAA,CAEhB,IAAIz6C,CAAJ,EAA2B,GAA3B,EAAcA,CAAA,CAAO,CAAP,CAAd,CACI,CAAAxhB,EAAA,CAAa,oBAAb,CAGA,CAFA,CAAAA,EAAA,CAAa,qBAAb,CAEA,CADA,CAAAA,EAAA,CAAa,2BAAb,CACA,CAAA,CAAAA,EAAA,CAAa,yCAAb,CAJJ,KAAA,CAQA,IAAI46D,EAAQ,CAAA,CAAZ,CACIlgE,EAAM,CAAAA,EACU,KAApB,EAAIuhE,CAAJ,GAA0BA,CAA1B,CAAyC,CAAA,CAAzC,CAEA,IAAc,IAAd,EAAIz6C,CAAJ,EAAsC,CAAtC,CAAsBA,CAAAjyB,OAAtB,CAAyC,CACrC,IAAI4vB,EAAOqC,CAAA,CAAO,CAAP,CAEX,IAAY,GAAZ,EAAIrC,CAAJ,CACIy7C,CAAA,CAAQ,CAAA,CADZ,KAGK,CAED,IAAIvvE,EAAI8zB,CAAAvyB,QAAA,CAAa,MAAb,CACR,IAAQ,CAAR,CAAIvB,CAAJ,CACIoK,CACA,CADS0pB,CAAAnyB,OAAA,CAAY3B,CAAZ,CAAgB,CAAhB,CACT,CAAA8zB,CAAA,CAAOA,CAAAnyB,OAAA,CAAY,CAAZ,CAAe3B,CAAf,CAFX,KAIK,IAAoB,CAApB,CAAIm2B,CAAAjyB,OAAJ,CACDkG,CAAA,CAAS+rB,CAAA,CAAO,CAAP,CADR,KAGA,CACD,CAAAxhB,EAAA,CAAa,oBAAb,CAAoCwhB,CAAA,CAAO,CAAP,CAApC,CACA,OAFC,CAKDr1B,CAAAA,CAAIkjE,EAAA,CAAAA,CAAA,CAAqB55D,CAArB,CACR,IAAUpF,IAAAA,EAAV,GAAIlE,CAAJ,CAAqB,MAEjB+vE,EAAAA,CAAY/8C,CAAAgD,YAAA,EAChB,QAAQ+5C,CAAR,EACA,KAAK,IAAL,CACA,KAAK,IAAL,CACIxhE,CAryfZ4c,EAAA,CA7rPYwf,CA6rPZ,CAAA,CAqyfsB3qC,CAryftB,CAAoC,KAsyfxB,MACJ,MAAK,IAAL,CACA,KAAK,IAAL,CACIgpB,EAAA,CAAAza,CAAA;AAAUvO,CAAV,CACA,EAAAskE,EAAA,CAAuBC,CAAA,CAAah2D,CA32fzC4c,EAAA,CA3nPKwf,CA2nPL,CA22f4B,CACvB,MACJ,MAAK,GAAL,CACWp8B,CAl7fnBi3B,EAAA,CAk7fgBxlC,CAAJ,CAl7fC,KAk7fD,CAv8fC,CAw8fD,MACJ,MAAK,GAAL,CACWuO,CAp9fnBg3B,EAAA,CAo9fgBvlC,CAAJ,CAp9fC,CAo9fD,CAz+fC,CA0+fD,MACJ,MAAK,GAAL,CACWuO,CAt/fnB+2B,EAAA,CAs/fgBtlC,CAAJ,CAt/fC,KAs/fD,CA3ggBC,CA4ggBD,MACJ,MAAK,GAAL,CACWuO,CAxhgBnB82B,EAAA,CAwhgBgBrlC,CAAJ,CAxhgBC,KAwhgBD,CA7igBC,CA8igBD,MACJ,MAAK,IAAL,CACIy7B,EAAA,CAAAltB,CAAA,CAAWvO,CAAX,CACA,MACJ,MAAK,IAAL,CACIk7B,EAAA,CAAA3sB,CAAA,CAAWvO,CAAX,CACA,MACJ,MAAK,IAAL,CACIuO,CAAA+kB,EAAA,CAAatzB,CACbyuE,EAAA,CAAQ,CAAA,CACR,MACJ,MAAK,IAAL,CACIlgE,CA96eZ6sB,GAAA,CA86euBp7B,CA96evB,CAAuB,GA+6eX,MACJ,MAAK,IAAL,CACI62B,EAAA,CAAAtoB,CAAA,CAAYvO,CAAZ,CACAyuE,EAAA,CAAQ,CAAA,CACR,MACJ,MAAK,IAAL,CACIn3C,EAAA,CAAA/oB,CAAA,CAAYvO,CAAZ,CACAyuE,EAAA,CAAQ,CAAA,CACR,MACJ,MAAK,IAAL,CACQ,CAAAtoD,EAAJ,GAAgBA,CA/ltB5B,CA+ltB4BA,CAAAA,EA/ltB5B,CAAAuB,EAAA,CAAAA,CAAA,CAAgB,CAAA1D,GAAhB,CA+ltB6ChkB,CA/ltB7C,CA+ltBY,CACAyuE,EAAA,CAAQ,CAAA,CACR,MACJ,MAAK,IAAL,CACQ,CAAAtoD,EAAJ,EAAgBR,EAAA,CAAA,CAAAQ,EAAA,CAAiBnmB,CAAjB,CAChByuE,EAAA,CAAQ,CAAA,CACR,MACJ,MAAK,IAAL,CACQ,CAAAtoD,EAAJ,EA1jtBZyB,EAAA,CA0jtB4B,CAAAzB,EA1jtB5B,CA0jtB6CnmB,CA1jtB7C,CA2jtBYyuE,EAAA,CAAQ,CAAA,CACR,MACJ,SACI,GAA2B,GAA3B,EAAIsB,CAAAnvE,OAAA,CAAiB,CAAjB,CAAJ,GACQqyB,CACA,CADO,CAAC88C,CAAAnvE,OAAA,CAAiB,CAAjB,CACR,CAAQ,CAAR,EAAAqyB,CAAA,EAAoB,CAApB,CAAaA,CAFrB,EAE+B,CACvB1kB,CAAA4c,EAAA,CAAY8H,CAAZ,CAAA,CAAoBjzB,CAApB,CAAwB,KACxB,MAFuB,CAK/B,CAAA6T,EAAA,CAAa,oBAAb;AAAoCmf,CAApC,CACA,OAhEJ,CAkEAnJ,EAAA,CAAA,CAAApb,EAAA,CACA,EAAAoF,EAAA,CAAa,oBAAb,CAtFC,CANgC,CAgGzC,CAAAA,EAAA,CAAa26D,EAAA,CAAAA,CAAA,CAAgBC,CAAhB,CAAb,CAEIqB,EAAJ,GACI,CAAAxL,EACA,CADuBC,CAAA,CAAah2D,CA76fjC4c,EAAA,CA3nPKwf,CA2nPL,CA66foB,CACvB,CAAAugC,EAAA,CAAAA,CAAA,CAAkB7B,EAAA,CAAAA,CAAA,CAAe,CAAA/E,EAAf,CAAlB,CAFJ,CA9GA,CADJ,CAqJA0L,QAAA,GAAO,CAAPA,CAAO,CAACnP,CAAD,CACP,CACIA,CAAA,CAAOte,EAAA,CAASse,CAAT,CACP,KAAIniE,EAAImiE,CAAA5/D,MAAA,CAAW,iBAAX,CACHvC,EAAL,CAGsB,CAAlB,CAAIA,CAAA,CAAE,CAAF,CAAA0E,OAAJ,CACI,CAAAyQ,EAAA,CAA8BnV,CAAAkB,CAAE,CAAFA,CAA9B,CADJ,CAGI2jE,EAAA,CAAAA,CAAA,CAAgB,IAAhB,CAAsB7kE,CAAA,CAAE,CAAF,CAAAmkD,WAAA,CAAgB,CAAhB,CAAtB,CANR,CACIqgB,EAAA,CAAAA,CAAA,CAAqBrC,CAArB,CAA2B,CAAA,CAA3B,CAJR;AAkMAoP,QAAA,GAAO,CAAPA,CAAO,CAACpP,CAAD,CAAOqP,CAAP,CACP,CACI,GAAc,GAAd,EAAIA,CAAJ,CACI,CAAAr8D,EAAA,CAAa,iBAAb,CAIA,CAHA,CAAAA,EAAA,CAAa,gCAAb,CAGA,CAFA,CAAAA,EAAA,CAAa,sDAAb,CAEA,CADA,CAAAA,EAAA,CAAa,0BAAb,CACA,CAAA,CAAAA,EAAA,CAAa,0DAAb,CALJ,KAAA,CAUA,IAAI+2D,EAAiB,GAAjBA,EAAS/J,CACTsP,EAAAA,CAAS5N,EAAA,CAAAA,CAAA,CAAgB2N,CAAhB,CAAwB,IAAxB,CAA8B,CAAA,CAA9B,CAATC,EAAgD,CASpD,KAAI1wC,EAAU,CAEF,KAAZ,EAAIohC,CAAJ,GACIphC,CACA,CADU0wC,CACV,CAAAA,CAAA,CAAS,CAFb,CAIA,EAAAtK,GAAA,CAAqBhF,CAErBuP,GAAA,CACID,CADJ,CAEIE,QAAoB,EAAG,CACnB,MAAOx7D,GAAA,CAtBLvG,CAsBK,CAAY,CAAA,CAAZ,CAAP,EAA4Bgb,EAAA,CAtB1Bhb,CAsB0B,CAAYmxB,CAAZ,CAAqBmrC,CAArB,CAA4B,CAAA,CAA5B,CADT,CAF3B,CAKI0F,QAA4B,EAAG,CAxBzBhiE,CA+BE6X,EAAJ,EA/BE7X,CA+Ba6X,EAAAH,KAAA,EACf6D,GAAA,CAhCEvb,CAgCFG,EAAA,CAAwB,EAAxB,CACAoG,GAAA,CAjCEvG,CAiCF,CAAY,CAAA,CAAZ,CAT2B,CALnC,CA5BA,CADJ;AAwDA48D,QAAA,GAAY,CAAZA,CAAY,CAAClE,CAAD,CAAQuJ,CAAR,CAAkBC,CAAlB,CACZ,CAEI,GADIpK,CACJ,CADca,EAAA,CAAAA,CAAA,CAAeD,CAAf,CAAsB,CAAA,CAAtB,CACd,CAAA,CAEe9iE,IAAAA,EAAf,GAAIssE,CAAJ,GAA0BA,CAA1B,CAAmC,CAAnC,CAEA,KAAIhjB,EAAS,GACb,IAAiBtpD,IAAAA,EAAjB,GAAIqsE,CAAJ,CAEI,GAA0B,GAA1B,EAAIA,CAAA3vE,OAAA,CAAgB,CAAhB,CAAJ,CACQrB,CACJ,CADQgjE,EAAA,CAAAA,CAAA,CAAgBgO,CAAA1vE,OAAA,CAAgB,CAAhB,CAAhB,CACR,CAAS,IAAT,EAAItB,CAAJ,GAAeixE,CAAf,CAAwBjxE,CAAxB,CAFJ,KAIK,CACGkxE,CAAAA,CAAaxJ,EAAA,CAAAA,CAAA,CAAesJ,CAAf,CAAyB,CAAA,CAAzB,CACjB,IAAI,CAACE,CAAL,EAAmBA,CAAAtmD,EAAnB,CAAqCi8C,CAAAj8C,EAArC,CAAmD,MAEnDqjC,EAAA,CAASijB,CAAAtmD,EAAT,CAA2Bi8C,CAAAj8C,EAC3B,IAAuB,GAAvB,CAAcqjC,CAAd,CAA8B,CAM1B,CAAA35C,EAAA,CAAa,iBAAb,CACA,OAP0B,CAS9B28D,CAAA,CAAU,EAdT,CAkBLE,CAAAA,CAAW,CAGf,KAFA,IAAIC,CAEJ,CAAgB,CAAhB,CAAOnjB,CAAP,EAAqBgjB,CAAA,EAArB,CAAA,CAA+B,CAEvBlE,CAAAA,CAAa33D,EAAA,CAAAA,CAAA,CAAY,CAAA,CAAZ,CAAD,EAAuB,CAAAgxD,EAAvB,CAAoC,CAAAlmC,EAApC,CAAmD,IACnE,KAAI4sC,EAAyB,IAAb,EAAAC,CAAA,CAAmB,QAAnB,CAA8B,IAA9C,CACI8C,EAAUF,EAAA,CAAAA,CAAA,CAAgB9I,CAAhB,CADd,CAGIj8C,EAAOi8C,CAAAj8C,EAEX,IAAIilD,CAAA,CAAQ,CAAR,CAAJ,EAAkBoB,CAAlB,GACQ,CAACE,CADT,EACqBF,CADrB,EACyD,CADzD,CAC+BpB,CAAA,CAAQ,CAAR,CAAA3uE,QAAA,CAAmB,GAAnB,CAD/B,EAC4D,CACpD,IAAI6nB,EAAS8mD,CAAA,CAAQ,CAAR,CAAT9mD,CAAsB,GACtB8mD,EAAA,CAAQ,CAAR,CAAJ,GAAgB9mD,CAAhB,EAA0B,GAA1B,CAAgC8mD,CAAA,CAAQ,CAAR,CAAhC,CACA,EAAAv7D,EAAA,CAAayU,CAAb,CAHoD,CAOxD8mD,CAAA,CAAQ,CAAR,CAAJ,GACI/C,CACA,CADW+C,CAAA,CAAQ,CAAR,CACX,CAAA9C,CAAA,CAAY,IAFhB,CAKAqE,EAAA,CAAevE,EAAA,CAAAA,CAAA,CAAoBhG,CAApB,CAA6BiG,CAA7B,CAAuCC,CAAvC,CAEf,EAAAz4D,EAAA,CAAa88D,CAAb,CACA,EAAArM,EAAA,CAAuB8B,CACvB5Y,EAAA,EAAU4Y,CAAAj8C,EAAV,CAAyBA,CACzBumD,EAAA,EA1B2B,CAhC/B,CAFJ;AAkGAvE,QAAA,GAAS,CAATA,CAAS,CAACtL,CAAD,CAAOsC,CAAP,CACT,CACI,IAAI95B,EAAS,CAAA,CAEb,IAAI,CACKw3B,CAAAz9D,OAAL,EAA4B,KAA5B,EAAoBy9D,CAApB,CAQUsC,CARV,EASI,CAAAtvD,EAAA,CAAai3D,EAAb,CAAoCjK,CAApC,CATJ,EACQ,CAAAP,EAKJ,GAJI,CAAAzsD,EAAA,CAAa,oBAAb,CAAoCw1D,EAAA,CAAAA,CAAA,CAAe,CAAA5E,EAAf,CAApC,CAEA,CADA,CAAAH,EACA,CADuB,CAAAG,EACvB,CAAA,CAAAnE,EAAA,CAAiB,CAAA,CAErB,EAAAO,CAAA,CAAO,EANX,CAYA,KAAIlgE,EAAKkgE,CAAAjgE,OAAA,CAAY,CAAZ,CACT,IAAU,GAAV,EAAID,CAAJ,EAAuB,GAAvB,EAAiBA,CAAjB,CAA4B,MAAO,CAAA,CAKnC,EAAA0kE,EAAA,CAAoB,IAKpB,IAAI7wD,EAAA,CAAAA,CAAA,CAAJ,EAAgE,CAAhE,CAAkDqsD,CAAAz9D,OAAlD,CAAmE,CAE3D,CAAAk9D,EAAJ,GACIO,CADJ,CACW,IADX,CACkBwI,EAAA,CAAAA,CAAA,CAAe,CAAA5E,EAAf,CADlB,CACyD,GADzD,CAC+D5D,CAD/D,CAIA,KAAIsB,EAAS,CAAA,CAAb,CA3DJ9sC,EA4DgCwrC,CA5DvBngE,QAAA,CAAa,KAAb,CAAoB,GAApB,CAAA8H,MAAA,CAA+B,GAA/B,CACb6sB,EAAA,CAAO,CAAP,CAAA,CAAYA,CAAA,CAAO,CAAP,CAAApyB,YAAA,EACZ,IAAIoyB,CAAJ,EAAcA,CAAAjyB,OAAd,CAGI,IAFA,IAAIwtE,EAAKv7C,CAAA,CAAO,CAAP,CAAT,CACIw7C,EAAMD,CAAAhwE,OAAA,CAAU,CAAV,CADV,CAES1B,EAAI,CAAb,CAAgBA,CAAhB,CAAoB0xE,CAAAxtE,OAApB,CAA+BlE,CAAA,EAA/B,CAAoC,CAChC,IAAIyB,EAAKiwE,CAAAhwE,OAAA,CAAU1B,CAAV,CACT,IAAW,GAAX,EAAI2xE,CAAJ,EAAyB,GAAzB,EAAkBA,CAAlB,EAAqC,GAArC,CAAgClwE,CAAhC,EAAiD,GAAjD,CAA4CA,CAA5C,CAAsD,CAClD00B,CAAA,CAAO,CAAP,CAAA,CAAYu7C,CAAA/vE,OAAA,CAAU3B,CAAV,CACZm2B,EAAAy7C,QAAA,CAAeF,CAAA/vE,OAAA,CAAU,CAAV,CAAa3B,CAAb,CAAf,CACA,MAHkD,CAFtB,CAyDhC,OAhDDm2B,CAgDS,CAAO,CAAP,CAAAz0B,OAAA,CAAiB,CAAjB,CAAR,EACA,KAAK,GAAL,CAxtCR,IAAIwlE;AAAUa,EAAA,CAytCF8J,CAztCE,CAuqCP17C,CAvqCsB,CAAO,CAAP,CAAf,CAA0B,CAAA,CAA1B,CACd,IAAK+wC,CAAL,CAGA,GAqtCY2K,CAttCZtM,EACI,CADmB2B,CACnB,CAAcliE,IAAAA,EAAd,GAmqCGmxB,CAnqCH,CAAO,CAAP,CAAJ,CAqtCY07C,CAptCRl9D,EAAA,CAAa,oBAAb,CAAoCw1D,EAAA,CAotC5B0H,CAptC4B,CAAe3K,CAAf,CAApC,CAEA,CAktCQ2K,CAntCRzQ,EACA,CADiB,CAAA,CACjB,CAAAz2C,EAAA,CAktCQknD,CAltCRtiE,EAAA,CAHJ,KAAA,CAqtCYsiE,CA/lDZl9D,EAAA,CAAa,mBAAb,CACA,KAAA,EAFem9D,EAmZf,IAAIA,CAAA5tE,OAAJ,CAAqB,CACjB,IAAK,IAAIlE,EAAI,CAAb,CAAgBA,CAAhB,CAAoB8xE,CAAA5tE,OAApB,CAAqClE,CAAA,EAArC,CA4sCQ6xE,CA3sCJtgD,GAAA,CAAa21C,CAAb,CAAsB4K,CAAA,CAAS9xE,CAAT,CAAtB,CAAmC,CAAnC,CA2sCI6xE,EAtsCRl9D,EAAA,CAAau4D,EAAA,CAssCL2E,CAtsCK,CAssCLA,CAtsCyBtM,EAApB,CAAb,CAPiB,CARrB,CAstCY,KACJ,MAAK,GAAL,CA9qCZ,CAAA,CAAA,CA+qC6B,IAAA,EArDlBpvC,CAqDkB,CAAO,CAAP,CAAA,CAAW,EArD7BA,CAqD6B,CAAO,CAAP,CAAX,CAAsBwrC,EAAAA,CA9qC/C,IAAa,GAAb,EAAImG,CAAJ,CA8qCYiK,CA7qCRp9D,EAAA,CAAa,sBAAb,CAMA,CAuqCQo9D,CA5qCRp9D,EAAA,CAAa,6BAAb,CAKA,CAuqCQo9D,CA3qCRp9D,EAAA,CAAa,6BAAb,CAIA,CAuqCQo9D,CA1qCRp9D,EAAA,CAAa,8BAAb,CAGA,CAuqCQo9D,CAzqCRp9D,EAAA,CAAa,2CAAb,CAEA,CAuqCQo9D,CAxqCRp9D,EAAA,CAAa,4BAAb,CACA,CAuqCQo9D,CAvqCRp9D,EAAA,CAAa,wCAAb,CAPJ;IAAA,CAWA,IAAIjK,EAAQi3D,CAAAjgE,OAAA,CAAY,CAAZ,CACZ,IAAa,GAAb,EAAIgJ,CAAJ,CAAkB,CAEd,IAAAsnE,GADcA,CACdA,CAAWlF,EAAA,CAgqCHiF,CAhqCG,CAgqCHA,CAhqCwBtM,EAArB,CACXuM,GAAA,EAAWlF,EAAA,CA+pCHiF,CA/pCG,CA+pCHA,CA/pCwBrM,EAArB,CAEX,EADAsM,EACA,EADWlF,EAAA,CA8pCHiF,CA9pCG,CA8pCHA,CA9pCwBpM,EAArB,CACX,GA6pCQoM,CA7pCMp9D,EAAA,CAAa,gBAAb,CALA,CAAlB,IASA,IAAa,GAAb,EAAIjK,CAAJ,CAAkB,CACd,IAAIrK,GAAI,CAACynE,CAALznE,EAAc,CACdynE,EAAJ,GAupCQiK,CAvpCGjM,GAAX,CAAqCzlE,EAArC,CAupCQ0xE,EAtpCRp9D,EAAA,CAAa,cAAb,CAA8BtU,EAA9B,CAAkC,iBAAlC,CAHc,CAAlB,IAOA,IAAc2E,IAAAA,EAAd,GAAI8iE,CAAJ,CAkpCYiK,CAjpCRp9D,EAAA,CAAa,4BAAb,CADJ,KAAA,CAKA,IAAIuyD,GAAU7B,CAAA,EACd,IAAa,GAAb,EAAIyC,CAAJ,GACIZ,EACI,CADMa,EAAA,CA2oCFgK,CA3oCE,CAAejK,CAAf,CAAsB,CAAA,CAAtB,CACN,CAAA,CAACZ,EAFT,EAEkB,MAAA,CAGL,IAAb,EAAIx8D,CAAJ,CACwB,IAApB,EAAIw8D,EAAAj8C,EAAJ,EACI26C,EAAA,CAqoCImM,CAroCJ,CACA,CAooCIA,CApoCJp9D,EAAA,CAAa,yBAAb,CAFJ,EAKI+3D,EAAA,CAioCIqF,CAjoCJ,CAioCIA,CAjoCgBtM,EAApB,CAAqCyB,EAArC,CALJ,EAOIwF,EAAA,CA+nCIqF,CA/nCJ,CA+nCIA,CA/nCgBrM,EAApB,CAAqCwB,EAArC,CAPJ,EASIwF,EAAA,CA6nCIqF,CA7nCJ,CA6nCIA,CA7nCgBpM,EAApB,CAAsCuB,EAAtC,CATJ,EAsoCQ6K,CA3nCRp9D,EAAA,CAAa,sBAAb,CAAsCw1D,EAAA,CA2nC9B4H,CA3nC8B,CAAe7K,EAAf,CAAtC,CAZJ,CAgBoB,IAhBpB,EAgBIA,EAAAj8C,EAhBJ,GAkBAg/C,EAAA,CAqnCY8H,CArnCZ,CAAsB7K,EAAtB,CAA+BgD,CAA/B,CAEA,CAAa,GAAb,EAAIx/D,CAAJ,CAmnCYqnE,CAlnCRzzC,GAAA,CAknCQyzC,CAlnCWtM,EAAnB,CAAoCyB,EAApC,CADJ,CAIa,GAAb,EAAIx8D,CAAJ,CA+mCYqnE,CA9mCRzzC,GAAA,CA8mCQyzC,CA9mCWrM,EAAnB,CAAoCwB,EAApC,CADJ,CAIa,GAAb;AAAIx8D,CAAJ,CA2mCYqnE,CA1mCRzzC,GAAA,CA0mCQyzC,CA1mCWpM,EAAnB,CAAqCuB,EAArC,CADJ,CA2mCY6K,CAvmCZp9D,EAAA,CAAa,8BAAb,CAA8CjK,CAA9C,CAhCA,CAXA,CA5BA,CADJ,CAgrCgB,KACJ,MAAK,GAAL,CA9lCR6E,IAAAA,GA+lCY0iE,CA/lCZ1iE,EAmyDI,GAAA2iE,EAAJ,GACI,EAAAA,EAAA9vE,MADJ,CAC8B,EAD9B,CAnsBY,MACJ,MAAK,GAAL,CAplCZ,CAAA,CAAA,CACI,IAAIhC,EAAJ,CACIuhE,GAwhCGxrC,CAxhCI,CAAO,CAAP,CADX,CAEI2xC,GAuhCG3xC,CAvhCK,CAAO,CAAP,CAFZ,CAGIg8C,GAshCGh8C,CAthCI,CAAO,CAAP,CAHX,CAIIi8C,GAqhCGj8C,CArhCM,CAAO,CAAP,CAEb,IAAa,GAAb,EAAI2xC,EAAJ,CAAkB,CACd,IAAIuK,GAAW,EACf,KAAKjyE,EAAL,GAAU4iB,GAAV,CAilCQsvD,CAhlCApM,GAAA,CAAgB9lE,EAAhB,CAAJ,GACQiyE,EACJ,GADcA,EACd,EAD0B,GAC1B,EAAAA,EAAA,EAAYjyE,EAFhB,CAKJiyE,GAAA,EAAY,gBA2kCJC,EA1kCR39D,EAAA,CAAa,uBAAb,CA0kCQ29D,EAzkCR39D,EAAA,CAAa,yCAAb,CAykCQ29D,EAxkCR39D,EAAA,CAAa,2CAAb,CAwkCQ29D,EAvkCR39D,EAAA,CAAa,2CAAb,CAukCQ29D,EAtkCR39D,EAAA,CAAa,4CAAb,CAskCQ29D,EArkCR39D,EAAA,CAAa,mDAAb,CAqkCQ29D;CApkCR39D,EAAA,CAAa,6DAAb,CACI09D,GAAAnuE,OAAJ,EAmkCQouE,CAnkCa39D,EAAA,CAAa,8BAAb,CAA8C09D,EAA9C,CAhBP,CAAlB,IAoBA,IAAa,OAAb,EAAIvK,EAAJ,CAAsB,CAClB,IAAIyK,GAASC,EAAA,CA8jCLF,CA9jCK/iE,EAAA,CAAkB,CAAA,CAAlB,CACb,IAAY,SAAZ,EAAI4iE,EAAJ,CAaIh9D,OAAAxS,IAAA,CAAY4vE,EAAZ,CAbJ,KAcO,CAxDXhjE,IAAAA,GAumCY+iE,CAvmCZ/iE,EAmyDI,GAAA2iE,EAAJ,GACI,EAAAA,EAAA9vE,MADJ,CAC8B,EAD9B,CAzuDYmwE,GAAJ,EA6iCID,CA7iCQ39D,EAAA,CAAa49D,EAAb,CAFT,CAhBW,CAAtB,IAuBA,IAAa,SAAb,EAAIzK,EAAJ,CAtWA,IAAK,IAAIgC,GAAS,CAAlB,CAAqBA,EAArB,CA84CYwI,CA94CkB9M,EAAAthE,OAA9B,CAAwD4lE,EAAA,EAAxD,CAAkE,CAC9D,IAAIE,GA64CIsI,CA74CU9M,EAAA,CAAkBsE,EAAlB,CAAlB,CACSH,EAAT,KAASA,EAAT,GAAoBK,GAAA1hE,GAApB,CACI,GAAyB,GAAzB,EAAIqhE,EAAAjoE,OAAA,CAAe,CAAf,CAAJ,CAAA,CAEA,IAAIkoE,GADSI,EAAA1hE,GAAAyhE,CAAqBJ,EAArBI,CACG,EAChB,IAAkB/kE,IAAAA,EAAlB,GAAI4kE,EAAJ,CAAA,CACA,IAAI6I,GAAczI,EAAA1hE,GAAA,CAAqBqhE,EAArB,CAAA,EACd8I,GAAJ,GAAiB9I,EAAjB,CAA2B8I,EAA3B,CAs4CIH,EAr4CJ39D,EAAA,CAxzDDwf,CAAA,CA6rGKm+C,CA7rGL,CAwzD+B1I,EAxzD/B,CAwzDC,CAA2C,GAA3C,CAAiDD,EAAjD,CAHA,CAHA,CAH0D,CAsWlE,IAAA,CAKA,GAAY,GAAZ,EAAIhI,EAAJ,CAAiB,CACb,IAAKvhE,EAAL,GAAU4iB,GAAV,CACI,GAi+BDmT,CAj+BK,CAAO,CAAP,CAAJ,EAAiB/1B,EAAjB,CAAoB,CAChB,IAAIoqE,GAgiCJ8H,CAhiCepM,GAAA,CAAgB9lE,EAAhB,CACXoqE,GAAJ;CA+9BLr0C,CA99BSr0B,MAAA,EAEA,CA49BTq0B,CA79BSr0B,MAAA,EACA,CAAA0oE,EAAA,CA49BTr0C,CA59BS,CAHJ,EA+hCAm8C,CA1hCI39D,EAAA,CAAa,yBAAb,CAAyCmzD,EAAzC,CAEJ,OAAA,CATgB,CAYnBA,EAAL,GAAYnG,EAAZ,CAqhCQ2Q,CArhCW5L,GAAnB,EAAwC,IAAxC,CAda,CAAjB,IAmiCY4L,EAnhCR5L,GAAA,CAAoB/E,EAGxB,IAAY,IAAZ,EAAIA,EAAJ,CAAkB,CACGmG,IAAAA,GAAAA,EAAAA,CAAOqK,GAAAA,EAAPrK,CAlkEjB4K,GAAQ,EAkkES5K,CAjkEjB6K,GAAW,CAikEM7K,CAhkEjB8K,GA+kGQN,CA/kGGzM,EAgkEMiC,CA/jEjB9V,GA8kGQsgB,CA9kGGvM,EAEf,IAAI/T,EAAA9tD,OAAJ,CAAqB,CACjB,IAAI2uE,GAAQ,CAACC,EAATD,EA2kGIP,CA3kGctM,GAAtB,CACIsL,GAAS,CAACyB,EAAVzB,EAAoB,EAEpBtvE,MAAA,CAAM6wE,EAAN,CAAJ,CACIA,EADJ,CACYvB,EADZ,CAGIoB,EAHJ,CAGY,OAGRG,GAAJ,CAAY7gB,EAAA9tD,OAAZ,GAkkGQouE,CAjkGJ39D,EAAA,CAAa,aAAb,CAA6Bq9C,EAAA9tD,OAA7B,CAA+C,YAA/C,CACA,CAAA2uE,EAAA,CAAQ7gB,EAAA9tD,OAFZ,CAKA0uE,GAAA,EAAYC,EACG,EAAf,CAAID,EAAJ,GAI8C,IAA1C,EAAI5gB,EAAA,CAASA,EAAA9tD,OAAT,CAA2B,CAA3B,CAAA+mB,EAAJ,EACI4nD,EACA,CADQD,EACR,CADmBC,EACnB,CAAAD,EAAA,CAAW,CAFf,EAIIA,EAJJ,EAIgB5gB,EAAA9tD,OARpB,CAYA,KAAI8uE,GAAW,EACD,OAAd,EAAID,EAAJ,GACIzB,EACA,CADS,GACT,CAAA0B,EAAA,CAAW,CAAC,MAAD,CAFf,CAqBA,KAhBchuE,IAAAA,EAgBd,GAhBI8tE,EAgBJ,EA0hGQR,CAziGJ39D,EAAA,CAAak+D,EAAb,CAAqB,wBAArB,CAeJ,CAAgB,CAAhB,CAAOvB,EAAP,EAAqBsB,EAArB,EA0hGQN,CA1hGyBzM,EAAjC,CAAA,CAA2D,CAEvD,IAAIqB,GAAUlV,EAAA,CAAS4gB,EAAA,EAAT,CACd,IAAoB,IAApB,EAAI1L,EAAAj8C,EAAJ,CAA0B,KAM1B;IAAIgoD,GAAa5N,CAAA,CAAa6B,EAAAj8C,EAAb,CAAjB,CAGImiD,GAAYyF,EAAA,EAHhB,CAeIpB,GAAevE,EAAA,CAkgGfoF,CAlgGe,CAAoBW,EAApB,CAbJ9F,SAaI,CAA0CC,EAA1C,CAEnB,EAAI,CAAC4F,EAAA9uE,OAAL,EAA6D,CAA7D,EAAwButE,EAAAlwE,QAAA,CAAqByxE,EAAA,CAAS,CAAT,CAArB,CAAxB,GAggGIV,CA//FA39D,EAAA,CAAa88D,EAAb,CAOAwB,GAAAC,GAAJ,GACIN,EAAoE,EAAxDK,EAAAC,GAAwD,CAAjC5B,EAAiC,EAAvB2B,EAAAC,GAAuB,CAAAL,EAAA,EAASI,EAAAC,GADjF,CAIIN,GAAJ,EAAgB5gB,EAAA9tD,OAAhB,GAAiC0uE,EAAjC,CAA4C,CAA5C,CAo/FIN,EAn/FJtM,GAAA,CAAmB6M,EACnBF,GAAA,EACArB,GAAA,EAzCuD,CAlD1C,CAoGhBqB,EAAL,GAw+FYL,CAv+FR39D,EAAA,CAAa,KAAb,CAAqB+9D,EAArB,CAA6B,mBAA7B,CACA,CAs+FQJ,CAt+FRtM,GAAA,CAAmBhhE,IAAAA,EAFvB,CAw9DkB,CAAlB,IAAA,CAKA,IAAIkiE,GAAUa,EAAA,CA2gCFuK,CA3gCE,CAAexK,EAAf,CACd,IAAKZ,EAAL,CAEA,GAAY,IAAZ,EAAIvF,EAAJ,CAAkB,CAmBd,IAAI/zB,GAAas5B,EAAAt5B,GAAbA,EAAiD,KAAjDA,CAAkCs5B,EAAAj8C,EAAtC,CACIzrB,EAAImuC,EAAA,CAo/BA2kC,CAp/BAjjE,EAAA,CAAqB63D,EAAAj8C,EAArB,EAAqC,CAArC,CAAwC2iB,EAAxC,CAo/BA0kC,EAn/BR39D,EAAA,CAAaowC,EAAA,CAAQ,EAAR,CAAYnX,EAAA,CAAW,EAAX,CAAe,EAA3B,CAAb,CAA8Cs3B,EAAA,CAAUgC,EAAAj8C,EAAV,CAAwB2iB,EAAA,CAAW,EAAX,CAAgB,EAAxC,CAA4C,CAA5C,CAA9C,CAA+F,IAA/F,CAAsGpkB,CAAA,CAAU09C,EAAAj8C,EAAV,CAAwB,CAAxB,CAAtG,CACe,EAAf,CAAIzrB,CAAA0E,OAAJ,EACmB,CAIf,CAJI1E,CAAA0E,OAIJ,GA6+BIouE,CAh/BA39D,EAAA,CAAa,0BAAb,CAA0CuwD,EAAA,CAAU1lE,CAAA,CAAE,CAAF,CAAV,CAAgB,EAAhB,CAAoB,CAApB,CAA1C,CAAmE,IAAnE,CAA0EgqB,CAAA,CAAUhqB,CAAA,CAAE,CAAF,CAAV,CAAgB,CAAhB,CAA1E,CACA,CA++BA8yE,CA/+BA39D,EAAA,CAAa,SAAb,CAAyBwiB,EAAA,CAAU33B,CAAA,CAAE,CAAF,CAAV,CAAgB,CAAhB,CAAzB,CAA8C,KAA9C,CAAsD0lE,EAAA,CAAU1lE,CAAA,CAAE,CAAF,CAAV,CAAgB,EAAhB,CAAoB,CAApB,CAAtD,CAA+E,IAA/E;AAAsFgqB,CAAA,CAAUhqB,CAAA,CAAE,CAAF,CAAV,CAAgB,CAAhB,CAAtF,CAEJ,EA6+BI8yE,CA7+BJ39D,EAAA,CAAa,cAAb,CAA8BuwD,EAAA,CAAU1lE,CAAA,CAAE,CAAF,CAAV,CAAgB,EAAhB,CAAoB,CAApB,CAA9B,CAAuD,IAAvD,CAA8DgqB,CAAA,CAAUhqB,CAAA,CAAE,CAAF,CAAV,CAAgB,CAAhB,CAA9D,CALJ,GAk/BQ8yE,CA3+BJ39D,EAAA,CAAa,0BAAb,CAA0CuwD,EAAA,CAAU1lE,CAAA,CAAE,CAAF,CAAV,CAAgB,EAAhB,CAAoB,CAApB,CAA1C,CAAmE,IAAnE,CAA0EgqB,CAAA,CAAUhqB,CAAA,CAAE,CAAF,CAAV,CAAgB,CAAhB,CAA1E,CAGA,CAw+BI8yE,CA1+BJ39D,EAAA,CAAa,MAAb,CAAsBw+D,EAAA,CAAoB3zE,CAAA,CAAE,CAAF,CAApB,CAAtB,CAAkD,KAAlD,CAA0DA,CAAA,CAAE,CAAF,CAA1D,CAAiE,IAAjE,CAAwE0lE,EAAA,CAAU1lE,CAAA,CAAE,CAAF,CAAV,CAAgB,EAAhB,CAAoB,CAApB,CAAxE,CAAiG,IAAjG,CAAwGgqB,CAAA,CAAUhqB,CAAA,CAAE,CAAF,CAAV,CAAgB,CAAhB,CAAxG,CAEA,CAw+BI8yE,CAz+BJ39D,EAAA,CAAa,iBAAb,CAA8BuwD,EAAA,CAAU1lE,CAAA,CAAE,CAAF,CAAV,CAAgB,EAAhB,CAAoB,CAApB,CAA9B,CAAuD,IAAvD,CAA8DgqB,CAAA,CAAUhqB,CAAA,CAAE,CAAF,CAAV,CAAgB,CAAhB,CAA9D,CACA,CAw+BI8yE,CAx+BJ39D,EAAA,CAAa,iBAAb,CAA8BuwD,EAAA,CAAU1lE,CAAA,CAAE,CAAF,CAAV,CAAgB,EAAhB,CAAoB,CAApB,CAA9B,CAAuD,IAAvD,CAA8DgqB,CAAA,CAAUhqB,CAAA,CAAE,CAAF,CAAV,CAAgB,CAAhB,CAA9D,CAVJ,CAtBc,CAAlB,IAAA,CAqCA,IAAI8+C,GAAM,CAAV,CACI80B,GAAiB,IAAjBA,EAASzR,EAEb,IAAIwQ,EAAJ,CAAU,CACN,GAAsB,GAAtB,EAAIA,EAAAzwE,OAAA,CAAY,CAAZ,CAAJ,CACIywE,EACA,CADOA,EAAAxwE,OAAA,CAAY,CAAZ,CACP,EADyBywE,EACzB,CAAA9zB,EAAA,CAAM+kB,EAAA,CA69BFiP,CA79BE,CAAgBH,EAAhB,CAFV,KAIK,CACD,IAAIZ,GAAaxJ,EAAA,CA09BbuK,CA19Ba,CAAeH,EAAf,CACbZ,GAAJ,GAAgBjzB,EAAhB,CAAsBizB,EAAAtmD,EAAtB,CAAwCi8C,EAAAj8C,EAAxC,CAFC,CAIK,CAAV,CAAIqzB,EAAJ,GAAaA,EAAb,CAAmB,CAAnB,CACU,MAAV,CAAIA,EAAJ,GAAmBA,EAAnB,CAAyB,KAAzB,CAVM,CAaV,IAAIh1B,GAm9BQgpD,CAn9BAhpD,EACR49C,GAAA59C,EAAJ,GAk9BYgpD,CAl9BOhpD,EAAnB,CAAgC49C,EAAA59C,EAAhC,CAYA,KANA,IAAI4G,GAAgB,IAAR,EAAAyxC,EAAA;AAAc,CAAd,CAA2B,IAAR,EAAAA,EAAA,CAAc,CAAd,CAAkB,CAAjD,CACIrT,GAAUp+B,EAAVo+B,CAAiBhQ,EAAjBgQ,EAAyB,GAD7B,CAEI+kB,GAAgBD,EAAA,CAAO,EAAP,CA08BRd,CA18BoBhpD,EAFhC,CAGIgoD,IAAYhjB,EAAZgjB,CAAqB+B,EAArB/B,CAAqC,CAArCA,EAA0C+B,EAA1C/B,CAAyD,CAAzDA,EAA+D,CAHnE,CAKIt6C,GAAQ,EACZ,CAAOs6C,EAAA,EAAP,EAA4B,CAA5B,CAAmBhjB,EAAnB,CAAA,CAA+B,CAAA,IACvBlmD,GAAQ,EADe,CACXkrE,GAAS,EACzBxL,GAAA,CAAQqC,EAAA,CAo8BAmI,CAp8BA,CAAepL,EAAf,CAYR,KAFA,IAAIlnE,GAAIqzE,EAAR,CACI1qE,GAAO,CADX,CACc7G,GAAQ,CACtB,CAAW,CAAX,CAAO9B,EAAP,EAAyB,CAAzB,CAAgBsuD,EAAhB,CAAA,CAA4B,CACxB,IAAIjuD,GAAI,CAAR,CACIQ,GAAY,CAAR,EAAAqvB,EAAA,CAs7BJoiD,CAt7BethD,GAAA,CAAak2C,EAAb,CAAsB7mE,EAAtB,CAAX,CAs7BJiyE,CAt7B0CnhD,GAAA,CAAa+1C,EAAb,CAAuB7mE,EAAvB,CAA2B,CAA3B,CAC9CsI,GAAA,EAAS9H,EAAT,GAAeiB,EAAf,EAAwB,CAAxB,CACAA,GAAA,EAASzB,EACLyB,GAAJ,EAAaouB,EAAb,GACQkjD,EAAJ,EACQhrE,EACJ,GADWA,EACX,EADoB,GACpB,EAAAA,EAAA,EAAS,IAAT,CAAe9E,CAAA,CAAUqF,EAAV,CAAgBunB,EAAhB,EAAwB,CAAxB,CAFnB,GAII9nB,EACA,EADS+rB,CAAA,CA86Bbm+C,CA96Ba,CAAe3pE,EAAf,CAAqBunB,EAArB,EAA6B,CAA7B,CACT,CAAA9nB,EAAA,EAAkB,CAAR,EAAA8nB,EAAA,CAAiB,CAAL,EAAAlwB,EAAA,CAAQ,GAAR,CAAc,GAA1B,CAAiC,IAL/C,CAOA,CAAA2I,EAAA,CAAO7G,EAAP,CAAe,CARnB,CAUA9B,GAAA,EAAKK,EACL,KADQiuD,EACR,EADkBjuD,EAClB,CAAe,CAAf,EAAO6vB,EAAP,EAAoB7vB,EAAA,EAApB,CAAA,CAAyB,CACrB,IAAIX,GAAImB,EAAJnB,CAAQ,GACZ4zE,GAAA,EAAgB,EAAL,EAAA5zE,EAAA,EAAe,GAAf,CAAWA,EAAX,CAAoBkD,MAAAC,aAAA,CAAoBnD,EAApB,CAApB,CAA6C,GACxDmB,GAAA,GAAM,CAHe,CAhBD,CAsBxBm2B,EAAJ,GAAWA,EAAX,EAAoB,IAApB,CAEIA,GAAA,CADAo8C,EAAJ,CACIp8C,EADJ,EACa5uB,EADb,CACqB,GADrB,EAGI4uB,EAHJ,EAGa8wC,EAHb,CAGqB,KAHrB,CAG6B1/D,EAH7B,EAG4C,CAAN,EAACpI,EAAD,CAAW,GAAX,CAAiBszE,EAAjB,CAA2B,EAHjE,EArC2B,CA4C3Bt8C,EAAJ,EA05BYs7C,CA15BD39D,EAAA,CAAaqiB,EAAb,CA05BCs7C;CAx5BZhN,GAAA,CAAuB4B,EAw5BXoL,EAv5BZhpD,EAAA,CAAaA,EAjHb,CARA,CAxBA,CAlDJ,CA2lCgB,KACJ,MAAK,GAAL,CACI,GAAiB,MAAjB,EAnEL6M,CAmES,CAAO,CAAP,CAAJ,CAAyB,KAh5BzC,KAGQwrC,GA00BGxrC,CA10BI,CAAO,CAAP,CAHf,CAIQ2xC,GAy0BG3xC,CAz0BK,CAAO,CAAP,CACZ,IAAY,IAAZ,EAAIwrC,EAAJ,CAAkB,CACd,IAAAzxC,GAAO,CACP,KAAAtE,GAAO,GACP,KAAA2nD,GAy4BQC,CAz4BAxiD,GACR,KAAAyiD,GAw4BQD,CAx4BAjiD,GAJM,CAAlB,IAMiB,GAAZ,EAAIowC,EAAJ,EAA2B,IAA3B,EAAmBA,EAAnB,EACDzxC,EAGA,CAHO,CAGP,CAFAtE,EAEA,CAFO,KAEP,CADA2nD,EACA,CAk4BQC,CAn4BAriD,GACR,CAAAsiD,EAAA,CAk4BQD,CAl4BAzoD,GAJP,EAMD+8C,EANC,CAMO,IAEZ,IAAa,IAAb,EAAIA,EAAJ,CA83BY0L,CA73BR7+D,EAAA,CAAa,uBAAb,CAEA,CA23BQ6+D,CA53BR7+D,EAAA,CAAa,yCAAb,CACA,CA23BQ6+D,CA33BR7+D,EAAA,CAAa,yCAAb,CAHJ,KAAA,CAMA,IAAIuyD,GAAUa,EAAA,CAw3BFyL,CAx3BE,CAAe1L,EAAf,CACd,IAAKZ,EAAL,CACA,IAAK,IAAIlnE,GAAI,CAAb,CAAgBA,EAAhB,CAkzBOm2B,CAlzBajyB,OAApB,CAAmClE,EAAA,EAAnC,CAAwC,CACpC,IAAIiiE,GAAO+B,EAAA,CAq3BHwP,CAr3BG,CAizBRr9C,CAjzB6B,CAAOn2B,EAAP,CAArB,CACX,IAAagF,IAAAA,EAAb,GAAIi9D,EAAJ,CAAwB,CAo3BhBuR,CAn3BJ7+D,EAAA,CAAa,sBAAb,CA+yBDwhB,CA/yBuC,CAAOn2B,EAAP,CAAtC,CACA,MAFoB,CAIpBiiE,EAAJ,CAAW,CAACr2C,EAAZ,EAg3BQ4nD,CA/2BJ7+D,EAAA,CAAa,WAAb,CAA2BrR,CAAA,CAAU2+D,EAAV,CAA3B,CAA6C,WAA7C;AAA2D/xC,EAA3D,CAAkE,aAAlE,CA+2BIsjD,EA72BR7+D,EAAA,CAAa,WAAb,CAA2Bw1D,EAAA,CA62BnBqJ,CA72BmB,CAAetM,EAAf,CAA3B,EAAsDjxD,CAAA,CA62B9Cu9D,CA72B8C,CAt9sBlDnwD,EAs9sBkD,CAAA,CAAwC,EAAxC,CAA8C,QAA9C,CAAyD8Q,CAAA,CA62BvGq/C,CA72BuG,CAAeD,EAAAt/D,KAAA,CA62BtHu/D,CA72BsH,CAAiBtM,EAAjB,CAAf,CAA0Ch3C,EAA1C,EAAkD,CAAlD,CAA/G,EAAwK,MAAxK,CAAiLiE,CAAA,CA62BzKq/C,CA72ByK,CAAevR,EAAf,CAAqB/xC,EAArB,EAA6B,CAA7B,CAAjL,CACAujD,GAAAx/D,KAAA,CA42BQu/D,CA52BR,CAAiBtM,EAAjB,CAA0BjF,EAA1B,CAAgC/xC,EAAhC,CAVoC,CARxC,CA+3BY,KACJ,MAAK,GAAL,CAhbZ,CAAA,CAAA,CAibsC,IAAA,GAvE3BiG,CAuE2B,CAAO,CAAP,CAAA,CAAWwrC,GAAAA,CA7a7C,IAAc38D,IAAAA,EAAd,GAAI8iE,EAAJ,CAAyB,CACrB,IAAIZ,GAAUa,EAAA,CA4aN2L,CA5aM,CAAe5L,EAAf,CAAsB,CAAA,CAAtB,CACd,IAAI,CAACZ,EAAL,CAAc,MAAA,CACd+C,GAAA,CA0aQyJ,CA1aR,CAAsBxM,EAAtB,CAA+BgD,EAA/B,CA0aQwJ,EAvgEZp1C,GAAA,CAugEYo1C,CAvgEOjO,EAAnB,CA8lD2ByB,EA9lD3B,CAA6C,CAAA,CAA7C,CA0lDyB,CAMzBh9C,EAAA,CAuaYwpD,CAvaZ,CAAc,CAAA,CAAd,CAuamDzP,CAvanD,CAVJ,CAkbgB,KACJ,MAAK,GAAL,CACI0P,CAr2BRjlE,MAAAmb,EAAJ,EAq2BwBo6C,CAn2BpB,EAm2BQ0P,CAp2BKh/D,EAAA,CAAa,SAAb,CACb,CAAAwV,EAAA,CAm2BQwpD,CAn2BR,CAFJ,EAIQl+D,EAAA,CAi2BIk+D,CAj2BJ,CAAY,CAAA,CAAZ,CAJR,EAq2BwB1P,CAr2BxB,EAq2BY0P,CAh2BKh/D,EAAA,CAAa,gBAAb,CAi2BL,MACJ,MAAK,GAAL,CACI,GAAiB,IAAjB,EA7ELwhB,CA6ES,CAAO,CAAP,CAAJ,CAAuB,CACJ,IAAA,GAAAwrC,CAAAhgE,OAAA,CAAY,CAAZ,CA/0B/BggE,GAAA,CAAOte,EAAA,CAASse,EAAT,CACP,IAAKqC,EAAA,CA80BgB4P,CA90BhB,CAAqBjS,EAArB,CAAL,CAAA,CA80B+CsC,CA10B/C,EA00BqB2P,CA10BRj/D,EAAA,CAAa,QAAb,CAAwBgtD,EAAxB,CACb,KAAA,GAAO,CAAA,CALP,CAAA,IA80B+CsC,EA50B3C,EA40BiB2P,CA70BJj/D,EAAA,CAAa,SAAb,CAAyBgtD,EAAzB,CACb,CAAA,EAAA,CAAO,CAAA,CA40BU,GAAL,GACIx3B,CADJ,CACa,CAAA,CADb,CAGA,MAJmB,CAMvB84B,CAAA,CAAS,CAAA,CACT,MACJ;KAAK,GAAL,CACsB,IAAA,GAtFvB9sC,CAsFuB,CAAO,CAAP,CAzS9B,IAAa,GAAb,EAmNOA,CAsFkC2xC,CAAO,CAAPA,CAzSzC,CAySY+L,CAxSRl/D,EAAA,CAAa,uBAAb,CAEA,CAsSQk/D,CAvSRl/D,EAAA,CAAa,2BAAb,CACA,CAsSQk/D,CAtSRl/D,EAAA,CAAa,+BAAb,CAHJ,KAAA,CAOA,IAAkBm/D,GAAU,CAA5B,CACIC,GAAc1O,CAAA,EADlB,CAEI2O,GAAe3O,CAAA,CAgSPwO,CAhSoBxkE,EA1igBzB4c,EAAA,CA9qPKwf,CA8qPL,CA0igBY,CAGnB,KA6RYooC,CA/RZl/D,EAAA,CAAa,kBAAb,CAAkCw1D,EAAA,CA+RtB0J,CA/RsB,CAAeG,EAAf,CAAlC,CAEA,CALcC,EAKd,CAAOH,EAAP,CAAA,CAA0B,CAEtB,IAFsB,IAClBI,GAAQ,IADU,CACcC,GAAS,GAC7C,CAAmC,KAAnC,CAAQH,EAAA/oD,EAAR,GAA8B,CAA9B,CAAA,CAA4C,CACxC8oD,EAAA9oD,EAAA,CA0RI4oD,CA1Re1iD,GAAA,CAAa6iD,EAAb,CAA2B,CAA3B,CAKnB,IAAyB,IAAzB,EAAIA,EAAA/oD,EAAJ,EAAiC,CAACkpD,EAAA,EAAlC,CAA4C,KAC5C,IAAI,EAAAJ,EAAA9oD,EAAA,CAAmB,CAAnB,CAAJ,CAAA,CAzDR,IA6UY4oD,IAAAA,GAAAA,CAAAA,CAnRiBE,GAAAA,EAmRjBF,CAhVRK,GAAQ,IAgVAL,CA/UR5oD,GAAOi8C,EAAAj8C,EA+UC4oD,CA9URO,GAAWnpD,EA8UH4oD,CA7UHxzE,GAAI,CAAb,CAAqB,CAArB,EAAgBA,EAAhB,EAA4B4qB,EAA5B,CAAkC5qB,EAAA,EAAlC,CAAuC,CACnC,GAAQ,CAAR,CAAIA,EAAJ,CAAW,CACP6mE,EAAAj8C,EAAA,CAAeA,EACf,KAAIvqB,GAAIwsE,EAAA,CAAAA,EAAA,CAAoBhG,EAApB,CACR,IAAwB,CAAxB,EAAIxmE,EAAAa,QAAA,CAAU,KAAV,CAAJ,CAA2B,CAOvB,IAAIvB,GAAIU,EAAAa,QAAA,CAAU,GAAV,CAER,IAAI0pB,EAAJ,EADQvqB,EAAAa,QAAAtB,CAAU,GAAVA,CAAeD,EAAfC,CAAiB,CAAjBA,CACR,CAAgBD,EAAhB,CAAoB,CAApB,EAAuB,CAAvB,EAA4Bo0E,EAA5B,CAAsC,CAClCF,EAAA,CAAQxzE,EACR;KAFkC,CATf,CAHpB,CAkBXuqB,EAAA,EAAQ,CAnB2B,CAqBvCi8C,EAAAj8C,EAAA,CAAempD,EAsCP,IArCR,EAqCQ,CArCDF,EAqCC,CAAW,KAFX,CAPwC,CAiB5C,GAAI,CAACA,EAAL,EAlB8BG,IAkB9B,EAAcH,EAAd,CAAkC,KAClC,KAAIvK,GAAU,IACd,IAAY,IAAZ,EAAIhI,EAAJ,CAAkB,CACd,IAAIniE,GAAI00E,EAAAnyE,MAAA,CAAY,YAAZ,CACJvC,GAAJ,GAAOmqE,EAAP,CAAiB8G,EAAA,CAsQboD,CAtQa,CAAYr0E,EAAA,CAAE,CAAF,CAAZ,CAAjB,CAFc,CAIlB00E,EAAA,CAAQnvB,EAAA,CAAQmvB,EAAR,CAAe,EAAf,CAAR,CAA6B,KAA7B,EAAsCvK,EAAtC,EAAiD,WAAjD,CAA4DQ,EAAA,CAoQpD0J,CApQoD,CAAeG,EAAf,CAA5D,CAoQQH,EAnQRl/D,EAAA,CAAau/D,EAAb,CAEAJ,GAAA,EA5BsB,CA8BrBA,EAAL,EA+PYD,CA/PEl/D,EAAA,CAAa,2BAAb,CA1Cd,CA0SY,KACJ,MAAK,GAAL,CACI,GAAiB,IAAjB,EAzFLwhB,CAyFS,CAAO,CAAP,CAAJ,CAAuB,CACnBs6C,EAAA,CAAAA,CAAA,CA1FTt6C,CA0FqB,CAAO,CAAP,CAAZ,CAAuB,CAAA,CAAvB,CACA,MAFmB,CAIvB8sC,CAAA,CAAS,CAAA,CACT,MACJ,MAAK,GAAL,CA9uBZ,CAAA,CAAA,CACI,IAAI7iE,EAAJ,CACIk0E,GAAY,IADhB,CAEIC,EA4oBGp+C,CA5oBS,CAAO,CAAP,CACC,IAAjB,EAAIo+C,CAAJ,GAAsBA,CAAtB,CAAkCvvE,IAAAA,EAAlC,CAEA,IAAkBA,IAAAA,EAAlB,GAAIuvE,CAAJ,CAA6B,CACzB,IAAIpmE,GAAc,CAClB,IAAiB,KAAjB,EAAIomE,CAAJ,CACIpmE,EACA,CADc,UACd,CAAAomE,CAAA,CAAY,IAFhB,KAGO,IAAiB,IAAjB,EAAIA,CAAJ,CACHD,EACA,CADY,CAAA,CACZ,CAAAC,CAAA,CAAY,IAFT,KAGA,IAAiB,KAAjB,EAAIA,CAAJ,CACHD,EACA,CADY,CAAA,CACZ,CAAAC,CAAA,CAAY,IAFT,KAGA,CAKc,MAAjB,EAAIA,CAAJ,GAAyBA,CAAzB,CAAqC,KAArC,CACiB,MAAjB,EAAIA,CAAJ,GAAwBA,CAAxB;AAAoC,UAApC,CACA,KAAKn0E,EAAL,GAAU4iB,GAAV,CACI,GAAIuxD,CAAJ,EAAiBn0E,EAAjB,CAAoB,CAChB+N,EAAA,CAAc6U,EAAA,CAAyB5iB,EAAzB,CACdk0E,GAAA,CAAY,CAAC,EAotBjBE,CAptBmBrmE,GAAF,CAAqBA,EAArB,CACb,MAHgB,CAMxB,GAAI,CAACA,EAAL,CAAkB,CAgtBdqmE,CA/sBA7/D,EAAA,CAAa,4BAAb,CAA4C4/D,CAA5C,CACA,OAAA,CAFc,CAdf,CAmBP,GAAIpmE,EAAJ,CACI,GAAiB,IAAjB,EA0mBDgoB,CA1mBK,CAAO,CAAP,CAAJ,CA0sBIq+C,CAzsBArmE,GACA,EADoBA,EACpB,CAAAmmE,EAAA,CAAY,CAAA,CAFhB,KAIK,IAAiB,KAAjB,EAsmBNn+C,CAtmBU,CAAO,CAAP,CAAJ,GAssBDq+C,CArsBArmE,GAEI,EAFgB,CAACA,EAEjB,CADJmmE,EACI,CADQ,CAAA,CACR,CAtotBRhwD,SAsotBQ,EAAAnW,EAHH,EAGwC,CAErC,IADA,IAAInO,GAAkC,GAA9B,EAksBZw0E,CAlsBYpO,EAAAliE,OAAA,CAksBZswE,CAlsBgDpO,EAAAliE,OAApC,CAAiE,GAAjE,CAAwE,CAChF,CAAOlE,EAAP,CAisBJw0E,CAjsBepO,EAAAliE,OAAX,CAAA,CAisBJswE,CAhsBQ7/D,EAAA,CAgsBR6/D,CAhsBqBpO,EAAA,CAAoBpmE,EAAA,EAApB,CAAb,CAgsBRw0E,EA9rBIpO,EAAA,CAAsB,EALe,CAtCxB,CAoD7B,IAAI/lE,GAAI,CAAR,CACIo0E,GAAc,EAClB,KAAKr0E,EAAL,GAAU4iB,GAAV,CACI,GAAI,CAACuxD,CAAL,EAAkBA,CAAlB,EAA+Bn0E,EAA/B,CAAkC,CAE9B,IAAIs0E,GAAW,CAAC,EAgrBZF,CAhrBcrmE,GAAF,CADC6U,EAAAunD,CAAyBnqE,EAAzBmqE,CACD,CAChB,IAAkB,IAAlB,GAAI+J,EAAJ,EAA0BA,EAA1B,EAAuCI,EAAvC,CACID,EAOJ,GAPiBA,EAOjB,EAPgC,GAOhC,EANM,EAAEp0E,EAMR,CANY,EAMZ,GANiBo0E,EAMjB,EANgC,MAMhC,EADS,KACT,EADIr0E,EACJ,GADgBA,EAChB,CADoB,MACpB,EAAAq0E,EAAA,EAAer0E,EAXe,CAepB4E,IAAAA,EAAlB,GAAIuvE,CAAJ,EAmqBYC,CAlqBR7/D,EAAA,CAAa,oEAAb,CAkqBQ6/D;CA/pBZ7/D,EAAA,EAA4B,IAAd,GAAA2/D,EAAA,CAAqBA,EAAA,CAAW,gBAAX,CAA8B,gBAAnD,CAAuE,yBAArF,GAAmHG,EAAnH,EAAkI,MAAlI,EAEAxO,GAAA,CA6pBYuO,CA7pBZ,CAlFJ,CAgvBgB,KACJ,MAAK,GAAL,CACI,GAAiB,OAAjB,EAnGLr+C,CAmGS,CAAO,CAAP,CAAJ,CAA0B,CACtB26C,EAAA,CAAAA,CAAA,CAAanP,CAAAhgE,OAAA,CAAY,CAAZ,CAAb,CACA,MAFsB,CAId,IAAA,GAvGjBw0B,CAuGiB,CAAO,CAAP,CAnaxB,IAAe,GAAf,EA4TOA,CAuG4Bw+C,CAAO,CAAPA,CAnanC,CAmaYC,CAlaRjgE,EAAA,CAAa,gBAAb,CAEA,CAgaQigE,CAjaRjgE,EAAA,CAAa,4BAAb,CACA,CAgaQigE,CAhaRjgE,EAAA,CAAa,kDAAb,CAHJ,KAAA,CAQA,IAAI2W,GAAiB,IAAR,EAAAq2C,EAAA,CAAc,CAAd,CAAkB,CAA/B,CAKI8E,GAAQ,CAARA,CAAYn7C,EAEhB,IAoZYspD,CApZPnO,EAAL,CAoZYmO,CAjXRjgE,EAAA,CAAa,kBAAb,CAnCJ,KAAiB,CACb,IAAIuyD,GAAU7B,CAAA,CAmZNuP,CAnZmBvlE,EA1/fxB4c,EAAA,CA3nPKwf,CA2nPL,CA0/fW,CAAd,CACIE,GAkZIipC,CAlZKzjD,GAAA,CAAa+1C,EAAb,CAtrvBLmF,EAwrvBR,EAAI1gC,EAAJ,EAvrvBQ0gC,CAurvBR,EAAkC1gC,EAAlC,EAlrvBQ0gC,KAkrvBR,GACK1gC,EADL,CAjrvBQ0gC,KAirvBR,GAprvBQA,KAorvBR,GAEK1gC,EAFL,CAnrvBQ0gC,KAmrvBR,GAhrvBQA,KAgrvBR,GAGK1gC,EAHL,CA/qvBQ0gC,KA+qvBR,GAgZQuI,CA3YAnO,EACA,CADaA,EACb,CAAAoC,EAAA,CAAa3B,EAAb,CAAsB,CAAtB,CANR,EAtrvBQmF,IAsrvBR,GAQY1gC,EARZ,CArrvBQ0gC,KAqrvBR,IASYa,EAAA,CAuYJ0H,CAvYI;AAAoB1N,EAApB,CAGJ,CAoYA0N,CApYAnO,EAAA,CAAaA,EAZrB,CAgZQmO,EAhYJnO,EAAJ,EAgYQmO,CAviEZt2C,GAAA,CAuiEYs2C,CAviEOnP,EAAnB,CAwqD+ByB,EAxqD/B,CAA6C,CAAA,CAA7C,CAyqDQ,CAAKh9C,EAAA,CA8XD0qD,CA9XC,CAAL,GA8XIA,CA7XIrlE,EACJ,EADc2zB,EAAA,CA6Xd0xC,CA7XcrlE,EAAA,CACd,CA4XAqlE,CA5XAnO,EAAA,CAAa,CAFjB,CAFJ,EAYIsK,EAAA,CAoXI6D,CApXJ,CAAatpD,EAAA,CAAO,IAAP,CAAc,GAA3B,CAhCS,CAfjB,CAoaY,KACJ,MAAK,GAAL,CACI,GAAY,OAAZ,EAAIq2C,CAAJ,CAAqB,CACb,CAAApyD,EAAJ,EAAc,CAAAA,EAAAqX,MAAA,EACd,MAFiB,CAIrBmlD,EAAA,CAAAA,CAAA,CA9GL51C,CA8GK,CACA,MACJ,MAAK,GAAL,CAnqBZ,CAAA,CACI,OAkjBOA,CAljBC,CAAO,CAAP,CAAR,EAEA,KAAK,MAAL,CACI,GA+iBGA,CA/iBC,CAAO,CAAP,CAAJ,CAAe,CACX,IAAI7M,GAAQ,CA8iBb6M,CA9iBc,CAAO,CAAP,CACb,IAAa,CAAb,EAAI7M,EAAJ,EAA2B,EAA3B,EAAkBA,EAAlB,EAA0C,EAA1C,EAAiCA,EAAjC,CA8pBIurD,CA7pBAvrD,EAAA,CAAaA,EADjB,KAEO,CA4pBHurD,CA3pBAlgE,EAAA,CAAa,gBAAb,CAAgC2U,EAAhC,CACA,MAFG,CAJI,CAgqBPurD,CAvpBRlgE,EAAA,CAAa,gBAAb,CAupBQkgE,CAvpBwBvrD,EAAhC,CACA,MAEJ,MAAK,IAAL,CACI,IAAIiX,EACcv7B,KAAAA,EAAlB,GAiiBGmxB,CAjiBC,CAAO,CAAP,CAAJ,GAA6BoK,EAA7B,CAAuC,CAiiBpCpK,CAjiBqC,CAAO,CAAP,CAAxC,CACA,QAgiBGA,CAhiBK,CAAO,CAAP,CAAR,EACI,KAAK,KAAL,CAgpBI0+C,CA/oBAxlE,EAAAmyB,GAAA,CAAmCjB,EACnC,MACJ,MAAK,OAAL,CA6oBIs0C,CA5oBAxlE,EAAAkyB,GAAA,CAAgChB,EAChC,MACJ,MAAK,MAAL,CA0oBIs0C,CAzoBAxlE,EAAAoyB,GAAA,CAA+BlB,EAC/B,MACJ,SAuoBIs0C,CAtoBAlgE,EAAA,CAAa,mBAAb,CACA,OAAA,CAZR,CAcgB3P,IAAAA,EAAhB,GAAIu7B,EAAJ;AACIuC,EAAA,CAkoBI+xC,CAloBJxlE,EAAA,CAkoBIwlE,EAhoBRlgE,EAAA,CAAa,YAAb,EAgoBQkgE,CAhoBqBxlE,EAAAX,MAAA0yB,GAAA,CAAyB,SAAzB,CAAqC,UAAlE,EACA,MAEJ,MAAK,IAAL,CACsBp8B,IAAAA,EAAlB,GA2gBGmxB,CA3gBC,CAAO,CAAP,CAAJ,GACS0N,EAAA,CA2nBDgxC,CA3nBCxlE,EAAA,CAAkB,CA0gBxB8mB,CA1gByB,CAAO,CAAP,CAAnB,CADT,EA4nBQ0+C,CA1nBAlgE,EAAA,CAAa,2DAAb,CAFR,CA4nBQkgE,EAvnBRlgE,EAAA,CAAa,gBAAb,EAunBQkgE,CAvnBwBxlE,EA/uiB7BwxB,GAAAkD,QAAA,CAAuB,CAAvB,CA+uiBH,CA/uiB+B,KA+uiB/B,EAA4D,IAA5D,CAunBQ8wC,CAvnB2DxlE,EA3wiBhEqxB,GA2wiBH,CAAyF,IAAzF,CACA,MAEJ,SACI,GAkgBGvK,CAlgBC,CAAO,CAAP,CAAJ,CAAe,CAmnBP0+C,CAlnBJlgE,EAAA,CAAa,kBAAb,CAigBDwhB,CAjgBmC,CAAO,CAAP,CAAlC,CACA,MAFW,CAMnB,KAAK,GAAL,CA6mBY0+C,CA5mBRlgE,EAAA,CAAa,mBAAb,CAKA,CAumBQkgE,CA3mBRlgE,EAAA,CAAa,mCAAb,CAIA,CAumBQkgE,CA1mBRlgE,EAAA,CAAa,8CAAb,CAGA,CAumBQkgE,CAzmBRlgE,EAAA,CAAa,mDAAb,CAEA,CAumBQkgE,CAxmBRlgE,EAAA,CAAa,iDAAb,CACA;AAumBQkgE,CAvmBRlgE,EAAA,CAAa,qCAAb,CA5DJ,CAoqBY,KACJ,MAAK,GAAL,CACIo8D,EAAA,CAAAA,CAAA,CApHL56C,CAoHkB,CAAO,CAAP,CAAb,CApHLA,CAoH6B,CAAO,CAAP,CAAxB,CACA,MACJ,MAAK,GAAL,CACI61C,EAAA,CAAAA,CAAA,CAvHL71C,CAuHuB,CAAO,CAAP,CAAlB,CAvHLA,CAuHkC,CAAO,CAAP,CAA7B,CAAwC,CAAxC,CACA,MACJ,MAAK,GAAL,CACI,GAAiB,KAAjB,EA1HLA,CA0HS,CAAO,CAAP,CAAJ,CAAwB,CACfm6C,EAAA,CAAAA,CAAA,CAAW3O,CAAAhgE,OAAA,CAAY,CAAZ,CAAX,CAAL,GACIwoC,CADJ,CACa,CAAA,CADb,CAGA,MAJoB,CAMxB,GAAiB,KAAjB,EAhILhU,CAgIS,CAAO,CAAP,CAAJ,CAAwB,CACpB,CAAAxhB,EAAA,EAAcgO,EAAd,EAA+B,OAA/B,EAA2F,mBAA3F,CAAkG,CAAAtT,EAAAmc,GAAlG,CAAoI,UAApI,EAA0L3I,EAAA,CAAmB,cAAnB,CAAqCD,EAAA,CAAkB,aAAlB,CAAkC,aAAjQ,EAAmR,GAAnR,CACA,EAAAjO,EAAA,CA580BRzN,MAAA,CAAQA,MAAAsD,UAAAD,UAAR,CAAqC,EA480B7B,CACA,MAHoB,CAKxB04D,CAAA,CAAS,CAAA,CACT,MACJ,MAAK,GAAL,CACI,GAxIL9sC,CAwIS,CAAO,CAAP,CAAJ,CAAe,CACX26C,EAAA,CAAAA,CAAA,CAAanP,CAAAhgE,OAAA,CAAY,CAAZ,CAAb,CACA,MAFW,CAv1C3B,IAAIjB,GAAI,WAAR,CACS6S,EAAT,KAASA,EAAT,GAAqBuhE,GAArB,CACIp0E,EAAA,EAAK,IAAL,CAAYqkD,EAAA,CAAQxxC,EAAR,CAAkB,CAAlB,CAAZ,CAAmCuhE,EAAA,CAAuBvhE,EAAvB,CAElCq8B,GAAA,CAu1COmlC,CAv1CP,CAAL,GAA2Br0E,EAA3B,EAAgC,iDAAhC,CAu1CYq0E;CAt1CZpgE,EAAA,CAAajU,EAAb,CAu1CY,MASJ,SACIuiE,CAAA,CAAS,CAAA,CAvGb,CA0GIA,CAAJ,GACI,CAAAtuD,EAAA,CAAa,mBAAb,CAAmCgtD,CAAnC,CACA,CAAAx3B,CAAA,CAAS,CAAA,CAFb,CAnH+D,CAxBnE,CAgJF,MAAMvqC,EAAN,CAAS,CACP,CAAA+U,EAAA,CAAa,kBAAb,EAAmC/U,EAAA8qB,MAAnC,EAA8C9qB,EAAAsJ,QAA9C,EACA,CAAAihC,CAAA,CAAS,CAAA,CAFF,CAIX,MAAOA,EAvJX,CAkKA9G,QAAA,GAAU,CAAVA,CAAU,CAACD,CAAD,CAAQrtB,CAAR,CACV,CACQvW,CAAAA,CAAIkiE,EAAA,CAAAA,CAAA,CAAkBt+B,CAAlB,CAAyBrtB,CAAzB,CACR,KAAKrV,IAAIA,CAAT,GAAclB,EAAd,CACI,GAAI,CAACytE,EAAA,CAAAA,CAAA,CAAeztE,CAAA,CAAE,CAACkB,CAAH,CAAf,CAAL,CAA4B,MAAO,CAAA,CAEvC,OAAO,CAAA,CALX;AAwCA,IAAAo0E,GAAyB,CACrB,IAAY,YADS,CAErB,QAAY,UAFS,CAGrB,QAAY,YAHS,CAIrB,EAAY,cAJS,CAKrB,QAAY,aALS,CAMrB,QAAY,aANS,CAOrB,QAAY,WAPS,CAQrB,EAAY,MARS,CASrB,KAAY,iBATS,CAUrB,UAAY,mBAVS,CAWrB,EAAY,aAXS,CAYrB,GAAY,wBAZS,CAarB,EAAY,UAbS,CAcrB,EAAY,WAdS,CAerB,MAAY,kBAfS,CAgBrB,EAAY,oBAhBS,CAiBrB,MAAY,eAjBS,CAkBrB,EAAY,aAlBS,CAmBrB,QAAY,OAnBS,CAoBrB,QAAY,YApBS,CAqBrB,MAAY,iBArBS,CAsBrB,IAAY,eAtBS,CAAzB,CAkDAjH,GAAwB,+fAAA,MAAA,CAAA,GAAA,CAlDxB;AAsEAhD,GAA8B,EAtE9B,CAuEAC,GAA8B,EAvE9B,CAwEAC,GAA8B,EAxE9B,CAyEAC,GAA8B,EAzE9B,CA0EAC,GAA8B,EA1E9B,CA2EAC,GAA8B,EA3E9B,CA4EAC,GAA8B,EA5E9B,CA6EAC,GAA8B,EA7E9B,CA8EAT,GAA8B,EA9E9B,CA+EAU,GAA8B,EA/E9B,CAgFAC,GAA8B,EAhF9B,CAkFAb,GAAqB,CACjB,GAAQ,CADS,CAEjB,GAAQ,CAFS,CAGjB,GAAQI,EAHS,CAIjB,GAAQC,EAJS,CAKjB,GAAQC,EALS,CAMjB,GAAQC,EANS,CAOjB,GAAQC,EAPS,CAQjB,GAAQC,EARS,CASjB,GAAQC,EATS,CAUjB,GAAQC,EAVS,CAWjB,GAAQT,EAXS,CAYjB,GAAQU,EAZS,CAajB,GAAQC,EAbS,CAlFrB,CAkGAV,GAAyB,8FAAA,MAAA,CAAA,GAAA,CAlGzB,CA0GAuI,GAAsB,yBAAA,MAAA,CAAA,GAAA,CA1GtB,CA+GAtE,GAtwwBgBrgC,CAupwBhB,CAgHAsgC,GAzvwBgBrgC,EAyowBhB,CAiHAmgC,EAA6BE,EAA7BF,CAAwDC,EAjHxD,CAoHAF,GAA6B,IApH7B,CAqHAN,EAA4B,IArH5B,CAsHAC,GAA4B,IAtH5B,CAuHAC,GAA4B,KAvH5B,CAwHAC,GAA4B,KAxH5B,CAyHAC,GAA4B,KAzH5B,CA0HAL,GAA4B,KA1H5B,CA6IA7H,GAAwB,CACpB,MAAQ,CACJ,KAAQ,CAzG4FyO,EAyG5F,CAA4BrG,EAA5B,CAA0DC,CAA1D,CADJ,CAEJ,KAAQ,CA5G4GqG,EA4G5G,CAA4BtG,EAA5B,CAA0DC,CAA1D,CAFJ,CAGJ,MAAQ,CAhH4BsG,EAgH5B,CAA4BvG,EAA5B,CAA0DC,CAA1D,CAHJ,CAIJ,MAAQ,CAlH4FuG,EAkH5F,CAA4BxG,EAA5B,CAA0DC,CAA1D,CAJJ,CAKJ,MAAQ,CAlHJwG,EAkHI,CAA4BzG,EAA5B,CAA0DC,CAA1D,CALJ,CAMJ,MAAQ,CArH4CyG,CAqH5C,CAA4B1G,EAA5B,CAA0DC,CAA1D,CANJ,CAOJ,MAAQ,CA/G4G0G,EA+G5G,CAA4B3G,EAA5B,CAA0DC,CAA1D,CAPJ,CAQJ,MAAQ,CAjHJ2G,EAiHI;AAA4B5G,EAA5B,CAA0DC,CAA1D,CARJ,CASJ,MAAQ,CAtH4C4G,EAsH5C,CAA4B7G,EAA5B,CAA0DC,CAA1D,CATJ,CAUJ,MAAQ,CAxH4G6G,EAwH5G,CAA4B9G,EAA5B,CAA0DC,CAA1D,CAVJ,CAWJ,MAAQ,CAxHY8G,EAwHZ,CAA4B/G,EAA5B,CAA0DC,CAA1D,CAXJ,CAYJ,MAAQ,CAhH4F+G,EAgH5F,CAA4BhH,EAA5B,CAA0DC,CAA1D,CAZJ,CADY,CAepB,MAAQ,CACJ,KAAQ,CAvHYgH,EAuHZ,CA3CYC,GA2CZ,CAA0DjH,CAA1D,CADJ,CAEJ,MAAQ,CAnH4DkH,GAmH5D,CAA4BlH,CAA5B,CA5CYiH,GA4CZ,CAFJ,CAGJ,MAAQ,CApH4EE,GAoH5E,CAA4BnH,CAA5B,CA7CYiH,GA6CZ,CAHJ,CAIJ,MAAQ,CArH4FG,GAqH5F,CAA4BpH,CAA5B,CA9CYiH,GA8CZ,CAJJ,CAKJ,MAAQ,CAtH4GI,GAsH5G,CAA4BrH,CAA5B,CA/CYiH,GA+CZ,CALJ,CAMJ,MAAQ,CAtHJK,GAsHI,CAhDYL,GAgDZ,CAA0DjH,CAA1D,CANJ,CAOJ,MAAQ,CAvHYuH,GAuHZ,CAjDYN,GAiDZ,CAA0DvH,EAA1D,CAPJ,CAfY,CAwBpB,MAAQ,CACJ,IAAQ,CApI4C8H,EAoI5C,CAA4B/H,CAA5B,CADJ,CAEJ,IAAQ,CArIJgI,EAqII,CAA4BhI,CAA5B,CAFJ,CAGJ,IAAQ,CAxI4BiI,EAwI5B,CAA4BjI,CAA5B,CAHJ,CAIJ,KAAQ,CAzI4CkI,EAyI5C,CAA4BlI,CAA5B,CAJJ,CAKJ,KAAQ,CAzI4FmI,EAyI5F,CAA4BnI,CAA5B,CALJ,CAMJ,KAAQ,CA3I4DoI,EA2I5D,CAA4BpI,CAA5B,CANJ,CAOJ,KAAQ,CA3I4DqI,EA2I5D,CAA4BrI,CAA5B,CAPJ,CAQJ,MAAQ,CA3IYsI,EA2IZ,CAA4BtI,CAA5B,CARJ,CASJ,MAAQ,CA7I4GuI,EA6I5G,CAA4BvI,CAA5B,CATJ,CAUJ,MAAQ,CA/I4EwI,EA+I5E,CAA4BxI,CAA5B,CAVJ,CAWJ,MAAQ,CA/I4EyI,EA+I5E,CAA4BzI,CAA5B,CAXJ,CAYJ,MAAQ,CA/I4D0I,EA+I5D,CAA4B1I,CAA5B,CAZJ,CAaJ,MAAQ,CAhJ4E2I,EAgJ5E,CAA4B3I,CAA5B,CAbJ,CAcJ,MAAQ,CAnJJ4I,CAmJI,CAA4B5I,CAA5B,CAdJ,CAeJ,MAAQ,CApJY6I,CAoJZ,CAA4B7I,CAA5B,CAfJ,CAgBJ,MAAQ,CAzI4B8I,GAyI5B,CAA4B1I,EAA5B,CAhBJ,CAiBJ,MAAQ,CA1I4CvrD,GA0I5C,CAA4BurD,EAA5B,CAjBJ,CAxBY,CA2CpB,MAAQ,CACJ,GAAQ,CAnJJ2I,EAmJI,CAA4BxI,CAA5B,CADJ,CAEJ,IAAQ,CAhJ4GyI,EAgJ5G,CAA4BzI,CAA5B,CAFJ,CAGJ,KAAQ,CAxJ4G0I,EAwJ5G,CAA4B1I,CAA5B,CAHJ,CAIJ,KAAQ,CAvJY2I,EAuJZ,CAA4B3I,CAA5B,CAJJ,CAKJ,KAAQ,CAxJ4E4I,EAwJ5E,CAA4B5I,CAA5B,CALJ,CAMJ,KAAQ,CAzJ4C6I,EAyJ5C,CAA4B7I,CAA5B,CANJ;AAOJ,KAAQ,CAxJ4C8I,EAwJ5C,CAA4B9I,CAA5B,CAPJ,CAQJ,KAAQ,CAjKY+I,CAiKZ,CAA4B/I,CAA5B,CARJ,CASJ,KAAQ,CAzJ4EgJ,EAyJ5E,CAA4BhJ,CAA5B,CATJ,CAUJ,KAAQ,CAvJYiJ,EAuJZ,CAA4BjJ,CAA5B,CAVJ,CAWJ,KAAQ,CA3JYkJ,EA2JZ,CAA4BlJ,CAA5B,CAXJ,CAYJ,KAAQ,CA7J4GmJ,EA6J5G,CAA4BnJ,CAA5B,CAZJ,CAaJ,KAAQ,CAtK4FoJ,CAsK5F,CAA4BpJ,CAA5B,CAbJ,CAcJ,KAAQ,CAvK4DqJ,CAuK5D,CAA4BrJ,CAA5B,CAdJ,CAeJ,KAAQ,CAjK4BsJ,EAiK5B,CAA4B1J,EAA5B,CAfJ,CAgBJ,KAAQ,CAlK4D2J,EAkK5D,CAA4BvJ,CAA5B,CAhBJ,CAiBJ,KAAQ,CAlKYwJ,EAkKZ,CAA4BxJ,CAA5B,CAjBJ,CAkBJ,KAAQ,CA/JJyJ,EA+JI,CAA4BzJ,CAA5B,CAlBJ,CAmBJ,MAAQ,CAvKJ0J,EAuKI,CAA4B1J,CAA5B,CAnBJ,CAoBJ,MAAQ,CAvK4B2J,EAuK5B,CAA4B3J,CAA5B,CApBJ,CAqBJ,MAAQ,CAxK4F4J,EAwK5F,CAA4B5J,CAA5B,CArBJ,CAsBJ,MAAQ,CAzK4D6J,EAyK5D,CAA4B7J,CAA5B,CAtBJ,CAuBJ,MAAQ,CAxK4D8J,EAwK5D,CAA4B9J,CAA5B,CAvBJ,CAwBJ,MAAQ,CAjL4B+J,CAiL5B,CAA4B/J,CAA5B,CAxBJ,CAyBJ,MAAQ,CAzK4FgK,EAyK5F,CAA4BhK,CAA5B,CAzBJ,CA0BJ,MAAQ,CAvK4BiK,EAuK5B,CAA4BjK,CAA5B,CA1BJ,CA2BJ,MAAQ,CA3K4BkK,EA2K5B,CAA4BlK,CAA5B,CA3BJ,CA4BJ,MAAQ,CA5KJmK,EA4KI,CAA4BnK,CAA5B,CA5BJ,CA6BJ,MAAQ,CAtL4GoK,CAsL5G,CAA4BpK,CAA5B,CA7BJ,CA8BJ,MAAQ,CAvL4EqK,CAuL5E,CAA4BrK,CAA5B,CA9BJ,CA+BJ,MAAQ,CAhL4BsK,EAgL5B,CAA4BtK,CAA5B,CA/BJ,CAgCJ,MAAQ,CAlL4CuK,EAkL5C,CAA4BvK,CAA5B,CAhCJ,CAiCJ,MAAQ,CAlLJwK,EAkLI,CAA4BxK,CAA5B,CAjCJ,CAkCJ,MAAQ,CApL4EyK,EAoL5E,CAA4BzK,CAA5B,CAlCJ,CA3CY,CA+EpB,MAAQ,CACJ,IAAQ,CArL4DvqB,EAqL5D,CAA4BwqB,EAA5B,CADJ,CAEJ,IAAQ,CAlL4DyK,GAkL5D,CAA4B/K,EAA5B,CAFJ,CA/EY,CAmFpB,MAAQ,CACJ,EAAQ,CA5L4G/pD,EA4L5G,CADJ,CAEJ,EAAQ,CAvL4C+0D,EAuL5C,CAFJ,CAGJ,EAAQ,CA3L4CC,EA2L5C,CAHJ,CAIJ,EAAQ,CAlM4BC,EAkM5B,CAJJ,CAKJ,EAAQ,CAzL4EC,GAyL5E,CALJ,CAMJ,EAAQ,CA/L4FC,EA+L5F,CANJ,CAOJ,EAAQ,CA3L4FC,GA2L5F,CAPJ,CAQJ,EAAQ,CA5L4GC,GA4L5G,CARJ,CASJ,IAAQ,CAlM4Et6D,EAkM5E,CATJ,CAUJ,IAAQ,CAxM4Gu6D,EAwM5G,CAVJ,CAWJ,IAAQ,CAvMYC,EAuMZ,CAXJ,CAYJ,IAAQ,CAzMYC,EAyMZ,CAZJ,CAaJ,IAAQ,CAzM4EC,EAyM5E,CAbJ,CAcJ,IAAQ,CA3M4DC,EA2M5D,CAdJ;AAeJ,IAAQ,CA3M4CC,EA2M5C,CAfJ,CAgBJ,IAAQ,CA7M4CC,EA6M5C,CAhBJ,CAiBJ,IAAQ,CA9M4FC,EA8M5F,CAjBJ,CAkBJ,IAAQ,CA/MJC,EA+MI,CAlBJ,CAmBJ,IAAQ,CA/M4BC,EA+M5B,CAnBJ,CAoBJ,IAAQ,CAjN4BC,EAiN5B,CApBJ,CAqBJ,IAAQ,CAjN4FC,EAiN5F,CArBJ,CAsBJ,IAAQ,CAnN4EC,EAmN5E,CAtBJ,CAuBJ,IAAQ,CAnN4DC,EAmN5D,CAvBJ,CAwBJ,IAAQ,CAtN4FC,EAsN5F,CAxBJ,CAyBJ,IAAQ,CAlN4Er7D,EAkN5E,CAzBJ,CA0BJ,IAAQ,CAjNJs7D,EAiNI,CA1BJ,CA2BJ,IAAQ,CAjNJC,EAiNI,CA3BJ,CA4BJ,IAAQ,CAnN4BC,EAmN5B,CA5BJ,CA6BJ,IAAQ,CAnN4DC,EAmN5D,CA7BJ,CA8BJ,IAAQ,CArN4EC,EAqN5E,CA9BJ,CA+BJ,IAAQ,CArN4BC,EAqN5B,CA/BJ,CAgCJ,IAAQ,CAvN4DC,EAuN5D,CAhCJ,CAiCJ,IAAQ,CAxN4GC,EAwN5G,CAjCJ,CAkCJ,IAAQ,CAzNYC,EAyNZ,CAlCJ,CAmCJ,IAAQ,CAzNYC,EAyNZ,CAnCJ,CAoCJ,IAAQ,CA3N4CC,EA2N5C,CApCJ,CAqCJ,IAAQ,CA3N4EC,EA2N5E,CArCJ,CAsCJ,IAAQ,CA7N4FC,EA6N5F,CAtCJ,CAuCJ,IAAQ,CA7N4CC,EA6N5C,CAvCJ,CAwCJ,IAAQ,CAhO4GC,EAgO5G,CAxCJ,CAnFY,CA7IxB,CA4QAnO,GAAuB,CA7OXvtC,CA6OW,CA5QvB,CAiRA0nC,GAAuB,CA3OqBuQ,EA2OrB,CA3OqDC,EA2OrD,CA1OKC,EA0OL,CAtOXC,EAsOW,CArOqFuB,GAqOrF,CAtOqD9D,GAsOrD,CAtOqEC,GAsOrE,CAtOqFC,GAsOrF,CAtOqGC,GAsOrG,CArOXC,GAqOW,CArOKC,GAqOL,CAjRvB,CAkSAvO,GAAuB,CAtPqD0R,GAsPrD,CA5PqCH,EA4PrC,CA3PXC,EA2PW,CAlSvB,CAwSA5N,GAA8C,GAxS9C,CA0SAI,GAAuB,WAKvBx+C,GAAA,CAvUAZ,QAAW,EACX,CAEI,IADA,IAAIovD,EAAQ5qE,CAAA,CAA6B0b,QAA7B,CAAuC5b,CAAvC,CAAuD,UAAvD,CAAZ,CACS+qE,EAAO,CAAhB,CAAmBA,CAAnB,CAA0BD,CAAA13E,OAA1B,CAAwC23E,CAAA,EAAxC,CAAgD,CAC5C,IAAIC,EAAOF,CAAA,CAAMC,CAAN,CAAX,CACI5a,EAAWtvD,EAAA,CAA4BmqE,CAA5B,CACX1sE,EAAAA,CAAM,IAAI+1D,EAAJ,CAAkBlE,CAAlB,CACVn0C,GAAA,CAAgC1d,CAAhC,CAAqC0sE,CAArC,CAJ4C,CAFpD,CAsUA,CAyEA9tE;QA9DE+tE,GA8DS,CAACC,CAAD,CAAgBC,CAAhB,CAA8BC,CAA9B,CACX,CACI,CAAA,KAAA,CAAA,IAAA,CAAM,UAAN,CAAkBF,CAAlB,CA3zvBQ33D,QA2zvBR,CAEA,KAAA3V,MAAAK,GAAA,CAAqB,CAAA,CAErB,KAAAktE,EAAA,CAAoB,IACpBE,GAAA,CAAAA,IAAA,CAAqBF,CAArB,CAEA,KAAAG,EAAA,CAAkBx5C,EAAA,CAAAA,IAAA,CAAoB,WAApB,CAAiCo5C,CAAjC,CAhs3BVK,CAgs3BU,CAMlB,KAAAC,EAAA,CAAoB,CAKpB,KAAA/uD,EAAA,CAAiB,CAACyuD,CAAA,SAAlB,EAA+C,CAACA,CAAA,SAGhD,KAAAO,EAAA,CADA,IAAAC,EACA,CADmB,IAAAC,EACnB,CADqC,IAGrC,KAAAC,EAAA,CADA,IAAAC,EACA,CADkB,CAAA,CAElB,KAAAC,EAAA,CAAqB,IAAAC,EAArB,CAA0C,IAC1C,KAAAC,EAAA,CAAoB,IAAAxrB,EAApB,CAAmC,IAAAyrB,EAAnC,CAAwD,CAAA,CAExD,KAAAC,EAAA,CAAkCp6C,EAAA,CAAAA,IAAA,CAAoB,KAApB,CAAlC,EAAgE,EAM9CxuB,EAACnS,IAAAg7E,OAAA,EAAD7oE,CAAiB,EAAjBA,UAAAzS,CAA+B,EAA/BA,CAClB,KAAAu7E,EAAA,CAAeC,EAAA,CAAAA,IAAA,CAUf,IADA,IAAA9tE,EACA,CADyCyE,EAAA,CAA6B,KAA7B,CAAoC,IAAA1F,GAApC,CACzC,CAAA,CAIA,IAAAgB,EAAA,CAAyC0E,EAAA,CAA6B,UAA7B,CAAyC,IAAA1F,GAAzC,CAKzC,KAAAkB,EAAA,CAAW,IAAI+d,EAAJ,CAAa,CAAC,GAAM,IAAA5e,GAAN,CAAuB,MAAxB,CAAgC,SAAY,IAAA8e,EAA5C,CAAb,CAA0E,IAAAle,EAA1E,CAAoF,IAAAD,EAApF,CAKX,KACI2C,EAAc6xB,EAAA,CAAwB,IAAAx1B,GAAxB,CAKlB,IAFA,IAAA8jE,EAEA,EAHA,IAAAjrD,EAGA,CAHwCnT,EAAA,CAA6B,OAA7B,CAAsC,IAAA1F,GAAtC,CAGxC;AAFkC,IAAA6Y,EAAA1Y,EAAA,MAElC,CACI,IAAKo1B,CAAL,CAAkB,CAAlB,CAAqBA,CAArB,CAAkC5xB,CAAA7N,OAAlC,CAAsDy/B,CAAA,EAAtD,CAAoE,CAChE,IAAAl0B,EAAYsC,CAAA,CAAY4xB,CAAZ,CAMZl0B,EAAAgF,EAAA,CAAmB,IAAAwS,EAAAxS,EACnBhF,EAAAmF,MAAA,CAAkB,IAAAqS,EAAArS,MAClBnF,EAAAkF,EAAA,CAAoB,IAAAsS,EAAAtS,EAT4C,CAaxE,IAAAA,EAAA,CAAagO,EAAb,CA1s6BMy6D,mJA0s6BN,CAEA,KAAAzoE,EAAA,CAAa,4GAAb,CAOA,KAAKgvB,CAAL,CAAkB,CAAlB,CAAqBA,CAArB,CAAkC5xB,CAAA7N,OAAlC,CAAsDy/B,CAAA,EAAtD,CACIl0B,CACA,CADYsC,CAAA,CAAY4xB,CAAZ,CACZ,CAAIl0B,CAAA+X,GAAJ,EAAuB/X,CAAA+X,GAAA,CAAkB,IAAlB,CAAwB,IAAAlY,EAAxB,CAAkC,IAAAD,EAAlC,CAA4C,IAAAD,EAA5C,CAGvBqtE,EAAAA,CAAa,IACbY,EAAAA,CAAiCz6C,EAAA,CAAAA,IAAA,CAAoB,QAApB,CAA8Bo5C,CAA9B,CACrBh3E,KAAAA,EAAhB,GAAIq4E,CAAJ,GAIyB,CAArB,CAAIA,CAAAn5E,OAAJ,CACIu4E,CADJ,CACiB,IAAAD,EADjB;AACoCa,CADpC,CAGI,IAAAC,EAHJ,CAGkBn8E,QAAA,CAASk8E,CAAT,CAAkB,EAAlB,CAPtB,CAyBA,KAAIE,CAGJ,IAFIhL,CAEJ,CAFa3vC,EAAA,CAAAA,IAAA,CAAoB,OAApB,CAEb,GAF8C26C,CAAD,CAAgB,CAAA,CAAhB,CAAyBvB,CAAA,MAEtE,EACI,IAAAS,EAKA,CALkBA,CAKlB,CAL+BlK,CAK/B,CAJKgL,CAIL,GAHI,IAAAb,EACA,CADoB,CAAA,CACpB,CAAA,IAAAY,EAAA,CAAcE,EAElB,EAAI,IAAAF,EAAJ,GACI,IAAAV,EACA,CADqB,IAAIz0D,CAAJ,CAAU,IAAV,CAnw6BpBs1D,QAmw6BoB,CACrB,CAAI,IAAAb,EAAA3zB,KAAA,EAAJ,CACIwzB,CADJ,CACiB,IADjB,CAGI,OAAO,IAAAG,EALf,CAcA,EAACH,CAAL,EAAmB,IAAAa,EAAnB,GACIb,CADJ,CACiBiB,EAAA,CAAAA,IAAA,CADjB,IAEoB,IAAAhB,EAFpB,CAEwC,CAAA,CAFxC,CAKA,IAAKD,CAAL,CAEO,CACH,IAAIltE,EAAM,IACVmtC,GAAA,CAAgB+/B,CAAhB,CAA4B,IAA5B,CAAkC,CAAA,CAAlC,CAAwCkB,QAAsB,CAACt3E,CAAD,CAAOu3E,CAAP,CAAkBv2E,CAAlB,CAA8B,CACnDA,CA2I7C,EA3IQkI,CAkJJitE,EAEA,CAFmB,IAEnB,CApJIjtE,CAmJJmtE,EACA,CADoB,CAAA,CACpB,CApJIntE,CAoJJkF,EAAA,CAAY,kDAAZ,CApJyCpN,CAoJzC,EApJ8Bu2E,CAoJiD,CAAY,IAAZ,CAAmBv6B,EAAA,CApJpEu6B,CAoJoE,CAAnB,CAA0C,EAAzH,EAA+H,GAA/H,CATJ,GA3IQruE,CA4IJgtE,EACA,CA7I8BqB,CA6I9B,CA7IIruE,CA6IJotE,EAAA,CAAkB,CAAA,CAFtB,CAWApnE,EAAA,CAtJQhG,CAsJR,CAvJgG,CAA5F,CAFG,CAFP,IACIgG,EAAA,CAAAA,IAAA,CAQC,KAAAhH,EAAA,MAAL,GAA6B,IAAA6tE,EAA7B,CAA+C,CAAA,CAA/C,CAKI,EAACF,CAAL,EAAmB,IAAAE,EAAnB,EAAoC,IAAAyB,KAAA,CAAU,IAAAC,GAAV,CArHpC,CAAA,IAvk0BA70E,EAAA,CAwk0BoBvI,8BAxk0BpB,CA0h0BJ,CA/DwB8lB,CAAAvY,CAAtB8tE,EAAsB9tE,CAAAA,CAAAA,CAmQxBkuE;QAAA,GAAe,CAAfA,CAAe,CAACF,CAAD,CACf,CACI,GAAI,CAACA,CAAL,CAAmB,CACf,IAAIrxE,CACJ,IAAwB,QAAxB,EAAI,MAAOtD,UAAX,GAAqCsD,CAArC,CAA8CtD,SAAA,MAA9C,EACI,GAAI,CACA20E,CAAA,CAAsCnzE,IAAA,CAAK,GAAL,CAAW8B,CAAX,CAAoB,GAApB,CADtC,CAEF,MAAMhL,CAAN,CAAS,CAru0BnBqJ,CAAA,CAsu0B4BrJ,CAAAsJ,QAtu0B5B,CAsu0BwC,IAtu0BxC,CAsu0B+C0B,CAtu0B/C,CAsu0BwD,GAtu0BxD,CAqu0BmB,CALA,CAUnB,CAAAqxE,EAAA,CAAoBA,CAXxB,CAmCAr5C,QAAA,GAAc,CAAdA,CAAc,CAACl4B,CAAD,CAAQqzE,CAAR,CAAwBz3E,CAAxB,CACd,CAOI,IAAI03E,EAAUtzE,CAAA3G,YAAA,EACV3B,EAAAA,CAAQ67E,EAAA,CAAevzE,CAAf,CAARtI,EAAiC67E,EAAA,CAAeD,CAAf,CACvBh5E,KAAAA,EAAd,GAAI5C,CAAJ,EAA2B,CAAA65E,EAA3B,GAA8C75E,CAA9C,CAAsD,CAAA65E,EAAA,CAAkBvxE,CAAlB,CAAtD,CACc1F,KAAAA,EAAd,GAAI5C,CAAJ,EAA2B27E,CAA3B,GAA2C37E,CAA3C,CAAmD27E,CAAA,CAAerzE,CAAf,CAAnD,CACc1F,KAAAA,EAAd,GAAI5C,CAAJ,EAA+C,QAA/C,EAA2B,MAAOkF,UAAlC,EAA2DA,SAAA,CAAUoD,CAAV,CAA3D,GAA6EtI,CAA7E,CAAqFsI,CAArF,CACc1F,KAAAA,EAAd,GAAI5C,CAAJ,GAAyBA,CAAzB,CAbwC87E,IAAAA,EAaxC,CACA,IAAoB,QAApB,EAAI,MAAO97E,EAAX,EAAgCkE,CAAhC,CACI,OAAOA,CAAP,EACA,KAl73BI63E,CAk73BJ,CACI/7E,CAAA,CAAQ,CAACA,CACLJ,MAAA,CAA4BI,CAA5B,CAAJ,GAAyCA,CAAzC,CAAiE,CAAjE,CACA,MACJ,MAp73BIi6E,CAo73BJ,CACIj6E,CAAA,CAAkB,MAAlB,EAASA,CANb,CAUJ,MAAOA,EAxBX,CA2FA,CAAA,CA986BJ,EAAAg8E,UA886BIjqE;CAAA0pE,KAAA,CAAAA,QAAI,CAACpyE,CAAD,CAAKyC,CAAL,CACJ,CAGI,IAFA,IAAIgH,EAAW,IAAf,CACInD,EAAc6xB,EAAA,CAAwB,IAAAx1B,GAAxB,CADlB,CAESu1B,EAAa,CAAtB,CAAyBA,CAAzB,EAAuC5xB,CAAA7N,OAAvC,CAA2Dy/B,CAAA,EAA3D,CAAyE,CACrE,IAAIl0B,EAAak0B,CAAA,CAAa5xB,CAAA7N,OAAb,CAAkC6N,CAAA,CAAY4xB,CAAZ,CAAlC,CAA4D,IAC7E,IAAI,CAACruB,EAAA,CAAA7F,CAAA,CAAL,CAA0B,CACtB6F,EAAA,CAAA7F,CAAA,CAAkB4uE,QAAyB,EAAG,CAC1CnpE,CAAA2oE,KAAA,CAAcpyE,CAAd,CAAkByC,CAAlB,CAD0C,CAA9C,CAGA,OAJsB,CAF2C,CAUzEzC,CAAAwI,KAAA,CAAQ,IAAR,CAAc/F,CAAd,CAbJ,CAyBAowE,SAAA,GAAa,CAAbA,CAAa,CAAC1B,CAAD,CACb,CAEI,IAAI2B,EAAgB,IAAIp2D,CAAJ,CAAU,CAAV,CAl+6BXs1D,QAk+6BW,CAAkCe,EAAlC,CACpB,IAAID,CAAAt1B,KAAA,EAAJ,EAA4BpgD,EAAA,CAAA01E,CAAA,CAA5B,CAAmD,CAC/C,IAAIE,EAAqBF,CAAAG,IAAA,CAAkBC,EAAlB,CAAzB,CACIC,EAAqBhC,CAAA,CAAeA,CAAA8B,IAAA,CAAkBC,EAAlB,CAAf,CAAkE,SACvFF,EAAJ,EAA0BG,CAA1B,GACI,CAAAnqE,EAAA,CAAY,qCAAZ,CAAoDgqE,CAApD,CAAyE,OAAzE,CAAmFG,CAAnF,CAAwG,8CAAxG,CAEA,CAAKhC,CAAL,EAAoB2B,CAAAM,MAAA,EAHxB,CAH+C,CAHvD;AA2BA1qE,CAAA2pE,GAAA,CAAAA,QAAO,CAACR,CAAD,CACP,CACmBt4E,IAAAA,EAAf,GAAIs4E,CAAJ,GACIA,CADJ,CACa,IAAAA,EADb,GAC6B,IAAAf,EAAA,CAAiBuC,EAAjB,CAA6CtB,EAD1E,EAQA,IAAIlB,CAAA,IAAAA,EAAJ,CAAA,CAGA,IAAAA,EAAA,EAEA,KAAIx0D,EAAW,CAAA,CAAf,CACIi3D,EAAW,CAAA,CACf,KAAAhC,EAAA,CAAqB,CAAA,CACrB,KAAIH,EAAgB,IAAAA,EAAhBA,EAAsC,IAAIz0D,CAAJ,CAAU,IAAV,CA7g7BjCs1D,QA6g7BiC,CAE1C,IAAIH,CAAJ,EAAc0B,EAAd,CACIl3D,CAAA,CAAW,CAAA,CADf,KAGK,IAAIw1D,CAAJ,CAAaE,EAAb,CAAwC,CACzC,GAAIZ,CAAA3zB,KAAA,CAAmB,IAAAszB,EAAnB,CAAJ,CAAyC,CAOrC,IAAAM,EAAA,CAAqB,IAAI10D,CAAJ,CAAU,IAAV,CA1h7BpBs1D,QA0h7BoB,CAAkCwB,EAAlC,CACjB,KAAApC,EAAA5zB,KAAA,EAAJ,GACIi2B,EAAA,CAAAA,IAAA,CAAiBtC,CAAjB,CAWA,CALAU,CAKA,CALS6B,EAKT,CAAAC,EAAA,CAAA,IAAAvC,EAAA,CAZJ,CAeA,KAAAA,EAAAz0D,IAAA,CAAuBu2D,EAAvB,CA9g4BDU,EAAA,EA8g4BC,CACA,KAAAxC,EAAAyC,MAAA,EAEA,KAAIC,EAAY,IAAAjC,EAAZiC,EAA2B,CAAC,IAAA7C,EAChC,IAAIY,CAAJ,EAAcwB,EAAd,EAA2CU,EAAA,CAAsB,mCAAtB,CAA4D78D,EAA5D,CAA4E,iDAA5E,CAA3C,CAA2K,CAEvK,GADAo8D,CACA,CADWl2E,EAAA,CAAA+zE,CAAA,CACX,CAAc,CACV,IAAI6C,EAA+B7C,CAAA8B,IAAA,CA1o6BvCgB,MA0o6BuC,CAAnC,CACIt3E,EAA+Bw0E,CAAA8B,IAAA,CA1o6BvCgB,MA0o6BuC,CAC/BD,EAAJ,GAxo6BJE,IAyo6BQ,EAAIF,CAAJ,CACI7C,CAAA3zB,KAAA,CAAmB7gD,CAAnB,CADJ,EAxo6BRu3E,OA8o6BY,EAAIF,CAAJ;AAxo6BZG,kBAwo6BY,EAAkCx3E,CAAlC,EACI,IAAAqM,EAAA,CAAY,SAAZ,CAAwBrM,CAAxB,CACA,CA5o6BhBw3E,uBA4o6BgB,EAAIx3E,CAAJ,GAqoB5By3E,EAAA,CAAwBC,EAAxB,CAAoD,EAApD,CACA,CAtoB8DC,IAsoB9D7C,EAAA,CAAe,IAtoBa,CAFJ,EAII,IAAAvoE,EAAA,CAAa8qE,CAAb,CAAqB,IAArB,CAA4Br3E,CAA5B,CAOJ,CADAg3E,EAAA,CAAAxC,CAAA,CACA,CAAIA,CAAA3zB,KAAA,EAAJ,EACI81B,CACA,CADWl2E,EAAA,CAAA+zE,CAAA,CACX,CAAA2C,CAAA,CAAY,CAAA,CAFhB,EAIIR,CAJJ,CAIe,CAAA,CArBnB,CADJ,CAHU,CAoCVQ,CAAJ,EAAejB,EAAA,CAAAA,IAAA,CAAmBS,CAAA,CAAUnC,CAAV,CAA0B,IAA7C,CAtCwJ,CAA3K,IA2CQU,EAAJ,EAAc6B,EAAd,EAA2CvC,CAAAiC,MAAA,EAtEV,CAAzC,IA6EIP,GAAA,CAAAA,IAAA,CAEJ,QAAO,IAAA/B,EACP,QAAO,IAAAK,EAjFkC,CAwFzC7qE,CAAAA,CAAc6xB,EAAA,CAAwB,IAAAx1B,GAAxB,CAClB,KAASu1B,CAAT,CAAsB,CAAtB,CAAyBA,CAAzB,CAAsC5xB,CAAA7N,OAAtC,CAA0Dy/B,CAAA,EAA1D,CACQl0B,CACJ,CADgBsC,CAAA,CAAY4xB,CAAZ,CAChB,CAAIl0B,CAAJ,GAAkB,IAAlB,EAA0BA,CAA1B,EAAuC,IAAAJ,EAAvC,GACI0vE,CADJ,CACeiB,EAAA,CAAAA,IAAA,CAAkBvwE,CAAlB,CAA6BmtE,CAA7B,CAA4C90D,CAA5C,CAAsDi3D,CAAtD,CADf,CAUAl0E,EAAAA,CAAS,CAAC+xE,CAAD,CAAgBU,CAAhB,CAAwByB,CAAxB,CAETzB,EAAJ,EAAc0B,EAAd,CACI,IAAAnB,KAAA,CAAU,IAAAoC,GAAV,CAA4Bp1E,CAA5B,CADJ,CAIA,IAAAo1E,GAAA,CAAiBp1E,CAAjB,CAxHA,CATJ,CA8IAm1E;QAAA,GAAY,CAAZA,CAAY,CAACvwE,CAAD,CAAYmtE,CAAZ,CAA2B90D,CAA3B,CAAqCi3D,CAArC,CACZ,CACI,GAAI,CAACtvE,CAAAf,MAAAK,GAAL,CAA8B,CAM1BU,CAAAf,MAAAK,GAAA,CAA0B,CAAA,CAE1B,KAAIpG,EAAO,IAEX,IAAI,CA4EA,GA3EIo2E,CA2EA,IA1EAp2E,CA0EA,CA1EOi0E,CAAA8B,IAAA,CAAkBjvE,CAAArB,GAAlB,CA0EP,IA5DIzF,CA4DJ,CA5DWi0E,CAAA8B,IAAA,CAAkBjvE,CAAArB,GAAA5M,QAAA,CAAqB,YAArB,CAAmC,GAAnC,CAAlB,CA4DX,GA7CgB,QA6ChB,GA7CA,MAAOmH,EA6CP,GA7C0BA,CA6C1B,CA7CiC,IA6CjC,EAtCA,CAAC8G,CAAAoG,GAAA,CAAkBlN,CAAlB,CAAwBmf,CAAxB,CAsCD,EAtCsCnf,CAsCtC,GA3n1BZM,CAAA,CAul1B4B,8BAvl1B5B,CAul1B6DwG,CAAAnJ,KAvl1B7D,CAwn1BY,CAvBI,CAAAm2E,EAAJ,EAAuB,CAAC,CAAAE,EAAxB,EACIC,CAAAiC,MAAA,EA/22BhB,CAg32BgB,CAAAvB,EAh32BhB,CAg32B8BE,EAh32B9B,CAAIt2E,MAAJ,EAAYA,MAAAC,SAAA+4E,OAAA,EA822BA,EASI,CAAAnD,EATJ,CASyB,CAAA,CAczB,CARAttE,CAAAoG,GAAA,CAAkB,IAAlB,CAQA,CAAAkpE,CAAA,CAAW,CAAA,CAGX,EAAA,CAACj3D,CAAD,EAAarY,CAAAnB,GAAjB,CAAoC,CAChC,IAAI6xE,EAAa1wE,CAAAnB,GAAAhF,MAAA,CAAwB,GAAxB,CACjB,KAAStJ,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAAoBmgF,CAAAj8E,OAApB,CAAuClE,CAAA,EAAvC,CACIyP,CAAAxI,OAAA,CAAiBk5E,CAAA,CAAWngF,CAAX,CAAjB,CAH4B,CA5EpC,CAmFJ,MAAOgH,CAAP,CAAY,CAlo1BhBiC,CAAA,CAmo1BwB,4BAno1BxB,CAmo1BuDwG,CAAAnJ,KAno1BvD,CAmo1BwE,IAno1BxE,CAmo1B+EU,CAAAkC,QAno1B/E,CAmo1B6F,GAno1B7F,CAko1BgB,CA7Fc,CAiG9B,MAAO61E,EAlGX;AA6GA5qE,CAAA8rE,GAAA,CAAAA,QAAW,CAACp1E,CAAD,CACX,CACI,IAAI+xE,EAAgB/xE,CAAA,CAAO,CAAP,CAApB,CACIid,EAAwB,CAAxBA,CAAYjd,CAAA,CAAO,CAAP,CACZk0E,EAAAA,CAAWl0E,CAAA,CAAO,CAAP,CAMf,KAAAiyE,EAAA,CAAoB,CAAA,CACpB,KAAApuE,MAAAK,GAAA,CAAqB,CAAA,CACrB,KAAIqxE,EAAe,IAAA7xE,EAAA,MACf6xE,EAAJ,GAAkBA,CAAAtpE,YAAlB,CAA6C,UAA7C,CAMI,KAAAzH,EAAJ,GAII2wE,EAAA,CAAAA,IAAA,CAAkB,IAAA3wE,EAAlB,CAA4ButE,CAA5B,CAA2C90D,CAA3C,CAAqDi3D,CAArD,CAEA,CADAp0D,EAAA,CAAAA,IAAA,CAAqB,EAArB,CACA,CAAA,IAAAtb,EAAA8xB,GAAA,EANJ,CAaI,KAAA47C,EAAJ,GACImC,EAAA,CAAAA,IAAA,CAAiBtC,CAAjB,CACA,CAAAA,CAAAiC,MAAA,EAFJ,CAKI,EAAC/2D,CAAL,EAAiB,IAAA+0D,EAAjB,GACI,IAAAA,EAAAgC,MAAA,EACA,CAAA,OAAO,IAAAhC,EAFX,CAKA,KAAAP,EAAA,CAAoB,CAzCxB,CA8EA4C;QAAA,GAAW,CAAXA,CAAW,CAACtC,CAAD,CACX,CACI,GAAI4C,EAAA,CAAsB,mCAAtB,CAA4D78D,EAA5D,CAA4E,6DAA5E,CAA4IA,EAA5I,CAAqM,wCAArM,CAAJ,CAAA,CACoDq6D,IAAAA,EAAAA,CAAAA,EAlb7C,EAAA,CAkbuDqD,CAlbvDnD,EAAA,EAAgB,EAkb6E,EAAA,CAAAN,CAAAxoE,SAAA,EAnp3BpG,KAAIksE,EAAW,EACfA,EAAA,IAAA,CAkp3BmB39D,EAjp3BnB29D,EAAA,IAAA,CAzrES7C,QA0rET6C,EAAA,IAAA,CAAgCj6E,CAChCi6E,EAAA,KAAA,CAAiCC,CACjCD,EAAA,KAAA,CAtzDYE,KAuzDZF,EAAA,KAAA,CAAiCG,CAEjC/jC,GAAA,CADiBgkC,mCACjB,CAA4BJ,CAA5B,CAAsC,CAAA,CAAtC,CA0o3BA,CADJ;AAqCA9N,QAAA,GAAQ,CAARA,CAAQ,CAACz8D,CAAD,CAAQC,CAAR,CACR,CACI,IACIu8D,EAAS,MAMb,IAAI,CAAA+J,EAAJ,CACI,MAAO,KAEX,EAAAA,EAAA,EAEA,KAAIM,EAAgB,IAAIz0D,CAAJ,CAAU,CAAV,CA337BXs1D,QA237BW,CAApB,CACIc,EAAgB,IAAIp2D,CAAJ,CAAU,CAAV,CA537BXs1D,QA437BW,CAAkCe,EAAlC,CADpB,CAGImC,EAl24BGtB,EAAA,EAm24BPd,EAAAn2D,IAAA,CAAkBu2D,EAAlB,CAAiDgC,CAAjD,CACA/D,EAAAx0D,IAAA,CAAkBu2D,EAAlB,CAAiDgC,CAAjD,CACA/D,EAAAx0D,IAAA,CAAkBw4D,EAAlB,CAj47BSnD,QAi47BT,CACAb,EAAAx0D,IAAA,CAAkBy4D,EAAlB,CA/q3BQ35E,MAAA,CAAQA,MAAAC,SAAA0pD,KAAR,CAA+B,IA+q3BvC,CACA+rB,EAAAx0D,IAAA,CAAkB04D,EAAlB,CA5p3BQ55E,MAAA,CAAQA,MAAAsD,UAAAD,UAAR,CAAqC,EA4p3B7C,CAMA,IAAI,CAAA8E,EAAJ,EAAgB,CAAAA,EAAAyG,GAAhB,CAAoC,CAC5BE,CAAJ,GACQD,CACJ,GADW,CAAA1G,EAAAX,MAAAyyB,GACX,CADsC,CAAA9xB,EAAAX,MAAAmb,EACtC,EAAAM,CAAA,CAAA,CAAA9a,EAAA,CAFJ,CAIA,KAAA1G,EAAO,CAAA0G,EAAAyG,GAAA,CAAmBC,CAAnB,CAA0BC,CAA1B,CACa,SAApB,GAAI,MAAOrN,EAAX,EAA8Bi0E,CAAAx0D,IAAA,CAAkB,CAAA/Y,EAAAjB,GAAlB,CAA+BzF,CAA/B,CAC1BqN,EAAJ,GACI,CAAA3G,EAAAX,MAAAK,GACA,CADyB,CAAA,CACzB,CAAa,CAAA,CAAb,GAAIpG,CAAJ,GAAoB4pE,CAApB,CAA6B,IAA7B,CAFJ,CAPgC,CAahCxgE,CAAAA,CAAc6xB,EAAA,CAAwB,CAAAx1B,GAAxB,CAClB,KAAK,IAAIu1B,EAAa,CAAtB,CAAyBA,CAAzB,CAAsC5xB,CAAA7N,OAAtC,CAA0Dy/B,CAAA,EAA1D,CAAwE,CACpE,IAAIl0B,EAAYsC,CAAA,CAAY4xB,CAAZ,CACZl0B,EAAAf,MAAAK,GAAJ,GACQU,CAAAqG,GAIJ,GAHInN,CACA,CADO8G,CAAAqG,GAAA,CAAoBC,CAApB,CAA2BC,CAA3B,CACP,CAAoB,QAApB,GAAI,MAAOrN,EAAX,EAA8Bi0E,CAAAx0D,IAAA,CAAkB3Y,CAAArB,GAAlB;AAAgCzF,CAAhC,CAElC,EAAIqN,CAAJ,GACIvG,CAAAf,MAAAK,GACA,CAD0B,CAAA,CAC1B,CAAa,CAAA,CAAb,GAAIpG,CAAJ,GAAoB4pE,CAApB,CAA6B,IAA7B,CAFJ,CALJ,CAFoE,CAcpEA,CAAJ,GACQv8D,CAAJ,EAEQ+qE,CAmCJ,CApCIC,CAoCJ,CApCa,CAAA,CAoCb,CAlCIjrE,CAAJ,EACQ,CAAAmnE,EAGJ,EAFI+D,EAAA,CAAAA,CAAA,CAAqB,CAAA/D,EAArB,CAAmCN,CAAAxoE,SAAA,EAAnC,CAEJ,CAAKmqE,CAAAe,MAAA,EAAL,EAA+B1C,CAAA0C,MAAA,EAA/B,GACI/M,CAOA,CAPS,IAOT,CAAAyO,CAAA,CAASD,CAAT,CAAqB,CAAA,CARzB,CAJJ,EA6BQ,CAAAzD,EA7BR,GA8BQ0D,CACA,CADS,CAAA,CACT,CAAAD,CAAA,CAAa,CAAAzD,EAAb,EAA4B4D,EA/BpC,CAkCA,CAAIF,CAAJ,EACIpE,CAAAiC,MAAA,CAAoBkC,CAApB,CAtCR,EAyCIxO,CAzCJ,CAyCaqK,CAAAxoE,SAAA,EA1CjB,CA8CI4B,EAAJ,GACI,CAAAtH,MAAAK,GACIqxE,CADiB,CAAA,CACjBA,CAAAA,CAAAA,CAAe,CAAA7xE,EAAA,MAFvB,IAGsB6xE,CAAAtpE,YAHtB,CAGiD,OAHjD,CAMA,EAAAwlE,EAAA,CAAoB,CAEpB,OAAO/J,EA7GX;AA+HAp+D,CAAAyS,MAAA,CAAAA,QAAK,EACL,CACI,IAAAlY,MAAAkY,MAAA,CAAmB,CAAA,CACf,KAAAtX,EAAJ,EAAgB,IAAAA,EAAAsX,MAAhB,GACIzQ,CAAA,CAAAA,IAAA,CAAkB,YAAlB,CAAiC,IAAA7G,EAAAhJ,KAAjC,CACA,CAAA,IAAAgJ,EAAAsX,MAAA,EAFJ,CAII,KAAAvX,EAAJ,EAAgB,IAAAA,EAAAuX,MAAhB,GACIzQ,CAAA,CAAAA,IAAA,CAAkB,YAAlB,CAAiC,IAAA9G,EAAA/I,KAAjC,CACA,CAAA,IAAA+I,EAAAuX,MAAA,EAFJ,CAKA,KADA,IAAI7U,EAAc6xB,EAAA,CAAwB,IAAAx1B,GAAxB,CAAlB,CACSu1B,EAAa,CAAtB,CAAyBA,CAAzB,CAAsC5xB,CAAA7N,OAAtC,CAA0Dy/B,CAAA,EAA1D,CAAwE,CACpE,IAAIl0B,EAAYsC,CAAA,CAAY4xB,CAAZ,CACZl0B,EAAJ,GAAkB,IAAlB,EAA0BA,CAA1B,GAAwC,IAAAH,EAAxC,EAAoDG,CAApD,GAAkE,IAAAJ,EAAlE,EAA8EI,CAAAmX,MAA9E,GACIzQ,CAAA,CAAAA,IAAA,CAAkB,YAAlB,CAAiC1G,CAAAnJ,KAAjC,CACA,CAAAmJ,CAAAmX,MAAA,EAFJ,CAFoE,CAOxE,IAAAlY,MAAAkY,MAAA,CAAmB,CAAA,CACnB+D,GAAA,CAAAA,IAAA,CAAqB,EAArB,CAnBJ,CAkCAxW,EAAA+C,MAAA,CAAAA,QAAK,CAACtL,CAAD,CAAK20B,CAAL,CACL,CAEI,IADA,IAAIxuB,EAAc6xB,EAAA,CAAwB,IAAAx1B,GAAxB,CAAlB,CACSu1B,EAAa,CAAtB,CAAyBA,CAAzB,CAAsC5xB,CAAA7N,OAAtC,CAA0Dy/B,CAAA,EAA1D,CAAwE,CACpE,IAAIl0B,EAAYsC,CAAA,CAAY4xB,CAAZ,CACM,MAAtB,EAAIl0B,CAAAnJ,KAAJ,EAA+BmJ,CAA/B,GAA6C,IAA7C,EACIA,CAAAyH,MADJ,EAEIzH,CAAAyH,MAAA,CAAgBtL,CAAhB,CAAoB20B,CAApB,CAJgE,CAOxE5V,EAAA,CAAAA,IAAA,CAAqB,EAArB,CATJ,CAwBAxW;CAAA2S,KAAA,CAAAA,QAAI,CAAClb,CAAD,CAAK20B,CAAL,CACJ,CAEI,IADA,IAAIxuB,EAAc6xB,EAAA,CAAwB,IAAAx1B,GAAxB,CAAlB,CACSu1B,EAAa,CAAtB,CAAyBA,CAAzB,CAAsC5xB,CAAA7N,OAAtC,CAA0Dy/B,CAAA,EAA1D,CAAwE,CACpE,IAAIl0B,EAAYsC,CAAA,CAAY4xB,CAAZ,CACM,MAAtB,EAAIl0B,CAAAnJ,KAAJ,EAA+BmJ,CAA/B,GAA6C,IAA7C,EACIA,CAAAqX,KADJ,EAEIrX,CAAAqX,KAAA,CAAelb,CAAf,CAAmB20B,CAAnB,CAJgE,CAOxE5V,EAAA,CAAAA,IAAA,CAAqB,EAArB,CATJ,CAoCAA;QAAA,GAAc,CAAdA,CAAc,CAAC0a,CAAD,CACd,CASI,GAAI,CAAAh2B,EAAJ,CAAA,CAAcA,IAAAA,EAAAA,CAAAA,EAAAA,CAAuB,EAAAg2B,CAAA,EAAW,CAAlCh2B,CAx8mBVm1B,EAAe,CAAAj2B,EAAA,MACfi2B,EAAJ,GACmB,CADnB,EACQa,CADR,EApZqB87C,EAoZrB,GACyB,CAAAv8D,GADzB,EAC+CygB,CAD/C,KAEQb,CAAA1tB,YACA,CAD2BsqE,CA2J1B1yE,MAAAmb,EAAD,CA3J2Bu3D,CA2JJ7+C,GAAAwB,QAAA,CAAiB,CAAjB,CAAvB,CAA6C,KAA7C,CAAsD,SA1JtD,CAAA,CAAAnf,GAAA,CAAqB,CAH7B,CAu8mBA,CACA,GAAI,CAAAqC,EAAJ,GAAgBA,CAtlvBZpC,CAslvBYoC,CAAAA,EAtlvBZpC,CAslvBqC,CAtlvBrCA,CAslvBqCwgB,CAtlvBrCxgB,EAslvBgD,CAtlvBhDA,CAAA,CAAAA,EAslvBJ,EAtlvBoB,CAEZ0mD,CAAAA,CAAW,CAAAl8D,EA09HZX,MAAAmb,EAz9HCw3D,EAAAA,CAsoMD,CAAC,EAtoMW,CAAAhyE,EAsoMT23B,EAAF,CAxiQIkF,CAwiQJ,CA5nMA,IAAe,CAAf,EAAI7G,CAAJ,EA3lCa87C,EA2lCb,GAAqB,CAAAv8D,EAArB,EAA2CygB,CAA3C,EAA2E,CACvE,IAASrlC,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAAoB,CAAAqP,EAAA4c,EAAA/nB,OAApB,CAA6ClE,CAAA,EAA7C,CACImpB,EAAA,CAAAA,CAAA,CAAkB,GAAlB,CAAsBnpB,CAAtB,CAAyB,CAAAqP,EAAA4c,EAAA,CAAiBjsB,CAAjB,CAAzB,CAEAi6B,EAAAA,CAASoC,EAAA,CAAA,CAAAhtB,EAAA,CACb8Z,GAAA,CAAAA,CAAA,CAAkB,IAAlB,CAAwB8Q,CAAxB,CACA9Q,GAAA,CAAAA,CAAA,CAAkB,IAAlB,CAAyB8Q,CAAD,CA/hExBC,CA+hEwB,CAAyB,CAAzB,CAA6B,CAArD,CAAwD,CAAxD,CACA/Q,GAAA,CAAAA,CAAA,CAAkB,IAAlB,CAAyB8Q,CAAD,CAjiExBC,CAiiEwB,CAAyB,CAAzB,CAA6B,CAArD,CAAwD,CAAxD,CACA/Q,GAAA,CAAAA,CAAA,CAAkB,IAAlB,CAAyB8Q,CAAD,CAniExBC,CAmiEwB,CAAyB,CAAzB,CAA6B,CAArD,CAAwD,CAAxD,CACA/Q,GAAA,CAAAA,CAAA,CAAkB,IAAlB,CAAyB8Q,CAAD,CAriExBC,CAqiEwB,CAAyB,CAAzB,CAA6B,CAArD,CAAwD,CAAxD,CACA,EAAAtV,EAAA,CAAqB,CAVkD,CAmB5D,EAAf,CAAIygB,CAAJ,CACI,CAAAvgB,GADJ,CACmB,CAAAzV,EAAA4c,EAAA,CAAiB,CAAjB,CADnB,CAEqB,CAFrB,CAEWoZ,CAFX,EAE0BkmC,CAF1B,EAEsC,CAAC8V,CAFvC,GAGI,CAAAv8D,GAHJ,CAGmB,CAAAzV,EAgvLpBk3B,GAnvLC,CAMA/d,GAAA,CAAAA,CAAA,CAAgB,CAAA1D,GAAhB,CACA4B,GAAA,CAAAA,CAAA,CAAgB,CAAAzB,GAAhB,CAEW5V,EAAAA,CAAAA,CAAAA,EAosKnB,EAAA,CAAO,CAAAq3B,GAAA,CAAkB,CAAAnQ,EAAD,CA/hOZC,EA+hOY,CAAuC,CAAvC,CAA2C,CAA5D,CAAiE,CAhsKhEzK,GAAA,CAAAA,CAAA,CAkGJu1D,KAlGI,CAAmC30C,CAAnC,CAA0C,CAA1C,CACA5gB,GAAA,CAAAA,CAAA,CAgGJw1D,KAhGI;AAAmC50C,CAAnC,CAA0C,CAA1C,CACA5gB,GAAA,CAAAA,CAAA,CA8FJy1D,KA9FI,CAAmC70C,CAAnC,CAA0C,CAA1C,CA/CY,CA4kvBxB;AAuBAx4B,CAAAvC,GAAA,CAAAA,QAAU,CAACQ,CAAD,CAAQkC,CAAR,CAAkB/D,CAAlB,CACV,CACI,IAAI2E,EAAW,IAEf,QAAQZ,CAAR,EACA,KAAK,OAAL,CAKI,MAJA,KAAA/F,EAAA,CAAc+F,CAAd,CAIO,CAJmB/D,CAInB,CAHPA,CAAAgE,QAGO,CAHWmvB,QAAqB,EAAG,CACtCxuB,CA2QHonE,EAAL,GA3QQpnE,CA4QCxG,MAAAK,GAAL,CAGIyjE,EAAA,CA/QAt9D,CA+QA,CAAc,CAAA,CAAd,CAAqB,CAAA,CAArB,CAHJ,CA5QIA,CA6QA2oE,KAAA,CA7QA3oE,CA6QU4oE,GAAV,CAFR,CA5Q8C,CAGnC,CAAA,CAAA,CAEX,MAAK,OAAL,CAKI,MAJA,KAAAvvE,EAAA,CAAc+F,CAAd,CAIO,CAJmB/D,CAInB,CAHPA,CAAAgE,QAGO,CAHWmvB,QAAqB,EAAG,CA2R9C,GA1RQxuB,CA0RHxG,MAAAK,GAAL,EAA2ButE,CA1RnBpnE,CA0RmBonE,EAA3B,CAWA,GArSQpnE,CAqSJooE,EAAJ,EAAmB,CArSXpoE,CAqSYsnE,EAApB,CAAsC,CAKlC,IAAIzmE,EAA2DypE,EAAA,CAAsB,mCAAtB,CAA4D78D,EAA5D,CAA4E,0EAA5E,CAC/D6vD,GAAA,CA3SIt9D,CA2SJ,CAAca,CAAd,CAAqB,CAAA,CAArB,CAaI,EAACA,CAAL,EAxTIb,CAwTUunE,EAAd,CAnl4BAv1E,MAml4BA,EAnl4BQA,MAAAC,SAAA+4E,OAAA,EAml4BR,EAIKnqE,CAEL,GA9TIb,CA4TQo8C,EAEZ,CAF2B,CAAA,CAE3B,EA9TIp8C,CA6TJ4oE,GAAA,CAAaN,EAAb,CACA,CA9TItoE,CA8TJo8C,EAAA,CAAe,CAAA,CANf,CAnBkC,CAAtC,IArSQp8C,EAgUJ0R,MAAA,EACA,CAjUI1R,CAiUA7F,EAAJ,EAAgB,CAjUZ6F,CAiUa9F,EAAjB,EAjUI8F,CAiUuB7F,EAAA8xB,GAAA,EAlUe,CAGnC,CAAA,CAAA,CAQX,MAAK,MAAL,CAMI,GAAIwsB,EAAA,CAAanR,EAAA,EAAb,CAA4B,UAA5B,CAAJ,CASIjsC,CAAAU,WAAAo2C,YAAA,CAAoD92C,CAApD,CATJ;IA6CA,OAjCA,KAAAhC,EAAA,CAAc+F,CAAd,CAiCO,CAjCmB/D,CAiCnB,CAhCPA,CAAAgE,QAgCO,CAhCWmvB,QAAoB,EAAG,CACrC,IAAIw5C,EAAUC,EAAA,CAAAjoE,CAAA,CAAqB,CAAA,CAArB,CACd,IAAIgoE,CAAJ,CAAa,CAQT,IAAInnE,EAAQ,CAAC,EAAEb,CAAAooE,EAAF,EAAqB,CAACpoE,CAAAsnE,EAAtB,EAA8CtnE,CAAAunE,EAA9C,CAAb,CACIlK,EAASC,EAAA,CAAAt9D,CAAA,CAAkBa,CAAlB,CACTA,EAAJ,CACIkrE,EAAA,CAAA/rE,CAAA,CAAyBgoE,CAAzB,CAAkC3K,CAAlC,CADJ,CAGIr9D,CAAAT,EAAA,CAAgB,0CAAhB,CAbK,CAFwB,CAgClC,CAAA,CAAA,CAxEX,CA6EA,MAAO,CAAA,CAhFX,CAqGA0oE;QAAA,GAAW,CAAXA,CAAW,CAACsE,CAAD,CACX,CACI,IAAIvE,EAAU,CAAAA,EACTA,EAAL,GAEI,CADAA,CACI,CADMwE,EAAA,CAAwB5B,EAAxB,CACN,CAAY96E,IAAAA,EAAZ,GAAAk4E,CAAJ,EACQ,CAACA,CADT,EACoBuE,CADpB,GAjk2BA7kC,CAIJsgC,CAJgB,IAIhBA,CAHIh2E,MAGJg2E,GAFItgC,CAEJsgC,CAFgBh2E,MAAA2hD,OAAA,CAsk2B2B14C,wIAtk2B3B,CAA+C,EAA/C,CAEhB+sE,EAAA,CAAAA,CAAOtgC,CA6j2BH,KASYsgC,CATZ,CASsByE,EAAA,CAAAA,CAAA,CAAkBzE,CAAlB,CATtB,GAU0B,CAAAzoE,EAAA,CAAY,yBAAZ,CAV1B,EAaWgtE,CAbX,EAcI,CAAAhtE,EAAA,CAAY,wCAAZ,CAhBR,CAmBA,OAAOyoE,EArBX;AA+BAyE,QAAA,GAAY,CAAZA,CAAY,CAACzE,CAAD,CACZ,CACI,CAAAA,EAAA,CAAe,IAIXp2E,EAAAA,CAAW41C,EAAA,CADAF,EAAA,EACA,CADmH,wCACnH,CADyH0gC,CACzH,CAEf,KAAItgC,EAAY91C,CAAA,CAAS,CAAT,CAChB,IAAI,CAFaA,CAAAO,CAAS,CAATA,CAEjB,EAAmBu1C,CAAnB,CACI,GAAI,CACA91C,CACA,CADWgC,IAAA,CAAK,GAAL,CAAW8zC,CAAX,CAAuB,GAAvB,CACX,CAAI91C,CAAA86E,KAAJ,EA707BIjC,IA607BJ,EAAqB74E,CAAA86E,KAArB,GACI/B,EAAA,CAAwBC,EAAxB,CAAoDh5E,CAAA6B,KAApD,CAEA,CAAA,CAAAu0E,EAAA,CAAep2E,CAAA6B,KAHnB,CAFA,CASF,MAAO/I,CAAP,CAAU,CAxp2BhBqJ,CAAA,CAyp2BwBrJ,CAAAsJ,QAzp2BxB,CAyp2BoC,IAzp2BpC,CAyp2B2C0zC,CAzp2B3C,CAyp2BuD,GAzp2BvD,CAwp2BgB,CAMhB,MAAO,EAAAsgC,EAxBX,CAiCAQ,QAAA,GAAkB,CAAlBA,CAAkB,CAClB,CACI,IAAIjB,EAAa,IACb,EAAAS,EAAJ,GAIIT,CAJJ,CAIiBjgC,EAAA,EAJjB,CAIkI,sCAJlI,CAIwI,CAAA0gC,EAJxI,CAImL,eAJnL,CAIyL2E,EAAA,CAAU,CAAV,CArx8BhLpE,QAqx8BgL,CAJzL,CAUA,OAAOhB,EAZX;AAsBAwE,QAAA,GAAe,CAAfA,CAAe,CAAC/D,CAAD,CAAU3K,CAAV,CACf,CAOI,GAAIA,CAAJ,CAAY,CA0CZ,IAAI+N,EAAW,CA577BH7yB,IAQAq0B,OAo77BG,CAEfxB,EAAA,KAAA,CAxCyCpD,CAyCzCoD,EAAA,MAAA,CAAgCuB,EAAA,CAzCbE,CAyCa,CA118BvBtE,QA018BuB,CAChC6C,EAAA,KAAA,CA1CkD/N,CA+C1CzrE,EAAAA,CAAW41C,EAAA,CAJJF,EAAA,EAII,CAv87BPkN,cAu87BO,CAA0B42B,CAA1B,CACX1jC,EAAAA,CAAY91C,CAAA,CAAS,CAAT,CAChB,IAAIA,CAAA,CAAS,CAAT,CAAJ,CAAiB,CACb,GAAI81C,CAAJ,CAAe,CACX,IAAI58C,EAAI48C,CAAAr7C,QAAA,CAAkB,IAAlB,CACA,EAAR,CAAIvB,CAAJ,GAAW48C,CAAX,CAAuBA,CAAAj7C,OAAA,CAAiB,CAAjB,CAAoB3B,CAApB,CAAvB,CACK48C,EAAAr7C,QAAA,CAAkB,SAAlB,CAAL,GAAmCq7C,CAAnC,CAA+CA,CAAAj7C,OAAA,CAAiB,CAAjB,CAA/C,CAHW,CAKfi7C,CAAA,CAAY,UAAZ,CAA6C91C,CAAA,CAAS,CAAT,CAA7C,CAAqF,WAArF,CAA6F81C,CAA7F,CAAyG,IAN5F,CASjB,CAAA,CAAOh0C,IAAAC,MAAA,CAAW+zC,CAAX,CAzDH91C,EAAJ,EAv47BQ64E,IAu47BR,EAAgB74E,CAAA,KAAhB,CACI,CAAA2N,EAAA,CAAY,+BAAZ,CADJ,CAEW89D,CAFX,GAGQyP,CAnHZ,CAmHsBl7E,CAnHtB,EAmHkCA,CAAA,KAnHlC,EA9w7BY84E,8BA8w7BZ,CAqHYoC,CArHZ,CAtx7BYrC,OA047BJ,EAAI74E,CAAA,KAAJ,CACa,SADb,CACyBk7E,CADzB,CAGa,QAHb,CAGwBl7E,CAAA,KAHxB,CAGqD,IAHrD,CAG4Dk7E,CAvHpE,CAyHQ,CAAAvtE,EAAA,CAAYutE,CAAZ,CAzHR,CADAnC,EAAA,CAAwBC,EAAxB,CAAoD,EAApD,CACA,CA0HQC,CA1HR7C,EAAA,CAAe,IAgHX,CALQ,CAPhB;AA4JAj1B,QAAA,GAAmB,CAAnBA,CAAmB,CACnB,CAD2B51C,IAAAA,CAGnBN,EAAAA,CAAc6xB,EAAA,CAAwB,CAAAx1B,GAAxB,CAClB,KAAK,IAAIu1B,EAAa,CAAtB,CAAyBA,CAAzB,CAAsC5xB,CAAA7N,OAAtC,CAA0Dy/B,CAAA,EAA1D,CAAwE,CACpE,IAAIl0B,EAAYsC,CAAA,CAAY4xB,CAAZ,CAChB,IAAItxB,CAAJ,CACQA,CAAJ,EAAqB5C,CAArB,GAAgC4C,CAAhC,CAAgD,IAAhD,CADJ,KAIA,IAxvXwDD,KAwvXxD,EAAI3C,CAAAnJ,KAAJ,CAA6B,MAAOmJ,EANgC,CASxE,MAAO,KAZX,CAyBAyzB,QAAA,GAAQ,CAARA,CAAQ,CAAC++C,CAAD,CACR,CACI,GAAI,CAAA/P,EAAJ,CAAuB,CAAA,IAMfnxE,EAAI,CANW,CAMRC,EAAI,CACX,EAACihF,CAAL,EAAgB/6E,MAAhB,GACInG,CACA,CADImG,MAAAshE,QACJ,CAAAxnE,CAAA,CAAIkG,MAAAuhE,QAFR,CAKA,EAAAyJ,EAAAxJ,MAAA,EAEI,EAACuZ,CAAL,EAAgB/6E,MAAhB,EACIA,MAAAyhE,SAAA,CAAgB5nE,CAAhB,CAAmBC,CAAnB,CAfe,CAD3B,CA2KJ,IAAAi+E,GAAgC,UAAhC,CACAT,GAAgC,UADhC,CAEAG,GAAgC,WAFhC,CAGAiC,GAAgC,SAHhC,CAIAC,GAAgC,KAJhC,CAKAC,GAAgC,SALhC,CAMAhB,GAAgC,MANhC,CAaAd,GAAiC,EAbjC,CAcAxB,GAAiC,CAdjC,CAeAsB,GAAiC,CAfjC,CAgBAK,GAAiC,CAhBjC,CAiBA+B,GAAiC,CAKjC9zD;EAAA,CApKIZ,QAAW,EACX,CAQI,IAFA,IAAI01D,EAAalxE,CAAA,CAA6B0b,QAA7B,CAAuC5b,CAAvC,CAAwD,UAAxD,CAAjB,CAESqxE,EAAW,CAApB,CAAuBA,CAAvB,CAAkCD,CAAAh+E,OAAlC,CAAqDi+E,CAAA,EAArD,CAAiE,CAE7D,IAAIC,EAAWF,CAAA,CAAWC,CAAX,CAAf,CACIlG,EAAetqE,EAAA,CAA4BywE,CAA5B,CAEfC,EAAAA,CAAcrxE,CAAA,CAA6BoxE,CAA7B,CAAuCtxE,CAAvC,CAAuD,UAAvD,CAElB,KAAK,IAAIwxE,EAAY,CAArB,CAAwBA,CAAxB,CAAoCD,CAAAn+E,OAApC,CAAwDo+E,CAAA,EAAxD,CAAqE,CAEjE,IAAIC,EAAYF,CAAA,CAAYC,CAAZ,CAAhB,CACItG,EAAgBrqE,EAAA,CAA4B4wE,CAA5B,CAMhBrtE,EAAAA,CAAW,IAAI6mE,EAAJ,CAAkBC,CAAlB,CAAiCC,CAAjC,CAA+C,CAAA,CAA/C,CAWfnvD,GAAA,CAAgC5X,CAAhC,CAA0CqtE,CAA1C,CAKIrtE,EAAAknE,EAAJ,EAAyBlnE,CAAA2oE,KAAA,CAAc3oE,CAAA4oE,GAAd,CAzBwC,CAPR,CARrE,CAmKJ,CAl/3BQ/wE,GAAA,KAAAxD,KAAA,CAq43BJi5E,QAAW,EACX,CAEI,IADA,IAAIH,EAAcrxE,CAAA,CAA6B0b,QAA7B,CAAuC5b,CAAvC,CAAuD,UAAvD,CAAlB,CACSwxE,EAAY,CAArB,CAAwBA,CAAxB,CAAoCD,CAAAn+E,OAApC,CAAwDo+E,CAAA,EAAxD,CAAqE,CAEjE,IAAItG,EAAgBrqE,EAAA,CADJ0wE,CAAAE,CAAYD,CAAZC,CACI,CAEpB,IADIrtE,CACJ,CAD6CpB,EAAA,CAA6B,UAA7B,CAAyCkoE,CAAA,GAAzC,CAC7C,CAEI9mE,CAAAxG,MAAAM,GAWA,CAX2B,CAAA,CAW3B,CAAIkG,CAAA4nE,EAAJ,EAA6B,CAAC5nE,CAAAxG,MAAAK,GAA9B,EAIImG,CAAA4oE,GAAA,CAAiBkB,EAAjB,CArByD,CAFzE,CAt43BI,CAYAjyE;EAAA,KAAAxD,KAAA,CAi73BJk5E,QAAW,EACX,CAEI,IADA,IAAIJ,EAAcrxE,CAAA,CAA6B0b,QAA7B,CAAuC5b,CAAvC,CAAuD,UAAvD,CAAlB,CACSwxE,EAAY,CAArB,CAAwBA,CAAxB,CAAoCD,CAAAn+E,OAApC,CAAwDo+E,CAAA,EAAxD,CAAqE,CAEjE,IAAItG,EAAgBrqE,EAAA,CADJ0wE,CAAAE,CAAYD,CAAZC,CACI,CAEpB,IADIrtE,CACJ,CAD6CpB,EAAA,CAA6B,UAA7B,CAAyCkoE,CAAA,GAAzC,CAC7C,CAKI9mE,CAAAxG,MAAAM,GAMA,CAN2B,CAAA,CAM3B,CAAIkG,CAAAxG,MAAAK,GAAJ,EAMIyjE,EAAA,CAAAt9D,CAAA,CAAkB,EAAGooE,CAAApoE,CAAAooE,EAAH,EAAuBpoE,CAAAsnE,EAAvB,CAAlB,CAAgE,CAAA,CAAhE,CArByD,CAFzE,CAl73BI,CA0g4BJxuE,SAzBEma,EAyBS,CAAC1Y,CAAD,CAAYizE,CAAZ,CAAsBz+E,CAAtB,CACX,CACI,IAAAmK,GAAA,CAAUqB,CAAArB,GAEV,KAAAu0E,EAAA,CAAY,EACZ,KAAAz6D,EAAA,CAAa,EACb,KAAAu2B,EAAA,CAAe,IAAAmkC,EAAf,CAA8B,CAAA,CAC9B,KAAAC,IAAA,CAAWhB,EAAA,CAAUpyE,CAAV,CAAqBizE,CAArB,CAA+Bz+E,CAA/B,CACXm7E,GAAA,CAAAA,IAAA,CAAY3vE,CAAAvB,GAAZ,CAPJ,CAiBA,CAAA,CA7t9BJ,CAAA40E,UA6t9BI3uE,EAAAiU,IAAA,CAAAA,QAAG,CAACha,CAAD,CAAKzF,CAAL,CACH,CACI,GAAI,CACA,IAAAuf,EAAA,CAAW9Z,CAAX,CAAA,CAAiBzF,CADjB,CAEF,MAAM/I,CAAN,CAAS,EAHf,CAeAuU,EAAAuqE,IAAA,CAAAA,QAAG,CAACtwE,CAAD,CACH,CACI,MAAO,KAAA8Z,EAAA,CAAW9Z,CAAX,CAAP,EAAyB,IAD7B,CAUA+F,EAAAxL,KAAA,CAAAA,QAAI,EACJ,CACI,MAAO,KAAAuf,EADX,CAcA/T;CAAA80C,KAAA,CAAAA,QAAI,CAAC05B,CAAD,CACJ,CACI,MAAIA,EAAJ,EACI,IAAAA,EAGO,CAHKA,CAGL,CAFP,IAAAlkC,EAEO,CAFQ,CAAA,CAER,CADP,IAAAmkC,EACO,CADQ,CAAA,CACR,CAAA,CAAA,CAJX,EAMI,IAAAnkC,EAAJ,CAIW,CAAA,CAJX,CAMIskC,EAAA,EAAJ,GACQriF,CADR,CACYghF,EAAA,CAAwB,IAAAmB,IAAxB,CADZ,GAGQ,IAAAF,EACA,CADYjiF,CACZ,CAAA,IAAA+9C,EAAA,CAAe,CAAA,CAJvB,EASO,CAAA,CAtBX,CAmCA51C,SAAA,GAAK,CAALA,CAAK,CACL,CACI,IAAIqK,EAAW,CAAA,CACf,IAAI,CAAC,CAAA0vE,EAAL,CACI,GAAI,CACA,CAAA16D,EACA,CADatf,IAAAC,MAAA,CAAW,CAAA85E,EAAX,CACb,CAAA,CAAAC,EAAA,CAAe,CAAA,CAFf,CAGF,MAAOhjF,CAAP,CAAU,CAls3BhBqJ,CAAA,CAms3BwBrJ,CAAAsJ,QAns3BxB,EAms3BqCtJ,CAns3BrC,CAos3BQ,CAAAsT,CAAA,CAAW,CAAA,CAFH,CAKhB,MAAOA,EAXX,CAoBAiB,CAAAmrE,MAAA,CAAAA,QAAK,EACL,CACI,IAAIpsE,EAAW,CAAA,CACf,IAAI6vE,EAAA,EAAJ,CAA2B,CACvB,IAAIriF,EAAIkI,IAAAsqD,UAAA,CAAe,IAAAhrC,EAAf,CACJ23D,GAAA,CAAwB,IAAAgD,IAAxB,CAAkCniF,CAAlC,CAAJ,GArt3BJuI,CAAA,CA8t3BwB,kBA9t3BxB,CA8t3B6CvI,CAAAwD,OA9t3B7C,CA8t3BwD,iCA9t3BxD,CA+t3BQ,CAAAgP,CAAA,CAAW,CAAA,CAVf,CAFuB,CAe3B,MAAOA,EAjBX,CA0BAiB,EAAAC,SAAA,CAAAA,QAAQ,EACR,CACI,MAAO,KAAA8T,EAAA,CAAYtf,IAAAsqD,UAAA,CAAe,IAAAhrC,EAAf,CAAZ,CAAyC,IAAAy6D,EADpD,CAcAvD;QAAA,GAAM,CAANA,CAAM,CAAClxE,CAAD,CACN,CACI,CAAAy0E,EAAA,CAAY,EACZ,EAAAz6D,EAAA,CAAa,EACb,EAAAu2B,EAAA,CAAe,CAAAmkC,EAAf,CAA8B,CAAA,CAC1B10E,EAAJ,EAAW,CAAAka,IAAA,CAAS,OAAT,CAAkBla,CAAlB,CAJf,CAgBAiG,CAAA0qE,MAAA,CAAAA,QAAK,CAACmE,CAAD,CACL,CACI5D,EAAA,CAAAA,IAAA,CA1i5BA,KAAI5/E,EAAI,EACR,IAAI,CACA,IADA,IACSQ,EAAI,CADb,CACgBN,EAAIwH,MAAA2C,aAAA3F,OAApB,CAAgDlE,CAAhD,CAAoDN,CAApD,CAAuDM,CAAA,EAAvD,CACIR,CAAA+J,KAAA,CAAOrC,MAAA2C,aAAAg5E,IAAA,CAAwB7iF,CAAxB,CAAP,CAFJ,CAIF,MAAOJ,CAAP,CAAU,EAui5BZ,IAASI,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CApi5BOR,CAoi5Ba0E,OAApB,CAAkClE,CAAA,EAAlC,CAEI,IADImK,CACJ,CAti5BG3K,CAqi5BQ,CAAMQ,CAAN,CACX,IAAagjF,CAAb,EAAqB74E,CAAAxI,OAAA,CAAY,CAAZ,CAAe,IAAAkhF,IAAA3+E,OAAf,CAArB,EAAwD,IAAA2+E,IAAxD,EAAmE,CA5j5BvE,GAAI,CACA37E,MAAA2C,aAAAI,WAAA,CA4j5B+BE,CA5j5B/B,CADA,CAEF,MAAOvK,CAAP,CAAU,EAoBLJ,CAyi5BC8T,OAAA,CAAatT,CAAb,CAAgB,CAAhB,CACAA,EAAA,CAAI,CAJ2D,CAL3E,CAwBA6iF,SAAO,GAAG,CAACpzE,CAAD,CAAYizE,CAAZ,CAAsBz+E,CAAtB,CACV,CACQ4+E,CAAAA,CAAMpzE,CAAArB,GACV,IAAIs0E,CAAJ,CAAc,CACV,IAAI1iF,EAAI0iF,CAAAnhF,QAAA,CAAiB,GAAjB,CACA,EAAR,CAAIvB,CAAJ,GAAW6iF,CAAX,EAAkB,IAAlB,CAAyBH,CAAA/gF,OAAA,CAAgB,CAAhB,CAAmB3B,CAAnB,CAAzB,CAFU,CAIViE,CAAJ,GACI4+E,CADJ,EACW,GADX,CACiB5+E,CADjB,CAGA,OAAO4+E,EATX,CA0JJ,IAAII,GAAiB,CAmCrBC;QAASA,GAAO,CAACC,CAAD,CAAW10E,CAAX,CAAgCoC,CAAhC,CAA2CjG,CAA3C,CAAmDw4E,CAAnD,CAA6DC,CAA7D,CAAsE78E,CAAtE,CAChB,CASI68E,CAAA,CAAQ,UAAR,CAAqBF,CAArB,CAAgC,KAAhC,CACAzmC,GAAA,CAAgBymC,CAAhB,CAA0B,IAA1B,CA/CS58E,CAAAA,CA+CT,CATkB+8E,QAAQ,CAACC,CAAD,CAAWC,CAAX,CAAiBn8E,CAAjB,CAA6B,CAC/CA,CAAJ,EACSm8E,CACL,GADWA,CACX,CADkB,iBAClB,CADsCL,CACtC,CADiD,IACjD,CADwD97E,CACxD,CADqE,GACrE,EAAAb,CAAA,CAAKg9E,CAAL,CAAW,IAAX,CAFJ,EAKAC,EAAA,CAASD,CAAT,CAAeL,CAAf,CAAyB10E,CAAzB,CAA8CoC,CAA9C,CAAyDjG,CAAzD,CAAiEw4E,CAAjE,CAA2EC,CAA3E,CAAoF78E,CAApF,CANmD,CASvD,CAVJ;AA8BAi9E,QAASA,GAAQ,CAACD,CAAD,CAAOL,CAAP,CAAiB10E,CAAjB,CAAsCoC,CAAtC,CAAiDjG,CAAjD,CAAyDw4E,CAAzD,CAAmEC,CAAnE,CAA4E78E,CAA5E,CACjB,CACmBk9E,QAAA,EAAQ,CAACF,CAAD,CAAOxB,CAAP,CAAe,CAClC,GAAIA,CAAJ,CACIx7E,CAAA,CAAKw7E,CAAL,CAAa,IAAb,CADJ,KAAA,CAIIvzE,CAAJ,GAMIouC,EAAA,CAA6BpuC,CAA7B,CAAwC00E,CAAxC,CAAkDK,CAAlD,CA8BA,EA5BIn9E,CA4BJ,CA5BW88E,CA4BX,GA3BgC,CA2BhC,CA3BY98E,CAAA9E,QAAA,CAAa,GAAb,CA2BZ,EA3B2E,GA2B3E,EA3BqC2F,MAAAC,SAAAw8E,SAAA9hF,MAAA,CAAgC,EAAhC,CA2BrC,GA1BIwE,CA0BJ,CA1BWa,MAAAC,SAAAw8E,SA0BX,CA1BsCt9E,CA0BtC,EApBKuE,CAAL,CAE+B,GAAxB,EAAIA,CAAA/I,MAAA,CAAc,EAAd,CAAJ,EACH+I,CACA,CADSA,CAAA/I,MAAA,CAAa,CAAb,CAAiB,EAAjB,CACT,CAAoB,CAApB,CAAI+I,CAAA1G,OAAJ,GAAuB0G,CAAvB,EAAiC,GAAjC,CAFG,EAIHA,CAJG,CAIM,UAJN,CAImBA,CAJnB,CAI4B,IANnC,CACIA,CADJ,CACa,GAmBb,CAZAA,CAYA,EAZU,OAYV,CAZoBvE,CAYpB,CAZ2B,IAY3B,CAFwB,QAExB,EAFI,MAAOiB,UAEX,GAFkCjB,CAElC,CAFyC,IAEzC,EADAuE,CACA,CADSA,CAAApJ,QAAA,CAAe,KAAf,CAAsB,MAAtB,CACT,CAAAgiF,CAAA,CAAOA,CAAAhiF,QAAA,CAAa,iCAAb,CAAgD,MAAhD,CAAyDiN,CAAzD,CAAqE,IAArE,EAA6E7D,CAAA,CAAQ,aAAR,CAAqBA,CAArB,CAA8B,GAA9B,CAAoC,EAAjH,GAAwHvE,CAAA,CAAM,WAAN,CAAiBA,CAAjB,CAAwB,GAAxB,CAA8B,EAAtJ,EApCX,CAuCK+8E,EAAL,GAKII,CACA,CADOA,CAAAhiF,QAAA,CAAa,sDAAb;AAAqE,WAArE,CACP,CAAAgiF,CAAA,CAAOA,CAAAhiF,QAAA,CAAa,uDAAb,CAAsE,IAAtE,CAA6EqP,CAA7E,CAAyF,IAAzF,CANX,CAiCI+yE,EAAAA,CAAS,IACb,IAAsB,MAAtB,EAAIJ,CAAA9hF,OAAA,CAAY,CAAZ,CAAJ,CACI,GAAI,CASK0hF,CASL,GARII,CAQJ,CARWA,CAAAhiF,QAAA,CAAa,4BAAb,CAA2C,EAA3C,CAQX,EAAI0F,MAAAM,cAAJ,EAA4B,eAA5B,EAA+CN,OAA/C,EACI08E,CAEA,CAFS,IAAI18E,MAAAM,cAAJ,CAAyB,kBAAzB,CAET,CADAo8E,CAAAC,MACA,CADe,CAAA,CACf,CAAAD,CAAA,QAAA,CAAkBJ,CAAlB,CAHJ,EAMII,CANJ,CAMaE,CAAC,IAAI58E,MAAA68E,UAALD,iBAAA,CAAyCN,CAAzC,CAA+C,UAA/C,CAxBb,CA0BF,MAAM5jF,CAAN,CAAS,CACPgkF,CACA,CADS,IACT,CAAAJ,CAAA,CAAO5jF,CAAAsJ,QAFA,CA3Bf,IAgCIs6E,EAAA,CAAO,oBAAP,EAA6C,GAAd,CAAAA,CAAAt/E,OAAA,CAAmBs/E,CAAA7hF,OAAA,CAAY,CAAZ,CAAe,GAAf,CAAnB,CAAyC,KAAzC,CAAiD6hF,CAAhF,CAEJh9E,EAAA,CAAKg9E,CAAL,CAAWI,CAAX,CA/GA,CADkC,CAkHlCJ,CAAJ,CAEQJ,CAAJ,CACIY,EAAA,CAAWR,CAAX,CAAiBH,CAAjB,CAA0BK,CAA1B,CADJ,CAIAA,CAAA,CAASF,CAAT,CAAe,IAAf,CANJ,CASAh9E,CAAA,CAAK,SAAL,EAAkB28E,CAAA,CAAU,aAAV;AAA0BA,CAA1B,CAAqC,EAAvD,EAA4D,IAA5D,CA5HJ;AA4IAa,QAASA,GAAU,CAACR,CAAD,CAAOH,CAAP,CAAgB78E,CAAhB,CACnB,CACI,IAAIy9E,CAGJ,IAAKA,CAAL,CAFYC,kCAEIl5E,KAAA,CAAWw4E,CAAX,CAAhB,CAAmC,CAE/B,IAAIW,EAAWF,CAAA,CAAS,CAAT,CA2DfZ,EAAA,CAAQ,UAAR,CAAqBc,CAArB,CAAgC,KAAhC,CACAznC,GAAA,CAAgBynC,CAAhB,CAA0B,IAA1B,CAnRK59E,CAAAA,CAmRL,CA1DkB69E,QAAQ,CAACb,CAAD,CAAWc,CAAX,CAAoBh9E,CAApB,CAAgC,CACtD,GAAIA,CAAJ,EAAkB,CAACg9E,CAAnB,CACI79E,CAAA,CAAKg9E,CAAL,CAAW,mCAAX,CAAiDS,CAAA,CAAS,CAAT,CAAjD,CAA+D,IAA/D,CAAsE58E,CAAtE,CAAmF,GAAnF,CADJ,KAAA,CAUA,GADIi9E,CACJ,CADgBL,CAAA,CAAS,CAAT,CAChB,CAEI,GADIM,CACJ,CADiBF,CAAAtiF,MAAA,CAAc,IAAI+Q,MAAJ,CAAW,MAAX,CAAiBmxE,CAAA,CAAS,CAAT,CAAjB,CAA+B,cAA/B,CAAd,CACjB,CAAgB,CAOZ,IANA,IAAIO,EAAaD,CAAA,CAAW,CAAX,CAAjB,CAIIE,CAJJ,CAKIC,EAAS,2BACb,CAAQD,CAAR,CAAoBC,CAAA15E,KAAA,CAAYs5E,CAAZ,CAApB,CAAA,CAKQE,CAAA,CAJ+D,CAAnE,CAAIA,CAAAzgF,YAAA,EAAAxC,QAAA,CAAiCkjF,CAAA,CAAU,CAAV,CAAA1gF,YAAA,EAAjC,CAAJ,CAIiBygF,CAAAhjF,QAAA,CAAmB,MAAnB,CAAwBijF,CAAA,CAAU,CAAV,CAAxB,CAAuC,MAAvC,CAJjB,CASiBD,CAAAhjF,QAAA,CAAmB,IAAIsR,MAAJ,CAAW2xE,CAAA,CAAU,CAAV,CAAX,CAA0B,iBAA1B,CAAnB,CAAiEA,CAAA,CAAU,CAAV,CAAjE,CAGjBF,EAAA,CAAW,CAAX,CAAJ,EAAqBC,CAArB,GACIH,CADJ,CACcA,CAAA7iF,QAAA,CAAgB+iF,CAAA,CAAW,CAAX,CAAhB,CAA+BC,CAA/B,CADd,CApBY,CAAhB,IAuBO,CACHh+E,CAAA,CAAKg9E,CAAL,CAAW,cAAX;AAAyBS,CAAA,CAAS,CAAT,CAAzB,CAAuC,UAAvC,CAAiDE,CAAjD,CACA,OAFG,CAcXE,CAAA,CAAUA,CAAA7iF,QAAA,CAAgB,qBAAhB,CAAuC,EAAvC,CAEVgiF,EAAA,CAAOA,CAAAhiF,QAAA,CAAayiF,CAAA,CAAS,CAAT,CAAb,CAA0BI,CAA1B,CAEPL,GAAA,CAAWR,CAAX,CAAiBH,CAAjB,CAA0B78E,CAA1B,CArDA,CADsD,CA0D1D,CA9D+B,CAAnC,IAiEAA,EAAA,CAAKg9E,CAAL,CAAW,IAAX,CArEJ;AAsFAmB,QAASA,GAAY,CAAW9zE,CAAX,CAAgCpC,CAAhC,CAA2C00E,CAA3C,CAAqDyB,CAArD,CAA+Dh6E,CAA/D,CACrB,CAyByBi6E,QAAA,EAAQ,CAAC70E,CAAD,CAAW,CACpC,GAAiBhL,IAAAA,EAAjB,GAAI8/E,CAAJ,CAA4B,CAaxB,IAAIC,EAAa3C,CAAb2C,EAAyB/zE,CAAA,CAA6BoxE,CAA7B,CAAuC,iBAAvC,CAC7B0C,EAAA,CAAYC,CAAZ,EAAyBA,CAAA,CAAU,CAAV,CAAzB,EAA0C3C,CAdlB,CAgBxB0C,CAAJ,GAAcA,CAAA/9B,UAAd,CAAmCi+B,EAAA,CAAeh1E,CAAf,CAAnC,CAjBoC,CAPrBi1E,QAAA,EAAQ,CAACjD,CAAD,CAAS,CAEhC6C,CAAA,CAAe,SAAf,CAA2B7C,CAA3B,CACI9uE,EAAJ,GARK,EAAE+vE,EAQP,EAPgBiC,EAAA,CAAqB,CAAA,CAArB,CAOhB,CACAhyE,EAAA,CAAW,CAAA,CAJqB,CAlBxC,IACQkvE,CADR,CACkB0C,CADlB,CAC4B5xE,EAAW,CAAA,CAE9BiwE,EAAL,GACIA,CACA,CADW,aACX,CAAKyB,CAAL,GAAeA,CAAf,CAA0B,gBAA1B,CAFJ,CAKA3B,GAAA,EA354BIrzE,GAAA,CA454BiBnB,CA554BjB,CAAA,CAAgC,EAg84BpC,IAAI,CAEA,GADA2zE,CACA,CADW11D,QAAAy4D,eAAA,CAAwB12E,CAAxB,CACX,CAAc,CAKV,IAAI22E,CACJ,IAAwB,QAAxB,EAAI,MAAO99E,UAAX,GAAqC89E,CAArC,CAA2C99E,SAAA,IAA3C,EAA8D,CAC1D,IAAI6lD,EAAOzgC,QAAAygC,KAAPA,EAAwBzgC,QAAA9Z,qBAAA,CAA8B,MAA9B,CAAA,CAAsC,CAAtC,CAA5B,CACIkW,EAAQ4D,QAAAo9B,cAAA,CAAuB,OAAvB,CACZhhC,EAAAxiB,KAAA,CAAa,UAETwiB,EAAAu8D,WAAJ,CAEIv8D,CAAAu8D,WAAAC,QAFJ,CAE+BF,CAF/B,CAIIt8D,CAAAkhC,YAAA,CAAkBt9B,QAAA64D,eAAA,CAAwBH,CAAxB,CAAlB,CAEJj4B;CAAAnD,YAAA,CAAiBlhC,CAAjB,CAX0D,CAczD87D,CAAL,GAQQY,CAMA,CANa30E,CAMb,CAD8B,KAC9B,EADIA,CAAAlP,OAAA,CAAiB,CAAjB,CAAoB,CAApB,CACJ,GADqC6jF,CACrC,CADkD,OAClD,EAAAZ,CAAA,CAAW,YAAX,CAA0BY,CAA1B,CAAwD,wBAdhE,CAkBIC,EAAAA,CAAaA,QAAQ,CAACjC,CAAD,CAAOkC,CAAP,CAAY,CAC5BA,CAAL,CAwGAxC,EAAA,CAAQ0B,CAAR,EAAoB,EAApB,CAAwB,IAAxB,CAAwC/zE,CAAxC,CAAmD,IAAnD,CAAyD,CAAA,CAAzD,CAAgEg0E,CAAhE,CA1FmBc,QAAQ,CAACC,CAAD,CAAOC,CAAP,CAAY,CAC9BA,CAAL,EAUAhpC,EAAA,CAA6BpuC,CAA7B,CAAwCm2E,CAAxC,EAAoD,EAApD,CAAwDgB,CAAxD,CAsBA,CAPAf,CAAA,CAAe,aAAf,CAA+B1B,CAA/B,CAA0C,KAA1C,CAOA,CAAIj8E,MAAAM,cAAJ,EAA4B,eAA5B,EAA+CN,OAA/C,CAEI,CADI4+E,CACJ,CADgBJ,CAAA,cAAA,CAAqBG,CAArB,CAChB,GACIzD,CAAA2D,UA3HpB,CA2HyCD,CA3HzC,CAAK,EAAE7C,EAAP,EACgBiC,EAAA,CAAqB,CAAA,CAArB,CAyHA,EAIID,CAAA,CAAa,8BAAb,CANR,CASSv4D,QAAAs5D,eAAJ,EAA+Bt5D,QAAAs5D,eAAAC,eAA/B,EACGC,CAGJ,CAHoB,IAAIC,aAGxB,CAFAD,CAAA,iBAAA,CAAkCL,CAAlC,CAEA,CAAA,CADIO,CACJ,CADgBF,CAAA,oBAAA,CAAqCR,CAArC,CAA0Ch5D,QAA1C,CAChB,EASQ01D,CAAAnxE,WAAJ,EACImxE,CAAAnxE,WAAAo1E,aAAA,CAAiCD,CAAjC;AAA4ChE,CAA5C,CA/IxB,CAAK,EAAEa,EAAP,EACgBiC,EAAA,CAAqB,CAAA,CAArB,CA6II,EAkBID,CAAA,CAAa,2BAAb,CAA2Cx2E,CAA3C,CA3BR,CA8BIw2E,CAAA,CAAa,4BAAb,CAlCH,EA0CDA,CAAA,CAAa,8CAAb,CAnFJ,EACIA,CAAA,CAAaW,CAAb,CAF+B,CA0FvC,CAxGA,CACIX,CAAA,CAAazB,CAAb,CAF6B,CA4GX,OAA1B,EAAIL,CAAAzhF,OAAA,CAAgB,CAAhB,CAAJ,CACIwhF,EAAA,CAAQC,CAAR,CAAkB10E,CAAlB,CAAuCoC,CAAvC,CAAkDjG,CAAlD,CAA0D,CAAA,CAA1D,CAAgEi6E,CAAhE,CAAgFY,CAAhF,CADJ,CAGIhC,EAAA,CAASN,CAAT,CAAmB,IAAnB,CAAyB10E,CAAzB,CAA8CoC,CAA9C,CAAyDjG,CAAzD,CAAiE,CAAA,CAAjE,CAAwEi6E,CAAxE,CAAwFY,CAAxF,CArJM,CAAd,IAwJIR,EAAA,CAAa,2BAAb,CAA2Cx2E,CAA3C,CA1JJ,CA4JF,MAAM7O,CAAN,CAAS,CACPqlF,CAAA,CAAarlF,CAAAsJ,QAAb,CADO,CAGX,MAAOgK,EA5MX,CAkWIhM,MAAA,WAAA,CA9FJo/E,QAAmB,CAAC73E,CAAD,CAAY00E,CAAZ,CAAsByB,CAAtB,CAAgCh6E,CAAhC,CACnB,CACgBs6E,EAAA,CAAqB,CAAA,CAArB,CACZ,OAAOP,GAAA,CAAsB,OAAtB,CAA2Cl2E,CAA3C,CAAsD00E,CAAtD,CAAgEyB,CAAhE,CAA0Eh6E,CAA1E,CAFX,CA8FI1D,OAAA,WAAA,CAhFJq/E,QAAmB,CAAC93E,CAAD,CAAY00E,CAAZ,CAAsByB,CAAtB,CAAgCh6E,CAAhC,CACnB,CACgBs6E,EAAA,CAAqB,CAAA,CAArB,CACZ,OAAOP,GAAA,CAAsB,OAAtB,CAA2Cl2E,CAA3C,CAAsD00E,CAAtD,CAAgEyB,CAAhE,CAA0Eh6E,CAA1E,CAFX,CAkFA1D;MAAA,eAAA,CAlDAs/E,QAAuB,CAACj2E,CAAD,CAAUk2E,CAAV,CAAmBh4E,CAAnB,CAA8Bi4E,CAA9B,CAA0CnzE,CAA1C,CAAoDnJ,CAApD,CACvB,CACI,GAAgB,QAAhB,EAAImJ,CAAJ,CAA0B,CA/n4BlBL,CAAAA,CAAW,CAAA,CAgo4BazE,EA/n4B5B,EAAa,UACb,IAAI,CA8n4BmCrE,CA9n4BvC,CACI,OAAOgJ,EAAA,CAAmB3E,CAAnB,CACP,CAAAyE,CAAA,CAAW,CAAA,CAFf,KAIK,IAAsB,QAAtB,EAAI,MA0n4B8B9I,EA1n4BlC,EAAkC,CAACgJ,EAAA,CAAmB3E,CAAnB,CAAnC,CAAkE,CACnEyE,CAAA,CAAW,CAAA,CACXE,EAAAA,CAAAA,EA9DJ,KA8DuB3E,IAAAA,EAAAA,CAAAA,CAhEnBlM,EAwr4BmC6H,CAxr4B7BlG,OAgEauK,CA/DnB0E,EAAY,EA+DO1E,CA/DH4E,EAAU,EA+DP5E,CA/DWk4E,EAAS,EA+DpBl4E,CA/DwBqzD,EAAU,IA+DlCrzD,CA9DdzO,EAAI,CAAb,CAAgBA,CAAhB,CAAoBuC,CAApB,CAAyBvC,CAAA,EAAzB,CAA8B,CAC1B,IAAIyB,EAqr4B+B2I,CArr4B1B,CAAQpK,CAAR,CACT,IAAU,GAAV,EAAIyB,CAAJ,EAAuB,GAAvB,EAAiBA,CAAjB,CACQqgE,CAAJ,EAAergE,CAAf,EAAqBqgE,CAArB,CACI6kB,CADJ,EACcllF,CADd,EAIKqgE,CAAL,CAGIA,CAHJ,CAGc,IAHd,CACIA,CADJ,CACcrgE,CAId,CAAIklF,CAAJ,GACItzE,CAAA9J,KAAA,CAAao9E,CAAb,CACA,CAAAA,CAAA,CAAS,EAFb,CATA,CADJ,KAAA,CAgBA,GAAI,CAAC7kB,CAAL,CAAc,CACV,GAAU,IAAV,EAAIrgE,CAAJ,EAAwB,IAAxB,EAAkBA,CAAlB,CACIA,CAAA,CAAK,GAET,IAAU,GAAV,EAAIA,CAAJ,EAAuB,IAAvB,EAAiBA,CAAjB,EAAqC,GAArC,EAA+BA,CAA/B,CAA0C,CAClCklF,CAAJ,GACItzE,CAAA9J,KAAA,CAAao9E,CAAb,CACA,CAAAA,CAAA,CAAS,EAFb,CAIU,IAAV,EAAIllF,CAAJ,EAAiB4R,CAAAnP,OAAjB,GACIiP,CAAA5J,KAAA,CAAe8J,CAAf,CACA,CAAAA,CAAA,CAAU,EAFd,CAIA,SATsC,CAJhC,CAgBdszE,CAAA,EAAUllF,CAhCV,CAF0B,CAoC1BklF,CAAJ,EACItzE,CAAA9J,KAAA,CAAao9E,CAAb,CAEAtzE,EAAAnP,OAAJ,EACIiP,CAAA5J,KAAA,CAAe8J,CAAf,CAsBAD,EAAA,CAAmB3E,CAAnB,CAAA,CApBG0E,CAqBEQ,GAAA,CAA0BlF,CAA1B,CAAL,GACIyE,CADJ,CACe,CAAA,CADf,CAHmE,CA0n4BvE,MAnn4BOA,EAmn4BP,EACQuzE,CACG,GADMl2E,CAAAm3C,SACN,CADyB,CAAA,CACzB;AAAA,CAAA,CAFX,EAIO,CAAA,CALe,CAO1B,GAAIg/B,CAAJ,GACQj3E,CADR,CACoBqE,EAAA,CAA6B4yE,CAA7B,CAAyCj4E,CAAzC,CAAqD,UAArD,CADpB,IAGYuF,CAHZ,CAGsBvE,CAAA,QAHtB,IAKgBmE,CALhB,CAK4BI,CAAA,CAAQT,CAAR,CAL5B,EAOgB,MAAIK,EAAAK,KAAA,CAAexE,CAAf,CAA0BrF,CAA1B,CAAJ,EACQq8E,CACG,GADMl2E,CAAAm3C,SACN,CADyB,CAAA,CACzB,EAAA,CAAA,CAFX,EAIO,CAAA,CAKvBvyC,QAAAxS,IAAA,CAAY,iCAAZ,CAAgD8L,CAAhD,CAA4D,KAA5D,CAAoEi4E,CAApE,CAAiF,KAAjF,CAAyFnzE,CAAzF,CAAoG,KAApG,CAA4GnJ,CAA5G,CAAqH,IAArH,CACA,OAAO,CAAA,CAzBX,CAmDAlD,OAAA,aAAA,CAAyBg+E,EACzBh+E,OAAA,UAAA,CAAyBoG;","sources":["versions/pdpjs/1.50.3/pdp11-uncompiled.js"," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:es6/symbol] "," [synthetic:es6/util/makeiterator] "," [synthetic:util/objectcreate] "," [synthetic:es6/util/setprototypeof] "," [synthetic:es6/util/inherits] "," [synthetic:util/polyfill] "," [synthetic:es6/math/trunc] "," [synthetic:es6/math/log2] "," [synthetic:es6/array/fill] "],"names":["$jscomp.defineProperty","$jscomp.global","$jscomp.initSymbol","$jscomp.Symbol","$jscomp.SYMBOL_PREFIX","$jscomp.arrayIterator","$jscomp.initSymbolIterator","$jscomp.iteratorPrototype","$jscomp.objectCreate","$jscomp.setPrototypeOf","$jscomp.polyfill","DiskAPI.GEOMETRIES","ASCII","BREAK","CTRL_A","CTRL_B","CTRL_C","CTRL_D","CTRL_E","CTRL_F","CTRL_G","CTRL_H","CTRL_I","CTRL_J","CTRL_K","CTRL_L","CTRL_M","CTRL_N","CTRL_O","CTRL_P","CTRL_Q","CTRL_R","CTRL_S","CTRL_T","CTRL_U","CTRL_V","CTRL_W","CTRL_X","CTRL_Y","CTRL_Z","ESC","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","DEL","parseInt","base","chPrefix","fCommas","indexOf","replace","ch","charAt","substr","chSuffix","slice","shift","match","isNaN","Math","pow","trunc","value","toBase","radix","cch","sPrefix","nGrouping","ceil","log","String","fromCharCode","toBin","abs","Str.toBase","toOct","fPrefix","toDec","toHex","toHexWord","Str.toHex","getBaseName","sFileName","fStripExt","sBaseName","lastIndexOf","substring","getExtension","sExtension","toLowerCase","endsWith","sSuffix","length","escapeHTML","sHTML","Str.HTMLEscapeMap","pad","sPadding","trim","prototype","Str.ASCIICodeMap","binarySearch","fnCompare","left","right","found","undefined","middle","compareResult","formatDate","date","sDate","Date","iHour","getHours","iDay","getDate","iMonth","getMonth","sFormat","Usr.asDays","getDay","Usr.asMonths","getMinutes","getSeconds","getFullYear","getResource","sURL","type","fAsync","done","callback","request","readyState","resource","fArrayBuffer","response","responseText","err","status","window","location","protocol","nErrorCode","resources","XMLHttpRequest","ActiveXObject","fXHR2","responseType","onreadystatechange","sPost","hasOwnProperty","encodeURIComponent","open","setRequestHeader","send","overrideMimeType","parseMemoryResource","sData","aBytes","aSymbols","addrLoad","addrExec","ib","Error","data","JSON","parse","eval","Array","aData","Component.alertUser","message","ab","asHexData","sHexData","split","push","getHost","host","SITEHOST","hasLocalStorage","Web.fLocalStorage","localStorage","setItem","Web.sLocalStorageTest","getItem","removeItem","getLocalStorageItem","sKey","sValue","setLocalStorageItem","isUserAgent","userAgent","navigator","getURLParm","sParm","Web.parmsURL","sParms","aParms","search","pl","exec","decodeURIComponent","onCountRepeat","fnRepeat","fnComplete","fnTimeout","doCountRepeat","setTimeout","onClickRepeat","fn","doClickRepeat","msRepeat","ms","timer","fIgnoreMouseEvents","onmousedown","e.onmousedown","msDelay","ontouchstart","e.ontouchstart","onmouseup","onmouseout","e.onmouseout","clearTimeout","ontouchend","ontouchcancel","e.ontouchcancel","onPageEvent","sFunc","fnPrev","onInit","Web.aPageEventHandlers","doPageEvent","afn","Web.fPageEventsEnabled","enablePageEvents","fEnable","Web.fPageLoaded","Web.sendPageEvent","Web.fPageShowed","sendPageEvent","sEvent","Web.doPageEvent","Web.onPageEvent","onPageLoad","onPageShow","Web.isUserAgent","onPageUnload","constructor","Component","parms","bitsMessage","id","name","comment","bindings","idComponent","idMachine","flags","ready","busy","busyCancel","initDone","powered","unloading","error","fnReady","clearError","dbg","cpu","bus","cmp","Component.components.push","component","addMachineResource","sName","Component.machines","getTime","now","alertUser","sMessage","alert","confirmUser","sPrompt","fResponse","confirm","appendControl","control","sText","scrollTop","scrollHeight","bindComponentControls","element","sAppClass","PDP11.APPCLASS","aeControls","Component.getElementsByClass","parentNode","iControl","aeChildNodes","childNodes","iNode","nodeType","sClass","getAttribute","aClasses","iClass","Component.getComponentParms","setBinding","getComponents","idRelated","aComponents","Component.components.length","Component.components","getComponentByID","getComponentByType","sType","componentPrev","getComponentParms","getElementsByClass","sObjClass","getElementsByClassName","ae","aeAll","getElementsByTagName","re","RegExp","test","className","processCommands","fSuccess","aCommands","Component.commands","aTokens","splice","sCommand","fnCallReady","Component.asyncCommands.indexOf","processNextCommand","Component.processCommands","fnCommand","Component.globalCommands","Component.getComponentByType","Component.componentCommands","exports","call","Component.prototype","?.prototype","toString","sHTMLType","sBinding","onclick","clearControl","notice","this.notice","println","print","printControl","Component.appendControl","printlnControl","Component.PRINT.PROGRESS","fPrintOnly","computer","console","setError","isError","isReady","setReady","fReady","isBusy","fCancel","setBusy","fBusy","powerUp","powerDown","fSave","fShutdown","messageEnabled","bitsEnabled","printMessage","fAddress","PROGRESS","Component.asyncCommands","scriptAlert","scriptSleep","fnCallback","sDelay","scriptSelect","aBindings","options","textContent","selectedIndex","Array.prototype.indexOf","obj","start","isArray","Array.isArray","arg","Object","Function","bind","Function.prototype.bind","fnBound","fToBind","apply","fnNOP","args","concat","arguments","TypeError","TYPEDARRAYS","ArrayBuffer","APPCLASS","APPNAME","BYTEARRAYS","MEMFAULT","WORDBUS","REASONS","RK11","PRI","VEC","DRIVES","RKDS","SC","SCESA","WPS","RRDY","DRDY","SOK","SIN","DRU","RK05","DPL","ID","SHIFT","RKER","WCE","CSE","SE","UNUSED","NXS","NXC","NXD","TE","DLT","NXM","PGE","SKE","WLO","OVR","DRE","HE","RKCS","GO","FUNC","MEX","IE","CRDY","SSE","EXB","FMT","IBA","SCP","ERR","RMASK","WMASK","RKDA","SA","HS","CA","DS","CRESET","WRITE","READ","WCHK","SEEK","RCHK","DRESET","WLOCK","RL11","PREFIX","RLCS","BAE","ERRC","DE","CLEAR","SET","RLBA","RLDA","SEEK_CMD","SEEK_DIR","SEEK_HS","SEEK_CAD","RW_SA","RW_HS","RW_CA","GS_CMD","GS_RST","RLMP","GS_ST","LOADC","SPINUP","BRUSHC","LOADH","LOCKON","UNLOADH","SPINDN","GS_BH","GS_HO","GS_CO","GS_HS","GS_DT","GS_DSE","GS_VC","GS_WGE","GS_SPE","GS_SKTO","GS_WL","GS_CHE","GS_WDE","RLBE","MASK","OPI","DCRC","HCRC","HNF","MPE","NOP","STATUS","RHDR","WDATA","RDATA","RDNC","RX11","RXCS","UNIT","DONE","TR","INIT","RXDB","RXTA","RXSA","RXES","CRC","PARITY","FILL","EMPTY","RDSTAT","WRDEL","RDERR","ERROR","HOME0","HOME1","BAD_HOME","NO_TRACK","FOUND_HOME","SELF_DIAG","NO_SECTOR","NO_SEP","NO_PREAM","NO_IOMARK","CRC_HEADER","BAD_TRACK","NO_ID","NO_DATA","CRC_DATA","BAD_PARITY","VECTORS","PDP11.RX11.RX01","RX01","PDP11.RK11.RK05","PDP11.RK11.RKDS.RK05","PDP11.RK11.RKDS.SOK","PDP11.RK11.RKDS.RRDY","PDP11.RL11.RL02K","RL02K","PDP11.RL11.RLMP.GS_ST.LOCKON","PDP11.RL11.RLMP.GS_BH","PDP11.RL11.RLMP.GS_HO","PDP11.APPNAME","PDP11.BYTEARRAYS","PDP11.TYPEDARRAYS","PDP11.WORDBUS","PDP11.MEMFAULT","MessagesPDP11.CATEGORIES","CPU","TRAP","FAULT","INT","BUS","MEMORY","MMU","ROM","DEVICE","PANEL","KEYBOARD","KEYS","PC11","PAPER","DISK","DL11","SERIAL","KW11","TIMER","SPEAKER","COMPUTER","BUFFER","WARN","HALT","PanelPDP11","parmsPanel","fBindings","nDisplayCount","cLiveRegs","regAddr","regData","regSwitches","regDisplay","ledAddr","ledData","fDeposit","fExamine","fLEDTest","nAddrSel","PanelPDP11.ADDRSEL.CONS_PHY","leds","switches","processStart","processStep","processEnable","processContinue","processDeposit","processExamine","processLoadAddr","processLEDTest","processSRSwitch","holdSwitch","toggleSwitch","resetSwitches","setSwitch","$jscomp.inherits","setDR","updateData","PanelPDP11.prototype","reset","fPowerUp","stop","parent","parentElement","panel","onPressSwitch","pressSwitch","onReleaseSwitch","releaseSwitch","event","preventDefault","initBus","addIOTable","PanelPDP11.UNIBUS_IOTABLE","addResetHandler","displayLEDs","displaySwitches","fRepower","PanelPDP11.init","restore","save","state","State","set","getAR","getDR","getSR","updateAddr","setAR","setSRSwitches","setSR","sw","displayLED","style","backgroundColor","override","displaySwitch","marginTop","displayValue","sLabel","nValue","nBase","sVal","Str.toOct","Str.parseInt","PanelPDP11.SWITCH.STEP","PanelPDP11.SWITCH.DEP","PanelPDP11.SWITCH.EXAM","running","setPC","initMMU","getSwitch","PanelPDP11.SWITCH.ENABLE","startCPU","stopCPU","stepCPU","nCyclesStep","updateTimers","addCycles","updateChecksum","exception","stack","updateDisplays","advanceAddr","setWordDirect","nDisableTraps","setWord","mapVirtualToPhysical","addr","PDP11.ACCESS.WRITE_WORD","getWordDirect","getWordSafe","index","nRegs","MODEL_1140","model","fGenRegs","UNIBUS","inc","mask","nBusMask","nLEDs","updateLED","updateLEDArray","regsGen","setAddr","setData","fActive","readCNSW","fPreWrite","writeCNSW","init","aePanels","document","iPanel","ePanel","Component.getComponentByID","Component.bindComponentControls","CONS_PHY","DEP","ENABLE","EXAM","STEP","Web.onInit","BusPDP11","parmsBus","nBusWidth","addrTotal","nBlockSize","BusPDP11.IOPAGE_LENGTH","nBlockShift","log2","nBlockLen","nBlockLimit","nBlockTotal","nBlockMask","aIOHandlers","nDisableFaults","fFault","afnReset","afnIOPage","BusPDP11.IOController.readByte","BusPDP11.IOController.writeByte","BusPDP11.IOController.readWord","BusPDP11.IOController.writeWord","aBusBlocks","aMemBlocks","addrIOPage","nIOPageRange","nMemMask","iBlockIOPageBus","iBlockIOPageMem","block","MemoryPDP11","initMemory","copyBreakpoints","iBlock","addMemory","MemoryPDP11.TYPE.CONTROLLER","setIOPageRange","nRange","BusPDP11.prototype","saveMemory","adw","restoreMemory","iDst","aDst","iComp","aComp","size","controller","addrNext","sizeLeft","addrBlock","sizeBlock","used","sizeAvail","reportError","BusPDP11.ERROR.RANGE_INUSE","blockNew","MemoryPDP11.TYPE_NAMES","BusPDP11.ERROR.RANGE_INVALID","BusPDP11_prototype$getByte","getByte","readByte","BusPDP11_prototype$getWord","getWord","off","readWord","BusPDP11_prototype$setByte","setByte","writeByte","BusPDP11_prototype$setWord","writeWord","getBlockDirect","readWordDirect","readByteDirect","setByteDirect","writeByteDirect","writeWordDirect","removeMemBreak","fWrite","removeBreakpoint","cWriteBreakpoints","resetWriteAccess","fReadOnly","writeNone","writeWordDefault","cReadBreakpoints","resetReadAccess","fDirty","fDirtyEver","iSrc","aSrc","iCompare","getMemoryLimit","MemoryPDP11.TYPE.RAM","addIOHandlers","end","fnReadByte","fnWriteByte","fnReadWord","fnWriteWord","BusPDP11.IOPAGE_MASK","table","offReg","reg","readByteIORegister","writeByteIORegister","sReg","iReg","fnReset","fault","access","toStrBase","regErr","trap","checkFault","errNum","RANGE_INUSE","RANGE_INVALID","addrMasked","READ_BYTE","READ_WORD","MSG_CATEGORY","REG_NAME","CPUERR","PDP11.ACCESS.READ_BYTE","WRITE_BYTE","WRITE_WORD","PDP11.ACCESS.WRITE_BYTE","PDP11.ACCESS.READ_WORD","DevicePDP11","parmsDevice","kw11","lks","DevicePDP11.prototype","device","addTimer","setIRQ","irq","setTimer","addIRQ","DevicePDP11.UNIBUS_IOTABLE","messageDump","onDumpMMU","asArgs","dumpRegs","regsPDR","regsPAR","regMMR3","MMR3","regsUniMap","aRegs","offset","sFilter","fBreak","toUpperCase","nBits","sDump","fIndex","nWidth","Str.toDec","$jscomp.makeIterator","readLKS","writeLKS","clearIRQ","readMMR0","getMMR0","writeMMR0","setMMR0","regMMR0","MMR0","readMMR1","getMMR1","readMMR2","getMMR2","readMMR3","writeMMR3","setMMR3","readUNIMAP","word","writeUNIMAP","readSIPDR","writeSIPDR","readSDPDR","writeSDPDR","readSIPAR","writeSIPAR","readSDPAR","writeSDPAR","readKIPDR","writeKIPDR","readKDPDR","writeKDPDR","readKIPAR","writeKIPAR","readKDPAR","writeKDPAR","readUIPDR","writeUIPDR","readUDPDR","writeUDPDR","readUIPAR","writeUIPAR","readUDPAR","writeUDPAR","readRSET0","regPSW","PSW","regsAlt","writeRSET0","readR6KERNEL","regsAltStack","writeR6KERNEL","readR7KERNEL","writeR7KERNEL","readRSET1","writeRSET1","readR6SUPER","MODE","writeR6SUPER","readR6USER","writeR6USER","readCTRL","regsControl","writeCTRL","readSIZE","writeSIZE","readSYSID","writeSYSID","readCPUERR","writeCPUERR","readMBR","regMBR","writeMBR","readPIR","regPIR","writePIR","setPIR","readSLR","regSLR","writeSLR","readPSW","getPSW","writePSW","setPSW","writeIgnored","MODEL_1170","MODEL_1145","aeDevice","iDevice","eDevice","MemoryPDP11.idBlock","MemoryPDP11.TYPE.NONE","MemoryPDP11.TYPE.ROM","readNone","readWordDefault","setAccess","buffer","dv","DataView","Uint8Array","aw","Uint16Array","Int32Array","littleEndian","MemoryPDP11.afnArrayLE","MemoryPDP11.afnArrayBE","MemoryPDP11.afnMemory","MemoryPDP11.prototype","getInt32","setInt32","MemoryPDP11.afnNone","setReadAccess","fDirect","setWriteAccess","addBreakpoint","MemoryPDP11.afnChecked","mem","ACCESS","readByteMemory","readWordMemory","idw","nShift","dw","writeByteMemory","writeWordMemory","readByteChecked","checkMemoryRead","readWordChecked","writeByteChecked","checkMemoryWrite","writeWordChecked","readByteBE","readByteLE","readWordBE","getUint16","readWordLE","writeByteBE","writeByteLE","writeWordBE","setUint16","writeWordLE","NONE","RAM","CONTROLLER","CPUPDP11","parmsCPU","nCyclesDefault","nCycles","nMultiplier","nCyclesPerSecond","nCyclesMultiplier","mhzDefault","round","mhzTarget","msPerYield","nCyclesPerYield","nCyclesNextYield","nCyclesRecalc","starting","autoStart","checksum","nChecksum","nCyclesChecksumNext","nCyclesChecksumStart","nCyclesChecksumInterval","nCyclesChecksumStop","aTimers","onRunTimeout","runCPU","nTotalCycles","nRunCycles","nBurstCycles","nStepCycles","nSnapCycles","msStartRun","msStartThisRun","msEndThisRun","nCyclesThisRun","nYieldsSinceStatusUpdate","mhz","CPUPDP11.prototype","CPUPDP11.BUTTONS.length","CPUPDP11.BUTTONS","sAutoStart","getMachineParm","resetCycles","resetChecksum","fInit","updateStatus","fAutoStart","setFocus","sInitCommands","sCmds","doCommands","getChecksum","fDisplay","getCycles","displayChecksum","control.onclick","iComponent","Component.getComponents","setSpeed","getSpeedTarget","toFixed","fEndStep","calcCycles","fRecalc","vMultiplier","CPUPDP11.YIELDS_PER_SECOND","floor","fUpdateFocus","sSpeed","controlSpeed","Component.getTime","callBack","iTimer","fReset","getMSCycles","endBurst","getBurstCycles","saveTimers","aTimerCycles","calcStartTime","msDelta","CPUPDP11.YIELDS_PER_STATUS","nUpdate","calcRemainingTime","msYield","msRemainsThisRun","msElapsed","controlRun","CPUPDP11_prototype$stepCPU","fComplete","fStopped","complete","CPUStatePDP11","addrReset","pswTrap","pswMode","flagC","flagV","flagZ","flagN","addrLast","opLast","addrInvalid","mmuEnable","mmuLastMode","mmuLastPage","mmuMask","regMMR1","regMMR2","opFlags","mapMMR3","offRegSrc","maskRegSrcByte","MODEL_1120","opDecode","PDP11.op1120.bind","checkStackLimit","checkStackLimit1120","pswUsed","pswRegSet","PDP11.op1140.bind","checkStackLimit1140","trapVector","trapReason","irqNext","aIRQs","getByteDirect","getByteChecked","getWordChecked","setByteChecked","setWordChecked","addrDSpace","nReadBreaks","nWriteBreaks","getAddr","getVirtualAddrByMode","readWordFromVirtual","writeWordToVirtual","dstMode","dstReg","dstAddr","srcMode","srcReg","CPUStatePDP11.prototype","vectorFloating","vector","initCPU","resetIRQs","setMemoryAccess","BusPDP11.IOPAGE_22BIT","BusPDP11.IOPAGE_18BIT","readWordFromVirtualChecked","writeWordToVirtualChecked","BusPDP11.IOPAGE_16BIT","getPhysicalAddrByMode","readWordFromPhysicalChecked","readWordFromPhysical","writeWordToPhysicalChecked","writeWordToPhysical","newMMR0","result","newMMR3","BusPDP11.MASK_22BIT","BusPDP11.MASK_18BIT","setReset","fStart","bUnit","resetCPU","isRunning","getMMR3","getSpeed","saveIRQs","aIRQVectors","restoreIRQs","next","restoreTimers","getCF","getVF","getZF","getNF","advancePC","pc","REG","branch","opCode","condition","getPC","priority","PDP11.VECTORS","removeIRQ","irqPrev","OPFLAG","insertIRQ","checkTraps","REASON","newPSW","tmp","oldMode","newPIR","PIR","bits","updateNZVFlags","updateAllFlags","overflow","updateShiftFlags","updateSubFlags","src","dst","flag","reason","newPC","pushWord","trapReturn","popWord","mapUnibus","idx","getAddrInfo","fPhysical","addrPhysical","mode","page","paf","BusPDP11.UNIBUS_22BIT","addrVirtual","pdr","PDR","getAddrByMode","step","readWordFromPrevSpace","OPREG","OPMODE","writeWordToPrevSpace","readSrcByte","SRCMODE","readSrcWord","readDstAddr","readDstByte","readDstWord","updateDstByte","fnOp","PDP11.ACCESS.UPDATE_BYTE","updateDstWord","PDP11.ACCESS.UPDATE_WORD","writeDstByte","writeFlags","fnFlags","writeDstWord","nMinCycles","nDebugCheck","checksEnabled","nDebugState","checkInstruction","fInterrupt","checkIRQs","dispatchInterrupt","getOpcode","aeCPUs","iCPU","eCPU","PDP11.fnADD","updateAddFlags","PDP11.fnADDB","PDP11.fnASL","PDP11.fnASLB","PDP11.fnASR","PDP11.fnASRB","PDP11.fnBIC","PDP11.fnBICB","PDP11.fnBIS","PDP11.fnBISB","PDP11.fnCOM","PDP11.fnCOMB","PDP11.fnDEC","updateDecFlags","PDP11.fnDECB","PDP11.fnINC","updateIncFlags","PDP11.fnINCB","PDP11.fnNEG","PDP11.fnNEGB","PDP11.fnROL","PDP11.fnROLB","PDP11.fnROR","PDP11.fnRORB","PDP11.fnSUB","PDP11.fnSUBB","PDP11.fnSWAB","updateNZVCFlags","PDP11.fnXOR","PDP11.opADD","PDP11.opASH","PDP11.opASHC","PDP11.opBCC","PDP11.opBCS","PDP11.opBIC","PDP11.opBICB","PDP11.opBIS","PDP11.opBISB","PDP11.opBIT","PDP11.opBITB","PDP11.opBEQ","PDP11.opBGE","PDP11.opBGT","PDP11.opBHI","PDP11.opBLE","PDP11.opBLOS","PDP11.opBLT","PDP11.opBMI","PDP11.opBNE","PDP11.opBPL","PDP11.opBPT","PDP11.opBR","PDP11.opBVC","PDP11.opBVS","PDP11.opCLx","clearCF","clearVF","clearZF","clearNF","PDP11.opCMP","PDP11.opCMPB","PDP11.opDIV","PDP11.opEMT","PDP11.opHALT","stopInstruction","PDP11.opIOT","PDP11.JMP_CYCLES","PDP11.opJMP","PDP11.JSR_CYCLES","PDP11.opJSR","PDP11.MOV_CYCLES","PDP11.opMOV","PDP11.opMOVB","PDP11.MTP_CYCLES","PDP11.opMUL","updateMulFlags","PDP11.opNOP","PDP11.opRESET","PDP11.opRTS","PDP11.opUndefined.call","PDP11.opRTT","PDP11.opSEx","setCF","setVF","setZF","setNF","PDP11.opSOB","DSTMODE","PDP11.opSUB","PDP11.opSWAB","PDP11.opTRAP","PDP11.opWAIT","PDP11.opXOR","PDP11.opUndefined","PDP11.op1120","PDP11.aOpXnnn_1120","PDP11.op0AXn_1120","PDP11.aOp0AXn_1120","PDP11.op0BXn_1120","PDP11.aOp0BXn_1120","PDP11.op0CXn_1120","PDP11.aOp0CXn_1120","PDP11.op00AX_1120","PDP11.aOp00AX_1120","PDP11.op00BX_1120","PDP11.aOp00BX_1120","PDP11.op8AXn_1120","PDP11.aOp8AXn_1120","PDP11.op8BXn_1120","PDP11.aOp8BXn_1120","PDP11.op8CXn_1120","PDP11.aOp8CXn_1120","PDP11.op0Xnn_1120","PDP11.aOp0Xnn_1120","PDP11.op8Xnn_1120","PDP11.aOp8Xnn_1120","PDP11.op00Xn_1120","PDP11.aOp00Xn_1120","PDP11.opCLR","PDP11.opCOM","PDP11.opINC","PDP11.opDEC","PDP11.opNEG","PDP11.opADC","PDP11.opSBC","PDP11.opTST","PDP11.opROR","PDP11.opROL","PDP11.opASR","PDP11.opASL","PDP11.op000X_1120","PDP11.aOp000X_1120","PDP11.opCLC","PDP11.opCLV","PDP11.opCLZ","PDP11.opCLN","PDP11.opSEC","PDP11.opSEV","PDP11.opSEZ","PDP11.opSEN","PDP11.opCLRB","PDP11.opCOMB","PDP11.opINCB","PDP11.opDECB","PDP11.opNEGB","PDP11.opADCB","PDP11.opSBCB","PDP11.opTSTB","PDP11.opRORB","PDP11.opROLB","PDP11.opASRB","PDP11.opASLB","PDP11.op1140","PDP11.aOpXnnn_1140","PDP11.op0Xnn_1140","PDP11.aOp0Xnn_1140","PDP11.op7Xnn_1140","PDP11.aOp7Xnn_1140","PDP11.op8Xnn_1140","PDP11.aOp8Xnn_1140","PDP11.op00Xn_1140","PDP11.aOp00Xn_1140","PDP11.op0DXn_1140","PDP11.aOp0DXn_1140","PDP11.opMARK","setSP","PDP11.opMFPI","PDP11.opMTPI","PDP11.opSXT","PDP11.op000X_1140","PDP11.aOp000X_1140","PDP11.opSPL","PDP11.opRTI","PDP11.opMFPT","PDP11.op8DXn_1140","PDP11.aOp8DXn_1140","PDP11.opMTPS","PDP11.opMFPD","PDP11.opMTPD","PDP11.opMFPS","ROMPDP11","parmsROM","abInit","addrROM","sizeROM","fRetainROM","addrAlias","sFilePath","Str.getBaseName","sFileURL","sFileExt","Str.getExtension","FORMAT","Web.getHost","rom","Web.getResource","doneLoad","sResponse","Component.addMachineResource","Web.parseMemoryResource","initROM","ROMPDP11.prototype","addSymbols","IOTable","readROMByte","writeROMByte","addROM","aliases","cloneROM","aBlocks","aeROM","iROM","eROM","RAMPDP11","parmsRAM","addrRAM","sizeRAM","fAllocated","ram","initRAM","loadImage","zero","pattern","len","addrInit","fStop","fLoaded","offBlock","Str.toHexWord","offData","cbData","aeRAM","iRAM","eRAM","KeyboardPDP11","parmsKbd","aeKbd","iKbd","eKbd","kbd","SerialPortPDP11","parmsSerial","iAdapter","nBaudReceive","nBaudTransmit","fUpperCase","controlIOBuffer","consoleOutput","tabSize","charBOL","iLogicalCol","fNullModem","irqReceiver","irqTransmitter","timerReceiveInterrupt","timerTransmitInterrupt","regRBUF","regRCSR","regXCSR","abReceive","SerialPortPDP11.sIOBuffer","target","eBinding","connection","sendData","initConnection","receiveData","receiveStatus","setConnection","SerialPortPDP11.prototype","serial","onkeydown","control.onkeydown","bASCII","keyCode","KEYCODE","altKey","Keys.ASCII.CTRL_H","Keys.ASCII.DEL","ctrlKey","Keys.ASCII.A","Keys.ASCII.Z","Keys.ASCII.CTRL_A","onkeypress","control.onkeypress","metaKey","which","Keys.ASCII.CTRL_M","Keys.ASCII.CTRL_J","onpaste","control.onpaste","stopPropagation","clipboardData","getData","removeAttribute","readyReceiver","nBytesPerSecond","readyTransmitter","SerialPortPDP11.UNIBUS_IOTABLE","sConnection","asParts","sSourceID","Str.trim","sTargetID","fnConnect","initState","saveRegisters","bASCIIPrev","charCodeAt","LF","CR","pins","oldRCSR","CTS","CD","readRCSR","writeRCSR","delta","RTS","DTR","readRBUF","writeRBUF","readXCSR","writeXCSR","readXBUF","writeXBUF","transmitByte","nChars","Str.pad","aeSerial","iSerial","eSerial","configMount","parseConfig","cAutoMount","regPRB","regPRS","regPPS","iTapeData","regPPB","aTapeData","sTapeSource","PC11.SOURCE.NONE","nTapeTarget","PC11.TARGET.NONE","sTapeName","sTapePath","nLastPercent","fLocalTapes","irqReader","timerReader","config","PC11.prototype","pc11","onchange","control.onchange","controlDesc","controlOption","dataValue","sHRef","innerHTML","PC11.TARGET.MEMORY","PC11.TARGET.READER","controlTapes","loadSelectedTape","text","removeChild","addEventListener","fieldset","children","submit","disabled","files","onsubmit","control.onsubmit","file","currentTarget","PC11.BINDING.READ_PROGRESS","getMachineComponent","sDevice","readyReader","displayProgress","PC11.UNIBUS_IOTABLE","addTape","PC11.SOURCE.LOCAL","PC11.SOURCE.REMOTE","autoMount","sPath","loadTape","displayTape","prompt","unloadTape","fAutoMount","nResult","load","parseTape","sTapeURL","reader","FileReader","onload","reader.onload","byteLength","readAsArrayBuffer","ENDPOINT","sTapeExt","encodeURI","fTop","createElement","insertBefore","appendChild","sTargetPath","nPercent","controlBar","PC11.CSSCLASS.PROGRESS_BAR","width","fLoading","readPRS","writePRS","readPRB","writePRB","readPPS","writePPS","readPPB","writePPB","LOCAL","REMOTE","READER","READ_PROGRESS","PROGRESS_BAR","DiskPDP11","drive","DiskPDP11.nDisks","sDiskName","sDiskPath","sDiskFile","fRemovable","nCylinders","nHeads","nSectors","cbSector","aDiskData","dwChecksum","fWriteProtected","create","fnNotify","controllerNotify","DiskPDP11.prototype","aCylinders","iCylinder","aHeads","iHead","aSectors","iSector","initSector","sDiskURL","disk","cbDiskData","diskFormat","cdw","cylinder","head","sector","dwPattern","cModify","sDiskExt","sDiskParm","QUERY","sSizeParm","Str.endsWith","sDiskData","iEOL","sConfig","cb","fill","iModify","seek","track","bFormatting","bSectorEnd","nBytes","bSector","read","ibSector","write","getSector","pba","nSectorsPerCylinder","nSectorsRemaining","getSectorData","deltas","mods","iModifyLimit","nChanges","sReason","aDiskInfo","mod","DriveController","configDC","configDrive","configIO","nDrives","aDrives","fLocalDisks","aDiskHistory","bootSelectedDisk","loadSelectedDisk","selectDrive","waitDrives","DriveController.prototype","dc","updateSelectedDisk","iDrive","displayDisk","controlDrives","btoa","link","sURI","download","href","body","click","sAlert","sDrive","addDisk","DriveController.SOURCE.NONE","DriveController.SOURCE.LOCAL","DriveController.SOURCE.REMOTE","fReload","unloadAllDrives","unloadDrive","firstChild","getDriveName","initController","initDrives","saveController","saveHistory","saveDrives","aHistory","initHistory","aConfigDisks","initDrive","configDisk","fLocal","iCylinderBoot","iHeadBoot","iSectorBoot","cbSectorBoot","bHead","bCylinder","doneLoadDrive","loadDrive","addDiskHistory","updateDiskHistory","fRemount","controlDisks","stringify","readData","notifyLoad","fUpdateDrive","iDriveSelected","writeData","PDP11.RK11","RK11.UNIBUS_IOTABLE","regRKDS","regRKER","regRKCS","regRKWC","regRKBA","regRKDA","regRKDB","RK11.prototype","RK11.RKDS.RK05","RK11.RKDS.SOK","RK11.RKDS.RRDY","RK11.RKCS.CRDY","nWords","fCheck","nError","RK11.RKER.NXD","RK11.RKER.NXC","RK11.RKER.SKE","b0","b1","RK11.RKER.NXS","RK11.RKER.NXM","RK11.RKER.WCE","RK11_prototype$doneReadWrite","doneReadWrite","RK11.RKCS.MEX","RK11.RKCS.SHIFT.MEX","RK11.RKDA.SA","updateErrors","RK11.RKCS.ERR","RK11.RKER.DRE","RK11.RKER.HE","RK11.RKCS.HE","readRKDS","writeRKDS","readRKER","writeRKER","readRKCS","RK11.RKCS.RMASK","writeRKCS","RK11.RKCS.WMASK","RK11.RKCS.GO","func","processCommand","RK11.RKDA.DS","RK11.RKDA.SHIFT.DS","RK11.RKCS.SCP","RK11.RKER.SE","RK11.RKCS.FUNC","RK11.FUNC.CRESET","RK11.FUNC.RCHK","RK11.FUNC.READ","fnReadWrite","RK11.FUNC.WCHK","RK11.FUNC.WRITE","RK11.RKDA.CA","RK11.RKDA.SHIFT.CA","RK11.RKDA.HS","RK11.RKDA.SHIFT.HS","RK11.RKCS.IBA","RK11.FUNC.SEEK","RK11.FUNC.DRESET","RK11.RKDS.DRDY","RK11.RKDS.SHIFT.ID","RK11.RKDS.SC","RK11.RKCS.IE","readRKWC","writeRKWC","readRKBA","writeRKBA","readRKDA","writeRKDA","readRKDB","writeRKDB","RK11.RKDS","PDP11.RK11.RKDS","RK11.RKER","PDP11.RK11.RKER","RK11.RKCS","PDP11.RK11.RKCS","RK11.RKDA","PDP11.RK11.RKDA","RK11.FUNC","PDP11.RK11.FUNC","PDP11.RL11","RL11.UNIBUS_IOTABLE","regRLCS","regRLBA","regRLDA","tmpRLDA","regRLMP","regRLBE","RL11.prototype","RL11.RLCS.DRDY","RL11.RLCS.CRDY","RL11.ERRC.HNF","RL11.ERRC.NXM","RL11_prototype$doneReadWrite","RL11.RLCS.BAE","RL11.RLCS.SHIFT.BAE","RL11.RLBE.MASK","RL11.RLDA.SHIFT.RW_CA","RL11.RLDA.RW_HS","RL11.RLDA.RW_SA","RL11.RLCS.ERR","readRLCS","RL11.RLCS.RMASK","writeRLCS","RL11.RLCS.WMASK","RL11.RLCS.DS","RL11.RLCS.SHIFT.DS","RL11.RLCS.FUNC","RL11.FUNC.STATUS","RL11.RLMP.GS_BH","RL11.RLMP.GS_DT","RL11.FUNC.SEEK","RL11.RLDA.GS_CMD","RL11.RLDA.SEEK_CMD","darCA","RL11.RLDA.RW_CA","darHS","RL11.RLDA.SEEK_HS","RL11.RLDA.SEEK_DIR","RL11.FUNC.RHDR","RL11.FUNC.RDATA","RL11.FUNC.WDATA","RL11.RLCS.IE","readRLBA","writeRLBA","RL11.RLBA.WMASK","readRLDA","writeRLDA","readRLMP","writeRLMP","readRLBE","writeRLBE","RL11.RLCS","PDP11.RL11.RLCS","RL11.RLBA","PDP11.RL11.RLBA","RL11.RLDA","PDP11.RL11.RLDA","RL11.RLMP","PDP11.RL11.RLMP","RL11.RLBE","PDP11.RL11.RLBE","RL11.ERRC","PDP11.RL11.ERRC","RL11.FUNC","PDP11.RL11.FUNC","PDP11.RX11","RX11.UNIBUS_IOTABLE","regRXTA","regRXSA","regRXES","regError","regRXCS","regRXDB","funCode","RX11.FUNC.UNUSED","iBuffer","abBuffer","RX11.prototype","RX11.FUNC.READ","readSector","doneCommand","RX11.RXCS.ERR","RX11.RXCS.DONE","RX11.RXCS.IE","RX11.ERROR.HOME1","RX11.ERROR.HOME0","RX11.ERROR.NO_TRACK","RX11.ERROR.NO_SECTOR","RX11.ERROR.NO_DATA","RX11.RXCS.UNIT","RX11.RXTA.MASK","nSector","RX11.RXSA.MASK","RX11.RXES.CRC","RX11.RXES.PARITY","RX11.RXES.DEL","RX11.RXES.DRDY","deleted","readRXCS","RX11.RXCS.RMASK","RX11.FUNC.FILL","RX11.FUNC.EMPTY","RX11.RXCS.TR","RX11.FUNC.WRITE","RX11.FUNC.WRDEL","writeRXCS","RX11.RXCS.WMASK","RX11.RXCS.INIT","RX11.RXCS.GO","RX11.RXCS.FUNC","RX11.FUNCS","RX11.FUNC.RDSTAT","RX11.FUNC.RDERR","readRXDB","writeRXDB","writeSector","fDeleted","RX11.RXCS","PDP11.RX11.RXCS","RX11.RXTA","PDP11.RX11.RXTA","RX11.RXSA","PDP11.RX11.RXSA","RX11.RXES","PDP11.RX11.RXES","RX11.FUNC","PDP11.RX11.FUNC","RX11.ERROR","PDP11.RX11.ERROR","Debugger","parmsDbg","achGroup","achAddress","fAssemble","iPrevCmd","aPrevCmds","aVariables","getRegIndex","getRegValue","parseCommand","sCmd","chSep","iPrev","chQuote","truncate","fUnsigned","vNew","limit","evalOps","aVals","aOps","cOps","chOp","pop","val2","val1","valNew","parseArray","asValues","iValue","iLimit","aUndefined","fError","nUnary","nBasePrev","sOp","parseValue","cOpen","iStart","parseUnary","aBinOp","Debugger.aDECOpPrecedence","Debugger.aBinOpPrecedence","parseASCII","sExp","chDelim","cchMax","parseExpression","fQuiet","fPrint","join","regExp","printValue","bit","getVariable","sVar","sUndefined","getVariableFixup","valueUndefined","fDefined","printVariable","cVariables","aVars","keys","sort","Str.toBin","DebuggerPDP11","dbgAddrNextCode","newAddr","dbgAddrNextData","dbgAddrAssemble","aSymbolTable","aBreakExec","aBreakRead","aBreakWrite","clearBreakpoints","iInstructionHistory","nBreakInstructions","aInstructionHistory","nextHistory","historyInit","afnDumpers","sMessagePrev","aMessageBuffer","messageInit","opTable","DebuggerPDP11.OPTABLE","aOpReserved","nStep","sCmdDumpPrev","sCmdTracePrev","nCyclesStart","msStart","cInstructions","nSuppressBreaks","controlDebug","global","dbgAddr","ADDR_INVALID","fTemporary","DebuggerPDP11.prototype","packAddr","unpackAddr","aAddr","aCmds","sMessages","DebuggerPDP11.OP1140","DebuggerPDP11.OP1145","onDumpBus","sAddr","parseAddr","typePrev","cPrev","setSelectionRange","Web.onClickRepeat","onClickDebugEnter","onClickStep","fRepeat","fCompleted","scrollX","scrollY","focus","scrollTo","DebuggerPDP11_prototype$getByte","incAddr","DebuggerPDP11_prototype$getWord","DebuggerPDP11_prototype$setByte","DebuggerPDP11_prototype$setWord","fCode","dbgAddrNext","chOpen","parseReference","chClose","chEscape","chInnerEscape","reSubExp","sReplace","findSymbolAddr","sSymbol","offSymbol","sUpperCase","iTable","symbol","symbolTable","parseAddrOptions","sOptions","toStrAddr","toStrOffset","sEnable","aEnable","bitMessage","fnDumper","DebuggerPDP11.REGS","getRegName","DebuggerPDP11.REG_AR","DebuggerPDP11.REGNAMES","DebuggerPDP11.REG_PS","DebuggerPDP11.REG_PI","DebuggerPDP11.REG_ER","DebuggerPDP11.REG_SL","DebuggerPDP11.REG_M0","DebuggerPDP11.REG_M1","DebuggerPDP11.REG_M2","DebuggerPDP11.REG_M3","DebuggerPDP11.REG_DR","DebuggerPDP11.REG_SR","fRunning","DebuggerPDP11.HISTORY_LIMIT","checkCPU","fRegs","fUpdateDisplays","DebuggerPDP11.PROMPT","trapStatus","PDP11.REASONS","doRegisters","doUnassemble","clearTempBreakpoint","sStopped","msTotal","nState","OPCODE","checkBreakpoint","nb","nBreaks","aBreak","findBreakpoint","printBreakpoint","fFound","dbgAddrBreak","listBreakpoints","sAction","addrBreak","doCommand","getInstruction","sComment","nSequence","dbgAddrOp","opDesc","opMasks","DebuggerPDP11.OPNONE","opNum","sTarget","sOperands","sOpName","DebuggerPDP11.OPNAMES","cOperands","iOperand","opType","getOperand","sOperand","opTypeOther","DebuggerPDP11.OP_OTHER","DebuggerPDP11.OP_BRANCH","DebuggerPDP11.OP_DSTOFF","DebuggerPDP11.OP_DSTNUM3","DebuggerPDP11.OP_DSTNUM6","DebuggerPDP11.OP_DSTNUM8","opMode","DebuggerPDP11.OP_SRC","DebuggerPDP11.OP_DST","DebuggerPDP11.OP_DSTREG","DebuggerPDP11.OP_DSTMODE","getTarget","wIndex","sOpCodes","sLine","getFlagOutput","sFlag","getRegOutput","getRegDump","fMisc","getMiscDump","comparePairs","p1","p2","sModule","aOffsets","sAnnotation","Usr.binarySearch","findSymbol","fNearest","aSymbol","addrSymbol","returnSymbol","iOffset","doVar","delVariable","setVariable","doList","nDelta","sDelta","fInstruction","sRegMatch","doPrint","doTrace","sCount","nCount","Web.onCountRepeat","onCountStep","onCountStepComplete","sAddrEnd","nLines","dbgAddrEnd","nPrinted","sInstruction","s0","ch0","unshift","doAssemble","aOpBytes","doBreak","cBreaks","doClear","controlPrint","sLen","sBytes","sDumpers","doDump","sState","powerOff","sSymbolOrig","sMore","cHistory","iHistory","nPrev","sPrev","sLines","aFilters","dbgAddrNew","cOverrides","DebuggerPDP11.MODES","fJSON","nBytesPerLine","sChars","fnGet","doEdit","fnSet","doRun","doHalt","doIf","doStackTrace","cFrames","dbgAddrCall","dbgAddrStack","nFrames","sCall","cTests","addrOrig","sCallPrev","fCriteria","sCategory","doMessages","sCategories","fEnabled","sOption","doStep","doOptions","DebuggerPDP11.COMMANDS","doHelp","MOV","CMP","BIT","BIC","BIS","ADD","MOVB","CMPB","BITB","BICB","BISB","SUB","JSR","DebuggerPDP11.OP_SRCREG","MUL","DIV","ASH","ASHC","XOR","SOB","BR","BNE","BEQ","BGE","BLT","BGT","BLE","BPL","BMI","BHI","BLOS","BVC","BVS","BCC","BCS","EMT","JMP","SWAB","CLR","COM","INC","DEC","NEG","ADC","SBC","TST","ROR","ROL","ASR","ASL","MARK","MFPI","MTPI","SXT","CLRB","COMB","INCB","DECB","NEGB","ADCB","SBCB","TSTB","RORB","ROLB","ASRB","ASLB","MTPS","MFPD","MTPD","MFPS","SPL","WAIT","RTI","BPT","IOT","RESET","RTT","MFPT","CLC","CLV","CLCV","CLZ","CLCZ","CLVZ","CLCVZ","CLN","CLCN","CLVN","CLCVN","CLZN","CLCZN","CLVZN","CCC","SEC","SEV","SECV","SEZ","SECZ","SEVZ","SECVZ","SEN","SECN","SEVN","SECVN","SEZN","SECZN","SEVZN","SCC","aeDbg","iDbg","eDbg","ComputerPDP11","parmsComputer","parmsMachine","fSuspended","setMachineParms","fAutoPower","BOOLEAN","nPowerChange","sStateData","sResumePath","sStatePath","fServerState","fStateData","stateComputer","stateFailSafe","fInitialized","fRestoreError","url","random","sUserID","queryUserID","LICENSE","sResume","resume","fAllowResume","ComputerPDP11.RESUME_NONE","APPVERSION","getServerStatePath","doneStateLoad","sResource","wait","powerOn","parmsComponent","sParmLC","Web.getURLParm","defaultValue","NUMBER","ComputerPDP11.prototype","onComponentReady","validateState","stateValidate","ComputerPDP11.STATE_VALIDATE","sTimestampValidate","get","ComputerPDP11.STATE_TIMESTAMP","sTimestampComputer","clear","ComputerPDP11.RESUME_AUTO","fRestore","ComputerPDP11.RESUME_REPOWER","ComputerPDP11.STATE_FAILSAFE","powerReport","ComputerPDP11.RESUME_PROMPT","unload","Usr.formatDate","store","fValidate","Component.confirmUser","sCode","RES","CODE","FAIL","Web.setLocalStorageItem","ComputerPDP11.STATE_USERID","resetUserID","powerRestore","donePowerOn","reload","asComments","controlPower","getUserID","dataPost","sUser","TYPE","sReport","sReportURL","sTimestamp","ComputerPDP11.STATE_VERSION","ComputerPDP11.STATE_HOSTURL","ComputerPDP11.STATE_BROWSER","fClearAll","fClear","saveServerState","ComputerPDP11.RESUME_DELETE","nDisplayLimit","getSpeedCurrent","fWaiting","B22","B18","B16","fPrompt","Web.getLocalStorageItem","verifyUserID","code","State.key","REQ","storeServerState","sError","fScroll","aeMachines","iMachine","eMachine","aeComputers","iComputer","eComputer","show","exit","sVersion","json","fParsed","key","State.prototype","Web.hasLocalStorage","fAll","cAsyncMachines","loadXML","sXMLFile","fResolve","display","doneLoadXML","sURLName","sXML","parseXML","buildXML","pathname","xmlDoc","async","parseFromString","DOMParser","resolveXML","matchRef","reRef","sRefFile","doneReadXML","sXMLRef","sRefAttrs","aXMLRefTag","sXMLNewTag","matchAttr","reAttr","embedMachine","sXSLFile","displayMessage","eWarning","aeWarning","Str.escapeHTML","displayError","Web.enablePageEvents","getElementById","css","styleSheet","cssText","createTextNode","sAppFolder","processXML","xml","transformXML","sXSL","xsl","sFragment","outerHTML","implementation","createDocument","xsltProcessor","XSLTProcessor","eFragment","replaceChild","embedPDP10","embedPDP11","commandMachine","fSingle","sComponent","sToken"],"sourcesContent":["\"use strict\";\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/defines.js (C) Jeff Parsons 2012-2018\n */\n\n/**\n * @define {string}\n */\nvar APPVERSION = \"1.x.x\";       // this @define is overridden by the Closure Compiler with the version in package.json\n\nvar XMLVERSION = null;          // this is set in non-COMPILED builds by embedMachine() if a version number was found in the machine XML\n\nvar COPYRIGHT = \"Copyright © 2012-2018 Jeff Parsons <Jeff@pcjs.org>\";\n\nvar LICENSE = \"License: GPL version 3 or later <http://gnu.org/licenses/gpl.html>\";\n\nvar CSSCLASS = \"pcjs\";\n\n/**\n * @define {string}\n */\nvar SITEHOST = \"localhost:8088\";// this @define is overridden by the Closure Compiler with \"www.pcjs.org\"\n\n/**\n * @define {boolean}\n */\nvar COMPILED = false;           // this @define is overridden by the Closure Compiler (to true)\n\n/**\n * @define {boolean}\n */\nvar DEBUG = true;               // this @define is overridden by the Closure Compiler (to false) to remove DEBUG-only code\n\n/**\n * @define {boolean}\n */\nvar MAXDEBUG = false;           // this @define is overridden by the Closure Compiler (to false) to remove MAXDEBUG-only code\n\n/**\n * @define {boolean}\n */\nvar PRIVATE = false;            // this @define is overridden by the Closure Compiler (to false) to enable PRIVATE code\n\n/*\n * RS-232 DB-25 Pin Definitions, mapped to bits 1-25 in a 32-bit status value.\n *\n * SerialPorts in PCjs machines are considered DTE (Data Terminal Equipment), which means they should be \"virtually\"\n * connected to each other via a null-modem cable, which assumes the following cross-wiring:\n *\n *     G       1  <->  1        G       (Ground)\n *     TD      2  <->  3        RD      (Received Data)\n *     RD      3  <->  2        TD      (Transmitted Data)\n *     RTS     4  <->  5        CTS     (Clear To Send)\n *     CTS     5  <->  4        RTS     (Request To Send)\n *     DSR   6+8  <->  20       DTR     (Data Terminal Ready)\n *     SG      7  <->  7        SG      (Signal Ground)\n *     DTR    20  <->  6+8      DSR     (Data Set Ready + Carrier Detect)\n *     RI     22  <->  22       RI      (Ring Indicator)\n *\n * TODO: Move these definitions to a more appropriate shared file at some point.\n */\nvar RS232 = {\n    RTS: {\n        PIN:  4,\n        MASK: 0x00000010\n    },\n    CTS: {\n        PIN:  5,\n        MASK: 0x00000020\n    },\n    DSR: {\n        PIN:  6,\n        MASK: 0x00000040\n    },\n    CD: {\n        PIN:  8,\n        MASK: 0x00000100\n    },\n    DTR: {\n        PIN:  20,\n        MASK: 0x00100000\n    },\n    RI: {\n        PIN:  22,\n        MASK: 0x00400000\n    }\n};\n\n/*\n * NODE should be true if we're running under NodeJS (eg, command-line), false if not (eg, web browser)\n */\nvar NODE = false;\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/diskapi.js (C) Jeff Parsons 2012-2018\n */\n\n/*\n * Our \"DiskIO API\" looks like:\n *\n *      http://www.pcjs.org/api/v1/disk?action=open&volume=*10mb.img&mode=demandrw&chs=c:h:s&machine=xxx&user=yyy\n */\nvar DiskAPI = {\n    ENDPOINT:       \"/api/v1/disk\",\n    QUERY: {\n        ACTION:     \"action\",   // value is one of DiskAPI.ACTION.*\n        VOLUME:     \"volume\",   // value is path of a disk image\n        MODE:       \"mode\",     // value is one of DiskAPI.MODE.*\n        CHS:        \"chs\",      // value is cylinders:heads:sectors:bytes\n        ADDR:       \"addr\",     // value is cylinder:head:sector:count\n        MACHINE:    \"machine\",  // value is machine token\n        USER:       \"user\",     // value is user ID\n        DATA:       \"data\"      // value is data to be written\n    },\n    ACTION: {\n        OPEN:       \"open\",\n        READ:       \"read\",\n        WRITE:      \"write\",\n        CLOSE:      \"close\"\n    },\n    MODE: {\n        LOCAL:      \"local\",    // this mode implies no API (at best, localStorage backing only)\n        PRELOAD:    \"preload\",  // this mode implies use of the DumpAPI\n        DEMANDRW:   \"demandrw\",\n        DEMANDRO:   \"demandro\"\n    },\n    FAIL: {\n        BADACTION:  \"invalid action\",\n        BADUSER:    \"invalid user\",\n        BADVOL:     \"invalid volume\",\n        OPENVOL:    \"unable to open volume\",\n        CREATEVOL:  \"unable to create volume\",\n        WRITEVOL:   \"unable to write volume\",\n        REVOKED:    \"access revoked\"\n    }\n};\n\n/*\n * TODO: Eventually, our tools will need to support looking up disk formats by \"model\" rather than by raw disk size,\n * because obviously multiple disk geometries can yield the same raw disk size.  For each conflict that arises, I'll\n * probably create a fake (approximate) disk size entry above, and then create a mapping to that approximate size below.\n */\nDiskAPI.MODELS = {\n    \"RL01\": 5242880,\n    \"RL02\": 10485760\n};\n\nDiskAPI.MBR = {\n    PARTITIONS: {\n        OFFSET:     0x1BE,\n        ENTRY: {\n            STATUS:         0x00,   // 0x80 if active\n            CHS_FIRST:      0x01,   // 3-byte CHS specifier\n            TYPE:           0x04,   // see TYPE.*\n            CHS_LAST:       0x05,   // 3-byte CHS specifier\n            LBA_FIRST:      0x08,\n            LBA_TOTAL:      0x0C,\n            LENGTH:         0x10\n        },\n        STATUS: {\n            ACTIVE:         0x80\n        },\n        TYPE: {\n            EMPTY:          0x00,\n            FAT12_PRIMARY:  0x01,   // DOS 2.0 and up (12-bit FAT)\n            FAT16_PRIMARY:  0x04    // DOS 3.0 and up (16-bit FAT)\n        }\n    },\n    SIG_OFFSET:     0x1FE,\n    SIGNATURE:      0xAA55          // to be clear, the low byte (at offset 0x1FE) is 0x55 and the high byte (at offset 0x1FF) is 0xAA\n};\n\n/*\n * Boot sector offsets (and assorted constants) in DOS-compatible boot sectors (DOS 2.0 and up)\n *\n * WARNING: I've heard apocryphal stories about SIGNATURE being improperly reversed on some systems\n * (ie, 0x55AA instead 0xAA55) -- perhaps by a dyslexic programmer -- so be careful out there.\n */\nDiskAPI.BOOT = {\n    JMP_OPCODE:     0x000,      // 1 byte for a JMP opcode, followed by a 1 or 2-byte offset\n    OEM_STRING:     0x003,      // 8 bytes\n    SIG_OFFSET:     0x1FE,\n    SIGNATURE:      0xAA55      // to be clear, the low byte (at offset 0x1FE) is 0x55 and the high byte (at offset 0x1FF) is 0xAA\n};\n\n/*\n * BIOS Parameter Block (BPB) offsets in DOS-compatible boot sectors (DOS 2.x and up)\n *\n * NOTE: DOS 2.x OEM documentation says that the words starting at offset 0x018 (TRACK_SECS, TOTAL_HEADS, and HIDDEN_SECS)\n * are optional, but even the DOS 2.0 FORMAT utility initializes all three of those words.  There may be some OEM media out\n * there with BPBs that are only valid up to offset 0x018, but I've not run across any media like that.\n *\n * DOS 3.20 added LARGE_SECS, but unfortunately, it was added as a 2-byte value at offset 0x01E.  DOS 3.31 decided\n * to make both HIDDEN_SECS and LARGE_SECS 4-byte values, which meant that LARGE_SECS had to move from 0x01E to 0x020.\n */\nDiskAPI.BPB = {\n    SECTOR_BYTES:   0x00B,      // 2 bytes: bytes per sector (eg, 0x200 or 512)\n    CLUSTER_SECS:   0x00D,      // 1 byte: sectors per cluster (eg, 1)\n    RESERVED_SECS:  0x00E,      // 2 bytes: reserved sectors; ie, # sectors preceding the first FAT--usually just the boot sector (eg, 1)\n    TOTAL_FATS:     0x010,      // 1 byte: FAT copies (eg, 2)\n    ROOT_DIRENTS:   0x011,      // 2 bytes: root directory entries (eg, 0x40 or 64) 0x40 * 0x20 = 0x800 (1 sector is 0x200 bytes, total of 4 sectors)\n    TOTAL_SECS:     0x013,      // 2 bytes: number of sectors (eg, 0x140 or 320); if zero, refer to LARGE_SECS\n    MEDIA_ID:       0x015,      // 1 byte: media ID (see DiskAPI.FAT.MEDIA_*); should also match the first byte of the FAT (aka FAT ID)\n    FAT_SECS:       0x016,      // 2 bytes: sectors per FAT (eg, 1)\n    TRACK_SECS:     0x018,      // 2 bytes: sectors per track (eg, 8)\n    TOTAL_HEADS:    0x01A,      // 2 bytes: number of heads (eg, 1)\n    HIDDEN_SECS:    0x01C,      // 2 bytes (DOS 2.x) or 4 bytes (DOS 3.31 and up): number of hidden sectors (always 0 for non-partitioned media)\n    LARGE_SECS:     0x020       // 4 bytes (DOS 3.31 and up): number of sectors if TOTAL_SECS is zero\n};\n\n/*\n * Common (supported) diskette geometries.\n *\n * Each entry in GEOMETRIES is an array of values in \"CHS\" order:\n *\n *      [# cylinders, # heads, # sectors/track, # bytes/sector, media ID]\n *\n * If the 4th value is omitted, the sector size is assumed to be 512.  The order of these \"geometric\" values mirrors\n * the structure of our JSON-encoded disk images, which consist of an array of cylinders, each of which is an array of\n * heads, each of which is an array of sector objects.\n */\nDiskAPI.GEOMETRIES = {\n    163840:  [40,1,8,,0xFE],    // media ID 0xFE: 40 cylinders, 1 head (single-sided),   8 sectors/track, ( 320 total sectors x 512 bytes/sector ==  163840)\n    184320:  [40,1,9,,0xFC],    // media ID 0xFC: 40 cylinders, 1 head (single-sided),   9 sectors/track, ( 360 total sectors x 512 bytes/sector ==  184320)\n    327680:  [40,2,8,,0xFF],    // media ID 0xFF: 40 cylinders, 2 heads (double-sided),  8 sectors/track, ( 640 total sectors x 512 bytes/sector ==  327680)\n    368640:  [40,2,9,,0xFD],    // media ID 0xFD: 40 cylinders, 2 heads (double-sided),  9 sectors/track, ( 720 total sectors x 512 bytes/sector ==  368640)\n    737280:  [80,2,9,,0xF9],    // media ID 0xF9: 80 cylinders, 2 heads (double-sided),  9 sectors/track, (1440 total sectors x 512 bytes/sector ==  737280)\n    1228800: [80,2,15,,0xF9],   // media ID 0xF9: 80 cylinders, 2 heads (double-sided), 15 sectors/track, (2400 total sectors x 512 bytes/sector == 1228800)\n    1474560: [80,2,18,,0xF0],   // media ID 0xF0: 80 cylinders, 2 heads (double-sided), 18 sectors/track, (2880 total sectors x 512 bytes/sector == 1474560)\n    2949120: [80,2,36,,0xF0],   // media ID 0xF0: 80 cylinders, 2 heads (double-sided), 36 sectors/track, (5760 total sectors x 512 bytes/sector == 2949120)\n    /*\n     * The following are some common disk sizes and their CHS values, since missing or bogus MBR and/or BPB values\n     * might mislead us when attempting to determine the exact disk geometry.\n     */\n    10653696:[306,4,17],        // PC XT 10Mb hard drive (type 3)\n    21411840:[615,4,17],        // PC AT 20Mb hard drive (type 2)\n    /*\n     * Assorted DEC disk formats.\n     */\n    256256:  [77, 1,26,128],    // RX01 single-platter diskette: 77 tracks, 1 head, 26 sectors/track, 128 bytes/sector, for a total of 256256 bytes\n    2494464: [203,2,12,512],    // RK03 single-platter disk cartridge: 203 tracks, 2 heads, 12 sectors/track, 512 bytes/sector, for a total of 2494464 bytes\n    5242880: [256,2,40,256],    // RL01K single-platter disk cartridge: 256 tracks, 2 heads, 40 sectors/track, 256 bytes/sector, for a total of 5242880 bytes\n    10485760:[512,2,40,256]     // RL02K single-platter disk cartridge: 512 tracks, 2 heads, 40 sectors/track, 256 bytes/sector, for a total of 10485760 bytes\n};\n\n/*\n * Media ID (descriptor) bytes for DOS-compatible FAT-formatted disks (stored in the first byte of the FAT)\n */\nDiskAPI.FAT = {\n    MEDIA_160KB:    0xFE,       // 5.25-inch, 1-sided,  8-sector, 40-track\n    MEDIA_180KB:    0xFC,       // 5.25-inch, 1-sided,  9-sector, 40-track\n    MEDIA_320KB:    0xFF,       // 5.25-inch, 2-sided,  8-sector, 40-track\n    MEDIA_360KB:    0xFD,       // 5.25-inch, 2-sided,  9-sector, 40-track\n    MEDIA_720KB:    0xF9,       //  3.5-inch, 2-sided,  9-sector, 80-track\n    MEDIA_1200KB:   0xF9,       //  3.5-inch, 2-sided, 15-sector, 80-track\n    MEDIA_FIXED:    0xF8,       // fixed disk (aka hard drive)\n    MEDIA_1440KB:   0xF0,       //  3.5-inch, 2-sided, 18-sector, 80-track\n    MEDIA_2880KB:   0xF0        //  3.5-inch, 2-sided, 36-sector, 80-track\n};\n\n/*\n * Cluster constants for 12-bit FATs (CLUSNUM_FREE, CLUSNUM_RES and CLUSNUM_MIN are the same for all FATs)\n */\nDiskAPI.FAT12 = {\n    MAX_CLUSTERS:   4084,\n    CLUSNUM_FREE:   0,          // this should NEVER appear in cluster chain (except at the start of an empty chain)\n    CLUSNUM_RES:    1,          // reserved; this should NEVER appear in cluster chain\n    CLUSNUM_MIN:    2,          // smallest valid cluster number\n    CLUSNUM_MAX:    0xFF6,      // largest valid cluster number\n    CLUSNUM_BAD:    0xFF7,      // bad cluster; this should NEVER appear in cluster chain\n    CLUSNUM_EOC:    0xFF8       // end of chain (actually, anything from 0xFF8-0xFFF indicates EOC)\n};\n\n/*\n * Cluster constants for 16-bit FATs (CLUSNUM_FREE, CLUSNUM_RES and CLUSNUM_MIN are the same for all FATs)\n */\nDiskAPI.FAT16 = {\n    MAX_CLUSTERS:   65524,\n    CLUSNUM_FREE:   0,          // this should NEVER appear in cluster chain (except at the start of an empty chain)\n    CLUSNUM_RES:    1,          // reserved; this should NEVER appear in cluster chain\n    CLUSNUM_MIN:    2,          // smallest valid cluster number\n    CLUSNUM_MAX:    0xFFF6,     // largest valid cluster number\n    CLUSNUM_BAD:    0xFFF7,     // bad cluster; this should NEVER appear in cluster chain\n    CLUSNUM_EOC:    0xFFF8      // end of chain (actually, anything from 0xFFF8-0xFFFF indicates EOC)\n};\n\n/*\n * Directory Entry offsets (and assorted constants) in FAT disk images\n *\n * NOTE: Versions of DOS prior to 2.0 use INVALID exclusively to mark available directory entries; any entry marked\n * UNUSED will actually be considered USED.  In DOS 2.0 and up, UNUSED was added to indicate that all remaining entries\n * are unused, relieving it from having to initialize the rest of the sectors in the directory cluster(s).  And in fact,\n * you WILL encounter garbage in subsequent directory sectors if you attempt to read past an UNUSED entry.\n */\nDiskAPI.DIRENT = {\n    NAME:           0x000,      // 8 bytes\n    EXT:            0x008,      // 3 bytes\n    ATTR:           0x00B,      // 1 byte\n    MODTIME:        0x016,      // 2 bytes\n    MODDATE:        0x018,      // 2 bytes\n    CLUSTER:        0x01A,      // 2 bytes\n    SIZE:           0x01C,      // 4 bytes (typically zero for subdirectories)\n    LENGTH:         0x20,       // 32 bytes total\n    UNUSED:         0x00,       // indicates this and all subsequent directory entries are unused\n    INVALID:        0xE5        // indicates this directory entry is unused\n};\n\n/*\n * Possible values for DIRENT.ATTR\n */\nDiskAPI.ATTR = {\n    READONLY:       0x01,       // PC-DOS 2.0 and up\n    HIDDEN:         0x02,\n    SYSTEM:         0x04,\n    LABEL:          0x08,       // PC-DOS 2.0 and up\n    SUBDIR:         0x10,       // PC-DOS 2.0 and up\n    ARCHIVE:        0x20        // PC-DOS 2.0 and up\n};\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/dumpapi.js (C) Jeff Parsons 2012-2018\n */\n\n/*\n * Our \"DiskDump API\", such as it was, used to look like:\n *\n *      http://jsmachines.net/bin/convdisk.php?disk=/disks/pc/dos/ibm/2.00/PCDOS200-DISK1.json&format=img\n *\n * To make it (a bit) more \"REST-like\", the above request now looks like:\n *\n *      http://www.pcjs.org/api/v1/dump?disk=/disks/pc/dos/ibm/2.00/PCDOS200-DISK1.json&format=img\n *\n * Similarly, our \"FileDump API\" used to look like:\n *\n *      http://jsmachines.net/bin/convrom.php?rom=/devices/pc/rom/5150/1981-04-24/PCBIOS-REV1.rom&format=json\n *\n * and that request now looks like:\n *\n *      http://www.pcjs.org/api/v1/dump?file=/devices/pc/rom/5150/1981-04-24/PCBIOS-REV1.rom&format=json\n *\n * I don't think it makes sense to avoid \"query\" parameters, because blending the path of a disk image with the\n * the rest of the URL would be (a) confusing, and (b) more work to parse.\n */\nvar DumpAPI = {\n    ENDPOINT:       \"/api/v1/dump\",\n    QUERY: {\n        DIR:        \"dir\",      // value is path of a directory (DiskDump only)\n        DISK:       \"disk\",     // value is path of a disk image (DiskDump only)\n        FILE:       \"file\",     // value is path of a ROM image file (FileDump only)\n        IMG:        \"img\",      // alias for DISK\n        PATH:       \"path\",     // value is path of a one or more files (DiskDump only)\n        FORMAT:     \"format\",   // value is one of FORMAT values below\n        COMMENTS:   \"comments\", // value is either \"true\" or \"false\"\n        DECIMAL:    \"decimal\",  // value is either \"true\" to force all numbers to decimal, \"false\" or undefined otherwise\n        MBHD:       \"mbhd\",     // value is hard drive size in Mb (formerly \"mbsize\") (DiskDump only) (DEPRECATED)\n        SIZE:       \"size\"      // value is target disk size in Kb (supersedes \"mbhd\") (DiskDump only)\n    },\n    FORMAT: {\n        JSON:       \"json\",     // default\n        JSON_GZ:    \"gz\",       // gzip is currently used ONLY for compressed JSON\n        DATA:       \"data\",     // same as \"json\", but built without JSON.stringify() (DiskDump only)\n        HEX:        \"hex\",      // deprecated\n        OCTAL:      \"octal\",    // displays data as octal words\n        BYTES:      \"bytes\",    // displays data as hex bytes; normally used only when comments are enabled\n        WORDS:      \"words\",    // displays data as hex words; normally used only when comments are enabled\n        LONGS:      \"longs\",    // displays data as dwords\n        IMG:        \"img\",      // returns the raw disk data (ie, using a Buffer object) (DiskDump only)\n        ROM:        \"rom\"       // returns the raw file data (ie, using a Buffer object) (FileDump only)\n    }\n};\n\n/*\n * Because we use an overloaded API endpoint (ie, one that's shared with the FileDump module), we must\n * also provide a list of commands which, when combined with the endpoint, define a unique request.\n */\nDumpAPI.asDiskCommands = [DumpAPI.QUERY.DIR, DumpAPI.QUERY.DISK, DumpAPI.QUERY.PATH];\nDumpAPI.asFileCommands = [DumpAPI.QUERY.FILE];\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/reportapi.js (C) Jeff Parsons 2012-2018\n */\n\nvar ReportAPI = {\n    ENDPOINT:       \"/api/v1/report\",\n    QUERY: {\n        APP:        \"app\",\n        VER:        \"ver\",\n        URL:        \"url\",\n        USER:       \"user\",\n        TYPE:       \"type\",\n        DATA:       \"data\"\n    },\n    TYPE: {\n        BUG:        \"bug\"\n    },\n    RES: {\n        OK:         \"Thank you\"\n    }\n};\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/userapi.js (C) Jeff Parsons 2012-2018\n */\n\n/*\n * Examples of User API requests:\n *\n *      web.getHost() + UserAPI.ENDPOINT + '?' + UserAPI.QUERY.REQ + '=' + UserAPI.REQ.VERIFY + '&' + UserAPI.QUERY.USER + '=' + sUser;\n */\nvar UserAPI = {\n    ENDPOINT:       \"/api/v1/user\",\n    QUERY: {\n        REQ:        \"req\",      // specifies a request\n        USER:       \"user\",     // specifies a user ID\n        STATE:      \"state\",    // specifies a state ID\n        DATA:       \"data\"      // specifies state data\n    },\n    REQ: {\n        CREATE:     \"create\",   // creates a user ID\n        VERIFY:     \"verify\",   // requests verification of a user ID\n        STORE:      \"store\",    // stores a machine state on the server\n        LOAD:       \"load\"      // loads a machine state from the server\n    },\n    RES: {\n        CODE:       \"code\",\n        DATA:       \"data\"\n    },\n    CODE: {\n        OK:         \"ok\",\n        FAIL:       \"error\"\n    },\n    FAIL: {\n        DUPLICATE:  \"user already exists\",\n        VERIFY:     \"unable to verify user\",\n        BADSTATE:   \"invalid state parameter\",\n        NOSTATE:    \"no machine state\",\n        BADLOAD:    \"unable to load machine state\",\n        BADSTORE:   \"unable to save machine state\"\n    }\n};\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/keys.js (C) Jeff Parsons 2012-2018\n */\n\nvar Keys = {\n    /*\n     * Keys and/or key combinations that generate common ASCII codes.\n     *\n     * NOTE: If you're looking for a general-purpose ASCII code table, see Str.ASCII in strlib.js;\n     * if something's missing, that's probably the more appropriate table to add it to.\n     *\n     * TODO: The Closure Compiler doesn't inline all references to these values, at least those with\n     * quoted property names, which is why I've 'unquoted' as many of them as possible.  One solution\n     * would be to add mnemonics for all of them, not just the non-printable ones (eg, SPACE instead\n     * of ' ', AMP instead of '&', etc.)\n     */\n    ASCII: {\n          BREAK:  0, CTRL_A:  1, CTRL_B:  2, CTRL_C:  3, CTRL_D:  4, CTRL_E:  5, CTRL_F:  6, CTRL_G:  7,\n         CTRL_H:  8, CTRL_I:  9, CTRL_J: 10, CTRL_K: 11, CTRL_L: 12, CTRL_M: 13, CTRL_N: 14, CTRL_O: 15,\n         CTRL_P: 16, CTRL_Q: 17, CTRL_R: 18, CTRL_S: 19, CTRL_T: 20, CTRL_U: 21, CTRL_V: 22, CTRL_W: 23,\n         CTRL_X: 24, CTRL_Y: 25, CTRL_Z: 26, ESC:    27,\n            ' ': 32,    '!': 33,    '\"': 34,    '#': 35,    '$': 36,    '%': 37,    '&': 38,    \"'\": 39,\n            '(': 40,    ')': 41,    '*': 42,    '+': 43,    ',': 44,    '-': 45,    '.': 46,    '/': 47,\n            '0': 48,    '1': 49,    '2': 50,    '3': 51,    '4': 52,    '5': 53,    '6': 54,    '7': 55,\n            '8': 56,    '9': 57,    ':': 58,    ';': 59,    '<': 60,    '=': 61,    '>': 62,    '?': 63,\n            '@': 64,     A:  65,     B:  66,     C:  67,     D:  68,     E:  69,     F:  70,     G:  71,\n             H:  72,     I:  73,     J:  74,     K:  75,     L:  76,     M:  77,     N:  78,     O:  79,\n             P:  80,     Q:  81,     R:  82,     S:  83,     T:  84,     U:  85,     V:  86,     W:  87,\n             X:  88,     Y:  89,     Z:  90,    '[': 91,    '\\\\':92,    ']': 93,    '^': 94,    '_': 95,\n            '`': 96,     a:  97,     b:  98,     c:  99,     d: 100,     e: 101,     f: 102,     g: 103,\n             h:  104,    i: 105,     j: 106,     k: 107,     l: 108,     m: 109,     n: 110,     o: 111,\n             p:  112,    q: 113,     r: 114,     s: 115,     t: 116,     u: 117,     v: 118,     w: 119,\n             x:  120,    y: 121,     z: 122,    '{':123,    '|':124,    '}':125,    '~':126,   DEL: 127\n    },\n    /*\n     * Browser keyCodes we must pay particular attention to.  For the most part, these are non-alphanumeric\n     * or function keys, some which may require special treatment (eg, preventDefault() if returning false on\n     * the initial keyDown event is insufficient).\n     *\n     * keyCodes for most common ASCII keys can simply use the appropriate ASCII code above.\n     *\n     * Most of these represent non-ASCII keys (eg, the LEFT arrow key), yet for some reason, browsers defined\n     * them using ASCII codes (eg, the LEFT arrow key uses the ASCII code for '%' or 37).\n     */\n    KEYCODE: {\n        /* 0x08 */ BS:          8,          // BACKSPACE        (ASCII.CTRL_H)\n        /* 0x09 */ TAB:         9,          // TAB              (ASCII.CTRL_I)\n        /* 0x0A */ LF:          10,         // LINE-FEED        (ASCII.CTRL_J) (Some Windows-based browsers used to generate this via CTRL-ENTER)\n        /* 0x0D */ CR:          13,         // CARRIAGE RETURN  (ASCII.CTRL_M)\n        /* 0x10 */ SHIFT:       16,\n        /* 0x11 */ CTRL:        17,\n        /* 0x12 */ ALT:         18,\n        /* 0x13 */ PAUSE:       19,         // PAUSE/BREAK\n        /* 0x14 */ CAPS_LOCK:   20,\n        /* 0x1B */ ESC:         27,\n        /* 0x20 */ SPACE:       32,\n        /* 0x21 */ PGUP:        33,\n        /* 0x22 */ PGDN:        34,\n        /* 0x23 */ END:         35,\n        /* 0x24 */ HOME:        36,\n        /* 0x25 */ LEFT:        37,\n        /* 0x26 */ UP:          38,\n        /* 0x27 */ RIGHT:       39,\n        /* 0x27 */ FF_QUOTE:    39,\n        /* 0x28 */ DOWN:        40,\n        /* 0x2C */ FF_COMMA:    44,\n        /* 0x2C */ PRTSC:       44,\n        /* 0x2D */ INS:         45,\n        /* 0x2E */ DEL:         46,\n        /* 0x2E */ FF_PERIOD:   46,\n        /* 0x2F */ FF_SLASH:    47,\n        /* 0x30 */ ZERO:        48,\n        /* 0x31 */ ONE:         49,\n        /* 0x32 */ TWO:         50,\n        /* 0x33 */ THREE:       51,\n        /* 0x34 */ FOUR:        52,\n        /* 0x35 */ FIVE:        53,\n        /* 0x36 */ SIX:         54,\n        /* 0x37 */ SEVEN:       55,\n        /* 0x38 */ EIGHT:       56,\n        /* 0x39 */ NINE:        57,\n        /* 0x3B */ FF_SEMI:     59,\n        /* 0x3D */ FF_EQUALS:   61,\n        /* 0x5B */ CMD:         91,         // aka WIN\n        /* 0x5B */ FF_LBRACK:   91,\n        /* 0x5C */ FF_BSLASH:   92,\n        /* 0x5D */ RCMD:        93,         // aka MENU\n        /* 0x5D */ FF_RBRACK:   93,\n        /* 0x60 */ NUM_0:       96,\n        /* 0x60 */ NUM_INS:     96,\n        /* 0x60 */ FF_BQUOTE:   96,\n        /* 0x61 */ NUM_1:       97,\n        /* 0x61 */ NUM_END:     97,\n        /* 0x62 */ NUM_2:       98,\n        /* 0x62 */ NUM_DOWN:    98,\n        /* 0x63 */ NUM_3:       99,\n        /* 0x63 */ NUM_PGDN:    99,\n        /* 0x64 */ NUM_4:       100,\n        /* 0x64 */ NUM_LEFT:    100,\n        /* 0x65 */ NUM_5:       101,\n        /* 0x65 */ NUM_CENTER:  101,\n        /* 0x66 */ NUM_6:       102,\n        /* 0x66 */ NUM_RIGHT:   102,\n        /* 0x67 */ NUM_7:       103,\n        /* 0x67 */ NUM_HOME:    103,\n        /* 0x68 */ NUM_8:       104,\n        /* 0x68 */ NUM_UP:      104,\n        /* 0x69 */ NUM_9:       105,\n        /* 0x69 */ NUM_PGUP:    105,\n        /* 0x6A */ NUM_MUL:     106,\n        /* 0x6B */ NUM_ADD:     107,\n        /* 0x6D */ NUM_SUB:     109,\n        /* 0x6E */ NUM_DEL:     110,        // aka PERIOD\n        /* 0x6F */ NUM_DIV:     111,\n        /* 0x70 */ F1:          112,\n        /* 0x71 */ F2:          113,\n        /* 0x72 */ F3:          114,\n        /* 0x73 */ F4:          115,\n        /* 0x74 */ F5:          116,\n        /* 0x75 */ F6:          117,\n        /* 0x76 */ F7:          118,\n        /* 0x77 */ F8:          119,\n        /* 0x78 */ F9:          120,\n        /* 0x79 */ F10:         121,\n        /* 0x7A */ F11:         122,\n        /* 0x7B */ F12:         123,\n        /* 0x90 */ NUM_LOCK:    144,\n        /* 0x91 */ SCROLL_LOCK: 145,\n        /* 0xAD */ FF_DASH:     173,\n        /* 0xBA */ SEMI:        186,        // Firefox:  59 (FF_SEMI)\n        /* 0xBB */ EQUALS:      187,        // Firefox:  61 (FF_EQUALS)\n        /* 0xBC */ COMMA:       188,\n        /* 0xBD */ DASH:        189,        // Firefox: 173 (FF_DASH)\n        /* 0xBE */ PERIOD:      190,\n        /* 0xBF */ SLASH:       191,\n        /* 0xC0 */ BQUOTE:      192,\n        /* 0xDB */ LBRACK:      219,\n        /* 0xDC */ BSLASH:      220,\n        /* 0xDD */ RBRACK:      221,\n        /* 0xDE */ QUOTE:       222,\n        /* 0xE0 */ FF_CMD:      224,        // Firefox only (used for both CMD and RCMD)\n        //\n        // The following biases use what I'll call Decimal Coded Binary or DCB (the opposite of BCD),\n        // where the thousands digit is used to store the sum of \"binary\" digits 1 and/or 2 and/or 4.\n        //\n        // Technically, that makes it DCO (Decimal Coded Octal), but then again, BCD should have really\n        // been called HCD (Hexadecimal Coded Decimal), so if \"they\" can take liberties, so can I.\n        //\n        // ONDOWN is a bias we add to browser keyCodes that we want to handle on \"down\" rather than on \"press\".\n        //\n        ONDOWN:                 1000,\n        //\n        // ONRIGHT is a bias we add to browser keyCodes that need to check for a \"right\" location (default is \"left\")\n        //\n        ONRIGHT:                2000,\n        //\n        // FAKE is a bias we add to signal these are fake keyCodes corresponding to internal keystroke combinations.\n        // The actual values are for internal use only and merely need to be unique and used consistently.\n        //\n        FAKE:                   4000\n    },\n    /*\n     * The set of values that a browser may store in the 'location' property of a keyboard event object\n     * which we also support.\n     */\n    LOCATION: {\n        LEFT:                   1,\n        RIGHT:                  2,\n        NUMPAD:                 3\n    }\n};\n\n/*\n * Check the event object's 'location' property for a non-zero value for the following ONRIGHT keys.\n */\nKeys.KEYCODE.NUM_CR = Keys.KEYCODE.CR + Keys.KEYCODE.ONRIGHT;\n\n\n/*\n * Maps Firefox keyCodes to their more common keyCode counterparts; a number of entries in this table\n * are no longer valid (if indeed they ever were), so they've been commented out.  It's likely that I\n * simply extended this table to resolve additional differences in other browsers (ie, Opera), but without\n * browser-specific checks, it's not safe to perform all the mappings shown below.\n */\nKeys.FF_KEYCODES = {};\nKeys.FF_KEYCODES[Keys.KEYCODE.FF_SEMI]   = Keys.KEYCODE.SEMI;           //  59 -> 186\nKeys.FF_KEYCODES[Keys.KEYCODE.FF_EQUALS] = Keys.KEYCODE.EQUALS;         //  61 -> 187\nKeys.FF_KEYCODES[Keys.KEYCODE.FF_DASH]   = Keys.KEYCODE.DASH;           // 173 -> 189\nKeys.FF_KEYCODES[Keys.KEYCODE.FF_CMD]    = Keys.KEYCODE.CMD;            // 224 -> 91\n// Keys.FF_KEYCODES[Keys.KEYCODE.FF_COMMA]  = Keys.KEYCODE.COMMA;       //  44 -> 188\n// Keys.FF_KEYCODES[Keys.KEYCODE.FF_PERIOD] = Keys.KEYCODE.PERIOD;      //  46 -> 190\n// Keys.FF_KEYCODES[Keys.KEYCODE.FF_SLASH]  = Keys.KEYCODE.SLASH;       //  47 -> 191\n// Keys.FF_KEYCODES[Keys.KEYCODE.FF_BQUOTE] = Keys.KEYCODE.BQUOTE;      //  96 -> 192\n// Keys.FF_KEYCODES[Keys.KEYCODE.FF_LBRACK  = Keys.KEYCODE.LBRACK;      //  91 -> 219\n// Keys.FF_KEYCODES[Keys.KEYCODE.FF_BSLASH] = Keys.KEYCODE.BSLASH;      //  92 -> 220\n// Keys.FF_KEYCODES[Keys.KEYCODE.FF_RBRACK] = Keys.KEYCODE.RBRACK;      //  93 -> 221\n// Keys.FF_KEYCODES[Keys.KEYCODE.FF_QUOTE]  = Keys.KEYCODE.QUOTE;       //  39 -> 222\n\n/*\n * Maps non-ASCII keyCodes to their ASCII counterparts\n */\nKeys.NONASCII_KEYCODES = {};\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.FF_DASH] = Keys.ASCII['-'];         // 173 -> 45\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.SEMI]    = Keys.ASCII[';'];         // 186 -> 59\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.EQUALS]  = Keys.ASCII['='];         // 187 -> 61\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.DASH]    = Keys.ASCII['-'];         // 189 -> 45\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.COMMA]   = Keys.ASCII[','];         // 188 -> 44\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.PERIOD]  = Keys.ASCII['.'];         // 190 -> 46\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.SLASH]   = Keys.ASCII['/'];         // 191 -> 47\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.BQUOTE]  = Keys.ASCII['`'];         // 192 -> 96\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.LBRACK]  = Keys.ASCII['['];         // 219 -> 91\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.BSLASH]  = Keys.ASCII['\\\\'];        // 220 -> 92\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.RBRACK]  = Keys.ASCII[']'];         // 221 -> 93\nKeys.NONASCII_KEYCODES[Keys.KEYCODE.QUOTE]   = Keys.ASCII[\"'\"];         // 222 -> 39\n\n/*\n * Maps unshifted keyCodes to their shifted counterparts; to be used when a shift-key is down.\n * Alphabetic characters are handled in code, since they must also take CAPS_LOCK into consideration.\n */\nKeys.SHIFTED_KEYCODES = {};\nKeys.SHIFTED_KEYCODES[Keys.ASCII['1']]     = Keys.ASCII['!'];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['2']]     = Keys.ASCII['@'];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['3']]     = Keys.ASCII['#'];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['4']]     = Keys.ASCII['$'];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['5']]     = Keys.ASCII['%'];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['6']]     = Keys.ASCII['^'];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['7']]     = Keys.ASCII['&'];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['8']]     = Keys.ASCII['*'];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['9']]     = Keys.ASCII['('];\nKeys.SHIFTED_KEYCODES[Keys.ASCII['0']]     = Keys.ASCII[')'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.SEMI]   = Keys.ASCII[':'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.EQUALS] = Keys.ASCII['+'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.COMMA]  = Keys.ASCII['<'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.DASH]   = Keys.ASCII['_'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.PERIOD] = Keys.ASCII['>'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.SLASH]  = Keys.ASCII['?'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.BQUOTE] = Keys.ASCII['~'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.LBRACK] = Keys.ASCII['{'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.BSLASH] = Keys.ASCII['|'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.RBRACK] = Keys.ASCII['}'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.QUOTE]  = Keys.ASCII['\"'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.FF_DASH]   = Keys.ASCII['_'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.FF_EQUALS] = Keys.ASCII['+'];\nKeys.SHIFTED_KEYCODES[Keys.KEYCODE.FF_SEMI]   = Keys.ASCII[':'];\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/strlib.js (C) Jeff Parsons 2012-2018\n */\n\nclass Str {\n    /**\n     * isValidInt(s, base)\n     *\n     * The built-in parseInt() function has the annoying feature of returning a partial value (ie,\n     * up to the point where it encounters an invalid character); eg, parseInt(\"foo\", 16) returns 0xf.\n     *\n     * So it's best to use our own Str.parseInt() function, which will in turn use this function to\n     * validate the entire string.\n     *\n     * @param {string} s is the string representation of some number\n     * @param {number} [base] is the radix to use (default is 10); only 2, 8, 10 and 16 are supported\n     * @return {boolean} true if valid, false if invalid (or the specified base isn't supported)\n     */\n    static isValidInt(s, base)\n    {\n        if (!base || base == 10) return s.match(/^-?[0-9]+$/) !== null;\n        if (base == 16) return s.match(/^-?[0-9a-f]+$/i) !== null;\n        if (base == 8) return s.match(/^-?[0-7]+$/) !== null;\n        if (base == 2) return s.match(/^-?[01]+$/) !== null;\n        return false;\n    }\n\n    /**\n     * parseInt(s, base)\n     *\n     * This is a wrapper around the built-in parseInt() function.  Our wrapper recognizes certain prefixes\n     * ('$' or \"0x\" for hex, '#' or \"0o\" for octal) and suffixes ('.' for decimal, 'h' for hex, 'y' for\n     * binary), and then calls isValidInt() to ensure we don't convert strings that contain partial values;\n     * see isValidInt() for details.\n     *\n     * The use of multiple prefix/suffix combinations is undefined (although for the record, we process\n     * prefixes first).  We do NOT support the \"0b\" prefix to indicate binary UNLESS one or more commas are\n     * also present (because \"0b\" is also a valid hex sequence), and we do NOT support a single leading zero\n     * to indicate octal (because such a number could also be decimal or hex).  Any number of commas are\n     * allowed; we remove them all before calling the built-in parseInt().\n     *\n     * More recently, we've added support for \"^D\", \"^O\", and \"^B\" prefixes to accommodate the base overrides\n     * that the PDP-10's MACRO-10 assembly language supports (decimal, octal, and binary, respectively).\n     * If this support turns out to adversely affect other debuggers, then it will have to be \"conditionalized\".\n     * Similarly, we've added support for \"K\", \"M\", and \"G\" MACRO-10-style suffixes that add 3, 6, or 9 zeros\n     * to the value to be parsed, respectively.\n     *\n     * @param {string} s is the string representation of some number\n     * @param {number} [base] is the radix to use (default is 10); can be overridden by prefixes/suffixes\n     * @return {number|undefined} corresponding value, or undefined if invalid\n     */\n    static parseInt(s, base)\n    {\n        var value;\n\n        if (s) {\n            if (!base) base = 10;\n\n            var ch, chPrefix, chSuffix;\n            var fCommas = (s.indexOf(',') > 0);\n            if (fCommas) s = s.replace(/,/g, '');\n\n            ch = chPrefix = s.charAt(0);\n            if (chPrefix == '#') {\n                base = 8;\n                chPrefix = '';\n            }\n            else if (chPrefix == '$') {\n                base = 16;\n                chPrefix = '';\n            }\n            if (ch != chPrefix) {\n                s = s.substr(1);\n            }\n            else {\n                ch = chPrefix = s.substr(0, 2);\n                if (chPrefix == '0b' && fCommas || chPrefix == '^B') {\n                    base = 2;\n                    chPrefix = '';\n                }\n                else if (chPrefix == '0o' || chPrefix == '^O') {\n                    base = 8;\n                    chPrefix = '';\n                }\n                else if (chPrefix == '^D') {\n                    base = 10;\n                    chPrefix = '';\n                }\n                else if (chPrefix == '0x') {\n                    base = 16;\n                    chPrefix = '';\n                }\n                if (ch != chPrefix) s = s.substr(2);\n            }\n            ch = chSuffix = s.slice(-1);\n            if (chSuffix == 'Y' || chSuffix == 'y') {\n                base = 2;\n                chSuffix = '';\n            }\n            else if (chSuffix == '.') {\n                base = 10;\n                chSuffix = '';\n            }\n            else if (chSuffix == 'H' || chSuffix == 'h') {\n                base = 16;\n                chSuffix = '';\n            }\n            else if (chSuffix == 'K') {\n                chSuffix = '000';\n            }\n            else if (chSuffix == 'M') {\n                chSuffix = '000000';\n            }\n            else if (chSuffix == 'G') {\n                chSuffix = '000000000';\n            }\n            if (ch != chSuffix) s = s.slice(0, -1) + chSuffix;\n            /*\n             * This adds support for the MACRO-10 binary shifting (Bn) suffix, which must be stripped from the\n             * number before parsing, and then applied to the value after parsing.  If n is omitted, 35 is assumed,\n             * which is a net shift of zero.  If n < 35, then a left shift of (35 - n) is required; if n > 35, then\n             * a right shift of -(35 - n) is required.\n             */\n            var v, shift = 0;\n            if (base <= 10) {\n                var match = s.match(/(-?[0-9]+)B([0-9]*)/);\n                if (match) {\n                    s = match[1];\n                    shift = 35 - ((match[2] || 35) & 0xff);\n                }\n            }\n            if (Str.isValidInt(s, base) && !isNaN(v = parseInt(s, base))) {\n                /*\n                 * With the need to support larger (eg, 36-bit) integers, truncating to 32 bits is no longer helpful.\n                 *\n                 *      value = v|0;\n                 */\n                if (shift) {\n                    /*\n                     * Since binary shifting is a logical operation, and since shifting by division only works properly\n                     * with positive numbers, we must convert a negative value to a positive value, by computing the two's\n                     * complement.\n                     */\n                    if (v < 0) v += Math.pow(2, 36);\n                    if (shift > 0) {\n                        v *= Math.pow(2, shift);\n                    } else {\n                        v = Math.trunc(v / Math.pow(2, -shift));\n                    }\n                }\n                value = v;\n            }\n        }\n        return value;\n    }\n\n    /**\n     * toBase(n, radix, cch, sPrefix, nGrouping)\n     *\n     * Displays the given number as an unsigned integer using the specified radix and number of digits.\n     *\n     * @param {number|null|undefined} n\n     * @param {number} radix (ie, the base)\n     * @param {number} cch (the desired number of digits)\n     * @param {string} [sPrefix] (default is none)\n     * @param {number} [nGrouping]\n     * @return {string}\n     */\n    static toBase(n, radix, cch, sPrefix = \"\", nGrouping = 0)\n    {\n        /*\n         * An initial \"falsey\" check for null takes care of both null and undefined;\n         * we can't rely entirely on isNaN(), because isNaN(null) returns false, oddly enough.\n         *\n         * Alternatively, we could mask and shift n regardless of whether it's null/undefined/NaN,\n         * since JavaScript coerces such operands to zero, but I think there's \"value\" in seeing those\n         * values displayed differently.\n         */\n        var s = \"\";\n        if (isNaN(n)) {\n            n = null;\n        } else if (n != null) {\n            /*\n             * Callers that produced an input by dividing by a power of two rather than shifting (in order\n             * to access more than 32 bits) may produce a fractional result, which ordinarily we would simply\n             * ignore, but if the integer portion is zero and the sign is negative, we should probably treat\n             * this value as a sign-extension.\n             */\n            if (n < 0 && n > -1) n = -1;\n            /*\n             * Negative values should be two's complemented according to the number of digits; for example,\n             * 12 octal digits implies an upper limit 8^12.\n             */\n            if (n < 0) {\n                n += Math.pow(radix, cch);\n            }\n            if (n >= Math.pow(radix, cch)) {\n                cch = Math.ceil(Math.log(n) / Math.log(radix));\n            }\n        }\n        var g = nGrouping || -1;\n        while (cch-- > 0) {\n            if (!g) {\n                s = ',' + s;\n                g = nGrouping;\n            }\n            if (n == null) {\n                s = '?' + s;\n            } else {\n                var d = n % radix;\n                d += (d >= 0 && d <= 9? 0x30 : 0x41 - 10);\n                s = String.fromCharCode(d) + s;\n                n = Math.trunc(n / radix);\n            }\n            g--;\n        }\n        return sPrefix + s;\n    }\n\n    /**\n     * toBin(n, cch, nGrouping)\n     *\n     * Converts an integer to binary, with the specified number of digits (up to a maximum of 36).\n     *\n     * @param {number|null|undefined} n (supports integers up to 36 bits now)\n     * @param {number} [cch] is the desired number of binary digits (0 or undefined for default of either 8, 18, or 36)\n     * @param {number} [nGrouping]\n     * @return {string} the binary representation of n\n     */\n    static toBin(n, cch, nGrouping)\n    {\n        if (!cch) {\n            // cch = Math.ceil(Math.log(Math.abs(n) + 1) / Math.LN2) || 1;\n            var v = Math.abs(n);\n            if (v <= 0b11111111) {\n                cch = 8;\n            } else if (v <= 0b111111111111111111) {\n                cch = 18;\n            } else {\n                cch = 36;\n            }\n        } else if (cch > 36) cch = 36;\n        return Str.toBase(n, 2, cch, \"\", nGrouping);\n    }\n\n    /**\n     * toBinBytes(n, cb, fPrefix)\n     *\n     * Converts an integer to binary, with the specified number of bytes (up to the default of 4).\n     *\n     * @param {number|null|undefined} n (interpreted as a 32-bit value)\n     * @param {number} [cb] is the desired number of binary bytes (4 is both the default and the maximum)\n     * @param {boolean} [fPrefix]\n     * @return {string} the binary representation of n\n     */\n    static toBinBytes(n, cb, fPrefix)\n    {\n        var s = \"\";\n        if (!cb || cb > 4) cb = 4;\n        for (var i = 0; i < cb; i++) {\n            if (s) s = ',' + s;\n            s = Str.toBin(n & 0xff, 8) + s;\n            n >>= 8;\n        }\n        return (fPrefix? \"0b\" : \"\") + s;\n    }\n\n    /**\n     * toOct(n, cch, fPrefix)\n     *\n     * Converts an integer to octal, with the specified number of digits (default of 6; max of 12)\n     *\n     * You might be tempted to use the built-in n.toString(8) instead, but it doesn't zero-pad and it\n     * doesn't properly convert negative values.  Moreover, if n is undefined, n.toString() will throw\n     * an exception, whereas this function will return '?' characters.\n     *\n     * @param {number|null|undefined} n (supports integers up to 36 bits now)\n     * @param {number} [cch] is the desired number of octal digits (0 or undefined for default of either 6, 8, or 12)\n     * @param {boolean} [fPrefix]\n     * @return {string} the octal representation of n\n     */\n    static toOct(n, cch, fPrefix)\n    {\n        if (!cch) {\n            // cch = Math.ceil(Math.log(Math.abs(n) + 1) / Math.log(8)) || 1;\n            var v = Math.abs(n);\n            if (v <= 0o777777) {\n                cch = 6;\n            } else if (v <= 0o77777777) {\n                cch = 8;\n            } else {\n                cch = 12;\n            }\n        } else if (cch > 12) cch = 12;\n        return Str.toBase(n, 8, cch, fPrefix? \"0o\" : \"\");\n    }\n\n    /**\n     * toDec(n, cch)\n     *\n     * Converts an integer to decimal, with the specified number of digits (default of 5; max of 11)\n     *\n     * You might be tempted to use the built-in n.toString(10) instead, but it doesn't zero-pad and it\n     * doesn't properly convert negative values.  Moreover, if n is undefined, n.toString() will throw\n     * an exception, whereas this function will return '?' characters.\n     *\n     * @param {number|null|undefined} n (supports integers up to 36 bits now)\n     * @param {number} [cch] is the desired number of decimal digits (0 or undefined for default of either 5 or 11)\n     * @return {string} the decimal representation of n\n     */\n    static toDec(n, cch)\n    {\n        if (!cch) {\n            // cch = Math.ceil(Math.log(Math.abs(n) + 1) / Math.LN10) || 1;\n            var v = Math.abs(n);\n            if (v <= 99999) {\n                cch = 5;\n            } else {\n                cch = 11;\n            }\n        } else if (cch > 11) cch = 11;\n        return Str.toBase(n, 10, cch);\n    }\n\n    /**\n     * toHex(n, cch, fPrefix)\n     *\n     * Converts an integer to hex, with the specified number of digits (default of 4 or 8, max of 9).\n     *\n     * You might be tempted to use the built-in n.toString(16) instead, but it doesn't zero-pad and it\n     * doesn't properly convert negative values; for example, if n is -2147483647, then n.toString(16)\n     * will return \"-7fffffff\" instead of \"80000001\".  Moreover, if n is undefined, n.toString() will\n     * throw an exception, whereas this function will return '?' characters.\n     *\n     * NOTE: The following work-around (adapted from code found on StackOverflow) would be another solution,\n     * taking care of negative values, zero-padding, and upper-casing, but not null/undefined/NaN values:\n     *\n     *      s = (n < 0? n + 0x100000000 : n).toString(16);\n     *      s = \"00000000\".substr(0, 8 - s.length) + s;\n     *      s = s.substr(0, cch).toUpperCase();\n     *\n     * @param {number|null|undefined} n (supports integers up to 36 bits now)\n     * @param {number} [cch] is the desired number of hex digits (0 or undefined for default of either 4, 8, or 9)\n     * @param {boolean} [fPrefix]\n     * @return {string} the hex representation of n\n     */\n    static toHex(n, cch, fPrefix)\n    {\n        if (!cch) {\n            // cch = Math.ceil(Math.log(Math.abs(n) + 1) / Math.log(16)) || 1;\n            var v = Math.abs(n);\n            if (v <= 0xffff) {\n                cch = 4;\n            } else if (v <= 0xffffffff) {\n                cch = 8;\n            } else {\n                cch = 9;\n            }\n        } else if (cch > 9) cch = 9;\n        return Str.toBase(n, 16, cch, fPrefix? \"0x\" : \"\");\n    }\n\n    /**\n     * toHexByte(b)\n     *\n     * Alias for Str.toHex(b, 2, true)\n     *\n     * @param {number|null|undefined} b is a byte value\n     * @return {string} the hex representation of b\n     */\n    static toHexByte(b)\n    {\n        return Str.toHex(b, 2, true);\n    }\n\n    /**\n     * toHexWord(w)\n     *\n     * Alias for Str.toHex(w, 4, true)\n     *\n     * @param {number|null|undefined} w is a word (16-bit) value\n     * @return {string} the hex representation of w\n     */\n    static toHexWord(w)\n    {\n        return Str.toHex(w, 4, true);\n    }\n\n    /**\n     * toHexLong(l)\n     *\n     * Alias for Str.toHex(l, 8, true)\n     *\n     * @param {number|null|undefined} l is a dword (32-bit) value\n     * @return {string} the hex representation of w\n     */\n    static toHexLong(l)\n    {\n        return Str.toHex(l, 8, true);\n    }\n\n    /**\n     * getBaseName(sFileName, fStripExt)\n     *\n     * This is a poor-man's version of Node's path.basename(), which Node-only components should use instead.\n     *\n     * Note that if fStripExt is true, this strips ANY extension, whereas path.basename() strips the extension only\n     * if it matches the second parameter (eg, path.basename(\"/foo/bar/baz/asdf/quux.html\", \".html\") returns \"quux\").\n     *\n     * @param {string} sFileName\n     * @param {boolean} [fStripExt]\n     * @return {string}\n     */\n    static getBaseName(sFileName, fStripExt)\n    {\n        var sBaseName = sFileName;\n\n        var i = sFileName.lastIndexOf('/');\n        if (i >= 0) sBaseName = sFileName.substr(i + 1);\n\n        /*\n         * This next bit is a kludge to clean up names that are part of a URL that includes unsightly query parameters.\n         */\n        i = sBaseName.indexOf('&');\n        if (i > 0) sBaseName = sBaseName.substr(0, i);\n\n        if (fStripExt) {\n            i = sBaseName.lastIndexOf(\".\");\n            if (i > 0) {\n                sBaseName = sBaseName.substring(0, i);\n            }\n        }\n        return sBaseName;\n    }\n\n    /**\n     * getExtension(sFileName)\n     *\n     * This is a poor-man's version of Node's path.extname(), which Node-only components should use instead.\n     *\n     * Note that we EXCLUDE the period from the returned extension, whereas path.extname() includes it.\n     *\n     * @param {string} sFileName\n     * @return {string} the filename's extension (in lower-case and EXCLUDING the \".\"), or an empty string\n     */\n    static getExtension(sFileName)\n    {\n        var sExtension = \"\";\n        var i = sFileName.lastIndexOf(\".\");\n        if (i >= 0) {\n            sExtension = sFileName.substr(i + 1).toLowerCase();\n        }\n        return sExtension;\n    }\n\n    /**\n     * endsWith(s, sSuffix)\n     *\n     * @param {string} s\n     * @param {string} sSuffix\n     * @return {boolean} true if s ends with sSuffix, false if not\n     */\n    static endsWith(s, sSuffix)\n    {\n        return s.indexOf(sSuffix, s.length - sSuffix.length) !== -1;\n    }\n\n    /**\n     * escapeHTML(sHTML)\n     *\n     * @param {string} sHTML\n     * @return {string} with HTML entities \"escaped\", similar to PHP's htmlspecialchars()\n     */\n    static escapeHTML(sHTML)\n    {\n        return sHTML.replace(/[&<>\"']/g, function(m)\n        {\n            return Str.HTMLEscapeMap[m];\n        });\n    }\n\n    /**\n     * replace(sSearch, sReplace, s)\n     *\n     * The JavaScript replace() function ALWAYS interprets \"$\" specially in replacement strings, even when\n     * the search string is NOT a RegExp; specifically:\n     *\n     *      $$  Inserts a \"$\"\n     *      $&  Inserts the matched substring\n     *      $`  Inserts the portion of the string that precedes the matched substring\n     *      $'  Inserts the portion of the string that follows the matched substring\n     *      $n  Where n is a positive integer less than 100, inserts the nth parenthesized sub-match string,\n     *          provided the first argument was a RegExp object\n     *\n     * So, if a replacement string containing dollar signs passes through a series of replace() calls, untold\n     * problems could result.  Hence, this function, which simply uses the replacement string as-is.\n     *\n     * Similar to the JavaScript replace() method (when sSearch is a string), this replaces only ONE occurrence\n     * (ie, the FIRST occurrence); it might be nice to add options to replace the LAST occurrence and/or ALL\n     * occurrences, but we'll revisit that later.\n     *\n     * @param {string} sSearch\n     * @param {string} sReplace\n     * @param {string} s\n     * @return {string}\n     */\n    static replace(sSearch, sReplace, s)\n    {\n        var i = s.indexOf(sSearch);\n        if (i >= 0) {\n            s = s.substr(0, i) + sReplace + s.substr(i + sSearch.length);\n        }\n        return s;\n    }\n\n    /**\n     * replaceAll(sSearch, sReplace, s)\n     *\n     * @param {string} sSearch\n     * @param {string} sReplace\n     * @param {string} s\n     * @return {string}\n     */\n    static replaceAll(sSearch, sReplace, s)\n    {\n        var a = {};\n        a[sSearch] = sReplace;\n        return Str.replaceArray(a, s);\n    }\n\n    /**\n     * replaceArray(a, s)\n     *\n     * @param {Object} a\n     * @param {string} s\n     * @return {string}\n     */\n    static replaceArray(a, s)\n    {\n        var sMatch = \"\";\n        for (var k in a) {\n            /*\n             * As noted in:\n             *\n             *      http://www.regexguru.com/2008/04/escape-characters-only-when-necessary/\n             *\n             * inside character classes, only backslash, caret, hyphen and the closing bracket need to be\n             * escaped.  And in fact, if you ensure that the closing bracket is first, the caret is not first,\n             * and the hyphen is last, you can avoid escaping those as well.\n             */\n            k = k.replace(/([\\\\[\\]*{}().+?|$])/g, \"\\\\$1\");\n            sMatch += (sMatch? '|' : '') + k;\n        }\n        return s.replace(new RegExp('(' + sMatch + ')', \"g\"), function(m)\n        {\n            return a[m];\n        });\n    }\n\n    /**\n     * pad(s, cch, fPadLeft)\n     *\n     * NOTE: the maximum amount of padding currently supported is 40 spaces.\n     *\n     * @param {string} s is a string\n     * @param {number} cch is desired length\n     * @param {boolean} [fPadLeft] (default is padding on the right)\n     * @return {string} the original string (s) with spaces padding it to the specified length\n     */\n    static pad(s, cch, fPadLeft)\n    {\n        var sPadding = \"                                        \";\n        return fPadLeft? (sPadding + s).slice(-cch) : (s + sPadding).slice(0, cch);\n    }\n\n    /**\n     * sprintf(format, ...args)\n     *\n     * Copied from the CCjs project (/ccjs/lib/stdio.js) and extended.  Far from complete let alone sprintf-compatible,\n     * but it's a start.\n     *\n     * @param {string} format\n     * @param {...} args\n     * @return {string}\n     */\n    static sprintf(format, ...args)\n    {\n        var parts = format.split(/%([-+ 0#]?)([0-9]*)(\\.?)([0-9]*)([hlL]?)([A-Za-z%])/);\n        var buffer = \"\";\n        var partIndex = 0;\n        for (var i = 0; i < args.length; i++) {\n\n            var arg = args[i], d, s;\n            buffer += parts[partIndex++];\n            var flags = parts[partIndex];\n            var minimum = +parts[partIndex+1] || 0;\n            var precision = +parts[partIndex+3] || 0;\n            var conversion = parts[partIndex+5];\n\n            switch(conversion) {\n            case 'd':\n            case 'f':\n                d = Math.trunc(arg);\n                s = d + \"\";\n                if (precision) {\n                    minimum -= (precision + 1);\n                }\n                if (s.length < minimum) {\n                    if (flags == '0') {\n                        if (d < 0) minimum--;\n                        s = (\"0000000000\" + Math.abs(d)).slice(-minimum);\n                        if (d < 0) s = '-' + s;\n                    } else {\n                        s = (\"          \" + s).slice(-minimum);\n                    }\n                }\n                if (precision) {\n                    d = Math.trunc((arg - Math.trunc(arg)) * Math.pow(10, precision));\n                    s += '.' + (\"0000000000\" + Math.abs(d)).slice(-precision);\n                }\n                buffer += s;\n                break;\n            case 's':\n                buffer += arg;\n                break;\n            default:\n                /*\n                 * The supported ANSI C set of conversions: \"dioxXucsfeEgGpn%\"\n                 */\n                buffer += \"(unrecognized printf conversion %\" + conversion + \")\";\n                break;\n            }\n\n            partIndex += 6;\n        }\n        buffer += parts[partIndex];\n        return buffer;\n    }\n\n    /**\n     * stripLeadingZeros(s, fPad)\n     *\n     * @param {string} s\n     * @param {boolean} [fPad]\n     * @return {string}\n     */\n    static stripLeadingZeros(s, fPad)\n    {\n        var cch = s.length;\n        s = s.replace(/^0+([0-9A-F]+)$/i, \"$1\");\n        if (fPad) s = Str.pad(s, cch, true);\n        return s;\n    }\n\n    /**\n     * trim(s)\n     *\n     * @param {string} s\n     * @return {string}\n     */\n    static trim(s)\n    {\n        if (String.prototype.trim) {\n            return s.trim();\n        }\n        return s.replace(/^\\s+|\\s+$/g, \"\");\n    }\n\n    /**\n     * toASCIICode(b)\n     *\n     * @param {number} b\n     * @return {string}\n     */\n    static toASCIICode(b)\n    {\n        var s;\n        if (b != Str.ASCII.CR && b != Str.ASCII.LF) {\n            s = Str.ASCIICodeMap[b];\n        }\n        if (s) {\n            s = '<' + s + '>';\n        } else {\n            s = String.fromCharCode(b);\n        }\n        return s;\n    }\n}\n\n/*\n * Map special characters to their HTML escape sequences.\n */\nStr.HTMLEscapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#039;'\n};\n\n/*\n * Map \"unprintable\" ASCII codes to mnemonics, to more clearly see what's being printed.\n */\nStr.ASCIICodeMap = {\n    0x00:   \"NUL\",\n    0x01:   \"SOH\",      // (CTRL_A) Start of Heading\n    0x02:   \"STX\",      // (CTRL_B) Start of Text\n    0x03:   \"ETX\",      // (CTRL_C) End of Text\n    0x04:   \"EOT\",      // (CTRL_D) End of Transmission\n    0x05:   \"ENQ\",      // (CTRL_E) Enquiry\n    0x06:   \"ACK\",      // (CTRL_F) Acknowledge\n    0x07:   \"BEL\",      // (CTRL_G) Bell\n    0x08:   \"BS\",       // (CTRL_H) Backspace\n    0x09:   \"TAB\",      // (CTRL_I) Horizontal Tab (aka HT)\n    0x0A:   \"LF\",       // (CTRL_J) Line Feed (New Line)\n    0x0B:   \"VT\",       // (CTRL_K) Vertical Tab\n    0x0C:   \"FF\",       // (CTRL_L) Form Feed (New Page)\n    0x0D:   \"CR\",       // (CTRL_M) Carriage Return\n    0x0E:   \"SO\",       // (CTRL_N) Shift Out\n    0x0F:   \"SI\",       // (CTRL_O) Shift In\n    0x10:   \"DLE\",      // (CTRL_P) Data Link Escape\n    0x11:   \"XON\",      // (CTRL_Q) Device Control 1 (aka DC1)\n    0x12:   \"DC2\",      // (CTRL_R) Device Control 2\n    0x13:   \"XOFF\",     // (CTRL_S) Device Control 3 (aka DC3)\n    0x14:   \"DC4\",      // (CTRL_T) Device Control 4\n    0x15:   \"NAK\",      // (CTRL_U) Negative Acknowledge\n    0x16:   \"SYN\",      // (CTRL_V) Synchronous Idle\n    0x17:   \"ETB\",      // (CTRL_W) End of Transmission Block\n    0x18:   \"CAN\",      // (CTRL_X) Cancel\n    0x19:   \"EM\",       // (CTRL_Y) End of Medium\n    0x1A:   \"SUB\",      // (CTRL_Z) Substitute\n    0x1B:   \"ESC\",      // Escape\n    0x1C:   \"FS\",       // File Separator\n    0x1D:   \"GS\",       // Group Separator\n    0x1E:   \"RS\",       // Record Separator\n    0x1F:   \"US\",       // Unit Separator\n    0x7F:   \"DEL\"\n};\n\n/*\n * Refer to: https://en.wikipedia.org/wiki/Code_page_437\n */\nStr.CP437ToUnicode = [\n    '\\u0000', '\\u263A', '\\u263B', '\\u2665', '\\u2666', '\\u2663', '\\u2660', '\\u2022',\n    '\\u25D8', '\\u25CB', '\\u25D9', '\\u2642', '\\u2640', '\\u266A', '\\u266B', '\\u263C',\n    '\\u25BA', '\\u25C4', '\\u2195', '\\u203C', '\\u00B6', '\\u00A7', '\\u25AC', '\\u21A8',\n    '\\u2191', '\\u2193', '\\u2192', '\\u2190', '\\u221F', '\\u2194', '\\u25B2', '\\u25BC',\n    '\\u0020', '\\u0021', '\\u0022', '\\u0023', '\\u0024', '\\u0025', '\\u0026', '\\u0027',\n    '\\u0028', '\\u0029', '\\u002A', '\\u002B', '\\u002C', '\\u002D', '\\u002E', '\\u002F',\n    '\\u0030', '\\u0031', '\\u0032', '\\u0033', '\\u0034', '\\u0035', '\\u0036', '\\u0037',\n    '\\u0038', '\\u0039', '\\u003A', '\\u003B', '\\u003C', '\\u003D', '\\u003E', '\\u003F',\n    '\\u0040', '\\u0041', '\\u0042', '\\u0043', '\\u0044', '\\u0045', '\\u0046', '\\u0047',\n    '\\u0048', '\\u0049', '\\u004A', '\\u004B', '\\u004C', '\\u004D', '\\u004E', '\\u004F',\n    '\\u0050', '\\u0051', '\\u0052', '\\u0053', '\\u0054', '\\u0055', '\\u0056', '\\u0057',\n    '\\u0058', '\\u0059', '\\u005A', '\\u005B', '\\u005C', '\\u005D', '\\u005E', '\\u005F',\n    '\\u0060', '\\u0061', '\\u0062', '\\u0063', '\\u0064', '\\u0065', '\\u0066', '\\u0067',\n    '\\u0068', '\\u0069', '\\u006A', '\\u006B', '\\u006C', '\\u006D', '\\u006E', '\\u006F',\n    '\\u0070', '\\u0071', '\\u0072', '\\u0073', '\\u0074', '\\u0075', '\\u0076', '\\u0077',\n    '\\u0078', '\\u0079', '\\u007A', '\\u007B', '\\u007C', '\\u007D', '\\u007E', '\\u2302',\n    '\\u00C7', '\\u00FC', '\\u00E9', '\\u00E2', '\\u00E4', '\\u00E0', '\\u00E5', '\\u00E7',\n    '\\u00EA', '\\u00EB', '\\u00E8', '\\u00EF', '\\u00EE', '\\u00EC', '\\u00C4', '\\u00C5',\n    '\\u00C9', '\\u00E6', '\\u00C6', '\\u00F4', '\\u00F6', '\\u00F2', '\\u00FB', '\\u00F9',\n    '\\u00FF', '\\u00D6', '\\u00DC', '\\u00A2', '\\u00A3', '\\u00A5', '\\u20A7', '\\u0192',\n    '\\u00E1', '\\u00ED', '\\u00F3', '\\u00FA', '\\u00F1', '\\u00D1', '\\u00AA', '\\u00BA',\n    '\\u00BF', '\\u2310', '\\u00AC', '\\u00BD', '\\u00BC', '\\u00A1', '\\u00AB', '\\u00BB',\n    '\\u2591', '\\u2592', '\\u2593', '\\u2502', '\\u2524', '\\u2561', '\\u2562', '\\u2556',\n    '\\u2555', '\\u2563', '\\u2551', '\\u2557', '\\u255D', '\\u255C', '\\u255B', '\\u2510',\n    '\\u2514', '\\u2534', '\\u252C', '\\u251C', '\\u2500', '\\u253C', '\\u255E', '\\u255F',\n    '\\u255A', '\\u2554', '\\u2569', '\\u2566', '\\u2560', '\\u2550', '\\u256C', '\\u2567',\n    '\\u2568', '\\u2564', '\\u2565', '\\u2559', '\\u2558', '\\u2552', '\\u2553', '\\u256B',\n    '\\u256A', '\\u2518', '\\u250C', '\\u2588', '\\u2584', '\\u258C', '\\u2590', '\\u2580',\n    '\\u03B1', '\\u00DF', '\\u0393', '\\u03C0', '\\u03A3', '\\u03C3', '\\u00B5', '\\u03C4',\n    '\\u03A6', '\\u0398', '\\u03A9', '\\u03B4', '\\u221E', '\\u03C6', '\\u03B5', '\\u2229',\n    '\\u2261', '\\u00B1', '\\u2265', '\\u2264', '\\u2320', '\\u2321', '\\u00F7', '\\u2248',\n    '\\u00B0', '\\u2219', '\\u00B7', '\\u221A', '\\u207F', '\\u00B2', '\\u25A0', '\\u00A0'\n];\n\n/*\n * TODO: Future home of a complete ASCII table.\n */\nStr.ASCII = {\n    LF:     0x0A,\n    CR:     0x0D\n};\n\nStr.TYPES = {\n    NULL:       0,\n    BYTE:       1,\n    WORD:       2,\n    DWORD:      3,\n    NUMBER:     4,\n    STRING:     5,\n    BOOLEAN:    6,\n    OBJECT:     7,\n    ARRAY:      8\n};\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/usrlib.js (C) Jeff Parsons 2012-2018\n */\n\n/**\n * @typedef {{\n *  mask:       number,\n *  shift:      number\n * }}\n */\nvar BitField;\n\n/**\n * @typedef {Object.<BitField>}\n */\nvar BitFields;\n\nclass Usr {\n    /**\n     * binarySearch(a, v, fnCompare)\n     *\n     * @param {Array} a is an array\n     * @param {number|string|Array|Object} v\n     * @param {function((number|string|Array|Object), (number|string|Array|Object))} [fnCompare]\n     * @return {number} the index of matching entry if non-negative, otherwise the index of the insertion point\n     */\n    static binarySearch(a, v, fnCompare)\n    {\n        var left = 0;\n        var right = a.length;\n        var found = 0;\n        if (fnCompare === undefined) {\n            fnCompare = function(a, b)\n            {\n                return a > b ? 1 : a < b ? -1 : 0;\n            };\n        }\n        while (left < right) {\n            var middle = (left + right) >> 1;\n            var compareResult;\n            compareResult = fnCompare(v, a[middle]);\n            if (compareResult > 0) {\n                left = middle + 1;\n            } else {\n                right = middle;\n                found = !compareResult;\n            }\n        }\n        return found ? left : ~left;\n    }\n\n    /**\n     * binaryInsert(a, v, fnCompare)\n     *\n     * If element v already exists in array a, the array is unchanged (we don't allow duplicates); otherwise, the\n     * element is inserted into the array at the appropriate index.\n     *\n     * @param {Array} a is an array\n     * @param {number|string|Array|Object} v is the value to insert\n     * @param {function((number|string|Array|Object), (number|string|Array|Object))} [fnCompare]\n     */\n    static binaryInsert(a, v, fnCompare)\n    {\n        var index = Usr.binarySearch(a, v, fnCompare);\n        if (index < 0) {\n            a.splice(-(index + 1), 0, v);\n        }\n    }\n\n    /**\n     * getTimestamp()\n     *\n     * @return {string} timestamp containing the current date and time (\"yyyy-mm-dd hh:mm:ss\")\n     */\n    static getTimestamp()\n    {\n        return Usr.formatDate(\"Y-m-d H:i:s\");\n    }\n\n    /**\n     * getMonthDays(nMonth, nYear)\n     *\n     * Note that if we're being called on behalf of the RTC, its year is always truncated to two digits (mod 100),\n     * so we have no idea what century the year 0 might refer to.  When using the normal leap-year formula, 0 fails\n     * the mod 100 test but passes the mod 400 test, so as far as the RTC is concerned, every century year is a leap\n     * year.  Since we're most likely dealing with the year 2000, that's fine, since 2000 was also a leap year.\n     *\n     * TODO: There IS a separate CMOS byte that's supposed to be set to CMOS_ADDR.CENTURY_DATE; it's always BCD,\n     * so theoretically it will contain values like 0x19 or 0x20 (for the 20th and 21st centuries, respectively), and\n     * we could add that as another parameter to this function, to improve the accuracy, but that would go beyond what\n     * a real RTC actually does.\n     *\n     * @param {number} nMonth (1-12)\n     * @param {number} nYear (normally a 4-digit year, but it may also be mod 100)\n     * @return {number} the maximum (1-based) day allowed for the specified month and year\n     */\n    static getMonthDays(nMonth, nYear)\n    {\n        var nDays = Usr.aMonthDays[nMonth - 1];\n        if (nDays == 28) {\n            if ((nYear % 4) === 0 && ((nYear % 100) || (nYear % 400) === 0)) {\n                nDays++;\n            }\n        }\n        return nDays;\n    }\n\n    /**\n     * formatDate(sFormat, date)\n     *\n     * @param {string} sFormat (eg, \"F j, Y\", \"Y-m-d H:i:s\")\n     * @param {Date} [date] (default is the current time)\n     * @return {string}\n     *\n     * Supported identifiers in sFormat include:\n     *\n     *      a:  lowercase ante meridiem and post meridiem (am or pm)\n     *      d:  day of the month, 2 digits with leading zeros (01,02,...,31)\n     *      D:  3-letter day of the week (\"Sun\",\"Mon\",...,\"Sat\")\n     *      F:  month (\"January\",\"February\",...,\"December\")\n     *      g:  hour in 12-hour format, without leading zeros (1,2,...,12)\n     *      h:  hour in 24-hour format, without leading zeros (0,1,...,23)\n     *      H:  hour in 24-hour format, with leading zeros (00,01,...,23)\n     *      i:  minutes, with leading zeros (00,01,...,59)\n     *      j:  day of the month, without leading zeros (1,2,...,31)\n     *      l:  day of the week (\"Sunday\",\"Monday\",...,\"Saturday\")\n     *      m:  month, with leading zeros (01,02,...,12)\n     *      M:  3-letter month (\"Jan\",\"Feb\",...,\"Dec\")\n     *      n:  month, without leading zeros (1,2,...,12)\n     *      s:  seconds, with leading zeros (00,01,...,59)\n     *      y:  2-digit year (eg, 14)\n     *      Y:  4-digit year (eg, 2014)\n     *\n     * For more inspiration, see: http://php.net/manual/en/function.date.php (of which we support ONLY a subset).\n     */\n    static formatDate(sFormat, date)\n    {\n        var sDate = \"\";\n        if (!date) date = new Date();\n        var iHour = date.getHours();\n        var iDay = date.getDate();\n        var iMonth = date.getMonth() + 1;\n        for (var i = 0; i < sFormat.length; i++) {\n            var ch;\n            switch ((ch = sFormat.charAt(i))) {\n            case 'a':\n                sDate += (iHour < 12 ? \"am\" : \"pm\");\n                break;\n            case 'd':\n                sDate += ('0' + iDay).slice(-2);\n                break;\n            case 'D':\n                sDate += Usr.asDays[date.getDay()].substr(0, 3);\n                break;\n            case 'F':\n                sDate += Usr.asMonths[iMonth - 1];\n                break;\n            case 'g':\n                sDate += (!iHour ? 12 : (iHour > 12 ? iHour - 12 : iHour));\n                break;\n            case 'h':\n                sDate += iHour;\n                break;\n            case 'H':\n                sDate += ('0' + iHour).slice(-2);\n                break;\n            case 'i':\n                sDate += ('0' + date.getMinutes()).slice(-2);\n                break;\n            case 'j':\n                sDate += iDay;\n                break;\n            case 'l':\n                sDate += Usr.asDays[date.getDay()];\n                break;\n            case 'm':\n                sDate += ('0' + iMonth).slice(-2);\n                break;\n            case 'M':\n                sDate += Usr.asMonths[iMonth - 1].substr(0, 3);\n                break;\n            case 'n':\n                sDate += iMonth;\n                break;\n            case 's':\n                sDate += ('0' + date.getSeconds()).slice(-2);\n                break;\n            case 'y':\n                sDate += (\"\" + date.getFullYear()).slice(-2);\n                break;\n            case 'Y':\n                sDate += date.getFullYear();\n                break;\n            default:\n                sDate += ch;\n                break;\n            }\n        }\n        return sDate;\n    }\n\n    /**\n     * defineBitFields(bfs)\n     *\n     * Prepares a bit field definition for use with getBitField() and setBitField(); eg:\n     *\n     *      var bfs = Usr.defineBitFields({num:20, count:8, btmod:1, type:3});\n     *\n     * The above defines a set of bit fields containing four fields: num (bits 0-19), count (bits 20-27), btmod (bit 28), and type (bits 29-31).\n     *\n     *      Usr.setBitField(bfs.num, n, 1);\n     *\n     * The above set bit field \"bfs.num\" in numeric variable \"n\" to the value 1.\n     *\n     * @param {Object} bfs\n     * @return {BitFields}\n     */\n    static defineBitFields(bfs)\n    {\n        var bit = 0;\n        for (var f in bfs) {\n            var width = bfs[f];\n            var mask = ((1 << width) - 1) << bit;\n            bfs[f] = {mask: mask, shift: bit};\n            bit += width;\n        }\n        return bfs;\n    }\n\n    /**\n     * initBitFields(bfs, ...)\n     *\n     * @param {BitFields} bfs\n     * @param {...number} var_args\n     * @return {number} a value containing all supplied bit fields\n     */\n    static initBitFields(bfs, var_args)\n    {\n        var v = 0, i = 1;\n        for (var f in bfs) {\n            if (i >= arguments.length) break;\n            v = Usr.setBitField(bfs[f], v, arguments[i++]);\n        }\n        return v;\n    }\n\n    /**\n     * getBitField(bf, v)\n     *\n     * @param {BitField} bf\n     * @param {number} v is a value containing bit fields\n     * @return {number} the value of the bit field in v defined by bf\n     */\n    static getBitField(bf, v)\n    {\n        return (v & bf.mask) >> bf.shift;\n    }\n\n    /**\n     * setBitField(bf, v, n)\n     *\n     * @param {BitField} bf\n     * @param {number} v is a value containing bit fields\n     * @param {number} n is a value to store in v in the bit field defined by bf\n     * @return {number} updated v\n     */\n    static setBitField(bf, v, n)\n    {\n        return (v & ~bf.mask) | ((n << bf.shift) & bf.mask);\n    }\n\n    /**\n     * indexOf(a, t, i)\n     *\n     * Use this instead of Array.prototype.indexOf() if you can't be sure the browser supports it.\n     *\n     * @param {Array} a\n     * @param {*} t\n     * @param {number} [i]\n     * @returns {number}\n     */\n    static indexOf(a, t, i)\n    {\n        if (Array.prototype.indexOf) {\n            return a.indexOf(t, i);\n        }\n        i = i || 0;\n        if (i < 0) i += a.length;\n        if (i < 0) i = 0;\n        for (var n = a.length; i < n; i++) {\n            if (i in a && a[i] === t) return i;\n        }\n        return -1;\n    }\n}\n\nUsr.asDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nUsr.asMonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nUsr.aMonthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n/**\n * getTime()\n *\n * @return {number} the current time, in milliseconds\n */\nUsr.getTime = Date.now || function() { return +new Date(); };\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/weblib.js (C) Jeff Parsons 2012-2018\n */\n\n\n/*\n * According to http://www.w3schools.com/jsref/jsref_obj_global.asp, these are the *global* properties\n * and functions of JavaScript-in-the-Browser:\n *\n * Property             Description\n * ---\n * Infinity             A numeric value that represents positive/negative infinity\n * NaN                  \"Not-a-Number\" value\n * undefined            Indicates that a variable has not been assigned a value\n *\n * Function             Description\n * ---\n * decodeURI()          Decodes a URI\n * decodeURIComponent() Decodes a URI component\n * encodeURI()          Encodes a URI\n * encodeURIComponent() Encodes a URI component\n * escape()             Deprecated in version 1.5. Use encodeURI() or encodeURIComponent() instead\n * eval()               Evaluates a string and executes it as if it was script code\n * isFinite()           Determines whether a value is a finite, legal number\n * isNaN()              Determines whether a value is an illegal number\n * Number()             Converts an object's value to a number\n * parseFloat()         Parses a string and returns a floating point number\n * parseInt()           Parses a string and returns an integer\n * String()             Converts an object's value to a string\n * unescape()           Deprecated in version 1.5. Use decodeURI() or decodeURIComponent() instead\n *\n * And according to http://www.w3schools.com/jsref/obj_window.asp, these are the properties and functions\n * of the *window* object.\n *\n * Property             Description\n * ---\n * closed               Returns a Boolean value indicating whether a window has been closed or not\n * defaultStatus        Sets or returns the default text in the statusbar of a window\n * document             Returns the Document object for the window (See Document object)\n * frames               Returns an array of all the frames (including iframes) in the current window\n * history              Returns the History object for the window (See History object)\n * innerHeight          Returns the inner height of a window's content area\n * innerWidth           Returns the inner width of a window's content area\n * length               Returns the number of frames (including iframes) in a window\n * location             Returns the Location object for the window (See Location object)\n * name                 Sets or returns the name of a window\n * navigator            Returns the Navigator object for the window (See Navigator object)\n * opener               Returns a reference to the window that created the window\n * outerHeight          Returns the outer height of a window, including toolbars/scrollbars\n * outerWidth           Returns the outer width of a window, including toolbars/scrollbars\n * pageXOffset          Returns the pixels the current document has been scrolled (horizontally) from the upper left corner of the window\n * pageYOffset          Returns the pixels the current document has been scrolled (vertically) from the upper left corner of the window\n * parent               Returns the parent window of the current window\n * screen               Returns the Screen object for the window (See Screen object)\n * screenLeft           Returns the x coordinate of the window relative to the screen\n * screenTop            Returns the y coordinate of the window relative to the screen\n * screenX              Returns the x coordinate of the window relative to the screen\n * screenY              Returns the y coordinate of the window relative to the screen\n * self                 Returns the current window\n * status               Sets or returns the text in the statusbar of a window\n * top                  Returns the topmost browser window\n *\n * Method               Description\n * ---\n * alert()              Displays an alert box with a message and an OK button\n * atob()               Decodes a base-64 encoded string\n * blur()               Removes focus from the current window\n * btoa()               Encodes a string in base-64\n * clearInterval()      Clears a timer set with setInterval()\n * clearTimeout()       Clears a timer set with setTimeout()\n * close()              Closes the current window\n * confirm()            Displays a dialog box with a message and an OK and a Cancel button\n * createPopup()        Creates a pop-up window\n * focus()              Sets focus to the current window\n * moveBy()             Moves a window relative to its current position\n * moveTo()             Moves a window to the specified position\n * open()               Opens a new browser window\n * print()              Prints the content of the current window\n * prompt()             Displays a dialog box that prompts the visitor for input\n * resizeBy()           Resizes the window by the specified pixels\n * resizeTo()           Resizes the window to the specified width and height\n * scroll()             This method has been replaced by the scrollTo() method.\n * scrollBy()           Scrolls the content by the specified number of pixels\n * scrollTo()           Scrolls the content to the specified coordinates\n * setInterval()        Calls a function or evaluates an expression at specified intervals (in milliseconds)\n * setTimeout()         Calls a function or evaluates an expression after a specified number of milliseconds\n * stop()               Stops the window from loading\n */\n\nclass Web {\n    /**\n     * log(s, type)\n     *\n     * For diagnostic output only.  DEBUG must be true (or \"--debug\" specified via the command-line)\n     * for Component.log() to display anything.\n     *\n     * @param {string} [s] is the message text\n     * @param {string} [type] is the message type\n     */\n    static log(s, type)\n    {\n        Component.log(s, type);\n    }\n\n    /**\n     * notice(s, fPrintOnly, id)\n     *\n     * @param {string} s is the message text\n     * @param {boolean} [fPrintOnly]\n     * @param {string} [id] is the caller's ID, if any\n     */\n    static notice(s, fPrintOnly, id)\n    {\n        Component.notice(s, fPrintOnly, id);\n    }\n\n    /**\n     * alertUser(sMessage)\n     * \n     * NOTE: Legacy function for older modules (eg, DiskDump); see Component.alertUser().\n     *\n     * @param {string} sMessage\n     */\n    static alertUser(sMessage)\n    {\n        if (window) {\n            window.alert(sMessage);\n        } else {\n            Web.log(sMessage);\n        }\n    }\n\n    /**\n     * getResource(sURL, type, fAsync, done, progress)\n     *\n     * Request the specified resource (sURL), and once the request is complete, notify done().\n     *\n     * If fAsync is true, a done() callback should ALWAYS be supplied; otherwise, you'll have no\n     * idea when the request is complete or what the response was.  done() is passed three parameters:\n     *\n     *      done(sURL, resource, nErrorCode)\n     *\n     * If nErrorCode is zero, resource should contain the requested data; otherwise, an error occurred.\n     *\n     * If type is set to a string, that string can be used to control the response format;\n     * by default, the response format is plain text, but you can specify \"arraybuffer\" to request arbitrary\n     * binary data, in which case the returned resource will be a ArrayBuffer rather than a string.\n     *\n     * @param {string} sURL\n     * @param {string|Object|null} [type] (object for POST request, otherwise type of GET request)\n     * @param {boolean} [fAsync] is true for an asynchronous request; false otherwise (MUST be set for IE)\n     * @param {function(string,string,number)} [done]\n     * @param {function(number)} [progress]\n     * @return {Array|null} Array containing [resource, nErrorCode], or null if no response available (yet)\n     */\n    static getResource(sURL, type = \"text\", fAsync = false, done, progress)\n    {\n        var nErrorCode = 0, resource = null, response = null;\n\n        if (typeof resources == 'object' && (resource = resources[sURL])) {\n            if (done) done(sURL, resource, nErrorCode);\n            return [resource, nErrorCode];\n        }\n        else if (fAsync && typeof resources == 'function') {\n            resources(sURL, function(resource, nErrorCode)\n            {\n                if (done) done(sURL, resource, nErrorCode);\n            });\n            return response;\n        }\n\n        if (DEBUG) {\n            /*\n             * The larger resources we put on archive.pcjs.org should also be available locally.\n             *\n             * NOTE: \"http://archive.pcjs.org\" is now \"https://s3-us-west-2.amazonaws.com/archive.pcjs.org\"\n             */\n            sURL = sURL.replace(/^(http:\\/\\/archive\\.pcjs\\.org|https:\\/\\/s3-us-west-2\\.amazonaws\\.com\\/archive\\.pcjs\\.org)(\\/.*)\\/([^\\/]*)$/, \"$2/archive/$3\");\n        }\n\n\n        var request = (window.XMLHttpRequest? new window.XMLHttpRequest() : new window.ActiveXObject(\"Microsoft.XMLHTTP\"));\n        var fArrayBuffer = false, fXHR2 = (typeof request.responseType === 'string');\n        \n        var callback = function() {\n            if (request.readyState !== 4) {\n                if (progress) progress(1);\n                return null;\n            }\n            /*\n             * The following line was recommended for WebKit, as a work-around to prevent the handler firing multiple\n             * times when debugging.  Unfortunately, that's not the only XMLHttpRequest problem that occurs when\n             * debugging, so I think the WebKit problem is deeper than that.  When we have multiple XMLHttpRequests\n             * pending, any debugging activity means most of them simply get dropped on floor, so what may actually be\n             * happening are mis-notifications rather than redundant notifications.\n             *\n             *      request.onreadystatechange = undefined;\n             */\n            /*\n             * If the request failed due to, say, a CORS policy denial; eg:\n             * \n             *      Failed to load http://www.allbootdisks.com/downloads/Disks/Windows_95_Boot_Disk_Download48/Diskette%20Images/Windows95a.img:\n             *      Redirect from 'http://www.allbootdisks.com/downloads/Disks/Windows_95_Boot_Disk_Download48/Diskette%20Images/Windows95a.img' to\n             *      'http://www.allbootdisks.com/' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.\n             *      Origin 'http://pcjs:8088' is therefore not allowed access.\n             *      \n             * and our request type was \"arraybuffer\", attempting to access responseText may trigger an exception; eg:\n             * \n             *      Uncaught DOMException: Failed to read the 'responseText' property from 'XMLHttpRequest': The value is only accessible if the object's\n             *      'responseType' is '' or 'text' (was 'arraybuffer').\n             * \n             * We could tiptoe around these potential landmines, but the safest thing to do is wrap this code with try/catch.\n             */\n            try {\n                resource = fArrayBuffer? request.response : request.responseText;\n            } catch(err) {\n                if (MAXDEBUG) Web.log(\"xmlHTTPRequest(\" + sURL + \") exception: \" + err.message);\n            }\n            /*\n             * The normal \"success\" case is a non-null resource and an HTTP status code of 200, but when loading files from the\n             * local file system (ie, when using the \"file:\" protocol), we have to be a bit more flexible.\n             */\n            if (resource != null && (request.status == 200 || !request.status && resource.length && Web.getHostProtocol() == \"file:\")) {\n                if (MAXDEBUG) Web.log(\"xmlHTTPRequest(\" + sURL + \"): returned \" + resource.length + \" bytes\");\n            }\n            else {\n                nErrorCode = request.status || -1;\n                Web.log(\"xmlHTTPRequest(\" + sURL + \"): error code \" + nErrorCode);\n            }\n            if (progress) progress(2);\n            if (done) done(sURL, resource, nErrorCode);\n            return [resource, nErrorCode];\n        };\n        \n        if (fAsync) {\n            request.onreadystatechange = callback;\n        }\n\n        if (progress) progress(0);\n\n        if (type && typeof type == \"object\") {\n            var sPost = \"\";\n            for (var p in type) {\n                if (!type.hasOwnProperty(p)) continue;\n                if (sPost) sPost += \"&\";\n                sPost += p + '=' + encodeURIComponent(type[p]);\n            }\n            sPost = sPost.replace(/%20/g, '+');\n            if (MAXDEBUG) Web.log(\"Web.getResource(POST \" + sURL + \"): \" + sPost.length + \" bytes\");\n            request.open(\"POST\", sURL, fAsync);\n            request.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n            request.send(sPost);\n        } else {\n            if (MAXDEBUG) Web.log(\"Web.getResource(GET \" + sURL + \")\");\n            request.open(\"GET\", sURL, fAsync);\n            if (type == \"arraybuffer\") {\n                if (fXHR2) {\n                    fArrayBuffer = true;\n                    request.responseType = type;\n                } else {\n                    request.overrideMimeType(\"text/plain; charset=x-user-defined\");\n                }\n            }\n            request.send();\n        }\n\n        if (!fAsync) {\n            request.readyState = 4;     // this may already be set for synchronous requests, but I don't want to take any chances \n            response = callback();\n        }\n        return response;\n    }\n\n    /**\n     * parseMemoryResource(sURL, sData)\n     *\n     * This converts a variety of JSON-style data streams into an Object with the following properties:\n     *\n     *      aBytes\n     *      aSymbols\n     *      addrLoad\n     *      addrExec\n     *\n     * If the source data contains a 'bytes' array, it's passed through to 'aBytes'; alternatively, if\n     * it contains a 'words' array, the values are converted from 16-bit to 8-bit and stored in 'aBytes',\n     * and if it contains a 'longs' array, the values are converted from 32-bit longs into bytes and\n     * stored in 'aBytes'.\n     *\n     * Alternatively, if the source data contains a 'data' array, we simply pass that through to the output\n     * object as:\n     *\n     *      aData\n     *\n     * @param {string} sURL\n     * @param {string} sData\n     * @return {Object|null} (resource)\n     */\n    static parseMemoryResource(sURL, sData)\n    {\n        var i;\n        var resource = {\n            aBytes: null,\n            aSymbols: null,\n            addrLoad: null,\n            addrExec: null\n        };\n\n        if (sData.charAt(0) == \"[\" || sData.charAt(0) == \"{\") {\n            try {\n                var a, ib, data;\n\n                if (sData.substr(0, 1) == \"<\") {    // if the \"data\" begins with a \"<\"...\n                    /*\n                     * Early server configs reported an error (via the nErrorCode parameter) if a tape URL was invalid,\n                     * but more recent server configs now display a somewhat friendlier HTML error page.  The downside,\n                     * however, is that the original error has been buried, and we've received \"data\" that isn't actually\n                     * tape data.  So if the data we've received appears to be \"HTML-like\", we treat it as an error message.\n                     */\n                    throw new Error(sData);\n                }\n\n                /*\n                 * TODO: IE9 is rather unfriendly and restrictive with regard to how much data it's willing to\n                 * eval().  In particular, the 10Mb disk image we use for the Windows 1.01 demo config fails in\n                 * IE9 with an \"Out of memory\" exception.  One work-around would be to chop the data into chunks\n                 * (perhaps one track per chunk, using regular expressions) and then manually re-assemble it.\n                 *\n                 * However, it turns out that using JSON.parse(sDiskData) instead of eval(\"(\" + sDiskData + \")\")\n                 * is a much easier fix. The only drawback is that we must first quote any unquoted property names\n                 * and remove any comments, because while eval() was cool with them, JSON.parse() is more particular;\n                 * the following RegExp replacements take care of those requirements.\n                 *\n                 * The use of hex values is something else that eval() was OK with, but JSON.parse() is not, and\n                 * while I've stopped using hex values in DumpAPI responses (at least when \"format=json\" is specified),\n                 * I can't guarantee they won't show up in \"legacy\" images, and there's no simple RegExp replacement\n                 * for transforming hex values into decimal values, so I cop out and fall back to eval() if I detect\n                 * any hex prefixes (\"0x\") in the sequence.  Ditto for error messages, which appear like so:\n                 *\n                 *      [\"unrecognized disk path: test.img\"]\n                 */\n                if (sData.indexOf(\"0x\") < 0 && sData.indexOf(\"0o\") < 0 && sData.substr(0, 2) != '[\"') {\n                    data = JSON.parse(sData.replace(/([a-z]+):/gm, '\"$1\":').replace(/\\/\\/[^\\n]*/gm, \"\"));\n                } else {\n                    data = eval(\"(\" + sData + \")\");\n                }\n\n                resource.addrLoad = data['load'];\n                resource.addrExec = data['exec'];\n\n                if (a = data['bytes']) {\n                    resource.aBytes = a;\n                }\n                else if (a = data['words']) {\n                    /*\n                     * Convert all words into bytes\n                     */\n                    resource.aBytes = new Array(a.length * 2);\n                    for (i = 0, ib = 0; i < a.length; i++) {\n                        resource.aBytes[ib++] = a[i] & 0xff;\n                        resource.aBytes[ib++] = (a[i] >> 8) & 0xff;\n\n                    }\n                }\n                else if (a = data['longs']) {\n                    /*\n                     * Convert all dwords (longs) into bytes\n                     */\n                    resource.aBytes = new Array(a.length * 4);\n                    for (i = 0, ib = 0; i < a.length; i++) {\n                        resource.aBytes[ib++] = a[i] & 0xff;\n                        resource.aBytes[ib++] = (a[i] >> 8) & 0xff;\n                        resource.aBytes[ib++] = (a[i] >> 16) & 0xff;\n                        resource.aBytes[ib++] = (a[i] >> 24) & 0xff;\n                    }\n                }\n                else if (a = data['data']) {\n                    resource.aData = a;\n                }\n                else {\n                    resource.aBytes = data;\n                }\n\n                if (resource.aBytes) {\n                    if (!resource.aBytes.length) {\n                        Component.error(\"Empty resource: \" + sURL);\n                        resource = null;\n                    }\n                    else if (resource.aBytes.length == 1) {\n                        Component.error(resource.aBytes[0]);\n                        resource = null;\n                    }\n                }\n                resource.aSymbols = data['symbols'];\n\n            } catch (e) {\n                Component.error(\"Resource data error (\" + sURL + \"): \" + e.message);\n                resource = null;\n            }\n        }\n        else {\n            /*\n             * Parse the data manually; we assume it's a series of hex byte-values separated by whitespace.\n             */\n            var ab = [];\n            var sHexData = sData.replace(/\\n/gm, \" \").replace(/ +$/, \"\");\n            var asHexData = sHexData.split(\" \");\n            for (i = 0; i < asHexData.length; i++) {\n                var n = parseInt(asHexData[i], 16);\n                if (isNaN(n)) {\n                    Component.error(\"Resource data error (\" + sURL + \"): invalid hex byte (\" + asHexData[i] + \")\");\n                    break;\n                }\n                ab.push(n & 0xff);\n            }\n            if (i == asHexData.length) resource.aBytes = ab;\n        }\n        return resource;\n    }\n\n    /**\n     * sendReport(sApp, sVer, sURL, sUser, sType, sReport, sHostName)\n     *\n     * Send a report (eg, bug report) to the server.\n     *\n     * @param {string} sApp (eg, \"PCjs\")\n     * @param {string} sVer (eg, \"1.02\")\n     * @param {string} sURL (eg, \"/devices/pc/machine/5150/mda/64kb/machine.xml\")\n     * @param {string} sUser (ie, the user key, if any)\n     * @param {string} sType (eg, \"bug\"); one of ReportAPI.TYPE.*\n     * @param {string} sReport (eg, unparsed state data)\n     * @param {string} [sHostName] (default is http://SITEHOST)\n     */\n    static sendReport(sApp, sVer, sURL, sUser, sType, sReport, sHostName)\n    {\n        var dataPost = {};\n        dataPost[ReportAPI.QUERY.APP] = sApp;\n        dataPost[ReportAPI.QUERY.VER] = sVer;\n        dataPost[ReportAPI.QUERY.URL] = sURL;\n        dataPost[ReportAPI.QUERY.USER] = sUser;\n        dataPost[ReportAPI.QUERY.TYPE] = sType;\n        dataPost[ReportAPI.QUERY.DATA] = sReport;\n        var sReportURL = (sHostName? sHostName : \"http://\" + SITEHOST) + ReportAPI.ENDPOINT;\n        Web.getResource(sReportURL, dataPost, true);\n    }\n\n    /**\n     * getHost()\n     *\n     * @return {string}\n     */\n    static getHost()\n    {\n        return (\"http://\" + (window? window.location.host : SITEHOST));\n    }\n\n    /**\n     * getHostURL()\n     *\n     * @return {string|null}\n     */\n    static getHostURL()\n    {\n        return (window? window.location.href : null);\n    }\n\n    /**\n     * getHostProtocol()\n     *\n     * @return {string}\n     */\n    static getHostProtocol()\n    {\n        return (window? window.location.protocol : \"file:\");\n    }\n\n    /**\n     * getUserAgent()\n     *\n     * @return {string}\n     */\n    static getUserAgent()\n    {\n        return (window? window.navigator.userAgent : \"\");\n    }\n\n    /**\n     * hasLocalStorage\n     *\n     * true if localStorage support exists, is enabled, and works; false otherwise\n     *\n     * @return {boolean}\n     */\n    static hasLocalStorage()\n    {\n        if (Web.fLocalStorage == null) {\n            var f = false;\n            if (window) {\n                try {\n                    window.localStorage.setItem(Web.sLocalStorageTest, Web.sLocalStorageTest);\n                    f = (window.localStorage.getItem(Web.sLocalStorageTest) == Web.sLocalStorageTest);\n                    window.localStorage.removeItem(Web.sLocalStorageTest);\n                } catch (e) {\n                    Web.logLocalStorageError(e);\n                    f = false;\n                }\n            }\n            Web.fLocalStorage = f;\n        }\n        return Web.fLocalStorage;\n    }\n\n    /**\n     * logLocalStorageError(e)\n     *\n     * @param {Error} e is an exception\n     */\n    static logLocalStorageError(e)\n    {\n        Web.log(e.message, \"localStorage error\");\n    }\n\n    /**\n     * getLocalStorageItem(sKey)\n     *\n     * Returns the requested key value, or null if the key does not exist, or undefined if localStorage is not available\n     *\n     * @param {string} sKey\n     * @return {string|null|undefined} sValue\n     */\n    static getLocalStorageItem(sKey)\n    {\n        var sValue;\n        if (window) {\n            try {\n                sValue = window.localStorage.getItem(sKey);\n            } catch (e) {\n                Web.logLocalStorageError(e);\n            }\n        }\n        return sValue;\n    }\n\n    /**\n     * setLocalStorageItem(sKey, sValue)\n     *\n     * @param {string} sKey\n     * @param {string} sValue\n     * @return {boolean} true if localStorage is available, false if not\n     */\n    static setLocalStorageItem(sKey, sValue)\n    {\n        try {\n            window.localStorage.setItem(sKey, sValue);\n            return true;\n        } catch (e) {\n            Web.logLocalStorageError(e);\n        }\n        return false;\n    }\n\n    /**\n     * removeLocalStorageItem(sKey)\n     *\n     * @param {string} sKey\n     */\n    static removeLocalStorageItem(sKey)\n    {\n        try {\n            window.localStorage.removeItem(sKey);\n        } catch (e) {\n            Web.logLocalStorageError(e);\n        }\n    }\n\n    /**\n     * getLocalStorageKeys()\n     *\n     * @return {Array}\n     */\n    static getLocalStorageKeys()\n    {\n        var a = [];\n        try {\n            for (var i = 0, c = window.localStorage.length; i < c; i++) {\n                a.push(window.localStorage.key(i));\n            }\n        } catch (e) {\n            Web.logLocalStorageError(e);\n        }\n        return a;\n    }\n\n    /**\n     * reloadPage()\n     */\n    static reloadPage()\n    {\n        if (window) window.location.reload();\n    }\n\n    /**\n     * isUserAgent(s)\n     *\n     * Check the browser's user-agent string for the given substring; \"iOS\" and \"MSIE\" are special values you can\n     * use that will match any iOS or MSIE browser, respectively (even IE11, in the case of \"MSIE\").\n     *\n     * 2013-11-06: In a questionable move, MSFT changed the user-agent reported by IE11 on Windows 8.1, eliminating\n     * the \"MSIE\" string (which MSDN calls a \"version token\"; see http://msdn.microsoft.com/library/ms537503.aspx);\n     * they say \"public websites should rely on feature detection, rather than browser detection, in order to design\n     * their sites for browsers that don't support the features used by the website.\" So, in IE11, we get a user-agent\n     * that tries to fool apps into thinking the browser is more like WebKit or Gecko:\n     *\n     *      Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko\n     *\n     * That's a nice idea, but in the meantime, they hosed the XSL transform code in embed.js, which contained\n     * some very critical browser-specific code; turning on IE's \"Compatibility Mode\" didn't help either, because\n     * that's a sledgehammer solution which restores the old user-agent string but also disables other features like\n     * HTML5 canvas support. As an interim solution, I'm treating any \"MSIE\" check as a check for either \"MSIE\" or\n     * \"Trident\".\n     *\n     * UPDATE: I've since found ways to make the code in embed.js more browser-agnostic, so for now, there's isn't\n     * any code that cares about \"MSIE\", but I've left the change in place, because I wouldn't be surprised if I'll\n     * need more IE-specific code in the future, perhaps for things like copy/paste functionality, or mouse capture.\n     *\n     * @param {string} s is a substring to search for in the user-agent; as noted above, \"iOS\" and \"MSIE\" are special values\n     * @return {boolean} is true if the string was found, false if not\n     */\n    static isUserAgent(s)\n    {\n        if (window) {\n            var userAgent = Web.getUserAgent();\n            /*\n             * Here's one case where we have to be careful with Component, because when isUserAgent() is called by\n             * the init code below, component.js hasn't been loaded yet.  The simple solution for now is to remove the call.\n             *\n             *      Web.log(\"agent: \" + userAgent);\n             *\n             * And yes, it would be pointless to use the conditional (?) operator below, if not for the Google Closure\n             * Compiler (v20130823) failing to detect the entire expression as a boolean.\n             */\n            return s == \"iOS\" && !!userAgent.match(/(iPod|iPhone|iPad)/) && !!userAgent.match(/AppleWebKit/) || s == \"MSIE\" && !!userAgent.match(/(MSIE|Trident)/) || (userAgent.indexOf(s) >= 0);\n        }\n        return false;\n    }\n\n    /**\n     * isMobile()\n     *\n     * Check the browser's user-agent string for the substring \"Mobi\", as per Mozilla recommendation:\n     *\n     *      https://developer.mozilla.org/en-US/docs/Browser_detection_using_the_user_agent\n     *\n     * @return {boolean} is true if the browser appears to be a mobile (ie, non-desktop) web browser, false if not\n     */\n    static isMobile()\n    {\n        return Web.isUserAgent(\"Mobi\");\n    }\n\n    /**\n     * findProperty(obj, sProp, sSuffix)\n     *\n     * If both sProp and sSuffix are set, then any browser-specific prefixes are inserted between sProp and sSuffix,\n     * and if a match is found, it is returned without sProp.\n     *\n     * For example, if findProperty(document, 'on', 'fullscreenchange') discovers that 'onwebkitfullscreenchange' exists,\n     * it will return 'webkitfullscreenchange', in preparation for an addEventListener() call.\n     *\n     * More commonly, sSuffix is not used, so whatever property is found is returned as-is.\n     *\n     * @param {Object|null|undefined} obj\n     * @param {string} sProp\n     * @param {string} [sSuffix]\n     * @return {string|null}\n     */\n    static findProperty(obj, sProp, sSuffix)\n    {\n        if (obj) {\n            for (var i = 0; i < Web.asBrowserPrefixes.length; i++) {\n                var sName = Web.asBrowserPrefixes[i];\n                if (sSuffix) {\n                    sName += sSuffix;\n                    var sEvent = sProp + sName;\n                    if (sEvent in obj) return sName;\n                } else {\n                    if (!sName) {\n                        sName = sProp[0];\n                    } else {\n                        sName += sProp[0].toUpperCase();\n                    }\n                    sName += sProp.substr(1);\n                    if (sName in obj) return sName;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * getURLParm(sParm)\n     *\n     * First looks for sParm exactly as specified, then looks for the lower-case version.\n     *\n     * @param {string} sParm\n     * @return {string|undefined}\n     */\n    static getURLParm(sParm)\n    {\n        if (!Web.parmsURL) {\n            Web.parmsURL = Web.parseURLParms();\n        }\n        return Web.parmsURL[sParm] || Web.parmsURL[sParm.toLowerCase()];\n    }\n\n    /**\n     * parseURLParms(sParms)\n     *\n     * @param {string} [sParms] containing the parameter portion of a URL (ie, after the '?')\n     * @return {Object} containing properties for each parameter found\n     */\n    static parseURLParms(sParms)\n    {\n        var aParms = {};\n        if (window) {       // an alternative to \"if (typeof module === 'undefined')\" if require(\"defines\") was used\n            if (!sParms) {\n                /*\n                 * Note that window.location.href returns the entire URL, whereas window.location.search\n                 * returns only the parameters, if any (starting with the '?', which we skip over with a substr() call).\n                 */\n                sParms = window.location.search.substr(1);\n            }\n            var match;\n            var pl = /\\+/g; // RegExp for replacing addition symbol with a space\n            var search = /([^&=]+)=?([^&]*)/g;\n            var decode = function(s)\n            {\n                return decodeURIComponent(s.replace(pl, \" \"));\n            };\n\n            while ((match = search.exec(sParms))) {\n                aParms[decode(match[1])] = decode(match[2]);\n            }\n        }\n        return aParms;\n    }\n\n    /**\n     * downloadFile(sData, sType, fBase64, sFileName)\n     *\n     * @param {string} sData\n     * @param {string} sType\n     * @param {boolean} [fBase64]\n     * @param {string} [sFileName]\n     */\n    static downloadFile(sData, sType, fBase64, sFileName)\n    {\n        var link = null, sAlert;\n        var sURI = \"data:application/\" + sType + (fBase64? \";base64\" : \"\") + \",\";\n\n        if (!Web.isUserAgent(\"Firefox\")) {\n            sURI += (fBase64? sData : encodeURI(sData));\n        } else {\n            sURI += (fBase64? sData : encodeURIComponent(sData));\n        }\n        if (sFileName) {\n            link = document.createElement('a');\n            if (typeof link.download != 'string') link = null;\n        }\n        if (link) {\n            link.href = sURI;\n            link.download = sFileName;\n            document.body.appendChild(link);    // Firefox allegedly requires the link to be in the body\n            link.click();\n            document.body.removeChild(link);\n            sAlert = 'Check your Downloads folder for ' + sFileName + '.';\n        } else {\n            window.open(sURI);\n            sAlert = 'Check your browser for a new window/tab containing the requested data' + (sFileName? (' (' + sFileName + ')') : '') + '.';\n        }\n        return sAlert;\n    }\n\n    /**\n     * onCountRepeat(n, fnRepeat, fnComplete, msDelay)\n     *\n     * Call fnRepeat() n times with an msDelay millisecond delay between calls,\n     * then call fnComplete() when n has been exhausted OR fnRepeat() returns false.\n     *\n     * @param {number} n\n     * @param {function()} fnRepeat\n     * @param {function()} fnComplete\n     * @param {number} [msDelay]\n     */\n    static onCountRepeat(n, fnRepeat, fnComplete, msDelay)\n    {\n        var fnTimeout = function doCountRepeat()\n        {\n            n -= 1;\n            if (n >= 0) {\n                if (!fnRepeat()) n = 0;\n            }\n            if (n > 0) {\n                setTimeout(fnTimeout, msDelay || 0);\n                return;\n            }\n            fnComplete();\n        };\n        fnTimeout();\n    }\n\n    /**\n     * onClickRepeat(e, msDelay, msRepeat, fn)\n     *\n     * Repeatedly call fn() with an initial msDelay, and an msRepeat delay thereafter,\n     * as long as HTML control Object e has an active \"down\" event and fn() returns true.\n     *\n     * @param {Object} e\n     * @param {number} msDelay\n     * @param {number} msRepeat\n     * @param {function(boolean)} fn is passed false on the first call, true on all repeated calls\n     */\n    static onClickRepeat(e, msDelay, msRepeat, fn)\n    {\n        var ms = 0, timer = null, fIgnoreMouseEvents = false;\n\n        var fnRepeat = function doClickRepeat()\n        {\n            if (fn(ms === msRepeat)) {\n                timer = setTimeout(fnRepeat, ms);\n                ms = msRepeat;\n            }\n        };\n        e.onmousedown = function()\n        {\n            // Web.log(\"onMouseDown()\");\n            if (!fIgnoreMouseEvents) {\n                if (!timer) {\n                    ms = msDelay;\n                    fnRepeat();\n                }\n            }\n        };\n        e.ontouchstart = function()\n        {\n            // Web.log(\"onTouchStart()\");\n            if (!timer) {\n                ms = msDelay;\n                fnRepeat();\n            }\n        };\n        e.onmouseup = e.onmouseout = function()\n        {\n            // Web.log(\"onMouseUp()/onMouseOut()\");\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n        };\n        e.ontouchend = e.ontouchcancel = function()\n        {\n            // Web.log(\"onTouchEnd()/onTouchCancel()\");\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            /*\n             * Devices that generate ontouch* events ALSO generate onmouse* events,\n             * and generally do so immediately after all the touch events are complete,\n             * so unless we want double the action, we need to ignore mouse events.\n             */\n            fIgnoreMouseEvents = true;\n        };\n    }\n\n    /**\n     * onPageEvent(sName, fn)\n     *\n     * For 'onload', 'onunload', and 'onpageshow' events, most callers should NOT use this function, but\n     * instead use Web.onInit(), Web.onShow(), and Web.onExit(), respectively.\n     *\n     * The only components that should still use onPageEvent() are THIS component (see the bottom of this file)\n     * and components that need to capture other events (eg, the 'onresize' event in the Video component).\n     *\n     * This function creates a chain of callbacks, allowing multiple JavaScript modules to define handlers\n     * for the same event, which wouldn't be possible if everyone modified window['onload'], window['onunload'],\n     * etc, themselves.  However, that's less of a concern now, because assuming everyone else is now using\n     * onInit(), onExit(), etc, then there really IS only one component setting the window callback: this one.\n     *\n     * NOTE: It's risky to refer to obscure event handlers with \"dot\" names, because the Closure Compiler may\n     * erroneously replace them (eg, window.onpageshow is a good example).\n     *\n     * @param {string} sFunc\n     * @param {function()} fn\n     */\n    static onPageEvent(sFunc, fn)\n    {\n        if (window) {\n            var fnPrev = window[sFunc];\n            if (typeof fnPrev !== 'function') {\n                window[sFunc] = fn;\n            } else {\n                /*\n                 * TODO: Determine whether there's any value in receiving/sending the Event object that the\n                 * browser provides when it generates the original event.\n                 */\n                window[sFunc] = function onWindowEvent()\n                {\n                    if (fnPrev) fnPrev();\n                    fn();\n                };\n            }\n        }\n    };\n\n    /**\n     * onInit(fn)\n     *\n     * Use this instead of setting window.onload.  Allows multiple JavaScript modules to define their own 'onload' event handler.\n     *\n     * @param {function()} fn\n     */\n    static onInit(fn)\n    {\n        Web.aPageEventHandlers['init'].push(fn);\n    };\n\n    /**\n     * onShow(fn)\n     *\n     * @param {function()} fn\n     *\n     * Use this instead of setting window.onpageshow.  Allows multiple JavaScript modules to define their own 'onpageshow' event handler.\n     */\n    static onShow(fn)\n    {\n        Web.aPageEventHandlers['show'].push(fn);\n    };\n\n    /**\n     * onExit(fn)\n     *\n     * @param {function()} fn\n     *\n     * Use this instead of setting window.onunload.  Allows multiple JavaScript modules to define their own 'onunload' event handler.\n     */\n    static onExit(fn)\n    {\n        Web.aPageEventHandlers['exit'].push(fn);\n    };\n\n    /**\n     * doPageEvent(afn)\n     *\n     * @param {Array.<function()>} afn\n     */\n    static doPageEvent(afn)\n    {\n        if (Web.fPageEventsEnabled) {\n            try {\n                for (var i = 0; i < afn.length; i++) {\n                    afn[i]();\n                }\n            } catch (e) {\n                Web.notice(\"An unexpected error occurred: \" + e.message + \"\\n\\nIf it happens again, please send this information to support@pcjs.org. Thanks.\");\n            }\n        }\n    };\n\n    /**\n     * enablePageEvents(fEnable)\n     *\n     * @param {boolean} fEnable is true to enable page events, false to disable (they're enabled by default)\n     */\n    static enablePageEvents(fEnable)\n    {\n        if (!Web.fPageEventsEnabled && fEnable) {\n            Web.fPageEventsEnabled = true;\n            if (Web.fPageLoaded) Web.sendPageEvent('init');\n            if (Web.fPageShowed) Web.sendPageEvent('show');\n            return;\n        }\n        Web.fPageEventsEnabled = fEnable;\n    }\n\n    /**\n     * sendPageEvent(sEvent)\n     *\n     * This allows us to manually trigger page events.\n     *\n     * @param {string} sEvent (one of 'init', 'show' or 'exit')\n     */\n    static sendPageEvent(sEvent)\n    {\n        if (Web.aPageEventHandlers[sEvent]) {\n            Web.doPageEvent(Web.aPageEventHandlers[sEvent]);\n        }\n    }\n}\n\nWeb.parmsURL = null;            // initialized on first call to parseURLParms()\n\nWeb.aPageEventHandlers = {\n    'init': [],                 // list of window 'onload' handlers\n    'show': [],                 // list of window 'onpageshow' handlers\n    'exit': []                  // list of window 'onunload' handlers (although we prefer to use 'onbeforeunload' if possible)\n};\n\nWeb.asBrowserPrefixes = ['', 'moz', 'ms', 'webkit'];\n\nWeb.fPageLoaded = false;        // set once the page's first 'onload' event has occurred\nWeb.fPageShowed = false;        // set once the page's first 'onpageshow' event has occurred\nWeb.fPageEventsEnabled = true;  // default is true, set to false (or true) by enablePageEvents()\n\n/**\n * fLocalStorage\n *\n * true if localStorage support exists, is enabled, and works; \"falsey\" otherwise\n *\n * @type {boolean|null}\n */\nWeb.fLocalStorage = null;\n\n/**\n * TODO: Is there any way to get the Closure Compiler to stop inlining this string?  This isn't cutting it.\n *\n * @const {string}\n */\nWeb.sLocalStorageTest = \"PCjs.localStorage\";\n\nWeb.onPageEvent('onload', function onPageLoad() {\n    Web.fPageLoaded = true;\n    Web.doPageEvent(Web.aPageEventHandlers['init']);\n});\n\nWeb.onPageEvent('onpageshow', function onPageShow() {\n    Web.fPageShowed = true;\n    Web.doPageEvent(Web.aPageEventHandlers['show']);\n});\n\nWeb.onPageEvent(Web.isUserAgent(\"iOS\")? 'onpagehide' : (Web.isUserAgent(\"Opera\")? 'onunload' : 'onbeforeunload'), function onPageUnload() {\n    Web.doPageEvent(Web.aPageEventHandlers['exit']);\n});\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/component.js (C) Jeff Parsons 2012-2018\n */\n\n/*\n * All PCjs components now use JSDoc types, primarily so that Google's Closure Compiler will compile\n * everything with zero warnings when ADVANCED_OPTIMIZATIONS are enabled.  For more information about\n * the JSDoc types supported by the Closure Compiler:\n *\n *      https://developers.google.com/closure/compiler/docs/js-for-compiler#types\n *\n * I also attempted to validate this code with JSLint, but it complained too much; eg, it didn't like\n * \"while (true)\", a tried and \"true\" programming convention for decades, and it wanted me to replace\n * all \"++\" and \"--\" operators with \"+= 1\" and \"-= 1\", use \"(s || '')\" instead of \"(s? s : '')\", etc.\n *\n * I prefer sticking with traditional C-style idioms, in part because they are more portable.  That\n * does NOT mean I'm trying to write \"portable JavaScript,\" but some of this code was ported from C code\n * I'd written long ago, so portability is good, and I'm not going to throw that away if there's no need.\n *\n * UPDATE: I've since switched from JSLint to JSHint, which seems to have more reasonable defaults.\n * And for new code, I have adopted some popular JavaScript idioms, like \"(s || '')\", although the need\n * for those kinds of expressions will be reduced as I also start adopting some ES6 features, like\n * default parameters.\n */\n\n\n/**\n * Since the Closure Compiler treats ES6 classes as @struct rather than @dict by default,\n * it deters us from defining named properties on our components; eg:\n *\n *      this['exports'] = {...}\n *\n * results in an error:\n *\n *      Cannot do '[]' access on a struct\n *\n * So, in order to define 'exports', we must override the @struct assumption by annotating\n * the class as @unrestricted (or @dict).  Note that this must be done both here and in the\n * subclass (eg, SerialPort), because otherwise the Compiler won't allow us to *reference*\n * the named property either.\n *\n * TODO: Consider marking ALL our classes unrestricted, because otherwise it forces us to\n * define every single property the class uses in its constructor, which results in a fair\n * bit of redundant initialization, since many properties aren't (and don't need to be) fully\n * initialized until the appropriate init(), reset(), restore(), etc. function is called.\n *\n * The upside, however, may be that since the structure of the class is completely defined by\n * the constructor, JavaScript engines may be able to optimize and run more efficiently.\n *\n * @unrestricted\n */\nclass Component {\n    /**\n     * Component(type, parms, bitsMessage)\n     *\n     * A Component object requires:\n     *\n     *      type: a user-defined type name (eg, \"CPU\")\n     *\n     * and accepts any or all of the following (parms) properties:\n     *\n     *      id: component ID (default is \"\")\n     *      name: component name (default is \"\"; if blank, toString() will use the type name only)\n     *      comment: component comment string (default is undefined)\n     *\n     * Component subclasses will usually have additional (parms) properties.\n     *\n     * @param {string} type\n     * @param {Object} [parms]\n     * @param {number} [bitsMessage] selects message(s) that the component wants to enable (default is 0)\n     */\n    constructor(type, parms, bitsMessage)\n    {\n        this.type = type;\n\n        if (!parms) parms = {'id': \"\", 'name': \"\"};\n\n        this.id = parms['id'] || \"\";\n        this.name = parms['name'];\n        this.comment = parms['comment'];\n        this.parms = parms;\n\n        /*\n         * The following Component properties need to be accessible by other machines and/or command scripts;\n         * well, OK, or we could have exported some new functions to walk the contents of these properties, as we\n         * did with findMachineComponent(), but this works just as well.\n         *\n         * Also, while the double-assignment looks silly (ie, using both dot and bracket property notation), it\n         * resolves a complaint from the Closure Compiler, because if we use ONLY bracket notation here, then the\n         * Compiler wants us to change all the other references to bracket notation as well.\n         */\n        this.exports = this['exports'] = {};\n        this.bindings = this['bindings'] = {};\n\n        var i = this.id.indexOf('.');\n        if (i < 0) {\n            this.idComponent = this.id;\n        } else {\n            this.idMachine = this.id.substr(0, i);\n            this.idComponent = this.id.substr(i + 1);\n        }\n\n        /*\n         * Gather all the various component flags (booleans) into a single \"flags\" object, and encourage\n         * subclasses to do the same, to reduce the property clutter we have to wade through while debugging.\n         */\n        this.flags = {\n            ready:      false,\n            busy:       false,\n            busyCancel: false,\n            initDone:   false,\n            powered:    false,\n            unloading:  false,\n            error:      false\n        };\n\n        this.fnReady = null;\n        this.clearError();\n        this.bitsMessage = bitsMessage || 0;\n\n        this.cmp = null;\n        this.bus = null;\n        this.cpu = null;\n        this.dbg = null;\n\n        /*\n         * TODO: Consider adding another parameter to the Component() constructor that allows components to tell\n         * us if they support single or multiple instances per machine.  For example, there can be multiple SerialPort\n         * components per machine, but only one CPU component (some machines also support an FPU, but that component\n         * is considered separate from the CPU).\n         *\n         * It's not critical, but it would help catch machine configuration errors; for example, a machine that mistakenly\n         * includes two CPU components may, aside from wasting memory, end up with odd side-effects, like unresponsive\n         * CPU controls.\n         */\n        Component.add(this);\n    }\n\n    /**\n     * Component.add(component)\n     *\n     * @param {Component} component\n     */\n    static add(component)\n    {\n        /*\n         * This just generates a lot of useless noise, handy in the early days, not so much these days....\n         *\n         *      if (DEBUG) Component.log(\"Component.add(\" + component.type + \",\" + component.id + \")\");\n         */\n        Component.components.push(component);\n    }\n\n    /**\n     * Component.addMachine(idMachine)\n     *\n     * @param {string} idMachine\n     */\n    static addMachine(idMachine)\n    {\n        Component.machines[idMachine] = {};\n    }\n\n    /**\n     * Component.addMachineResource(idMachine, sName, data)\n     *\n     * @param {string} idMachine\n     * @param {string|null} sName (name of the resource)\n     * @param {*} data\n     */\n    static addMachineResource(idMachine, sName, data)\n    {\n        /*\n         * I used to assert(Component.machines[idMachine]), but when we're running as a Node app, embed.js is not used,\n         * so addMachine() is never called, so resources do not need to be recorded.\n         */\n        if (Component.machines[idMachine] && sName) {\n            Component.machines[idMachine][sName] = data;\n        }\n    }\n\n    /**\n     * Component.getMachineResources(idMachine)\n     *\n     * @param {string} idMachine\n     * @return {Object|undefined}\n     */\n    static getMachineResources(idMachine)\n    {\n        return Component.machines[idMachine];\n    }\n\n    /**\n     * Component.getTime()\n     *\n     * @return {number} the current time, in milliseconds\n     */\n    static getTime()\n    {\n        return Date.now() || +new Date();\n    }\n\n    /**\n     * Component.log(s, type)\n     *\n     * For diagnostic output only.\n     *\n     * @param {string} [s] is the message text\n     * @param {string} [type] is the message type\n     */\n    static log(s, type)\n    {\n        if (!COMPILED) {\n            if (s) {\n                var sElapsed = \"\", sMsg = (type? (type + \": \") : \"\") + s;\n                if (typeof Usr != \"undefined\") {\n                    if (Component.msStart === undefined) {\n                        Component.msStart = Component.getTime();\n                    }\n                    sElapsed = (Component.getTime() - Component.msStart) + \"ms: \";\n                }\n                sMsg = sMsg.replace(/\\r/g, '\\\\r').replace(/\\n/g, ' ');\n                if (window && window.console) console.log(sElapsed + sMsg);\n            }\n        }\n    }\n\n    /**\n     * Component.assert(f, s)\n     *\n     * Verifies conditions that must be true (for DEBUG builds only).\n     *\n     * The Closure Compiler should automatically remove all references to Component.assert() in non-DEBUG builds.\n     * TODO: Add a task to the build process that \"asserts\" there are no instances of \"assertion failure\" in RELEASE builds.\n     *\n     * @param {boolean} f is the expression we are asserting to be true\n     * @param {string} [s] is description of the assertion on failure\n     */\n    static assert(f, s)\n    {\n        if (DEBUG) {\n            if (!f) {\n                if (!s) s = \"assertion failure\";\n                Component.log(s);\n                throw new Error(s);\n            }\n        }\n    }\n\n    /**\n     * Component.print(s)\n     *\n     * Components that inherit from this class should use this.print(), rather than Component.print(), because\n     * if a Control Panel is loaded, it will override only the instance method, not the class method (overriding the\n     * class method would improperly affect any other machines loaded on the same page).\n     *\n     * @this {Component}\n     * @param {string} s\n     */\n    static print(s)\n    {\n        if (!COMPILED) {\n            var i = s.lastIndexOf('\\n');\n            if (i >= 0) {\n                Component.println(s.substr(0, i));\n                s = s.substr(i + 1);\n            }\n            Component.printBuffer += s;\n        }\n    }\n\n    /**\n     * Component.println(s, type, id)\n     *\n     * Components that inherit from this class should use this.println(), rather than Component.println(), because\n     * if a Control Panel is loaded, it will override only the instance method, not the class method (overriding the\n     * class method would improperly affect any other machines loaded on the same page).\n     *\n     * @param {string} [s] is the message text\n     * @param {string} [type] is the message type\n     * @param {string} [id] is the caller's ID, if any\n     */\n    static println(s, type, id)\n    {\n        if (!COMPILED) {\n            s = Component.printBuffer + (s || \"\");\n            Component.log((id? (id + \": \") : \"\") + (s? (\"\\\"\" + s + \"\\\"\") : \"\"), type);\n            Component.printBuffer = \"\";\n        }\n    }\n\n    /**\n     * Component.notice(s, fPrintOnly, id)\n     *\n     * notice() is like println() but implies a need for user notification, so we alert() as well.\n     *\n     * @param {string} s is the message text\n     * @param {boolean} [fPrintOnly]\n     * @param {string} [id] is the caller's ID, if any\n     * @return {boolean}\n     */\n    static notice(s, fPrintOnly, id)\n    {\n        if (!COMPILED) {\n            Component.println(s, Component.PRINT.NOTICE, id);\n        }\n        if (!fPrintOnly) Component.alertUser((id? (id + \": \") : \"\") + s);\n        return true;\n    }\n\n    /**\n     * Component.warning(s)\n     *\n     * @param {string} s describes the warning\n     */\n    static warning(s)\n    {\n        if (!COMPILED) {\n            Component.println(s, Component.PRINT.WARNING);\n        }\n        Component.alertUser(s);\n    }\n\n    /**\n     * Component.error(s)\n     *\n     * @param {string} s describes the error; an alert() is displayed as well\n     */\n    static error(s)\n    {\n        if (!COMPILED) {\n            Component.println(s, Component.PRINT.ERROR);\n        }\n        Component.alertUser(s);\n    }\n\n    /**\n     * Component.alertUser(sMessage)\n     *\n     * @param {string} sMessage\n     */\n    static alertUser(sMessage)\n    {\n        if (window) {\n            window.alert(sMessage);\n        } else {\n            Component.log(sMessage);\n        }\n    }\n\n    /**\n     * Component.confirmUser(sPrompt)\n     *\n     * @param {string} sPrompt\n     * @returns {boolean} true if the user clicked OK, false if Cancel/Close\n     */\n    static confirmUser(sPrompt)\n    {\n        var fResponse = false;\n        if (window) {\n            fResponse = window.confirm(sPrompt);\n        }\n        return fResponse;\n    }\n\n    /**\n     * Component.promptUser()\n     *\n     * @param {string} sPrompt\n     * @param {string} [sDefault]\n     * @returns {string|null}\n     */\n    static promptUser(sPrompt, sDefault)\n    {\n        var sResponse = null;\n        if (window) {\n            sResponse = window.prompt(sPrompt, sDefault === undefined? \"\" : sDefault);\n        }\n        return sResponse;\n    }\n\n    /**\n     * Component.appendControl(control, sText)\n     *\n     * @param {Object} control\n     * @param {string} sText\n     */\n    static appendControl(control, sText)\n    {\n        control.value += sText;\n        /*\n         * Prevent the <textarea> from getting too large; otherwise, printing becomes slower and slower.\n         */\n        if (COMPILED) {\n            sText = control.value;\n            if (sText.length > 8192) control.value = sText.substr(sText.length - 4096);\n        }\n        control.scrollTop = control.scrollHeight;\n    }\n\n    /**\n     * Component.replaceControl(control, sSearch, sReplace)\n     *\n     * @param {Object} control\n     * @param {string} sSearch\n     * @param {string} sReplace\n     */\n    static replaceControl(control, sSearch, sReplace)\n    {\n        var sText = control.value;\n        var i = sText.lastIndexOf(sSearch);\n        if (i < 0) {\n            sText += sSearch + '\\n';\n        } else {\n            sText = sText.substr(0, i) + sReplace + sText.substr(i + sSearch.length);\n        }\n        /*\n         * Prevent the <textarea> from getting too large; otherwise, printing becomes slower and slower.\n         */\n        if (COMPILED && sText.length > 8192) sText = sText.substr(sText.length - 4096);\n        control.value = sText;\n        control.scrollTop = control.scrollHeight;\n    }\n\n    /**\n     * Component.bindExternalControl(component, sControl, sBinding, sType)\n     *\n     * @param {Component} component\n     * @param {string} sControl\n     * @param {string} sBinding\n     * @param {string} [sType] is the external component type\n     */\n    static bindExternalControl(component, sControl, sBinding, sType)\n    {\n        if (sControl) {\n            if (sType === undefined) sType = \"Panel\";\n            var target = Component.getComponentByType(sType, component.id);\n            if (target) {\n                var eBinding = target.bindings[sControl];\n                if (eBinding) {\n                    component.setBinding(null, sBinding, eBinding);\n                }\n            }\n        }\n    }\n\n    /**\n     * Component.bindComponentControls(component, element, sAppClass)\n     *\n     * @param {Component} component\n     * @param {HTMLElement} element from the DOM\n     * @param {string} sAppClass\n     */\n    static bindComponentControls(component, element, sAppClass)\n    {\n        var aeControls = Component.getElementsByClass(element.parentNode, sAppClass + \"-control\");\n\n        for (var iControl = 0; iControl < aeControls.length; iControl++) {\n\n            var aeChildNodes = aeControls[iControl].childNodes;\n\n            for (var iNode = 0; iNode < aeChildNodes.length; iNode++) {\n                var control = aeChildNodes[iNode];\n                if (control.nodeType !== 1 /* document.ELEMENT_NODE */) {\n                    continue;\n                }\n                var sClass = control.getAttribute(\"class\");\n                if (!sClass) continue;\n                var aClasses = sClass.split(\" \");\n                for (var iClass = 0; iClass < aClasses.length; iClass++) {\n                    var parms;\n                    sClass = aClasses[iClass];\n                    switch (sClass) {\n                        case sAppClass + \"-binding\":\n                            parms = Component.getComponentParms(/** @type {HTMLElement} */(control));\n                            if (parms && parms['binding']) {\n                                component.setBinding(parms['type'], parms['binding'], /** @type {HTMLElement} */(control), parms['value']);\n                            } else if (!parms || parms['type'] != \"description\") {\n                                Component.log(\"Component '\" + component.toString() + \"' missing binding\" + (parms? \" for \" + parms['type'] : \"\"), \"warning\");\n                            }\n                            iClass = aClasses.length;\n                            break;\n                        default:\n                            // if (DEBUG) Component.log(\"Component.bindComponentControls(\" + component.toString() + \"): unrecognized control class \\\"\" + sClass + \"\\\"\", \"warning\");\n                            break;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Component.getComponents(idRelated)\n     *\n     * We could store components as properties, using the component's ID, and change\n     * this linear lookup into a property lookup, but some components may have no ID.\n     *\n     * @param {string} [idRelated] of related component\n     * @return {Array} of components\n     */\n    static getComponents(idRelated)\n    {\n        var i;\n        var aComponents = [];\n        /*\n         * getComponentByID(id, idRelated)\n         *\n         * If idRelated is provided, we check it for a machine prefix, and use any\n         * existing prefix to constrain matches to IDs with the same prefix, in order to\n         * avoid matching components belonging to other machines.\n         */\n        if (idRelated) {\n            if ((i = idRelated.indexOf('.')) > 0)\n                idRelated = idRelated.substr(0, i + 1);\n            else\n                idRelated = \"\";\n        }\n        for (i = 0; i < Component.components.length; i++) {\n            var component = Component.components[i];\n            if (!idRelated || !component.id.indexOf(idRelated)) {\n                aComponents.push(component);\n            }\n        }\n        return aComponents;\n    }\n\n    /**\n     * Component.getComponentByID(id, idRelated)\n     *\n     * We could store components as properties, using the component's ID, and change\n     * this linear lookup into a property lookup, but some components may have no ID.\n     *\n     * @param {string} id of the desired component\n     * @param {string} [idRelated] of related component\n     * @return {Component|null}\n     */\n    static getComponentByID(id, idRelated)\n    {\n        if (id !== undefined) {\n            var i;\n            /*\n             * If idRelated is provided, we check it for a machine prefix, and use any\n             * existing prefix to constrain matches to IDs with the same prefix, in order to\n             * avoid matching components belonging to other machines.\n             */\n            if (idRelated && (i = idRelated.indexOf('.')) > 0) {\n                id = idRelated.substr(0, i + 1) + id;\n            }\n            for (i = 0; i < Component.components.length; i++) {\n                if (Component.components[i].id === id) {\n                    return Component.components[i];\n                }\n            }\n            if (Component.components.length) {\n                Component.log(\"Component ID '\" + id + \"' not found\", \"warning\");\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Component.getComponentByType(sType, idRelated, componentPrev)\n     *\n     * @param {string} sType of the desired component\n     * @param {string} [idRelated] of related component\n     * @param {Component|null} [componentPrev] of previously returned component, if any\n     * @return {Component|null}\n     */\n    static getComponentByType(sType, idRelated, componentPrev)\n    {\n        if (sType !== undefined) {\n            var i;\n            /*\n             * If idRelated is provided, we check it for a machine prefix, and use any\n             * existing prefix to constrain matches to IDs with the same prefix, in order to\n             * avoid matching components belonging to other machines.\n             */\n            if (idRelated) {\n                if ((i = idRelated.indexOf('.')) > 0) {\n                    idRelated = idRelated.substr(0, i + 1);\n                } else {\n                    idRelated = \"\";\n                }\n            }\n            for (i = 0; i < Component.components.length; i++) {\n                if (componentPrev) {\n                    if (componentPrev == Component.components[i]) componentPrev = null;\n                    continue;\n                }\n                if (sType == Component.components[i].type && (!idRelated || !Component.components[i].id.indexOf(idRelated))) {\n                    return Component.components[i];\n                }\n            }\n            Component.log(\"Component type '\" + sType + \"' not found\", \"warning\");\n        }\n        return null;\n    }\n\n    /**\n     * Component.getComponentParms(element)\n     *\n     * @param {HTMLElement} element from the DOM\n     */\n    static getComponentParms(element)\n    {\n        var parms = null;\n        var sParms = element.getAttribute(\"data-value\");\n        if (sParms) {\n            try {\n                parms = eval('(' + sParms + ')');   // jshint ignore:line\n                /*\n                 * We can no longer invoke removeAttribute() because some components (eg, Panel) need\n                 * to run their initXXX() code more than once, to avoid initialization-order dependencies.\n                 *\n                 *      if (!DEBUG) {\n                 *          element.removeAttribute(\"data-value\");\n                 *      }\n                 */\n            } catch(e) {\n                Component.error(e.message + \" (\" + sParms + \")\");\n            }\n        }\n        return parms;\n    }\n\n    /**\n     * Component.getElementsByClass(element, sClass, sObjClass)\n     *\n     * This is a cross-browser helper function, since not all browser's support getElementsByClassName()\n     *\n     * TODO: This should probably be moved into weblib.js at some point, along with the control binding functions above,\n     * to keep all the browser-related code together.\n     *\n     * @param {HTMLDocument|HTMLElement|Node} element from the DOM\n     * @param {string} sClass\n     * @param {string} [sObjClass]\n     * @return {Array|NodeList}\n     */\n    static getElementsByClass(element, sClass, sObjClass)\n    {\n        if (sObjClass) sClass += '-' + sObjClass + \"-object\";\n        /*\n         * Use the browser's built-in getElementsByClassName() if it appears to be available\n         * (for example, it's not available in IE8, but it should be available in IE9 and up)\n         */\n        if (element.getElementsByClassName) {\n            return element.getElementsByClassName(sClass);\n        }\n        var i, j, ae = [];\n        var aeAll = element.getElementsByTagName(\"*\");\n        var re = new RegExp('(^| )' + sClass + '( |$)');\n        for (i = 0, j = aeAll.length; i < j; i++) {\n            if (re.test(aeAll[i].className)) {\n                ae.push(aeAll[i]);\n            }\n        }\n        if (!ae.length) {\n            Component.log('No elements of class \"' + sClass + '\" found');\n        }\n        return ae;\n    }\n\n    /**\n     * Component.getScriptCommands(sScript)\n     *\n     * This is a simple parser that breaks sScript into an array of commands, where each command\n     * is an array of tokens, where tokens are sequences of characters separated by any of: tab, space,\n     * carriage-return (CR), line-feed (LF), semicolon, single-quote, or double-quote; if a quote is\n     * used, all characters up to the next matching quote become part of the token, allowing any of the\n     * other separators to be part of the token.  CR, LF and semicolon also serve to terminate a command,\n     * with semicolon being preferred, because it's 1) more visible, and 2) essential when the entire\n     * script is a multi-line string where all CR/LF were replaced by spaces (which is what Jekyll does,\n     * and since we can't change Jekyll, it's what our own MarkDown Front Matter parser does as well;\n     * see convertMD() in markout.js, where the aCommandDefs array is built).\n     *\n     * Backslash sequences like \\n, \\r, and \\\\ have already been converted to LF, CR and backslash\n     * characters, since the entire script string is injected into a JavaScript function call, so any\n     * backslash sequence that JavaScript supports is automatically converted:\n     *\n     *      \\0  \\'  \\\"  \\\\  \\n  \\r  \\v  \\t  \\b  \\f  \\uXXXX \\xXX\n     *                      ^J  ^M  ^K  ^I  ^H  ^L\n     *\n     * To support any other non-printable 8-bit character, such as ESC, you should use \\xXX, where XX\n     * is the ASCII code in hex.  For ESC, that would be \\x1B.\n     *\n     * @param {string} sScript\n     * @return {Array}\n     */\n    static getScriptCommands(sScript)\n    {\n        var cch = sScript.length;\n        var aCommands = [], aTokens = [], sToken = \"\", chQuote = null;\n        for (var i = 0; i < cch; i++) {\n            var ch = sScript[i];\n            if (ch == '\"' || ch == \"'\") {\n                if (chQuote && ch != chQuote) {\n                    sToken += ch;\n                    continue;\n                }\n                if (!chQuote) {\n                    chQuote = ch;\n                } else {\n                    chQuote = null;\n                }\n                if (sToken) {\n                    aTokens.push(sToken);\n                    sToken = \"\";\n                }\n                continue;\n            }\n            if (!chQuote) {\n                if (ch == '\\r' || ch == '\\n') {\n                    ch = ';';\n                }\n                if (ch == ' ' || ch == '\\t' || ch == ';') {\n                    if (sToken) {\n                        aTokens.push(sToken);\n                        sToken = \"\";\n                    }\n                    if (ch == ';' && aTokens.length) {\n                        aCommands.push(aTokens);\n                        aTokens = [];\n                    }\n                    continue;\n                }\n            }\n            sToken += ch;\n        }\n        if (sToken) {\n            aTokens.push(sToken);\n        }\n        if (aTokens.length) {\n            aCommands.push(aTokens);\n        }\n        return aCommands;\n    }\n\n    /**\n     * Component.processScript(idMachine, sScript)\n     *\n     * @param {string} idMachine\n     * @param {string} [sScript]\n     * @return {boolean}\n     */\n    static processScript(idMachine, sScript)\n    {\n        var fSuccess = false;\n        idMachine += \".machine\";\n        if (!sScript) {\n            delete Component.commands[idMachine];\n            fSuccess = true;\n        }\n        else if (typeof sScript == \"string\" && !Component.commands[idMachine]) {\n            fSuccess = true;\n            Component.commands[idMachine] = Component.getScriptCommands(sScript);\n            if (!Component.processCommands(idMachine)) {\n                fSuccess = false;\n            }\n        }\n        return fSuccess;\n    }\n\n    /**\n     * Component.processCommands(idMachine)\n     *\n     * @param {string} idMachine\n     * @return {boolean}\n     */\n    static processCommands(idMachine)\n    {\n        var fSuccess = true;\n        var aCommands = Component.commands[idMachine];\n\n     // var dbg = Component.getComponentByType(\"Debugger\", idMachine);\n\n        while (aCommands && aCommands.length) {\n\n            var aTokens = aCommands.splice(0, 1)[0];\n            var sCommand = aTokens[0];\n\n            /*\n             * It's possible to route this output to the Debugger window with dbg.println()\n             * instead, but it's a bit too confusing mingling script output in a window that\n             * already mingles Debugger and machine output.\n             */\n            Component.println(aTokens.join(' '), Component.PRINT.SCRIPT);\n\n            var fnCallReady = null;\n            if (Component.asyncCommands.indexOf(sCommand) >= 0) {\n                fnCallReady = function processNextCommand() {\n                    return function() {\n                        Component.processCommands(idMachine);\n                    }\n                }();\n            }\n\n            var fnCommand = Component.globalCommands[sCommand];\n            if (fnCommand) {\n                if (!fnCallReady) {\n                    fSuccess = fnCommand(aTokens[1], aTokens[2], aTokens[3]);\n                } else {\n                    if (!fnCommand(fnCallReady, aTokens[1], aTokens[2], aTokens[3])) break;\n                }\n            }\n            else {\n                fSuccess = false;\n                var component = Component.getComponentByType(aTokens[1], idMachine);\n                if (component) {\n                    fnCommand = Component.componentCommands[sCommand];\n                    if (fnCommand) {\n                        fSuccess = fnCommand(component, aTokens[2], aTokens[3]);\n                    }\n                    else {\n                        var exports = component['exports'];\n                        if (exports) {\n                            fnCommand = exports[sCommand];\n                            if (fnCommand) {\n                                fSuccess = true;\n                                if (!fnCallReady) {\n                                    fSuccess = fnCommand.call(component, aTokens[2], aTokens[3]);\n                                } else {\n                                    if (!fnCommand.call(component, fnCallReady, aTokens[2], aTokens[3])) break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (!fSuccess) {\n                Component.alertUser(\"Script error: '\" + sCommand + (fnCommand? \" failed\" : \" unrecognized\"));\n                break;\n            }\n        }\n\n        if (aCommands && !aCommands.length) {\n            delete Component.commands[idMachine];\n        }\n\n        return fSuccess;\n    }\n\n    /**\n     * Component.scriptAlert(sMessage)\n     *\n     * @param {string} sMessage\n     * @return {boolean}\n     */\n    static scriptAlert(sMessage)\n    {\n        Component.alertUser(sMessage);\n        return true;\n    }\n\n    /**\n     * Component.scriptSelect(component, sBinding, sValue)\n     *\n     * @param {Component} component\n     * @param {string} sBinding\n     * @param {string} sValue\n     * @return {boolean}\n     */\n    static scriptSelect(component, sBinding, sValue)\n    {\n        var fSuccess = false;\n        var aBindings = component['bindings'];\n        var control = aBindings[sBinding];\n        if (control) {\n            for (var i = 0; i < control.options.length; i++) {\n                if (control.options[i].textContent == sValue) {\n                    if (control.selectedIndex != i) {\n                        control.selectedIndex = i;\n                    }\n                    fSuccess = true;\n                    break;\n                }\n            }\n        }\n        return fSuccess;\n    }\n\n    /**\n     * Component.scriptSleep(fnCallback, sDelay)\n     *\n     * @param {function()} fnCallback\n     * @param {string} sDelay (in milliseconds)\n     * @return {boolean}\n     */\n    static scriptSleep(fnCallback, sDelay)\n    {\n        setTimeout(fnCallback, +sDelay);\n        return false;\n    }\n\n    /**\n     * toString()\n     *\n     * @this {Component}\n     * @return {string}\n     */\n    toString()\n    {\n        return (this.name? this.name : (this.id || this.type));\n    }\n\n    /**\n     * getMachineNum()\n     *\n     * @this {Component}\n     * @return {number} unique machine number\n     */\n    getMachineNum()\n    {\n        var nMachine = 1;\n        if (this.idMachine) {\n            var aDigits = this.idMachine.match(/\\d+/);\n            if (aDigits !== null)\n                nMachine = parseInt(aDigits[0], 10);\n        }\n        return nMachine;\n    }\n\n    /**\n     * setBinding(sHTMLType, sBinding, control, sValue)\n     *\n     * Component's setBinding() method is intended to be overridden by subclasses.\n     *\n     * @this {Component}\n     * @param {string|null} sHTMLType is the type of the HTML control (eg, \"button\", \"list\", \"text\", \"submit\", \"textarea\", \"canvas\")\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, 'print')\n     * @param {HTMLElement} control is the HTML control DOM object (eg, HTMLButtonElement)\n     * @param {string} [sValue] optional data value\n     * @return {boolean} true if binding was successful, false if unrecognized binding request\n     */\n    setBinding(sHTMLType, sBinding, control, sValue)\n    {\n        switch (sBinding) {\n        case 'clear':\n            if (!this.bindings[sBinding]) {\n                this.bindings[sBinding] = control;\n                control.onclick = (function(component) {\n                    return function clearControl() {\n                        if (component.bindings['print']) {\n                            component.bindings['print'].value = \"\";\n                        }\n                    };\n                }(this));\n            }\n            return true;\n        case 'print':\n            if (!this.bindings[sBinding]) {\n                var controlTextArea = /** @type {HTMLTextAreaElement} */(control);\n                this.bindings[sBinding] = controlTextArea;\n                /**\n                 * Override this.notice() with a replacement function that eliminates the Component.alertUser() call.\n                 *\n                 * @this {Component}\n                 * @param {string} s\n                 * @return {boolean}\n                 */\n                this.notice = function noticeControl(s /*, fPrintOnly, id*/) {\n                    this.println(s, this.type);\n                    return true;\n                };\n                /*\n                 * This was added for Firefox (Safari will clear the <textarea> on a page reload, but Firefox does not).\n                 */\n                controlTextArea.value = \"\";\n                this.print = function(control) {\n                    return function printControl(s) {\n                        Component.appendControl(control, s);\n                    };\n                }(controlTextArea);\n                this.println = function(component, control) {\n                    return function printlnControl(s, type, id) {\n                        if (!s) s = \"\";\n                        if (type != Component.PRINT.PROGRESS || s.slice(-3) != \"...\") {\n                            if (type) s = type + \": \" + s;\n                            Component.appendControl(control, s + '\\n');\n                        } else {\n                            Component.replaceControl(control, s, s + '.');\n                        }\n                        if (!COMPILED && window && window.console) Component.println(s, type, id);\n                    };\n                }(this, controlTextArea);\n            }\n            return true;\n        default:\n            return false;\n        }\n    }\n\n    /**\n     * log(s, type)\n     *\n     * For diagnostic output only.\n     *\n     * WARNING: Even though this function's body is completely wrapped in DEBUG, that won't prevent the Closure Compiler\n     * from including it, so all calls must still be prefixed with \"if (DEBUG) ....\".  For this reason, the class method,\n     * Component.log(), is preferred, because the compiler IS smart enough to remove those calls.\n     *\n     * @this {Component}\n     * @param {string} [s] is the message text\n     * @param {string} [type] is the message type\n     */\n    log(s, type)\n    {\n        if (!COMPILED) {\n            Component.log(s, type || this.id || this.type);\n        }\n    }\n\n    /**\n     * assert(f, s)\n     *\n     * Verifies conditions that must be true (for DEBUG builds only).\n     *\n     * WARNING: Make sure you preface all calls to this.assert() with \"if (DEBUG)\", because unlike Component.assert(),\n     * the Closure Compiler can't be sure that this instance method hasn't been overridden, so it refuses to treat it as\n     * dead code in non-DEBUG builds.\n     *\n     * TODO: Add a task to the build process that \"asserts\" there are no instances of \"assertion failure\" in RELEASE builds.\n     *\n     * @this {Component}\n     * @param {boolean|number} f is the expression asserted to be true\n     * @param {string} [s] is a description of the assertion to be displayed or logged on failure\n     */\n    assert(f, s)\n    {\n        if (DEBUG) {\n            if (!f) {\n                s = \"assertion failure in \" + (this.id || this.type) + (s? \": \" + s : \"\");\n                if (DEBUGGER && this.dbg) {\n                    this.dbg.stopCPU();\n                    /*\n                     * Why do we throw an Error only to immediately catch and ignore it?  Simply to give\n                     * any IDE the opportunity to inspect the application's state.  Even when the IDE has\n                     * control, you should still be able to invoke Debugger commands from the IDE's REPL,\n                     * using the global function that the Debugger constructor defines; eg:\n                     *\n                     *      pcx86('r')\n                     *      pcx86('dw 0:0')\n                     *      pcx86('h')\n                     *      ...\n                     *\n                     * If you have no desire to stop on assertions, consider this a no-op.  However, another\n                     * potential benefit of creating an Error object is that, for browsers like Chrome, we get\n                     * a stack trace, too.\n                     */\n                    try {\n                        throw new Error(s);\n                    } catch(e) {\n                        this.println(e.stack || e.message);\n                    }\n                    return;\n                }\n                this.log(s);\n                throw new Error(s);\n            }\n        }\n    }\n\n    /**\n     * print(s)\n     *\n     * Components using this.print() should wait until after their constructor has run to display any messages, because\n     * if a Control Panel has been loaded, its override will not take effect until its own constructor has run.\n     *\n     * @this {Component}\n     * @param {string} s\n     */\n    print(s)\n    {\n        Component.print(s);\n    }\n\n    /**\n     * println(s, type, id)\n     *\n     * Components using this.println() should wait until after their constructor has run to display any messages, because\n     * if a Control Panel has been loaded, its override will not take effect until its own constructor has run.\n     *\n     * @this {Component}\n     * @param {string} [s] is the message text\n     * @param {string} [type] is the message type\n     * @param {string} [id] is the caller's ID, if any\n     */\n    println(s, type, id)\n    {\n        Component.println(s, type, id || this.id);\n    }\n\n    /**\n     * status(s)\n     *\n     * status() is like println() but it also includes information about the component (ie, the component type),\n     * which is why there is no corresponding Component.status() function.\n     *\n     * @this {Component}\n     * @param {string} s is the message text\n     */\n    status(s)\n    {\n        this.println(this.type + \": \" + s);\n    }\n\n    /**\n     * notice(s, fPrintOnly, id)\n     *\n     * notice() is like println() but implies a need for user notification, so we alert() as well; however, if this.println()\n     * is overridden, this.notice will be replaced with a similar override, on the assumption that the override is taking care\n     * of alerting the user.\n     *\n     * @this {Component}\n     * @param {string} s is the message text\n     * @param {boolean} [fPrintOnly]\n     * @param {string} [id] is the caller's ID, if any\n     * @return {boolean}\n     */\n    notice(s, fPrintOnly, id)\n    {\n        if (!fPrintOnly) {\n            /*\n             * See if the associated computer, if any, is \"unloading\"....\n             */\n            var computer = Component.getComponentByType(\"Computer\", this.id);\n            if (computer && computer.flags.unloading) {\n                console.log(\"ignoring notice during unload: \" + s);\n                return false;\n            }\n        }\n        Component.notice(s, fPrintOnly, id || this.type);\n        return true;\n    }\n\n    /**\n     * setError(s)\n     *\n     * Set a fatal error condition\n     *\n     * @this {Component}\n     * @param {string} s describes a fatal error condition\n     */\n    setError(s)\n    {\n        this.flags.error = true;\n        this.notice(s);         // TODO: Any cases where we should still prefix this string with \"Fatal error: \"?\n    }\n\n    /**\n     * clearError()\n     *\n     * Clear any fatal error condition\n     *\n     * @this {Component}\n     */\n    clearError() {\n        this.flags.error = false;\n    }\n\n    /**\n     * isError()\n     *\n     * Report any fatal error condition\n     *\n     * @this {Component}\n     * @return {boolean} true if a fatal error condition exists, false if not\n     */\n    isError()\n    {\n        if (this.flags.error) {\n            this.println(this.toString() + \" error\");\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * isReady(fnReady)\n     *\n     * Return the \"ready\" state of the component; if the component is not ready, it will queue the optional\n     * notification function, otherwise it will immediately call the notification function, if any, without queuing it.\n     *\n     * NOTE: Since only the Computer component actually cares about the \"readiness\" of other components, the so-called\n     * \"queue\" of notification functions supports exactly one function.  This keeps things nice and simple.\n     *\n     * @this {Component}\n     * @param {function()} [fnReady]\n     * @return {boolean} true if the component is in a \"ready\" state, false if not\n     */\n    isReady(fnReady)\n    {\n        if (fnReady) {\n            if (this.flags.ready) {\n                fnReady();\n            } else {\n                if (MAXDEBUG) this.log(\"NOT ready\");\n                this.fnReady = fnReady;\n            }\n        }\n        return this.flags.ready;\n    }\n\n    /**\n     * setReady(fReady)\n     *\n     * Set the \"ready\" state of the component to true, and call any queued notification functions.\n     *\n     * @this {Component}\n     * @param {boolean} [fReady] is assumed to indicate \"ready\" unless EXPLICITLY set to false\n     */\n    setReady(fReady)\n    {\n        if (!this.flags.error) {\n            this.flags.ready = (fReady !== false);\n            if (this.flags.ready) {\n                if (MAXDEBUG /* || this.name */) this.log(\"ready\");\n                var fnReady = this.fnReady;\n                this.fnReady = null;\n                if (fnReady) fnReady();\n            }\n        }\n    }\n\n    /**\n     * isBusy(fCancel)\n     *\n     * Return the \"busy\" state of the component\n     *\n     * @this {Component}\n     * @param {boolean} [fCancel] is set to true to cancel a \"busy\" state\n     * @return {boolean} true if \"busy\", false if not\n     */\n    isBusy(fCancel)\n    {\n        if (this.flags.busy) {\n            if (fCancel) {\n                this.flags.busyCancel = true;\n            } else if (fCancel === undefined) {\n                this.println(this.toString() + \" busy\");\n            }\n        }\n        return this.flags.busy;\n    }\n\n    /**\n     * setBusy(fBusy)\n     *\n     * Update the current busy state; if a busyCancel request is pending, it will be honored now.\n     *\n     * @this {Component}\n     * @param {boolean} fBusy\n     * @return {boolean}\n     */\n    setBusy(fBusy)\n    {\n        if (this.flags.busyCancel) {\n            this.flags.busy = false;\n            this.flags.busyCancel = false;\n            return false;\n        }\n        if (this.flags.error) {\n            this.println(this.toString() + \" error\");\n            return false;\n        }\n        this.flags.busy = fBusy;\n        return this.flags.busy;\n    }\n\n    /**\n     * powerUp(fSave)\n     *\n     * @this {Component}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower] is true if this is \"repower\" notification\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        this.flags.powered = true;\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {Component}\n     * @param {boolean} fSave\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        if (fShutdown) this.flags.powered = false;\n        return true;\n    }\n\n    /**\n     * messageEnabled(bitsMessage)\n     *\n     * If bitsMessage is not specified, the component's MESSAGE category is used.\n     *\n     * @this {Component}\n     * @param {number} [bitsMessage] is zero or more MESSAGE_* category flag(s)\n     * @return {boolean} true if all specified message enabled, false if not\n     */\n    messageEnabled(bitsMessage = 0)\n    {\n        if (DEBUGGER && this.dbg) {\n            if (this !== this.dbg) {\n                bitsMessage = bitsMessage || this.bitsMessage;\n            }\n            var bitsEnabled = this.dbg.bitsMessage & bitsMessage;\n            /*\n             * This next \"bit\" of logic is for PCx86 and any other machine where we've expanded the set of\n             * messages by reusing bits in the low nibbles in combination with different bits in the high nibble.\n             * If the input bits adhere to that format, then the mask we just produced must adhere to it as well,\n             * and if it doesn't, zero the mask, ensuring that the test will return false.\n             */\n            if ((bitsMessage & 0xf0000000) && (bitsMessage & 0x0fffffff)) {\n                if (!(bitsEnabled & 0xf0000000) || !(bitsEnabled & 0x0fffffff)) bitsEnabled = 0;\n            }\n            if (bitsMessage && bitsEnabled === bitsMessage) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * printf(format, ...args)\n     *\n     * @this {Component} (imported from Device)\n     * @param {string} format\n     * @param {...} args\n     */\n    printf(format, ...args)\n    {\n        /*\n         * Callers often check messageEnabled() themselves, but for those that don't, check it now.\n         */\n        if (DEBUGGER && this.dbg && this.messageEnabled()) {\n            /*\n             * TODO: If/when dbg.message() is replaced with print(), remove the following linefeed removal.\n             */\n            this.dbg.message(this.sprintf(format, ...args).replace(/\\n$/,\"\"));\n        }\n    }\n\n    /**\n     * printMessage(sMessage, bitsMessage, fAddress)\n     *\n     * If bitsMessage is not specified, the component's MESSAGE category is used.\n     * If bitsMessage is true, the message is displayed regardless.\n     *\n     * @this {Component}\n     * @param {string} sMessage is any caller-defined message string\n     * @param {number|boolean} [bitsMessage] is zero or more MESSAGE_* category flag(s)\n     * @param {boolean} [fAddress] is true to display the current address\n     */\n    printMessage(sMessage, bitsMessage, fAddress)\n    {\n        if (DEBUGGER && this.dbg) {\n            if (bitsMessage === true || this.messageEnabled(bitsMessage | 0)) {\n                this.dbg.message(sMessage, fAddress);\n            }\n        }\n    }\n\n    /**\n     * printMessageIO(port, bOut, addrFrom, name, bIn, bitsMessage)\n     *\n     * If bitsMessage is not specified, the component's MESSAGE category is used.\n     * If bitsMessage is true, the message is displayed as long as MESSAGE.PORT is enabled.\n     *\n     * @this {Component}\n     * @param {number} port\n     * @param {number|null} bOut if an output operation\n     * @param {number|null} [addrFrom]\n     * @param {string|null} [name] of the port, if any\n     * @param {number|null} [bIn] is the input value, if known, on an input operation\n     * @param {number|boolean} [bitsMessage] is zero or more MESSAGE_* category flag(s)\n     */\n    printMessageIO(port, bOut, addrFrom, name, bIn, bitsMessage)\n    {\n        if (DEBUGGER && this.dbg) {\n            if (bitsMessage === true) {\n                bitsMessage = 0;\n            } else if (bitsMessage == null) {\n                bitsMessage = this.bitsMessage;\n            }\n            this.dbg.messageIO(this, port, bOut, addrFrom, name, bIn, bitsMessage);\n        }\n    }\n\n    /**\n     * sprintf(format, ...args)\n     *\n     * Copied from the CCjs project (https://github.com/jeffpar/ccjs/blob/master/lib/stdio.js) and extended.\n     *\n     * Far from complete, let alone sprintf-compatible, but it's adequate for the handful of sprintf-style format\n     * specifiers that I use.\n     *\n     * @this {Component} (imported from Device)\n     * @param {string} format\n     * @param {...} args\n     * @returns {string}\n     */\n    sprintf(format, ...args)\n    {\n        let buffer = \"\";\n        let aParts = format.split(/%([-+ 0#]?)([0-9]*)(\\.?)([0-9]*)([hlL]?)([A-Za-z%])/);\n\n        let iArg = 0, iPart;\n        for (iPart = 0; iPart < aParts.length - 7; iPart += 7) {\n\n            buffer += aParts[iPart];\n\n            let arg = args[iArg++];\n            let flags = aParts[iPart+1];\n            let minimum = +aParts[iPart+2] || 0;\n            let precision = +aParts[iPart+4] || 0;\n            let conversion = aParts[iPart+6];\n            let ach = null, s;\n\n            switch(conversion) {\n            case 'd':\n                /*\n                 * We could use \"arg |= 0\", but there may be some value to supporting integers > 32 bits.\n                 */\n                arg = Math.trunc(arg);\n                /* falls through */\n\n            case 'f':\n                s = Math.trunc(arg) + \"\";\n                if (precision) {\n                    minimum -= (precision + 1);\n                }\n                if (s.length < minimum) {\n                    if (flags == '0') {\n                        if (arg < 0) minimum--;\n                        s = (\"0000000000\" + Math.abs(arg)).slice(-minimum);\n                        if (arg < 0) s = '-' + s;\n                    } else {\n                        s = (\"          \" + s).slice(-minimum);\n                    }\n                }\n                if (precision) {\n                    arg = Math.trunc((arg - Math.trunc(arg)) * Math.pow(10, precision));\n                    s += '.' + (\"0000000000\" + Math.abs(arg)).slice(-precision);\n                }\n                buffer += s;\n                break;\n\n            case 'c':\n                arg = String.fromCharCode(arg);\n                /* falls through */\n\n            case 's':\n                while (arg.length < minimum) {\n                    if (flags == '-') {\n                        arg += ' ';\n                    } else {\n                        arg = ' ' + arg;\n                    }\n                }\n                buffer += arg;\n                break;\n\n            case 'X':\n                ach = \"0123456789ABCDEF\";\n                /* falls through */\n\n            case 'x':\n                if (!ach) ach = \"0123456789abcdef\";\n                s = \"\";\n                do {\n                    s = ach[arg & 0xf] + s;\n                    arg >>>= 4;\n                } while (--minimum > 0 || arg);\n                buffer += s;\n                break;\n\n            default:\n                /*\n                 * The supported ANSI C set of conversions: \"dioxXucsfeEgGpn%\"\n                 */\n                buffer += \"(unrecognized printf conversion %\" + conversion + \")\";\n                break;\n            }\n        }\n\n        buffer += aParts[iPart];\n        return buffer;\n    }\n}\n\n/*\n * Types recognized and supported by selected functions (eg, Computer.getMachineParm())\n */\nComponent.TYPE = {\n    NUMBER:     \"number\",\n    OBJECT:     \"object\",\n    STRING:     \"string\"\n};\n\n/*\n * These are the standard PRINT values you can pass as an optional argument to println(); in reality,\n * you can pass anything you want, because they are simply prepended to the message, although PROGRESS\n * messages may also be merged with earlier similar messages to keep the output buffer under control.\n */\nComponent.PRINT = {\n    ERROR:      \"error\",\n    NOTICE:     \"notice\",\n    PROGRESS:   \"progress\",\n    SCRIPT:     \"script\",\n    WARNING:    \"warning\"\n};\n\n/*\n * Every component created on the current page is recorded in this array (see Component.add()),\n * enabling any component to locate another component by ID (see Component.getComponentByID())\n * or by type (see Component.getComponentByType()).\n *\n * Every machine on the page are now recorded as well, by their machine ID.  We then record the\n * various resources used by that machine.\n *\n * Includes a fallback for non-browser-based environments (ie, Node).  TODO: This will need to be\n * tailored to Node, probably using the global object instead of the window object, if we ever want\n * to support multi-machine configs in that environment.\n */\nif (window) {\n    if (!window['PCjs']) window['PCjs'] = {};\n    if (!window['PCjs']['Machines']) window['PCjs']['Machines'] = {};\n    if (!window['PCjs']['Components']) window['PCjs']['Components'] = [];\n    if (!window['PCjs']['Commands']) window['PCjs']['Commands'] = {};\n}\nComponent.machines = window? window['PCjs']['Machines'] : {};\nComponent.components = window? window['PCjs']['Components'] : [];\nComponent.commands = window? window['PCjs']['Commands'] : {};\n\nComponent.asyncCommands = [\n    'hold', 'sleep', 'wait'\n];\nComponent.globalCommands = {\n    'alert': Component.scriptAlert,\n    'sleep': Component.scriptSleep\n};\nComponent.componentCommands = {\n    'select':   Component.scriptSelect\n};\nComponent.printBuffer = \"\";\n\n/*\n * The following polyfills provide ES5 functionality that's missing in older browsers (eg, IE8),\n * allowing PCjs apps to run without slamming into exceptions; however, due to the lack of HTML5 canvas\n * support in those browsers, all you're likely to see are \"soft\" errors (eg, \"Missing <canvas> support\").\n *\n * Perhaps we can implement a text-only faux video display for a fun retro-browser experience someday.\n *\n * TODO: Come up with a better place to put these polyfills.  We will likely have more if we decide to\n * make the leap from ES5 to ES6 features.\n */\n\n/*\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n */\nif (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function(obj, start) {\n        for (var i = (start || 0), j = this.length; i < j; i++) {\n            if (this[i] === obj) { return i; }\n        }\n        return -1;\n    }\n}\n\n/*\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\n */\nif (!Array.isArray) {\n    Array.isArray = function(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    };\n}\n\n/*\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n */\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function(obj) {\n        if (typeof this != \"function\") {\n            // Closest thing possible to the ECMAScript 5 internal IsCallable function\n            throw new TypeError(\"Function.prototype.bind: non-callable object\");\n        }\n        var args = Array.prototype.slice.call(arguments, 1);\n        var fToBind = this;\n        var fnNOP = /** @constructor */ (function() {});\n        var fnBound = function() {\n            return fToBind.apply(this instanceof fnNOP && obj? this : obj, args.concat(/** @type {Array} */(Array.prototype.slice.call(arguments))));\n        };\n        fnNOP.prototype = this.prototype;\n        fnBound.prototype = new fnNOP();\n        return fnBound;\n    };\n}\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/defines.js (C) Jeff Parsons 2012-2018\n */\n\n/**\n * @define {string}\n */\nvar APPCLASS = \"pdp11\";         // this @define is the default application class (eg, \"pcx86\", \"c1pjs\")\n\n/**\n * APPNAME is used more for display purposes than anything else now.  APPCLASS is what matters in terms\n * of folder and file names, CSS styles, etc.\n *\n * @define {string}\n */\nvar APPNAME = \"PDPjs\";          // this @define is the default application name (eg, \"PCx86\", \"C1Pjs\")\n\n/**\n * WARNING: DEBUGGER needs to accurately reflect whether or not the Debugger component is (or will be) loaded.\n * In the compiled case, we rely on the Closure Compiler to override DEBUGGER as appropriate.  When it's *false*,\n * nearly all of debugger.js will be conditionally removed by the compiler, reducing it to little more than a\n * \"type skeleton\", which also solves some type-related warnings we would otherwise have if we tried to remove\n * debugger.js from the compilation process altogether.\n *\n * However, when we're in \"development mode\" and running uncompiled code in debugger-less configurations,\n * I would like to skip loading debugger.js altogether.  When doing that, we must ALSO arrange for an additional file\n * (nodebugger.js) to be loaded immediately after this file, which *explicitly* overrides DEBUGGER with *false*.\n *\n * @define {boolean}\n */\nvar DEBUGGER = true;            // this @define is overridden by the Closure Compiler to remove Debugger-related support\n\n/**\n * BYTEARRAYS is a Closure Compiler compile-time option that allocates an Array of numbers for every Memory block,\n * where each a number represents ONE byte; very wasteful, but potentially slightly faster.\n *\n * See the Memory component for details.\n *\n * @define {boolean}\n */\nvar BYTEARRAYS = false;\n\n/**\n * TYPEDARRAYS enables use of typed arrays for Memory blocks.  This used to be a compile-time-only option, but I've\n * added Memory access functions for typed arrays (see MemoryPDP11.afnTypedArray), so support can be enabled dynamically now.\n *\n * See the Memory component for details.\n */\nvar TYPEDARRAYS = (typeof ArrayBuffer !== 'undefined');\n\n/**\n * MEMFAULT forces the Memory interfaces to signal a CPU fault when a word is accessed using an odd (unaligned) address.\n *\n * Since PDPjs inherited its Bus component from PCx86, it included support for both aligned and unaligned word accesses\n * by default.  However, the PDP-11 adds a wrinkle: when an odd address is used to access a memory word, a BUS trap\n * must be generated.  Note that odd IOPAGE word accesses are fine; this only affects the Memory component.\n *\n * When the MMU is enabled, these checks may also be performed at a higher level, eliminating the need for them at the\n * physical memory level.\n */\nvar MEMFAULT = true;\n\n/**\n * WORDBUS turns off support for unaligned memory words.  Whereas MEMFAULT necessarily slows down memory word accesses\n * slightly, WORDBUS is able to speed them up slightly, by assuming that all word accesses (which didn't fault) must be\n * aligned.  This affects all word accesses, even IOPAGE accesses, because it also eliminates cross-block boundary checks.\n *\n * Don't worry that the source code looks MORE complicated rather than LESS with the additional MEMFAULT and WORDBUS checks,\n * because the Closure Compiler eliminates those checks and throws away the (unreachable) code blocks that deal with unaligned\n * accesses.\n */\nvar WORDBUS = true;\n\n/*\n * Combine all the shared globals and machine-specific globals into one machine-specific global object,\n * which all machine components should start using; eg: \"if (PDP11.DEBUG) ...\" instead of \"if (DEBUG) ...\".\n */\nvar PDP11 = {\n    APPCLASS:   APPCLASS,\n    APPNAME:    APPNAME,\n    APPVERSION: APPVERSION,     // shared\n    BYTEARRAYS: BYTEARRAYS,\n    COMPILED:   COMPILED,       // shared\n    CSSCLASS:   CSSCLASS,       // shared\n    DEBUG:      DEBUG,          // shared\n    DEBUGGER:   DEBUGGER,\n    MAXDEBUG:   MAXDEBUG,       // shared\n    PRIVATE:    PRIVATE,        // shared\n    TYPEDARRAYS:TYPEDARRAYS,\n    MEMFAULT:   MEMFAULT,\n    WORDBUS:    WORDBUS,\n    SITEHOST:   SITEHOST,       // shared\n    XMLVERSION: XMLVERSION,     // shared\n\n    /*\n     * CPU model numbers (supported)\n     *\n     * The 11/20 includes the 11/10, which is not identified separately because there was\n     * nothing functionally different about it.\n     *\n     * The 11/40 added the MODE bits to the PSW (but only KERNEL=00 and USER=11) and 18-bit\n     * addressing via an MMU; there was still only one register set.\n     *\n     * The 11/45 added REGSET bit to the PSW (to support a second register set), SUPER=01\n     * mode to the existing KERNEL=00 and USER=11 modes, separate I/D spaces, and other MMU\n     * extensions (eg, MMR1 and MMR3).\n     *\n     * The 11/70 added 22-bit addressing and corresponding extensions to the MMU.\n     */\n    MODEL_1120: 1120,\n    MODEL_1140: 1140,\n    MODEL_1145: 1145,\n    MODEL_1170: 1170,\n\n    /*\n     * This constant is used to mark points in the code where the physical address being returned\n     * is invalid and should not be used.\n     *\n     * In a 32-bit CPU, -1 (ie, 0xffffffff) could actually be a valid address, so consider changing\n     * ADDR_INVALID to NaN or null (which is also why all ADDR_INVALID tests should use strict equality\n     * operators).\n     *\n     * The main reason I'm NOT using NaN or null now is my concern that, by mixing non-numbers\n     * (specifically, values outside the range of signed 32-bit integers), performance may suffer.\n     *\n     * WARNING: Like many of the properties defined here, ADDR_INVALID is a common constant, which the\n     * Closure Compiler will happily inline (with or without @const annotations; in fact, I've yet to\n     * see a @const annotation EVER improve automatic inlining).  However, if you don't make ABSOLUTELY\n     * certain that this file is included BEFORE the first reference to any of these properties, that\n     * automatic inlining will no longer occur.\n     */\n    ADDR_INVALID:   -1,\n    /*\n     * Processor modes\n     */\n    MODE: {\n        KERNEL:     0x0,        // 11/40 and higher\n        SUPER:      0x1,        // 11/45 and higher\n        UNUSED:     0x2,\n        USER:       0x3,        // 11/40 and higher\n        MASK:       0x3\n    },\n    /*\n     * Processor Status Word (stored in regPSW) at 177776\n     */\n    PSW: {\n        CF:         0x0001,     // bit  0     (000001)  Carry Flag\n        VF:         0x0002,     // bit  1     (000002)  Overflow Flag (aka OF on Intel processors)\n        ZF:         0x0004,     // bit  2     (000004)  Zero Flag\n        NF:         0x0008,     // bit  3     (000010)  Negative Flag (aka SF -- Sign Flag -- on Intel processors)\n        TF:         0x0010,     // bit  4     (000020)  Trap Flag\n        PRI:        0x00E0,     // bits 5-7   (000340)  Priority\n        UNUSED:     0x0700,     // bits 8-10  (003400)  UNUSED\n        /*\n         * The REGSET bit (and the alternate register set stored in regsAlt) came into existence\n         * with the 11/45; (ie, they were not present on the 11/10, 11/20, or 11/40).\n         */\n        REGSET:     0x0800,     // bit  11    (004000)  Register Set\n        /*\n         * The MODE bits came into existence with the 11/40 (eg, not present on the 11/10 or 11/20).\n         */\n        PMODE:      0x3000,     // bits 12-13 (030000)  Prev Mode (see PDP11.MODE)\n        CMODE:      0xC000,     // bits 14-15 (140000)  Curr Mode (see PDP11.MODE)\n        SHIFT: {\n            CF:     0,\n            VF:     1,\n            ZF:     2,\n            NF:     3,\n            TF:     4,\n            PRI:    5,\n            PMODE:  12,\n            CMODE:  14\n        }\n    },\n    /*\n     * Program Interrupt Register (stored in regPIR) at 177772\n     *\n     * The PIA bits at 5-7 are designed to align with PRI bits 5-7 in the PSW.\n     */\n    PIR: {\n        BITS:       0xFE00,     // bits 9-15 correspond to interrupt requests 1-7\n        PIA:        0x00EE,     // the PIA bits contain two copies of the corresponding interrupt request priority\n        PIA_INC:    0x0022,     // both sets of PIA bits can be incremented with this constant\n        SHIFT: {\n            BITS:   9\n        }\n    },\n    /*\n     * PDP-11 trap vectors\n     */\n    TRAP: {\n        UNDEFINED:  0x00,       // 000  (reserved)\n        BUS:        0x04,       // 004  unaligned address, non-existent memory, illegal instruction, etc\n        RESERVED:   0x08,       // 010  reserved instructions\n        BPT:        0x0C,       // 014  BPT: breakpoint trap (trace)\n        IOT:        0x10,       // 020  IOT: input/output trap\n        PF:         0x14,       // 024  power fail\n        EMT:        0x18,       // 030  EMT: emulator trap\n        TRAP:       0x1C,       // 034  TRAP instruction\n        PIRQ:       0xA0,       // 240  PIRQ: program interrupt request\n        MMU:        0xA8        // 250  MMU: aborts and traps\n    },\n    /*\n     * PDP-11 trap reasons; the reason may also be a non-negative address indicating a BUS memory error\n     * (unaligned address or non-existent memory).  Any reason >= RED (which includes BUS memory errors) generate\n     * immediate (thrown) traps, as they are considered ABORTs; the rest generate synchronous traps.\n     */\n    REASON: {\n        PANIC:      -1,         // immediate halt (internal error)\n        ABORT:      -2,         // immediate MMU fault\n        ILLEGAL:    -3,         // immediate invalid opcode (BUS)\n        RED:        -4,         // immediate stack overflow fault (BUS)\n        YELLOW:     -5,         // deferred stack overflow fault (BUS)\n        FAULT:      -6,         // deferred MMU fault\n        TRACE:      -7,         // deferred TF fault (BPT)\n        HALT:       -8,         // illegal HALT (BUS)\n        OPCODE:     -9,         // opcode-generated trap (eg, BPT, EMT, IOT, TRAP, or RESERVED opcode)\n        INTERRUPT:  -10,        // device-generated trap (vector is device-specific)\n    },\n    REASONS: [\n        \"UNKNOWN\",\n        \"PANIC\",\n        \"ABORT\",\n        \"ILLEGAL\",\n        \"RED\",\n        \"YELLOW\",\n        \"FAULT\",\n        \"TRACE\",\n        \"HALT\",\n        \"OPCODE\",\n        \"INTERRUPT\"\n    ],\n    /*\n     * Assorted common opcodes\n     */\n    OPCODE: {\n        HALT:       0x0000,\n        WAIT:       0x0001,\n        BPT:        0x0003,\n        IOT:        0x0004,\n        JSR_OP:     0x0800,\n        JSR_MASK:   0xFE00,\n        SOB_OP:     0x7E00,\n        SOB_MASK:   0xFE00,\n        EMT_OP:     0x8800,\n        EMT_MASK:   0xFF00,\n        TRAP_OP:    0x8900,\n        TRAP_MASK:  0xFF00,\n        INVALID:    0xFFFF      // far from the only invalid opcode, just a KNOWN invalid opcode\n    },\n    /*\n     * Internal operation state flags\n     */\n    OPFLAG: {\n        IRQ_DELAY:  0x0001,     // incremented until it becomes IRQ (set by SPL and traps)\n        IRQ:        0x0002,     // time to call checkInterrupts()\n        IRQ_MASK:   0x0003,\n        DEBUGGER:   0x0004,     // set if the Debugger wants to perform checks\n        WAIT:       0x0008,     // WAIT operation in progress\n        PRESERVE:   0x000F,     // OPFLAG bits to preserve prior to the next instruction\n        TRAP_TF:    0x0010,     // aka PDP11.PSW.TF (WARNING: do not change this bit, or you will likely break opRTI())\n        TRAP_SP:    0x0020,     // set for a deferred BUS trap (due to a \"yellow\" stack overflow condition)\n        TRAP_MMU:   0x0040,\n        TRAP_MASK:  0x0070,\n        TRAP_LAST:  0x0080,     // set if last operation was a trap (see trapLast for the vector, and trapReason for the reason)\n        TRAP_RED:   0x0100,     // set whenever a RED trap occurs, used to catch double RED traps (time to PANIC)\n    },\n    /*\n     * Opcode reg (opcode bits 2-0)\n     */\n    OPREG: {\n        MASK:       0x07\n    },\n    /*\n     * Opcode modes (opcode bits 5-3)\n     */\n    OPMODE: {\n        REG:        0x00,       // REGISTER                 (register is operand)\n        REGD:       0x08,       // REGISTER DEFERRED        (register is address of operand)\n        POSTINC:    0x10,       // AUTO-INCREMENT           (register is address of operand, register incremented)\n        POSTINCD:   0x18,       // AUTO-INCREMENT DEFERRED  (register is address of address of operand, register incremented)\n        PREDEC:     0x20,       // AUTO-DECREMENT           (register decremented, register is address of operand)\n        PREDECD:    0x28,       // AUTO-DECREMENT DEFERRED  (register decremented, register is address of address of operand)\n        INDEX:      0x30,       // INDEX                    (register + next word is address of operand)\n        INDEXD:     0x38,       // INDEX DEFERRED           (register + next word is address of address of operand)\n        MASK:       0x38,\n        SHIFT:      3\n    },\n    DSTMODE: {\n        REG:        0x0007,\n        MODE:       0x0038,\n        MASK:       0x003F,\n        SHIFT:      0\n    },\n    SRCMODE: {\n        REG:        0x01C0,\n        MODE:       0x0E00,\n        MASK:       0x0FC0,\n        SHIFT:      6\n    },\n    REG: {\n        SP:         6,\n        PC:         7,\n    },\n    /*\n     * Internal memory access flags\n     */\n    ACCESS: {\n        WORD:       0x00,\n        BYTE:       0x01,\n        READ:       0x02,\n        WRITE:      0x04,\n        UPDATE:     0x06,\n        VIRT:       0x08,       // getVirtualByMode() leaves bit 17 clear if this is set (otherwise the caller would have to clear it again)\n        ISPACE:     0x00000,\n        DSPACE:     0x10000     // getVirtualByMode() sets bit 17 in any 16-bit virtual address that refers to D space (as opposed to I space)\n    },\n    /*\n     * Internal flags passed to writeDstByte()\n     *\n     * The BYTE and SBYTE values have been chosen so that they can be used directly as masks.\n     */\n    WRITE: {\n        BYTE:       0xff,        // write byte normally\n        SBYTE:      0xffff       // sign-extend byte to word\n    },\n    CPUERR: {                   // 177766\n        RED:        0x0004,     // 000004 red zone stack limit\n        YELLOW:     0x0008,     // 000010 yellow zone stack limit\n        TIMEOUT:    0x0010,     // 000020 UNIBUS timeout error\n        NOMEMORY:   0x0020,     // 000040 non-existent memory error\n        ODDADDR:    0x0040,     // 000100 odd word address error (as in non-even, not strange)\n        BADHALT:    0x0080      // 000200 HALT attempted in USER or SUPER modes\n    },\n    MMR0: {                     // 177572\n        ENABLED:    0x0001,     // 000001 address relocation enabled\n        PAGE_NUM:   0x000E,     // 000016 page number of last fault\n        PAGE_D:     0x0010,     // 000020 last fault occurred in D space (11/45 and 11/70)\n        PAGE:       0x001E,     // 000176 (all of the PAGE bits)\n        MODE:       0x0060,     // 000140 processor mode as of last fault\n        COMPLETED:  0x0080,     // 000200 last instruction completed (R/O) (11/70)\n        MAINT:      0x0100,     // 000400 only destination mode references will be relocated\n        MMU_TRAPS:  0x0200,     // 001000 enable MMU traps (11/70)\n        UNUSED:     0x0C00,     // 006000\n        TRAP_MMU:   0x1000,     // 010000 trap: MMU (11/70)\n        ABORT_RO:   0x2000,     // 020000 abort: read-only\n        ABORT_PL:   0x4000,     // 040000 abort: page length\n        ABORT_NR:   0x8000,     // 100000 abort: non-resident\n        ABORT:      0xE000,     // 160000 (all of the ABORT bits)\n        UPDATE:     0xF0FE,     // Includes all of: ABORT, TRAP, COMPLETED, MODE, and PAGE bits\n        SHIFT: {\n            PAGE:   1,\n            MODE:   5\n        }\n    },\n    MMR1: {                     // 177574: general purpose auto-inc/auto-dec register (11/45 and 11/70)\n        REG1_NUM:   0x0007,     //\n        REG1_DELTA: 0x00F8,     //\n        REG2_NUM:   0x0700,     //\n        REG2_DELTA: 0xF800      //\n    },\n    MMR2: {                     // 177576: virtual program counter register\n    },\n    MMR3: {                     // 172516: mapping register (11/45 and 11/70)\n        USER_D:     0x0001,     // (000001)\n        SUPER_D:    0x0002,     // (000002)\n        KERNEL_D:   0x0004,     // (000004)\n        MMU_22BIT:  0x0010,     // (000020)\n        UNIBUS_MAP: 0x0020      // (000040) UNIBUS map relocation enabled\n    },\n    PDR: {\n        ACF: {\n            NR:     0x0,        // non-resident, abort all accesses\n            RO1:    0x1,        // read-only, abort on write attempt, memory management trap on read (11/70)\n            RO:     0x2,        // read-only, abort on write attempt\n            U1:     0x3,        // unused, abort all accesses--reserved for future use\n            RW1:    0x4,        // read/write, memory management trap upon completion of a read or write\n            RW2:    0x5,        // read/write, memory management trap upon completion of a write (11/70)\n            RW:     0x6,        // read/write, no system trap/abort action\n            U2:     0x7,        // unused, abort all accesses--reserved for future use\n            MASK:   0x7\n        },\n        ED:         0x0008,     // expansion direction (if set, the page expands downward from block number 127)\n        UNUSED:     0x0030,\n        MODIFIED:   0x0040,     // page has been written (bit cleared when either PDR or PAR is written)\n        ACCESSED:   0x0080,     // page has been accessed (bit cleared when either PDR or PAR is written) (11/70)\n        PLF:        0x7F00,     // page length field\n        BC:         0x8000      // bypass cache (11/44 only)\n    },\n    /*\n     * Assorted special (UNIBUS) addresses\n     *\n     * Within the PDP-11/45's 18-bit address space, of the 0x40000 possible addresses (256Kb), the top 0x2000\n     * (8Kb) is called the IOPAGE and is reserved for CPU and I/O registers.  The IOPAGE spans 0x3E000-0x3FFFF.\n     *\n     * Within the PDP-11/70's 22-bit address space, of the 0x400000 possible addresses (4Mb), the top 0x20000\n     * (256Kb) is mapped to the UNIBUS (not physical memory), and as before, the top 0x2000 (8Kb) of that is\n     * mapped to the IOPAGE.\n     *\n     * To map 18-bit UNIBUS addresses to 22-bit physical addresses, the 11/70 uses a UNIBUS relocation map.\n     * It consists of 31 double-word registers that each hold a 22-bit base address.  When UNIBUS relocation\n     * is enabled, the top 5 bits of an address select one of the 31 mapping registers, and the bottom 13 bits\n     * are then added to the contents of the selected mapping register.\n     *\n     * ES6 ALERT: By using octal constants, I'm finally dipping my toe into ES6 (aka ECMAScript 2015) waters.\n     * You'll even see a few binary constants below, too.  If you're loading this raw source code into your browser,\n     * then by now (2016) you're almost certainly using an ES6-aware browser.  Production sites should be using code\n     * compiled by Google's Closure Compiler, which we configure to produce code that's backward-compatible with ES5\n     * (for example, all binary, octal, and hex constants are converted to decimal values).\n     *\n     * For more details: https://github.com/google/closure-compiler/wiki/ECMAScript6\n     */\n    UNIBUS: {       //16-bit       18-bit     22-bit         Hex    Description\n        UNIMAP:     0o170200,   //                                  UNIBUS Mapping Registers (0-31) 64 words (ends at 0o170372)\n        SIPDR0:     0o172200,   //                                  Supervisor I Page Descriptor Register 0\n        SIPDR1:     0o172202,   //                                  Supervisor I Page Descriptor Register 1\n        SIPDR2:     0o172204,   //                                  Supervisor I Page Descriptor Register 2\n        SIPDR3:     0o172206,   //                                  Supervisor I Page Descriptor Register 3\n        SIPDR4:     0o172210,   //                                  Supervisor I Page Descriptor Register 4\n        SIPDR5:     0o172212,   //                                  Supervisor I Page Descriptor Register 5\n        SIPDR6:     0o172214,   //                                  Supervisor I Page Descriptor Register 6\n        SIPDR7:     0o172216,   //                                  Supervisor I Page Descriptor Register 7\n        SDPDR0:     0o172220,   //                                  Supervisor D Page Descriptor Register 0\n        SDPDR1:     0o172222,   //                                  Supervisor D Page Descriptor Register 1\n        SDPDR2:     0o172224,   //                                  Supervisor D Page Descriptor Register 2\n        SDPDR3:     0o172226,   //                                  Supervisor D Page Descriptor Register 3\n        SDPDR4:     0o172230,   //                                  Supervisor D Page Descriptor Register 4\n        SDPDR5:     0o172232,   //                                  Supervisor D Page Descriptor Register 5\n        SDPDR6:     0o172234,   //                                  Supervisor D Page Descriptor Register 6\n        SDPDR7:     0o172236,   //                                  Supervisor D Page Descriptor Register 7\n        SIPAR0:     0o172240,   //                                  Supervisor I Page Address Register 0\n        SIPAR1:     0o172242,   //                                  Supervisor I Page Address Register 1\n        SIPAR2:     0o172244,   //                                  Supervisor I Page Address Register 2\n        SIPAR3:     0o172246,   //                                  Supervisor I Page Address Register 3\n        SIPAR4:     0o172250,   //                                  Supervisor I Page Address Register 4\n        SIPAR5:     0o172252,   //                                  Supervisor I Page Address Register 5\n        SIPAR6:     0o172254,   //                                  Supervisor I Page Address Register 6\n        SIPAR7:     0o172256,   //                                  Supervisor I Page Address Register 7\n        SDPAR0:     0o172260,   //                                  Supervisor D Page Address Register 0\n        SDPAR1:     0o172262,   //                                  Supervisor D Page Address Register 1\n        SDPAR2:     0o172264,   //                                  Supervisor D Page Address Register 2\n        SDPAR3:     0o172266,   //                                  Supervisor D Page Address Register 3\n        SDPAR4:     0o172270,   //                                  Supervisor D Page Address Register 4\n        SDPAR5:     0o172272,   //                                  Supervisor D Page Address Register 5\n        SDPAR6:     0o172274,   //                                  Supervisor D Page Address Register 6\n        SDPAR7:     0o172276,   //                                  Supervisor D Page Address Register 7\n        KIPDR0:     0o172300,   //                                  Kernel I Page Descriptor Register 0\n        KIPDR1:     0o172302,   //                                  Kernel I Page Descriptor Register 1\n        KIPDR2:     0o172304,   //                                  Kernel I Page Descriptor Register 2\n        KIPDR3:     0o172306,   //                                  Kernel I Page Descriptor Register 3\n        KIPDR4:     0o172310,   //                                  Kernel I Page Descriptor Register 4\n        KIPDR5:     0o172312,   //                                  Kernel I Page Descriptor Register 5\n        KIPDR6:     0o172314,   //                                  Kernel I Page Descriptor Register 6\n        KIPDR7:     0o172316,   //                                  Kernel I Page Descriptor Register 7\n        KDPDR0:     0o172320,   //                                  Kernel D Page Descriptor Register 0\n        KDPDR1:     0o172322,   //                                  Kernel D Page Descriptor Register 1\n        KDPDR2:     0o172324,   //                                  Kernel D Page Descriptor Register 2\n        KDPDR3:     0o172326,   //                                  Kernel D Page Descriptor Register 3\n        KDPDR4:     0o172330,   //                                  Kernel D Page Descriptor Register 4\n        KDPDR5:     0o172332,   //                                  Kernel D Page Descriptor Register 5\n        KDPDR6:     0o172334,   //                                  Kernel D Page Descriptor Register 6\n        KDPDR7:     0o172336,   //                                  Kernel D Page Descriptor Register 7\n        KIPAR0:     0o172340,   //                                  Kernel I Page Address Register 0\n        KIPAR1:     0o172342,   //                                  Kernel I Page Address Register 1\n        KIPAR2:     0o172344,   //                                  Kernel I Page Address Register 2\n        KIPAR3:     0o172346,   //                                  Kernel I Page Address Register 3\n        KIPAR4:     0o172350,   //                                  Kernel I Page Address Register 4\n        KIPAR5:     0o172352,   //                                  Kernel I Page Address Register 5\n        KIPAR6:     0o172354,   //                                  Kernel I Page Address Register 6\n        KIPAR7:     0o172356,   //                                  Kernel I Page Address Register 7\n        KDPAR0:     0o172360,   //                                  Kernel D Page Address Register 0\n        KDPAR1:     0o172362,   //                                  Kernel D Page Address Register 1\n        KDPAR2:     0o172364,   //                                  Kernel D Page Address Register 2\n        KDPAR3:     0o172366,   //                                  Kernel D Page Address Register 3\n        KDPAR4:     0o172370,   //                                  Kernel D Page Address Register 4\n        KDPAR5:     0o172372,   //                                  Kernel D Page Address Register 5\n        KDPAR6:     0o172374,   //                                  Kernel D Page Address Register 6\n        KDPAR7:     0o172376,   //                                  Kernel D Page Address Register 7\n        MMR3:       0o172516,   // 772516   17772516\n        RLCS:       0o174400,   //                                  RL11 Control Status Register\n        RLBA:       0o174402,   //                                  RL11 Bus Address Register\n        RLDA:       0o174404,   //                                  RL11 Disk Address Register\n        RLMP:       0o174406,   //                                  RL11 Multi-Purpose Register\n        RLBE:       0o174410,   //                                  RL11 Bus (Address) Extension Register (RLV12 controller only)\n        DL11:       0o176500,   //                                  DL11 Additional Register Range (ends at 0o176676)\n        RXCS:       0o177170,   //                                  RX11 Command and Status Register\n        RXDB:       0o177172,   //                                  RX11 Data Buffer Register\n        RKDS:       0o177400,   //                                  RK11 Drive Status Register\n        RKER:       0o177402,   //                                  RK11 Error Register\n        RKCS:       0o177404,   //                                  RK11 Control Status Register\n        RKWC:       0o177406,   //                                  RK11 Word Count Register\n        RKBA:       0o177410,   //                                  RK11 Bus Address Register\n        RKDA:       0o177412,   //                                  RK11 Disk Address Register\n        RKUN:       0o177414,   //                                  RK11 UNUSED (just to make it clear we didn't forget something)\n        RKDB:       0o177416,   //                                  RK11 Data Buffer Register\n        LKS:        0o177546,   //                                  KW11-L Clock Status\n        PRS:        0o177550,   //                                  PC11 (and PR11) Reader Status Register\n        PRB:        0o177552,   //                                  PC11 (and PR11) Reader Buffer Register\n        PPS:        0o177554,   //                                  PC11 Punch Status Register\n        PPB:        0o177556,   //                                  PC11 Punch Buffer Register\n        RCSR:       0o177560,   //                                  DL11 Receiver Status Register\n        RBUF:       0o177562,   //                                  DL11 Receiver Data Buffer Register\n        XCSR:       0o177564,   //                                  DL11 Transmitter Status Register\n        XBUF:       0o177566,   //                                  DL11 Transmitter Data Buffer Register\n        CNSW:       0o177570,   //                                  Console (Front Panel) Switch/Display Register\n        MMR0:       0o177572,   // 777572   17777572\n        MMR1:       0o177574,   // 777574   17777574\n        MMR2:       0o177576,   // 777576   17777576\n        UIPDR0:     0o177600,   //                                  User I Page Descriptor Register 0\n        UIPDR1:     0o177602,   //                                  User I Page Descriptor Register 1\n        UIPDR2:     0o177604,   //                                  User I Page Descriptor Register 2\n        UIPDR3:     0o177606,   //                                  User I Page Descriptor Register 3\n        UIPDR4:     0o177610,   //                                  User I Page Descriptor Register 4\n        UIPDR5:     0o177612,   //                                  User I Page Descriptor Register 5\n        UIPDR6:     0o177614,   //                                  User I Page Descriptor Register 6\n        UIPDR7:     0o177616,   //                                  User I Page Descriptor Register 7\n        UDPDR0:     0o177620,   //                                  User D Page Descriptor Register 0\n        UDPDR1:     0o177622,   //                                  User D Page Descriptor Register 1\n        UDPDR2:     0o177624,   //                                  User D Page Descriptor Register 2\n        UDPDR3:     0o177626,   //                                  User D Page Descriptor Register 3\n        UDPDR4:     0o177630,   //                                  User D Page Descriptor Register 4\n        UDPDR5:     0o177632,   //                                  User D Page Descriptor Register 5\n        UDPDR6:     0o177634,   //                                  User D Page Descriptor Register 6\n        UDPDR7:     0o177636,   //                                  User D Page Descriptor Register 7\n        UIPAR0:     0o177640,   //                                  User I Page Address Register 0\n        UIPAR1:     0o177642,   //                                  User I Page Address Register 1\n        UIPAR2:     0o177644,   //                                  User I Page Address Register 2\n        UIPAR3:     0o177646,   //                                  User I Page Address Register 3\n        UIPAR4:     0o177650,   //                                  User I Page Address Register 4\n        UIPAR5:     0o177652,   //                                  User I Page Address Register 5\n        UIPAR6:     0o177654,   //                                  User I Page Address Register 6\n        UIPAR7:     0o177656,   //                                  User I Page Address Register 7\n        UDPAR0:     0o177660,   //                                  User D Page Address Register 0\n        UDPAR1:     0o177662,   //                                  User D Page Address Register 1\n        UDPAR2:     0o177664,   //                                  User D Page Address Register 2\n        UDPAR3:     0o177666,   //                                  User D Page Address Register 3\n        UDPAR4:     0o177670,   //                                  User D Page Address Register 4\n        UDPAR5:     0o177672,   //                                  User D Page Address Register 5\n        UDPAR6:     0o177674,   //                                  User D Page Address Register 6\n        UDPAR7:     0o177676,   //                                  User D Page Address Register 7\n        R0SET0:     0o177700,   //\n        R1SET0:     0o177701,   //\n        R2SET0:     0o177702,   //\n        R3SET0:     0o177703,   //\n        R4SET0:     0o177704,   //\n        R5SET0:     0o177705,   //\n        R6KERNEL:   0o177706,   //\n        R7KERNEL:   0o177707,   //\n        R0SET1:     0o177710,   //\n        R1SET1:     0o177711,   //\n        R2SET1:     0o177712,   //\n        R3SET1:     0o177713,   //\n        R4SET1:     0o177714,   //\n        R5SET1:     0o177715,   //\n        R6SUPER:    0o177716,   //\n        R6USER:     0o177717,   //\n        /*\n         * This next group of registers is largely ignored; all accesses are routed to regsControl[],\n         * and therefore are managed as a block of 8 \"CTRL\" registers.\n         */\n        CTRL:       0o177740,\n        LAERR:      0o177740,   //                                  Low Address Error                           (11/70 only)\n        HAERR:      0o177742,   //                                  High Address Error                          (11/70 only)\n        MEMERR:     0o177744,   //                                  Memory System Error                         (11/70 only)\n        CACHEC:     0o177746,   //                                  Cache Control                               (11/70 only)\n        MAINT:      0o177750,   //                                  Maintenance                                 (11/70 only)\n        HITMISS:    0o177752,   //                                  Hit/Miss                                    (11/70 only)\n        UNDEF1:     0o177754,   //\n        UNDEF2:     0o177756,   //\n        LSIZE:      0o177760,   //                                  Lower Size Register (last 64-byte block #)  (11/70 only)\n        HSIZE:      0o177762,   //                                  Upper Size Register (always zero)           (11/70 only)\n        SYSID:      0o177764,   //                                  System ID Register                          (11/70 only)\n        CPUERR:     0o177766,   //                                  CPU error                                   (11/70 only)\n        MB:         0o177770,   //                                  Microprogram break                          (11/70 only)\n        PIR:        0o177772,   //                                  Program Interrupt Request\n        SL:         0o177774,   //                                  Stack Limit Register\n        PSW:        0o177776    // 777776   17777776    0x3FFFFE    Processor Status Word\n    },\n    DL11: {                     // Serial Line Interface (program compatible with the KL11 for control of console teleprinters)\n        PRI:        4,\n        RVEC:       0o060,\n        XVEC:       0o064,\n        RCSR: {                 // 177560: DL11 Receiver Status Register\n            RE:     0x0001,     // Reader Enable (W/O)\n            DTR:    0x0002,     // Data Terminal Ready (R/W)\n            RTS:    0x0004,     // Request To Send (R/W)\n            STD:    0x0008,     // Secondary Transmitted Data (R/W)\n            DIE:    0x0020,     // Dataset Interrupt Enable (R/W)\n            RIE:    0x0040,     // Receiver Interrupt Enable (R/W)\n            RD:     0x0080,     // Receiver Done (R/O)\n            SRD:    0x0400,     // Secondary Received Data (R/O)\n            RA:     0x0800,     // Receiver Active (R/O)\n            CD:     0x1000,     // Carrier Detect (R/O)\n            CTS:    0x2000,     // Clear To Send (R/O)\n            RI:     0x4000,     // Ring Indicator (R/O)\n            DSC:    0x8000,     // Dataset Status Change (R/O)\n            RMASK:  0xFFFE,     // bits readable (TODO: All I know for sure is that bit 0 is NOT readable; see readRCSR())\n            WMASK:  0x006F,     // bits writable\n            RS232:  0x0006,     // bits affecting RS-232 status updates\n            BAUD:   9600\n        },\n        RBUF: {                 // 177562: DL11 Receiver Data Buffer Register\n            DATA:   0x00ff,     // Received Data (R/O)\n            PARITY: 0x1000,     // Received Data Parity (R/O)\n            FE:     0x2000,     // Framing Error (R/O)\n            OE:     0x4000,     // Overrun Error (R/O)\n            ERROR:  0x8000      // Error (R/O)\n        },\n        XCSR: {                 // 177564: DL11 Transmitter Status Register\n            BREAK:  0x0001,     // BREAK (R/W)\n            MAINT:  0x0004,     // Maintenance (R/W)\n            TIE:    0x0040,     // Transmitter Interrupt Enable (R/W)\n            READY:  0x0080,     // Transmitter Ready (R/O)\n            RMASK:  0x00C5,\n            WMASK:  0x0045,\n            BAUD:   9600\n        },\n        XBUF: {                 // 177566: DL11 Transmitter Data Buffer Register\n            DATA:   0x00FF      // Transmitted Data (W/O) (TODO: Determine why pdp11.js effectively defined this as 0x7F)\n        }\n    },\n    KW11: {                     // KW11-L Line Time Clock (60Hz; well, OK, or 50Hz, if you're in the UK, I suppose...)\n        PRI:        6,\n        VEC:        0o100,\n        DELAY:      0,\n        LKS: {                  // 177546: KW11-L Clock Status\n            IE:     0x0040,     // Interrupt Enable\n            MON:    0x0080,     // Monitor\n            MASK:   0x00C0      // these are the only bits that can read or written\n        }\n    },\n    PC11: {                     // High Speed Reader & Punch (PR11 is a Reader-only unit)\n        PRI:        4,          // NOTE: reader has precedence over punch\n        RVEC:       0o070,      // reader vector\n        PVEC:       0o074,      // punch vector\n        PRS: {                  // 177550: PC11 (and PR11) Reader Status Register\n            RE:     0x0001,     // (000001) Reader Enable (W/O)\n            IE:     0x0040,     // (000100) Reader Interrupt Enable (allows the DONE and ERROR bits to trigger an interrupt)\n            DONE:   0x0080,     // (000200) Done (R/O)\n            BUSY:   0x0800,     // (004000) Busy (R/O)\n            ERROR:  0x8000,     // (100000) Error (R/O)\n            CLEAR:  0x08C0,     // (004300) bits cleared on INIT\n            RMASK:  0xFFFE,     // (177776) bits readable (TODO: All I know for sure is that bit 0 is NOT readable; see readPRS())\n            WMASK:  0x0041,     // (000101) bits writable\n            BAUD:   3600\n        },\n        PRB: {                  // 177552: PC11 (and PR11) Reader Buffer Register\n            MASK:   0x00FF      // Data\n        },\n        PPS: {                  // 177554: PC11 Punch Status Register\n            IE:     0x0040,     // Interrupt Enable\n            RDY:    0x0080,     // Ready\n            ERROR:  0x8000,     // Error (eg, no tape in punch, or punch has no power)\n            WMASK:  0x0040,     // bits writable\n            BAUD:   600\n        },\n        PPB: {                  // 177556: PC11 Punch Buffer Register\n            MASK:   0x00FF      // Data\n        }\n    },\n    RK11: {                     // RK11 Disk Controller\n        PRI:        5,\n        VEC:        0o220,\n        DRIVES:     8,          // maximum of 8 drives\n        RKDS: {                 // 177400: Drive Status Register\n            SC:     0x000F,     // (000017) Sector Counter\n            SCESA:  0x0010,     // (000020) Sector Counter Equals Sector Address\n            WPS:    0x0020,     // (000040) Write Protected Status (set if write-protected)\n            RRDY:   0x0040,     // (000100) Read/Write/Seek Ready\n            DRDY:   0x0080,     // (000200) Drive Ready\n            SOK:    0x0100,     // (000400) Sector Counter OK\n            SIN:    0x0200,     // (001000) Seek Incomplete\n            DRU:    0x0400,     // (002000) Drive Unsafe\n            RK05:   0x0800,     // (004000) RK05 is the selected disk drive (always set)\n            DPL:    0x1000,     // (010000) Drive Power Low\n            ID:     0xE000,     // (160000) Drive ID (logical drive number of an interrupting drive)\n            SHIFT: {\n                ID:     13\n            }\n        },\n        RKER: {                 // 177402: Error Register\n            WCE:    0x0001,     // Write Check Error\n            CSE:    0x0002,     // Checksum Error\n            SE:     0x0003,     // Soft Error bits (cleared at the start of a new function)\n            UNUSED: 0x001C,     // unused (returns zero)\n            NXS:    0x0020,     // Non-Existent Sector\n            NXC:    0x0040,     // Non-Existent Cylinder\n            NXD:    0x0080,     // Non-Existent Disk\n            TE:     0x0100,     // Timing Error\n            DLT:    0x0200,     // Date Late\n            NXM:    0x0400,     // Non-Existent Memory\n            PGE:    0x0800,     // Programming Error\n            SKE:    0x1000,     // Seek Error\n            WLO:    0x2000,     // Write Lock-Out Violation\n            OVR:    0x4000,     // Overrun\n            DRE:    0x8000,     // Drive Error\n            HE:     0x7FE0      // Hard Error bits (cleared only by Bus RESET or RK11 CRESET function)\n        },\n        RKCS: {                 // 177404: Control Status Register\n            GO:     0x0001,     // (000001) Go (W/O)\n            FUNC:   0x000E,     // (000016) Function Code (F2,F1,F0) (R/W)\n            MEX:    0x0030,     // (000060) Memory Extension (R/W)\n            IE:     0x0040,     // (000100) Interrupt Enable (R/W)\n            CRDY:   0x0080,     // (000200) Controller Ready (R/O)\n            SSE:    0x0100,     // (000400) Stop on Soft Error (R/W)\n            EXB:    0x0200,     // (001000) Extra Bit (R/W)\n            FMT:    0x0400,     // (002000) Format (R/W)\n            IBA:    0x0800,     // (004000) Inhibit RKBA Increment (R/W)\n            SCP:    0x2000,     // (020000) Search Complete (R/O)\n            HE:     0x4000,     // (040000) Hard Error (R/O)\n            ERR:    0x8000,     // (100000) Composite Error (R/O) (set when any RKER bit is set)\n            UNUSED: 0x1200,     // (011000) unused\n            RMASK:  0xEFFE,     // (167776) bits readable\n            WMASK:  0x0F7F,     // (007577) bits writable\n            SHIFT: {\n                FUNC:   1,\n                MEX:    4\n            }\n        },\n        RKDA: {                 // 177412: Disk Address Register\n            SA:     0x000F,     // (000017) Sector Address\n            HS:     0x0010,     // (000020) Head Select (aka SUR: clear for upper disk head, set for lower)\n            CA:     0x1FE0,     // (017740) Cylinder Address (aka CYL ADDR)\n            DS:     0xE000,     // (160000) Drive Select (aka DR SEL)\n            SHIFT: {\n                HS:     4,\n                CA:     5,\n                DS:     13\n            }\n        },\n        FUNC: {\n            CRESET: 0b0000,     // (00) Controller Reset\n            WRITE:  0b0010,     // (02) Write\n            READ:   0b0100,     // (04) Read\n            WCHK:   0b0110,     // (06) Write Check\n            SEEK:   0b1000,     // (10) Seek\n            RCHK:   0b1010,     // (12) Read Check\n            DRESET: 0b1100,     // (14) Drive Reset\n            WLOCK:  0b1110      // (16) Write Lock\n        }\n    },\n    RL11: {                     // RL11 Disk Controller\n        PRI:        5,\n        VEC:        0o160,\n        DRIVES:     4,          // maximum of 4 drives\n        PREFIX:     \"DY\",\n        RLCS: {                 // 174400: Control Status Register\n            DRDY:   0x0001,     // (000001) Drive Ready (R/O)\n            FUNC:   0x000E,     // (000016) Function Code (F2,F1,F0) (R/W)\n            BAE:    0x0030,     // (000060) Bus Address Extension bits (BA17,BA16) (R/W)\n            IE:     0x0040,     // (000100) Interrupt Enable (R/W)\n            CRDY:   0x0080,     // (000200) Controller Ready (R/W)\n            DS:     0x0300,     // (001400) Drive Select (DS1,DS0) (R/W)\n            ERRC:   0x3C00,     // (036000) Error Code (R/O)\n            DE:     0x4000,     // (040000) Drive Error (R/O)\n            ERR:    0x8000,     // (100000) Composite Error (R/O)\n            CLEAR:  0x3F7E,     // (037576) bits cleared on INIT (bits 1-6 and 8-13 are cleared)\n            SET:    0x0080,     // (000200) bits set on INIT (bit 7 is set)\n            RMASK:  0xFFFF,     // (177777) no write-only bits\n            WMASK:  0x03FE,     // (001776) bits writable\n            SHIFT: {\n                FUNC:   1,\n                BAE:    4,\n                DS:     8\n            }\n        },\n        RLBA: {                 // 174402: Bus Address Register\n            WMASK:  0xFFFE      // bit 0 is effectively not writable (always zero)\n        },\n        /*\n         * This register has 3 formats: one for Seek, another for Read/Write, and a third for Get Status\n         */\n        RLDA: {                 // 174404: Disk Address Register\n            SEEK_CMD:   0x0001, // Seek: bit 0 must be set, bits 1 and 3 must be clear\n            SEEK_DIR:   0x0004, // Direction (clear to move heads away from spindle (lower cylinder), set to move to higher cylinder)\n            SEEK_HS:    0x0010, // Head Select (clear to select upper head, set to select lower head)\n            SEEK_CAD:   0xFF80, // Cylinder Address Difference\n            RW_SA:      0x003F, // Sector Address\n            RW_HS:      0x0040, // Head Select\n            RW_CA:      0xFF80, // Cylinder Address (RL01 has 256 cylinders, RL02 has 512)\n            GS_CMD:     0x0003, // Get Status: bit 0 must be set, bit 1 set, and bits 2 and 4-7 clear (bits 8-15 unused)\n            GS_RST:     0x0008, // Reset (when set, clears error register before sending status word to controller)\n            SHIFT: {\n                RW_HS:  6,\n                RW_CA:  7\n            }\n        },\n        /*\n         * This register has 3 formats: one for Read Header, another for Read/Write, and a third for Get Status\n         */\n        RLMP: {                 // 177406: Multi-Purpose Register\n            GS_ST: {            // Major State Code (of the drive)\n                LOADC:  0x0,    // Load Cartridge\n                SPINUP: 0x1,    // Spin-Up\n                BRUSHC: 0x2,    // Brush Cycle\n                LOADH:  0x3,    // Load Heads\n                SEEK:   0x4,    // Seek\n                LOCKON: 0x5,    // Lock On\n                UNLOADH:0x6,    // Unload Heads\n                SPINDN: 0x7     // Spin-Down\n            },\n            GS_BH:      0x0008, // Brushes Home\n            GS_HO:      0x0010, // Heads Out\n            GS_CO:      0x0020, // Cover Open (or dust cover is not in place)\n            GS_HS:      0x0040, // Head Selected (0 for upper head, 1 for lower head)\n            GS_DT:      0x0080, // Drive Type (0 for RL01, 1 for RL02)\n            GS_DSE:     0x0100, // Drive Select Error\n            GS_VC:      0x0200, // Volume Check (Set during transition from a head load state to a head-on-track state; cleared by execution of a Get Status command with Bit 3 asserted)\n            GS_WGE:     0x0400, // Write Gate Error\n            GS_SPE:     0x0800, // Spin Error\n            GS_SKTO:    0x1000, // Seek Time-Out\n            GS_WL:      0x2000, // Write Lock\n            GS_CHE:     0x4000, // Current Head Error\n            GS_WDE:     0x8000  // Write Data Error\n        },\n        RLBE: {                 // 174410: Bus (Address) Extension Register\n            MASK:   0x003F      // bits 5-0 correspond to bus address bits 21-16\n        },\n        ERRC: {                 // NOTE: These error codes are pre-shifted to read/write directly from/to RLCS.ERRC\n            OPI:    0x0400,     // Operation Incomplete\n            DCRC:   0x0800,     // Read Data CRC\n            WCE:    0x0800,     // Write Check Error\n            HCRC:   0x0C00,     // Header CRC\n            DLT:    0x1000,     // Data Late\n            HNF:    0x1400,     // Header Not Found\n            NXM:    0x2000,     // Non-Existent Memory\n            MPE:    0x2400      // Memory Parity Error (RLV12 only)\n        },\n        FUNC: {                 // NOTE: These function codes are pre-shifted to read/write directly from/to RLCS.FUNC\n            NOP:    0b0000,     // (00) No-Op\n            WCHK:   0b0010,     // (02) Write Check\n            STATUS: 0b0100,     // (04) Get Status\n            SEEK:   0b0110,     // (06) Seek\n            RHDR:   0b1000,     // (10) Read Header\n            WDATA:  0b1010,     // (12) Write Data\n            RDATA:  0b1100,     // (14) Read Data\n            RDNC:   0b1110      // (16) Read Data without Header Check\n        }\n    },\n    RX11: {                     // RX11 Disk Controller\n        PRI:        5,\n        VEC:        0o264,\n        DRIVES:     2,          // maximum of 2 drives\n        PREFIX:     \"DX\",\n        RXCS: {                 // 177170: Command and Status Register\n            GO:     0x0001,     // (000001) Go (W/O)\n            FUNC:   0x000E,     // (000016) Function Code (F2,F1,F0) (W/O)\n            UNIT:   0x0010,     // (000020) Unit Select (W/O)\n            DONE:   0x0020,     // (000040) Done (R/O)\n            IE:     0x0040,     // (000100) Interrupt Enable (R/W, cleared on INIT)\n            TR:     0x0080,     // (000200) Transfer Request (R/O)\n            INIT:   0x4000,     // (040000) RX11 Initialize (W/O)\n            ERR:    0x8000,     // (100000) Error (R/O, cleared on INIT or command)\n            UNUSED: 0x3F00,     // (037400) unused\n            RMASK:  0x80E0,     // (100340) bits readable\n            WMASK:  0x405F      // (040137) bits writable\n        },\n        RXDB: {                 // 177172: Data Buffer Register\n        },\n        RXTA: {\n            MASK:   0x007F\n        },\n        RXSA: {\n            MASK:   0x001F\n        },\n        RXES: {\n            /*\n             * The DRDY bit is only valid when retrieved via a Read Status function or at completion of Initialize when it indicates\n             * status of drive O.  It is asserted if the unit currently selected exists, is properly supplied with power, has a diskette\n             * installed correctly, has its door closed, and has a diskette up to speed.\n             *\n             * If the Error bit was set in the RXCS but Error bits are not set in the RXES, then specific error conditions can be accessed via\n             * a Read Error Register function.\n             */\n            CRC:    0x0001,     // CRC error (RXES is moved to the RXDB, and Error and Done are asserted)\n            PARITY: 0x0002,     // parity error (RXES is moved to the RXDB, and Error and Done are asserted)\n            ID:     0x0004,     // Initialize Done (following a programmable or UNIBUS initialization, or a power failure)\n            DEL:    0x0040,     // Deleted Data Detected\n            DRDY:   0x0080      // Drive Ready\n        },\n        FUNC: {                 // NOTE: These function codes are pre-shifted to read/write directly from/to RXCS.FUNC\n            FILL:   0b0000,     // Fill Buffer\n            EMPTY:  0b0010,     // Empty Buffer\n            WRITE:  0b0100,     // Write Sector\n            READ:   0b0110,     // Read Sector\n            UNUSED: 0b1000,     // UNUSED\n            RDSTAT: 0b1010,     // Read Status\n            WRDEL:  0b1100,     // Write Deleted Data Sector\n            RDERR:  0b1110      // Read Error Register\n        },\n        ERROR: {\n            HOME0:      0o0010, // Drive 0 failed to see home on Initialize\n            HOME1:      0o0020, // Drive 1 failed to see home on Initialize\n            BAD_HOME:   0o0030, // Found home when stepping out 10 tracks for INIT\n            NO_TRACK:   0o0040, // Tried to access a track greater than 77\n            FOUND_HOME: 0o0050, // Home was found before desired track was reached\n            SELF_DIAG:  0o0060, // Self-diagnostic error\n            NO_SECTOR:  0o0070, // Desired sector could not be found after looking at 52 headers (2 revolutions)\n            NO_SEP:     0o0110, // More than 40us and no SEP clock seen\n            NO_PREAM:   0o0120, // A preamble could not be found\n            NO_IOMARK:  0o0130, // Preamble found but no I/O mark found within allowable time span\n            CRC_HEADER: 0o0140, // CRC error on what we thought was a header\n            BAD_TRACK:  0o0150, // The header track address of a good header does not compare with the desired track\n            NO_ID:      0o0160, // Too many tries for an IDAM (identifies header)\n            NO_DATA:    0o0170, // Data AM not found in allotted time\n            CRC_DATA:   0o0200, // CRC error on reading the sector from the disk (No code appears in the ERREG).\n            BAD_PARITY: 0o0210  // All parity errors\n        }\n    },\n    VECTORS: {\n        0o060:  \"DL11R\",\n        0o064:  \"DL11X\",\n        0o070:  \"PC11R\",\n        0o074:  \"PC11X\",\n        0o100:  \"KW11\",\n        0o160:  \"RL11\",\n        0o220:  \"RK11\",\n        0o264:  \"RX11\"\n    }\n};\n\nPDP11.RX11.RX01 = [\n    \"DX\",\n    77,  1, 26, 128,            // disk geometry (CHSN: cylinders, heads, sectors/track, and bytes/sector)\n    1,   0,  0, 128,            // boot code location (cylinder, head, sector index (NOT sector number), and number of bytes)\n    0                           // default drive status\n];\n\nPDP11.RK11.RK05 = [\n    \"RK\",\n    203, 2, 12, 512,            // disk geometry (CHSN: cylinders, heads, sectors/track, and bytes/sector)\n    0,   0,  0, 512,            // boot code location (cylinder, head, sector index (NOT sector number), and number of bytes)\n    PDP11.RK11.RKDS.RK05 | PDP11.RK11.RKDS.SOK | PDP11.RK11.RKDS.RRDY\n];\n\nPDP11.RL11.RL02K = [\n    \"RL\",\n    512, 2, 40, 256,            // disk geometry (CHSN: cylinders, heads, sectors/track, and bytes/sector)\n    0,   0,  0, 256,            // boot code location (cylinder, head, sector index (NOT sector number), and number of bytes)\n    PDP11.RL11.RLMP.GS_ST.LOCKON | PDP11.RL11.RLMP.GS_BH | PDP11.RL11.RLMP.GS_HO\n];\n\nPDP11.ACCESS.READ_WORD   = PDP11.ACCESS.WORD | PDP11.ACCESS.READ;       // formerly READ_MODE (2)\nPDP11.ACCESS.READ_BYTE   = PDP11.ACCESS.BYTE | PDP11.ACCESS.READ;       // formerly READ_MODE (2) | BYTE_MODE (1)\nPDP11.ACCESS.WRITE_WORD  = PDP11.ACCESS.WORD | PDP11.ACCESS.WRITE;      // formerly WRITE_MODE (4)\nPDP11.ACCESS.WRITE_BYTE  = PDP11.ACCESS.BYTE | PDP11.ACCESS.WRITE;      // formerly WRITE_MODE (4) | BYTE_MODE (1)\nPDP11.ACCESS.UPDATE_WORD = PDP11.ACCESS.WORD | PDP11.ACCESS.UPDATE;     // formerly MODIFY_WORD (2 | 4)\nPDP11.ACCESS.UPDATE_BYTE = PDP11.ACCESS.BYTE | PDP11.ACCESS.UPDATE;     // formerly MODIFY_BYTE (1 | 2 | 4)\n\n/*\n * PSW arithmetic flags are NOT stored directly into the PSW register; they are maintained across separate flag registers.\n */\nPDP11.PSW.FLAGS         = (PDP11.PSW.NF | PDP11.PSW.ZF | PDP11.PSW.VF | PDP11.PSW.CF);\n\n/*\n * Combine all the shared globals and machine-specific globals into one machine-specific global object,\n * which all machine components should start using; eg: \"if (PDP11.DEBUGGER)\" instead of \"if (DEBUGGER)\".\n */\nPDP11.APPCLASS          = APPCLASS;\nPDP11.APPNAME           = APPNAME;\nPDP11.DEBUGGER          = DEBUGGER;\nPDP11.BYTEARRAYS        = BYTEARRAYS;\nPDP11.TYPEDARRAYS       = TYPEDARRAYS;\nPDP11.MEMFAULT          = MEMFAULT;\nPDP11.WORDBUS           = WORDBUS;\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/messages.js (C) Jeff Parsons 2012-2018\n */\n\nvar MessagesPDP11 = {\n    CPU:        0x00000001,\n    TRAP:       0x00000002,\n    FAULT:      0x00000004,\n    INT:        0x00000008,\n    BUS:        0x00000010,\n    MEMORY:     0x00000020,\n    MMU:        0x00000040,\n    ROM:        0x00000080,\n    DEVICE:     0x00000100,\n    PANEL:      0x00000200,\n    KEYBOARD:   0x00000400,\n    KEYS:       0x00000800,\n    PC11:       0x00001000,\n    PAPER:      0x00001000,\n    DISK:       0x00002000,\n    READ:       0x00004000,\n    WRITE:      0x00008000,\n    RK11:       0x00010000,\n    RL11:       0x00020000,\n    RX11:       0x00040000,\n    DL11:       0x00100000,\n    SERIAL:     0x00100000,\n    KW11:       0x00200000,\n    TIMER:      0x00200000,\n    SPEAKER:    0x01000000,\n    COMPUTER:   0x02000000,\n    BUFFER:     0x20000000,\n    WARN:       0x40000000,\n    HALT:       0x80000000|0\n};\n\n/*\n * Message categories supported by the messageEnabled() function and other assorted message\n * functions. Each category has a corresponding bit value that can be combined (ie, OR'ed) as\n * needed.  The Debugger's message command (\"m\") is used to turn message categories on and off,\n * like so:\n *\n *      m port on\n *      m port off\n *      ...\n *\n * NOTE: The order of these categories can be rearranged, alphabetized, etc, as desired; just be\n * aware that changing the bit values could break saved Debugger states (not a huge concern, just\n * something to be aware of).\n */\nMessagesPDP11.CATEGORIES = {\n    \"cpu\":      MessagesPDP11.CPU,\n    \"trap\":     MessagesPDP11.TRAP,\n    \"fault\":    MessagesPDP11.FAULT,\n    \"int\":      MessagesPDP11.INT,\n    \"bus\":      MessagesPDP11.BUS,\n    \"memory\":   MessagesPDP11.MEMORY,\n    \"mmu\":      MessagesPDP11.MMU,\n    \"rom\":      MessagesPDP11.ROM,\n    \"device\":   MessagesPDP11.DEVICE,\n    \"panel\":    MessagesPDP11.PANEL,\n    \"keyboard\": MessagesPDP11.KEYBOARD, // \"kbd\" is also allowed as shorthand for \"keyboard\"; see doMessages()\n    \"key\":      MessagesPDP11.KEYS,     // using \"key\" instead of \"keys\", since the latter is a method on JavasScript objects\n    \"pc11\":     MessagesPDP11.PC11,\n    \"paper\":    MessagesPDP11.PAPER,\n    \"disk\":     MessagesPDP11.DISK,\n    \"read\":     MessagesPDP11.READ,\n    \"write\":    MessagesPDP11.WRITE,\n    \"rk11\":     MessagesPDP11.RK11,\n    \"rl11\":     MessagesPDP11.RL11,\n    \"rx11\":     MessagesPDP11.RX11,\n    \"dl11\":     MessagesPDP11.DL11,\n    \"serial\":   MessagesPDP11.SERIAL,\n    \"kw11\":     MessagesPDP11.KW11,\n    \"timer\":    MessagesPDP11.TIMER,\n    \"speaker\":  MessagesPDP11.SPEAKER,\n    \"computer\": MessagesPDP11.COMPUTER,\n    /*\n     * Now we turn to message actions rather than message types; for example, setting \"halt\"\n     * on or off doesn't enable \"halt\" messages, but rather halts the CPU on any message above.\n     *\n     * Similarly, \"m buffer on\" turns on message buffering, deferring the display of all messages\n     * until \"m buffer off\" is issued.\n     */\n    \"buffer\":   MessagesPDP11.BUFFER,\n    \"warn\":     MessagesPDP11.WARN,\n    \"halt\":     MessagesPDP11.HALT\n};\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/panel.js (C) Jeff Parsons 2012-2018\n */\n\n\n/**\n * Since the Closure Compiler treats ES6 classes as @struct rather than @dict by default,\n * it deters us from defining named properties on our components; eg:\n *\n *      this['exports'] = {...}\n *\n * results in an error:\n *\n *      Cannot do '[]' access on a struct\n *\n * So, in order to define 'exports', we must override the @struct assumption by annotating\n * the class as @unrestricted (or @dict).  Note that this must be done both here and in the\n * Component class, because otherwise the Compiler won't allow us to *reference* the named\n * property either.\n *\n * TODO: Consider marking ALL our classes unrestricted, because otherwise it forces us to\n * define every single property the class uses in its constructor, which results in a fair\n * bit of redundant initialization, since many properties aren't (and don't need to be) fully\n * initialized until the appropriate init(), reset(), restore(), etc. function is called.\n *\n * The upside, however, may be that since the structure of the class is completely defined by\n * the constructor, JavaScript engines may be able to optimize and run more efficiently.\n *\n * @unrestricted\n */\nclass PanelPDP11 extends Component {\n    /**\n     * PanelPDP11(parmsPanel)\n     *\n     * The PanelPDP11 component has no required (parmsPanel) properties.\n     *\n     * @param {Object} parmsPanel\n     * @param {boolean} fBindings (true if panel may have bindings, otherwise not)\n     */\n    constructor(parmsPanel, fBindings)\n    {\n        super(\"Panel\", parmsPanel, MessagesPDP11.PANEL);\n\n        /*\n         * If there are any live registers, LEDs, etc, to display, this will provide a count.\n         * TODO: Add some UI for fDisplayLiveRegs (either an XML property, or a UI checkbox, or both).\n         */\n        this.cLiveRegs = 0;\n        this.nDisplayCount = 0;\n        this.nDisplayLimit = 60;\n        this.fDisplayLiveRegs = true;\n        this.fBindings = fBindings;\n\n        /*\n         * regSwitches contains the Front Panel (aka Console) SWITCH register, which is also available\n         * as a read-only register at 177570 (but only the low 16 bits).  regDisplay contains the DISPLAY\n         * register, a write-only register at the same address.\n         *\n         * regAddr is an internal register containing the contents of the Front Panel's ADDRESS display,\n         * and regData corresponds to the DATA display.  They are updated by updateAddr() and updateData(),\n         * which in turn take care of calling updateLEDArray().\n         *\n         * The state of ALL switches is maintained in this.switches, and likewise all LED states are\n         * maintained in this.leds, but for convenience, we also mirror some of those states in dedicated\n         * variables (eg, regSwitches for the SWITCH register, fLEDTest for the 'TEST' switch, etc).\n         */\n        this.regDisplay = 0;\n        this.regSwitches = 0;\n        this.regAddr = this.regData = 0;\n        this.ledAddr = this.ledData = -1;\n\n        /*\n         * The panel hardware has the following additional (supported) state; note that there are several\n         * settings on a real Front Panel that we don't support (eg, stepping one cycle vs. one instruction).\n         *\n         * While my initial intent is to eventually support all the ADDRSEL switch settings, I probably\n         * won't bother with any DATASEL switch settings; instead, I will automatically display the DISPLAY\n         * register (regDisplay) [the equivalent of selecting 'DISPLAY REGISTER'] except when data is being\n         * examined or deposited [the equivalent of selecting 'DATA PATHS'].\n         */\n        this.fLEDTest = false;              // LED (lamp) test in progress\n        this.fExamine = false;              // true if the previously pressed switch was the 'EXAM' switch\n        this.fDeposit = false;              // true if the previously pressed switch was the 'DEP' switch\n        this.nAddrSel = PanelPDP11.ADDRSEL.CONS_PHY;\n\n        /*\n         * Every LED has a simple numeric value, assigned when setBinding() is called:\n         *\n         *      zero if \"off\", non-zero if \"on\"\n         *\n         * initBus() will call displayLEDs() to ensure that every LED is set to its initial value.\n         */\n        this.leds = {};\n\n        /*\n         * Every switch has an array associated with it:\n         *\n         *      [0]: initial value of switch (0 if \"down\", 1 if \"up\")\n         *      [1]: current value of switch\n         *      [2]: true if the switch is momentary, false if not\n         *      [3]: true if the switch is currently pressed, false if released\n         *      [4]: optional handler to call whenever the switch is pressed or released\n         *      [5]: optional switch index (used with CNSW switches 'S0' through 'S21')\n         *\n         * initBus() will call displaySwitches() to ensure that every switch is the position represented below.\n         *\n         * NOTE: Not all switches have the same \"process\" criteria.  For example, 'TEST' will perform a LED test\n         * when it is momentarily pressed \"up\", whereas 'LOAD [ADRS]' will load the ADDRESS register from the\n         * SWITCH register when it is momentarily pressed \"down\".\n         *\n         * This means that processLEDTest(value) must act when value == 1 (\"up\"), whereas processLoadAddr(value)\n         * must act when value == 0 (\"down\").  You can infer all this from the table below, because the initial value\n         * of any momentary switch is its \"inactive\" value, so the opposite is its \"active\" value.\n         */\n        this.switches = {\n            'START':    [1, 1, true,  false, this.processStart],\n            'STEP':     [1, 1, false, false, this.processStep],\n            'ENABLE':   [1, 1, false, false, this.processEnable],\n            'CONT':     [1, 1, true,  false, this.processContinue],\n            'DEP':      [0, 0, true,  false, this.processDeposit],\n            'EXAM':     [1, 1, true,  false, this.processExamine],\n            'LOAD':     [1, 1, true,  false, this.processLoadAddr],\n            'TEST':     [0, 0, true,  false, this.processLEDTest]\n        };\n        for (var i = 0; i < 22; i++) {\n            this.switches['S'+i] = [0, 0, false, false, this.processSRSwitch, i];\n        }\n\n        /** @type {ComputerPDP11} */\n        this.cmp = null;\n\n        /** @type {BusPDP11} */\n        this.bus = null;\n\n        /** @type {CPUStatePDP11} */\n        this.cpu = null;\n\n        /** @type {DebuggerPDP11} */\n        this.dbg = null;\n\n        /*\n         * The 'hold' and 'toggle' exports, which map to holdSwitch() and toggleSwitch(), both press and release\n         * the specified switch, but processCommands() considers a 'hold' function to be asynchronous, which means\n         * that holdSwitch() will be passed a callback function that can be used to implement a delay between the\n         * press and the release, whereas toggleSwitch() will not.\n         *\n         * holdSwitch() only makes sense for momentary switches (eg, 'TEST'), where a visual delay might be nice.\n         * If the switch isn't momentary, or no delay is desired, then use toggleSwitch(); it will be more efficient.\n         *\n         * Finally, for switches that are toggles (eg, 'ENABLE'), you can use setSwitch() to set it to a specific\n         * state: zero for \"off\" and non-zero for \"on\".  setSwitch() also supports meta-switches like \"SR\", using\n         * the entire value to set a series of switches at once; the value is assumed to be octal unless overridden\n         * by a prefix (eg, \"0x\") or suffix (eg, \".\").\n         */\n        this['exports'] = {\n            'hold': this.holdSwitch,\n            'toggle': this.toggleSwitch,\n            'reset': this.resetSwitches,\n            'set': this.setSwitch\n        };\n\n        this.setReady();\n    }\n\n    /**\n     * getAR()\n     *\n     * @this {PanelPDP11}\n     * @return {number} (current ADDRESS register)\n     */\n    getAR()\n    {\n        return this.regAddr;\n    }\n\n    /**\n     * setAR(value)\n     *\n     * @this {PanelPDP11}\n     * @param {number} value (new ADDRESS register)\n     */\n    setAR(value)\n    {\n        this.updateAddr(this.regAddr = value);\n    }\n\n    /**\n     * getDR()\n     *\n     * @this {PanelPDP11}\n     * @return {number} (current DISPLAY register)\n     */\n    getDR()\n    {\n        return this.regDisplay;\n    }\n\n    /**\n     * setDR(value)\n     *\n     * @this {PanelPDP11}\n     * @param {number} value (new DISPLAY register)\n     * @return {number}\n     */\n    setDR(value)\n    {\n        return this.updateData(this.regDisplay = value);\n    }\n\n    /**\n     * getSR()\n     *\n     * @this {PanelPDP11}\n     * @return {number} (current SWITCH register)\n     */\n    getSR()\n    {\n        return this.regSwitches;\n    }\n\n    /**\n     * setSR(value)\n     *\n     * @this {PanelPDP11}\n     * @param {number} value (new SWITCH register)\n     */\n    setSR(value)\n    {\n        this.setSRSwitches(value);\n    }\n\n    /**\n     * getSwitch(name)\n     *\n     * @this {PanelPDP11}\n     * @param {string} name\n     * @return {number|undefined} 0 if switch is off (\"down\"), 1 if on (\"up\"), or undefined if unrecognized\n     */\n    getSwitch(name)\n    {\n        return this.switches[name] && this.switches[name][1];\n    }\n\n    /**\n     * reset(fPowerUp)\n     *\n     * NOTE: Since we've registered our handler with the Bus component, we will be called twice whenever\n     * the entire machine is reset: once when the Computer's reset() handler calls the Bus's reset() handler,\n     * and again when the Computer's reset() handler calls us directly.  Multiple resets should be harmless.\n     *\n     * @this {PanelPDP11}\n     * @param {boolean} [fPowerUp]\n     */\n    reset(fPowerUp)\n    {\n        /*\n         * Simulate a call to our stop() handler, to update the panel's ADDRESS register with the current PC.\n         */\n        this.stop();\n        if (fPowerUp) this.setDR(0);\n    }\n\n    /**\n     * setBinding(sType, sBinding, control, sValue)\n     *\n     * Some panel layouts don't have bindings of their own, and even when they do, there may still be some\n     * components (eg, the CPU) that prefer to update their own bindings, so we pass along all binding requests\n     * to the Computer, CPU, Keyboard and Debugger components first.  The order shouldn't matter, since any\n     * component that doesn't recognize the specified binding should simply ignore it.\n     *\n     * @this {PanelPDP11}\n     * @param {string|null} sType is the type of the HTML control (eg, \"button\", \"textarea\", \"register\", \"flag\", \"rled\", etc)\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"reset\")\n     * @param {HTMLElement} control is the HTML control DOM object (eg, HTMLButtonElement)\n     * @param {string} [sValue] optional data value\n     * @return {boolean} true if binding was successful, false if unrecognized binding request\n     */\n    setBinding(sType, sBinding, control, sValue)\n    {\n        if (this.cmp && this.cmp.setBinding(sType, sBinding, control, sValue)) {\n            return true;\n        }\n        if (this.cpu && this.cpu.setBinding(sType, sBinding, control, sValue)) {\n            return true;\n        }\n        if (DEBUGGER && this.dbg && this.dbg.setBinding(sType, sBinding, control, sValue)) {\n            return true;\n        }\n\n        switch (sBinding) {\n        case 'R0':\n        case 'R1':\n        case 'R2':\n        case 'R3':\n        case 'R4':\n        case 'R5':\n        case 'R6':\n        case 'R7':\n        case 'NF':\n        case 'ZF':\n        case 'VF':\n        case 'CF':\n        case 'PS':\n            this.bindings[sBinding] = control;\n            this.cLiveRegs++;\n            return true;\n\n        default:\n            /*\n             * Square (\"led\") or round (\"rled\") LEDs are defined in machine XML files like so:\n             *\n             *      <control type=\"rled\" binding=\"A3\" value=\"1\" width=\"100%\" container=\"center\"/>\n             *\n             * Only *type* and *binding* attributes are required; if *value* is omitted, the default value is 0 (\"off\").\n             */\n            if (sType == \"led\" || sType == \"rled\") {\n                this.bindings[sBinding] = control;\n                this.leds[sBinding] = sValue? 1 : 0;\n                this.cLiveRegs++;\n                return true;\n            }\n            /*\n             * Switches are defined in machine XML files like so:\n             *\n             *      <control type=\"switch\" binding=\"S3\" value=\"1\" width=\"100%\" container=\"center\"/>\n             *\n             * Only *type* and *binding* attributes are required; if *value* is omitted, the default value is 0 (\"down\").\n             *\n             * Currently, there is no XML attribute to indicate whether a switch is \"momentary\"; only recognized switches\n             * in our internal table can have that attribute.\n             */\n            if (sType == \"switch\") {\n                /*\n                 * Like LEDs, we allow unrecognized switches to be defined as well, but they won't do anything useful,\n                 * since only recognized switches will have handlers that perform the appropriate operations.\n                 */\n                if (this.switches[sBinding] === undefined) {\n                    this.switches[sBinding] = [sValue? 1 : 0, sValue? 1 : 0];\n                }\n                this.bindings[sBinding] = control;\n                var parent = control.parentElement || control;\n                parent = parent.parentElement || parent;\n                parent.onmousedown = function(panel, sBinding) {\n                    return function onPressSwitch() {\n                        panel.pressSwitch(sBinding);\n                    };\n                }(this, sBinding);\n                parent.onmouseup = parent.onmouseout = function(panel, sBinding) {\n                    return function onReleaseSwitch() {\n                        panel.releaseSwitch(sBinding);\n                    };\n                }(this, sBinding);\n                parent.ontouchstart = function(panel, sBinding) {\n                    return function onPressSwitch(event) {\n                        panel.pressSwitch(sBinding);\n                        event.preventDefault();\n                    };\n                }(this, sBinding);\n                parent.ontouchend = function(panel, sBinding) {\n                    return function onReleaseSwitch() {\n                        panel.releaseSwitch(sBinding);\n                    };\n                }(this, sBinding);\n                return true;\n            }\n            return super.setBinding(sType, sBinding, control, sValue);\n        }\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * @this {PanelPDP11}\n     * @param {ComputerPDP11} cmp\n     * @param {BusPDP11} bus\n     * @param {CPUStatePDP11} cpu\n     * @param {DebuggerPDP11} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.cmp = cmp;\n        this.bus = bus;\n        this.cpu = cpu;\n        this.dbg = dbg;\n\n        bus.addIOTable(this, PanelPDP11.UNIBUS_IOTABLE);\n        bus.addResetHandler(this.reset.bind(this));\n\n        this.displayLEDs();\n        this.displaySwitches();\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {PanelPDP11}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        if (!fRepower) {\n            /*\n             * As noted in init(), our powerUp() method gives us a second opportunity to notify any\n             * components that that might care (eg, CPU, Keyboard, and Debugger) that we have some controls\n             * (ie, bindings) they might want to use.\n             */\n            if (this.fBindings) PanelPDP11.init();\n\n            if (!data) {\n                this.reset(true);\n            } else {\n                if (!this.restore(data)) return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {PanelPDP11}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        return fSave? this.save() : true;\n    }\n\n    /**\n     * save()\n     *\n     * This implements save support for the PanelPDP11 component.\n     *\n     * @this {PanelPDP11}\n     * @return {Object}\n     */\n    save()\n    {\n        var state = new State(this);\n        state.set(0, [\n            this.getAR(),\n            this.getDR(),\n            this.getSR()\n        ]);\n        return state.data();\n    }\n\n    /**\n     * restore(data)\n     *\n     * This implements restore support for the PanelPDP11 component.\n     *\n     * @this {PanelPDP11}\n     * @param {Object} data\n     * @return {boolean} true if successful, false if failure\n     */\n    restore(data)\n    {\n        var a = data[0];\n        if (a) {\n            this.setAR(a[0]);\n            this.setDR(a[1]);\n            this.setSR(a[2]);\n        }\n        return true;\n    }\n\n    /**\n     * resetSwitches()\n     *\n     * @this {PanelPDP11}\n     * @return {boolean}\n     */\n    resetSwitches()\n    {\n        for (var sBinding in this.switches) {\n            var sw = this.switches[sBinding];\n            sw[1] = sw[0];\n        }\n        this.displaySwitches();\n        return true;\n    }\n\n    /**\n     * displayLED(sBinding, value)\n     *\n     * @this {PanelPDP11}\n     * @param {string} sBinding\n     * @param {boolean|number} value (true or non-zero if the LED should be on, false or zero if off)\n     */\n    displayLED(sBinding, value)\n    {\n        var control = this.bindings[sBinding];\n        if (control) {\n            /*\n             * TODO: Add support for user-definable LED colors?\n             */\n            control.style.backgroundColor = (value? \"#ff0000\" : \"#000000\");\n        }\n    }\n\n    /**\n     * displayLEDs(override)\n     *\n     * @this {PanelPDP11}\n     * @param {boolean|number|null} [override] (true turn on all LEDs, false to turn off all LEDs, null or undefined for normal LED activity)\n     */\n    displayLEDs(override)\n    {\n        for (var sBinding in this.leds) {\n            this.displayLED(sBinding, override != null? override : this.leds[sBinding]);\n        }\n    }\n\n    /**\n     * displaySwitch(sBinding, value)\n     *\n     * @this {PanelPDP11}\n     * @param {string} sBinding\n     * @param {boolean|number} value (true if the switch should be \"up\" (on), false if \"down\" (off))\n     */\n    displaySwitch(sBinding, value)\n    {\n        var control = this.bindings[sBinding];\n        if (control) {\n            control.style.marginTop = (value? \"0px\" : \"20px\");\n            control.style.backgroundColor = (value? \"#00ff00\" : \"#228B22\");\n        }\n    }\n\n    /**\n     * displaySwitches()\n     *\n     * @this {PanelPDP11}\n     */\n    displaySwitches()\n    {\n        for (var sBinding in this.switches) {\n            this.displaySwitch(sBinding, this.switches[sBinding][1]);\n        }\n    }\n\n    /**\n     * displayValue(sLabel, nValue, cch)\n     *\n     * This is principally for displaying register values, but in reality, it can be used to display any\n     * numeric value bound to the given label.\n     *\n     * @this {PanelPDP11}\n     * @param {string} sLabel\n     * @param {number} nValue\n     * @param {number} [cch]\n     */\n    displayValue(sLabel, nValue, cch)\n    {\n        if (this.bindings[sLabel]) {\n            var sVal;\n            var nBase = this.dbg && this.dbg.nBase || 8;\n            nValue = nValue || 0;\n            if (!this.cpu.isRunning() || this.fDisplayLiveRegs) {\n                sVal = nBase == 8? Str.toOct(nValue, cch) : Str.toHex(nValue, cch);\n            } else {\n                sVal = \"--------\".substr(0, cch || 4);\n            }\n            /*\n             * TODO: Determine if this test actually avoids any redrawing when a register hasn't changed, and/or if\n             * we should maintain our own (numeric) cache of displayed register values (to avoid creating these temporary\n             * string values that will have to garbage-collected), and/or if this is actually slower, and/or if I'm being\n             * too obsessive.\n             */\n            if (this.bindings[sLabel].textContent != sVal) this.bindings[sLabel].textContent = sVal;\n        }\n    }\n\n    /**\n     * holdSwitch(fnCallback, sBinding, sDelay)\n     *\n     * @this {PanelPDP11}\n     * @param {function()|null} fnCallback\n     * @param {string} sBinding\n     * @param {string} [sDelay]\n     * @return {boolean} false if wait required, true otherwise\n     */\n    holdSwitch(fnCallback, sBinding, sDelay)\n    {\n        if (this.pressSwitch(sBinding)) {\n            if (sDelay) {\n                var panel = this;\n                setTimeout(function() {\n                    panel.releaseSwitch(sBinding);\n                    if (fnCallback) fnCallback();\n                }, +sDelay);\n                return false;\n            } else {\n                this.releaseSwitch(sBinding);\n            }\n        }\n        return true;\n    }\n\n    /**\n     * setSwitch(sBinding, sValue)\n     *\n     * @this {PanelPDP11}\n     * @param {string} sBinding\n     * @param {string} sValue\n     * @return {boolean}\n     */\n    setSwitch(sBinding, sValue)\n    {\n        if (sBinding == \"SR\") {\n            return this.setSRSwitches(Str.parseInt(sValue, 8))\n        }\n        var sw = this.switches[sBinding];\n        if (sw) {\n            sw[1] = +sValue? 1 : 0;\n            this.displaySwitch(sBinding, sw[1]);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * toggleSwitch(sBinding)\n     *\n     * @this {PanelPDP11}\n     * @param {string} sBinding\n     * @return {boolean}\n     */\n    toggleSwitch(sBinding)\n    {\n        if (this.pressSwitch(sBinding)) {\n            this.releaseSwitch(sBinding);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * pressSwitch(sBinding)\n     *\n     * @this {PanelPDP11}\n     * @param {string} sBinding\n     * @return {boolean}\n     */\n    pressSwitch(sBinding)\n    {\n        var sw = this.switches[sBinding];\n        if (sw) {\n            /*\n             * Set the new switch value in sw[1] and then immediately display it\n             */\n            this.displaySwitch(sBinding, (sw[1] = 1 - sw[1]));\n\n            /*\n             * Mark the switch as \"pressed\"\n             */\n            sw[3] = true;\n\n            /*\n             * Call the appropriate process handler with the current switch value (sw[1])\n             */\n            if (sw[4]) sw[4].call(this, sw[1], sw[5]);\n\n            /*\n             * This helps the next 'DEP' or 'EXAM' press determine if the previous press was the same,\n             * while also ignoring any intervening 'STEP' presses (see processStep() for why we do that).\n             */\n            if (sBinding != PanelPDP11.SWITCH.STEP) {\n                this.fDeposit = (sBinding == PanelPDP11.SWITCH.DEP);\n                this.fExamine = (sBinding == PanelPDP11.SWITCH.EXAM);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * releaseSwitch(sBinding)\n     *\n     * @this {PanelPDP11}\n     * @param {string} sBinding\n     * @return {boolean}\n     */\n    releaseSwitch(sBinding)\n    {\n        /*\n         * pressSwitch() is simple: flip the switch's current value in sw[1] and marked it \"pressed\" in sw[3].\n         *\n         * releaseSwitch() is more complicated, because we must handle both mouseUp and mouseOut events.  The first time\n         * we receive EITHER of those events AND the switch is marked momentary (sw[2]) AND the switch is pressed (sw[3]),\n         * then we must flip the switch back to its original value.\n         *\n         * Otherwise, the only thing we have to do is mark the switch as \"released\" (ie, set sw[3] to false).\n         */\n        var sw = this.switches[sBinding];\n        if (sw) {\n            if (sw[2] && sw[3]) {\n                /*\n                 * Set the new switch value in sw[1] and then immediately display it\n                 */\n                this.displaySwitch(sBinding, (sw[1] = sw[0]));\n\n                /*\n                 * Call the appropriate process handler with the current switch value (sw[1])\n                 */\n                if (sw[4]) sw[4].call(this, sw[1], sw[5]);\n            }\n            /*\n             * Mark the switch as \"released\"\n             */\n            sw[3] = false;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * processStart(value, index)\n     *\n     * @this {PanelPDP11}\n     * @param {number} value\n     * @param {number} [index]\n     */\n    processStart(value, index)\n    {\n        if (!value && !this.cpu.isRunning()) {\n\n            this.cpu.setPC(this.regAddr);\n\n            /*\n             * TODO: Verify what the PDP-11/70 Handbook means when it says that when the 'START' switch\n             * is depressed, \"the computer system will be cleared.\"  I take it to mean that it performs\n             * the equivalent of a RESET instruction.\n             */\n            this.cpu.resetCPU();\n\n            /*\n             * The PDP-11/70 Handbook goes on to say: \"If the system needs to be initialized but execution\n             * is not wanted, the START switch should be depressed while the HALT/ENABLE switch is in the HALT\n             * position.\"\n             */\n            if (this.getSwitch(PanelPDP11.SWITCH.ENABLE)) {\n                this.cpu.startCPU();\n            }\n        }\n    }\n\n    /**\n     * processStep(value, index)\n     *\n     * If value == 1 (our initial value), then the 'STEP' switch is set to \"S INST\" (step one instruction);\n     * otherwise, it's set to \"S BUS CYCLE\" (step one bus cycle).\n     *\n     * However, since we can't currently support cycle-stepping, I've decided to innovate a little and\n     * change the meaning of this switch: the normal (\"up\") position means that successive 'EXAM' and 'DEP'\n     * operations will first add 2 to the ADDRESS register, while the opposite (\"down\") position means\n     * they will first subtract 2.\n     *\n     * See processLEDTest() for more of these exciting \"innovations\".  ;-)\n     *\n     * @this {PanelPDP11}\n     * @param {number} value\n     * @param {number} [index]\n     */\n    processStep(value, index)\n    {\n        /*\n         * There's really nothing for us to do here, because the normal press and release handlers\n         * already record the state of this switch, so it can be queried as needed, using getSwitch().\n         */\n    }\n\n    /**\n     * processEnable(value, index)\n     *\n     * If value == 1 (our initial value), then the 'ENABLE'/'HALT' switch is set to 'ENABLE', otherwise 'HALT'.\n     *\n     * @this {PanelPDP11}\n     * @param {number} value\n     * @param {number} [index]\n     */\n    processEnable(value, index)\n    {\n        /*\n         * The \"down\" (0) position is 'HALT', which stops the CPU; however, the \"up\" (1) position ('ENABLE')\n         * does NOT start the CPU.  You must press 'CONT' to continue execution, which will either continue for\n         * one instruction if this switch to set to 'HALT' or indefinitely if it is set to 'ENABLE'.\n         */\n        if (!value) {\n            this.cpu.stopCPU();\n        }\n    }\n\n    /**\n     * processContinue(value, index)\n     *\n     * @this {PanelPDP11}\n     * @param {number} value\n     * @param {number} [index]\n     */\n    processContinue(value, index)\n    {\n        if (!value && !this.cpu.isRunning()) {\n            /*\n             * TODO: Technically, we're also supposed to check the 'STEP' switch to determine if we should\n             * step one instruction or just one cycle, but we don't currently have the ability to do the latter.\n             */\n            if (!this.getSwitch(PanelPDP11.SWITCH.ENABLE)) {\n                /*\n                 * Using the Debugger's stepCPU() function is more convenient, and has the pleasant side-effect\n                 * of updating the debugger's display; however, not all machines with a Front Panel will necessarily\n                 * also have the Debugger loaded.\n                 */\n                var dbg = this.dbg;\n                if (dbg && !dbg.isBusy(true)) {\n                    dbg.setBusy(true);\n                    dbg.stepCPU(0, null);\n                    dbg.setBusy(false);\n                }\n                else {\n                    /*\n                     * For this tiny single-instruction burst, mimic what runCPU() does.\n                     */\n                    try {\n                        var nCyclesStep = this.cpu.stepCPU(1);\n                        if (nCyclesStep > 0) {\n                            this.cpu.updateTimers(nCyclesStep);\n                            this.cpu.addCycles(nCyclesStep, true);\n                            this.cpu.updateChecksum(nCyclesStep);\n                        }\n                    }\n                    catch(exception) {\n                        /*\n                         * We assume that any numeric exception was explicitly thrown by the CPU to interrupt the\n                         * current instruction.  For all other exceptions, we attempt a stack dump.\n                         */\n                        if (typeof exception != \"number\") {\n                            var e = exception;\n                            this.cpu.setError(e.stack || e.message);\n                        }\n                    }\n                }\n\n                /*\n                 * Simulate a call to our stop() handler, to update the panel's ADDRESS register with the new PC.\n                 */\n                this.stop();\n\n                /*\n                 * Going through the normal channels (ie, the Computer's updateDisplays() interface) ensures that\n                 * ALL updateDisplay() handlers will be called, including ours.\n                 *\n                 * NOTE: If we used the Debugger's stepCPU() function, then that includes a call to updateDisplay();\n                 * unfortunately, it will have happened BEFORE we called stop() to update the ADDRESS register, so\n                 * we still need to call it again.\n                 */\n                if (this.cmp) this.cmp.updateDisplays();\n            }\n            else {\n                this.cpu.startCPU();\n            }\n        }\n    }\n\n    /**\n     * processDeposit(value, index)\n     *\n     * @this {PanelPDP11}\n     * @param {number} value\n     * @param {number} [index]\n     */\n    processDeposit(value, index)\n    {\n        if (value && !this.cpu.isRunning()) {\n            if (this.fDeposit) this.advanceAddr();\n            /*\n             * This used to be updateData(), but that only updates regData, whereas setDR() updates both regData and regDisplay,\n             * and for these kinds of explicit Front Panel operations, I'm assuming the values should be synced.\n             */\n            var w = this.setDR(this.regSwitches);\n\n            if (this.nAddrSel == PanelPDP11.ADDRSEL.CONS_PHY) {\n                /*\n                 * TODO: Determine if this needs to take the UNIBUS map into consideration.\n                 */\n                this.bus.setWordDirect(this.regAddr, w);\n            } else {\n                /*\n                 * TODO: This code is obviously incomplete, since it doesn't take into account the precise ADDRSEL mode.\n                 */\n                this.cpu.setWordSafe(this.regAddr, w);\n            }\n        }\n    }\n\n    /**\n     * processExamine(value, index)\n     *\n     * @this {PanelPDP11}\n     * @param {number} value\n     * @param {number} [index]\n     */\n    processExamine(value, index)\n    {\n        if (!value && !this.cpu.isRunning()) {\n            var w;\n            if (this.fExamine) this.advanceAddr();\n            if (this.nAddrSel == PanelPDP11.ADDRSEL.CONS_PHY) {\n                /*\n                 * TODO: Determine if this needs to take the UNIBUS map into consideration.\n                 */\n                w = this.bus.getWordDirect(this.regAddr);\n            } else {\n                /*\n                 * TODO: This code is obviously incomplete, since it doesn't take into account the precise ADDRSEL mode.\n                 */\n                w = this.cpu.getWordSafe(this.regAddr);\n            }\n            /*\n             * This used to be updateData(), but that only updates regData, whereas setDR() updates both regData and regDisplay,\n             * and for these kinds of explicit Front Panel operations, I'm assuming the values should be synced.\n             */\n            this.setDR(w);\n        }\n    }\n\n    /**\n     * processLoadAddr(value, index)\n     *\n     * @this {PanelPDP11}\n     * @param {number} value\n     * @param {number} [index]\n     */\n    processLoadAddr(value, index)\n    {\n        if (!value && !this.cpu.isRunning()) {\n            this.updateAddr(this.regSwitches);\n        }\n    }\n\n    /**\n     * processLEDTest(value, index)\n     *\n     * @this {PanelPDP11}\n     * @param {number} value\n     * @param {number} [index]\n     */\n    processLEDTest(value, index)\n    {\n        if (value) {\n            this.fLEDTest = true;\n            this.displayLEDs(true);\n        } else {\n            this.fLEDTest = false;\n            this.displayLEDs();\n            /*\n             * This is another one of my \"innovations\": when you're done testing the LEDs, all the switches reset as well.\n             */\n            this.setSRSwitches(0);\n        }\n    }\n\n    /**\n     * processSRSwitch(value, index)\n     *\n     * @this {PanelPDP11}\n     * @param {number} value (normally 0 or 1, but we only depend on it being zero or non-zero)\n     * @param {number} index\n     */\n    processSRSwitch(value, index)\n    {\n        if (value) {\n            this.regSwitches |= 1 << index;\n        } else {\n            this.regSwitches &= ~(1 << index);\n        }\n    }\n\n    /**\n     * advanceAddr()\n     *\n     * This should also take care of the following Front Panel behaviors when the accessing the general-purpose\n     * registers:\n     *\n     *      1) ADDRESS display incremented by 1 (instead of 2)\n     *      2) The STEP after the last register is 177700, such that the addresses are looped\n     *\n     * A third behavior is NOT emulated: preventing the ADDRESS from stepping to the first General Register (177700)\n     * from 177676.\n     *\n     * @this {PanelPDP11}\n     * @return {number}\n     */\n    advanceAddr()\n    {\n        var nRegs = this.cpu.model <= PDP11.MODEL_1140? 8 : 16;\n        var fGenRegs = (this.regAddr >= PDP11.UNIBUS.R0SET0 /*177700*/ && this.regAddr < PDP11.UNIBUS.R0SET0 + nRegs);\n        var inc = fGenRegs? 1 : 2;\n        var mask = fGenRegs? 0xf : this.bus.nBusMask;\n        if (!this.getSwitch(PanelPDP11.SWITCH.STEP)) inc = -inc;\n        return this.updateAddr((this.regAddr & ~mask) | ((this.regAddr + inc) & mask));\n    }\n\n    /**\n     * updateAddr(value)\n     *\n     * @this {PanelPDP11}\n     * @param {number} value\n     * @return {number}\n     */\n    updateAddr(value)\n    {\n        this.regAddr = value & this.bus.nBusMask;\n        if (this.ledAddr !== this.regAddr) {\n            this.ledAddr = this.regAddr;\n            this.updateLEDArray(\"A\", this.ledAddr, 22);\n        }\n        return this.regAddr;\n    }\n\n    /**\n     * updateData(value)\n     *\n     * @this {PanelPDP11}\n     * @param {number} value\n     * @return {number}\n     */\n    updateData(value)\n    {\n        this.regData = value & 0xffff;\n        if (this.ledData !== this.regData) {\n            this.ledData = this.regData;\n            this.updateLEDArray(\"D\", this.ledData, 16);\n        }\n        return this.regData;\n    }\n\n    /**\n     * updateLED(sBinding, value)\n     *\n     * @this {PanelPDP11}\n     * @param {string} sBinding\n     * @param {number} value\n     * @return {number}\n     */\n    updateLED(sBinding, value)\n    {\n        this.leds[sBinding] = value;\n        if (!this.fLEDTest) this.displayLED(sBinding, value);\n        return value;\n    }\n\n    /**\n     * updateLEDArray(sPrefix, value, nLEDs)\n     *\n     * @this {PanelPDP11}\n     * @param {string} sPrefix\n     * @param {number} value\n     * @param {number} nLEDs\n     */\n    updateLEDArray(sPrefix, value, nLEDs)\n    {\n        for (var i = 0; i < nLEDs; i++) {\n            var sBinding = sPrefix + i;\n            this.updateLED(sBinding, value & (1 << i));\n        }\n    }\n\n    /**\n     * setSRSwitches(value)\n     *\n     * @this {PanelPDP11}\n     * @param {number|undefined} value\n     * @return {boolean}\n     */\n    setSRSwitches(value)\n    {\n        this.regSwitches = value | 0;\n        for (var i = 0; i < 22; i++) {\n            this.switches['S'+i][1] = (this.regSwitches & (1 << i))? 1 : 0;\n        }\n        /*\n         * This (re)displays ALL switches, not merely the SR switches, but that's OK.\n         */\n        this.displaySwitches();\n        return true;\n    }\n\n    /**\n     * stop(ms, nCycles)\n     *\n     * This is a notification handler, called by the Computer, to inform us the CPU has now stopped.\n     *\n     * @this {PanelPDP11}\n     * @param {number} [ms]\n     * @param {number} [nCycles]\n     */\n    stop(ms, nCycles)\n    {\n        this.updateAddr(this.cpu.regsGen[7]);\n    }\n\n    /**\n     * setAddr(value, fActive)\n     *\n     * This interface is for passing new addresses to the Front Panel.  However, whether or not this will become the\n     * ADDRESS actually displayed will depend on other settings (see updateStatus() for details).\n     *\n     * @this {PanelPDP11}\n     * @param {number} value\n     * @param {boolean} [fActive] (true if this should become the \"active\" ADDRESS regardless of other settings)\n     */\n    setAddr(value, fActive)\n    {\n        this.regAddr = value;\n    }\n\n    /**\n     * setData(value, fActive)\n     *\n     * This interface is for passing new data to the Front Panel.  However, whether or not this will become the\n     * DATA actually displayed will depend on the Front Panel's DATASEL switch setting, as well as the fActive flag.\n     *\n     * @this {PanelPDP11}\n     * @param {number} value\n     * @param {boolean} [fActive] (true if this should become the \"active\" DATA regardless of the DATASEL switch setting)\n     */\n    setData(value, fActive)\n    {\n        if (!fActive) {\n            this.regData = value;\n        } else {\n            this.regDisplay = value;\n        }\n    }\n\n    /**\n     * updateDisplay(nUpdate)\n     *\n     * Called by the Computer component at intervals to update registers, LEDs, etc.\n     *\n     * @this {PanelPDP11}\n     * @param {number} [nUpdate] (-2 for power on, -1 for forced, > 0 for periodic, 0 or undefined otherwise)\n     */\n    updateDisplay(nUpdate)\n    {\n        if (this.cLiveRegs) {\n\n            var fRunning = this.cpu.isRunning();\n            var fWaiting = this.cpu.isWaiting();\n\n            if (nUpdate < 0 || !fRunning || this.fDisplayLiveRegs) {\n\n                /*\n                 * We arbitrarily separate the display elements into two categories: cheap and expensive.\n                 *\n                 * LEDs are considered cheap, register displays are not.  So we'll skip the latter if this\n                 * is a periodic update AND our periodic update counter hasn't reached the periodic update limit.\n                 */\n                if (nUpdate <= 0 || (this.nDisplayCount += nUpdate) >= this.nDisplayLimit) {\n                    for (var i = 0; i < this.cpu.regsGen.length; i++) {\n                        this.displayValue('R'+i, this.cpu.regsGen[i]);\n                    }\n                    var regPSW = this.cpu.getPSW();\n                    this.displayValue(\"PS\", regPSW);\n                    this.displayValue(\"NF\", (regPSW & PDP11.PSW.NF)? 1 : 0, 1);\n                    this.displayValue(\"ZF\", (regPSW & PDP11.PSW.ZF)? 1 : 0, 1);\n                    this.displayValue(\"VF\", (regPSW & PDP11.PSW.VF)? 1 : 0, 1);\n                    this.displayValue(\"CF\", (regPSW & PDP11.PSW.CF)? 1 : 0, 1);\n                    this.nDisplayCount = 0;\n                }\n\n                /*\n                 * Update the ADDRESS and DATA LEDs by selecting the appropriate values.\n                 *\n                 * TODO: There is currently no mechanism for selecting regData over regDisplay;\n                 * we are acting as if the DATASEL switch setting is locked to \"DISPLAY REGISTER\".\n                 */\n                if (nUpdate < -1) {\n                    this.regAddr = this.cpu.regsGen[7];\n                } else if (nUpdate > 0 && fRunning && !fWaiting) {\n                    this.regAddr = this.cpu.getLastAddr();\n                }\n\n                this.updateAddr(this.regAddr);\n                this.updateData(this.regDisplay);\n\n                var bits = this.cpu.getMMUState();\n                /*\n                 * Bit 0 set if 22-bit, bit 1 set if 18-bit, bit 2 set if 16-bit\n                 */\n                this.updateLED(PanelPDP11.LED.B22, bits & 1);\n                this.updateLED(PanelPDP11.LED.B18, bits & 2);\n                this.updateLED(PanelPDP11.LED.B16, bits & 4);\n            }\n        }\n    }\n\n    /**\n     * readCNSW(addr, fPreWrite)\n     *\n     * If fPreWrite, this is a read-before-write, so we must return the DISPLAY register (ie, regDisplay);\n     * otherwise, this a normal read, so we should return the SWITCH register (ie, regSwitches).\n     *\n     *\n     * @this {PanelPDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.CNSW or 177570)\n     * @param {boolean} [fPreWrite]\n     * @return {number}\n     */\n    readCNSW(addr, fPreWrite)\n    {\n        return (fPreWrite? this.regDisplay : this.regSwitches) & 0xffff;\n    }\n\n    /**\n     * writeCNSW(value, addr)\n     *\n     * Handles writes to the DISPLAY register (ie, regDisplay).\n     *\n     * @this {PanelPDP11}\n     * @param {number} value\n     * @param {number} addr (eg, PDP11.UNIBUS.CNSW or 177570)\n     */\n    writeCNSW(value, addr)\n    {\n        this.regDisplay = value;\n    }\n\n    /**\n     * PanelPDP11.init()\n     *\n     * This function operates on every HTML element of class \"panel\", extracting the\n     * JSON-encoded parameters for the PanelPDP11 constructor from the element's \"data-value\"\n     * attribute, invoking the constructor to create a PanelPDP11 component, and then binding\n     * any associated HTML controls to the new component.\n     *\n     * NOTE: Unlike most other component init() functions, this one is designed to be\n     * called multiple times: once at load time, so that we can bind our print()\n     * function to the panel's output control ASAP, and again when the Computer component\n     * is verifying that all components are ready and invoking their powerUp() functions.\n     *\n     * Our powerUp() method gives us a second opportunity to notify any components that\n     * that might care (eg, CPU, Keyboard, and Debugger) that we have some controls they\n     * might want to use.\n     */\n    static init()\n    {\n        var aePanels = Component.getElementsByClass(document, PDP11.APPCLASS, \"panel\");\n        for (var iPanel=0; iPanel < aePanels.length; iPanel++) {\n            var ePanel = aePanels[iPanel];\n            var parmsPanel = Component.getComponentParms(ePanel);\n            var panel = Component.getComponentByID(parmsPanel['id']);\n            if (!panel) panel = new PanelPDP11(parmsPanel, true);\n            Component.bindComponentControls(panel, ePanel, PDP11.APPCLASS);\n        }\n    }\n}\n\nPanelPDP11.ADDRSEL = {\n    KERNEL_I:   0,      // use a 16-bit virtual address where bits 16 to 21 are always OFF\n    KERNEL_D:   1,      // use a 16-bit virtual address where bits 16 to 21 are always OFF\n    SUPER_I:    2,      // use a 16-bit virtual address where bits 16 to 21 are always OFF\n    SUPER_D:    3,      // use a 16-bit virtual address where bits 16 to 21 are always OFF\n    USER_I:     4,      // use a 16-bit virtual address where bits 16 to 21 are always OFF\n    USER_D:     5,      // use a 16-bit virtual address where bits 16 to 21 are always OFF\n    PROG_PHY:   6,      // display the 22-bit physical address of the current bus cycle generated by the MMU\n    CONS_PHY:   7       // use a 22-bit physical address to perform console operations (e.g., LOAD ADRS, EXAM, & DEP)\n};\n\n/*\n * To get the current state of a switch; eg::\n *\n *      this.getSwitch(PanelPDP11.SWITCH.ENABLE)\n *\n * I haven't filled out this table, primarily it only needs to list switches we actually query\n * (eg, non-momentary ones like 'ENABLE' and 'STEP', and 'EXAM' and 'DEP' since they have special\n * \"step\" behavior when pressed more than once in a row).  Ditto for the LED table.\n */\nPanelPDP11.SWITCH = {\n    DEP:    'DEP',\n    ENABLE: 'ENABLE',\n    EXAM:   'EXAM',\n    STEP:   'STEP'\n};\n\nPanelPDP11.LED = {\n    B16:    'B16',\n    B18:    'B18',\n    B22:    'B22'\n};\n\nPanelPDP11.UNIBUS_IOTABLE = {\n    [PDP11.UNIBUS.CNSW]:    /* 177570 */    [null, null, PanelPDP11.prototype.readCNSW, PanelPDP11.prototype.writeCNSW, \"CNSW\"]\n};\n\n/*\n * Initialize every Panel module on the page.\n */\nWeb.onInit(PanelPDP11.init);\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/bus.js (C) Jeff Parsons 2012-2018\n */\n\n\n/*\n * Data types used by scanMemory()\n */\n\n/**\n * This defines the BlockInfo bit fields used by scanMemory() when it creates the aBlocks array.\n *\n * @typedef {{\n *  num:    BitField,\n *  count:  BitField,\n *  btmod:  BitField,\n *  type:   BitField\n * }}\n */\nvar BlockInfoPDP11 = Usr.defineBitFields({num:20, count:8, btmod:1, type:3});\n\n/**\n * BusInfoPDP11 object definition (returned by scanMemory())\n *\n *  cbTotal:    total bytes allocated\n *  cBlocks:    total Memory blocks allocated\n *  aBlocks:    array of allocated Memory block numbers\n *\n * @typedef {{\n *  cbTotal:    number,\n *  cBlocks:    number,\n *  aBlocks:    Array.<BlockInfoPDP11>\n * }}\n */\nvar BusInfoPDP11;\n\nclass BusPDP11 extends Component {\n    /**\n     * BusPDP11(parmsBus, cpu, dbg)\n     *\n     * The BusPDP11 component manages physical memory and I/O address spaces.\n     *\n     * The BusPDP11 component has no UI elements, so it does not require an init() handler,\n     * but it still inherits from the Component class and must be allocated like any\n     * other device component.  It's currently allocated by the Computer's init() handler,\n     * which then calls the initBus() method of all the other components.\n     *\n     * For memory beyond the simple needs of the ROM and RAM components (ie, memory-mapped\n     * devices), the address space must still be allocated through the BusPDP11 component via\n     * addMemory().  If the component needs something more than simple read/write storage,\n     * it must provide a custom controller.\n     *\n     * @param {Object} parmsBus\n     * @param {CPUStatePDP11} cpu\n     * @param {DebuggerPDP11} dbg\n     */\n    constructor(parmsBus, cpu, dbg)\n    {\n        super(\"Bus\", parmsBus, MessagesPDP11.BUS);\n\n        this.cpu = cpu;\n        this.dbg = dbg;\n\n        /*\n         * Supported values for nBusWidth are 16 (default), 18, and 22.  This represents the maximum size\n         * of the bus for the life of the machine, regardless what memory management mode the CPU has enabled.\n         */\n        this.nBusWidth = +parmsBus['busWidth'] || 16;\n\n        /*\n         * Compute all BusPDP11 memory block parameters now, based on the width of the bus.\n         *\n         * Note that all PCjs machines divide their address space into blocks, using a block size appropriate for\n         * the machine's bus width.  This allows us to efficiently allocate the entire address space, by reusing blocks\n         * as appropriate, and to define to different address behaviors on a block-granular level.\n         *\n         * For PDPjs machines, the ideal block size is 8Kb (IOPAGE_LENGTH), the size of the IOPAGE on all PDP-11 machines;\n         * as a result, our IOController functions assume that all incoming offsets are within a single 8Kb block.\n         */\n        this.addrTotal = 1 << this.nBusWidth;\n        this.nBusMask = (this.addrTotal - 1);\n        this.nBlockSize = BusPDP11.IOPAGE_LENGTH;\n        this.nBlockShift = Math.log2(this.nBlockSize);      // ES6 ALERT (alternatively: Math.log(this.nBlockSize) / Math.LN2)\n        this.nBlockLen = this.nBlockSize >> 2;\n        this.nBlockLimit = this.nBlockSize - 1;\n        this.nBlockTotal = (this.addrTotal / this.nBlockSize) | 0;\n        this.nBlockMask = this.nBlockTotal - 1;\n\n\n        /*\n         * aIOHandlers is an array (ie, a hash) of I/O notification handlers, indexed by address, where each\n         * entry contains an array:\n         *\n         *      [0]: readByte(addr)\n         *      [1]: writeByte(b, addr)\n         *      [2]: readWord(addr)\n         *      [3]: writeWord(w, addr)\n         *\n         * Each of these 4-element arrays are similar to the memory access arrays assigned to entire Memory\n         * blocks, but these handlers generally target a specific address (or handful of addresses), while\n         * Memory access handlers must service the entire block; see the setAccess() function in the Memory\n         * component for details.\n         *\n         * Finally, for debugging purposes, if an I/O address has a symbolic name and message category,\n         * they will be saved here:\n         *\n         *      [4]: symbolic name of I/O address\n         *      [5]: message category\n         *\n         * UPDATE: The Debugger wants to piggy-back on these arrays to indicate addresses for which it wants\n         * notification.  In those cases, the following additional element will be set:\n         *\n         *      [6]: true to break on I/O, false to ignore I/O\n         *\n         * The false case is important if fIOBreakAll is set, because it allows the Debugger to selectively\n         * ignore specific addresses.\n         */\n        this.aIOHandlers = [];\n        this.fIOBreakAll = false;\n        this.nDisableFaults = 0;\n        this.fFault = false;\n\n        /*\n         * Array of RESET notification handlers registered by Device components.\n         */\n        this.afnReset = [];\n\n        /*\n         * Before we can add any memory blocks that declare our component as a custom memory controller,\n         * we must initialize the array that the getControllerAccess() method supplies to the Memory component.\n         */\n        this.afnIOPage = [\n            BusPDP11.IOController.readByte,\n            BusPDP11.IOController.writeByte,\n            BusPDP11.IOController.readWord,\n            BusPDP11.IOController.writeWord\n        ];\n\n        /*\n         * Define all the properties to be initialized by initMemory()\n         */\n        this.aBusBlocks = this.aMemBlocks = [];\n        this.iBlockIOPageBus = this.iBlockIOPageMem = 0;\n        this.addrIOPage = this.nIOPageRange = this.nMemMask = 0;\n\n        /*\n         * We're ready to allocate empty Memory blocks to span the entire physical address space, including the\n         * initial location of the IOPAGE.\n         */\n        this.initMemory();\n\n        this.setReady();\n    }\n\n    /**\n     * initMemory()\n     *\n     * Allocate enough (empty) Memory blocks to span the entire physical address space.\n     *\n     * Note that we now maintain two parallel arrays of these Memory blocks: aBusBlocks is for use by\n     * devices (or any component using the \"direct\" interfaces), while aMemBlocks is for use by the CPU.\n     *\n     * Whereas the Bus memory map is fixed at init time, the CPU's memory map will vary depending on MMU\n     * settings.  The CPU will call setIOPageRange() as needed to update the range of addressible memory,\n     * which in turn will determine where the IOPAGE can be accessed.\n     *\n     * @this {BusPDP11}\n     */\n    initMemory()\n    {\n        var block = new MemoryPDP11(this);\n        block.copyBreakpoints(this.dbg);\n\n        this.aBusBlocks = new Array(this.nBlockTotal);\n        this.aMemBlocks = new Array(this.nBlockTotal);\n        for (var iBlock = 0; iBlock < this.nBlockTotal; iBlock++) {\n            this.aBusBlocks[iBlock] = this.aMemBlocks[iBlock] = block;\n        }\n        /*\n         * NOTE: Don't confuse the Bus addrIOPage with the CPU's addrIOPage; ours is fixed,\n         * based on the machine's Bus width, whereas the CPU's varies according to the MMU setting.\n         */\n        this.addrIOPage = this.addrTotal - BusPDP11.IOPAGE_LENGTH;\n        this.addMemory(this.addrIOPage, BusPDP11.IOPAGE_LENGTH, MemoryPDP11.TYPE.CONTROLLER, this);\n\n        this.iBlockIOPageBus = (this.addrIOPage & this.nBusMask) >>> this.nBlockShift;\n        this.iBlockIOPageMem = this.iBlockIOPageBus;\n\n        this.nIOPageRange = 0;\n        this.nMemMask = this.nBusMask;\n    }\n\n    /**\n     * setIOPageRange(nRange)\n     *\n     * This function is responsible for syncing the CPU memory map (aMemBlocks) with the Bus memory map (aBusBlocks)\n     * and then updating the location of the IOPAGE within the CPU's memory map.  The location of the IOPAGE is always\n     * fixed at the top of the Bus address space, but it moves (logically) within the CPU's address space according\n     * to the CPU's current MMU settings, which nRange is a reflection of.\n     *\n     * @this {BusPDP11}\n     * @param {number} nRange (16, 18 or 22; 0 removes the IOPAGE altogether)\n     */\n    setIOPageRange(nRange)\n    {\n        if (nRange != this.nIOPageRange) {\n            for (var iBlock = 0; iBlock < this.nBlockTotal; iBlock++) {\n                this.aMemBlocks[iBlock] = this.aBusBlocks[iBlock];\n            }\n            this.nIOPageRange = 0;\n            this.nMemMask = this.nBusMask;\n            if (nRange) {\n                this.nIOPageRange = nRange;\n                var addr = (1 << nRange);\n                this.nMemMask = (addr - 1);\n                addr -= BusPDP11.IOPAGE_LENGTH;\n                this.iBlockIOPageMem = (addr & this.nMemMask) >>> this.nBlockShift;\n                this.aMemBlocks[this.iBlockIOPageMem] = this.aBusBlocks[this.iBlockIOPageBus];\n            }\n        }\n    }\n\n    /**\n     * getControllerBuffer(addr)\n     *\n     * Our Bus component also acts as custom memory controller for the IOPAGE, so it must also provide this function.\n     *\n     * @this {BusPDP11}\n     * @param {number} addr\n     * @return {Array} containing the buffer (and the offset within that buffer that corresponds to the requested block)\n     */\n    getControllerBuffer(addr)\n    {\n        /*\n         * No buffer is required for the IOPAGE; all accesses go to registered I/O handlers or to fault().\n         */\n        return [null, 0];\n    }\n\n    /**\n     * getControllerAccess()\n     *\n     * Our Bus component also acts as custom memory controller for the IOPAGE, so it must also provide this function.\n     *\n     * @this {BusPDP11}\n     * @return {Array.<function()>}\n     */\n    getControllerAccess()\n    {\n        return this.afnIOPage;\n    }\n\n    /**\n     * getWidth()\n     *\n     * @this {BusPDP11}\n     * @return {number}\n     */\n    getWidth()\n    {\n        return this.nBusWidth;\n    }\n\n    /**\n     * reset()\n     *\n     * Call all registered reset() handlers.\n     *\n     * @this {BusPDP11}\n     */\n    reset()\n    {\n        for (var i = 0; i < this.afnReset.length; i++) {\n            this.afnReset[i]();\n        }\n        this.setIOPageRange(16);\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {BusPDP11}\n     * @param {Object|null} data (always null because we supply no powerDown() handler)\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        if (!fRepower) {\n            if (!data) {\n                this.reset();\n            } else {\n                if (!this.restore(data)) return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {BusPDP11}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        return fSave? this.save() : true;\n    }\n\n    /**\n     * save()\n     *\n     * @this {BusPDP11}\n     * @return {Object|null}\n     */\n    save()\n    {\n        var state = new State(this);\n        state.set(0, this.saveMemory());\n        return state.data();\n    }\n\n    /**\n     * restore(data)\n     *\n     * @this {BusPDP11}\n     * @param {Object} data\n     * @return {boolean} true if restore successful, false if not\n     */\n    restore(data)\n    {\n        return this.restoreMemory(data[0]);\n    }\n\n    /**\n     * addMemory(addr, size, type, controller)\n     *\n     * Adds new Memory blocks to the specified address range.  Any Memory blocks previously\n     * added to that range must first be removed via removeMemory(); otherwise, you'll get\n     * an allocation conflict error.  This helps prevent address calculation errors, redundant\n     * allocations, etc.\n     *\n     * We've relaxed some of the original requirements (ie, that addresses must start at a\n     * block-granular address, or that sizes must be equal to exactly one or more blocks),\n     * because machines with large block sizes can make it impossible to load certain ROMs at\n     * their required addresses.  Every allocation still allocates a whole number of blocks.\n     *\n     * Even so, BusPDP11 memory management does NOT provide a general-purpose heap.  Most memory\n     * allocations occur during machine initialization and never change.  In particular, there\n     * is NO support for removing partial-block allocations.\n     *\n     * Each Memory block keeps track of a start address (addr) and length (used), indicating\n     * the used space within the block; any free space that precedes or follows that used space\n     * can be allocated later, by simply extending the beginning or ending of the previously used\n     * space.  However, any holes that might have existed between the original allocation and an\n     * extension are subsumed by the extension.\n     *\n     * @this {BusPDP11}\n     * @param {number} addr is the starting physical address of the request\n     * @param {number} size of the request, in bytes\n     * @param {number} type is one of the MemoryPDP11.TYPE constants\n     * @param {Object} [controller] is an optional memory controller component\n     * @return {boolean} true if successful, false if not\n     */\n    addMemory(addr, size, type, controller)\n    {\n        var addrNext = addr;\n        var sizeLeft = size;\n        var iBlock = addrNext >>> this.nBlockShift;\n\n        while (sizeLeft > 0 && iBlock < this.aBusBlocks.length) {\n\n            var block = this.aBusBlocks[iBlock];\n            var addrBlock = iBlock * this.nBlockSize;\n            var sizeBlock = this.nBlockSize - (addrNext - addrBlock);\n            if (sizeBlock > sizeLeft) sizeBlock = sizeLeft;\n\n            /*\n             * addMemory() will now happily replace an existing block when a memory controller is specified;\n             * this is a work-around to make life easier for setIOPageRange(), which otherwise would have to call\n             * removeMemory() first, which would just waste time and memory allocating more (empty) blocks.\n             */\n            if (!controller && block && block.size) {\n                if (block.type == type /* && block.controller == controller */) {\n                    /*\n                     * Where there is already a similar block with a non-zero size, we allow the allocation only if:\n                     *\n                     *   1) addrNext + sizeLeft <= block.addr (the request precedes the used portion of the current block), or\n                     *   2) addrNext >= block.addr + block.used (the request follows the used portion of the current block)\n                     */\n                    if (addrNext + sizeLeft <= block.addr) {\n                        block.used += (block.addr - addrNext);\n                        block.addr = addrNext;\n                        return true;\n                    }\n                    if (addrNext >= block.addr + block.used) {\n                        var sizeAvail = block.size - (addrNext - addrBlock);\n                        if (sizeAvail > sizeLeft) sizeAvail = sizeLeft;\n                        block.used = addrNext - block.addr + sizeAvail;\n                        addrNext = addrBlock + this.nBlockSize;\n                        sizeLeft -= sizeAvail;\n                        iBlock++;\n                        continue;\n                    }\n                }\n                return this.reportError(BusPDP11.ERROR.RANGE_INUSE, addrNext, sizeLeft);\n            }\n\n            var blockNew = new MemoryPDP11(this, addrNext, sizeBlock, this.nBlockSize, type, controller);\n            blockNew.copyBreakpoints(this.dbg, block);\n            this.aBusBlocks[iBlock++] = blockNew;\n\n            addrNext = addrBlock + this.nBlockSize;\n            sizeLeft -= sizeBlock;\n        }\n\n        if (sizeLeft <= 0) {\n            this.status(\"Added \" + (size >> 10) + \"Kb \" + MemoryPDP11.TYPE_NAMES[type] + \" at \" + Str.toOct(addr));\n            return true;\n        }\n\n        return this.reportError(BusPDP11.ERROR.RANGE_INVALID, addr, size);\n    }\n\n    /**\n     * cleanMemory(addr, size)\n     *\n     * @this {BusPDP11}\n     * @param {number} addr\n     * @param {number} size\n     * @return {boolean} true if all blocks were clean, false if dirty; all blocks are cleaned in the process\n     */\n    cleanMemory(addr, size)\n    {\n        var fClean = true;\n        var iBlock = addr >>> this.nBlockShift;\n        var sizeBlock = this.nBlockSize - (addr & this.nBlockLimit);\n        while (size > 0 && iBlock < this.aBusBlocks.length) {\n            if (this.aBusBlocks[iBlock].fDirty) {\n                this.aBusBlocks[iBlock].fDirty = fClean = false;\n                this.aBusBlocks[iBlock].fDirtyEver = true;\n            }\n            size -= sizeBlock;\n            sizeBlock = this.nBlockSize;\n            iBlock++;\n        }\n        return fClean;\n    }\n\n    /**\n     * zeroMemory(addr, size, pattern)\n     *\n     * @this {BusPDP11}\n     * @param {number} addr\n     * @param {number} size\n     * @param {number} [pattern]\n     */\n    zeroMemory(addr, size, pattern)\n    {\n        var off = addr & this.nBlockLimit;\n        var iBlock = addr >>> this.nBlockShift;\n        while (size > 0 && iBlock < this.aBusBlocks.length) {\n            this.aBusBlocks[iBlock].zero(off, size, pattern);\n            size -= this.nBlockSize;\n            iBlock++;\n            off = 0;\n        }\n    }\n\n    /**\n     * scanMemory(info, addr, size)\n     *\n     * Returns a BusInfoPDP11 object for the specified address range.\n     *\n     * @this {BusPDP11}\n     * @param {BusInfoPDP11} [info] previous BusInfoPDP11, if any\n     * @param {number} [addr] starting address of range (0 if none provided)\n     * @param {number} [size] size of range, in bytes (up to end of address space if none provided)\n     * @return {BusInfoPDP11} updated info (or new info if no previous info provided)\n     */\n    scanMemory(info, addr, size)\n    {\n        if (addr == null) addr = 0;\n        if (size == null) size = (this.addrTotal - addr) | 0;\n        if (info == null) info = {cbTotal: 0, cBlocks: 0, aBlocks: []};\n\n        var iBlock = addr >>> this.nBlockShift;\n        var iBlockMax = ((addr + size - 1) >>> this.nBlockShift);\n\n        info.cbTotal = 0;\n        info.cBlocks = 0;\n        while (iBlock <= iBlockMax) {\n            var block = this.aBusBlocks[iBlock];\n            info.cbTotal += block.size;\n            if (block.size) {\n                info.aBlocks.push(/** @type {BlockInfoPDP11} */ (Usr.initBitFields(BlockInfoPDP11, iBlock, 0, 0, block.type)));\n                info.cBlocks++\n            }\n            iBlock++;\n        }\n        return info;\n    }\n\n    /**\n     * removeMemory(addr, size)\n     *\n     * Replaces every block in the specified address range with empty Memory blocks that ignore all reads/writes.\n     *\n     * TODO: Update the removeMemory() interface to reflect the relaxed requirements of the addMemory() interface.\n     *\n     * @this {BusPDP11}\n     * @param {number} addr\n     * @param {number} size\n     * @return {boolean} true if successful, false if not\n     */\n    removeMemory(addr, size)\n    {\n        if (!(addr & this.nBlockLimit) && size && !(size & this.nBlockLimit)) {\n            var iBlock = addr >>> this.nBlockShift;\n            while (size > 0) {\n                var blockOld = this.aBusBlocks[iBlock];\n                var blockNew = new MemoryPDP11(this, addr);\n                blockNew.copyBreakpoints(this.dbg, blockOld);\n                this.aBusBlocks[iBlock++] = blockNew;\n                addr = iBlock * this.nBlockSize;\n                size -= this.nBlockSize;\n            }\n            return true;\n        }\n        return this.reportError(BusPDP11.ERROR.RANGE_INVALID, addr, size);\n    }\n\n    /**\n     * getMemoryBlocks(addr, size)\n     *\n     * @this {BusPDP11}\n     * @param {number} addr is the starting physical address\n     * @param {number} size of the request, in bytes\n     * @return {Array} of Memory blocks\n     */\n    getMemoryBlocks(addr, size)\n    {\n        var aBlocks = [];\n        var iBlock = addr >>> this.nBlockShift;\n        while (size > 0 && iBlock < this.aBusBlocks.length) {\n            aBlocks.push(this.aBusBlocks[iBlock++]);\n            size -= this.nBlockSize;\n        }\n        return aBlocks;\n    }\n\n    /**\n     * setMemoryAccess(addr, size, afn, fQuiet)\n     *\n     * Updates the access functions in every block of the specified address range.  Since the only components\n     * that should be dynamically modifying the memory access functions are those that use addMemory() with a custom\n     * memory controller, we require that the block(s) being updated do in fact have a controller.\n     *\n     * @this {BusPDP11}\n     * @param {number} addr\n     * @param {number} size\n     * @param {Array.<function()>} [afn]\n     * @param {boolean} [fQuiet] (true if any error should be quietly logged)\n     * @return {boolean} true if successful, false if not\n     */\n    setMemoryAccess(addr, size, afn, fQuiet)\n    {\n        if (!(addr & this.nBlockLimit) && size && !(size & this.nBlockLimit)) {\n            var iBlock = addr >>> this.nBlockShift;\n            while (size > 0) {\n                var block = this.aBusBlocks[iBlock];\n                if (!block.controller) {\n                    return this.reportError(BusPDP11.ERROR.NO_CONTROLLER, addr, size, fQuiet);\n                }\n                block.setAccess(afn, true);\n                size -= this.nBlockSize;\n                iBlock++;\n            }\n            return true;\n        }\n        return this.reportError(BusPDP11.ERROR.RANGE_INVALID, addr, size);\n    }\n\n    /**\n     * setMemoryBlocks(addr, size, aBlocks, type)\n     *\n     * If no type is specified, then specified address range uses all the provided blocks as-is;\n     * this form of setMemoryBlocks() is used for complete physical aliases.\n     *\n     * Otherwise, new blocks are allocated with the specified type; the underlying memory from the\n     * provided blocks is still used, but the new blocks may have different access to that memory.\n     *\n     * @this {BusPDP11}\n     * @param {number} addr is the starting physical address\n     * @param {number} size of the request, in bytes\n     * @param {Array} aBlocks as returned by getMemoryBlocks()\n     * @param {number} [type] is one of the MemoryPDP11.TYPE constants\n     */\n    setMemoryBlocks(addr, size, aBlocks, type)\n    {\n        var i = 0;\n        var iBlock = addr >>> this.nBlockShift;\n        while (size > 0 && iBlock < this.aBusBlocks.length) {\n            var block = aBlocks[i++];\n\n            if (!block) break;\n            if (type !== undefined) {\n                var blockNew = new MemoryPDP11(this, addr);\n                blockNew.clone(block, type, this.dbg);\n                block = blockNew;\n            }\n            this.aBusBlocks[iBlock++] = block;\n            size -= this.nBlockSize;\n        }\n    }\n\n    /**\n     * getByte(addr)\n     *\n     * @this {BusPDP11}\n     * @param {number} addr is a physical address\n     * @return {number} byte (8-bit) value at that address\n     */\n    getByte(addr)\n    {\n        return this.aMemBlocks[(addr & this.nMemMask) >>> this.nBlockShift].readByte(addr & this.nBlockLimit, addr);\n    }\n\n    /**\n     * getWord(addr)\n     *\n     * @this {BusPDP11}\n     * @param {number} addr is a physical address\n     * @return {number} word (16-bit) value at that address\n     */\n    getWord(addr)\n    {\n        var off = addr & this.nBlockLimit;\n        var iBlock = (addr & this.nMemMask) >>> this.nBlockShift;\n        if (!PDP11.WORDBUS && off == this.nBlockLimit) {\n            return this.aMemBlocks[iBlock++].readByte(off, addr) | (this.aMemBlocks[iBlock & this.nBlockMask].readByte(0, addr + 1) << 8);\n        }\n        return this.aMemBlocks[iBlock].readWord(off, addr);\n    }\n\n    /**\n     * setByte(addr, b)\n     *\n     * @this {BusPDP11}\n     * @param {number} addr is a physical address\n     * @param {number} b is the byte (8-bit) value to write\n     */\n    setByte(addr, b)\n    {\n\n        this.aMemBlocks[(addr & this.nMemMask) >>> this.nBlockShift].writeByte(addr & this.nBlockLimit, b, addr);\n    }\n\n    /**\n     * setWord(addr, w)\n     *\n     * @this {BusPDP11}\n     * @param {number} addr is a physical address\n     * @param {number} w is the word (16-bit) value to write\n     */\n    setWord(addr, w)\n    {\n        var off = addr & this.nBlockLimit;\n        var iBlock = (addr & this.nMemMask) >>> this.nBlockShift;\n        if (!PDP11.WORDBUS && off == this.nBlockLimit) {\n            this.aMemBlocks[iBlock++].writeByte(off, w & 0xff, addr);\n            this.aMemBlocks[iBlock & this.nBlockMask].writeByte(0, (w >> 8) & 0xff, addr + 1);\n            return;\n        }\n        this.aMemBlocks[iBlock].writeWord(off, w, addr);\n    }\n\n    /**\n     * getBlockDirect(addr)\n     *\n     * @this {BusPDP11}\n     * @param {number} addr is a physical address\n     * @return {MemoryPDP11}\n     */\n    getBlockDirect(addr)\n    {\n        return this.aBusBlocks[(addr & this.nBusMask) >>> this.nBlockShift];\n    }\n\n    /**\n     * getByteDirect(addr)\n     *\n     * This is used for device I/O and Debugger physical memory requests, not the CPU.\n     *\n     * @this {BusPDP11}\n     * @param {number} addr is a physical address\n     * @return {number} byte (8-bit) value at that address\n     */\n    getByteDirect(addr)\n    {\n        this.fFault = false;\n        this.nDisableFaults++;\n        var b = this.getBlockDirect(addr).readByteDirect(addr & this.nBlockLimit, addr);\n        this.nDisableFaults--;\n        return b;\n    }\n\n    /**\n     * getWordDirect(addr)\n     *\n     * This is used for device I/O and Debugger physical memory requests, not the CPU.\n     *\n     * @this {BusPDP11}\n     * @param {number} addr is a physical address\n     * @return {number} word (16-bit) value at that address\n     */\n    getWordDirect(addr)\n    {\n        var w;\n        this.fFault = false;\n        this.nDisableFaults++;\n        var off = addr & this.nBlockLimit;\n        var block = this.getBlockDirect(addr);\n        if (!PDP11.WORDBUS && off == this.nBlockLimit) {\n            w = block.readByteDirect(off, addr) | (this.getBlockDirect(addr + 1).readByteDirect(0, addr + 1) << 8);\n        } else {\n            w = block.readWordDirect(off, addr);\n        }\n        this.nDisableFaults--;\n        return w;\n    }\n\n    /**\n     * setByteDirect(addr, b)\n     *\n     * This is used for device I/O and Debugger physical memory requests, not the CPU.\n     *\n     * @this {BusPDP11}\n     * @param {number} addr is a physical address\n     * @param {number} b is the byte (8-bit) value to write (we truncate it to 8 bits to be safe)\n     */\n    setByteDirect(addr, b)\n    {\n        this.fFault = false;\n        this.nDisableFaults++;\n        this.getBlockDirect(addr).writeByteDirect(addr & this.nBlockLimit, b & 0xff, addr);\n        this.nDisableFaults--;\n    }\n\n    /**\n     * setWordDirect(addr, w)\n     *\n     * This is used for device I/O and Debugger physical memory requests, not the CPU.\n     *\n     * @this {BusPDP11}\n     * @param {number} addr is a physical address\n     * @param {number} w is the word (16-bit) value to write (we truncate it to 16 bits to be safe)\n     */\n    setWordDirect(addr, w)\n    {\n        this.fFault = false;\n        this.nDisableFaults++;\n        var off = addr & this.nBlockLimit;\n        var block = this.getBlockDirect(addr);\n        if (!PDP11.WORDBUS && off == this.nBlockLimit) {\n            block.writeByteDirect(off, w & 0xff, addr);\n            this.getBlockDirect(addr + 1).writeByteDirect(0, (w >> 8) & 0xff, addr + 1);\n        } else {\n            block.writeWordDirect(off, w & 0xffff, addr);\n        }\n        this.nDisableFaults--;\n    }\n\n    /**\n     * addMemBreak(addr, fWrite)\n     *\n     * @this {BusPDP11}\n     * @param {number} addr\n     * @param {boolean} fWrite is true for a memory write breakpoint, false for a memory read breakpoint\n     */\n    addMemBreak(addr, fWrite)\n    {\n        if (DEBUGGER) {\n            var iBlock = addr >>> this.nBlockShift;\n            this.aBusBlocks[iBlock].addBreakpoint(addr & this.nBlockLimit, fWrite);\n        }\n    }\n\n    /**\n     * removeMemBreak(addr, fWrite)\n     *\n     * @this {BusPDP11}\n     * @param {number} addr\n     * @param {boolean} fWrite is true for a memory write breakpoint, false for a memory read breakpoint\n     */\n    removeMemBreak(addr, fWrite)\n    {\n        if (DEBUGGER) {\n            var iBlock = addr >>> this.nBlockShift;\n            this.aBusBlocks[iBlock].removeBreakpoint(addr & this.nBlockLimit, fWrite);\n        }\n    }\n\n    /**\n     * saveMemory(fAll)\n     *\n     * The only memory blocks we save are those marked as dirty, but most likely all of RAM will have been marked dirty,\n     * and even if our dirty-memory flags were as smart as our dirty-sector flags (ie, were set only when a write changed\n     * what was already there), it's unlikely that would reduce the number of RAM blocks we must save/restore.  At least\n     * all the ROM blocks should be clean (except in the unlikely event that the Debugger was used to modify them).\n     *\n     * All dirty blocks will be stored in a single array, as pairs of block numbers and data arrays, like so:\n     *\n     *      [iBlock0, [dw0, dw1, ...], iBlock1, [dw0, dw1, ...], ...]\n     *\n     * In a normal 4Kb block, there will be 1K DWORD values in the data array.  Remember that each DWORD is a signed 32-bit\n     * integer (because they are formed using bitwise operator rather than floating-point math operators), so don't be\n     * surprised to see negative numbers in the data.\n     *\n     * The above example assumes \"uncompressed\" data arrays.  If we choose to use \"compressed\" data arrays, the data arrays\n     * will look like:\n     *\n     *      [count0, dw0, count1, dw1, ...]\n     *\n     * where each count indicates how many times the following DWORD value occurs.  A data array length less than 1K indicates\n     * that it's compressed, since we'll only store them in compressed form if they actually shrank, and we'll use State\n     * helper methods compress() and decompress() to create and expand the compressed data arrays.\n     *\n     * @this {BusPDP11}\n     * @param {boolean} [fAll] (true to save all non-ROM memory blocks, regardless of their dirty flags)\n     * @return {Array} a\n     */\n    saveMemory(fAll)\n    {\n        var i = 0;\n        var a = [];\n\n        for (var iBlock = 0; iBlock < this.nBlockTotal; iBlock++) {\n            var block = this.aBusBlocks[iBlock];\n            /*\n             * We have to check both fDirty and fDirtyEver, because we may have called cleanMemory() on some of\n             * the memory blocks (eg, video memory), and while cleanMemory() will clear a dirty block's fDirty flag,\n             * it also sets the dirty block's fDirtyEver flag, which is left set for the lifetime of the machine.\n             */\n            if (fAll && block.type != MemoryPDP11.TYPE.ROM || block.fDirty || block.fDirtyEver) {\n                a[i++] = iBlock;\n                a[i++] = State.compress(block.save());\n            }\n        }\n\n        return a;\n    }\n\n    /**\n     * restoreMemory(a)\n     *\n     * This restores the contents of all Memory blocks; called by CPUState.restore().\n     *\n     * In theory, we ONLY have to save/restore block contents.  Other block attributes,\n     * like the type, the memory controller (if any), and the active memory access functions,\n     * should already be restored, since every component (re)allocates all the memory blocks\n     * it was using when it's restored.  And since the CPU is guaranteed to be the last\n     * component to be restored, all those blocks (and their attributes) should be in place now.\n     *\n     * See saveMemory() for more information on how the memory block contents are saved.\n     *\n     * @this {BusPDP11}\n     * @param {Array} a\n     * @return {boolean} true if successful, false if not\n     */\n    restoreMemory(a)\n    {\n        var i;\n        for (i = 0; i < a.length - 1; i += 2) {\n            var iBlock = a[i];\n            var adw = a[i+1];\n            if (adw && adw.length < this.nBlockLen) {\n                adw = State.decompress(adw, this.nBlockLen);\n            }\n            var block = this.aBusBlocks[iBlock];\n            if (!block || !block.restore(adw)) {\n                /*\n                 * Either the block to restore hasn't been allocated, indicating a change in the machine\n                 * configuration since it was last saved (the most likely explanation) or there's some internal\n                 * inconsistency (eg, the block size is wrong).\n                 */\n                Component.error(\"Unable to restore memory block \" + iBlock);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * getMemoryLimit(type)\n     *\n     * @this {BusPDP11}\n     * @param {number} type is one of the MemoryPDP11.TYPE constants\n     * @return {number} (the limiting address of the specified memory type, zero if none)\n     */\n    getMemoryLimit(type)\n    {\n        var addr = 0;\n        for (var iBlock = 0; iBlock < this.aBusBlocks.length; iBlock++) {\n            var block = this.aBusBlocks[iBlock];\n            if (block.type == type) {\n                addr = block.addr + block.used;\n            }\n        }\n        return addr;\n    }\n\n    /**\n     * addIOHandlers(start, end, fnReadByte, fnWriteByte, fnReadWord, fnWriteWord, message, sName)\n     *\n     * Add I/O notification handlers to the master list (aIOHandlers).  The start and end addresses are typically\n     * relative to the starting IOPAGE address, but they can also be absolute; we simply mask all addresses with\n     * IOPAGE_MASK.\n     *\n     * CAVEATS: If a conflict is reported, a partial set of handlers may still have been added.  There is no mechanism\n     * for removing handlers, since this is considered an initialization function.  And finally, when a range of addresses\n     * is used, each successive address is advanced by 2, so if you really want to add a handler for a \"+1\" (usually odd)\n     * address, then you must add it individually.  Failure to do is not necessarily fatal, because the IOController's\n     * fallback behavior for an odd address is to call the byte handler for the preceding even address, but the byte\n     * handler must be prepared for that (the handlers installed by ROM component's addROM() function are a good example).\n     *\n     * @this {BusPDP11}\n     * @param {number} start address\n     * @param {number} end address\n     * @param {function(number)|null|undefined} fnReadByte\n     * @param {function(number,number)|null|undefined} fnWriteByte\n     * @param {function(number)|null|undefined} fnReadWord\n     * @param {function(number,number)|null|undefined} fnWriteWord\n     * @param {number} [message]\n     * @param {string} [sName]\n     * @return {boolean} (true if entire range successfully registered, false if any conflicts)\n     */\n    addIOHandlers(start, end, fnReadByte, fnWriteByte, fnReadWord, fnWriteWord, message, sName)\n    {\n        var index = (start == end? -1 : 0);\n        for (var addr = start; addr <= end; addr += 2) {\n            var off = addr & BusPDP11.IOPAGE_MASK;\n            if (this.aIOHandlers[off] !== undefined) {\n                Component.warning(\"I/O address already registered: \" + Str.toHexLong(addr));\n                return false;\n            }\n            var s = sName || \"unknown\";\n            if (s && index >= 0) s += index++;\n            this.aIOHandlers[off] = [fnReadByte, fnWriteByte, fnReadWord, fnWriteWord, s, message || MessagesPDP11.BUS, false];\n            if (MAXDEBUG) this.log(\"addIOHandlers(\" + Str.toHexLong(addr) + \")\");\n        }\n        return true;\n    }\n\n    /**\n     * addIOTable(component, table, offReg)\n     *\n     * Add I/O notification handlers from the specified table (a batch version of addIOHandlers).\n     *\n     * @this {BusPDP11}\n     * @param {Component} component\n     * @param {Object} table\n     * @param {number} [offReg] (optional offset to add to all register addresses)\n     * @return {boolean} (true if entire range successfully registered, false if any conflicts)\n     */\n    addIOTable(component, table, offReg)\n    {\n        for (var reg in table) {\n            var addr = +reg + (offReg || 0);\n            var afn = table[reg];\n\n            /*\n             * Don't install (ie, ignore) handlers for I/O addresses that are defined with a model number\n             * that is \"greater than\" than the current model.\n             */\n            if (afn[6] && afn[6] > this.cpu.model) continue;\n\n            var fnReadByte = afn[0]? afn[0].bind(component) : null;\n            var fnWriteByte = afn[1]? afn[1].bind(component) : null;\n            var fnReadWord = afn[2]? afn[2].bind(component) : null;\n            var fnWriteWord = afn[3]? afn[3].bind(component) : null;\n\n            /*\n             * As discussed in the IOController comments below, when handlers are being registered for these\n             * BYTE-granular UNIBUS addresses, we must install custom fallback handlers for all BYTE accesses.\n             */\n            if (addr >= PDP11.UNIBUS.R0SET0 && addr <= PDP11.UNIBUS.R6USER) {\n                if (!fnReadByte && fnReadWord) {\n                    fnReadByte = function readByteIORegister(readWord) {\n                        return function(addr) {\n                            return readWord(addr) & 0xff;\n                        }.bind(component);\n                    }(fnReadWord);\n                }\n                if (!fnWriteByte && fnWriteWord) {\n                    fnWriteByte = function writeByteIORegister(writeWord) {\n                        return function(data, addr) {\n                            return writeWord(data, addr);\n                        }.bind(component);\n                    }(fnWriteWord);\n                }\n            }\n\n            var sReg = afn[4];\n            var nRegs = afn[5] || 1;\n\n            for (var iReg = 0; iReg < nRegs; iReg++, addr += 2) {\n                if (sReg && nRegs > 1) sReg = afn[4] + iReg;\n                if (!this.addIOHandlers(addr, addr, fnReadByte, fnWriteByte, fnReadWord, fnWriteWord, afn[7] || component.bitsMessage, sReg || component.idComponent)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * getAddrInfo(addr)\n     *\n     * Determine if the physical address is a known IOPAGE address, and return information about it (ie, the name).\n     *\n     * @this {BusPDP11}\n     * @param {number} addr (physical)\n     * @return {string|null}\n     */\n    getAddrInfo(addr)\n    {\n        var sName = null;\n        if (addr >= this.addrIOPage) {\n            var off = addr & BusPDP11.IOPAGE_MASK;\n            var afn = this.aIOHandlers[off];\n            if (afn) sName = afn[BusPDP11.IOHANDLER.REG_NAME];\n        }\n        return sName;\n    }\n\n    /**\n     * getAddrByName(sName)\n     *\n     * Determine if the specified name has a corresponding physical address.\n     *\n     * @this {BusPDP11}\n     * @param {string} sName\n     * @return {number|null}\n     */\n    getAddrByName(sName)\n    {\n        sName = sName.toUpperCase();\n        for (var i in this.aIOHandlers) {\n            var off = +i;\n            var afn = this.aIOHandlers[off];\n            if (afn[BusPDP11.IOHANDLER.REG_NAME] == sName) {\n                return this.addrIOPage + off;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * addResetHandler(fnReset)\n     *\n     * @this {BusPDP11}\n     * @param {function()} fnReset\n     */\n    addResetHandler(fnReset)\n    {\n        this.afnReset.push(fnReset);\n    }\n\n    /**\n     * fault(addr, err, access)\n     *\n     * Bus interface for signaling alignment errors, invalid memory, etc.\n     *\n     * @this {BusPDP11}\n     * @param {number} addr\n     * @param {number} [err]\n     * @param {number} [access] (for diagnostic purposes only)\n     */\n    fault(addr, err, access)\n    {\n        this.fFault = true;\n        if (!this.nDisableFaults) {\n            if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP11.FAULT)) {\n                this.dbg.printMessage(\"memory fault (\" + access + \") on \" + this.dbg.toStrBase(addr), true, true);\n            }\n            if (err) this.cpu.regErr |= err;\n            this.cpu.trap(PDP11.TRAP.BUS, 0, addr);\n        }\n    }\n\n    /**\n     * checkFault()\n     *\n     * This also serves as a clearFault() function.\n     *\n     * @this {BusPDP11}\n     * @return {boolean}\n     */\n    checkFault()\n    {\n        var f = this.fFault;\n        this.fFault = false;\n        return f;\n    }\n\n    /**\n     * reportError(errNum, addr, size, fQuiet)\n     *\n     * @this {BusPDP11}\n     * @param {number} errNum\n     * @param {number} addr\n     * @param {number} size\n     * @param {boolean} [fQuiet] (true if any error should be quietly logged)\n     * @return {boolean} false\n     */\n    reportError(errNum, addr, size, fQuiet)\n    {\n        var sError = \"Memory block error (\" + errNum + \": \" + Str.toHex(addr) + \",\" + Str.toHex(size) + \")\";\n        if (fQuiet) {\n            if (this.dbg) {\n                this.dbg.message(sError);\n            } else {\n                this.log(sError);\n            }\n        } else {\n            Component.error(sError);\n        }\n        return false;\n    }\n}\n\nBusPDP11.IOPAGE_16BIT   = 0x00E000; /*000160000*/               // eg, PDP-11/20\nBusPDP11.IOPAGE_18BIT   = 0x03E000; /*000760000*/               // eg, PDP-11/45\nBusPDP11.IOPAGE_22BIT   = 0x3FE000; /*017760000*/               // eg, PDP-11/70\nBusPDP11.IOPAGE_LENGTH  = 0x002000;                             // ie, 8Kb\nBusPDP11.IOPAGE_MASK    = BusPDP11.IOPAGE_LENGTH - 1;\n\nBusPDP11.MASK_18BIT     = 0x03FFFF; /*000777777*/\n\nBusPDP11.UNIBUS_22BIT   = 0x3C0000; /*017000000*/\nBusPDP11.MASK_22BIT     = 0x3FFFFF; /*017777777*/\n\nBusPDP11.ERROR = {\n    RANGE_INUSE:        1,\n    RANGE_INVALID:      2,\n    NO_CONTROLLER:      3\n};\n\n/*\n * Every entry in the aIOHandlers table is an array with the following indexes:\n */\nBusPDP11.IOHANDLER = {\n    READ_BYTE:          0,\n    WRITE_BYTE:         1,\n    READ_WORD:          2,\n    WRITE_WORD:         3,\n    REG_NAME:           4,\n    MSG_CATEGORY:       5,\n    DBG_BREAK:          6\n};\n\n/*\n * These are our custom IOController functions for all IOPAGE accesses.  They look up the IOPAGE\n * offset in the aIOHandlers table, and if an entry exists, they use the appropriate IOHANDLER indexes\n * (above) to locate the registered read/write handlers.  If no handler is found, then fault() will\n * be called, triggering a trap -- unless traps are disabled because direct access was requested\n * (eg, by the Debugger).\n *\n * Handlers receive the original IOPAGE address that was used, although in most cases, it's ignored,\n * because most handlers usually handle only one address.  Only handlers used for a range of addresses\n * must pay attention to it.\n *\n * Note that these functions include fallbacks for byte reads when only word read handlers exist (by\n * masking or shifting the result) and for word reads if only byte handlers exist (by combining bytes).\n * Fallbacks for writes exist, too, but they are slightly more complicated, because a byte write using\n * a word write handler requires reading the word first, and then updating the appropriate byte within\n * that word.\n *\n * Those fallbacks may not always be appropriate; for example, byte writes to some device registers\n * must be zero-extended to update the entire word.  For those cases, the fallback's \"preliminary\" read\n * is issued with a fPreWrite flag so that the handler can distinguish a normal read from one of these\n * preliminary reads (aka read-before-write), and return an appropriate value for the update (eg, zero).\n *\n * If none of these fallback behaviors are appropriate, the device has a simple recourse: register\n * handlers for all possible addresses and sizes.\n *\n * Unlike regular Memory blocks, IOPAGE accesses permit word accesses on ODD addresses; that works\n * just fine by registering WORD handlers for the appropriate ODD addresses.  For BYTE accesses, it\n * depends.  For CPU register addresses, addIOHandlers() installs special byte handlers that perform\n * either a simple word read or write.  Other addresses must be handled on a case-by-case basis.\n *\n * TODO: Another small potential improvement would be for addIOHandlers() to install fallbacks for ALL\n * missing handlers, in both the ODD and EVEN cases, so there's never a need to check each function index\n * before calling it.  However, since there's no avoiding checking aIOHandlers[off] (unless we FULLY populate\n * the aIOHandlers array), and since these I/O accesses should be pretty infrequent relative to all other\n * memory accesses, the benefit seems pretty minimal.  Plus, all our fallback assumptions still need to be\n * verified, so let's wait until that's done before we start optimizing this code.\n */\nBusPDP11.IOController = {\n    /**\n     * readByte(off, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} addr\n     * @return {number}\n     */\n    readByte: function(off, addr)\n    {\n        var b = -1;\n        var bus = this.controller;\n        var afn = bus.aIOHandlers[off];\n\n        /*\n         * Since addr is primarily used to advise an I/O handler of the target IOPAGE address, and since we don't want\n         * our handlers to worry about the current IOPAGE location, we truncate addr to 16 bits (the IOPAGE's lowest location).\n         */\n        var addrMasked = addr & 0xffff;\n\n        if (afn) {\n            if (afn[BusPDP11.IOHANDLER.READ_BYTE]) {\n                b = afn[BusPDP11.IOHANDLER.READ_BYTE](addrMasked);\n            } else if (afn[BusPDP11.IOHANDLER.READ_WORD]) {\n                if (!(addrMasked & 0x1)) {\n                    b = afn[BusPDP11.IOHANDLER.READ_WORD](addrMasked) & 0xff;\n                } else {\n                    b = afn[BusPDP11.IOHANDLER.READ_WORD](addrMasked & ~0x1) >> 8;\n                }\n            }\n        } else if (addrMasked & 0x1) {\n            afn = bus.aIOHandlers[off & ~0x1];\n            if (afn) {\n                if (afn[BusPDP11.IOHANDLER.READ_WORD]) {\n                    b = afn[BusPDP11.IOHANDLER.READ_WORD](addrMasked & ~0x1) >> 8;\n                } else if (afn[BusPDP11.IOHANDLER.READ_BYTE]) {\n                    /*\n                     * WARNING: This is an unusual fall-back, because we're trying to read an ODD byte\n                     * access using a BYTE handler registered for EVEN bytes.  But if that's all we've got,\n                     * then presumably the handler is prepared for it (certainly, readROMByte() is).\n                     */\n                    b = afn[BusPDP11.IOHANDLER.READ_BYTE](addrMasked)\n                }\n            }\n        }\n        if (b >= 0) {\n            if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP11.BUS | afn[BusPDP11.IOHANDLER.MSG_CATEGORY])) {\n                this.dbg.printMessage(afn[BusPDP11.IOHANDLER.REG_NAME] + \".readByte(\" + this.dbg.toStrBase(addr) + \"): \" + this.dbg.toStrBase(b), true, !bus.nDisableFaults);\n            }\n            return b;\n        }\n        bus.fault(addr, PDP11.CPUERR.TIMEOUT, PDP11.ACCESS.READ_BYTE);\n        b = 0xff;\n        if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP11.BUS)) {\n            this.dbg.printMessage(\"warning: unconverted read access to byte @\" + this.dbg.toStrBase(addr) + \": \" + this.dbg.toStrBase(b), true, !bus.nDisableFaults);\n        }\n        return b;\n    },\n\n    /**\n     * writeByte(off, b, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} b (which should already be pre-masked to 8 bits)\n     * @param {number} addr\n     */\n    writeByte: function(off, b, addr)\n    {\n        var w;\n        var fWrite = false;\n        var bus = this.controller;\n        var afn = bus.aIOHandlers[off];\n\n        /*\n         * Since addr is primarily used to advise an I/O handler of the target IOPAGE address, and since we don't want\n         * our handlers to worry about the current IOPAGE location, we truncate addr to 16 bits (the IOPAGE's lowest location).\n         */\n        var addrMasked = addr & 0xffff;\n\n        if (afn) {\n            /*\n             * If a writeByte() handler exists, call it; we're done.\n             */\n            if (afn[BusPDP11.IOHANDLER.WRITE_BYTE]) {\n                afn[BusPDP11.IOHANDLER.WRITE_BYTE](b, addrMasked);\n                fWrite = true;\n            }\n            /*\n             * If a writeWord() handler exists, call the readWord() handler first to get the original data\n             * (with fPreWrite set to true) and call writeWord() with the new data inserted into the original data.\n             */\n            else if (afn[BusPDP11.IOHANDLER.WRITE_WORD]) {\n                w = afn[BusPDP11.IOHANDLER.READ_WORD]? afn[BusPDP11.IOHANDLER.READ_WORD](addrMasked, true) : 0;\n                if (!(addrMasked & 0x1)) {\n                    afn[BusPDP11.IOHANDLER.WRITE_WORD]((w & ~0xff) | b, addrMasked);\n                    fWrite = true;\n                } else {\n                    afn[BusPDP11.IOHANDLER.WRITE_WORD]((w & 0xff) | (b << 8), addrMasked & ~0x1);\n                    fWrite = true;\n                }\n            }\n        } else if (addrMasked & 0x1) {\n            /*\n             * If no handler existed, and this address was odd, then perhaps a handler exists for the even address;\n             * if so, call the readWord() handler first to get the original data (with fPreWrite set to true) and call\n             * writeWord() with the new data inserted into (the high byte of) the original data.\n             */\n            afn = bus.aIOHandlers[off & ~0x1];\n            if (afn) {\n                if (afn[BusPDP11.IOHANDLER.WRITE_WORD]) {\n                    addrMasked &= ~0x1;\n                    w = afn[BusPDP11.IOHANDLER.READ_WORD]? afn[BusPDP11.IOHANDLER.READ_WORD](addrMasked, true) : 0;\n                    afn[BusPDP11.IOHANDLER.WRITE_WORD]((w & 0xff) | (b << 8), addrMasked);\n                    fWrite = true;\n                } else if (afn[BusPDP11.IOHANDLER.WRITE_BYTE]) {\n                    /*\n                     * WARNING: This is an unusual fall-back, because we're trying to write an ODD byte\n                     * access using a BYTE handler registered for EVEN bytes.  But if that's all we've got,\n                     * then presumably the handler is prepared for it (certainly, writeROMByte() is).\n                     */\n                    afn[BusPDP11.IOHANDLER.WRITE_BYTE](b, addrMasked);\n                    fWrite = true;\n                }\n            }\n        }\n        if (fWrite) {\n            if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP11.BUS | afn[BusPDP11.IOHANDLER.MSG_CATEGORY])) {\n                this.dbg.printMessage(afn[BusPDP11.IOHANDLER.REG_NAME] + \".writeByte(\" + this.dbg.toStrBase(addr) + \",\" + this.dbg.toStrBase(b) + \")\", true, !bus.nDisableFaults);\n            }\n            return;\n        }\n        bus.fault(addr, PDP11.CPUERR.TIMEOUT, PDP11.ACCESS.WRITE_BYTE);\n        if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP11.BUS)) {\n            this.dbg.printMessage(\"warning: unconverted write access to byte @\" + this.dbg.toStrBase(addr) + \": \" + this.dbg.toStrBase(b), true, !bus.nDisableFaults);\n        }\n    },\n\n    /**\n     * readWord(off, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} addr\n     * @return {number}\n     */\n    readWord: function(off, addr)\n    {\n        var w = -1;\n        var bus = this.controller;\n        var afn = bus.aIOHandlers[off];\n\n        /*\n         * Since addr is primarily used to advise an I/O handler of the target IOPAGE address, and since we don't want\n         * our handlers to worry about the current IOPAGE location, we truncate addr to 16 bits (the IOPAGE's lowest location).\n         */\n        var addrMasked = addr & 0xffff;\n\n        if (afn) {\n            if (afn[BusPDP11.IOHANDLER.READ_WORD]) {\n                w = afn[BusPDP11.IOHANDLER.READ_WORD](addrMasked);\n            } else if (afn[BusPDP11.IOHANDLER.READ_BYTE]) {\n                w = afn[BusPDP11.IOHANDLER.READ_BYTE](addrMasked) | (afn[BusPDP11.IOHANDLER.READ_BYTE](addrMasked + 1) << 8);\n            }\n        }\n        if (w >= 0) {\n            if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP11.BUS | afn[BusPDP11.IOHANDLER.MSG_CATEGORY])) {\n                this.dbg.printMessage(afn[BusPDP11.IOHANDLER.REG_NAME] + \".readWord(\" + this.dbg.toStrBase(addr) + \"): \" + this.dbg.toStrBase(w), true, !bus.nDisableFaults);\n            }\n            return w;\n        }\n        bus.fault(addr, PDP11.CPUERR.TIMEOUT, PDP11.ACCESS.READ_WORD);\n        w = 0xffff;\n        if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP11.BUS)) {\n            this.dbg.printMessage(\"warning: unconverted read access to word @\" + this.dbg.toStrBase(addr) + \": \" + this.dbg.toStrBase(w), true, !bus.nDisableFaults);\n        }\n        return w;\n    },\n\n    /**\n     * writeWord(off, w, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} w (which should already be pre-masked to 16 bits)\n     * @param {number} addr\n     */\n    writeWord: function(off, w, addr)\n    {\n        var fWrite = false;\n        var bus = this.controller;\n        var afn = bus.aIOHandlers[off];\n\n        /*\n         * Since addr is primarily used to advise an I/O handler of the target IOPAGE address, and since we don't want\n         * our handlers to worry about the current IOPAGE location, we truncate addr to 16 bits (the IOPAGE's lowest location).\n         */\n        var addrMasked = addr & 0xffff;\n\n        if (afn) {\n            if (afn[BusPDP11.IOHANDLER.WRITE_WORD]) {\n                afn[BusPDP11.IOHANDLER.WRITE_WORD](w, addrMasked);\n                fWrite = true;\n            } else if (afn[BusPDP11.IOHANDLER.WRITE_BYTE]) {\n                afn[BusPDP11.IOHANDLER.WRITE_BYTE](w & 0xff, addrMasked);\n                afn[BusPDP11.IOHANDLER.WRITE_BYTE](w >> 8, addrMasked + 1);\n                fWrite = true;\n            }\n        }\n        if (fWrite) {\n            if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP11.BUS | afn[BusPDP11.IOHANDLER.MSG_CATEGORY])) {\n                this.dbg.printMessage(afn[BusPDP11.IOHANDLER.REG_NAME] + \".writeWord(\" + this.dbg.toStrBase(addr) + \",\" + this.dbg.toStrBase(w) + \")\", true, !bus.nDisableFaults);\n            }\n            return;\n        }\n        bus.fault(addr, PDP11.CPUERR.TIMEOUT, PDP11.ACCESS.WRITE_WORD);\n        if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP11.BUS)) {\n            this.dbg.printMessage(\"warning: unconverted write access to word @\" + this.dbg.toStrBase(addr) + \": \" + this.dbg.toStrBase(w), true, !bus.nDisableFaults);\n        }\n    }\n};\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/device.js (C) Jeff Parsons 2012-2018\n */\n\n\nclass DevicePDP11 extends Component {\n    /**\n     * DevicePDP11(parmsDevice)\n     *\n     * The Device component implements the following \"default\" devices:\n     *\n     *      KW11 (KW11-L Line Time Clock)\n     *\n     * as well providing access to all the MMU and CPU registers, PSW, etc.\n     *\n     * @param {Object} parmsDevice\n     */\n    constructor(parmsDevice)\n    {\n        super(\"Device\", parmsDevice, MessagesPDP11.DEVICE);\n\n        this.kw11 = {               // KW11 registers\n            lks:        PDP11.KW11.LKS.MON,\n            timer:      -1          // initBus() will initialize this timer ID\n        };\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * @this {DevicePDP11}\n     * @param {ComputerPDP11} cmp\n     * @param {BusPDP11} bus\n     * @param {CPUStatePDP11} cpu\n     * @param {DebuggerPDP11} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.bus = bus;\n        this.cmp = cmp;\n        this.cpu = cpu;\n        this.dbg = dbg;\n\n        var device = this;\n        this.kw11.timer = cpu.addTimer(function() {\n            device.interruptKW11();\n        });\n\n        this.kw11.irq = cpu.addIRQ(PDP11.KW11.VEC, PDP11.KW11.PRI, MessagesPDP11.KW11);\n\n        bus.addIOTable(this, DevicePDP11.UNIBUS_IOTABLE);\n        bus.addResetHandler(this.reset.bind(this));\n\n        if (DEBUGGER && dbg) {\n            dbg.messageDump(MessagesPDP11.MMU, function onDumpMMU(asArgs) {\n                device.dumpMMU(asArgs);\n            });\n        }\n        this.setReady();\n    }\n\n    /**\n     * dumpMMU(asArgs)\n     *\n     * @this {DevicePDP11}\n     * @param {Array.<string>} asArgs\n     */\n    dumpMMU(asArgs)\n    {\n        if (DEBUGGER) {\n            var cpu = this.cpu;\n            this.dumpRegs(\"KIPDR\", cpu.regsPDR[0], 0, asArgs[0]);\n            this.dumpRegs(\"KDPDR\", cpu.regsPDR[0], 8, asArgs[0]);\n            this.dumpRegs(\"KIPAR\", cpu.regsPAR[0], 0, asArgs[0]);\n            this.dumpRegs(\"KDPAR\", cpu.regsPAR[0], 8, asArgs[0], true);\n            this.dumpRegs(\"SIPDR\", cpu.regsPDR[1], 0, asArgs[0]);\n            this.dumpRegs(\"SDPDR\", cpu.regsPDR[1], 8, asArgs[0]);\n            this.dumpRegs(\"SIPAR\", cpu.regsPAR[1], 0, asArgs[0]);\n            this.dumpRegs(\"SDPAR\", cpu.regsPAR[1], 8, asArgs[0], true);\n            this.dumpRegs(\"UIPDR\", cpu.regsPDR[3], 0, asArgs[0]);\n            this.dumpRegs(\"UDPDR\", cpu.regsPDR[3], 8, asArgs[0]);\n            this.dumpRegs(\"UIPAR\", cpu.regsPAR[3], 0, asArgs[0]);\n            this.dumpRegs(\"UDPAR\", cpu.regsPAR[3], 8, asArgs[0], true);\n            if (cpu.regMMR3 & PDP11.MMR3.UNIBUS_MAP) {\n                this.dumpRegs(\"UNIMAP\", cpu.regsUniMap, -1, asArgs[0]);\n            }\n        }\n    }\n\n    /**\n     * dumpRegs(sName, aRegs, offset, sFilter, fBreak)\n     *\n     * @this {DevicePDP11}\n     * @param {string} sName\n     * @param {Array.<number>} aRegs\n     * @param {number} offset\n     * @param {string} sFilter\n     * @param {boolean} [fBreak]\n     */\n    dumpRegs(sName, aRegs, offset, sFilter, fBreak)\n    {\n        if (DEBUGGER) {\n            var dbg = this.dbg;\n            if (sFilter && sName.indexOf(sFilter.toUpperCase()) < 0) return;\n            var nBits = 0;\n            var nRegs = 8;\n            var sDump = \"\";\n            var fIndex = false;\n            var nWidth = 8;\n            if (offset < 0) {\n                nBits = 22;\n                nRegs = aRegs.length;\n                offset = 0;\n                fIndex = true;\n                nWidth = 4;\n            }\n            for (var i = 0; i < nRegs; i++) {\n                if (i % nWidth == 0) {\n                    if (sDump) sDump += '\\n';\n                    sDump += sName + (fIndex? ('[' + Str.toDec(i, 2) + ']') : '') + ':';\n                }\n                sDump += ' ' + dbg.toStrBase(aRegs[offset + i], nBits);\n            }\n            dbg.println(sDump + (fBreak? '\\n' : ''));\n        }\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {DevicePDP11}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        if (!fRepower) {\n            if (!data) {\n                this.reset();\n            } else {\n                if (!this.restore(data)) return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {DevicePDP11}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        return fSave? this.save() : true;\n    }\n\n    /**\n     * reset()\n     *\n     * @this {DevicePDP11}\n     */\n    reset()\n    {\n        this.kw11.lks = PDP11.KW11.LKS.MON;\n        this.cpu.setTimer(this.kw11.timer, 1000/60, true);\n    }\n\n    /**\n     * save()\n     *\n     * This implements save support for the DevicePDP11 component.\n     *\n     * @this {DevicePDP11}\n     * @return {Object}\n     */\n    save()\n    {\n        var state = new State(this);\n        state.set(0, [\n            this.kw11.lks\n        ]);\n        return state.data();\n    }\n\n    /**\n     * restore(data)\n     *\n     * This implements restore support for the DevicePDP11 component.\n     *\n     * @this {DevicePDP11}\n     * @param {Object} data\n     * @return {boolean} true if successful, false if failure\n     */\n    restore(data)\n    {\n        /*\n         * ES6 ALERT: A handy destructuring assignment, which makes it easy to perform the inverse\n         * of what save() does when it collects a bunch of object properties into an array.\n         */\n        [\n            this.kw11.lks\n        ] = data[0];\n\n        return true;\n    }\n\n    /**\n     * interruptKW11()\n     *\n     * We used to call this function only when the the KW11's \"Interrupt Enable\" bit was set,\n     * but now we call it at 60Hz regardless.  In part, this was so we could piggy-back on it\n     * to drive display updates, but more importantly, the KW11's \"Monitor\" bit is supposed to\n     * be set at the \"line frequency\" independent of whether KW11 interrupts are enabled or not.\n     *\n     * @this {DevicePDP11}\n     */\n    interruptKW11()\n    {\n        this.kw11.lks |= PDP11.KW11.LKS.MON;\n        if (this.kw11.lks & PDP11.KW11.LKS.IE) {\n            this.cpu.setIRQ(this.kw11.irq);\n        }\n        if (this.cmp) this.cmp.updateDisplays(1);\n        this.cpu.setTimer(this.kw11.timer, 1000/60);\n    }\n\n    /**\n     * readLKS(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.LKS or 177546)\n     * @return {number}\n     */\n    readLKS(addr)\n    {\n        /*\n         * NOTE: The original code always cleared LKS.MON (bit 7) after snapping the value for the read,\n         * but based on DEC's \"Non-Interrupt Mode\" programming examples, it's clear that's not how LKS.MON\n         * operates; if the caller wants to clear it, they must explicitly clear it with a write.\n         */\n        return this.kw11.lks;\n    }\n\n    /**\n     * writeLKS(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.LKS or 177546)\n     */\n    writeLKS(data, addr)\n    {\n        /*\n         * NOTE: The original code always cleared LKS.MON (bit 7) as part of any write, but based on DEC's\n         * \"Non-Interrupt Mode\" programming examples, which explicitly CLRB after TSTB reveals LKS.MON is set,\n         * I think that was wrong, and that all a write should do is mask off all the other (non-writable) bits.\n         */\n        this.kw11.lks = data & PDP11.KW11.LKS.MASK;\n        if (!(this.kw11.lks & PDP11.KW11.LKS.IE)) this.cpu.clearIRQ(this.kw11.irq);\n    }\n\n    /**\n     * readMMR0(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.MMR0 or 177572)\n     * @return {number}\n     */\n    readMMR0(addr)\n    {\n        return this.cpu.getMMR0();\n    }\n\n    /**\n     * writeMMR0(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.MMR0 or 177572)\n     */\n    writeMMR0(data, addr)\n    {\n        this.cpu.setMMR0((data & ~PDP11.MMR0.COMPLETED) | (this.cpu.regMMR0 & PDP11.MMR0.COMPLETED));\n    }\n\n    /**\n     * readMMR1(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.MMR1 or 177574)\n     * @return {number}\n     */\n    readMMR1(addr)\n    {\n        return this.cpu.getMMR1();\n    }\n\n    /**\n     * readMMR2(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.MMR2 or 177576)\n     * @return {number}\n     */\n    readMMR2(addr)\n    {\n        return this.cpu.getMMR2();\n    }\n\n    /**\n     * readMMR3(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.MMR3 or 172516)\n     * @return {number}\n     */\n    readMMR3(addr)\n    {\n        return this.cpu.getMMR3();\n    }\n\n    /**\n     * writeMMR3(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.MMR3 or 172516)\n     */\n    writeMMR3(data, addr)\n    {\n        this.cpu.setMMR3(data);\n    }\n\n    /**\n     * readUNIMAP(addr)\n     *\n     * NOTE: The UNIBUS map (\"UNIMAP\") is 32 registers spread across 64 words, so we first calculate the word index.\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.UNIMAP)\n     * @return {number}\n     */\n    readUNIMAP(addr)\n    {\n        var word = (addr >> 1) & 0x3f, reg = word >> 1;\n        var data = this.cpu.regsUniMap[reg];\n        return (word & 1)? (data >> 16) : (data & 0xffff);\n    }\n\n    /**\n     * writeUNIMAP(data, addr)\n     *\n     * NOTE: The UNIBUS map (\"UNIMAP\") is 32 registers spread across 64 words, so we first calculate the word index.\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.UNIMAP)\n     */\n    writeUNIMAP(data, addr)\n    {\n        var word = (addr >> 1) & 0x3f, reg = word >> 1;\n        if (word & 1) {\n            this.cpu.regsUniMap[reg] = (this.cpu.regsUniMap[reg] & 0xffff) | ((data & 0x003f) << 16);\n        } else {\n            this.cpu.regsUniMap[reg] = (this.cpu.regsUniMap[reg] & ~0xffff) | (data & 0xfffe);\n        }\n    }\n\n    /**\n     * readSIPDR(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.SIPDR0--SIPDR7 or 172200--172216)\n     * @return {number}\n     */\n    readSIPDR(addr)\n    {\n        var reg = (addr >> 1) & 7;\n        return this.cpu.regsPDR[1][reg];\n    }\n\n    /**\n     * writeSIPDR(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.SIPDR0--SIPDR7 or 172200--172216)\n     */\n    writeSIPDR(data, addr)\n    {\n        var reg = (addr >> 1) & 7;\n        this.cpu.regsPDR[1][reg] = data & 0xff0f;\n    }\n\n    /**\n     * readSDPDR(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.SDPDR0--SDPDR7 or 172220--172236)\n     * @return {number}\n     */\n    readSDPDR(addr)\n    {\n        var reg = ((addr >> 1) & 7) + 8;\n        return this.cpu.regsPDR[1][reg];\n    }\n\n    /**\n     * writeSDPDR(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.SDPDR0--SDPDR7 or 172220--172236)\n     */\n    writeSDPDR(data, addr)\n    {\n        var reg = ((addr >> 1) & 7) + 8;\n        this.cpu.regsPDR[1][reg] = data & 0xff0f;\n    }\n\n    /**\n     * readSIPAR(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.SIPAR0--SIPAR7 or 172240--172256)\n     * @return {number}\n     */\n    readSIPAR(addr)\n    {\n        var reg = (addr >> 1) & 7;\n        return this.cpu.regsPAR[1][reg];\n    }\n\n    /**\n     * writeSIPAR(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.SIPAR0--SIPAR7 or 172240--172256)\n     */\n    writeSIPAR(data, addr)\n    {\n        var reg = (addr >> 1) & 7;\n        this.cpu.regsPAR[1][reg] = data;\n        this.cpu.regsPDR[1][reg] &= 0xff0f;\n\n    }\n\n    /**\n     * readSDPAR(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.SDPAR0--SDPAR7 or 172260--172276)\n     * @return {number}\n     */\n    readSDPAR(addr)\n    {\n        var reg = ((addr >> 1) & 7) + 8;\n        return this.cpu.regsPAR[1][reg];\n    }\n\n    /**\n     * writeSDPAR(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.SDPAR0--SDPAR7 or 172260--172276)\n     */\n    writeSDPAR(data, addr)\n    {\n        var reg = ((addr >> 1) & 7) + 8;\n        this.cpu.regsPAR[1][reg] = data;\n        this.cpu.regsPDR[1][reg] &= 0xff0f;\n    }\n\n    /**\n     * readKIPDR(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.KIPDR0--KIPDR7 or 172300--172316)\n     * @return {number}\n     */\n    readKIPDR(addr)\n    {\n        var reg = (addr >> 1) & 7;\n        return this.cpu.regsPDR[0][reg];\n    }\n\n    /**\n     * writeKIPDR(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.KIPDR0--KIPDR7 or 172300--172316)\n     */\n    writeKIPDR(data, addr)\n    {\n        var reg = (addr >> 1) & 7;\n        this.cpu.regsPDR[0][reg] = data & 0xff0f;\n    }\n\n    /**\n     * readKDPDR(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.KDPDR0--KDPDR7 or 172320--172336)\n     * @return {number}\n     */\n    readKDPDR(addr)\n    {\n        var reg = ((addr >> 1) & 7) + 8;\n        return this.cpu.regsPDR[0][reg];\n    }\n\n    /**\n     * writeKDPDR(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.KDPDR0--KDPDR7 or 172320--172336)\n     */\n    writeKDPDR(data, addr)\n    {\n        var reg = ((addr >> 1) & 7) + 8;\n        this.cpu.regsPDR[0][reg] = data & 0xff0f;\n    }\n\n    /**\n     * readKIPAR(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.KIPAR0--KIPAR7 or 172340--172356)\n     * @return {number}\n     */\n    readKIPAR(addr)\n    {\n        var reg = (addr >> 1) & 7;\n        return this.cpu.regsPAR[0][reg];\n    }\n\n    /**\n     * writeKIPAR(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.KIPAR0--KIPAR7 or 172340--172356)\n     */\n    writeKIPAR(data, addr)\n    {\n        var reg = (addr >> 1) & 7;\n        this.cpu.regsPAR[0][reg] = data;\n        this.cpu.regsPDR[0][reg] &= 0xff0f;\n\n    }\n\n    /**\n     * readKDPAR(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.KDPAR0--KDPAR7 or 172360--172376)\n     * @return {number}\n     */\n    readKDPAR(addr)\n    {\n        var reg = ((addr >> 1) & 7) + 8;\n        return this.cpu.regsPAR[0][reg];\n    }\n\n    /**\n     * writeKDPAR(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.KDPAR0--KDPAR7 or 172360--172376)\n     */\n    writeKDPAR(data, addr)\n    {\n        var reg = ((addr >> 1) & 7) + 8;\n        this.cpu.regsPAR[0][reg] = data;\n        this.cpu.regsPDR[0][reg] &= 0xff0f;\n    }\n\n    /**\n     * readUIPDR(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.UIPDR0--UIPDR7 or 177600--177616)\n     * @return {number}\n     */\n    readUIPDR(addr)\n    {\n        var reg = (addr >> 1) & 7;\n        return this.cpu.regsPDR[3][reg];\n    }\n\n    /**\n     * writeUIPDR(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.UIPDR0--UIPDR7 or 177600--177616)\n     */\n    writeUIPDR(data, addr)\n    {\n        var reg = (addr >> 1) & 7;\n        this.cpu.regsPDR[3][reg] = data & 0xff0f;\n    }\n\n    /**\n     * readUDPDR(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.UDPDR0--UDPDR7 or 177620--177636)\n     * @return {number}\n     */\n    readUDPDR(addr)\n    {\n        var reg = ((addr >> 1) & 7) + 8;\n        return this.cpu.regsPDR[3][reg];\n    }\n\n    /**\n     * writeUDPDR(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.UDPDR0--UDPDR7 or 177620--177636)\n     */\n    writeUDPDR(data, addr)\n    {\n        var reg = ((addr >> 1) & 7) + 8;\n        this.cpu.regsPDR[3][reg] = data & 0xff0f;\n    }\n\n    /**\n     * readUIPAR(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.UIPAR0--UIPAR7 or 177640--177656)\n     * @return {number}\n     */\n    readUIPAR(addr)\n    {\n        var reg = (addr >> 1) & 7;\n        return this.cpu.regsPAR[3][reg];\n    }\n\n    /**\n     * writeUIPAR(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.UIPAR0--UIPAR7 or 177640--177656)\n     */\n    writeUIPAR(data, addr)\n    {\n        var reg = (addr >> 1) & 7;\n        this.cpu.regsPAR[3][reg] = data;\n        this.cpu.regsPDR[3][reg] &= 0xff0f;\n\n    }\n\n    /**\n     * readUDPAR(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.UDPAR0--UDPAR7 or 177660--177676)\n     * @return {number}\n     */\n    readUDPAR(addr)\n    {\n        var reg = ((addr >> 1) & 7) + 8;\n        return this.cpu.regsPAR[3][reg];\n    }\n\n    /**\n     * writeUDPAR(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.UDPAR0--UDPAR7 or 177660--177676)\n     */\n    writeUDPAR(data, addr)\n    {\n        var reg = ((addr >> 1) & 7) + 8;\n        this.cpu.regsPAR[3][reg] = data;\n        this.cpu.regsPDR[3][reg] &= 0xff0f;\n    }\n\n    /**\n     * readRSET0(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.R0SET0--R5SET0 or 177700--177705)\n     * @return {number}\n     */\n    readRSET0(addr)\n    {\n        var data;\n        var reg = addr & 7;\n        if (this.cpu.regPSW & PDP11.PSW.REGSET) {\n            data = this.cpu.regsAlt[reg];\n        } else {\n            data = this.cpu.regsGen[reg];\n        }\n        return data;\n    }\n\n    /**\n     * writeRSET0(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.R0SET0--R5SET0 or 177700--177705)\n     */\n    writeRSET0(data, addr)\n    {\n        var reg = addr & 7;\n        if (this.cpu.regPSW & PDP11.PSW.REGSET) {\n            this.cpu.regsAlt[reg] = data;\n        } else {\n            this.cpu.regsGen[reg] = data;\n        }\n    }\n\n    /**\n     * readR6KERNEL(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.R6KERNEL or 177706)\n     * @return {number}\n     */\n    readR6KERNEL(addr)\n    {\n        var data;\n        if (!(this.cpu.regPSW & PDP11.PSW.CMODE)) {         // Kernel Mode\n            data = this.cpu.regsGen[6];\n        } else {\n            data = this.cpu.regsAltStack[0];\n        }\n        return data;\n    }\n\n    /**\n     * writeR6KERNEL(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.R6KERNEL or 177706)\n     */\n    writeR6KERNEL(data, addr)\n    {\n        if (!(this.cpu.regPSW & PDP11.PSW.CMODE)) {         // Kernel Mode\n            this.cpu.regsGen[6] = data;\n        } else {\n            this.cpu.regsAltStack[0] = data;\n        }\n    }\n\n    /**\n     * readR7KERNEL(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.R7KERNEL or 177707)\n     * @return {number}\n     */\n    readR7KERNEL(addr)\n    {\n        return this.cpu.regsGen[7];\n    }\n\n    /**\n     * writeR7KERNEL(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.R7KERNEL or 177707)\n     */\n    writeR7KERNEL(data, addr)\n    {\n        this.cpu.regsGen[7] = data;\n    }\n\n    /**\n     * readRSET1(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.R0SET1--R5SET1 or 177710--177715)\n     * @return {number}\n     */\n    readRSET1(addr)\n    {\n        var data;\n        var reg = addr & 7;\n        if (this.cpu.regPSW & PDP11.PSW.REGSET) {\n            data = this.cpu.regsGen[reg];\n        } else {\n            data = this.cpu.regsAlt[reg];\n        }\n        return data;\n    }\n\n    /**\n     * writeRSET1(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.R0SET1--R5SET1 or 177710--177715)\n     */\n    writeRSET1(data, addr)\n    {\n        var reg = addr & 7;\n        if (this.cpu.regPSW & PDP11.PSW.REGSET) {\n            this.cpu.regsGen[reg] = data;\n        } else {\n            this.cpu.regsAlt[reg] = data;\n        }\n    }\n\n    /**\n     * readR6SUPER(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.R6SUPER or 177716)\n     * @return {number}\n     */\n    readR6SUPER(addr)\n    {\n        var data;\n        if (((this.cpu.regPSW & PDP11.PSW.CMODE) >> PDP11.PSW.SHIFT.CMODE) == PDP11.MODE.SUPER) {\n            data = this.cpu.regsGen[6];\n        } else {\n            data = this.cpu.regsAltStack[1];\n        }\n        return data;\n    }\n\n    /**\n     * writeR6SUPER(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.R6SUPER or 177716)\n     */\n    writeR6SUPER(data, addr)\n    {\n        if (((this.cpu.regPSW & PDP11.PSW.CMODE) >> PDP11.PSW.SHIFT.CMODE) == PDP11.MODE.SUPER) {\n            this.cpu.regsGen[6] = data;\n        } else {\n            this.cpu.regsAltStack[1] = data;\n        }\n    }\n\n    /**\n     * readR6USER(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.R6USER or 177717)\n     * @return {number}\n     */\n    readR6USER(addr)\n    {\n        var data;\n        if (((this.cpu.regPSW & PDP11.PSW.CMODE) >> PDP11.PSW.SHIFT.CMODE) == PDP11.MODE.USER) {\n            data = this.cpu.regsGen[6];\n        } else {\n            data = this.cpu.regsAltStack[3];\n        }\n        return data;\n    }\n\n    /**\n     * writeR6USER(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.R6USER or 177717)\n     */\n    writeR6USER(data, addr)\n    {\n        if (((this.cpu.regPSW & PDP11.PSW.CMODE) >> PDP11.PSW.SHIFT.CMODE) == PDP11.MODE.USER) {\n            this.cpu.regsGen[6] = data;\n        } else {\n            this.cpu.regsAltStack[3] = data;\n        }\n    }\n\n    /**\n     * readCTRL(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.LAERR--UNDEF2 or 177740--177756)\n     * @return {number}\n     */\n    readCTRL(addr)\n    {\n        var reg = (addr - PDP11.UNIBUS.CTRL) >> 1;\n        return this.cpu.regsControl[reg];\n    }\n\n    /**\n     * writeCTRL(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.LAERR--UNDEF2 or 177740--177756)\n     */\n    writeCTRL(data, addr)\n    {\n        var reg = (addr - PDP11.UNIBUS.CTRL) >> 1;\n        this.cpu.regsControl[reg] = data;\n    }\n\n    /**\n     * readSIZE(addr)\n     *\n     * We're adhering to DEC's documentation, which says:\n     *\n     *      This read-only register specifies the memory size of the system. It is defined to indicate the\n     *      last addressable block of 32 words in memory (bit 0 is equivalent to bit 6 of the Physical Address).\n     *\n     * Looking at the Memory Clear \"toggle-in\" code in /devices/pdp11/machine/1170/panel/debugger/README.md, the\n     * memory loop gives up when the block number stored in KIPAR0 is >= LSIZE, suggesting that LSIZE is actually\n     * the total number of 64-byte blocks, rather than the block number of the last block.  But that code is\n     * not conclusive, since it writes 8192 bytes at a time rather than 64, so it doesn't really matter if LSIZE\n     * is off by one.\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.LSIZE--HSIZE or 177760--177762)\n     * @return {number}\n     */\n    readSIZE(addr)\n    {\n        return addr == PDP11.UNIBUS.LSIZE? ((this.bus.getMemoryLimit(MemoryPDP11.TYPE.RAM) >> 6) - 1) : 0;\n    }\n\n    /**\n     * writeSIZE(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.LSIZE--HSIZE or 177760--177762)\n     */\n    writeSIZE(data, addr)\n    {\n    }\n\n    /**\n     * readSYSID(addr)\n     *\n     * TODO: For SYSID, we currently ignore writes and return 1 on reads\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.SYSID or 177764)\n     * @return {number}\n     */\n    readSYSID(addr)\n    {\n        return 1;\n    }\n\n    /**\n     * writeSYSID(data, addr)\n     *\n     * TODO: For SYSID, we currently ignore writes and return 1 on reads\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.SYSID or 177764)\n     */\n    writeSYSID(data, addr)\n    {\n    }\n\n    /**\n     * readCPUERR(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.CPUERR or 177766)\n     * @return {number}\n     */\n    readCPUERR(addr)\n    {\n        return this.cpu.regErr;\n    }\n\n    /**\n     * writeCPUERR(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.CPUERR or 177766)\n     */\n    writeCPUERR(data, addr)\n    {\n        this.cpu.regErr = 0;        // TODO: Confirm that writes always zero the register\n    }\n\n    /**\n     * readMBR(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.MB or 177770)\n     * @return {number}\n     */\n    readMBR(addr)\n    {\n        return this.cpu.regMBR;\n    }\n\n    /**\n     * writeMBR(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.MB or 177770)\n     */\n    writeMBR(data, addr)\n    {\n        if (!(addr & 0x1)) {\n            data &= 0xff;           // required for KB11-CM without MFPT instruction\n        }\n        this.cpu.regMBR = data;\n    }\n\n    /**\n     * readPIR(addr, fPreWrite)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.PIR or 177772)\n     * @param {boolean} [fPreWrite]\n     * @return {number}\n     */\n    readPIR(addr, fPreWrite)\n    {\n        if (fPreWrite) return 0;\n        return this.cpu.getPIR();\n    }\n\n    /**\n     * writePIR(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.PIR or 177772)\n     */\n    writePIR(data, addr)\n    {\n        this.cpu.setPIR(data);\n    }\n\n    /**\n     * readSLR(addr, fPreWrite)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.SL or 177774)\n     * @param {boolean} [fPreWrite]\n     * @return {number}\n     */\n    readSLR(addr, fPreWrite)\n    {\n        if (fPreWrite) return 0;\n        return this.cpu.getSLR();\n    }\n\n    /**\n     * writeSLR(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.SL or 177774)\n     */\n    writeSLR(data, addr)\n    {\n        this.cpu.setSLR(data);\n    }\n\n    /**\n     * readPSW(addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.PSW or 177776)\n     * @return {number}\n     */\n    readPSW(addr)\n    {\n        return this.cpu.getPSW();\n    }\n\n    /**\n     * writePSW(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.PSW or 177776)\n     */\n    writePSW(data, addr)\n    {\n        /*\n         * pdp11.js disallowed PSW.TF in addition to PSW.UNUSED, but DEC's \"TRAP TEST\" expects the\n         * following instruction to trap:\n         *\n         *      004174: 052767 000020 173574   BIS   #20,177776\n         *\n         * Since that test was written for the PDP-11/20, it's possible that newer machines have a different\n         * behavior, but for now, we assume that all machines allow setting PSW.TF.\n         *\n         * Moreover, we have changed setPSW() to disallow the setting of any bits not supported by the current\n         * CPU model, so it seems rather pointless to do any masking of bits here.\n         */\n        this.cpu.setPSW(data);\n    }\n\n    /**\n     * writeIgnored(data, addr)\n     *\n     * @this {DevicePDP11}\n     * @param {number} data\n     * @param {number} addr\n     */\n    writeIgnored(data, addr)\n    {\n        if (this.messageEnabled()) {\n            this.printMessage(\"writeIgnored(\" + Str.toOct(addr) + \"): \" + Str.toOct(data), true, true);\n        }\n    }\n\n    /**\n     * DevicePDP11.init()\n     *\n     * This function operates on every HTML element of class \"device\", extracting the\n     * JSON-encoded parameters for the DevicePDP11 constructor from the element's \"data-value\"\n     * attribute, invoking the constructor to create a DevicePDP11 component, and then binding\n     * any associated HTML controls to the new component.\n     */\n    static init()\n    {\n        var aeDevice = Component.getElementsByClass(document, PDP11.APPCLASS, \"device\");\n        for (var iDevice = 0; iDevice < aeDevice.length; iDevice++) {\n            var device;\n            var eDevice = aeDevice[iDevice];\n            var parmsDevice = Component.getComponentParms(eDevice);\n            switch(parmsDevice['type']) {\n            case 'default':\n                device = new DevicePDP11(parmsDevice);\n                Component.bindComponentControls(device, eDevice, PDP11.APPCLASS);\n                break;\n            case 'pc11':\n                device = new PC11(parmsDevice);\n                Component.bindComponentControls(device, eDevice, PDP11.APPCLASS);\n                break;\n            case 'rl11':\n                device = new RL11(parmsDevice);\n                Component.bindComponentControls(device, eDevice, PDP11.APPCLASS);\n                break;\n            case 'rk11':\n                device = new RK11(parmsDevice);\n                Component.bindComponentControls(device, eDevice, PDP11.APPCLASS);\n                break;\n            case 'rx11':\n                device = new RX11(parmsDevice);\n                Component.bindComponentControls(device, eDevice, PDP11.APPCLASS);\n                break;\n            }\n        }\n    }\n}\n\n/*\n * ES6 ALERT: As you can see below, I've finally started using computed property names.\n */\nDevicePDP11.UNIBUS_IOTABLE = {\n    [PDP11.UNIBUS.UNIMAP]:  /* 170200 */    [null, null, DevicePDP11.prototype.readUNIMAP,  DevicePDP11.prototype.writeUNIMAP,  \"UNIMAP\",   64, PDP11.MODEL_1170],\n    [PDP11.UNIBUS.SIPDR0]:  /* 172200 */    [null, null, DevicePDP11.prototype.readSIPDR,   DevicePDP11.prototype.writeSIPDR,   \"SIPDR\",    8,  PDP11.MODEL_1145, MessagesPDP11.MMU],\n    [PDP11.UNIBUS.SDPDR0]:  /* 172220 */    [null, null, DevicePDP11.prototype.readSDPDR,   DevicePDP11.prototype.writeSDPDR,   \"SDPDR\",    8,  PDP11.MODEL_1145, MessagesPDP11.MMU],\n    [PDP11.UNIBUS.SIPAR0]:  /* 172240 */    [null, null, DevicePDP11.prototype.readSIPAR,   DevicePDP11.prototype.writeSIPAR,   \"SIPAR\",    8,  PDP11.MODEL_1145, MessagesPDP11.MMU],\n    [PDP11.UNIBUS.SDPAR0]:  /* 172260 */    [null, null, DevicePDP11.prototype.readSDPAR,   DevicePDP11.prototype.writeSDPAR,   \"SDPAR\",    8,  PDP11.MODEL_1145, MessagesPDP11.MMU],\n    [PDP11.UNIBUS.KIPDR0]:  /* 172300 */    [null, null, DevicePDP11.prototype.readKIPDR,   DevicePDP11.prototype.writeKIPDR,   \"KIPDR\",    8,  PDP11.MODEL_1140, MessagesPDP11.MMU],\n    [PDP11.UNIBUS.KDPDR0]:  /* 172320 */    [null, null, DevicePDP11.prototype.readKDPDR,   DevicePDP11.prototype.writeKDPDR,   \"KDPDR\",    8,  PDP11.MODEL_1145, MessagesPDP11.MMU],\n    [PDP11.UNIBUS.KIPAR0]:  /* 172340 */    [null, null, DevicePDP11.prototype.readKIPAR,   DevicePDP11.prototype.writeKIPAR,   \"KIPAR\",    8,  PDP11.MODEL_1140, MessagesPDP11.MMU],\n    [PDP11.UNIBUS.KDPAR0]:  /* 172360 */    [null, null, DevicePDP11.prototype.readKDPAR,   DevicePDP11.prototype.writeKDPAR,   \"KDPAR\",    8,  PDP11.MODEL_1145, MessagesPDP11.MMU],\n    [PDP11.UNIBUS.MMR3]:    /* 172516 */    [null, null, DevicePDP11.prototype.readMMR3,    DevicePDP11.prototype.writeMMR3,    \"MMR3\",     1,  PDP11.MODEL_1145, MessagesPDP11.MMU],\n    [PDP11.UNIBUS.LKS]:     /* 177546 */    [null, null, DevicePDP11.prototype.readLKS,     DevicePDP11.prototype.writeLKS,     \"LKS\"],\n    [PDP11.UNIBUS.MMR0]:    /* 177572 */    [null, null, DevicePDP11.prototype.readMMR0,    DevicePDP11.prototype.writeMMR0,    \"MMR0\",     1,  PDP11.MODEL_1140, MessagesPDP11.MMU],\n    [PDP11.UNIBUS.MMR1]:    /* 177574 */    [null, null, DevicePDP11.prototype.readMMR1,    DevicePDP11.prototype.writeIgnored, \"MMR1\",     1,  PDP11.MODEL_1145, MessagesPDP11.MMU],\n    [PDP11.UNIBUS.MMR2]:    /* 177576 */    [null, null, DevicePDP11.prototype.readMMR2,    DevicePDP11.prototype.writeIgnored, \"MMR2\",     1,  PDP11.MODEL_1140, MessagesPDP11.MMU],\n    [PDP11.UNIBUS.UIPDR0]:  /* 177600 */    [null, null, DevicePDP11.prototype.readUIPDR,   DevicePDP11.prototype.writeUIPDR,   \"UIPDR\",    8,  PDP11.MODEL_1140, MessagesPDP11.MMU],\n    [PDP11.UNIBUS.UDPDR0]:  /* 177620 */    [null, null, DevicePDP11.prototype.readUDPDR,   DevicePDP11.prototype.writeUDPDR,   \"UDPDR\",    8,  PDP11.MODEL_1145, MessagesPDP11.MMU],\n    [PDP11.UNIBUS.UIPAR0]:  /* 177640 */    [null, null, DevicePDP11.prototype.readUIPAR,   DevicePDP11.prototype.writeUIPAR,   \"UIPAR\",    8,  PDP11.MODEL_1140, MessagesPDP11.MMU],\n    [PDP11.UNIBUS.UDPAR0]:  /* 177660 */    [null, null, DevicePDP11.prototype.readUDPAR,   DevicePDP11.prototype.writeUDPAR,   \"UDPAR\",    8,  PDP11.MODEL_1145, MessagesPDP11.MMU],\n    [PDP11.UNIBUS.R0SET0]:  /* 177700 */    [null, null, DevicePDP11.prototype.readRSET0,   DevicePDP11.prototype.writeRSET0,   \"R0SET0\"],\n    [PDP11.UNIBUS.R1SET0]:  /* 177701 */    [null, null, DevicePDP11.prototype.readRSET0,   DevicePDP11.prototype.writeRSET0,   \"R1SET0\"],\n    [PDP11.UNIBUS.R2SET0]:  /* 177702 */    [null, null, DevicePDP11.prototype.readRSET0,   DevicePDP11.prototype.writeRSET0,   \"R2SET0\"],\n    [PDP11.UNIBUS.R3SET0]:  /* 177703 */    [null, null, DevicePDP11.prototype.readRSET0,   DevicePDP11.prototype.writeRSET0,   \"R3SET0\"],\n    [PDP11.UNIBUS.R4SET0]:  /* 177704 */    [null, null, DevicePDP11.prototype.readRSET0,   DevicePDP11.prototype.writeRSET0,   \"R4SET0\"],\n    [PDP11.UNIBUS.R5SET0]:  /* 177705 */    [null, null, DevicePDP11.prototype.readRSET0,   DevicePDP11.prototype.writeRSET0,   \"R5SET0\"],\n    [PDP11.UNIBUS.R6KERNEL]:/* 177706 */    [null, null, DevicePDP11.prototype.readR6KERNEL,DevicePDP11.prototype.writeR6KERNEL,\"R6KERNEL\"],\n    [PDP11.UNIBUS.R7KERNEL]:/* 177707 */    [null, null, DevicePDP11.prototype.readR7KERNEL,DevicePDP11.prototype.writeR7KERNEL,\"R7KERNEL\"],\n    [PDP11.UNIBUS.R0SET1]:  /* 177710 */    [null, null, DevicePDP11.prototype.readRSET1,   DevicePDP11.prototype.writeRSET1,   \"R0SET1\",   1,  PDP11.MODEL_1145],\n    [PDP11.UNIBUS.R1SET1]:  /* 177711 */    [null, null, DevicePDP11.prototype.readRSET1,   DevicePDP11.prototype.writeRSET1,   \"R1SET1\",   1,  PDP11.MODEL_1145],\n    [PDP11.UNIBUS.R2SET1]:  /* 177712 */    [null, null, DevicePDP11.prototype.readRSET1,   DevicePDP11.prototype.writeRSET1,   \"R2SET1\",   1,  PDP11.MODEL_1145],\n    [PDP11.UNIBUS.R3SET1]:  /* 177713 */    [null, null, DevicePDP11.prototype.readRSET1,   DevicePDP11.prototype.writeRSET1,   \"R3SET1\",   1,  PDP11.MODEL_1145],\n    [PDP11.UNIBUS.R4SET1]:  /* 177714 */    [null, null, DevicePDP11.prototype.readRSET1,   DevicePDP11.prototype.writeRSET1,   \"R4SET1\",   1,  PDP11.MODEL_1145],\n    [PDP11.UNIBUS.R5SET1]:  /* 177715 */    [null, null, DevicePDP11.prototype.readRSET1,   DevicePDP11.prototype.writeRSET1,   \"R5SET1\",   1,  PDP11.MODEL_1145],\n    [PDP11.UNIBUS.R6SUPER]: /* 177716 */    [null, null, DevicePDP11.prototype.readR6SUPER, DevicePDP11.prototype.writeR6SUPER, \"R6SUPER\",  1,  PDP11.MODEL_1145],\n    [PDP11.UNIBUS.R6USER]:  /* 177717 */    [null, null, DevicePDP11.prototype.readR6USER,  DevicePDP11.prototype.writeR6USER,  \"R6USER\",   1,  PDP11.MODEL_1145],\n    [PDP11.UNIBUS.CTRL]:    /* 177740 */    [null, null, DevicePDP11.prototype.readCTRL,    DevicePDP11.prototype.writeCTRL,    \"CTRL\",     8,  PDP11.MODEL_1170],\n    [PDP11.UNIBUS.LSIZE]:   /* 177760 */    [null, null, DevicePDP11.prototype.readSIZE,    DevicePDP11.prototype.writeSIZE,    \"LSIZE\",    1,  PDP11.MODEL_1170],\n    [PDP11.UNIBUS.HSIZE]:   /* 177762 */    [null, null, DevicePDP11.prototype.readSIZE,    DevicePDP11.prototype.writeSIZE,    \"HSIZE\",    1,  PDP11.MODEL_1170],\n    [PDP11.UNIBUS.SYSID]:   /* 177764 */    [null, null, DevicePDP11.prototype.readSYSID,   DevicePDP11.prototype.writeSYSID,   \"SYSID\",    1,  PDP11.MODEL_1170],\n    [PDP11.UNIBUS.CPUERR]:  /* 177766 */    [null, null, DevicePDP11.prototype.readCPUERR,  DevicePDP11.prototype.writeCPUERR,  \"ERR\",      1,  PDP11.MODEL_1170],\n    [PDP11.UNIBUS.MB]:      /* 177770 */    [null, null, DevicePDP11.prototype.readMBR,     DevicePDP11.prototype.writeMBR,     \"MBR\",      1,  PDP11.MODEL_1170],\n    [PDP11.UNIBUS.PIR]:     /* 177772 */    [null, null, DevicePDP11.prototype.readPIR,     DevicePDP11.prototype.writePIR,     \"PIR\"],\n    [PDP11.UNIBUS.SL]:      /* 177774 */    [null, null, DevicePDP11.prototype.readSLR,     DevicePDP11.prototype.writeSLR,     \"SLR\"],\n    [PDP11.UNIBUS.PSW]:     /* 177776 */    [null, null, DevicePDP11.prototype.readPSW,     DevicePDP11.prototype.writePSW,     \"PSW\"]\n};\n\n/*\n * Initialize all the DevicePDP11 modules on the page.\n */\nWeb.onInit(DevicePDP11.init);\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/memory.js (C) Jeff Parsons 2012-2018\n */\n\n\n/**\n * @class DataView\n * @property {function(number,boolean):number} getUint8\n * @property {function(number,number,boolean)} setUint8\n * @property {function(number,boolean):number} getUint16\n * @property {function(number,number,boolean)} setUint16\n * @property {function(number,boolean):number} getInt32\n * @property {function(number,number,boolean)} setInt32\n */\nclass MemoryPDP11 {\n    /**\n     * MemoryPDP11(bus, addr, used, size, type, controller)\n     *\n     * The Bus component allocates Memory objects so that each has a memory buffer with a\n     * block-granular starting address and an address range equal to bus.nBlockSize; however,\n     * the size of any given Memory object's underlying buffer can be either zero or bus.nBlockSize;\n     * memory read/write functions for empty (buffer-less) blocks are mapped to readNone/writeNone.\n     *\n     * The Bus allocates empty blocks for the entire address space during initialization, so that\n     * any reads/writes to undefined addresses will have no effect.  Later, the ROM and RAM\n     * components will ask the Bus to allocate memory for specific ranges, and the Bus will allocate\n     * as many new blockSize Memory objects as the ranges require.  Partial Memory blocks could\n     * also be supported in theory, but in practice, they're not.\n     *\n     * Because Memory blocks now allow us to have a \"sparse\" address space, we could choose to\n     * take the memory hit of allocating 4K arrays per block, where each element stores only one byte,\n     * instead of the more frugal but slightly slower approach of allocating arrays of 32-bit dwords\n     * (LONGARRAYS) and shifting/masking bytes/words to/from dwords; in theory, byte accesses would\n     * be faster and word accesses somewhat less faster.\n     *\n     * However, preliminary testing of that feature (BYTEARRAYS) did not yield significantly faster\n     * performance, so it is OFF by default to minimize our memory consumption.  Using TYPEDARRAYS\n     * would seem best, but as discussed in defines.js, it's off by default, because it doesn't perform\n     * as well as LONGARRAYS; the other advantage of TYPEDARRAYS is that it should theoretically use\n     * about 1/2 the memory of LONGARRAYS (32-bit elements vs 64-bit numbers), but I value speed over\n     * size at this point.  Also, not all JavaScript implementations support TYPEDARRAYS (IE9 is probably\n     * the only real outlier: it lacks typed arrays but otherwise has all the necessary HTML5 support).\n     *\n     * WARNING: Since Memory blocks are low-level objects that have no UI requirements, they\n     * do not inherit from the Component class, so if you want to use any Component class methods,\n     * such as Component.assert(), use the corresponding Debugger methods instead (assuming a debugger\n     * is available).\n     *\n     * @param {BusPDP11} bus\n     * @param {number|null} [addr] of lowest used address in block\n     * @param {number} [used] portion of block in bytes (0 for none); must be a multiple of 4\n     * @param {number} [size] of block's buffer in bytes (0 for none); must be a multiple of 4\n     * @param {number} [type] is one of the MemoryPDP11.TYPE constants (default is MemoryPDP11.TYPE.NONE)\n     * @param {Object} [controller] is an optional memory controller component\n     */\n    constructor(bus, addr, used, size, type, controller)\n    {\n        var a, i;\n        this.bus = bus;\n        this.id = (MemoryPDP11.idBlock += 2);\n        this.adw = null;\n        this.offset = 0;\n        this.addr = addr;\n        this.used = used;\n        this.size = size || 0;\n        this.type = type || MemoryPDP11.TYPE.NONE;\n        this.fReadOnly = (type == MemoryPDP11.TYPE.ROM);\n        this.controller = null;\n        this.dbg = null;\n        this.readByte = this.readByteDirect = this.readNone;\n        this.readWord = this.readWordDirect = this.readWordDefault;\n        this.writeByte = this.writeByteDirect = this.writeNone;\n        this.writeWord = this.writeWordDirect = this.writeWordDefault;\n        this.cReadBreakpoints = this.cWriteBreakpoints = 0;\n        this.copyBreakpoints();     // initialize the block's Debugger info; the caller will reinitialize\n\n        /*\n         * TODO: Study the impact of dirty block tracking.  The original purposes were to allow saveMemory()\n         * to save only dirty blocks, and to enable the Video component to quickly detect changes to the video buffer.\n         * But the benefit to saveMemory() is minimal, and the Video component has other options; for example, it can\n         * now use a custom memory controller that performs its own dirty block tracking.\n         *\n         * However, a quick test with dirty block tracking disabled didn't yield a noticeable improvement in performance,\n         * so I think the overhead of our block-based architecture is swamping the impact of these micro-updates.\n         */\n        this.fDirty = this.fDirtyEver = false;\n\n        /*\n         * For empty memory blocks, all we need to do is ensure all access functions are mapped to \"none\" handlers.\n         */\n        if (!this.size) {\n            this.setAccess();\n            return;\n        }\n\n        /*\n         * When a controller is specified, the controller must provide a buffer, via getControllerBuffer(),\n         * and memory access functions, via getControllerAccess().\n         */\n        if (controller) {\n            this.controller = controller;\n            a = controller.getControllerBuffer(addr);\n            this.adw = a[0];\n            this.offset = a[1];\n            this.setAccess(controller.getControllerAccess());\n            return;\n        }\n\n        /*\n         * This is the normal case: allocate a buffer that provides 8 bits of data per address;\n         * no controller is required because our default memory access functions (see afnMemory)\n         * know how to deal with this simple 1-1 mapping of addresses to bytes and words.\n         *\n         * TODO: Consider initializing the memory array to random (or pseudo-random) values in DEBUG\n         * mode; pseudo-random might be best, to help make any bugs reproducible.\n         */\n        if (TYPEDARRAYS) {\n            this.buffer = new ArrayBuffer(this.size);\n            this.dv = new DataView(this.buffer, 0, this.size);\n            /*\n             * If littleEndian is true, we can use ab[], aw[] and adw[] directly; well, we can use them\n             * whenever the offset is a multiple of 1, 2 or 4, respectively.  Otherwise, we must fallback to\n             * dv.getUint8()/dv.setUint8(), dv.getUint16()/dv.setUint16() and dv.getInt32()/dv.setInt32().\n             */\n            this.ab = new Uint8Array(this.buffer, 0, this.size);\n            this.aw = new Uint16Array(this.buffer, 0, this.size >> 1);\n            this.adw = new Int32Array(this.buffer, 0, this.size >> 2);\n            this.setAccess(littleEndian? MemoryPDP11.afnArrayLE : MemoryPDP11.afnArrayBE);\n        } else {\n            /*\n             * NOTE: An ArrayBuffer is defined as being zero-initialized, but the elements of a new\n             * Array are not, so this code path takes care of zero-initialization ourselves.\n             */\n            if (BYTEARRAYS) {\n                a = this.ab = new Array(this.size);\n            } else {\n                /*\n                 * NOTE: This used to be the default mode of operation (!TYPEDARRAYS && !BYTEARRAYS), because\n                 * it seemed to provide the best performance; however, that was then, and this is now.  TYPEDARRAYS\n                 * is more efficient.\n                 */\n                a = this.adw = new Array(this.size >> 2);\n            }\n            for (i = 0; i < a.length; i++) a[i] = 0;\n            this.setAccess(MemoryPDP11.afnMemory);\n        }\n    }\n\n    /**\n     * init(addr)\n     *\n     * Quick reinitializer when reusing a Memory block.\n     *\n     * @this {MemoryPDP11}\n     * @param {number} addr\n     */\n    init(addr)\n    {\n        this.addr = addr;\n    }\n\n    /**\n     * clone(mem, type, dbg)\n     *\n     * Converts the current Memory block (this) into a clone of the given Memory block (mem),\n     * and optionally overrides the current block's type with the specified type.\n     *\n     * @this {MemoryPDP11}\n     * @param {MemoryPDP11} mem\n     * @param {number} [type]\n     * @param {DebuggerPDP11} [dbg]\n     */\n    clone(mem, type, dbg)\n    {\n        /*\n         * Original memory block IDs are even; cloned memory block IDs are odd;\n         * the original ID of the current block is lost, but that's OK, since it was presumably\n         * produced merely to become a clone.\n         */\n        this.id = mem.id | 0x1;\n        this.used = mem.used;\n        this.size = mem.size;\n        if (type) {\n            this.type = type;\n            this.fReadOnly = (type == MemoryPDP11.TYPE.ROM);\n        }\n        if (TYPEDARRAYS) {\n            this.buffer = mem.buffer;\n            this.dv = mem.dv;\n            this.ab = mem.ab;\n            this.aw = mem.aw;\n            this.adw = mem.adw;\n            this.setAccess(littleEndian? MemoryPDP11.afnArrayLE : MemoryPDP11.afnArrayBE);\n        } else {\n            if (BYTEARRAYS) {\n                this.ab = mem.ab;\n            } else {\n                this.adw = mem.adw;\n            }\n            this.setAccess(MemoryPDP11.afnMemory);\n        }\n        this.copyBreakpoints(dbg, mem);\n    }\n\n    /**\n     * save()\n     *\n     * This gets the contents of a Memory block as an array of 32-bit values; used by Bus.saveMemory(),\n     * which in turn is called by CPUState.save().\n     *\n     * Memory blocks with custom memory controllers do NOT save their contents; that's the responsibility\n     * of the controller component.\n     *\n     * @this {MemoryPDP11}\n     * @return {Array|Int32Array|null}\n     */\n    save()\n    {\n        var adw, i;\n        if (this.controller) {\n            adw = null;\n        }\n        else if (BYTEARRAYS) {\n            adw = new Array(this.size >> 2);\n            var off = 0;\n            for (i = 0; i < adw.length; i++) {\n                adw[i] = this.ab[off] | (this.ab[off + 1] << 8) | (this.ab[off + 2] << 16) | (this.ab[off + 3] << 24);\n                off += 4;\n            }\n        }\n        else if (TYPEDARRAYS) {\n            /*\n             * It might be tempting to just return a copy of Int32Array(this.buffer, 0, this.size >> 2),\n             * but we can't be sure of the \"endianness\" of an Int32Array -- which would be OK if the array\n             * was always saved/restored on the same machine, but there's no guarantee of that, either.\n             * So we use getInt32() and require little-endian values.\n             *\n             * Moreover, an Int32Array isn't treated by JSON.stringify() and JSON.parse() exactly like\n             * a normal array; it's serialized as an Object rather than an Array, so it lacks a \"length\"\n             * property and causes problems for State.store() and State.parse().\n             */\n            adw = new Array(this.size >> 2);\n            for (i = 0; i < adw.length; i++) {\n                adw[i] = this.dv.getInt32(i << 2, true);\n            }\n        }\n        else {\n            adw = this.adw;\n        }\n        return adw;\n    }\n\n    /**\n     * restore(adw)\n     *\n     * This restores the contents of a Memory block from an array of 32-bit values;\n     * used by Bus.restoreMemory(), which is called by CPUState.restore(), after all other\n     * components have been restored and thus all Memory blocks have been allocated\n     * by their respective components.\n     *\n     * @this {MemoryPDP11}\n     * @param {Array|null} adw\n     * @return {boolean} true if successful, false if block size mismatch\n     */\n    restore(adw)\n    {\n        if (this.controller) {\n            return (adw == null);\n        }\n        /*\n         * At this point, it's a consistency error for adw to be null; it's happened once already,\n         * when there was a restore bug in the Video component that added the frame buffer at the video\n         * card's \"spec'ed\" address instead of the programmed address, so there were no controller-owned\n         * memory blocks installed at the programmed address, and so we arrived here at a block with\n         * no controller AND no data.\n         */\n\n\n        if (adw && this.size == adw.length << 2) {\n            var i;\n            if (BYTEARRAYS) {\n                var off = 0;\n                for (i = 0; i < adw.length; i++) {\n                    this.ab[off] = adw[i] & 0xff;\n                    this.ab[off + 1] = (adw[i] >> 8) & 0xff;\n                    this.ab[off + 2] = (adw[i] >> 16) & 0xff;\n                    this.ab[off + 3] = (adw[i] >> 24) & 0xff;\n                    off += 4;\n                }\n            } else if (TYPEDARRAYS) {\n                for (i = 0; i < adw.length; i++) {\n                    this.dv.setInt32(i << 2, adw[i], true);\n                }\n            } else {\n                this.adw = adw;\n            }\n            this.fDirty = true;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * zero(off, len, pattern)\n     *\n     * Zeros the block.  Supporting off and len parameters is probably overkill, and makes more\n     * work in the non-TYPEDARRAY, non-BYTEARRAY case, but that's not the typical case.  The other\n     * exception is controller-based blocks, which may not have any array backing at all.\n     *\n     * @this {MemoryPDP11}\n     * @param {number} [off] (optional starting byte offset within block)\n     * @param {number} [len] (optional maximum number of bytes; default is the entire block)\n     * @param {number} [pattern]\n     */\n    zero(off, len, pattern)\n    {\n        var i;\n        off = off || 0;\n        pattern = (pattern || 0) & 0xff;        // pattern & 0xff wasn't good enough for the Closure Compiler\n        /*\n         * NOTE: If len happens to be larger than the block, that's OK, because we also bounds-check the index.\n         */\n        if (len === undefined) len = this.size;\n\n        if ((TYPEDARRAYS || BYTEARRAYS) && this.ab) {\n            for (i = off; len-- && i < this.ab.length; i++) this.ab[i] = pattern;\n        } else {\n            for (i = off; len-- && i < this.size; i++) this.writeByteDirect(off, pattern, this.addr + off);\n        }\n    }\n\n    /**\n     * setAccess(afn, fDirect)\n     *\n     * The afn parameter should be a 4-entry function table containing two byte handlers and\n     * two word handlers.  See the static afnMemory table for an example.\n     *\n     * If no function table is specified, a default is selected based on the Memory type;\n     * similarly, any undefined entries in the table are filled with default handlers that fall\n     * back to the byte handlers, and if one or both byte handlers are undefined, they default\n     * to handlers that simply ignore the access.\n     *\n     * fDirect indicates that both the default AND the direct handlers should be updated.  Direct\n     * handlers normally match the default handlers, except when \"checked\" handlers are installed;\n     * this allows \"checked\" handlers to know where to dispatch the call after performing checks.\n     * Examples of checks are read/write breakpoints, but it's really up to the Debugger to decide\n     * what the check consists of.\n     *\n     * @this {MemoryPDP11}\n     * @param {Array.<function()>} [afn] function table\n     * @param {boolean} [fDirect] (true to update direct access functions as well; default is true)\n     */\n    setAccess(afn, fDirect)\n    {\n        if (!afn) {\n\n            afn = MemoryPDP11.afnNone;\n        }\n        this.setReadAccess(afn, fDirect);\n        this.setWriteAccess(afn, fDirect);\n    }\n\n    /**\n     * setReadAccess(afn, fDirect)\n     *\n     * @this {MemoryPDP11}\n     * @param {Array.<function()>} afn\n     * @param {boolean} [fDirect]\n     */\n    setReadAccess(afn, fDirect)\n    {\n        if (!fDirect || !this.cReadBreakpoints) {\n            this.readByte = afn[0] || this.readNone;\n            this.readWord = afn[2] || this.readWordDefault;\n        }\n        if (fDirect || fDirect === undefined) {\n            this.readByteDirect = afn[0] || this.readNone;\n            this.readWordDirect = afn[2] || this.readWordDefault;\n        }\n    }\n\n    /**\n     * setWriteAccess(afn, fDirect)\n     *\n     * @this {MemoryPDP11}\n     * @param {Array.<function()>} afn\n     * @param {boolean} [fDirect]\n     */\n    setWriteAccess(afn, fDirect)\n    {\n        if (!fDirect || !this.cWriteBreakpoints) {\n            this.writeByte = !this.fReadOnly && afn[1] || this.writeNone;\n            this.writeWord = !this.fReadOnly && afn[3] || this.writeWordDefault;\n        }\n        if (fDirect || fDirect === undefined) {\n            this.writeByteDirect = afn[1] || this.writeNone;\n            this.writeWordDirect = afn[3] || this.writeWordDefault;\n        }\n    }\n\n    /**\n     * resetReadAccess()\n     *\n     * @this {MemoryPDP11}\n     */\n    resetReadAccess()\n    {\n        this.readByte = this.readByteDirect;\n        this.readWord = this.readWordDirect;\n    }\n\n    /**\n     * resetWriteAccess()\n     *\n     * @this {MemoryPDP11}\n     */\n    resetWriteAccess()\n    {\n        this.writeByte = this.fReadOnly? this.writeNone : this.writeByteDirect;\n        this.writeWord = this.fReadOnly? this.writeWordDefault : this.writeWordDirect;\n    }\n\n    /**\n     * printAddr(sMessage)\n     *\n     * @this {MemoryPDP11}\n     * @param {string} sMessage\n     */\n    printAddr(sMessage)\n    {\n        if (DEBUG && this.dbg && this.dbg.messageEnabled(MessagesPDP11.MEMORY)) {\n            this.dbg.printMessage(sMessage + ' ' + (this.addr != null? ('@' + this.dbg.toStrBase(this.addr)) : '#' + this.id), true);\n        }\n    }\n\n    /**\n     * addBreakpoint(off, fWrite)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {boolean} fWrite\n     */\n    addBreakpoint(off, fWrite)\n    {\n        if (!fWrite) {\n            if (this.cReadBreakpoints++ === 0) {\n                this.setReadAccess(MemoryPDP11.afnChecked, false);\n            }\n            if (DEBUG) this.printAddr(\"read breakpoint added to memory block\");\n        }\n        else {\n            if (this.cWriteBreakpoints++ === 0) {\n                this.setWriteAccess(MemoryPDP11.afnChecked, false);\n            }\n            if (DEBUG) this.printAddr(\"write breakpoint added to memory block\");\n        }\n    }\n\n    /**\n     * removeBreakpoint(off, fWrite)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {boolean} fWrite\n     */\n    removeBreakpoint(off, fWrite)\n    {\n        if (!fWrite) {\n            if (--this.cReadBreakpoints === 0) {\n                this.resetReadAccess();\n                if (DEBUG) this.printAddr(\"all read breakpoints removed from memory block\");\n            }\n\n        }\n        else {\n            if (--this.cWriteBreakpoints === 0) {\n                this.resetWriteAccess();\n                if (DEBUG) this.printAddr(\"all write breakpoints removed from memory block\");\n            }\n\n        }\n    }\n\n    /**\n     * copyBreakpoints(dbg, mem)\n     *\n     * @this {MemoryPDP11}\n     * @param {DebuggerPDP11} [dbg]\n     * @param {MemoryPDP11} [mem] (outgoing MemoryPDP11 block to copy breakpoints from, if any)\n     */\n    copyBreakpoints(dbg, mem)\n    {\n        this.dbg = dbg;\n        this.cReadBreakpoints = this.cWriteBreakpoints = 0;\n        if (mem) {\n            if ((this.cReadBreakpoints = mem.cReadBreakpoints)) {\n                this.setReadAccess(MemoryPDP11.afnChecked, false);\n            }\n            if ((this.cWriteBreakpoints = mem.cWriteBreakpoints)) {\n                this.setWriteAccess(MemoryPDP11.afnChecked, false);\n            }\n        }\n    }\n\n    /**\n     * readNone(off, addr)\n     *\n     * Previously, this always returned 0x00, but the initial memory probe by the COMPAQ DeskPro 386 ROM BIOS\n     * writes 0x0000 to the first word of every 64Kb block in the nearly 16Mb address space it supports, and\n     * if it reads back 0x0000, it will initially think that LOTS of RAM exists, only to be disappointed later\n     * when it performs a more exhaustive memory test, generating unwanted error messages in the process.\n     *\n     * TODO: Determine if we should have separate readByteNone(), readWordNone() and readLongNone() functions\n     * to return 0xff, 0xffff and 0xffffffff|0, respectively.  This seems sufficient for now, as it seems unlikely\n     * that a system would require nonexistent memory locations to return ALL bits set.  However, another factor\n     * is whether or not ODDADDR faults take precedence over NOMEMORY faults; if they do, then we need separate\n     * interfaces.\n     *\n     * Also, I'm reluctant to address that potential issue by simply returning -1, because to date, the above\n     * Memory interfaces have always returned values that are properly masked to 8, 16 or 32 bits, respectively.\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} addr\n     * @return {number}\n     */\n    readNone(off, addr)\n    {\n        if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP11.MEMORY) /* && !off */) {\n            this.dbg.printMessage(\"attempt to read invalid address \" + this.dbg.toStrBase(addr), true);\n        }\n        this.bus.fault(addr, PDP11.CPUERR.NOMEMORY, PDP11.ACCESS.READ);\n        return 0xff;\n    }\n\n    /**\n     * writeNone(off, v, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} v (could be either a byte or word value, since we use the same handler for both kinds of accesses)\n     * @param {number} addr\n     */\n    writeNone(off, v, addr)\n    {\n        if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP11.MEMORY) /* && !off */) {\n            this.dbg.printMessage(\"attempt to write \" + this.dbg.toStrBase(v) + \" to invalid addresses \" + this.dbg.toStrBase(addr), true);\n        }\n        this.bus.fault(addr, PDP11.CPUERR.NOMEMORY, PDP11.ACCESS.WRITE);\n    }\n\n    /**\n     * readWordDefault(off, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} addr\n     * @return {number}\n     */\n    readWordDefault(off, addr)\n    {\n        return this.readByte(off++, addr++) | (this.readByte(off, addr) << 8);\n    }\n\n    /**\n     * writeWordDefault(off, w, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} w\n     * @param {number} addr\n     */\n    writeWordDefault(off, w, addr)\n    {\n        this.writeByte(off++, w & 0xff, addr++);\n        this.writeByte(off, w >> 8, addr);\n    }\n\n    /**\n     * readByteMemory(off, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} addr\n     * @return {number}\n     */\n    readByteMemory(off, addr)\n    {\n        if (BYTEARRAYS) {\n            return this.ab[off];\n        }\n        return ((this.adw[off >> 2] >>> ((off & 0x3) << 3)) & 0xff);\n    }\n\n    /**\n     * readWordMemory(off, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} addr\n     * @return {number}\n     */\n    readWordMemory(off, addr)\n    {\n        if (PDP11.MEMFAULT && (off & 0x1)) {\n            this.bus.fault(addr, PDP11.CPUERR.ODDADDR, PDP11.ACCESS.READ_WORD);\n        }\n        if (BYTEARRAYS) {\n            return this.ab[off] | (this.ab[off + 1] << 8);\n        }\n        var w;\n        var idw = off >> 2;\n        var nShift = (off & 0x3) << 3;\n        var dw = (this.adw[idw] >> nShift);\n        if (nShift < 24) {\n            w = dw & 0xffff;\n        } else {\n            w = (dw & 0xff) | ((this.adw[idw + 1] & 0xff) << 8);\n        }\n        return w;\n        }\n\n    /**\n     * writeByteMemory(off, b, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} b\n     * @param {number} addr\n     */\n    writeByteMemory(off, b, addr)\n    {\n        if (BYTEARRAYS) {\n            this.ab[off] = b;\n        } else {\n            var idw = off >> 2;\n            var nShift = (off & 0x3) << 3;\n            this.adw[idw] = (this.adw[idw] & ~(0xff << nShift)) | (b << nShift);\n        }\n        this.fDirty = true;\n    }\n\n    /**\n     * writeWordMemory(off, w, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} w\n     * @param {number} addr\n     */\n    writeWordMemory(off, w, addr)\n    {\n        if (PDP11.MEMFAULT && (off & 0x1)) {\n            this.bus.fault(addr, PDP11.CPUERR.ODDADDR, PDP11.ACCESS.WRITE_WORD);\n        }\n        if (BYTEARRAYS) {\n            this.ab[off] = (w & 0xff);\n            this.ab[off + 1] = (w >> 8);\n        } else {\n            var idw = off >> 2;\n            var nShift = (off & 0x3) << 3;\n            if (nShift < 24) {\n                this.adw[idw] = (this.adw[idw] & ~(0xffff << nShift)) | (w << nShift);\n            } else {\n                this.adw[idw] = (this.adw[idw] & 0x00ffffff) | (w << 24);\n                idw++;\n                this.adw[idw] = (this.adw[idw] & (0xffffff00|0)) | (w >> 8);\n            }\n        }\n        this.fDirty = true;\n    }\n\n    /**\n     * readByteChecked(off, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} addr\n     * @return {number}\n     */\n    readByteChecked(off, addr)\n    {\n        if (DEBUGGER && this.dbg && this.addr != null) {\n            this.dbg.checkMemoryRead(this.addr + off);\n        }\n        return this.readByteDirect(off, addr);\n    }\n\n    /**\n     * readWordChecked(off, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} addr\n     * @return {number}\n     */\n    readWordChecked(off, addr)\n    {\n        if (DEBUGGER && this.dbg && this.addr != null) {\n            this.dbg.checkMemoryRead(this.addr + off, 2);\n        }\n        return this.readWordDirect(off, addr);\n    }\n\n    /**\n     * writeByteChecked(off, b, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} b\n     * @param {number} addr\n     */\n    writeByteChecked(off, b, addr)\n    {\n        if (DEBUGGER && this.dbg && this.addr != null) {\n            this.dbg.checkMemoryWrite(this.addr + off);\n        }\n        if (this.fReadOnly) this.writeNone(off, b, addr); else this.writeByteDirect(off, b, addr);\n    }\n\n    /**\n     * writeWordChecked(off, w, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} w\n     * @param {number} addr\n     */\n    writeWordChecked(off, w, addr)\n    {\n        if (DEBUGGER && this.dbg && this.addr != null) {\n            this.dbg.checkMemoryWrite(this.addr + off, 2)\n        }\n        if (this.fReadOnly) this.writeNone(off, w, addr); else this.writeWordDirect(off, w, addr);\n    }\n\n    /**\n     * readByteBE(off, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} addr\n     * @return {number}\n     */\n    readByteBE(off, addr)\n    {\n        return this.ab[off];\n    }\n\n    /**\n     * readByteLE(off, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} addr\n     * @return {number}\n     */\n    readByteLE(off, addr)\n    {\n        var b = this.ab[off];\n        if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP11.MEMORY)) {\n            this.dbg.printMessage(\"Memory.readByte(\" + this.dbg.toStrBase(addr) + \"): \" + this.dbg.toStrBase(b), true);\n        }\n        return b;\n    }\n\n    /**\n     * readWordBE(off, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} addr\n     * @return {number}\n     */\n    readWordBE(off, addr)\n    {\n        if (PDP11.MEMFAULT && (off & 0x1)) {\n            this.bus.fault(addr, PDP11.CPUERR.ODDADDR, PDP11.ACCESS.READ_WORD);\n        }\n        return this.dv.getUint16(off, true);\n    }\n\n    /**\n     * readWordLE(off, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} addr\n     * @return {number}\n     */\n    readWordLE(off, addr)\n    {\n        var w;\n        if (PDP11.MEMFAULT && (off & 0x1)) {\n            this.bus.fault(addr, PDP11.CPUERR.ODDADDR, PDP11.ACCESS.READ_WORD);\n        }\n        /*\n         * TODO: For non-WORDBUS machines, it remains to be seen if there's any advantage to checking the offset\n         * for an aligned read vs. always reading the bytes separately.\n         */\n        if (PDP11.WORDBUS || !(off & 0x1)) {\n            w = this.aw[off >> 1];\n        } else {\n            w = this.ab[off] | (this.ab[off+1] << 8);\n        }\n        if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP11.MEMORY)) {\n            this.dbg.printMessage(\"Memory.readWord(\" + this.dbg.toStrBase(addr) + \"): \" + this.dbg.toStrBase(w), true);\n        }\n        return w;\n    }\n\n    /**\n     * writeByteBE(off, b, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} b\n     * @param {number} addr\n     */\n    writeByteBE(off, b, addr)\n    {\n        this.ab[off] = b;\n        this.fDirty = true;\n    }\n\n    /**\n     * writeByteLE(off, b, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} b\n     * @param {number} addr\n     */\n    writeByteLE(off, b, addr)\n    {\n        this.ab[off] = b;\n        this.fDirty = true;\n        if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP11.MEMORY)) {\n            this.dbg.printMessage(\"Memory.writeByte(\" + this.dbg.toStrBase(addr) + \",\" + this.dbg.toStrBase(b) + \")\", true);\n        }\n    }\n\n    /**\n     * writeWordBE(off, w, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} w\n     * @param {number} addr\n     */\n    writeWordBE(off, w, addr)\n    {\n        if (PDP11.MEMFAULT && (off & 0x1)) {\n            this.bus.fault(addr, PDP11.CPUERR.ODDADDR, PDP11.ACCESS.WRITE_WORD);\n        }\n        this.dv.setUint16(off, w, true);\n        this.fDirty = true;\n    }\n\n    /**\n     * writeWordLE(off, w, addr)\n     *\n     * @this {MemoryPDP11}\n     * @param {number} off\n     * @param {number} w\n     * @param {number} addr\n     */\n    writeWordLE(off, w, addr)\n    {\n        if (PDP11.MEMFAULT && (off & 0x1)) {\n            this.bus.fault(addr, PDP11.CPUERR.ODDADDR, PDP11.ACCESS.WRITE_WORD);\n        }\n        /*\n         * TODO: For non-WORDBUS machines, it remains to be seen if there's any advantage to checking the offset\n         * for an aligned write vs. always writing the bytes separately.\n         */\n        if (PDP11.WORDBUS || !(off & 0x1)) {\n            this.aw[off >> 1] = w;\n        } else {\n            this.ab[off] = w;\n            this.ab[off+1] = w >> 8;\n        }\n        this.fDirty = true;\n        if (DEBUGGER && this.dbg && this.dbg.messageEnabled(MessagesPDP11.MEMORY)) {\n            this.dbg.printMessage(\"Memory.writeWord(\" + this.dbg.toStrBase(addr) + \",\" + this.dbg.toStrBase(w) + \")\", true);\n        }\n    }\n}\n\n/*\n * Basic memory types\n *\n * RAM is the most conventional memory type, providing full read/write capability to x86-compatible (ie,\n * 'little endian\") storage.  ROM is equally conventional, except that the fReadOnly property is set,\n * disabling writes.  VIDEO is treated exactly like RAM, unless a controller is provided.  Both RAM and\n * VIDEO memory are always considered writable, and even ROM can be written using the Bus setByteDirect()\n * interface (which in turn uses the Memory writeByteDirect() interface), allowing the ROM component to\n * initialize its own memory.  The CONTROLLER type is used to identify memory-mapped devices that do not\n * need any default storage and always provide their own controller.\n *\n * Unallocated regions of the address space contain a special memory block of type NONE that contains\n * no storage.  Mapping every addressible location to a memory block allows all accesses to be routed in\n * exactly the same manner, without resorting to any range or processor checks.\n *\n * These types are not mutually exclusive.  For example, VIDEO memory could be allocated as RAM, with or\n * without a custom controller (the original Monochrome and CGA video cards used read/write storage that\n * was indistinguishable from RAM), and CONTROLLER memory could be allocated as an empty block of any type,\n * with a custom controller.  A few types are required for certain features (eg, ROM is required if you want\n * read-only memory), but the larger purpose of these types is to help document the caller's intent and to\n * provide the Control Panel with the ability to highlight memory regions accordingly.\n */\nMemoryPDP11.TYPE = {\n    NONE:       0,\n    RAM:        1,\n    ROM:        2,\n    VIDEO:      3,\n    CONTROLLER: 4\n};\nMemoryPDP11.TYPE_COLORS = [\"black\", \"blue\", \"green\", \"cyan\"];\nMemoryPDP11.TYPE_NAMES  = [\"NONE\",  \"RAM\",  \"ROM\",   \"VID\",  \"H/W\"];\n\n/*\n * Last used block ID (used for debugging only)\n */\nMemoryPDP11.idBlock = 0;\n\n/*\n * This is the effective definition of afnNone, but we need not fully define it, because setAccess()\n * uses these defaults when any of the 4 handlers (ie, 2 byte handlers and 2 word handlers) are undefined.\n *\nMemoryPDP11.afnNone = [\n    MemoryPDP11.prototype.readNone,\n    MemoryPDP11.prototype.writeNone,\n    MemoryPDP11.prototype.readWordDefault,\n    MemoryPDP11.prototype.writeWordDefault\n];\n */\nMemoryPDP11.afnNone = [];\n\nMemoryPDP11.afnMemory = [\n    MemoryPDP11.prototype.readByteMemory,\n    MemoryPDP11.prototype.writeByteMemory,\n    MemoryPDP11.prototype.readWordMemory,\n    MemoryPDP11.prototype.writeWordMemory\n];\n\nMemoryPDP11.afnChecked = [\n    MemoryPDP11.prototype.readByteChecked,\n    MemoryPDP11.prototype.writeByteChecked,\n    MemoryPDP11.prototype.readWordChecked,\n    MemoryPDP11.prototype.writeWordChecked\n];\n\nif (TYPEDARRAYS) {\n    MemoryPDP11.afnArrayBE = [\n        MemoryPDP11.prototype.readByteBE,\n        MemoryPDP11.prototype.writeByteBE,\n        MemoryPDP11.prototype.readWordBE,\n        MemoryPDP11.prototype.writeWordBE\n    ];\n\n    MemoryPDP11.afnArrayLE = [\n        MemoryPDP11.prototype.readByteLE,\n        MemoryPDP11.prototype.writeByteLE,\n        MemoryPDP11.prototype.readWordLE,\n        MemoryPDP11.prototype.writeWordLE\n    ];\n}\n\nvar littleEndian = (TYPEDARRAYS? (function() {\n    var buffer = new ArrayBuffer(2);\n    new DataView(buffer).setUint16(0, 256, true);\n    return new Uint16Array(buffer)[0] === 256;\n})() : false);\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/cpu.js (C) Jeff Parsons 2012-2018\n */\n\n\nclass CPUPDP11 extends Component {\n    /**\n     * CPUPDP11(parmsCPU, nCyclesDefault)\n     *\n     * The CPUPDP11 class supports the following (parmsCPU) properties:\n     *\n     *      cycles: the machine's base cycles per second; the CPUStatePDP11 constructor\n     *      will provide us with a default (based on the CPU model) to use as a fallback.\n     *\n     *      multiplier: base cycle multiplier; default is 1.\n     *\n     *      autoStart: true to automatically start, false to not, or null if \"it depends\";\n     *      null is the default, which means do not autostart UNLESS there is no Debugger\n     *      and no \"Run\" button (ie, no way to manually start the machine).\n     *\n     *      csStart: the number of cycles that runCPU() must wait before generating\n     *      checksum records; -1 if disabled. checksum records are a diagnostic aid\n     *      used to help compare one CPU run to another.\n     *\n     *      csInterval: the number of cycles that runCPU() must execute before generating\n     *      a checksum record; -1 if disabled.\n     *\n     *      csStop: the number of cycles to stop generating checksum records.\n     *\n     * This component is primarily responsible for interfacing the CPU with the outside\n     * world (eg, Panel and Debugger components), and managing overall CPU operation.\n     *\n     * It is extended by the CPUStatePDP11 component, where the simulation control logic resides.\n     *\n     * @param {Object} parmsCPU\n     * @param {number} nCyclesDefault\n     */\n    constructor(parmsCPU, nCyclesDefault)\n    {\n        super(\"CPU\", parmsCPU, MessagesPDP11.CPU);\n\n        var nCycles = +parmsCPU['cycles'] || nCyclesDefault;\n\n        var nMultiplier = +parmsCPU['multiplier'] || 1;\n\n        this.nDisplayCount = 0;\n        this.nDisplayLimit = 30;\n        this.nCyclesPerSecond = nCycles;\n\n        /*\n         * nCyclesMultiplier replaces the old \"speed\" variable (0, 1, 2) and eliminates the need for\n         * the constants (SPEED_SLOW, SPEED_FAST and SPEED_MAX).  The UI simply doubles the multiplier\n         * until we've exceeded the host's speed limit and then starts the multiplier over at 1.\n         */\n        this.nCyclesMultiplier = nMultiplier;\n        this.mhzDefault = Math.round(this.nCyclesPerSecond / 10000) / 100;\n        this.mhzTarget = this.mhzDefault * this.nCyclesMultiplier;\n        this.msPerYield = this.nCyclesPerYield = this.nCyclesNextYield = this.nCyclesRecalc = 0;\n\n        /*\n         * We add a number of flags to the set initialized by Component\n         */\n        this.flags.running = this.flags.starting = false;\n        this.flags.autoStart = parmsCPU['autoStart'];\n        if (typeof this.flags.autoStart == \"string\") this.flags.autoStart = (this.flags.autoStart == \"true\");\n\n        /*\n         * Get checksum parameters, if any. runCPU() behavior is not affected until fChecksum\n         * is true, which won't happen until resetChecksum() is called with nCyclesChecksumInterval\n         * (\"csInterval\") set to a positive value.\n         *\n         * As above, any of these parameters can also be set with the Debugger's execution options\n         * command (\"x\"); for example, \"x cs int 5000\" will set nCyclesChecksumInterval to 5000\n         * and call resetChecksum().\n         */\n        this.flags.checksum = false;\n        this.nChecksum = this.nCyclesChecksumNext = 0;\n        this.nCyclesChecksumStart = +parmsCPU[\"csStart\"];\n        this.nCyclesChecksumInterval = +parmsCPU[\"csInterval\"];\n        this.nCyclesChecksumStop = +parmsCPU[\"csStop\"];\n\n        /*\n         * Array of countdown timers managed by addTimer() and setTimer().\n         */\n        this.aTimers = [];\n\n        this.onRunTimeout = this.runCPU.bind(this); // function onRunTimeout() { cpu.runCPU(); };\n\n        /*\n         * Define the rest of the properties used by the class\n         */\n        this.mhz = 0;\n        this.nYieldsSinceStatusUpdate = 0;\n        this.msStartRun = this.msStartThisRun = this.msEndThisRun = this.nCyclesThisRun = 0;\n        this.nTotalCycles = this.nRunCycles = this.nBurstCycles = this.nStepCycles = this.nSnapCycles = 0;\n        this.panel = null;\n\n        this.setReady();\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * @this {CPUPDP11}\n     * @param {ComputerPDP11} cmp\n     * @param {BusPDP11} bus\n     * @param {CPUPDP11} cpu\n     * @param {DebuggerPDP11} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.cmp = cmp;\n        this.bus = bus;\n        this.dbg = dbg;\n        this.panel = cmp.panel;\n        for (var i = 0; i < CPUPDP11.BUTTONS.length; i++) {\n            var control = this.bindings[CPUPDP11.BUTTONS[i]];\n            if (control) this.cmp.setBinding(null, CPUPDP11.BUTTONS[i], control);\n        }\n        this.setReady();\n    }\n\n    /**\n     * reset()\n     *\n     * Stub for reset notification (overridden by the CPUStatePDP11 component).\n     *\n     * @this {CPUPDP11}\n     */\n    reset()\n    {\n    }\n\n    /**\n     * save()\n     *\n     * Stub for save support (overridden by the CPUStatePDP11 component).\n     *\n     * @this {CPUPDP11}\n     * @return {Object|null}\n     */\n    save()\n    {\n        return null;\n    }\n\n    /**\n     * restore(data)\n     *\n     * Stub for restore support (overridden by the CPUStatePDP11 component).\n     *\n     * @this {CPUPDP11}\n     * @param {Object} data\n     * @return {boolean} true if restore successful, false if not\n     */\n    restore(data)\n    {\n        return false;\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {CPUPDP11}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        /*\n         * We've already saved the parmsCPU 'autoStart' setting, but there may be a machine (or URL) override.\n         */\n        var sAutoStart = this.cmp.getMachineParm('autoStart');\n        if (sAutoStart != null) {\n            this.flags.autoStart = (sAutoStart == \"true\"? true : (sAutoStart  == \"false\"? false : !!sAutoStart));\n        }\n        else if (this.flags.autoStart == null) {\n            /*\n             * If there's no explicit parmsCPU setting either, then we will autoStart if there's no Debugger and\n             * no \"Run\" button.\n             */\n            this.flags.autoStart = ((!DEBUGGER || !this.dbg) && this.bindings[\"run\"] === undefined);\n        }\n\n        if (!fRepower) {\n            if (!data) {\n                this.reset();\n            } else {\n                this.resetCycles();\n                if (!this.restore(data)) return false;\n                this.resetChecksum();\n            }\n            /*\n             * Give the Debugger a chance to do/print something once we've powered up.\n             */\n            if (DEBUGGER && this.dbg) {\n                this.dbg.init(this.flags.autoStart);\n            } else {\n                this.status(\"No debugger detected\");\n            }\n            if (!this.flags.autoStart) {\n                this.println(\"CPU will not be auto-started \" + (this.panel? \"(click Run to start)\" : \"(type 'go' to start)\"));\n            }\n        }\n        /*\n         * The Computer component (which is responsible for all powerDown and powerUp notifications)\n         * is now responsible for managing a component's fPowered flag, not us.\n         *\n         *      this.flags.powered = true;\n         */\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {CPUPDP11}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        return fSave? this.save() : true;\n    }\n\n    /**\n     * autoStart()\n     *\n     * @this {CPUPDP11}\n     * @return {boolean} true if started, false if not\n     */\n    autoStart()\n    {\n        if (this.flags.running) {\n            return true;\n        }\n        if (this.flags.autoStart) {\n            /*\n             * We used to also set fUpdateFocus when calling startCPU(), on the assumption that in the \"auto-starting\"\n             * context, a machine without focus is like a day without sunshine, but in reality, focus should only be\n             * forced when the user takes some other machine-related action.\n             */\n            return this.startCPU();\n        }\n        return false;\n    }\n\n    /**\n     * isPowered()\n     *\n     * @this {CPUPDP11}\n     * @return {boolean}\n     */\n    isPowered()\n    {\n        if (!this.flags.powered) {\n            this.println(this.toString() + \" not powered\");\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * isRunning()\n     *\n     * @this {CPUPDP11}\n     * @return {boolean}\n     */\n    isRunning()\n    {\n        return this.flags.running;\n    }\n\n    /**\n     * getChecksum()\n     *\n     * This will be implemented by the CPUStatePDP11 component.\n     *\n     * @this {CPUPDP11}\n     * @return {number} a 32-bit summation of key elements of the current CPU state (used by the CPU checksum code)\n     */\n    getChecksum()\n    {\n        return 0;\n    }\n\n    /**\n     * resetChecksum()\n     *\n     * If checksum generation is enabled (fChecksum is true), this resets the running 32-bit checksum and the\n     * cycle counter that will trigger the next displayChecksum(); called by resetCycles(), which is called whenever\n     * the CPU is reset or restored.\n     *\n     * @this {CPUPDP11}\n     * @return {boolean} true if checksum generation enabled, false if not\n     */\n    resetChecksum()\n    {\n        if (this.nCyclesChecksumStart === undefined) this.nCyclesChecksumStart = 0;\n        if (this.nCyclesChecksumInterval === undefined) this.nCyclesChecksumInterval = -1;\n        if (this.nCyclesChecksumStop === undefined) this.nCyclesChecksumStop = -1;\n        this.flags.checksum = (this.nCyclesChecksumStart >= 0 && this.nCyclesChecksumInterval > 0);\n        if (this.flags.checksum) {\n            this.nChecksum = 0;\n            this.nCyclesChecksumNext = this.nCyclesChecksumStart - this.nTotalCycles;\n            /*\n             *  this.nCyclesChecksumNext = this.nCyclesChecksumStart + this.nCyclesChecksumInterval -\n             *      (this.nTotalCycles % this.nCyclesChecksumInterval);\n             */\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * updateChecksum(nCycles)\n     *\n     * When checksum generation is enabled (fChecksum is true), runCPU() asks stepCPU() to execute a minimum\n     * number of cycles (1), effectively limiting execution to a single instruction, and then we're called with\n     * the exact number cycles that were actually executed.  This should give us instruction-granular checksums\n     * at precise intervals that are 100% repeatable.\n     *\n     * @this {CPUPDP11}\n     * @param {number} nCycles\n     */\n    updateChecksum(nCycles)\n    {\n        if (this.flags.checksum) {\n            /*\n             * Get a 32-bit summation of the current CPU state and add it to our running 32-bit checksum\n             */\n            var fDisplay = false;\n            this.nChecksum = (this.nChecksum + this.getChecksum())|0;\n            this.nCyclesChecksumNext -= nCycles;\n            if (this.nCyclesChecksumNext <= 0) {\n                this.nCyclesChecksumNext += this.nCyclesChecksumInterval;\n                fDisplay = true;\n            }\n            if (this.nCyclesChecksumStop >= 0) {\n                if (this.nCyclesChecksumStop <= this.getCycles()) {\n                    this.nCyclesChecksumInterval = this.nCyclesChecksumStop = -1;\n                    this.resetChecksum();\n                    this.stopCPU();\n                    fDisplay = true;\n                }\n            }\n            if (fDisplay) this.displayChecksum();\n        }\n    }\n\n    /**\n     * displayChecksum()\n     *\n     * When checksum generation is enabled (fChecksum is true), this is called to provide a crude log of all\n     * checksums generated at the specified cycle intervals, as specified by the \"csStart\" and \"csInterval\" parmsCPU\n     * properties).\n     *\n     * @this {CPUPDP11}\n     */\n    displayChecksum()\n    {\n        this.println(this.getCycles() + \" cycles: \" + \"checksum=\" + Str.toHex(this.nChecksum));\n    }\n\n    /**\n     * setBinding(sType, sBinding, control, sValue)\n     *\n     * @this {CPUPDP11}\n     * @param {string|null} sType is the type of the HTML control (eg, \"button\", \"textarea\", \"register\", \"flag\", \"rled\", etc)\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"run\")\n     * @param {HTMLElement} control is the HTML control DOM object (eg, HTMLButtonElement)\n     * @param {string} [sValue] optional data value\n     * @return {boolean} true if binding was successful, false if unrecognized binding request\n     */\n    setBinding(sType, sBinding, control, sValue)\n    {\n        var cpu = this;\n\n        switch (sBinding) {\n        case \"power\":\n        case \"reset\":\n            /*\n             * The \"power\" and \"reset\" buttons are functions of the entire computer, not just the CPU,\n             * but it's not always convenient to stick a power button in the Computer component definition,\n             * so we record those bindings here and pass them on to the Computer component in initBus().\n             */\n            this.bindings[sBinding] = control;\n            return true;\n\n        case \"run\":\n            this.bindings[sBinding] = control;\n            control.onclick = function onClickRun() {\n                if (!cpu.cmp || !cpu.cmp.checkPower()) return;\n                /*\n                 * We no longer pass true to these startCPU()/stopCPU() calls, on the theory that if the \"run\"\n                 * control is visible, then the computer is probably sufficiently visible as well; the problem\n                 * with setting fUpdateFocus to true is that it can jerk the web page around in annoying ways.\n                 */\n                if (!cpu.flags.running)\n                    cpu.startCPU();\n                else\n                    cpu.stopCPU();\n            };\n            return true;\n\n        case \"speed\":\n            this.bindings[sBinding] = control;\n            return true;\n\n        case \"setSpeed\":\n            this.bindings[sBinding] = control;\n            control.onclick = function onClickSetSpeed() {\n                cpu.setSpeed(cpu.nCyclesMultiplier << 1, true);\n            };\n            control.textContent = this.getSpeedTarget();\n            return true;\n\n        default:\n            break;\n        }\n        return false;\n    }\n\n    /**\n     * updateDisplays(nUpdate)\n     *\n     * Simpler wrapper around the Computer's updateDisplays() method.\n     *\n     * @this {CPUPDP11}\n     * @param {number} [nUpdate] (1 for periodic, -1 for forced, 0 or undefined otherwise)\n     */\n    updateDisplays(nUpdate)\n    {\n        if (this.cmp) this.cmp.updateDisplays(nUpdate);\n    }\n\n    /**\n     * updateDisplay(nUpdate)\n     *\n     * Some of the CPU bindings provide feedback and therefore need to be updated periodically.\n     * However, this should be called via the Computer's updateDisplays() interface, not directly.\n     *\n     * @this {CPUPDP11}\n     * @param {number} [nUpdate] (1 for periodic, -1 for forced, 0 otherwise)\n     */\n    updateDisplay(nUpdate)\n    {\n        var controlSpeed = this.bindings[\"speed\"];\n        if (controlSpeed) {\n            if (nUpdate <= 0 || (this.nDisplayCount += nUpdate) >= this.nDisplayLimit) {\n                controlSpeed.textContent = this.getSpeedCurrent();\n                this.nDisplayCount = 0;\n            }\n        }\n    }\n\n    /**\n     * addCycles(nCycles, fEndStep)\n     *\n     * @this {CPUPDP11}\n     * @param {number} nCycles\n     * @param {boolean} [fEndStep]\n     */\n    addCycles(nCycles, fEndStep)\n    {\n        this.nTotalCycles += nCycles;\n        if (fEndStep) {\n            this.nBurstCycles = this.nStepCycles = this.nSnapCycles = 0;\n        }\n    }\n\n    /**\n     * calcCycles(fRecalc)\n     *\n     * Calculate the number of cycles to process for each \"burst\" of CPU activity.  The size of a burst\n     * is driven by YIELDS_PER_SECOND (eg, 30).\n     *\n     * At the end of each burst, we subtract burst cycles from the yield cycle \"threshold\" counter.\n     * Whenever the \"next yield\" cycle counter goes to (or below) zero, we compare elapsed time to the time\n     * we expected the virtual hardware to take (eg, 1000ms/50 or 20ms), and if we still have time remaining,\n     * we sleep the remaining time (or 0ms if there's no remaining time), and then restart runCPU().\n     *\n     * @this {CPUPDP11}\n     * @param {boolean} [fRecalc] is true if the caller wants to recalculate thresholds based on the most recent\n     * speed calculation (see calcSpeed).\n     */\n    calcCycles(fRecalc)\n    {\n        /*\n         * Calculate \"per\" yield values.\n         */\n        var vMultiplier = 1;\n        if (fRecalc) {\n            if (this.nCyclesMultiplier > 1 && this.mhz) {\n                vMultiplier = (this.mhz / this.mhzDefault);\n            }\n        }\n\n        this.msPerYield = Math.round(1000 / CPUPDP11.YIELDS_PER_SECOND);\n        this.nCyclesPerYield = Math.floor(this.nCyclesPerSecond / CPUPDP11.YIELDS_PER_SECOND * vMultiplier);\n\n        /*\n         * And initialize \"next\" yield values to the \"per\" values.\n         */\n        if (!fRecalc) this.nCyclesNextYield = this.nCyclesPerYield;\n        this.nCyclesRecalc = 0;\n    }\n\n    /**\n     * getCycles(fScaled)\n     *\n     * getCycles() returns the number of cycles executed so far.  Note that we can be called after\n     * runCPU() OR during runCPU(), perhaps from a handler triggered during the current run's stepCPU(),\n     * so nRunCycles must always be adjusted by number of cycles stepCPU() was asked to run (nBurstCycles),\n     * less the number of cycles it has yet to run (nStepCycles).\n     *\n     * nRunCycles is zeroed whenever the CPU is halted or the CPU speed is changed, which is why we also\n     * have nTotalCycles, which accumulates all nRunCycles before we zero it.  However, nRunCycles and\n     * nTotalCycles eventually get reset by calcSpeed(), to avoid overflow, so components that rely on\n     * getCycles() returning steadily increasing values should also be prepared for a reset at any time.\n     *\n     * @this {CPUPDP11}\n     * @param {boolean} [fScaled] is true if the caller wants a cycle count relative to a multiplier of 1\n     * @return {number}\n     */\n    getCycles(fScaled)\n    {\n        var nCycles = this.nTotalCycles + this.nRunCycles + this.nBurstCycles - this.nStepCycles;\n        if (fScaled && this.nCyclesMultiplier > 1 && this.mhz > this.mhzDefault) {\n            /*\n             * We could scale the current cycle count by the current effective speed (this.mhz); eg:\n             *\n             *      nCycles = Math.round(nCycles / (this.mhz / this.mhzDefault));\n             *\n             * but that speed will fluctuate somewhat: large fluctuations at first, but increasingly smaller\n             * fluctuations after each burst of instructions that runCPU() executes.\n             *\n             * Alternatively, we can scale the cycle count by the multiplier, which is good in that the\n             * multiplier doesn't vary once the user changes it, but a potential downside is that the\n             * multiplier might be set too high, resulting in a target speed that's higher than the effective\n             * speed is able to reach.\n             *\n             * Also, if multipliers were always limited to a power-of-two, then this could be calculated\n             * with a simple shift.  However, only the \"setSpeed\" UI binding limits it that way; the Debugger\n             * interface allows any value, as does the CPU \"multiplier\" parmsCPU property (from the machine's\n             * XML file).\n             */\n            nCycles = Math.round(nCycles / this.nCyclesMultiplier);\n        }\n        return nCycles;\n    }\n\n    /**\n     * getCyclesPerSecond()\n     *\n     * This returns the CPU's \"base\" speed (ie, the original cycles per second defined for the machine)\n     *\n     * @this {CPUPDP11}\n     * @return {number}\n     */\n    getCyclesPerSecond()\n    {\n        return this.nCyclesPerSecond;\n    }\n\n    /**\n     * resetCycles()\n     *\n     * Resets speed and cycle information as part of any reset() or restore(); this typically occurs during powerUp().\n     * It's important that this be called BEFORE the actual restore() call, because restore() may want to call setSpeed(),\n     * which in turn assumes that all the cycle counts have been initialized to sensible values.\n     *\n     * @this {CPUPDP11}\n     */\n    resetCycles()\n    {\n        this.mhz = 0;\n        this.nYieldsSinceStatusUpdate = 0;\n        this.nTotalCycles = this.nRunCycles = this.nBurstCycles = this.nStepCycles = this.nSnapCycles = 0;\n        this.resetChecksum();\n        this.setSpeed(1);\n    }\n\n    /**\n     * getSpeed()\n     *\n     * @this {CPUPDP11}\n     * @return {number} the current speed multiplier\n     */\n    getSpeed()\n    {\n        return this.nCyclesMultiplier;\n    }\n\n    /**\n     * getSpeedCurrent()\n     *\n     * @this {CPUPDP11}\n     * @return {string} the current speed, in mhz, as a string formatted to two decimal places\n     */\n    getSpeedCurrent()\n    {\n        /*\n         * TODO: Has toFixed() been \"fixed\" in all browsers (eg, IE) to return a rounded value now?\n         */\n        return ((this.flags.running)? (this.mhz.toFixed(2) + \"Mhz\") : \"Stopped\");\n    }\n\n    /**\n     * getSpeedTarget()\n     *\n     * @this {CPUPDP11}\n     * @return {string} the target speed, in mhz, as a string formatted to two decimal places\n     */\n    getSpeedTarget()\n    {\n        /*\n         * TODO: Has toFixed() been \"fixed\" in all browsers (eg, IE) to return a rounded value now?\n         */\n        return this.mhzTarget.toFixed(2) + \"Mhz\";\n    }\n\n    /**\n     * setSpeed(nMultiplier, fUpdateFocus)\n     *\n     * NOTE: This used to return the target speed, in mhz, but no callers appear to care at this point.\n     *\n     * @desc Whenever the speed is changed, the running cycle count and corresponding start time must be reset,\n     * so that the next effective speed calculation obtains sensible results.  In fact, when runCPU() initially calls\n     * setSpeed() with no parameters, that's all this function does (it doesn't change the current speed setting).\n     *\n     * @this {CPUPDP11}\n     * @param {number} [nMultiplier] is the new proposed multiplier (reverts to 1 if the target was too high)\n     * @param {boolean} [fUpdateFocus] is true to update Computer focus\n     * @return {boolean} true if successful, false if not\n     */\n    setSpeed(nMultiplier, fUpdateFocus)\n    {\n        var fSuccess = false;\n        if (nMultiplier !== undefined) {\n            /*\n             * If we haven't reached 80% (0.8) of the current target speed, revert to a multiplier of one (1).\n             */\n            if (this.mhz / this.mhzTarget < 0.8) {\n                nMultiplier = 1;\n            } else {\n                fSuccess = true;\n            }\n            this.nCyclesMultiplier = nMultiplier;\n            var mhz = this.mhzDefault * this.nCyclesMultiplier;\n            if (this.mhzTarget != mhz) {\n                this.mhzTarget = mhz;\n                var sSpeed = this.getSpeedTarget();\n                var controlSpeed = this.bindings[\"setSpeed\"];\n                if (controlSpeed) controlSpeed.textContent = sSpeed;\n                this.println(\"target speed: \" + sSpeed);\n            }\n            if (fUpdateFocus && this.cmp) this.cmp.setFocus();\n        }\n        this.addCycles(this.nRunCycles);\n        this.nRunCycles = 0;\n        this.msStartRun = Component.getTime();\n        this.msEndThisRun = 0;\n        this.calcCycles();\n        return fSuccess;\n    }\n\n    /**\n     * calcSpeed(nCycles, msElapsed)\n     *\n     * @this {CPUPDP11}\n     * @param {number} nCycles\n     * @param {number} msElapsed\n     */\n    calcSpeed(nCycles, msElapsed)\n    {\n        if (msElapsed) {\n            this.mhz = Math.round(nCycles / (msElapsed * 10)) / 100;\n            if (msElapsed >= 86400000) {\n                this.nTotalCycles = 0;\n                this.setSpeed();        // reset all counters once per day so that we never have to worry about overflow\n            }\n        }\n    }\n\n    /**\n     * calcStartTime()\n     *\n     * @this {CPUPDP11}\n     */\n    calcStartTime()\n    {\n        if (this.nCyclesRecalc >= this.nCyclesPerSecond) {\n            this.calcCycles(true);\n        }\n        this.nCyclesThisRun = 0;\n        this.msStartThisRun = Component.getTime();\n\n        /*\n         * Try to detect situations where the browser may have throttled us, such as when the user switches\n         * to a different tab; in those situations, Chrome and Safari may restrict setTimeout() callbacks\n         * to roughly one per second.\n         *\n         * Another scenario: the user resizes the browser window.  setTimeout() callbacks are not throttled,\n         * but there can still be enough of a lag between the callbacks that CPU speed will be noticeably\n         * erratic if we don't compensate for it here.\n         *\n         * We can detect throttling/lagging by verifying that msEndThisRun (which was set at the end of the\n         * previous run and includes any requested sleep time) is comparable to the current msStartThisRun;\n         * if the delta is significant, we compensate by bumping msStartRun forward by that delta.\n         *\n         * This shouldn't be triggered when the Debugger halts the CPU, because setSpeed() -- which is called\n         * whenever the CPU starts running again -- zeroes msEndThisRun.\n         *\n         * This also won't do anything about other internal delays; for example, Debugger message() calls.\n         * By the time the message() function has called yieldCPU(), the cost of the message has already been\n         * incurred, so it will be end up being charged against the instruction(s) that triggered it.\n         *\n         * TODO: Consider calling yieldCPU() sooner from message(), so that it can arrange for the msEndThisRun\n         * \"snapshot\" to occur sooner; it's unclear, however, whether that will really improve the CPU's ability\n         * to hit its target speed, since you would expect any instruction that displays a message to be an\n         * EXTREMELY slow instruction.\n         */\n        if (this.msEndThisRun) {\n            var msDelta = this.msStartThisRun - this.msEndThisRun;\n            if (msDelta > this.msPerYield) {\n                if (MAXDEBUG) this.println(\"large time delay: \" + msDelta + \"ms\");\n                this.msStartRun += msDelta;\n                /*\n                 * Bumping msStartRun forward should NEVER cause it to exceed msStartThisRun; however, just\n                 * in case, I make absolutely sure it cannot happen, since doing so could result in negative\n                 * speed calculations.\n                 */\n\n                if (this.msStartRun > this.msStartThisRun) {\n                    this.msStartRun = this.msStartThisRun;\n                }\n            }\n        }\n    }\n\n    /**\n     * calcRemainingTime()\n     *\n     * @this {CPUPDP11}\n     * @return {number}\n     */\n    calcRemainingTime()\n    {\n        this.msEndThisRun = Component.getTime();\n\n        var msYield = this.msPerYield;\n        if (this.nCyclesThisRun) {\n            /*\n             * Normally, we would assume we executed a full quota of work over msPerYield, but since the CPU\n             * now has the option of calling yieldCPU(), that might not be true.  If nCyclesThisRun is correct, then\n             * the ratio of nCyclesThisRun/nCyclesPerYield should represent the percentage of work we performed,\n             * and so applying that percentage to msPerYield should give us a better estimate of work vs. time.\n             */\n            msYield = Math.round(msYield * this.nCyclesThisRun / this.nCyclesPerYield);\n        }\n\n        var msElapsedThisRun = this.msEndThisRun - this.msStartThisRun;\n        var msRemainsThisRun = msYield - msElapsedThisRun;\n\n        /*\n         * We could pass only \"this run\" results to calcSpeed():\n         *\n         *      nCycles = this.nCyclesThisRun;\n         *      msElapsed = msElapsedThisRun;\n         *\n         * but it seems preferable to use longer time periods and hopefully get a more accurate speed.\n         *\n         * Also, if msRemainsThisRun >= 0 && this.nCyclesMultiplier == 1, we could pass these results instead:\n         *\n         *      nCycles = this.nCyclesThisRun;\n         *      msElapsed = this.msPerYield;\n         *\n         * to insure that we display a smooth, constant N Mhz.  But for now, I prefer seeing any fluctuations.\n         */\n        var nCycles = this.nRunCycles;\n        var msElapsed = this.msEndThisRun - this.msStartRun;\n\n        if (MAXDEBUG && msRemainsThisRun < 0 && this.nCyclesMultiplier > 1) {\n            this.println(\"warning: updates @\" + msElapsedThisRun + \"ms (prefer \" + Math.round(msYield) + \"ms)\");\n        }\n\n        this.calcSpeed(nCycles, msElapsed);\n\n        if (msRemainsThisRun < 0 || this.mhz < this.mhzTarget) {\n            /*\n             * Try \"throwing out\" the effects of large anomalies, by moving the overall run start time up;\n             * ordinarily, this should only happen when the someone is using an external Debugger or some other\n             * tool or feature that is interfering with our overall execution.\n             */\n            if (msRemainsThisRun < -1000) {\n                this.msStartRun -= msRemainsThisRun;\n            }\n            /*\n             * If the last burst took MORE time than we allotted (ie, it's taking more than 1 second to simulate\n             * nCyclesPerSecond), all we can do is yield for as little time as possible (ie, 0ms) and hope that the\n             * simulation is at least usable.\n             */\n            msRemainsThisRun = 0;\n        }\n\n        /*\n         * Last but not least, update nCyclesRecalc, so that when runCPU() starts up again and calls calcStartTime(),\n         * it'll be ready to decide if calcCycles() should be called again.\n         */\n        this.nCyclesRecalc += this.nCyclesThisRun;\n\n        if (DEBUG && this.messageEnabled(MessagesPDP11.BUFFER) && msRemainsThisRun) {\n            this.log(\"calcRemainingTime: \" + msRemainsThisRun + \"ms to sleep after \" + this.msEndThisRun + \"ms\");\n        }\n\n        this.msEndThisRun += msRemainsThisRun;\n        return msRemainsThisRun;\n    }\n\n    /**\n     * addTimer(callBack)\n     *\n     * Components that want to have timers that periodically fire after some number of milliseconds call\n     * addTimer() to create the timer, and then setTimer() every time they want to arm it.  There is currently\n     * no removeTimer() because these are generally used for the entire lifetime of a component.\n     *\n     * Internally, each timer entry is a preallocated Array with two entries: a cycle countdown in element [0]\n     * and a callback function in element [1].  A timer is initially dormant; dormant timers have a countdown\n     * value of -1 (although any negative number will suffice) and active timers have a non-negative value.\n     *\n     * Why not use JavaScript's setTimeout() instead?  Good question.  For a good answer, see setTimer() below.\n     *\n     * TODO: Consider making the addTimer() and setTimer() interfaces more like the addIRQ() and setIRQ()\n     * interfaces (which return the underlying object instead of an array index) and maintaining a separate list\n     * of active timers, in order of highest to lowest cycle countdown values, as this could speed up\n     * getBurstCycles() and updateTimers() functions ever so slightly.\n     *\n     * @this {CPUPDP11}\n     * @param {function()} callBack\n     * @return {number} timer index\n     */\n    addTimer(callBack)\n    {\n        var iTimer = this.aTimers.length;\n        this.aTimers.push([-1, callBack]);\n        return iTimer;\n    }\n\n    /**\n     * setTimer(iTimer, ms, fReset)\n     *\n     * Using the timer index from a previous addTimer() call, this sets that timer to fire after the\n     * specified number of milliseconds.\n     *\n     * This is preferred over JavaScript's setTimeout(), because all our timers are effectively paused when\n     * the CPU is paused (eg, when the Debugger halts execution).  Moreover, setTimeout() handlers only run after\n     * runCPU() yields, which is far too granular for some components (eg, when the SerialPort tries to simulate\n     * interrupts at 9600 baud).\n     *\n     * Ideally, the only function that would use setTimeout() is runCPU(), while the rest of the components\n     * use setTimer(); however, due to legacy code (ie, code that predates these functions) and/or laziness,\n     * that may not be the case.\n     *\n     * @this {CPUPDP11}\n     * @param {number} iTimer\n     * @param {number} ms (converted into a cycle countdown internally)\n     * @param {boolean} [fReset] (true if the timer should be reset even if already armed)\n     * @return {number} (number of cycles used to arm timer, or -1 if error)\n     */\n    setTimer(iTimer, ms, fReset)\n    {\n        var nCycles = -1;\n        if (iTimer >= 0 && iTimer < this.aTimers.length) {\n            if (fReset || this.aTimers[iTimer][0] < 0) {\n                nCycles = this.getMSCycles(ms);\n                /*\n                 * We must now confront the following problem: if the CPU is currently executing a burst of cycles,\n                 * the number of cycles it has executed in that burst so far must NOT be charged against the cycle\n                 * timeout we're about to set.  The simplest way to resolve that is to immediately call endBurst()\n                 * and bias the cycle timeout by the number of cycles that the burst executed.\n                 */\n                if (this.flags.running) {\n                    nCycles += this.endBurst();\n                }\n                this.aTimers[iTimer][0] = nCycles;\n            }\n        }\n        return nCycles;\n    }\n\n    /**\n     * getMSCycles(ms)\n     *\n     * @this {CPUPDP11}\n     * @param {number} ms\n     * @return {number} number of corresponding cycles\n     */\n    getMSCycles(ms)\n    {\n        return ((this.nCyclesPerSecond * this.nCyclesMultiplier) / 1000 * ms)|0;\n    }\n\n    /**\n     * getBurstCycles(nCycles)\n     *\n     * Used by runCPU() to get min(nCycles,[timer cycle counts])\n     *\n     * @this {CPUPDP11}\n     * @param {number} nCycles (number of cycles about to execute)\n     * @return {number} (either nCycles or less if a timer needs to fire)\n     */\n    getBurstCycles(nCycles)\n    {\n        for (var i = this.aTimers.length - 1; i >= 0; i--) {\n            var timer = this.aTimers[i];\n\n            if (timer[0] < 0) continue;\n            if (nCycles > timer[0]) {\n                nCycles = timer[0];\n            }\n        }\n        return nCycles;\n    }\n\n    /**\n     * saveTimers()\n     *\n     * @this {CPUPDP11}\n     * @return {Array.<number>}\n     */\n    saveTimers()\n    {\n        var aTimerCycles = [];\n        for (var i = 0; i < this.aTimers.length; i++) {\n            var timer = this.aTimers[i];\n            aTimerCycles.push(timer[0]);\n        }\n        return aTimerCycles;\n    }\n\n    /**\n     * restoreTimers(aTimerCycles)\n     *\n     * @this {CPUPDP11}\n     * @param {Array.<number>} aTimerCycles\n     */\n    restoreTimers(aTimerCycles)\n    {\n\n        for (var i = 0; i < this.aTimers.length && i < aTimerCycles.length; i++) {\n            var timer = this.aTimers[i];\n            timer[0] = aTimerCycles[i];\n        }\n    }\n\n    /**\n     * updateTimers(nCycles)\n     *\n     * Used by runCPU() to reduce all active timer countdown values by the number of cycles just executed;\n     * this is the function that actually \"fires\" any timer(s) whose countdown has reached (or dropped below)\n     * zero, invoking their callback function.\n     *\n     * @this {CPUPDP11}\n     * @param {number} nCycles (number of cycles actually executed)\n     */\n    updateTimers(nCycles)\n    {\n        for (var i = this.aTimers.length - 1; i >= 0; i--) {\n            var timer = this.aTimers[i];\n\n            if (timer[0] < 0) continue;\n            timer[0] -= nCycles;\n            if (timer[0] <= 0) {\n                timer[0] = -1;      // zero is technically an \"active\" value, so ensure the timer is dormant now\n                timer[1]();         // safe to invoke the callback function now\n            }\n        }\n    }\n\n    /**\n     * endBurst(fReset)\n     *\n     * @this {CPUPDP11}\n     * @param {boolean} [fReset]\n     * @return {number} (number of cycles executed in the most recent burst)\n     */\n    endBurst(fReset)\n    {\n        var nCycles = this.nBurstCycles -= this.nStepCycles;\n        /*\n         * In addition to zeroing nStepCycles, it's important that we also zero nSnapCycles, because if a CPU\n         * burst is being ended after nStepCycles has been \"snapped\" (because a certain opcode has an unusual timing\n         * calculation that must be based on a \"snapped\" cycle count rather the opcode's starting cycle count), we\n         * could inadvertently undo the endBurst() if the original \"snapped\" value was used to update nStepCycles.\n         */\n        this.nStepCycles = this.nSnapCycles = 0;\n        if (fReset) this.nBurstCycles = 0;\n        return nCycles;\n    }\n\n    /**\n     * runCPU()\n     *\n     * @this {CPUPDP11}\n     */\n    runCPU()\n    {\n        if (!this.flags.running) return;\n\n        /*\n         *  calcStartTime() initializes the cycle counter and timestamp for this runCPU() invocation, and optionally\n         *  recalculates the the maximum number of cycles for each burst if the nCyclesRecalc threshold has been reached.\n         */\n        this.calcStartTime();\n\n        try {\n            do {\n                /*\n                 * nCycles is how many cycles we WANT to run on each iteration of stepCPU(), and may be as\n                 * HIGH as nCyclesPerYield, but it may be significantly less.  getBurstCycles() will adjust\n                 * nCycles downward if any CPU timers need to fire during the next burst.\n                 */\n                var nCycles = this.getBurstCycles(this.flags.checksum? 1 : this.nCyclesPerYield);\n\n                /*\n                 * Execute the burst.\n                 */\n                try {\n                    this.stepCPU(nCycles);\n                }\n                catch(exception) {\n                    /*\n                     * We assume that any numeric exception was explicitly thrown by the CPU to interrupt the\n                     * current instruction (and by extension, the current burst, but not the current run).  All\n                     * other exceptions are re-thrown to the catch below, which will attempt a stack dump.\n                     */\n                    if (typeof exception != \"number\") throw exception;\n                }\n\n                /*\n                 * Terminate the burst, returning the number of cycles that stepCPU() actually ran.\n                 */\n                nCycles = this.endBurst(true);\n\n                /*\n                 * Add nCycles to nCyclesThisRun, as well as nRunCycles (the cycle count since the CPU started).\n                 */\n                this.nCyclesThisRun += nCycles;\n                this.nRunCycles += nCycles;\n                this.updateChecksum(nCycles);\n\n                /*\n                 * Update any/all timers, firing those whose cycle countdowns have reached (or dropped below) zero.\n                 */\n                this.updateTimers(nCycles);\n\n                this.nCyclesNextYield -= nCycles;\n                if (this.nCyclesNextYield <= 0) {\n                    this.nCyclesNextYield += this.nCyclesPerYield;\n                    if (++this.nYieldsSinceStatusUpdate >= CPUPDP11.YIELDS_PER_STATUS) {\n                        this.updateDisplays();\n                        this.nYieldsSinceStatusUpdate = 0;\n                    }\n                    break;\n                }\n            } while (this.flags.running);\n        }\n        catch (e) {\n            this.stopCPU();\n            if (this.cmp) this.cmp.stop(Component.getTime(), this.getCycles());\n            this.setError(e.stack || e.message);\n            return;\n        }\n\n        if (this.flags.running) setTimeout(this.onRunTimeout, this.calcRemainingTime());\n    }\n\n    /**\n     * startCPU(fUpdateFocus)\n     *\n     * For use by any component that wants to start the CPU.\n     *\n     * @param {boolean} [fUpdateFocus]\n     * @return {boolean}\n     */\n    startCPU(fUpdateFocus)\n    {\n        if (this.isError()) {\n            return false;\n        }\n        if (this.flags.running) {\n            this.println(this.toString() + \" busy\");\n            return false;\n        }\n        /*\n         * setSpeed() without a speed parameter leaves the selected speed in place, but also resets the\n         * cycle counter and timestamp for the current series of runCPU() calls, calculates the maximum number\n         * of cycles for each burst based on the last known effective CPU speed, and resets the nCyclesRecalc\n         * threshold counter.\n         */\n        this.setSpeed();\n        this.flags.running = true;\n        this.flags.starting = true;\n        var controlRun = this.bindings[\"run\"];\n        if (controlRun) controlRun.textContent = \"Halt\";\n        if (this.cmp) {\n            if (fUpdateFocus) this.cmp.setFocus(true);\n            this.cmp.start(this.msStartRun, this.getCycles());\n        }\n        if (!this.dbg) this.status(\"Started\");\n        setTimeout(this.onRunTimeout, 0);\n        return true;\n    }\n\n    /**\n     * stepCPU(nMinCycles)\n     *\n     * This will be implemented by the CPUStatePDP11 component.\n     *\n     * @this {CPUPDP11}\n     * @param {number} nMinCycles (0 implies a single-step, and therefore breakpoints should be ignored)\n     * @return {number} of cycles executed; 0 indicates that the last instruction was not executed\n     */\n    stepCPU(nMinCycles)\n    {\n        return 0;\n    }\n\n    /**\n     * stopCPU(fComplete)\n     *\n     * For use by any component that wants to stop the CPU.\n     *\n     * This similar to yieldCPU(), but it doesn't need to zero nCyclesNextYield to break out of runCPU();\n     * it simply needs to clear fRunning (well, \"simply\" may be oversimplifying a bit....)\n     *\n     * @this {CPUPDP11}\n     * @param {boolean} [fComplete]\n     * @return {boolean} true if the CPU was stopped, false if it was already stopped\n     */\n    stopCPU(fComplete)\n    {\n        var fStopped = false;\n        if (this.flags.running) {\n            this.endBurst();\n            this.addCycles(this.nRunCycles);\n            this.nRunCycles = 0;\n            this.flags.running = false;\n            var controlRun = this.bindings[\"run\"];\n            if (controlRun) controlRun.textContent = \"Run\";\n            if (this.cmp) {\n                this.cmp.stop(Component.getTime(), this.getCycles());\n            }\n            fStopped = true;\n            if (!this.dbg) this.status(\"Stopped\");\n        }\n        this.flags.complete = fComplete;\n        return fStopped;\n    }\n\n    /**\n     * yieldCPU()\n     *\n     * Similar to stopCPU() with regard to how it resets various cycle countdown values, but the CPU\n     * remains in a \"running\" state.\n     *\n     * @this {CPUPDP11}\n     */\n    yieldCPU()\n    {\n        this.endBurst();                    // this will break us out of stepCPU()\n        this.nCyclesNextYield = 0;          // this will break us out of runCPU(), once we break out of stepCPU()\n        /*\n         * The Debugger calls yieldCPU() after every message() to ensure browser responsiveness, but it looks\n         * odd for those messages to show CPU state changes if the Control Panel, Video display, etc, does not,\n         * so I've added this call to try to keep things looking synchronized.\n         */\n        this.updateDisplays();\n    }\n}\n\n/*\n * Constants that control the frequency at which various updates should occur.\n *\n * These values do NOT control the simulation directly.  Instead, they are used by\n * calcCycles(), which uses the nCyclesPerSecond passed to the constructor as a starting\n * point and computes the following variables:\n *\n *      this.nCyclesPerYield:    (this.nCyclesPerSecond / CPUPDP11.YIELDS_PER_SECOND)\n *\n * The above variables are also multiplied by any cycle multiplier in effect, via setSpeed(),\n * and then they're used to initialize another set of variables for each runCPU() iteration:\n *\n *      this.nCyclesNextYield:   this.nCyclesPerYield\n */\nCPUPDP11.YIELDS_PER_SECOND      = 30;           // just a gut feeling for the MINIMUM number of yields per second\nCPUPDP11.YIELDS_PER_STATUS      = 15;           // every 15 yields (ie, twice per second), perform CPU status updates\n\nCPUPDP11.BUTTONS = [\"power\", \"reset\"];\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/cpustate.js (C) Jeff Parsons 2012-2018\n */\n\n\n/*\n * Overview of Device Interrupt Support\n *\n * Originally, the CPU maintained a queue of requested interrupts.  Entries in this queue recorded a device's\n * priority, vector, and delay (ie, a number of instructions to execute before dispatching the interrupt).  This\n * queue would constantly grow and shrink as requests were issued and dispatched, and as long as there was something\n * in the queue, the CPU was constantly examining it.\n *\n * Now we are trying something more efficient.  First, for devices that require delays (like the SerialPort's receiver\n * and transmitter buffer registers, which are supposed to \"clock\" the data in and out at a specific baud rate), the\n * CPU offers timer services that will \"fire\" a callback after a specified delay, which are much more efficient than\n * requiring the CPU to dive into an interrupt queue and decrement delay counts on every instruction.\n *\n * Second, devices that generate interrupts will allocate an IRQ object during initialization; we will no longer\n * be creating and destroying interrupt event objects and inserting/deleting them in a constantly changing queue.\n * Each IRQ contains properties that never change (eg, the vector and priority), along with a \"next\" pointer that's\n * only used when the IRQ is active.\n *\n * When a device decides it's time to interrupt (either at the end of some I/O operation or when a timer has fired),\n * it will simply set the IRQ, which basically means that the IRQ will be linked onto a list of active IRQs, in\n * priority order, so that when the CPU is ready to acknowledge interrupts, it need only check the top of the active\n * IRQ list.\n */\n\n/**\n * @typedef {{\n *  vector: number,\n *  priority: number,\n *  message: number,\n *  next: (IRQ|null)\n * }}\n */\nvar IRQ;\n\nclass CPUStatePDP11 extends CPUPDP11 {\n    /**\n     * CPUStatePDP11(parmsCPU)\n     *\n     * The CPUStatePDP11 class uses the following (parmsCPU) properties:\n     *\n     *      model: a number (eg, 1170) that should match one of the PDP11.MODEL_* values\n     *      addrReset: reset address (default is 0)\n     *\n     * This extends the CPU class and passes any remaining parmsCPU properties to the CPU class\n     * constructor, along with a default speed (cycles per second) based on the specified\n     * (or default) CPU model number.\n     *\n     * After looking over the timings of PDP-11/70 instructions, nearly all of them appear\n     * to be multiples of 150ns.  So that's what we'll consider a cycle.  How many 150ns are\n     * in one second?  Approximately 6666667.  So by way of comparison to other PCjs machines,\n     * that makes the PDP-11 (or at least the PDP-11/70) look like a 6.67Mhz machine.\n     *\n     * I've started with the PDP-11/70, since that's what Paul Nankervis started with.  When\n     * I go back and add support for earlier PDP-11 models (primarily by neutering functions\n     * that didn't exist), I will no doubt have to tweak some instruction cycle counts, too.\n     *\n     * Examples of operations that take 1 extra cycle (150ns): single and double operand byte\n     * instructions with an odd address (except MOV/MTPI/MTPD/JMP/JRS), ADD/SUB/BIC/BIS/MOVB/CMP/BIT\n     * instructions with src of R1-R7 and dst of R6-R7, RORB/ASRB with an odd address, and each\n     * shift of ASH/ASHC.  As you can see, the rules are not simple.\n     *\n     * We're not simulating cache hardware, but our timings should be optimistic and assume 100%\n     * cache hits; for cache hits, each read cycle is 300ns.  As for write cycles, they are always\n     * 750ns.  My initial take on DEC's timings is that they are including the write time as part\n     * of the total EF (execute/fetch) time.  So, for instructions that write to memory, it looks\n     * like we'll normally need to add 5 cycles (750/150) to the instruction's base time, but\n     * we'll need to keep an eye out for exceptions.\n     *\n     * @param {Object} parmsCPU\n     */\n    constructor(parmsCPU)\n    {\n        var nCyclesDefault = 0;\n        var model = +parmsCPU['model'] || PDP11.MODEL_1170;\n\n        switch(model) {\n        case PDP11.MODEL_1170:\n        default:\n            nCyclesDefault = 6666667;\n            break;\n        }\n\n        /*\n         * ES6 ALERT: Classes cannot access \"this\" until all superclasses have been initialized as well.\n         */\n        super(parmsCPU, nCyclesDefault);\n\n        this.model = model;\n        this.addrReset = +parmsCPU['addrReset'] || 0;\n\n        /*\n         * These properties will be initialized by initCPU()\n         */\n        this.flagC = this.flagV = this.flagZ = this.flagN = 0;\n        this.regPSW = this.pswMode = 0;\n        this.pswTrap = 0;\n        this.regsGen = this.regsAlt = this.regsAltStack = [];\n        this.regsPAR = this.regsPDR = this.regsUniMap = this.regsControl = [];\n        this.opFlags = 0;\n\n        /*\n         * These properties will be initialized by initMMU()\n         */\n        this.regMMR0 = this.regMMR1 = this.regMMR2 = this.regMMR3 = 0;\n        this.regErr = this.regMBR = this.regPIR = this.regSLR = 0;\n        this.mmuEnable = this.mmuLastMode = this.mmuLastPage = this.mmuMask = 0;\n        this.addrLast = this.opLast = this.addrInvalid = 0;\n\n        this.mapMMR3 = [4,2,0,1];   // map from mode to MMR3 I/D bit\n\n        /*\n         * Initialize processor operation to match the requested model.\n         *\n         * offRegSrc is a bias added to the register index calculated in readSrcWord() and readSrcByte(),\n         * and by default has no effect on the register index, UNLESS this is a PDP-11/20, in which case the\n         * bias is changed to 8 and we return one of the negative values you see above.  Those negative values\n         * act as signals to writeDstWord() and writeDstByte(), effectively delaying evaluation of the register\n         * until then.\n         */\n        this.offRegSrc = 0;\n        this.maskRegSrcByte = 0xff;\n\n        if (this.model <= PDP11.MODEL_1120) {\n            this.opDecode = PDP11.op1120.bind(this);\n            this.checkStackLimit = this.checkStackLimit1120;\n            this.offRegSrc = 8;\n            this.maskRegSrcByte = -1;\n            this.pswUsed = ~(PDP11.PSW.UNUSED | PDP11.PSW.REGSET | PDP11.PSW.PMODE | PDP11.PSW.CMODE) & 0xffff;\n            this.pswRegSet = 0;\n        } else {\n            this.opDecode = PDP11.op1140.bind(this);\n            this.checkStackLimit = this.checkStackLimit1140;\n            /*\n             * The alternate register set (REGSET) doesn't exist on the 11/20 or 11/40; it's available on the 11/45 and 11/70.\n             * Ditto for separate I/D spaces, SUPER mode, and the instructions MFPD, MTPD, and SPL.\n             */\n            this.pswUsed = ~(PDP11.PSW.UNUSED | (this.model <= PDP11.MODEL_1140? PDP11.PSW.REGSET : 0)) & 0xffff;\n            this.pswRegSet = (this.model > PDP11.MODEL_1140? PDP11.PSW.REGSET : 0);\n        }\n\n        this.nDisableTraps = 0;\n        this.trapVector = this.trapReason = 0;\n\n        /** @type {IRQ|null} */\n        this.irqNext = null;        // the head of the active IRQ list, in priority order\n\n        /** @type {Array.<IRQ>} */\n        this.aIRQs = [];            // list of all IRQs, active or not (to be used for auto-configuration)\n\n        this.getByte = this.getByteDirect = this.getByteChecked;\n        this.getWord = this.getWordDirect = this.getWordChecked;\n        this.setByte = this.setByteDirect = this.setByteChecked;\n        this.setWord = this.setWordDirect = this.setWordChecked;\n        this.nReadBreaks = this.nWriteBreaks = 0;\n\n        this.addrDSpace = this.addrIOPage = 0;\n        this.getAddr = this.getVirtualAddrByMode;\n        this.readWord = this.readWordFromVirtual;\n        this.writeWord = this.writeWordToVirtual;\n\n        this.srcMode = this.srcReg = 0;\n        this.dstMode = this.dstReg = this.dstAddr = 0;\n\n        this.flags.complete = false;\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * Called once the Bus has been initialized.\n     *\n     * @this {CPUStatePDP11}\n     * @param {ComputerPDP11} cmp\n     * @param {BusPDP11} bus\n     * @param {CPUPDP11} cpu\n     * @param {DebuggerPDP11} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        super.initBus(cmp, bus, cpu, dbg);\n        this.getByteDirect = bus.getByte.bind(bus);\n        this.getWordDirect = bus.getWord.bind(bus);\n        this.setByteDirect = bus.setByte.bind(bus);\n        this.setWordDirect = bus.setWord.bind(bus);\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * We hook the powerUp() notification only because it's our best opportunity to take care of any\n     * floating vector assignments.\n     *\n     * @this {CPUStatePDP11}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        var vectorFloating = 0o300;\n        for (var i = 0; i < this.aIRQs.length; i++) {\n            var irq = this.aIRQs[i];\n            if (irq.vector < 0) {\n                irq.vector = vectorFloating;\n                vectorFloating += 4;\n            }\n        }\n        return super.powerUp(data, fRepower);\n    }\n\n    /**\n     * reset()\n     *\n     * @this {CPUStatePDP11}\n     */\n    reset()\n    {\n        this.status(\"Model \" + this.model);\n        if (this.flags.running) this.stopCPU();\n        this.initCPU();\n        this.resetCycles();\n        this.clearError();          // clear any fatal error/exception that setError() may have flagged\n        super.reset();\n    }\n\n    /**\n     * initCPU()\n     *\n     * WARNING: It's tempting to call this function as early as the constructor() or initBus() calls, but\n     * but we actually need to wait until our reset() or restore() function is called by the powerUp() handler,\n     * ensuring that all device memory allocations have finished.  Only then is it safe to make the first call\n     * to initCPU() -> initMMU() -> setMemoryAccess() -> Bus.setIOPageRange() and sync the Bus memory map with\n     * the CPU memory map.\n     *\n     * @this {CPUStatePDP11}\n     */\n    initCPU()\n    {\n        /*\n         * TODO: Verify the initial state of all PDP-11 flags and registers (are they well-documented?)\n         */\n        var f = 0xffff;\n        this.flagC = 0x10000;       // PSW C bit\n        this.flagV  = 0x8000;       // PSW V bit\n        this.flagZ  = f;            // PSW Z bit        (TODO: Why do we clear instead of set Z, like other flags?)\n        this.flagN  = 0x8000;       // PSW N bit\n        this.regPSW = 0x000f;       // PSW other bits   (TODO: What's the point of setting the flag bits here, too?)\n\n        this.regsGen = [            // General R0-R7\n            0, 0, 0, 0, 0, 0, 0, this.addrReset, -1, -2, -3, -4, -5, -6, -7, -8\n        ];\n        this.regsAlt = [            // Alternate R0-R5\n            0, 0, 0, 0, 0, 0\n        ];\n        this.regsAltStack = [       // Alternate R6 stack pointers (KERNEL, SUPER, UNUSED, USER)\n            0, 0, 0, 0\n        ];\n        this.regsPAR = [            // memory management PAR registers by mode\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],   // KERNEL (8 KIPAR regs followed by 8 KDPAR regs)\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],   // SUPER  (8 SIPDR regs followed by 8 SDPDR regs)\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],   // mode 2 (not used)\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]    // USER   (8 UIPDR regs followed by 8 UDPDR regs)\n        ];\n        this.regsPDR = [            // memory management PDR registers by mode\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],   // KERNEL (8 KIPDR regs followed by 8 KDPDR regs)\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],   // SUPER  (8 SIPDR regs followed by 8 SDPDR regs)\n            [f, f, f, f, f, f, f, f, f, f, f, f, f, f, f, f],   // mode 2 (not used)\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]    // USER   (8 UIPDR regs followed by 8 UDPDR regs)\n        ];\n        this.regsUniMap = [         // 32 UNIBUS map registers\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        this.regsControl = [        // various control registers (177740-177756) we don't really care about\n            0, 0, 0, 0, 0, 0, 0, 0\n        ];\n\n        this.pswMode = 0;           // current memory management mode (see PDP11.MODE.KERNEL | SUPER | UNUSED | USER)\n        this.pswTrap = -1;\n        this.regMBR = 0;\n\n        /*\n         * opFlags contains various conditions that stepCPU() needs to be aware of.\n         */\n        this.opFlags = 0;\n\n        /*\n         * srcMode and srcReg are set by SRCMODE decodes, and dstMode and dstReg are set for DSTMODE decodes,\n         * indicating to the opcode handlers the mode(s) and register(s) used as part of the current opcode, so\n         * that they can calculate the correct number of cycles.  dstAddr is set for byte operations that also\n         * need to know the effective address for their cycle calculation.\n         */\n        this.srcMode = this.srcReg = 0;\n        this.dstMode = this.dstReg = this.dstAddr = 0;\n\n        this.initMMU();\n    }\n\n    /**\n     * initMMU()\n     *\n     * Reset all registers required as part of a RESET instruction.\n     *\n     * TODO: Do we ever need to automatically clear regErr, or is it cleared manually?\n     *\n     * @this {CPUStatePDP11}\n     */\n    initMMU()\n    {\n        this.regMMR0 = 0;           // 177572\n        this.regMMR1 = 0;           // 177574\n        this.regMMR2 = 0;           // 177576\n        this.regMMR3 = 0;           // 172516\n        this.regErr = 0;            // 177766\n        this.regPIR = 0;            // 177772\n        this.regSLR = 0xff;         // 177774\n        this.mmuEnable = 0;         // MMU enabled for PDP11.ACCESS.READ or PDP11.ACCESS.WRITE\n        this.mmuLastMode = 0;\n        this.mmuLastPage = 0;\n        this.mmuMask = 0x3ffff;\n\n        /*\n         * This is queried and displayed by the Panel when it's not displaying its own ADDRESS register\n         * (which takes precedence when, for example, you've manually halted the CPU and are independently\n         * examining the contents of other addresses).\n         *\n         * We initialize it to whatever the current PC is, because according to @paulnank's pdp11.js: \"Reset\n         * displays next instruction address\" and initMMU() is called on a RESET.\n         */\n        this.addrLast = this.regsGen[7];\n\n        /*\n         * This stores the PC in the lower 16 bits, and any auto-incs or auto-decs from the last opcode in the\n         * upper 16 bits;  the lower 16 bits are used to update MMR2, and the upper 16 bits are used to update MMR1.\n         * The upper bits are automatically zeroed at the start of every operation when the PC is copied to opLast.\n         */\n        this.opLast = 0;\n\n        this.resetIRQs();\n\n        /*\n         * As initCPU() explains, we shouldn't be calling this function until well after initBus() has been\n         * called, but we still make absolutely sure we have Bus access.\n         */\n        if (this.bus) {\n            this.setMemoryAccess();\n            this.addrInvalid = this.bus.getMemoryLimit(MemoryPDP11.TYPE.RAM);\n        }\n    }\n\n    /**\n     * getMMUState()\n     *\n     * Returns bit 0 set if 22-bit, bit 1 set if 18-bit, or bit 2 set if 16-bit; used by the Panel component.\n     *\n     * @this {CPUStatePDP11}\n     * @return {number}\n     */\n    getMMUState()\n    {\n        return this.mmuEnable? ((this.regMMR3 & PDP11.MMR3.MMU_22BIT)? 1 : 2) : 4;\n    }\n\n    /**\n     * resetCPU()\n     *\n     * @this {CPUStatePDP11}\n     */\n    resetCPU()\n    {\n        this.bus.reset();\n        this.initMMU();\n    }\n\n    /**\n     * setMemoryAccess()\n     *\n     * Define handlers and DSPACE setting appropriate for the current MMU mode, in order to eliminate unnecessary calls\n     * to mapVirtualToPhysical().\n     *\n     * @this {CPUStatePDP11}\n     */\n    setMemoryAccess()\n    {\n        this.getByte = this.getByteDirect;\n        this.getWord = this.getWordDirect;\n        this.setByte = this.setByteDirect;\n        this.setWord = this.setWordDirect;\n        if (this.nReadBreaks) {\n            this.getByte = this.getByteChecked;\n            this.getWord = this.getWordChecked;\n        }\n        if (this.nWriteBreaks) {\n            this.setByte = this.setByteChecked;\n            this.setWord = this.setWordChecked;\n        }\n        if (this.mmuEnable) {\n            this.addrDSpace = PDP11.ACCESS.DSPACE;\n            this.addrIOPage = (this.regMMR3 & PDP11.MMR3.MMU_22BIT)? BusPDP11.IOPAGE_22BIT : BusPDP11.IOPAGE_18BIT;\n            this.getAddr = this.getVirtualAddrByMode;\n            this.readWord = this.nReadBreaks? this.readWordFromVirtualChecked : this.readWordFromVirtual;\n            this.writeWord = this.nWriteBreaks? this.writeWordToVirtualChecked : this.writeWordToVirtual;\n            this.bus.setIOPageRange((this.regMMR3 & PDP11.MMR3.MMU_22BIT)? 22 : 18);\n        } else {\n            this.addrDSpace = 0;\n            this.addrIOPage = BusPDP11.IOPAGE_16BIT;\n            this.getAddr = this.getPhysicalAddrByMode;\n            this.readWord = this.nReadBreaks? this.readWordFromPhysicalChecked : this.readWordFromPhysical;\n            this.writeWord = this.nWriteBreaks? this.writeWordToPhysicalChecked : this.writeWordToPhysical;\n            this.bus.setIOPageRange(16);\n        }\n    }\n\n    /**\n     * getMMR0()\n     *\n     * NOTE: It's OK to bypass this function if you're only interested in bits that always stored directly in MMR0.\n     *\n     * 15 | 14 | 13 | 12 | 11 | 10 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 MMR0\n     * nonr leng read trap unus unus ena mnt cmp  -mode- i/d  --page--   enable\n     *\n     * @this {CPUStatePDP11}\n     * @return {number}\n     */\n    getMMR0()\n    {\n        var data = this.regMMR0;\n        if (!(data & PDP11.MMR0.ABORT)) {\n            data = (data & ~(PDP11.MMR0.UNUSED | PDP11.MMR0.PAGE | PDP11.MMR0.MODE)) | (this.mmuLastMode << 5) | (this.mmuLastPage << 1);\n        }\n        return data;\n    }\n\n    /**\n     * setMMR0()\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} newMMR0\n     */\n    setMMR0(newMMR0)\n    {\n        newMMR0 &= ~PDP11.MMR0.UNUSED;\n\n        if (this.regMMR0 != newMMR0) {\n            if (newMMR0 & PDP11.MMR0.ABORT) {\n                /*\n                 * If updates to MMR0[1-7], MMR1, and MMR2 are being shut off (ie, MMR0.ABORT bits are transitioning\n                 * from clear to set), then do one final sync with their real-time counterparts in opLast.\n                 */\n                if (!(this.regMMR0 & PDP11.MMR0.ABORT)) {\n                    this.regMMR1 = (this.opLast >> 16) & 0xffff;\n                    this.regMMR2 = this.opLast & 0xffff;\n                }\n            }\n            /*\n             * NOTE: We are not protecting the read-only state of the COMPLETED bit here; that's handled by writeMMR0().\n             */\n            this.regMMR0 = newMMR0;\n            this.mmuLastMode = (newMMR0 & PDP11.MMR0.MODE) >> PDP11.MMR0.SHIFT.MODE;\n            this.mmuLastPage = (newMMR0 & PDP11.MMR0.PAGE) >> PDP11.MMR0.SHIFT.PAGE;\n            var mmuEnable = 0;\n            if (newMMR0 & (PDP11.MMR0.ENABLED | PDP11.MMR0.MAINT)) {\n                mmuEnable = PDP11.ACCESS.WRITE;\n                if (newMMR0 & PDP11.MMR0.ENABLED) mmuEnable |= PDP11.ACCESS.READ;\n            }\n            if (this.mmuEnable != mmuEnable) {\n                this.mmuEnable = mmuEnable;\n                this.setMemoryAccess();\n            }\n        }\n    }\n\n    /**\n     * getMMR1()\n     *\n     * @this {CPUStatePDP11}\n     * @return {number}\n     */\n    getMMR1()\n    {\n        /*\n         * If updates to MMR1 have not been shut off (ie, MMR0.ABORT bits are clear), then we are allowed\n         * to sync MMR1 with its real-time counterpart in opLast.\n         *\n         * UPDATE: Apparently, I was mistaken that this register would only be updated when the MMR0 ENABLED\n         * bit was set.\n         *\n         *      if ((this.regMMR0 & (PDP11.MMR0.ABORT | PDP11.MMR0.ENABLED)) == PDP11.MMR0.ENABLED)\n         */\n        if (!(this.regMMR0 & PDP11.MMR0.ABORT)) {\n            this.regMMR1 = (this.opLast >> 16) & 0xffff;\n        }\n        var result = this.regMMR1;\n        if (result & 0xff00) {\n            result = ((result << 8) | (result >> 8)) & 0xffff;\n        }\n        return result;\n    }\n\n    /**\n     * getMMR2()\n     *\n     * @this {CPUStatePDP11}\n     * @return {number}\n     */\n    getMMR2()\n    {\n        /*\n         * If updates to MMR2 have not been shut off (ie, MMR0.ABORT bits are clear), then we are allowed\n         * to sync MMR2 with its real-time counterpart in opLast.\n         *\n         * UPDATE: Apparently, I was mistaken that this register would only be updated when the MMR0 ENABLED\n         * bit was set.\n         *\n         *      if ((this.regMMR0 & (PDP11.MMR0.ABORT | PDP11.MMR0.ENABLED)) == PDP11.MMR0.ENABLED)\n         */\n        if (!(this.regMMR0 & PDP11.MMR0.ABORT)) {\n            this.regMMR2 = this.opLast & 0xffff;\n        }\n        return this.regMMR2;\n    }\n\n    /**\n     * getMMR3()\n     *\n     * @this {CPUStatePDP11}\n     * @return {number}\n     */\n    getMMR3()\n    {\n        return this.regMMR3;\n    }\n\n    /**\n     * setMMR3()\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} newMMR3\n     */\n    setMMR3(newMMR3)\n    {\n        /*\n         * Don't allow non-11/70 models to use 22-bit addressing or the UNIBUS map.\n         */\n        if (this.model < PDP11.MODEL_1170) {\n            newMMR3 &= ~(PDP11.MMR3.MMU_22BIT | PDP11.MMR3.UNIBUS_MAP);\n        }\n        if (this.regMMR3 != newMMR3) {\n            this.regMMR3 = newMMR3;\n            this.mmuMask = (newMMR3 & PDP11.MMR3.MMU_22BIT)? BusPDP11.MASK_22BIT : BusPDP11.MASK_18BIT;\n            this.setMemoryAccess();\n        }\n    }\n\n    /**\n     * setReset(addr, fStart, bUnit, addrStack)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     * @param {boolean} [fStart] (true if a \"startable\" image was just loaded, false if not)\n     * @param {number} [bUnit] (boot unit #)\n     * @param {number} [addrStack]\n     */\n    setReset(addr, fStart, bUnit, addrStack)\n    {\n        this.addrReset = addr;\n\n        this.setPC(addr);\n        this.setPSW(0);\n\n        this.resetCPU();\n\n        if (fStart) {\n            this.regsGen[0] = bUnit || 0;\n            for (var i = 1; i <= 5; i++) this.regsGen[i] = 0;\n            this.regsGen[6] = addrStack || 0o2000;\n            if (!this.flags.powered) {\n                this.flags.autoStart = true;\n            }\n            else if (!this.flags.running) {\n                this.startCPU();\n            }\n        }\n        else {\n            if (this.dbg && this.flags.powered) {\n                /*\n                 * TODO: Review the decision to always stop the CPU if the Debugger is loaded.  Note that\n                 * when stopCPU() stops a running CPU, the Debugger gets notified, so no need to notify it again.\n                 *\n                 * TODO: There are more serious problems to deal with if another component is slamming a new PC down\n                 * the CPU's throat (presumably while also dropping some new code into RAM) while the CPU is running;\n                 * we should probably force a complete reset, but for now, it's up to the user to hit the reset button\n                 * themselves.\n                 */\n                if (!this.stopCPU() && !this.cmp.flags.reset) {\n                    this.dbg.updateStatus();\n                    this.cmp.updateDisplays(-1);\n                }\n            }\n            else if (fStart === false) {\n                this.stopCPU();\n            }\n        }\n        if (!this.isRunning() && this.panel) this.panel.stop();\n    }\n\n    /**\n     * getChecksum()\n     *\n     * TODO: Implement\n     *\n     * @this {CPUStatePDP11}\n     * @return {number} a 32-bit summation of key elements of the current CPU state (used by the CPU checksum code)\n     */\n    getChecksum()\n    {\n        return 0;\n    }\n\n    /**\n     * save()\n     *\n     * @this {CPUStatePDP11}\n     * @return {Object|null}\n     */\n    save()\n    {\n        var state = new State(this);\n        state.set(0, [\n            this.regsGen,\n            this.regsAlt,\n            this.regsAltStack,\n            this.regsPAR,\n            this.regsPDR,\n            this.regsUniMap,\n            this.regsControl,\n            this.regErr,\n            this.regMBR,\n            this.regPIR,\n            this.regSLR,\n            this.mmuLastMode,\n            this.mmuLastPage,\n            this.addrLast,\n            this.opFlags,\n            this.opLast,\n            this.pswTrap,\n            this.trapReason,\n            this.trapVector,\n            this.addrReset\n        ]);\n        state.set(1, [this.getPSW(),this.getMMR0(),this.getMMR1(),this.getMMR2(),this.getMMR3()]);\n        state.set(2, [this.nTotalCycles, this.getSpeed(), this.flags.autoStart]);\n        state.set(3, this.saveIRQs());\n        state.set(4, this.saveTimers());\n        return state.data();\n    }\n\n    /**\n     * restore(data)\n     *\n     * @this {CPUStatePDP11}\n     * @param {Object} data\n     * @return {boolean} true if restore successful, false if not\n     */\n    restore(data)\n    {\n        /*\n         * ES6 ALERT: A handy destructuring assignment, which makes it easy to perform the inverse\n         * of what save() does when it collects a bunch of object properties into an array.\n         */\n        [\n            this.regsGen,\n            this.regsAlt,\n            this.regsAltStack,\n            this.regsPAR,\n            this.regsPDR,\n            this.regsUniMap,\n            this.regsControl,\n            this.regErr,\n            this.regMBR,\n            this.regPIR,\n            this.regSLR,\n            this.mmuLastMode,\n            this.mmuLastPage,\n            this.addrLast,\n            this.opFlags,\n            this.opLast,\n            this.pswTrap,\n            this.trapReason,\n            this.trapVector,\n            this.addrReset\n        ] = data[0];\n\n        var a = data[1];\n        this.setPSW(a[0]);\n        this.setMMR0(a[1]);\n        this.regMMR1 = a[2];\n        this.regMMR2 = a[3];\n        this.setMMR3(a[4]);\n\n        a = data[2];\n        this.nTotalCycles = a[0];\n        this.setSpeed(a[1]);\n        this.flags.autoStart = a[2];\n\n        this.restoreIRQs(data[3]);\n        this.restoreTimers(data[4]);\n        return true;\n    }\n\n    /**\n     * clearCF()\n     *\n     * @this {CPUStatePDP11}\n     */\n    clearCF()\n    {\n        this.flagC = 0;\n    }\n\n    /**\n     * getCF()\n     *\n     * @this {CPUStatePDP11}\n     * @return {number} 0 or PDP11.PSW.CF\n     */\n    getCF()\n    {\n        return (this.flagC & 0x10000)? PDP11.PSW.CF: 0;\n    }\n\n    /**\n     * setCF()\n     *\n     * @this {CPUStatePDP11}\n     */\n    setCF()\n    {\n        this.flagC = 0x10000;\n    }\n\n    /**\n     * clearVF()\n     *\n     * @this {CPUStatePDP11}\n     */\n    clearVF()\n    {\n        this.flagV = 0;\n    }\n\n    /**\n     * getVF()\n     *\n     * @this {CPUStatePDP11}\n     * @return {number} 0 or PDP11.PSW.VF\n     */\n    getVF()\n    {\n        return (this.flagV & 0x8000)? PDP11.PSW.VF: 0;\n    }\n\n    /**\n     * setVF()\n     *\n     * @this {CPUStatePDP11}\n     */\n    setVF()\n    {\n        this.flagV = 0x8000;\n    }\n\n    /**\n     * clearZF()\n     *\n     * @this {CPUStatePDP11}\n     */\n    clearZF()\n    {\n        this.flagZ = 1;\n    }\n\n    /**\n     * getZF()\n     *\n     * @this {CPUStatePDP11}\n     * @return {number} 0 or PDP11.PSW.ZF\n     */\n    getZF()\n    {\n        return (this.flagZ & 0xffff)? 0 : PDP11.PSW.ZF;\n    }\n\n    /**\n     * setZF()\n     *\n     * @this {CPUStatePDP11}\n     */\n    setZF()\n    {\n        this.flagZ = 0;\n    }\n\n    /**\n     * clearNF()\n     *\n     * @this {CPUStatePDP11}\n     */\n    clearNF()\n    {\n        this.flagN = 0;\n    }\n\n    /**\n     * getNF()\n     *\n     * @this {CPUStatePDP11}\n     * @return {number} 0 or PDP11.PSW.NF\n     */\n    getNF()\n    {\n        return (this.flagN & 0x8000)? PDP11.PSW.NF : 0;\n    }\n\n    /**\n     * setNF()\n     *\n     * @this {CPUStatePDP11}\n     */\n    setNF()\n    {\n        this.flagN = 0x8000;\n    }\n\n    /**\n     * getOpcode()\n     *\n     * @this {CPUStatePDP11}\n     * @return {number}\n     */\n    getOpcode()\n    {\n        var pc = this.opLast = this.regsGen[PDP11.REG.PC];\n        /*\n         * If PC is unaligned, a BUS trap will be generated, and because it will generate an\n         * exception, the next line (the equivalent of advancePC(2)) will not be executed, ensuring that\n         * original unaligned PC will be pushed onto the stack by trap().\n         */\n        var opCode = this.readWord(pc);\n        this.regsGen[PDP11.REG.PC] = (pc + 2) & 0xffff;\n        return opCode;\n    }\n\n    /**\n     * advancePC(off)\n     *\n     * NOTE: This function is nothing more than a convenience, and we fully expect it to be inlined at runtime.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} off\n     * @return {number} (original PC)\n     */\n    advancePC(off)\n    {\n        var pc = this.regsGen[PDP11.REG.PC];\n        this.regsGen[PDP11.REG.PC] = (pc + off) & 0xffff;\n        return pc;\n    }\n\n    /**\n     * branch(opCode)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} opCode\n     * @param {boolean|number} condition\n     */\n    branch(opCode, condition)\n    {\n        if (condition) {\n            var off = ((opCode << 24) >> 23);\n            if (DEBUG && DEBUGGER && this.dbg && off == -2) {\n                this.dbg.stopInstruction(\"branch to self\");\n            }\n            this.setPC(this.getPC() + off);\n            this.nStepCycles -= 2;\n        }\n        this.nStepCycles -= (2 + 1);\n    }\n\n    /**\n     * getPC()\n     *\n     * NOTE: This function is nothing more than a convenience, and we fully expect it to be inlined at runtime.\n     *\n     * @this {CPUStatePDP11}\n     * @return {number}\n     */\n    getPC()\n    {\n        return this.regsGen[PDP11.REG.PC];\n    }\n\n    /**\n     * getLastAddr()\n     *\n     * @this {CPUStatePDP11}\n     * @return {number}\n     */\n    getLastAddr()\n    {\n        return this.addrLast;\n    }\n\n    /**\n     * getLastPC()\n     *\n     * @this {CPUStatePDP11}\n     * @return {number}\n     */\n    getLastPC()\n    {\n        return this.opLast & 0xffff;\n    }\n\n    /**\n     * setPC()\n     *\n     * NOTE: Unlike other PCjs emulators, such as PCx86, where all PC updates MUST go through the setPC()\n     * function, this function is nothing more than a convenience, because in the PDP-11, the PC can be loaded\n     * like any other general register.  We fully expect this function to be inlined at runtime.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     */\n    setPC(addr)\n    {\n        this.regsGen[PDP11.REG.PC] = addr & 0xffff;\n    }\n\n    /**\n     * getSP()\n     *\n     * NOTE: This function is nothing more than a convenience, and we fully expect it to be inlined at runtime.\n     *\n     * @this {CPUStatePDP11}\n     * @return {number}\n     */\n    getSP()\n    {\n        return this.regsGen[PDP11.REG.SP];\n    }\n\n    /**\n     * setSP()\n     *\n     * NOTE: Unlike other PCjs emulators, such as PCx86, where all SP updates MUST go through the setSP()\n     * function, this function is nothing more than a convenience, because in the PDP-11, the PC can be loaded\n     * like any other general register.  We fully expect this function to be inlined at runtime.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     */\n    setSP(addr)\n    {\n        this.regsGen[PDP11.REG.SP] = addr & 0xffff;\n    }\n\n    /**\n     * addIRQ(vector, priority, message)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} vector (-1 for floating vector)\n     * @param {number} priority\n     * @param {number} [message]\n     * @return {IRQ}\n     */\n    addIRQ(vector, priority, message)\n    {\n        var irq = {vector: vector, priority: priority, message: message || 0, name: PDP11.VECTORS[vector], next: null};\n        this.aIRQs.push(irq);\n        return irq;\n    }\n\n    /**\n     * insertIRQ(irq)\n     *\n     * @this {CPUStatePDP11}\n     * @param {IRQ} irq\n     */\n    insertIRQ(irq)\n    {\n        if (irq != this.irqNext) {\n            var irqPrev = this.irqNext;\n            if (!irqPrev || irqPrev.priority <= irq.priority) {\n                irq.next = irqPrev;\n                this.irqNext = irq;\n            } else {\n                do {\n                    var irqNext = irqPrev.next;\n                    if (!irqNext || irqNext.priority <= irq.priority) {\n                        irq.next = irqNext;\n                        irqPrev.next = irq;\n                        break;\n                    }\n                    irqPrev = irqNext;\n                } while (irqPrev);\n            }\n        }\n        /*\n         * See the writeXCSR() function for an explanation of why signalling an IRQ hardware interrupt\n         * should be done using IRQ_DELAY rather than setting IRQ directly.\n         */\n        this.opFlags |= PDP11.OPFLAG.IRQ_DELAY;\n    }\n\n    /**\n     * removeIRQ(irq)\n     *\n     * @this {CPUStatePDP11}\n     * @param {IRQ} irq\n     */\n    removeIRQ(irq)\n    {\n        var irqPrev = this.irqNext;\n        if (irqPrev == irq) {\n            this.irqNext = irq.next;\n        } else {\n            while (irqPrev) {\n                var irqNext = irqPrev.next;\n                if (irqNext == irq) {\n                    irqPrev.next = irqNext.next;\n                    break;\n                }\n                irqPrev = irqNext;\n            }\n        }\n        /*\n         * We could also set irq.next to null now, but strictly speaking, that shouldn't be necessary.\n         *\n         * Last but not least, if there's still an IRQ on the active IRQ list, we need to make sure IRQ_DELAY\n         * is still set.\n         */\n        if (this.irqNext) {\n            this.opFlags |= PDP11.OPFLAG.IRQ_DELAY;\n        }\n    }\n\n    /**\n     * setIRQ(irq)\n     *\n     * @this {CPUStatePDP11}\n     * @param {IRQ|null} irq\n     */\n    setIRQ(irq)\n    {\n        if (irq) {\n            this.insertIRQ(irq);\n            if (irq.message && this.messageEnabled(irq.message | MessagesPDP11.INT)) {\n                this.printMessage(\"setIRQ(vector=\" + Str.toOct(irq.vector) + \",priority=\" + irq.priority + \")\", true, true);\n            }\n        }\n    }\n\n    /**\n     * clearIRQ(irq)\n     *\n     * @this {CPUStatePDP11}\n     * @param {IRQ|null} irq\n     */\n    clearIRQ(irq)\n    {\n        if (irq) {\n            this.removeIRQ(irq);\n            if (irq.message && this.messageEnabled(irq.message | MessagesPDP11.INT)) {\n                this.printMessage(\"clearIRQ(vector=\" + Str.toOct(irq.vector) + \",priority=\" + irq.priority + \")\", true, true);\n            }\n        }\n    }\n\n    /**\n     * findIRQ(vector)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} vector\n     * @return {IRQ|null}\n     */\n    findIRQ(vector)\n    {\n        for (var i = 0; i < this.aIRQs.length; i++) {\n            var irq = this.aIRQs[i];\n            if (irq.vector === vector) return irq;\n        }\n        return null;\n    }\n\n    /**\n     * checkIRQs(priority)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} priority\n     * @return {IRQ|null}\n     */\n    checkIRQs(priority)\n    {\n        return (this.irqNext && this.irqNext.priority > priority)? this.irqNext : null;\n    }\n\n    /**\n     * resetIRQs(priority)\n     *\n     * @this {CPUStatePDP11}\n     */\n    resetIRQs()\n    {\n        this.irqNext = null;\n    }\n\n    /**\n     * saveIRQs()\n     *\n     * @this {CPUStatePDP11}\n     * @return {Array.<number>}\n     */\n    saveIRQs()\n    {\n        var aIRQVectors = [];\n        var irq = this.irqNext;\n        while (irq) {\n            aIRQVectors.push(irq.vector);\n            irq = irq.next;\n        }\n        return aIRQVectors;\n    }\n\n    /**\n     * restoreIRQs(aIRQVectors)\n     *\n     * @this {CPUStatePDP11}\n     * @param {Array.<number>} aIRQVectors\n     */\n    restoreIRQs(aIRQVectors)\n    {\n        for (var i = aIRQVectors.length - 1; i >= 0; i--) {\n            var irq = this.findIRQ(aIRQVectors[i]);\n\n            if (irq) {\n                irq.next = this.irqNext;\n                this.irqNext = irq;\n            }\n        }\n    }\n\n    /**\n     * checkInterrupts()\n     *\n     * @this {CPUStatePDP11}\n     * @return {boolean} true if an interrupt was dispatched, false if not\n     */\n    checkInterrupts()\n    {\n        var fInterrupt = false;\n\n        if (this.opFlags & PDP11.OPFLAG.IRQ) {\n\n            var vector = PDP11.TRAP.PIRQ;\n            var priority = (this.regPIR & PDP11.PSW.PRI) >> PDP11.PSW.SHIFT.PRI;\n\n            var irq = this.checkIRQs(priority);\n            if (irq) {\n                vector = irq.vector;\n                priority = irq.priority;\n            }\n\n            if (this.dispatchInterrupt(vector, priority)) {\n                if (irq) this.removeIRQ(irq);\n                fInterrupt = true;\n            }\n\n            if (!this.irqNext && !this.regPIR) {\n                this.opFlags &= ~PDP11.OPFLAG.IRQ;\n            }\n        }\n        else if (this.opFlags & PDP11.OPFLAG.IRQ_DELAY) {\n            /*\n             * We know that IRQ (bit 2) is clear, so since IRQ_DELAY (bit 0) is set, incrementing opFlags\n             * will eventually transform IRQ_DELAY into IRQ, without affecting any other (higher) bits.\n             */\n            this.opFlags++;\n        }\n        return fInterrupt;\n    }\n\n    /**\n     * dispatchInterrupt(vector, priority)\n     *\n     * TODO: The process of dispatching an interrupt MUST cost some cycles; either trap() needs to assess\n     * that cost, or we do.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} vector\n     * @param {number} priority\n     * @return {boolean} (true if dispatched, false if not)\n     */\n    dispatchInterrupt(vector, priority)\n    {\n        var priorityCPU = (this.regPSW & PDP11.PSW.PRI) >> PDP11.PSW.SHIFT.PRI;\n        if (priority > priorityCPU) {\n            if (this.opFlags & PDP11.OPFLAG.WAIT) {\n                this.advancePC(2);\n                this.opFlags &= ~PDP11.OPFLAG.WAIT;\n            }\n            this.trap(vector, 0, PDP11.REASON.INTERRUPT);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * checkTraps()\n     *\n     * NOTE: The following code processes these \"deferred\" traps in priority order.  Unfortunately, that\n     * order seems to have changed since the 11/20.  For reference, here's the priority list for the 11/20:\n     *\n     *      1. Bus Errors\n     *      2. Instruction Traps\n     *      3. Trace Trap\n     *      4. Stack Overflow Trap\n     *      5. Power Failure Trap\n     *\n     * and for the 11/70:\n     *\n     *      1. HALT (Instruction, Switch, or Command)\n     *      2. MMU Faults\n     *      3. Parity Errors\n     *      4. Bus Errors (including stack overflow traps?)\n     *      5. Floating Point Traps\n     *      6. TRAP Instruction\n     *      7. TRACE Trap\n     *      8. OVFL Trap\n     *      9. Power Fail Trap\n     *     10. Console Bus Request (Front Panel Operation)\n     *     11. PIR 7, BR 7, PIR 6, BR 6, PIR 5, BR 5, PIR 4, BR 4, PIR 3, BR 3, PIR 2, PIR 1\n     *     12. WAIT Loop\n     *\n     * TODO: Determine 1) if the 11/20 Handbook was wrong, or 2) if the 11/70 really has different priorities.\n     *\n     * Also, as the PDP-11/20 Handbook (1971), p.100, notes:\n     *\n     *      If a bus error is caused by the trap process handling instruction traps, trace traps, stack overflow\n     *      traps, or a previous bus error, the processor is halted.\n     *\n     *      If a stack overflow is caused by the trap process in handling bus errors, instruction traps, or trace traps,\n     *      the process is completed and then the stack overflow trap is sprung.\n     *\n     * TODO: Based on the above notes, we should probably be halting the CPU when a bus error occurs during a trap.\n     *\n     * @this {CPUStatePDP11}\n     * @return {boolean} (true if dispatched, false if not)\n     */\n    checkTraps()\n    {\n        if (this.opFlags & PDP11.OPFLAG.TRAP_MMU) {\n            this.trap(PDP11.TRAP.MMU, PDP11.OPFLAG.TRAP_MMU, PDP11.REASON.FAULT);\n            return true;\n        }\n        if (this.opFlags & PDP11.OPFLAG.TRAP_SP) {\n            this.trap(PDP11.TRAP.BUS, PDP11.OPFLAG.TRAP_SP, PDP11.REASON.YELLOW);\n            return true;\n        }\n        if (this.opFlags & PDP11.OPFLAG.TRAP_TF) {\n            this.trap(PDP11.TRAP.BPT, PDP11.OPFLAG.TRAP_TF, PDP11.REASON.TRACE);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * isWaiting()\n     *\n     * @this {CPUStatePDP11}\n     * @return {boolean} (true if OPFLAG.WAIT is set, false otherwise)\n     */\n    isWaiting()\n    {\n        return !!(this.opFlags & PDP11.OPFLAG.WAIT);\n    }\n\n    /**\n     * getPSW()\n     *\n     * @this {CPUStatePDP11}\n     * @return {number}\n     */\n    getPSW()\n    {\n        var mask = PDP11.PSW.CMODE | PDP11.PSW.PMODE | PDP11.PSW.REGSET | PDP11.PSW.PRI | PDP11.PSW.TF;\n        return this.regPSW = (this.regPSW & mask) | this.getNF() | this.getZF() | this.getVF() | this.getCF();\n    }\n\n    /**\n     * setPSW(newPSW)\n     *\n     * This updates the CPU Processor Status Word.  The PSW should generally be written through\n     * this routine so that changes can be tracked properly, for example the correct register set,\n     * the current memory management mode, etc.  An exception is SPL which writes the priority directly.\n     * Note that that N, Z, V, and C flags are actually stored separately for performance reasons.\n     *\n     * PSW    15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0\n     *        CMODE PMODE RS -------- PRIORITY  T  N  Z  V  C\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} newPSW\n     */\n    setPSW(newPSW)\n    {\n        newPSW &= this.pswUsed;\n        this.flagN = newPSW << 12;\n        this.flagZ = (~newPSW) & 4;\n        this.flagV = newPSW << 14;\n        this.flagC = newPSW << 16;\n        if ((newPSW ^ this.regPSW) & this.pswRegSet) {\n            /*\n             * Swap register sets\n             */\n            for (var i = this.regsAlt.length; --i >= 0;) {\n                var tmp = this.regsGen[i];\n                this.regsGen[i] = this.regsAlt[i];\n                this.regsAlt[i] = tmp;\n            }\n        }\n        this.pswMode = (newPSW >> PDP11.PSW.SHIFT.CMODE) & PDP11.MODE.MASK;\n        var oldMode = (this.regPSW >> PDP11.PSW.SHIFT.CMODE) & PDP11.MODE.MASK;\n        if (this.pswMode != oldMode) {\n            /*\n             * Swap stack pointers\n             */\n            this.regsAltStack[oldMode] = this.regsGen[6];\n            this.regsGen[6] = this.regsAltStack[this.pswMode];\n        }\n        this.regPSW = newPSW;\n\n        /*\n         * Trigger a call to checkInterrupts(), just in case.  If there's an active IRQ, then setting\n         * OPFLAG.IRQ is a no-brainer, but even if not, we set IRQ_DELAY in case the priority was lowered\n         * enough to permit a programmed interrupt (via regPIR).\n         */\n        this.opFlags &= ~PDP11.OPFLAG.IRQ;\n        this.opFlags |= (this.irqNext? PDP11.OPFLAG.IRQ : PDP11.OPFLAG.IRQ_DELAY);\n    }\n\n    /**\n     * getSLR()\n     *\n     * @this {CPUStatePDP11}\n     * @return {number}\n     */\n    getSLR()\n    {\n        return this.regSLR & 0xff00;\n    }\n\n    /**\n     * setSLR(newSL)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} newSLR\n     */\n    setSLR(newSLR)\n    {\n        this.regSLR = newSLR | 0xff;\n    }\n\n    /**\n     * getPIR()\n     *\n     * @this {CPUStatePDP11}\n     * @return {number}\n     */\n    getPIR()\n    {\n        return this.regPIR;\n    }\n\n    /**\n     * setPIR(newPIR)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} newPIR\n     */\n    setPIR(newPIR)\n    {\n        newPIR &= PDP11.PIR.BITS;\n        if (newPIR) {\n            var bits = newPIR >> PDP11.PIR.SHIFT.BITS;\n            do {\n                newPIR += PDP11.PIR.PIA_INC;\n            } while (bits >>= 1);\n            this.opFlags |= PDP11.OPFLAG.IRQ_DELAY;\n        }\n        this.regPIR = newPIR;\n    }\n\n    /**\n     * updateNZVFlags(result)\n     *\n     * NOTE: Only N and Z are updated based on the result; V is zeroed, C is unchanged.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} result\n     */\n    updateNZVFlags(result)\n    {\n        this.flagN = this.flagZ = result;\n        this.flagV = 0;\n    }\n\n    /**\n     * updateNZVCFlags(result)\n     *\n     * NOTE: Only N and Z are updated based on the result; both V and C are simply zeroed.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} result\n     */\n    updateNZVCFlags(result)\n    {\n        this.flagN = this.flagZ = result;\n        this.flagV = this.flagC = 0;\n    }\n\n    /**\n     * updateAllFlags(result, overflow)\n     *\n     * NOTE: The V flag is simply zeroed, unless a specific value is provided (eg, by NEG).\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} result\n     * @param {number} [overflow]\n     */\n    updateAllFlags(result, overflow)\n    {\n        this.flagN = this.flagZ = this.flagC = result;\n        this.flagV = overflow || 0;\n    }\n\n    /**\n     * updateAddFlags(result, src, dst)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} result (dst + src)\n     * @param {number} src\n     * @param {number} dst\n     */\n    updateAddFlags(result, src, dst)\n    {\n        this.flagN = this.flagZ = this.flagC = result;\n        this.flagV = (src ^ result) & (dst ^ result);\n    }\n\n    /**\n     * updateDecFlags(result, dst)\n     *\n     * NOTE: We could have used updateSubFlags() if not for the fact that the C flag must be preserved.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} result (dst - src, where src is an implied 1)\n     * @param {number} dst\n     */\n    updateDecFlags(result, dst)\n    {\n        this.flagN = this.flagZ = result;\n        /*\n         * Because src is always 1 (with a zero sign bit), it can be optimized out of this calculation.\n         */\n        this.flagV = (/* src ^ */ dst) & (dst ^ result);\n    }\n\n    /**\n     * updateIncFlags(result, dst)\n     *\n     * NOTE: We could have used updateAddFlags() if not for the fact that the C flag must be preserved.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} result (dst + src, where src is an implied 1)\n     * @param {number} dst\n     */\n    updateIncFlags(result, dst)\n    {\n        this.flagN = this.flagZ = result;\n        /*\n         * Because src is always 1 (with a zero sign bit), it can be optimized out of this calculation.\n         */\n        this.flagV = (/* src ^ */ result) & (dst ^ result);\n    }\n\n    /**\n     * updateMulFlags(result)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} result\n     */\n    updateMulFlags(result)\n    {\n        this.flagN = result >> 16;\n        this.flagZ = this.flagN | result;\n        this.flagV = 0;\n        this.flagC = (result < -32768 || result > 32767)? 0x10000 : 0;\n    }\n\n    /**\n     * updateShiftFlags(result)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} result\n     */\n    updateShiftFlags(result)\n    {\n        this.flagN = this.flagZ = this.flagC = result;\n        this.flagV = this.flagN ^ (this.flagC >> 1);\n    }\n\n    /**\n     * updateSubFlags(result, src, dst)\n     *\n     * NOTE: CMP operations calculate (src - dst) rather than (dst - src), so when they call updateSubFlags(),\n     * they must reverse the order of the src and dst parameters.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} result (dst - src)\n     * @param {number} src\n     * @param {number} dst\n     */\n    updateSubFlags(result, src, dst)\n    {\n        this.flagN = this.flagZ = this.flagC = result;\n        this.flagV = (src ^ dst) & (dst ^ result);\n    }\n\n    /**\n     * trap(vector, flag, reason)\n     *\n     * trap() handles all the trap/abort functions.  It reads the trap vector from kernel\n     * D space, changes mode to reflect the new PSW and PC, and then pushes the old PSW and\n     * PC onto the new mode stack.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} vector\n     * @param {number} flag\n     * @param {number} [reason] (for diagnostic purposes only)\n     */\n    trap(vector, flag, reason)\n    {\n        if (DEBUG && this.dbg) {\n            if (this.messageEnabled(MessagesPDP11.TRAP)) {\n                var sReason = reason < 0? PDP11.REASONS[-reason] : this.dbg.toStrBase(reason);\n                this.printMessage(\"trap to vector \" + this.dbg.toStrBase(vector, 8) + \" (\" + sReason + \")\", MessagesPDP11.TRAP, true);\n            }\n        }\n\n        if (this.nDisableTraps) return;\n\n        if (this.pswTrap < 0) {\n            this.pswTrap = this.getPSW();\n        } else if (!this.pswMode) {\n            reason = PDP11.REASON.RED;      // double-fault (nested trap) forces a RED condition\n        }\n\n        if (reason == PDP11.REASON.RED) {\n            if (this.opFlags & PDP11.OPFLAG.TRAP_RED) {\n                reason = PDP11.REASON.PANIC;\n            }\n            this.opFlags |= PDP11.OPFLAG.TRAP_RED;\n            /*\n             * The next two lines used to be deferred until after the setPSW() below, but\n             * I'm not seeing any dependencies on these registers, so I'm consolidating the code.\n             */\n            this.regErr |= PDP11.CPUERR.RED;\n            this.regsGen[6] = vector = 4;\n        }\n\n        if (reason != PDP11.REASON.PANIC) {\n            /*\n             * NOTE: Pre-setting the auto-dec values for MMR1 to 0xF6F6 is a work-around for an \"EKBEE1\"\n             * diagnostic (PC 056710), which tests what happens when a misaligned read triggers a BUS trap,\n             * and that trap then triggers an MMU trap during the first pushWord() below.\n             *\n             * One would think it would be fine to zero those bits by setting opLast to vector alone,\n             * and then letting each of the pushWord() calls below shift their own 0xF6 auto-dec value into\n             * opLast.  When the first pushWord() triggers an MMU trap, we obviously won't get to the second\n             * pushWord(), yet the diagnostic expects TWO auto-decs to be recorded.  I'm puzzled why the\n             * hardware apparently indicates TWO auto-decs, if SP wasn't actually decremented twice, but who\n             * am I to judge.\n             */\n            this.opLast = vector | 0xf6f60000;\n\n            /*\n             * Read from kernel D space\n             */\n            this.pswMode = 0;\n            var newPC = this.readWord(vector | this.addrDSpace);\n            var newPSW = this.readWord(((vector + 2) & 0xffff) | this.addrDSpace);\n\n            /*\n             * Set new PSW with previous mode\n             */\n            this.setPSW((newPSW & ~PDP11.PSW.PMODE) | ((this.pswTrap >> 2) & PDP11.PSW.PMODE));\n\n            this.pushWord(this.pswTrap);\n            this.pushWord(this.regsGen[7]);\n            this.setPC(newPC);\n        }\n\n        /*\n         * TODO: Determine the appropriate number of cycles for traps; all I've done for now is move the\n         * cycle charge from opTrap() to here, and reduced the amount the other opcode handlers that call\n         * trap() charge by a corresponding amount (5).\n         */\n        this.nStepCycles -= (4 + 1);\n\n        /*\n         * DEC's \"TRAP TEST\" (MAINDEC-11-D0NA-PB) triggers a RESERVED trap with an invalid opcode and the\n         * stack deliberately set too low, and expects the stack overflow trap to be \"sprung\" immediately\n         * afterward, so we only want to \"lose interest\" in the TRAP flag(s) that were set on entry, not ALL\n         * of them.\n         *\n         *      this.opFlags &= ~PDP11.OPFLAG.TRAP_MASK;    // lose interest in traps after an abort\n         *\n         * Well, OK, we're also supposed to \"lose interest\" in the TF flag, too; otherwise, DEC tests fail.\n         *\n         * Finally, setPSW() likes to always set IRQ, to force a check of hardware interrupts prior to\n         * the next instruction, just in case the PSW priority was lowered.  However, there are \"TRAP TEST\"\n         * tests like this one:\n         *\n         *      005640: 012706 007700          MOV   #7700,SP\n         *      005644: 012767 000340 172124   MOV   #340,177776\n         *      005652: 012767 000100 171704   MOV   #100,177564\n         *      005660: 012767 005712 172146   MOV   #5712,000034   ; set TRAP vector (its PSW is already zero)\n         *      005666: 012767 005714 172170   MOV   #5714,000064   ; set hardware interrupt vector (its PSW is already zero)\n         *      005674: 012767 005716 172116   MOV   #5716,000020   ; set IOT vector\n         *      005702: 012767 000340 172112   MOV   #340,000022    ; set IOT PSW\n         *      005710: 104400                 TRAP  000\n         *      005712: 000004                 IOT\n         *      005714: 000000                 HALT\n         *\n         * where, after \"TRAP 000\" has executed, a hardware interrupt will be acknowledged, and instead of\n         * executing the IOT, we'll execute the HALT and fail the test.  We avoid that by relying on the same\n         * trick that the SPL instruction uses: setting IRQ_DELAY instead of IRQ, which effectively delays\n         * IRQ detection for one instruction, which is just long enough to allow the diagnostic to pass.\n         */\n        this.opFlags &= ~(flag | PDP11.OPFLAG.TRAP_TF | PDP11.OPFLAG.IRQ_MASK);\n        this.opFlags |= PDP11.OPFLAG.IRQ_DELAY | PDP11.OPFLAG.TRAP_LAST;\n\n        this.pswTrap = -1;                                  // reset flag that we have a trap within a trap\n\n        /*\n         * These next properties (in conjunction with setting PDP11.OPFLAG.TRAP_LAST) are purely an aid for the Debugger;\n         * see getTrapStatus().\n         */\n        this.trapReason = reason;\n        this.trapVector = vector;\n\n        if (reason == PDP11.REASON.PANIC) {\n            this.stopCPU();\n        }\n        if (reason >= PDP11.REASON.RED) throw vector;\n    }\n\n    /**\n     * trapReturn()\n     *\n     * @this {CPUStatePDP11}\n     */\n    trapReturn()\n    {\n        /*\n         * This code used to defer updating regsGen[6] (SP) until after BOTH words had been popped, which seems\n         * safer, but if we're going to do pushes in trap(), then I see no reason to avoid doing pops in trapReturn().\n         */\n        var addr = this.popWord();\n        var newPSW = this.popWord();\n        if (this.regPSW & PDP11.PSW.CMODE) {\n            /*\n             * Keep SPL and allow lower only for modes and register set.\n             *\n             * TODO: Review, because it seems a bit odd to only CLEAR the PRI bits in the new PSW, and then to OR in\n             * CMODE, PMODE, and REGSET bits from the current PSW.\n             */\n            newPSW = (newPSW & ~PDP11.PSW.PRI) | (this.regPSW & (PDP11.PSW.PRI | PDP11.PSW.REGSET | PDP11.PSW.PMODE | PDP11.PSW.CMODE));\n        }\n        this.setPC(addr);\n        this.setPSW(newPSW);\n        this.opFlags &= ~PDP11.OPFLAG.TRAP_TF;\n    }\n\n    /**\n     * getTrapStatus()\n     *\n     * @this {CPUStatePDP11}\n     * @return {number}\n     */\n    getTrapStatus()\n    {\n        return (this.opFlags & PDP11.OPFLAG.TRAP_LAST)? (this.trapVector | this.trapReason << 8) : 0;\n    }\n\n    /**\n     * mapUnibus(addr)\n     *\n     * Used to convert 18-bit addresses to 22-bit addresses.  Since mapUnibus() only looks at the low 18 bits of addr,\n     * there's no need to mask addr first.  Note that if bits 13-17 are all set, then the 18-bit address points to the\n     * top 8Kb of its 256Kb range, and mapUnibus() will return addr unchanged, since it should already be pointing to\n     * the top 8Kb of the 4Mb 22-bit range.\n     *\n     * Also, when bits 18-21 of addr are ALL set (which callers check using addr >= BusPDP11.UNIBUS_22BIT aka 0x3C0000),\n     * then we have a 22-bit address pointing to the top 256Kb range, so if the UNIBUS relocation map is enabled, we again\n     * pass the lower 18 bits of that address through the map.\n     *\n     * From the PDP-11/70 Handbook:\n     *\n     *      On the 11/44 and 11/70, there are a total of 31 mapping registers for address relocation.  Each register is\n     *      composed of a double 16-bit PDP-11 word (in consecutive locations) that holds the 22-bit base address.  These\n     *      registers have UNIBUS addresses in the range 770200 to 770372.\n     *\n     *      If the UNIBUS map relocation is not enabled, an incoming 18-bit UNIBUS address has 4 leading zeroes added for\n     *      referencing a 22-bit physical address. The lower 18 bits are the same. No relocation is performed.\n     *\n     *      If UNIBUS map relocation is enabled, the five high order bits of the UNIBUS address are used to select one of the\n     *      31 mapping registers.  The low-order 13 bits of the incoming address are used as an offset from the base address\n     *      contained in the 22-bit mapping register.  To form the physical address, the 13 low-order bits of the UNIBUS\n     *      address are added to 22 bits of the selected mapping register to produce the 22-bit physical address.  The lowest\n     *      order bit of all mapping registers is always a zero, since relocation is always on word boundaries.\n     *\n     * Sadly, because these mappings occur at a word-granular level, we can't implement the mappings by simply shuffling\n     * the underlying block around in the Bus component; it would be much more efficient if we could.  That's how we move\n     * the IOPAGE in response to addressing changes.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     * @return {number}\n     */\n    mapUnibus(addr)\n    {\n        var idx = (addr >> 13) & 0x1F;\n        if (idx < 31) {\n            if (this.regMMR3 & PDP11.MMR3.UNIBUS_MAP) {\n                /*\n                 * The UNIBUS map relocation is enabled\n                 */\n                addr = (this.regsUniMap[idx] + (addr & 0x1FFF)) & BusPDP11.MASK_22BIT;\n                /*\n                 * TODO: Review this assertion.\n                 *\n                 *\n                 */\n            } else {\n                /*\n                 * Since UNIBUS map relocation is NOT enabled, then as explained above:\n                 *\n                 *      If the UNIBUS map relocation is not enabled, an incoming 18-bit UNIBUS address has 4 leading zeroes added for\n                 *      referencing a 22-bit physical address. The lower 18 bits are the same. No relocation is performed.\n                 */\n                addr &= ~BusPDP11.UNIBUS_22BIT;\n            }\n        }\n        return addr;\n    }\n\n    /**\n     * getAddrInfo(addr, fPhysical)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     * @param {boolean} [fPhysical]\n     * @return {Array}\n     */\n    getAddrInfo(addr, fPhysical)\n    {\n        var a = [];\n        var addrPhysical;\n\n        if (fPhysical) {\n            addrPhysical = this.mapUnibus(addr);\n            var idx = (addr >> 13) & 0x1F;\n            a.push(addrPhysical);\n            a.push(idx);\n            if (this.regMMR3 & PDP11.MMR3.UNIBUS_MAP) {\n                a.push(this.regsUniMap[idx]);\n                a.push(addr & 0x1FFF);\n            }\n        }\n        else if (!this.mmuEnable) {\n            addrPhysical = addr & 0xffff;\n            if (addrPhysical >= BusPDP11.IOPAGE_16BIT) addrPhysical |= this.addrIOPage;\n            a.push(addrPhysical);\n        }\n        else {\n            var mode = this.pswMode << 1;\n            var page = addr >> 13;\n            if (page > 7) mode |= 1;\n            if (!(this.regMMR3 & this.mapMMR3[this.pswMode])) page &= 7;\n            var pdr = this.regsPDR[this.pswMode][page];\n            var off = addr & 0x1fff;\n            var paf = (this.regsPAR[this.pswMode][page] << 6);\n            addrPhysical = (paf + off) & this.mmuMask;\n            if (addrPhysical >= BusPDP11.UNIBUS_22BIT) addrPhysical = this.mapUnibus(addrPhysical);\n            a.push(addrPhysical);   // a[0]\n            a.push(off);            // a[1]\n            a.push(mode);           // a[2] (0=KI, 1=KD, 2=SI, 3=SD, 4=??, 5=??, 6=UI, 7=UD)\n            a.push(page & 7);       // a[3]\n            a.push(paf);            // a[4]\n            a.push(this.mmuMask);   // a[5]\n        }\n        return a;\n    }\n\n    /**\n     * mapVirtualToPhysical(addrVirtual, access)\n     *\n     * mapVirtualToPhysical() does memory management.  It converts a 17-bit I/D virtual address to a\n     * 22-bit physical address.  A real PDP 11/70 memory management unit can be enabled separately for\n     * read and write for diagnostic purposes.  This is handled here by having an enable mask (mmuEnable)\n     * which is tested against the operation access mask (access).  If there is no match, then the virtual\n     * address is simply mapped as a 16 bit physical address with the upper page going to the IO address\n     * space.  Significant access mask values used are PDP11.ACCESS.READ and PDP11.ACCESS.WRITE.\n     *\n     * When doing mapping, pswMode is used to decide what address space is to be used (0 = kernel,\n     * 1 = supervisor, 2 = illegal, 3 = user).  Normally, pswMode is set by the setPSW() function, but\n     * there are exceptions for instructions which move data between address spaces (MFPD, MFPI, MTPD,\n     * and MTPI) and trap().  These will modify pswMode outside of setPSW() and then restore it again if\n     * all worked.  If however something happens to cause a trap then no restore is done as setPSW()\n     * will have been invoked as part of the trap, which will resynchronize pswMode.\n     *\n     * A PDP-11/70 is different from other PDP-11s in that the highest 18 bit space (017000000 & above)\n     * maps directly to UNIBUS space - including low memory. This doesn't appear to be particularly useful\n     * as it restricts maximum system memory - although it does appear to allow software testing of the\n     * UNIBUS map.  This feature also appears to confuse some OSes which test consecutive memory locations\n     * to find maximum memory -- and on a full memory system find themselves accessing low memory again at\n     * high addresses.\n     *\n     * Construction of a Physical Address\n     * ----------------------------------\n     *\n     *      Virtual Addr (VA)                                  12 11 10  9  8  7  6  5  4  3  2  1  0\n     *    + Page Addr Field (PAF)   15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0\n     *                              -----------------------------------------------------------------\n     *    = Physical Addr (PA)      21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0\n     *\n     * The Page Address Field (PAF) comes from a Page Address Register (PAR) that is selected by Virtual\n     * Address (VA) bits 15-13.  You can see from the above alignments that the VA contributes to the low\n     * 13 bits, providing an 8Kb range.\n     *\n     * VA bits 0-5 pass directly through to the PA; those are also called the DIB (Displacement in Block) bits.\n     * VA bits 6-12 are added to the low 7 bits of the PAF and are also called the BN (Block Number) bits.\n     *\n     * You can also think of the entire PAF as a block number, where each block is 64 bytes.  This is consistent\n     * with the LSIZE register at 177760, which is supposed to contain the block number of the last 64-byte block\n     * of memory installed.\n     *\n     * Note that if a PAR is initialized to zero, successively adding 0200 (0x80) to the PAR will advance the\n     * base physical address to the next 8Kb page.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addrVirtual\n     * @param {number} access\n     * @return {number}\n     */\n    mapVirtualToPhysical(addrVirtual, access)\n    {\n        var page, pdr, addr;\n\n        /*\n         * This can happen when the MAINT bit of MMR0 is set but not the ENABLED bit.\n         */\n        if (!(access & this.mmuEnable)) {\n            addr = addrVirtual & 0xffff;\n            if (addr >= BusPDP11.IOPAGE_16BIT) addr |= this.addrIOPage;\n            return addr;\n        }\n\n        page = addrVirtual >> 13;\n        if (!(this.regMMR3 & this.mapMMR3[this.pswMode])) page &= 7;\n        pdr = this.regsPDR[this.pswMode][page];\n        addr = ((this.regsPAR[this.pswMode][page] << 6) + (addrVirtual & 0x1fff)) & this.mmuMask;\n\n        if (addr >= BusPDP11.UNIBUS_22BIT) addr = this.mapUnibus(addr);\n\n        if (this.nDisableTraps) return addr;\n\n        /*\n         * TEST #122 (\"KT BEND\") in the \"EKBEE1\" diagnostic (PC 076060) triggers a NOMEMORY error using\n         * this instruction:\n         *\n         *      076170: 005037 140100          CLR   @#140100\n         *\n         * It also triggers an ODDADDR error using this instruction:\n         *\n         *      076356: 005037 140001          CLR   @#140001\n         *\n         * @paulnank: So it turns out that the memory management unit that does odd address and non-existent\n         * memory trapping: who knew? :-)  I thought these would have been handled at access time.\n         *\n         * @jeffpar: We're assuming, at least, that the MMU does its \"NEXM\" (NOMEMORY) non-existent memory test\n         * very simplistically, by range-checking the address against something like the memory SIZE registers,\n         * because otherwise the MMU would have to wait for a bus time-out: something so prohibitively expensive\n         * that the MMU could not afford to do it.  I rely on addrInvalid, which is derived from the same Bus\n         * getMemoryLimit() service that the SIZE registers (177760--177762) use to derive their value.\n         */\n        if (addr >= this.addrInvalid && addr < this.addrIOPage) {\n            this.regErr |= PDP11.CPUERR.NOMEMORY;\n            this.trap(PDP11.TRAP.BUS, 0, addr);\n        }\n        else if ((addr & 0x1) && !(access & PDP11.ACCESS.BYTE)) {\n            this.regErr |= PDP11.CPUERR.ODDADDR;\n            this.trap(PDP11.TRAP.BUS, 0, addr);\n        }\n\n        var newMMR0 = 0;\n        switch (pdr & PDP11.PDR.ACF.MASK) {\n\n        case PDP11.PDR.ACF.RO1:     // 0x1: read-only, abort on write attempt, memory management trap on read (11/70 only)\n            newMMR0 = PDP11.MMR0.TRAP_MMU;\n            /* falls through */\n\n        case PDP11.PDR.ACF.RO:      // 0x2: read-only, abort on write attempt\n            pdr |= PDP11.PDR.ACCESSED;\n            if (access & PDP11.ACCESS.WRITE) {\n                newMMR0 = PDP11.MMR0.ABORT_RO;\n            }\n            break;\n\n        case PDP11.PDR.ACF.RW1:     // 0x4: read/write, memory management trap upon completion of a read or write\n            newMMR0 = PDP11.MMR0.TRAP_MMU;\n            /* falls through */\n\n        case PDP11.PDR.ACF.RW2:     // 0x5: read/write, memory management trap upon completion of a write (11/70 only)\n            if (access & PDP11.ACCESS.WRITE) {\n                newMMR0 = PDP11.MMR0.TRAP_MMU;\n            }\n            /* falls through */\n\n        case PDP11.PDR.ACF.RW:      // 0x6: read/write, no system trap/abort action\n            pdr |= ((access & PDP11.ACCESS.WRITE) ? (PDP11.PDR.ACCESSED | PDP11.PDR.MODIFIED) : PDP11.PDR.ACCESSED);\n            break;\n\n        default:                    // 0x0 (non-resident, abort all accesses) or 0x3 or 0x7 (unused, abort all accesses)\n            newMMR0 = PDP11.MMR0.ABORT_NR;\n            break;\n        }\n\n        if ((pdr & (PDP11.PDR.PLF | PDP11.PDR.ED)) != PDP11.PDR.PLF) {      // skip checking most common case (hopefully)\n            /*\n             * The Page Descriptor Register (PDR) Page Length Field (PLF) is a 7-bit block number, where a block\n             * is 64 bytes.  Since the bit 0 of the block number is located at bit 8 of the PDR, we shift the PDR\n             * right 2 bits and then clear the bottom 6 bits by masking it with 0x1FC0.\n             */\n            if (pdr & PDP11.PDR.ED) {\n                if (pdr & PDP11.PDR.PLF) {\n                    if ((addrVirtual & 0x1FC0) < ((pdr >> 2) & 0x1FC0)) {\n                        newMMR0 |= PDP11.MMR0.ABORT_PL;\n                    }\n                }\n            } else {\n                if ((addrVirtual & 0x1FC0) > ((pdr >> 2) & 0x1FC0)) {\n                    newMMR0 |= PDP11.MMR0.ABORT_PL;\n                }\n            }\n        }\n\n        /*\n         * Aborts and traps: log FIRST trap and MOST RECENT abort\n         */\n        this.regsPDR[this.pswMode][page] = pdr;\n        if (addr != ((BusPDP11.IOPAGE_22BIT | PDP11.UNIBUS.MMR0) & this.mmuMask) || this.pswMode) {\n            this.mmuLastMode = this.pswMode;\n            this.mmuLastPage = page;\n        }\n\n        if (newMMR0) {\n            if (newMMR0 & PDP11.MMR0.ABORT) {\n                if (this.pswTrap >= 0) {\n                    newMMR0 |= PDP11.MMR0.COMPLETED;\n                }\n                if (!(this.regMMR0 & PDP11.MMR0.ABORT)) {\n                    newMMR0 |= (this.regMMR0 & PDP11.MMR0.TRAP_MMU) | (this.mmuLastMode << 5) | (this.mmuLastPage << 1);\n\n                    this.setMMR0((this.regMMR0 & ~PDP11.MMR0.UPDATE) | (newMMR0 & PDP11.MMR0.UPDATE));\n                }\n                /*\n                 * NOTE: In unusual circumstances, if regMMR0 already indicated an ABORT condition above,\n                 * we run the risk of infinitely looping; eg, we call trap(), which calls mapVirtualToPhysical()\n                 * on the trap vector, which faults again, etc.\n                 *\n                 * TODO: Determine what a real PDP-11 does in that situation; in our case, trap() deals with it\n                 * by checking an internal OPFLAG (TRAP_RED) and turning the next trap into a PANIC, triggering an\n                 * immediate HALT.\n                 */\n                this.trap(PDP11.TRAP.MMU, PDP11.OPFLAG.TRAP_MMU, PDP11.REASON.ABORT);\n            }\n            if (!(this.regMMR0 & (PDP11.MMR0.ABORT | PDP11.MMR0.TRAP_MMU))) {\n                /*\n                 * TODO: Review the code below, because the address range seems over-inclusive.\n                 */\n                if (addr < ((BusPDP11.IOPAGE_22BIT | PDP11.UNIBUS.SIPDR0) & this.mmuMask) ||\n                    addr > ((BusPDP11.IOPAGE_22BIT | PDP11.UNIBUS.UDPAR7 | 0x1) & this.mmuMask)) {\n                    this.regMMR0 |= PDP11.MMR0.TRAP_MMU;\n                    if (this.regMMR0 & PDP11.MMR0.MMU_TRAPS) this.opFlags |= PDP11.OPFLAG.TRAP_MMU;\n                }\n            }\n        }\n        return addr;\n    }\n\n    /**\n     * popWord()\n     *\n     * @this {CPUStatePDP11}\n     * @return {number}\n     */\n    popWord()\n    {\n        var result = this.readWord(this.regsGen[6] | this.addrDSpace);\n        this.regsGen[6] = (this.regsGen[6] + 2) & 0xffff;\n        return result;\n    }\n\n    /**\n     * pushWord(data)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} data\n     */\n    pushWord(data)\n    {\n        var addrVirtual = (this.regsGen[6] - 2) & 0xffff;\n        this.regsGen[6] = addrVirtual;              // BSD needs SP updated before any fault :-(\n        this.opLast = (this.opLast & 0xffff) | ((this.opLast & ~0xffff) << 8) | (0x00f6 << 16);\n        if (!(this.opFlags & PDP11.OPFLAG.TRAP_RED)) this.checkStackLimit(PDP11.ACCESS.WRITE_WORD, -2, addrVirtual);\n        this.writeWord(addrVirtual, data);\n    }\n\n    /**\n     * getAddrByMode(mode, reg, access)\n     *\n     * getAddrByMode() maps a six bit operand to a 17 bit I/D virtual address space.\n     *\n     * Instruction operands are six bits in length - three bits for the mode and three\n     * for the register. The 17th I/D bit in the resulting virtual address represents\n     * whether the reference is to Instruction space or Data space - which depends on\n     * combination of the mode and whether the register is the Program Counter (R7).\n     *\n     * The eight modes are:-\n     *      0   R           no valid virtual address\n     *      1   (R)         operand from I/D depending if R = 7\n     *      2   (R)+        operand from I/D depending if R = 7\n     *      3   @(R)+       address from I/D depending if R = 7 and operand from D space\n     *      4   -(R)        operand from I/D depending if R = 7\n     *      5   @-(R)       address from I/D depending if R = 7 and operand from D space\n     *      6   x(R)        x from I space but operand from D space\n     *      7   @x(R)       x from I space but address and operand from D space\n     *\n     * Also need to keep MMR1 updated as this stores which registers have been\n     * incremented and decremented so that the OS can reset and restart an instruction\n     * if a page fault occurs.\n     *\n     * Stack Overflow Traps\n     * --------------------\n     * On the PDP-11/20, stack overflow traps occur when an address below 400 is referenced\n     * by SP in either mode 4 (auto-decrement) or 5 (auto-decrement deferred).  The instruction\n     * is allowed to complete before the trap is issued.  NOTE: This information comes\n     * directly from the PDP-11/20 Handbook (1971), but the 11/20 diagnostics apparently only\n     * test mode 4, not mode 5, because when I later removed stack limit checks for mode 5 on\n     * the 11/70, none of the 11/20 tests complained.\n     *\n     * TODO: Find some independent confirmation as to whether ANY PDP-11 models check for\n     * stack overflow on mode 5 (auto-decrement deferred); if they do, then further tweaks to\n     * checkStackLimit functions may be required.\n     *\n     * On the PDP-11/70, the stack limit register (177774) allows a variable boundary for the\n     * kernel stack.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} mode\n     * @param {number} reg\n     * @param {number} access\n     * @return {number}\n     */\n    getAddrByMode(mode, reg, access)\n    {\n        var addrVirtual, step;\n        var addrDSpace = (access & PDP11.ACCESS.VIRT)? 0 : this.addrDSpace;\n\n        /*\n         * Modes that need to auto-increment or auto-decrement will break, in order to perform\n         * the update; others will return an address immediately.\n         */\n        switch (mode) {\n        /*\n         * Mode 0: Registers don't have a virtual address, so trap.\n         *\n         * NOTE: Most instruction code paths never call getAddrByMode() when the mode is zero;\n         * JMP and JSR instructions are exceptions, but that's OK, because those are documented as\n         * ILLEGAL instructions which produce a BUS trap (as opposed to UNDEFINED instructions\n         * that cause a RESERVED trap).\n         */\n        case 0:\n            this.trap(PDP11.TRAP.BUS, 0, PDP11.REASON.ILLEGAL);\n            return 0;\n\n        /*\n         * Mode 1: (R)\n         */\n        case 1:\n            if (reg == 6) this.checkStackLimit(access, 0, this.regsGen[6]);\n            this.nStepCycles -= (2 + 1);\n            return (reg == 7? this.regsGen[reg] : (this.regsGen[reg] | addrDSpace));\n\n        /*\n         * Mode 2: (R)+\n         */\n        case 2:\n            step = 2;\n            addrVirtual = this.regsGen[reg];\n            if (reg == 6) this.checkStackLimit(access, step, addrVirtual);\n            if (reg != 7) {\n                addrVirtual |= addrDSpace;\n                if (reg < 6 && (access & PDP11.ACCESS.BYTE)) step = 1;\n            }\n            this.nStepCycles -= (2 + 1);\n            break;\n\n        /*\n         * Mode 3: @(R)+\n         */\n        case 3:\n            step = 2;\n            addrVirtual = this.regsGen[reg];\n            if (reg != 7) addrVirtual |= addrDSpace;\n            addrVirtual = this.readWord(addrVirtual);\n            addrVirtual |= addrDSpace;\n            this.nStepCycles -= (5 + 2);\n            break;\n\n        /*\n         * Mode 4: -(R)\n         */\n        case 4:\n            step = -2;\n            if (reg < 6 && (access & PDP11.ACCESS.BYTE)) step = -1;\n            addrVirtual = (this.regsGen[reg] + step) & 0xffff;\n            if (reg == 6) this.checkStackLimit(access, step, addrVirtual);\n            if (reg != 7) addrVirtual |= addrDSpace;\n            this.nStepCycles -= (3 + 1);\n            break;\n\n        /*\n         * Mode 5: @-(R)\n         */\n        case 5:\n            step = -2;\n            addrVirtual = (this.regsGen[reg] - 2) & 0xffff;\n            if (reg != 7) addrVirtual |= addrDSpace;\n            addrVirtual = this.readWord(addrVirtual) | addrDSpace;\n            this.nStepCycles -= (6 + 2);\n            break;\n\n        /*\n         * Mode 6: d(R)\n         */\n        case 6:\n            addrVirtual = this.readWord(this.advancePC(2));\n            addrVirtual = (addrVirtual + this.regsGen[reg]) & 0xffff;\n            if (reg == 6) this.checkStackLimit(access, 0, addrVirtual);\n            this.nStepCycles -= (4 + 2);\n            return addrVirtual | addrDSpace;\n\n        /*\n         * Mode 7: @d(R)\n         */\n        case 7:\n            addrVirtual = this.readWord(this.advancePC(2));\n            addrVirtual = (addrVirtual + this.regsGen[reg]) & 0xffff;\n            addrVirtual = this.readWord(addrVirtual | this.addrDSpace);\n            this.nStepCycles -= (7 + 3);\n            return addrVirtual | addrDSpace;\n        }\n\n        this.regsGen[reg] = (this.regsGen[reg] + step) & 0xffff;\n        this.opLast = (this.opLast & 0xffff) | ((this.opLast & ~0xffff) << 8) | ((((step << 3) & 0xf8) | reg) << 16);\n\n        return addrVirtual;\n    }\n\n    /**\n     * checkStackLimit1120(access, step, addr)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} access\n     * @param {number} step\n     * @param {number} addr\n     */\n    checkStackLimit1120(access, step, addr)\n    {\n        /*\n         * NOTE: DEC's \"TRAP TEST\" (MAINDEC-11-D0NA-PB) expects \"TST -(SP)\" to trap when SP is 150,\n         * so we ignore the access parameter.  Also, strangely, it does NOT expect this instruction\n         * to trap:\n         *\n         *      R0=006302 R1=000000 R2=000000 R3=000000 R4=000000 R5=000776\n         *      SP=000000 PC=006346 PS=000344 IR=000000 SL=000377 T0 N0 Z1 V0 C0\n         *      006346: 112667 171426          MOVB  (SP)+,000000\n         *\n         * so if the step parameter is positive, we let it go.\n         */\n        if (!this.pswMode && step <= 0 && addr <= this.regSLR) {\n            /*\n             * On older machines (eg, the PDP-11/20), there is no \"YELLOW\" and \"RED\" distinction, and the\n             * instruction is always allowed to complete, so the trap must always be issued in this fashion.\n             */\n            this.opFlags |= PDP11.OPFLAG.TRAP_SP;\n        }\n    }\n\n    /**\n     * checkStackLimit1140(access, step, addr)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} access\n     * @param {number} step\n     * @param {number} addr\n     */\n    checkStackLimit1140(access, step, addr)\n    {\n        if (!this.pswMode) {\n            /*\n             * NOTE: The 11/70 CPU Instruction Exerciser does NOT expect reads to trigger a stack overflow,\n             * so we check the access parameter.\n             *\n             * Moreover, TEST 40 of diagnostic EKBBF0 executes this instruction:\n             *\n             *      R0=177777 R1=032435 R2=152110 R3=000024 R4=153352 R5=001164\n             *      SP=177776 PC=020632 PS=000350 IR=000000 SL=000377 T0 N1 Z0 V0 C0\n             *      020632: 005016                 CLR   @SP                    ;cycles=7\n             *\n             * expecting a RED stack overflow trap.  Yes, using *any* addresses in the IOPAGE for the stack isn't\n             * a good idea, but who said it was illegal?  For now, we're going to restrict overflows to the highest\n             * address tested by the diagnostic (0xFFFE, aka the PSW), by making that address negative.\n             */\n            if (addr >= 0xFFFE) addr |= ~0xFFFF;\n            if ((access & PDP11.ACCESS.WRITE) && addr <= this.regSLR) {\n                /*\n                 * regSLR can never fall below 0xFF, so this subtraction can never go negative, so this comparison\n                 * is always safe.\n                 */\n                if (addr <= this.regSLR - 32) {\n                    this.trap(PDP11.TRAP.BUS, 0, PDP11.REASON.RED);\n                } else {\n                    this.regErr |= PDP11.CPUERR.YELLOW;\n                    this.opFlags |= PDP11.OPFLAG.TRAP_SP;\n                }\n            }\n        }\n    }\n\n    /**\n     * getByteChecked(addr)\n     *\n     * This is the getByte() handler whenever the Debugger has one or more virtual memory READ breakpoints set;\n     * otherwise, getByte() is bound to Bus.getByte().\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     * @return {number}\n     */\n    getByteChecked(addr)\n    {\n        if (DEBUGGER && this.dbg) {\n            this.dbg.checkMemoryRead(addr, 1);\n        }\n        return this.getByteDirect(addr);\n    }\n\n    /**\n     * getWordChecked(addr)\n     *\n     * This is the getWord() handler whenever the Debugger has one or more virtual memory READ breakpoints set;\n     * otherwise, getWord() is bound to Bus.getWord().\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     * @return {number}\n     */\n    getWordChecked(addr)\n    {\n        if (DEBUGGER && this.dbg) {\n            this.dbg.checkMemoryRead(addr, 2);\n        }\n        return this.getWordDirect(addr);\n    }\n\n    /**\n     * setByteChecked(addr, data)\n     *\n     * This is the setByte() handler whenever the Debugger has one or more virtual memory WRITE breakpoints set;\n     * otherwise, setByte() is bound to Bus.setByte().\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     * @param {number} data\n     */\n    setByteChecked(addr, data)\n    {\n        if (DEBUGGER && this.dbg) {\n            this.dbg.checkMemoryWrite(addr, 1);\n        }\n        this.setByteDirect(addr, data);\n    }\n\n    /**\n     * setWordChecked(addr, data)\n     *\n     * This is the setWord() handler whenever the Debugger has one or more virtual memory WRITE breakpoints set;\n     * otherwise, setWord() is bound to Bus.setWord().\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     * @param {number} data\n     */\n    setWordChecked(addr, data)\n    {\n        if (DEBUGGER && this.dbg) {\n            this.dbg.checkMemoryWrite(addr, 2);\n        }\n        this.setWordDirect(addr, data);\n    }\n\n    /**\n     * getByteSafe(addr)\n     *\n     * This interface is expressly for the Debugger, to access virtual memory without faulting.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     * @return {number}\n     */\n    getByteSafe(addr)\n    {\n        this.nDisableTraps++;\n        var b = this.bus.getByte(this.mapVirtualToPhysical(addr, PDP11.ACCESS.READ_BYTE));\n        this.nDisableTraps--;\n        return b;\n    }\n\n    /**\n     * getWordSafe(addr)\n     *\n     * This interface is expressly for the Debugger, to access virtual memory without faulting.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     * @return {number}\n     */\n    getWordSafe(addr)\n    {\n        this.nDisableTraps++;\n        var w = this.bus.getWord(this.mapVirtualToPhysical(addr, PDP11.ACCESS.READ_WORD));\n        this.nDisableTraps--;\n        return w;\n    }\n\n    /**\n     * setByteSafe(addr, data)\n     *\n     * This interface is expressly for the Debugger, to access virtual memory without faulting.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     * @param {number} data\n     */\n    setByteSafe(addr, data)\n    {\n        this.nDisableTraps++;\n        this.bus.setByte(this.mapVirtualToPhysical(addr, PDP11.ACCESS.WRITE_BYTE), data);\n        this.nDisableTraps--;\n    }\n\n    /**\n     * setWordSafe(addr, data)\n     *\n     * This interface is expressly for the Debugger, to access virtual memory without faulting.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     * @param {number} data\n     */\n    setWordSafe(addr, data)\n    {\n        this.nDisableTraps++;\n        this.bus.setWord(this.mapVirtualToPhysical(addr, PDP11.ACCESS.WRITE_WORD), data);\n        this.nDisableTraps--;\n    }\n\n    /**\n     * addMemBreak(addr, fWrite)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     * @param {boolean} fWrite is true for a memory write breakpoint, false for a memory read breakpoint\n     */\n    addMemBreak(addr, fWrite)\n    {\n        if (DEBUGGER) {\n            var nBreaks = fWrite? this.nWriteBreaks++ : this.nReadBreaks++;\n\n            if (!nBreaks) this.setMemoryAccess();\n        }\n    }\n\n    /**\n     * removeMemBreak(addr, fWrite)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     * @param {boolean} fWrite is true for a memory write breakpoint, false for a memory read breakpoint\n     */\n    removeMemBreak(addr, fWrite)\n    {\n        if (DEBUGGER) {\n            var nBreaks = fWrite? --this.nWriteBreaks : --this.nReadBreaks;\n\n            if (!nBreaks) this.setMemoryAccess();\n        }\n    }\n\n    /**\n     * getPhysicalAddrByMode(mode, reg, access)\n     *\n     * This is a handler set up by setMemoryAccess().  All calls should go through getAddr().\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} mode\n     * @param {number} reg\n     * @param {number} access\n     * @return {number}\n     */\n    getPhysicalAddrByMode(mode, reg, access)\n    {\n        return this.getAddrByMode(mode, reg, access);\n    }\n\n    /**\n     * getVirtualAddrByMode(mode, reg, access)\n     *\n     * This is a handler set up by setMemoryAccess().  All calls should go through getAddr().\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} mode\n     * @param {number} reg\n     * @param {number} access\n     * @return {number}\n     */\n    getVirtualAddrByMode(mode, reg, access)\n    {\n        return this.mapVirtualToPhysical(this.getAddrByMode(mode, reg, access), access);\n    }\n\n    /**\n     * readWordFromPhysical(addr)\n     *\n     * This is a handler set up by setMemoryAccess().  All calls should go through readWord().\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     * @return {number}\n     */\n    readWordFromPhysical(addr)\n    {\n        return this.bus.getWord(this.addrLast = addr);\n    }\n\n    /**\n     * readWordFromPhysicalChecked(addr)\n     *\n     * This is a handler set up by setMemoryAccess().  All calls should go through readWord().\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     * @return {number}\n     */\n    readWordFromPhysicalChecked(addr)\n    {\n        if (DEBUGGER && this.dbg) {\n            this.dbg.checkMemoryRead(addr, 2);\n        }\n        return this.readWordFromPhysical(addr);\n    }\n\n    /**\n     * readWordFromVirtual(addrVirtual)\n     *\n     * This is a handler set up by setMemoryAccess().  All calls should go through readWord().\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addrVirtual (input address is 17 bit (I&D))\n     * @return {number}\n     */\n    readWordFromVirtual(addrVirtual)\n    {\n        return this.bus.getWord(this.addrLast = this.mapVirtualToPhysical(addrVirtual, PDP11.ACCESS.READ_WORD));\n    }\n\n    /**\n     * readWordFromVirtualChecked(addrVirtual)\n     *\n     * This is a handler set up by setMemoryAccess().  All calls should go through readWord().\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addrVirtual (input address is 17 bit (I&D))\n     * @return {number}\n     */\n    readWordFromVirtualChecked(addrVirtual)\n    {\n        if (DEBUGGER && this.dbg) {\n            this.dbg.checkMemoryRead(addrVirtual, 2);\n        }\n        return this.readWordFromVirtual(addrVirtual);\n    }\n\n    /**\n     * writeWordToPhysical(addr, data)\n     *\n     * This is a handler set up by setMemoryAccess().  All calls should go through writeWord().\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     * @param {number} data\n     */\n    writeWordToPhysical(addr, data)\n    {\n        this.bus.setWord(this.addrLast = addr, data);\n    }\n\n    /**\n     * writeWordToPhysicalChecked(addr, data)\n     *\n     * This is a handler set up by setMemoryAccess().  All calls should go through writeWord().\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addr\n     * @param {number} data\n     */\n    writeWordToPhysicalChecked(addr, data)\n    {\n        if (DEBUGGER && this.dbg) {\n            this.dbg.checkMemoryWrite(addr, 2);\n        }\n        this.writeWordToPhysical(addr, data);\n    }\n\n    /**\n     * writeWordToVirtual(addrVirtual, data)\n     *\n     * This is a handler set up by setMemoryAccess().  All calls should go through writeWord().\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addrVirtual (input address is 17 bit (I&D))\n     * @param {number} data\n     */\n    writeWordToVirtual(addrVirtual, data)\n    {\n        this.bus.setWord(this.addrLast = this.mapVirtualToPhysical(addrVirtual, PDP11.ACCESS.WRITE_WORD), data);\n    }\n\n    /**\n     * writeWordToVirtualChecked(addrVirtual, data)\n     *\n     * This is a handler set up by setMemoryAccess().  All calls should go through writeWord().\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} addrVirtual (input address is 17 bit (I&D))\n     * @param {number} data\n     */\n    writeWordToVirtualChecked(addrVirtual, data)\n    {\n        if (DEBUGGER && this.dbg) {\n            this.dbg.checkMemoryWrite(addrVirtual, 2);\n        }\n        this.writeWordToVirtual(addrVirtual, data);\n    }\n\n    /**\n     * readWordFromPrevSpace(opCode, access)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} opCode\n     * @param {number} access (really just PDP11.ACCESS.DSPACE or PDP11.ACCESS.ISPACE)\n     * @return {number}\n     */\n    readWordFromPrevSpace(opCode, access)\n    {\n        var data;\n        var reg = this.dstReg = opCode & PDP11.OPREG.MASK;\n        var mode = this.dstMode = (opCode & PDP11.OPMODE.MASK) >> PDP11.OPMODE.SHIFT;\n        if (!mode) {\n            if (reg != 6 || ((this.regPSW >> 2) & PDP11.PSW.PMODE) === (this.regPSW & PDP11.PSW.PMODE)) {\n                data = this.regsGen[reg];\n            } else {\n                data = this.regsAltStack[(this.regPSW >> 12) & 3];\n            }\n        } else {\n            var addr = this.getAddrByMode(mode, reg, PDP11.ACCESS.READ_WORD);\n            if (!(access & PDP11.ACCESS.DSPACE)) {\n                if ((this.regPSW & 0xf000) !== 0xf000) addr &= 0xffff;\n            }\n            this.pswMode = (this.regPSW >> 12) & 3;\n            data = this.readWord(addr | (access & this.addrDSpace));\n            this.pswMode = (this.regPSW >> 14) & 3;\n        }\n        return data;\n    }\n\n    /**\n     * writeWordToPrevSpace(opCode, access, data)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} opCode\n     * @param {number} access (really just PDP11.ACCESS.DSPACE or PDP11.ACCESS.ISPACE)\n     * @param {number} data\n     */\n    writeWordToPrevSpace(opCode, access, data)\n    {\n        this.opLast = (this.opLast & 0xffff) | (0x0016 << 16);\n        var reg = this.dstReg = opCode & PDP11.OPREG.MASK;\n        var mode = this.dstMode = (opCode & PDP11.OPMODE.MASK) >> PDP11.OPMODE.SHIFT;\n        if (!mode) {\n            if (reg != 6 || ((this.regPSW >> 2) & PDP11.PSW.PMODE) === (this.regPSW & PDP11.PSW.PMODE)) {\n                this.regsGen[reg] = data;\n            } else {\n                this.regsAltStack[(this.regPSW >> 12) & 3] = data;\n            }\n        } else {\n            var addr = this.getAddrByMode(mode, reg, PDP11.ACCESS.WRITE_WORD);\n            if (!(access & PDP11.ACCESS.DSPACE)) addr &= 0xffff;\n            /*\n             * TODO: Consider replacing the following code with writeWord(), by adding optional pswMode\n             * parameters for each of the discrete mapVirtualToPhysical() and setWord() operations, because\n             * as it stands, this is the only remaining call to mapVirtualToPhysical() outside of our\n             * setMemoryAccess() handlers.\n             */\n            this.pswMode = (this.regPSW >> 12) & 3;\n            addr = this.mapVirtualToPhysical(addr | (access & PDP11.ACCESS.DSPACE), PDP11.ACCESS.WRITE);\n            this.pswMode = (this.regPSW >> 14) & 3;\n            this.setWord(addr, data);\n        }\n    }\n\n    /**\n     * readSrcByte(opCode)\n     *\n     * WARNING: If the SRC operand is a register, offRegSrc ensures we return a negative register number\n     * rather than the register value, because on the PDP-11/20, the final value of the register must be\n     * resolved AFTER the DST operand has been decoded and any pre-decrement or post-increment operations\n     * affecting the SRC register have been completed.  See readSrcWord() for more details.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} opCode\n     * @return {number}\n     */\n    readSrcByte(opCode)\n    {\n        var result;\n        opCode >>= PDP11.SRCMODE.SHIFT;\n        var reg = this.srcReg = opCode & PDP11.OPREG.MASK;\n        var mode = this.srcMode = (opCode & PDP11.OPMODE.MASK) >> PDP11.OPMODE.SHIFT;\n        if (!mode) {\n            result = this.regsGen[reg + this.offRegSrc] & this.maskRegSrcByte;\n        } else {\n            result = this.getByte(this.getAddr(mode, reg, PDP11.ACCESS.READ_BYTE));\n        }\n        return result;\n    }\n\n    /**\n     * readSrcWord(opCode)\n     *\n     * WARNING: If the SRC operand is a register, offRegSrc ensures we return a negative register number\n     * rather than the register value, because on the PDP-11/20, the final value of the register must be\n     * resolved AFTER the DST operand has been decoded and any pre-decrement or post-increment operations\n     * affecting the SRC register have been completed.\n     *\n     * Here's an example from DEC's \"TRAP TEST\" (MAINDEC-11-D0NA-PB):\n     *\n     *      007200: 012700 006340          MOV   #6340,R0\n     *      007204: 010020                 MOV   R0,(R0)+\n     *      007206: 026727 177126 006342   CMP   006340,#6342\n     *      007214: 001401                 BEQ   007220\n     *      007216: 000000                 HALT\n     *\n     * If this function returned the value of R0 for the SRC operand of \"MOV R0,(R0)+\", then the operation\n     * would write 6340 to the destination, rather than 6342.\n     *\n     * Most callers don't need to worry about this, because if they pass the result from readSrcWord() directly\n     * to writeDstWord() or updateDstWord(), those functions will take care of converting any negative register\n     * number back into the current register value.  The exceptions are opcodes that don't modify the DST operand\n     * (BIT, BITB, CMP, and CMPB); those opcode handlers must deal with negative register numbers themselves.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} opCode\n     * @return {number}\n     */\n    readSrcWord(opCode)\n    {\n        var result;\n        opCode >>= PDP11.SRCMODE.SHIFT;\n        var reg = this.srcReg = opCode & PDP11.OPREG.MASK;\n        var mode = this.srcMode = (opCode & PDP11.OPMODE.MASK) >> PDP11.OPMODE.SHIFT;\n        if (!mode) {\n            result = this.regsGen[reg + this.offRegSrc];\n        } else {\n            result = this.getWord(this.getAddr(mode, reg, PDP11.ACCESS.READ_WORD));\n        }\n        return result;\n    }\n\n    /**\n     * readDstAddr(opCode)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} opCode\n     * @return {number}\n     */\n    readDstAddr(opCode)\n    {\n        var reg = this.dstReg = opCode & PDP11.OPREG.MASK;\n        var mode = this.dstMode = (opCode & PDP11.OPMODE.MASK) >> PDP11.OPMODE.SHIFT;\n        return this.getAddrByMode(mode, reg, PDP11.ACCESS.VIRT);\n    }\n\n    /**\n     * readDstByte(opCode)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} opCode\n     * @return {number}\n     */\n    readDstByte(opCode)\n    {\n        var result;\n        var reg = this.dstReg = opCode & PDP11.OPREG.MASK;\n        var mode = this.dstMode = (opCode & PDP11.OPMODE.MASK) >> PDP11.OPMODE.SHIFT;\n        if (!mode) {\n            result = this.regsGen[reg] & 0xff;\n        } else {\n            result = this.getByte(this.getAddr(mode, reg, PDP11.ACCESS.READ_BYTE));\n        }\n        return result;\n    }\n\n    /**\n     * readDstWord(opCode)\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} opCode\n     * @return {number}\n     */\n    readDstWord(opCode)\n    {\n        var result;\n        var reg = this.dstReg = opCode & PDP11.OPREG.MASK;\n        var mode = this.dstMode = (opCode & PDP11.OPMODE.MASK) >> PDP11.OPMODE.SHIFT;\n        if (!mode) {\n            result = this.regsGen[reg];\n        } else {\n            result = this.getWord(this.getAddr(mode, reg, PDP11.ACCESS.READ_WORD));\n        }\n        return result;\n    }\n\n    /**\n     * updateDstByte(opCode, data, fnOp)\n     *\n     * Used whenever the DST operand (as described by opCode) needs to be read before writing.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} opCode\n     * @param {number} data\n     * @param {function(number,number)} fnOp\n     */\n    updateDstByte(opCode, data, fnOp)\n    {\n        var reg = this.dstReg = opCode & PDP11.OPREG.MASK;\n        var mode = this.dstMode = (opCode & PDP11.OPMODE.MASK) >> PDP11.OPMODE.SHIFT;\n        if (!mode) {\n            var dst = this.regsGen[reg];\n            data = (data < 0? (this.regsGen[-data-1] & 0xff) : data);\n            this.regsGen[reg] = (dst & 0xff00) | fnOp.call(this, data, dst & 0xff);\n        } else {\n            var addr = this.dstAddr = this.getAddr(mode, reg, PDP11.ACCESS.UPDATE_BYTE);\n            data = (data < 0? (this.regsGen[-data-1] & 0xff) : data);\n            this.setByte(addr, fnOp.call(this, data, this.getByte(addr)));\n            if (addr & 1) this.nStepCycles--;\n        }\n    }\n\n    /**\n     * updateDstWord(opCode, data, fnOp)\n     *\n     * Used whenever the DST operand (as described by opCode) needs to be read before writing.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} opCode\n     * @param {number} data\n     * @param {function(number,number)} fnOp\n     */\n    updateDstWord(opCode, data, fnOp)\n    {\n        var reg = this.dstReg = opCode & PDP11.OPREG.MASK;\n        var mode = this.dstMode = (opCode & PDP11.OPMODE.MASK) >> PDP11.OPMODE.SHIFT;\n\n\n\n        if (!mode) {\n            this.regsGen[reg] = fnOp.call(this, data < 0? this.regsGen[-data-1] : data, this.regsGen[reg]);\n        } else {\n            var addr = this.getAddr(mode, reg, PDP11.ACCESS.UPDATE_WORD);\n            this.setWord(addr, fnOp.call(this, data < 0? this.regsGen[-data-1] : data, this.getWord(addr)));\n        }\n    }\n\n    /**\n     * writeDstByte(opCode, data, writeFlags, fnFlags)\n     *\n     * Used whenever the DST operand (as described by opCode) does NOT need to be read before writing.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} opCode\n     * @param {number} data\n     * @param {number} writeFlags (WRITE.BYTE aka 0xff, or WRITE.SBYTE aka 0xffff)\n     * @param {function(number)} fnFlags\n     */\n    writeDstByte(opCode, data, writeFlags, fnFlags)\n    {\n\n        var reg = this.dstReg = opCode & PDP11.OPREG.MASK;\n        var mode = this.dstMode = (opCode & PDP11.OPMODE.MASK) >> PDP11.OPMODE.SHIFT;\n        if (!mode) {\n            if (!data) {\n                /*\n                 * Potentially worthless optimization (but it looks good on \"paper\").\n                 */\n                this.regsGen[reg] &= ~writeFlags;\n            } else {\n                /*\n                 * Potentially worthwhile optimization: skipping the sign-extending data shifts\n                 * if writeFlags is WRITE.BYTE (but that requires an extra test and separate code paths).\n                 */\n                data = (data < 0? (this.regsGen[-data-1] & 0xff): data);\n                this.regsGen[reg] = (this.regsGen[reg] & ~writeFlags) | (((data << 24) >> 24) & writeFlags);\n            }\n            fnFlags.call(this, data << 8);\n        } else {\n            var addr = this.getAddr(mode, reg, PDP11.ACCESS.WRITE_BYTE);\n            fnFlags.call(this, (data = data < 0? (this.regsGen[-data-1] & 0xff) : data) << 8);\n            this.setByte(addr, data);\n            if (addr & 1) this.nStepCycles--;\n        }\n    }\n\n    /**\n     * writeDstWord(opCode, data, fnFlags)\n     *\n     * Used whenever the DST operand (as described by opCode) does NOT need to be read before writing.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} opCode\n     * @param {number} data\n     * @param {function(number)} fnFlags\n     */\n    writeDstWord(opCode, data, fnFlags)\n    {\n        var reg = this.dstReg = opCode & PDP11.OPREG.MASK;\n        var mode = this.dstMode = (opCode & PDP11.OPMODE.MASK) >> PDP11.OPMODE.SHIFT;\n\n\n\n        if (!mode) {\n            this.regsGen[reg] = (data = data < 0? this.regsGen[-data-1] : data);\n            fnFlags.call(this, data);\n        } else {\n            var addr = this.getAddr(mode, reg, PDP11.ACCESS.WRITE_WORD);\n            fnFlags.call(this, (data = data < 0? this.regsGen[-data-1] : data));\n            this.setWord(addr, data);\n        }\n    }\n\n    /**\n     * stepCPU(nMinCycles)\n     *\n     * NOTE: Single-stepping should not be confused with the Trap flag; single-stepping is a Debugger\n     * operation that's completely independent of Trap status.  The CPU can go in and out of Trap mode,\n     * in and out of h/w interrupt service routines (ISRs), etc, but from the Debugger's perspective,\n     * they're all one continuous stream of instructions that can be stepped or run at will.  Moreover,\n     * stepping vs. running should never change the behavior of the simulation.\n     *\n     * @this {CPUStatePDP11}\n     * @param {number} nMinCycles (0 implies a single-step, and therefore breakpoints should be ignored)\n     * @return {number} of cycles executed; 0 indicates a pre-execution condition (ie, an execution breakpoint\n     * was hit), -1 indicates a post-execution condition (eg, a read or write breakpoint was hit), and a positive\n     * number indicates successful completion of that many cycles (which should always be >= nMinCycles).\n     */\n    stepCPU(nMinCycles)\n    {\n        /*\n         * The Debugger uses complete to determine if the instruction completed (true) or was interrupted\n         * by a breakpoint or some other exceptional condition (false).  NOTE: this does NOT include JavaScript\n         * exceptions, which stepCPU() expects the caller to catch using its own exception handler.\n         *\n         * The CPU relies on the use of stopCPU() rather than complete, because the CPU never single-steps\n         * (ie, nMinCycles is always some large number), whereas the Debugger does.  And conversely, when the\n         * Debugger is single-stepping (even when performing multiple single-steps), fRunning is never set,\n         * so stopCPU() would have no effect as far as the Debugger is concerned.\n         */\n        this.flags.complete = true;\n\n        /*\n         * nDebugCheck is 1 if we want the Debugger's checkInstruction() to check every instruction,\n         * -1 if we want it to check just the first instruction, and 0 if there's no need for any checks.\n         */\n        var nDebugCheck = (DEBUGGER && this.dbg)? (this.dbg.checksEnabled()? 1 : (this.flags.starting? -1 : 0)) : 0;\n\n        /*\n         * nDebugState is needed only when nDebugCheck is non-zero; it is -1 if this is a single-step, 0 if\n         * this is the start of a new run, and 1 if this is a continuation of a previous run.  It is used by\n         * checkInstruction() to determine if it should skip breakpoint checks and/or HALT instructions (ie,\n         * if nDebugState is <= zero).\n         */\n        var nDebugState = (!nMinCycles)? -1 : (this.flags.starting? 0 : 1);\n        this.flags.starting = false;        // we've moved beyond \"starting\" and have officially \"started\" now\n\n        /*\n         * We move the minimum cycle count to nStepCycles (the number of cycles left to step), so that other\n         * functions have the ability to force that number to zero (eg, stopCPU()), and thus we don't have to check\n         * any other criteria to determine whether we should continue stepping or not.\n         */\n        this.nBurstCycles = this.nStepCycles = nMinCycles;\n\n        /*\n         * And finally, move the nDebugCheck state to an OPFLAG bit, so that the loop need check only one variable.\n         */\n        this.opFlags = (this.opFlags & ~PDP11.OPFLAG.DEBUGGER) | (nDebugCheck? PDP11.OPFLAG.DEBUGGER : 0);\n\n        do {\n            if (this.opFlags) {\n                /*\n                 * NOTE: We still check DEBUGGER to ensure that this code will be compiled out of existence in\n                 * non-DEBUGGER builds.\n                 */\n                if (DEBUGGER && (this.opFlags & PDP11.OPFLAG.DEBUGGER)) {\n                    if (this.dbg.checkInstruction(this.getPC(), nDebugState)) {\n                        this.stopCPU();\n                        break;\n                    }\n                    if (!++nDebugCheck) this.opFlags &= ~PDP11.OPFLAG.DEBUGGER;\n                    if (!nDebugState) nDebugState++;\n                }\n                /*\n                 * If we're in the IRQ or WAIT state, check for any pending interrupts.\n                 *\n                 * NOTE: It's no coincidence that we're checking this BEFORE any pending traps, because in rare\n                 * cases (including some presented by those pesky \"TRAP TEST\" diagnostics), the process of dispatching\n                 * an interrupt can trigger a TRAP_SP stack overflow condition, which must be dealt with BEFORE we\n                 * execute the first instruction of the interrupt handler.\n                 */\n                if ((this.opFlags & (PDP11.OPFLAG.IRQ_MASK | PDP11.OPFLAG.WAIT)) /* && nDebugState >= 0 */) {\n                    if (this.checkInterrupts()) {\n                        if ((this.opFlags & PDP11.OPFLAG.DEBUGGER) && this.dbg.checkInstruction(this.getPC(), nDebugState)) {\n                            this.stopCPU();\n                            break;\n                        }\n                        /*\n                         * Since an interrupt was just dispatched, altering the normal flow of time and changing\n                         * the future as we knew it, let's break out immediately if we're single-stepping, so that\n                         * the Debugger gets to see the first instruction of the interrupt handler.  NOTE: This\n                         * assumes that we've still commented out the nDebugState check above that used to bypass\n                         * checkInterrupts() when single-stepping.\n                         */\n                        if (nDebugState < 0) break;\n                    }\n                }\n                /*\n                 * Next, check for any pending traps (which, as noted above, must be done after checkInterrupts()).\n                 *\n                 * I've moved this TRAP_MASK check BEFORE we decode the next instruction instead of immediately AFTER,\n                 * just in case the last instruction threw an exception that kicked us out before we reached the bottom\n                 * of the stepCPU() loop.\n                 */\n                if (this.opFlags & PDP11.OPFLAG.TRAP_MASK) {\n                    if (this.checkTraps()) {\n                        if ((this.opFlags & PDP11.OPFLAG.DEBUGGER) && this.dbg.checkInstruction(this.getPC(), nDebugState)) {\n                            this.stopCPU();\n                            break;\n                        }\n                        if (nDebugState < 0) break;\n                    }\n                }\n            }\n\n            /*\n             * Snapshot the TF bit in opFlags, while clearing all other opFlags (except those in PRESERVE);\n             * we'll check the TRAP_TF bit in opFlags when we come back around for another opcode.\n             */\n            this.opFlags = (this.opFlags & PDP11.OPFLAG.PRESERVE) | (this.regPSW & PDP11.PSW.TF);\n\n            var opCode = this.getOpcode();\n            this.opDecode(opCode);\n\n        } while (this.nStepCycles > 0);\n\n        return (this.flags.complete? this.nBurstCycles - this.nStepCycles : (this.flags.complete === false? -1 : 0));\n    }\n\n    /**\n     * CPUStatePDP11.init()\n     *\n     * This function operates on every HTML element of class \"cpu\", extracting the\n     * JSON-encoded parameters for the CPUStatePDP11 constructor from the element's \"data-value\"\n     * attribute, invoking the constructor (which in turn invokes the CPU constructor)\n     * to create a CPUStatePDP11 component, and then binding any associated HTML controls to the\n     * new component.\n     */\n    static init()\n    {\n        var aeCPUs = Component.getElementsByClass(document, PDP11.APPCLASS, \"cpu\");\n        for (var iCPU = 0; iCPU < aeCPUs.length; iCPU++) {\n            var eCPU = aeCPUs[iCPU];\n            var parmsCPU = Component.getComponentParms(eCPU);\n            var cpu = new CPUStatePDP11(parmsCPU);\n            Component.bindComponentControls(cpu, eCPU, PDP11.APPCLASS);\n        }\n    }\n}\n\n/*\n * Initialize every CPU module on the page\n */\nWeb.onInit(CPUStatePDP11.init);\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/cpuops.js (C) Jeff Parsons 2012-2018\n */\n\n\n/*\n * Decoding starts near the bottom of this file, in op1120() and op1140().  Obviously, there are\n * MANY more PDP-11 models than the 11/20 and 11/40, but for the broad model categories that PDPjs\n * supports (ie, MODEL_1120, MODEL_1140, MODEL_1145, and MODEL_1170), the biggest differences are\n * between MODEL_1120 and MODEL_1140, so decoding is divided into those two categories, and all\n * other differences are handled inside the opcode handlers.\n *\n * The basic decoding approach is to dispatch on the top 4 bits of the opcode, and if further\n * decoding is required, the dispatched function will dispatch on the next 4 bits, and so on\n * (although some of the intermediate levels dispatch only on 2 bits, which could also be handled\n * with a switch statement).\n *\n * Eventually, every opcode should end up either in an opXXX() function or opUndefined().  For\n * opcodes that perform a simple read or write operation, the entire operation is handled by\n * the opXXX() function.  For opcodes that perform a more extensive read/modify/write operation\n * (also known as an update operation), those opXXX() functions usually rely on a corresponding\n * fnXXX() helper function.\n *\n * For example, opADD() passes the helper function fnADD() to the appropriate update method.  This\n * allows the update method to perform the entire read/modify/write operation, because the modify\n * step is performed internally, via the fnXXX() helper function.\n *\n * For the handful of instructions in the 1140 tables that actually exist only on the 11/45 and\n * 11/70 (ie, MFPD, MTPD, and SPL), those opcode handlers perform their own model checks.  That's\n * simpler than creating additional tables, and seems fine for instructions that are not commonly\n * executed.\n */\n\n/**\n * fnADD(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src\n * @param {number} dst\n * @return {number} (dst + src)\n */\nPDP11.fnADD = function(src, dst)\n{\n    var result = dst + src;\n    this.updateAddFlags(result, src, dst);\n    return result & 0xffff;\n};\n\n/**\n * fnADDB(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src\n * @param {number} dst\n * @return {number} (dst + src)\n */\nPDP11.fnADDB = function(src, dst)\n{\n    var result = dst + src;\n    this.updateAddFlags(result << 8, src << 8, dst << 8);\n    return result & 0xff;\n};\n\n/**\n * fnASL(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src (ignored)\n * @param {number} dst\n * @return {number} (dst << 1)\n */\nPDP11.fnASL = function(src, dst)\n{\n    var result = dst << 1;\n    this.updateShiftFlags(result);\n    return result & 0xffff;\n};\n\n/**\n * fnASLB(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src (ignored)\n * @param {number} dst\n * @return {number} (dst << 1)\n */\nPDP11.fnASLB = function(src, dst)\n{\n    var result = dst << 1;\n    this.updateShiftFlags(result << 8);\n    return result & 0xff;\n};\n\n/**\n * fnASR(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src (ignored)\n * @param {number} dst\n * @return {number} (dst >> 1)\n */\nPDP11.fnASR = function(src, dst)\n{\n    var result = (dst & 0x8000) | (dst >> 1) | (dst << 16);\n    this.updateShiftFlags(result);\n    return result & 0xffff;\n};\n\n/**\n * fnASRB(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src (ignored)\n * @param {number} dst\n * @return {number} (dst >> 1)\n */\nPDP11.fnASRB = function(src, dst)\n{\n    var result = (dst & 0x80) | (dst >> 1) | (dst << 8);\n    this.updateShiftFlags(result << 8);\n    return result & 0xff;\n};\n\n/**\n * fnBIC(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src\n * @param {number} dst\n * @return {number} (~src & dst)\n */\nPDP11.fnBIC = function(src, dst)\n{\n    var result = dst & ~src;\n    this.updateNZVFlags(result);\n    return result;\n};\n\n/**\n * fnBICB(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src\n * @param {number} dst\n * @return {number} (~src & dst)\n */\nPDP11.fnBICB = function(src, dst)\n{\n    var result = dst & ~src;\n    this.updateNZVFlags(result << 8);\n    return result;\n};\n\n/**\n * fnBIS(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src\n * @param {number} dst\n * @return {number} (dst | src)\n */\nPDP11.fnBIS = function(src, dst)\n{\n    var result = dst | src;\n    this.updateNZVFlags(result);\n    return result;\n};\n\n/**\n * fnBISB(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src\n * @param {number} dst\n * @return {number} (dst | src)\n */\nPDP11.fnBISB = function(src, dst)\n{\n    var result = dst | src;\n    this.updateNZVFlags(result << 8);\n    return result;\n};\n\n/**\n * fnCOM(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src (ignored)\n * @param {number} dst\n * @return {number} (~dst)\n */\nPDP11.fnCOM = function(src, dst)\n{\n    var result = ~dst | 0x10000;\n    this.updateAllFlags(result);\n    return result & 0xffff;\n};\n\n/**\n * fnCOMB(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src (ignored)\n * @param {number} dst\n * @return {number} (~dst)\n */\nPDP11.fnCOMB = function(src, dst)\n{\n    var result = ~dst | 0x100;\n    this.updateAllFlags(result << 8);\n    return result & 0xff;\n};\n\n/**\n * fnDEC(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src (ie, 1)\n * @param {number} dst\n * @return {number} (dst - src)\n */\nPDP11.fnDEC = function(src, dst)\n{\n    var result = dst - src;\n    this.updateDecFlags(result, dst);\n    return result & 0xffff;\n};\n\n/**\n * fnDECB(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src (ie, 1)\n * @param {number} dst\n * @return {number} (dst - src)\n */\nPDP11.fnDECB = function(src, dst)\n{\n    var result = dst - src;\n    this.updateDecFlags(result << 8, dst << 8);\n    return result & 0xff;\n};\n\n/**\n * fnINC(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src (ie, 1)\n * @param {number} dst\n * @return {number} (dst + src)\n */\nPDP11.fnINC = function(src, dst)\n{\n    var result = dst + src;\n    this.updateIncFlags(result, dst);\n    return result & 0xffff;\n};\n\n/**\n * fnINCB(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src (ie, 1)\n * @param {number} dst\n * @return {number} (dst + src)\n */\nPDP11.fnINCB = function(src, dst)\n{\n    var result = dst + src;\n    this.updateIncFlags(result << 8, dst << 8);\n    return result & 0xff;\n};\n\n/**\n * fnNEG(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src (ignored)\n * @param {number} dst\n * @return {number} (-dst)\n */\nPDP11.fnNEG = function(src, dst)\n{\n    var result = -dst;\n    /*\n     * If the sign bit of both dst and result are set, the original value must have been 0x8000, triggering overflow.\n     */\n    this.updateAllFlags(result, result & dst & 0x8000);\n    return result & 0xffff;\n};\n\n/**\n * fnNEGB(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src (ignored)\n * @param {number} dst\n * @return {number} (-dst)\n */\nPDP11.fnNEGB = function(src, dst)\n{\n    var result = -dst;\n    /*\n     * If the sign bit of both dst and result are set, the original value must have been 0x80, which triggers overflow.\n     */\n    this.updateAllFlags(result << 8, (result & dst & 0x80) << 8);\n    return result & 0xff;\n};\n\n/**\n * fnROL(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src (ignored)\n * @param {number} dst\n * @return {number} (dst >> 1)\n */\nPDP11.fnROL = function(src, dst)\n{\n    var result = (dst << 1) | ((this.flagC >> 16) & 1);\n    this.updateShiftFlags(result);\n    return result & 0xffff;\n};\n\n/**\n * fnROLB(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src (ignored)\n * @param {number} dst\n * @return {number} (dst >> 1)\n */\nPDP11.fnROLB = function(src, dst)\n{\n    var result = (dst << 1) | ((this.flagC >> 16) & 1);\n    this.updateShiftFlags(result << 8);\n    return result & 0xff;\n};\n\n/**\n * fnROR(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src (ignored)\n * @param {number} dst\n * @return {number} (dst >> 1)\n */\nPDP11.fnROR = function(src, dst)\n{\n    var result = (((this.flagC & 0x10000) | dst) >> 1) | (dst << 16);\n    this.updateShiftFlags(result);\n    return result & 0xffff;\n};\n\n/**\n * fnRORB(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src (ignored)\n * @param {number} dst\n * @return {number} (dst >> 1)\n */\nPDP11.fnRORB = function(src, dst)\n{\n    var result = ((((this.flagC & 0x10000) >> 8) | dst) >> 1) | (dst << 8);\n    this.updateShiftFlags(result << 8);\n    return result & 0xff;\n};\n\n/**\n * fnSUB(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src\n * @param {number} dst\n * @return {number} (dst - src)\n */\nPDP11.fnSUB = function(src, dst)\n{\n    var result = dst - src;\n    this.updateSubFlags(result, src, dst);\n    return result & 0xffff;\n};\n\n/**\n * fnSUBB(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src\n * @param {number} dst\n * @return {number} (dst - src)\n */\nPDP11.fnSUBB = function(src, dst)\n{\n    var result = dst - src;\n    this.updateSubFlags(result << 8, src << 8, dst << 8);\n    return result & 0xff;\n};\n\n/**\n * fnSWAB(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src (ignored)\n * @param {number} dst\n * @return {number} (dst with bytes swapped)\n */\nPDP11.fnSWAB = function(src, dst)\n{\n    var result = (dst << 8) | (dst >> 8);\n    /*\n     * N and Z are based on the low byte of the result, which is the same as the high byte of dst.\n     */\n    this.updateNZVCFlags(dst & 0xff00);\n    return result & 0xffff;\n};\n\n/**\n * fnXOR(src, dst)\n *\n * @this {CPUStatePDP11}\n * @param {number} src\n * @param {number} dst\n * @return {number} (dst ^ src)\n */\nPDP11.fnXOR = function(src, dst)\n{\n    var result = dst ^ src;\n    this.updateNZVFlags(result);\n    return result & 0xffff;\n};\n\n/**\n * opADC(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opADC = function(opCode)\n{\n    this.updateDstWord(opCode, this.getCF()? 1 : 0, PDP11.fnADD);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opADCB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opADCB = function(opCode)\n{\n    this.updateDstByte(opCode, this.getCF()? 1 : 0, PDP11.fnADDB);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opADD(opCode)\n *\n * From the PDP-11/20 Processor HandBook (1971), p. 61:\n *\n *     Add src,dst (06SSDD)\n *\n *     Operation:\n *          (dst) = (src) + (dst)\n *\n *     Condition Codes:\n *          N: set if result < 0; cleared otherwise\n *          Z: set if result = 0; cleared otherwise\n *          V: set if there was arithmetic overflow as a result of the operation, that is both operands\n *             were of the same sign and the result was of the opposite sign; cleared otherwise\n *          C: set if there was a carry from the most significant bit of the result; cleared otherwise\n *\n *     Description:\n *          Adds the source operand to the destination operand and stores the result at the destination address.\n *          The original contents of the destination are lost. The contents of the source are not affected.\n *          Two's complement addition is performed.\n *\n *     Examples:\n *          Add to register:            ADD 20,R0\n *          Add to memory:              ADD R1,XXX\n *          Add register to register:   ADD R1,R2\n *          Add memory to memory:       ADD @#17750,XXX\n *\n *          XXX is a programmer-defined mnemonic for a memory location.\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opADD = function(opCode)\n{\n    this.updateDstWord(opCode, this.readSrcWord(opCode), PDP11.fnADD);\n    this.nStepCycles -= (this.dstMode? (8 + 1) + (this.srcReg && this.dstReg >= 6? 1 : 0) : (this.srcMode? (3 + 2) : (2 + 1)) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opASH(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opASH = function(opCode)\n{\n    var src = this.readDstWord(opCode);\n    var reg = (opCode >> 6) & 7;\n    var result = this.regsGen[reg];\n    if (result & 0x8000) result |= 0xffff0000;\n    this.flagC = this.flagV = 0;\n    src &= 0x3F;\n    if (src & 0x20) {\n        src = 64 - src;         // shift right\n        if (src > 16) src = 16;\n        this.flagC = result << (17 - src);\n        result = result >> src;\n    } else if (src) {\n        if (src > 16) {         // shift left\n            this.flagV = result;\n            result = 0;\n        } else {\n            result = result << src;\n            this.flagC = result;\n            var dst = (result >> 15) & 0xffff;  // check successive sign bits\n            if (dst && dst !== 0xffff) this.flagV = 0x8000;\n        }\n    }\n    this.regsGen[reg] = result & 0xffff;\n    this.flagN = this.flagZ = result;\n    this.nStepCycles -= (this.dstMode? (5 + 1) : (6 + 1)) + src;\n};\n\n/**\n * opASHC(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opASHC = function(opCode)\n{\n    var src = this.readDstWord(opCode);\n    var reg = (opCode >> 6) & 7;\n    var dst = (this.regsGen[reg] << 16) | this.regsGen[reg | 1];\n    this.flagC = this.flagV = 0;\n    src &= 0x3F;\n    if (src & 0x20) {\n        src = 64 - src;         // shift right\n        if (src > 32) src = 32;\n        var result = dst >> (src - 1);\n        this.flagC = result << 16;\n        result >>= 1;\n        if (dst & 0x80000000) result |= 0xffffffff << (32 - src);\n    } else {\n        if (src) {              // shift left\n            result = dst << (src - 1);\n            this.flagC = result >> 15;\n            result <<= 1;\n            if (src > 32) src = 32;\n            dst = dst >> (32 - src);\n            if (dst) {\n                dst |= (0xffffffff << src) & 0xffffffff;\n                if (dst !== 0xffffffff) this.flagV = 0x8000;\n            }\n        } else {\n            result = dst;\n        }\n    }\n    this.regsGen[reg] = (result >> 16) & 0xffff;\n    this.regsGen[reg | 1] = result & 0xffff;\n    this.flagN = result >> 16;\n    this.flagZ = result >> 16 | result;\n    this.nStepCycles -= (this.dstMode? (5 + 1) : (6 + 1)) + src;\n};\n\n/**\n * opASL(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opASL = function(opCode)\n{\n    this.updateDstWord(opCode, 0, PDP11.fnASL);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opASLB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opASLB = function(opCode)\n{\n    this.updateDstByte(opCode, 0, PDP11.fnASLB);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opASR(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opASR = function(opCode)\n{\n    this.updateDstWord(opCode, 0, PDP11.fnASR);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opASRB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opASRB = function(opCode)\n{\n    this.updateDstByte(opCode, 0, PDP11.fnASRB);\n    this.nStepCycles -= (this.dstMode? (8 + 1) + (this.dstAddr & 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opBCC(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBCC = function(opCode)\n{\n    this.branch(opCode, !this.getCF());\n};\n\n/**\n * opBCS(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBCS = function(opCode)\n{\n    this.branch(opCode, this.getCF());\n};\n\n/**\n * opBIC(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBIC = function(opCode)\n{\n    this.updateDstWord(opCode, this.readSrcWord(opCode), PDP11.fnBIC);\n    this.nStepCycles -= (this.dstMode? (8 + 1) + (this.srcReg && this.dstReg >= 6? 1 : 0) : (this.srcMode? (3 + 2) : (2 + 1)) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opBICB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBICB = function(opCode)\n{\n    this.updateDstByte(opCode, this.readSrcByte(opCode), PDP11.fnBICB);\n    this.nStepCycles -= (this.dstMode? (8 + 1) + (this.srcReg && this.dstReg >= 6? 1 : 0) : (this.srcMode? (3 + 2) : (2 + 1)) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opBIS(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBIS = function(opCode)\n{\n    this.updateDstWord(opCode, this.readSrcWord(opCode), PDP11.fnBIS);\n    this.nStepCycles -= (this.dstMode? (8 + 1) + (this.srcReg && this.dstReg >= 6? 1 : 0) : (this.srcMode? (3 + 2) : (2 + 1)) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opBISB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBISB = function(opCode)\n{\n    this.updateDstByte(opCode, this.readSrcByte(opCode), PDP11.fnBISB);\n    this.nStepCycles -= (this.dstMode? (8 + 1) + (this.srcReg && this.dstReg >= 6? 1 : 0) : (this.srcMode? (3 + 2) : (2 + 1)) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opBIT(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBIT = function(opCode)\n{\n    var src = this.readSrcWord(opCode);\n    var dst = this.readDstWord(opCode);\n    this.updateNZVFlags((src < 0? this.regsGen[-src-1] : src) & dst);\n    this.nStepCycles -= (this.dstMode? (3 + 1) + (this.srcReg && this.dstReg >= 6? 1 : 0) : (this.srcMode? (3 + 1) : (2 + 1)) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opBITB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBITB = function(opCode)\n{\n    var src = this.readSrcByte(opCode);\n    var dst = this.readDstByte(opCode);\n    this.updateNZVFlags(((src < 0? (this.regsGen[-src-1] & 0xff) : src) & dst) << 8);\n    this.nStepCycles -= (this.dstMode? (3 + 1) + (this.srcReg && this.dstReg >= 6? 1 : 0) : (this.srcMode? (3 + 1) : (2 + 1)) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opBEQ(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBEQ = function(opCode)\n{\n    this.branch(opCode, this.getZF());\n};\n\n/**\n * opBGE(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBGE = function(opCode)\n{\n    this.branch(opCode, !this.getNF() == !this.getVF());\n};\n\n/**\n * opBGT(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBGT = function(opCode)\n{\n    this.branch(opCode, !this.getZF() && (!this.getNF() == !this.getVF()));\n};\n\n/**\n * opBHI(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBHI = function(opCode)\n{\n    this.branch(opCode, !this.getCF() && !this.getZF());\n};\n\n/**\n * opBLE(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBLE = function(opCode)\n{\n    this.branch(opCode, this.getZF() || (!this.getNF() != !this.getVF()));\n};\n\n/**\n * opBLOS(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBLOS = function(opCode)\n{\n    this.branch(opCode, this.getCF() || this.getZF());\n};\n\n/**\n * opBLT(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBLT = function(opCode)\n{\n    this.branch(opCode, !this.getNF() != !this.getVF());\n};\n\n/**\n * opBMI(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBMI = function(opCode)\n{\n    this.branch(opCode, this.getNF());\n};\n\n/**\n * opBNE(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBNE = function(opCode)\n{\n    this.branch(opCode, !this.getZF());\n};\n\n/**\n * opBPL(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBPL = function(opCode)\n{\n    this.branch(opCode, !this.getNF());\n};\n\n/**\n * opBPT(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBPT = function(opCode)\n{\n    this.trap(PDP11.TRAP.BPT, 0, PDP11.REASON.OPCODE);\n};\n\n/**\n * opBR(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBR = function(opCode)\n{\n    this.branch(opCode, true);\n};\n\n/**\n * opBVC(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBVC = function(opCode)\n{\n    this.branch(opCode, !this.getVF());\n};\n\n/**\n * opBVS(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opBVS = function(opCode)\n{\n    this.branch(opCode, this.getVF());\n};\n\n/**\n * opCLR(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opCLR = function(opCode)\n{\n    this.writeDstWord(opCode, 0, this.updateAllFlags);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opCLRB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opCLRB = function(opCode)\n{\n    this.writeDstByte(opCode, 0, PDP11.WRITE.BYTE, this.updateAllFlags);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opCLC(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opCLC = function(opCode)\n{\n    this.clearCF();\n    this.nStepCycles -= (4 + 1);\n};\n\n/**\n * opCLN(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opCLN = function(opCode)\n{\n    this.clearNF();\n    this.nStepCycles -= (4 + 1);\n};\n\n/**\n * opCLV(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opCLV = function(opCode)\n{\n    this.clearVF();\n    this.nStepCycles -= (4 + 1);\n};\n\n/**\n * opCLZ(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opCLZ = function(opCode)\n{\n    this.clearZF();\n    this.nStepCycles -= (4 + 1);\n};\n\n/**\n * opCLx(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opCLx = function(opCode)\n{\n    if (opCode & 0x1) this.clearCF();\n    if (opCode & 0x2) this.clearVF();\n    if (opCode & 0x4) this.clearZF();\n    if (opCode & 0x8) this.clearNF();\n    /*\n     * TODO: Review whether this class of undocumented instructions really has a constant cycle time.\n     */\n    this.nStepCycles -= (4 + 1);\n};\n\n/**\n * opCMP(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opCMP = function(opCode)\n{\n    var src = this.readSrcWord(opCode);\n    var dst = this.readDstWord(opCode);\n    var result = (src = (src < 0? this.regsGen[-src-1] : src)) - dst;\n    /*\n     * NOTE: CMP calculates (src - dst) rather than (dst - src), so src and dst updateSubFlags() parms must be reversed.\n     */\n    this.updateSubFlags(result, dst, src);\n    this.nStepCycles -= (this.dstMode? (3 + 1) + (this.srcReg && this.dstReg >= 6? 1 : 0) : (this.srcMode? (3 + 1) : (2 + 1)) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opCMPB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opCMPB = function(opCode)\n{\n    var src = this.readSrcByte(opCode);\n    var dst = this.readDstByte(opCode);\n    var result = (src = (src < 0? (this.regsGen[-src-1] & 0xff): src) << 8) - (dst <<= 8);\n    /*\n     * NOTE: CMP calculates (src - dst) rather than (dst - src), so src and dst updateSubFlags() parms must be reversed.\n     */\n    this.updateSubFlags(result, dst, src);\n    this.nStepCycles -= (this.dstMode? (3 + 1) + (this.srcReg && this.dstReg >= 6? 1 : 0) : (this.srcMode? (3 + 1) : (2 + 1)) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opCOM(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opCOM = function(opCode)\n{\n    this.updateDstWord(opCode, 0, PDP11.fnCOM);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opCOMB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opCOMB = function(opCode)\n{\n    this.updateDstByte(opCode, 0, PDP11.fnCOMB);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opDEC(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opDEC = function(opCode)\n{\n    this.updateDstWord(opCode, 1, PDP11.fnDEC);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opDECB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opDECB = function(opCode)\n{\n    this.updateDstByte(opCode, 1, PDP11.fnDECB);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opDIV(opCode)\n *\n * The instruction \"DIV SRC,Rn\" determines SRC using the DSTMODE portion of the opcode and Rn using\n * the SRCMODE portion; Rn can only be a register (and it should be an EVEN-numbered register, lest you\n * get unexpected results).  The dividend (DST) is then calculated as:\n *\n *      DST = (regs[Rn] << 16) | (regs[Rn|1])\n *\n * DST is divided by SRC, and the quotient is stored in regs[Rn] and the remainder in regs[Rn|1].\n *\n * For example:\n *\n *      DIV     R4,R0\n *\n * where R4 = 006400 and R0,R1 = 000000,015000 will result in R0,R1 = 000002,000000.\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opDIV = function(opCode)\n{\n    /*\n     * TODO: Review and determine if flag updates can be encapsulated in an updateDivFlags() function.\n     */\n    var src = this.readDstWord(opCode);\n    if (!src) {\n        this.flagN = 0;         // NZVC\n        this.flagZ = 0;\n        this.flagV = 0x8000;\n        this.flagC = 0x10000;   // divide by zero\n        this.nStepCycles -= (6 + 1);\n    } else {\n        var reg = (opCode >> 6) & 7;\n        var dst = (this.regsGen[reg] << 16) | this.regsGen[reg | 1];\n        this.flagC = this.flagV = 0;\n        if (src & 0x8000) src |= ~0xffff;\n        var result = ~~(dst / src);\n        if (result >= -32768 && result <= 32767) {\n            this.regsGen[reg] = result & 0xffff;\n            this.regsGen[reg | 1] = (dst - (result * src)) & 0xffff;\n            this.flagZ = (result >> 16) | result;\n            this.flagN = result >> 16;\n        } else {\n            this.flagV = 0x8000;                                // overflow - following are indeterminate\n            this.flagZ = (result >> 15) | result;               // dodgy\n            this.flagN = dst >> 16;                             // just as dodgy\n            if (src === -1 && this.regsGen[reg] === 0xfffe) {\n                this.regsGen[reg] = this.regsGen[reg | 1] = 1;  // etc\n            }\n        }\n        this.nStepCycles -= (52 + 1);                           // 52 is the average of the shortest and longest times\n    }\n};\n\n/**\n * opEMT(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opEMT = function(opCode)\n{\n    this.trap(PDP11.TRAP.EMT, 0, PDP11.REASON.OPCODE);\n    this.nStepCycles -= (22 + 3 - 5);\n};\n\n/**\n * opHALT(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opHALT = function(opCode)\n{\n    if (this.regPSW & PDP11.PSW.CMODE) {\n        this.regErr |= PDP11.CPUERR.BADHALT;\n        this.trap(PDP11.TRAP.BUS, 0, PDP11.REASON.HALT);\n    } else {\n        if (this.panel) {\n            /*\n             * The PDP-11/20 Handbook (1971) says that HALT does the following:\n             *\n             *      Causes the processor operation to cease. The console is given control of the bus.\n             *      The console data lights display the contents of RO; the console address lights display\n             *      the address after the halt instruction. Transfers on the UNIBUS are terminated immediately.\n             *      The PC points to the next instruction to be executed. Pressing the continue key on the\n             *      console causes processor operation to resume. No INIT signal is given.\n             *\n             * However, the PDP-11/70 Handbook (1979) suggests some slight differences:\n             *\n             *      Causes the processor operation to cease. The console is given control of the processor.\n             *      The data lights display the contents of the PC (which is the address of the HALT instruction\n             *      plus 2). Transfers on the UNIBUS are terminated immediately. Pressing the continue key on\n             *      the console causes processor operation to resume.\n             *\n             * Given that the 11/70 doesn't saying anything about displaying R0 on a HALT, and also given that\n             * the 11/70 CPU EXERCISER diagnostic writes a value to the Console Switch/Display Register immediately\n             * before HALT'ing, I'm going to assume that updating the data display with R0 is unique to the 11/20.\n             *\n             * Also, I'm a little suspicious of the 11/70 comment that the \"data lights display the contents of\n             * the PC,\" since previous models display the PC on the ADDRESS lights, not the DATA lights.  And as\n             * I already explained, doing anything to the data lights at this point would undo what the 11/70\n             * diagnostics do.\n             */\n            if (this.model == PDP11.MODEL_1120) {\n                this.panel.setData(this.regsGen[0], true);\n            }\n        }\n        if (!this.dbg) {\n            /*\n             * This will leave the PC exactly where it's supposed to be: at the address of the HALT + 2.\n             */\n            this.stopCPU();\n        } else {\n            /*\n             * When the Debugger is present, this call will rewind PC by 2 so that the HALT instruction is\n             * displayed, making it clear why the processor stopped; the user could also use the \"dh\" command\n             * to dump the Debugger's instruction history buffer to see why it stopped, assuming the history\n             * buffer is enabled, but that's more work.\n             *\n             * Because rewinding is not normal CPU behavior, attempting to Run again (or use the Debugger's\n             * \"g\" command) would cause an immediate HALT again -- except that checkInstruction() checks for that\n             * precise condition, so if the CPU starts on a HALT, checkInstruction() will skip over it.\n             */\n            this.dbg.stopInstruction();\n        }\n    }\n    this.nStepCycles -= 7;\n};\n\n/**\n * opINC(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opINC = function(opCode)\n{\n    this.updateDstWord(opCode, 1, PDP11.fnINC);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opINCB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opINCB = function(opCode)\n{\n    this.updateDstByte(opCode, 1, PDP11.fnINCB);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opIOT(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opIOT = function(opCode)\n{\n    this.trap(PDP11.TRAP.IOT, 0, PDP11.REASON.OPCODE);\n    this.nStepCycles -= (22 + 3 - 5);\n};\n\nPDP11.JMP_CYCLES = [\n    0, 6 + 1, 6 + 1, 8 + 2, 6 + 1, 9 + 2, 7 + 2, 10 + 3\n];\n\n/**\n * opJMP(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opJMP = function(opCode)\n{\n    /*\n     * Since JMP and JSR opcodes have their own unique timings for the various dst modes, we must snapshot\n     * nStepCycles before decoding the mode, and then use that to update nStepCycles.\n     */\n    this.nSnapCycles = this.nStepCycles;\n    this.setPC(this.readDstAddr(opCode));\n    this.nStepCycles = this.nSnapCycles - PDP11.JMP_CYCLES[this.dstMode];\n};\n\nPDP11.JSR_CYCLES = [\n    0, 13 + 1, 13 + 1, 15 + 2, 13 + 1, 16 + 2, 14 + 2, 17 + 3\n];\n\n/**\n * opJSR(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opJSR = function(opCode)\n{\n    /*\n     * Since JMP and JSR opcodes have their own unique timings for the various dst modes, we must\n     * snapshot nStepCycles before decoding the mode, and then use that to update nStepCycles.\n     */\n    this.nSnapCycles = this.nStepCycles;\n    var addr = this.readDstAddr(opCode);\n    /*\n     * As per the WARNING in readSrcWord(), reading the SRC register AFTER decoding the DST operand\n     * is entirely appropriate.\n     */\n    var reg = (opCode >> PDP11.SRCMODE.SHIFT) & PDP11.OPREG.MASK;\n    this.pushWord(this.regsGen[reg]);\n    this.regsGen[reg] = this.getPC();\n    this.setPC(addr);\n    this.nStepCycles = this.nSnapCycles - PDP11.JSR_CYCLES[this.dstMode];\n};\n\n/**\n * opMARK(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opMARK = function(opCode)\n{\n    var addr = (this.getPC() + ((opCode & 0x3F) << 1)) & 0xffff;\n    var src = this.readWord(addr | this.addrDSpace);\n    this.setPC(this.regsGen[5]);\n    this.setSP(addr + 2);\n    this.regsGen[5] = src;\n    this.nStepCycles -= (6 + 2);\n};\n\n/**\n * opMFPD(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opMFPD = function(opCode)\n{\n    var data = this.readWordFromPrevSpace(opCode, PDP11.ACCESS.DSPACE);\n    this.updateNZVFlags(data);\n    this.pushWord(data);\n    this.nStepCycles -= (10 + 1);\n};\n\n/**\n * opMFPI(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opMFPI = function(opCode)\n{\n    var data = this.readWordFromPrevSpace(opCode, PDP11.ACCESS.ISPACE);\n    this.updateNZVFlags(data);\n    this.pushWord(data);\n    this.nStepCycles -= (10 + 1);\n};\n\n/**\n * opMFPS(opCode)\n *\n *      1067XX  MFPS - Move Byte From PSW\n *\n *      The 8-bit contents of the PS are moved to the effective destination.  If destination is mode 0,\n *      PS bit 7 is sign extended through the upper byte of the register.  The destination operand is treated\n *      as a byte address.  11/34A only.\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opMFPS = function(opCode)\n{\n    PDP11.opUndefined.call(this, opCode);\n};\n\n/**\n * opMFPT(opCode)\n *\n *      000007  MFPT - Move From Processor Type\n *\n *      Loads R0 with a value indicating the processor type.\n *\n *      R0  Hardware\n *       1  PDP-11/44\n *       3  PDP-11/24 (should be 2)\n *       3  PDP-11/23\n *       4  SBC-11/21\n *       5  All J11 chips including 11/73, 11/83, 11/93\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opMFPT = function(opCode)\n{\n    PDP11.opUndefined.call(this, opCode);\n};\n\nPDP11.MOV_CYCLES = [\n    2 + 1, 8 + 1, 8 + 1, 11 + 2, 9 + 1, 12 + 2, 10 + 2, 13 + 3,\n    3 + 1, 8 + 1, 8 + 1, 11 + 2, 9 + 1, 12 + 2, 11 + 2, 14 + 3\n];\n\n/**\n * opMOV(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opMOV = function(opCode)\n{\n    /*\n     * Since MOV opcodes have their own unique timings for the various dst modes, we must snapshot\n     * nStepCycles after decoding the src mode, and then use that to update nStepCycles.\n     */\n    var data = this.readSrcWord(opCode);\n    this.nSnapCycles = this.nStepCycles;\n    this.writeDstWord(opCode, data, this.updateNZVFlags);\n    this.nStepCycles = this.nSnapCycles - PDP11.MOV_CYCLES[(this.srcMode? 8 : 0) + this.dstMode] + (this.dstReg == 7 && !this.dstMode? 2 : 0);\n};\n\n/**\n * opMOVB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opMOVB = function(opCode)\n{\n    var data = this.readSrcByte(opCode);\n    this.writeDstByte(opCode, data, PDP11.WRITE.SBYTE, this.updateNZVFlags);\n    this.nStepCycles -= (this.dstMode? (8 + 1) + (this.srcReg && this.dstReg >= 6? 1 : 0) : (this.srcMode? (3 + 2) : (2 + 1)) + (this.dstReg == 7? 2 : 0));\n};\n\nPDP11.MTP_CYCLES = [\n    6 + 1, 11 + 2, 11 + 2, 14 + 3, 12 + 2, 15 + 3, 14 + 3, 17 + 4\n];\n\n/**\n * opMTPD(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opMTPD = function(opCode)\n{\n    /*\n     * Since MTPD and MTPI opcodes have their own unique timings for the various dst modes, we must snapshot\n     * nStepCycles before decoding the mode, and then use that to update nStepCycles.\n     */\n    var data = this.popWord();\n    this.nSnapCycles = this.nStepCycles;\n    this.updateNZVFlags(data);\n    this.writeWordToPrevSpace(opCode, PDP11.ACCESS.DSPACE, data);\n    this.nStepCycles = this.nSnapCycles - PDP11.MTP_CYCLES[this.dstMode];\n};\n\n/**\n * opMTPI(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opMTPI = function(opCode)\n{\n    /*\n     * Since MTPD and MTPI opcodes have their own unique timings for the various dst modes, we must snapshot\n     * nStepCycles before decoding the mode, and then use that to update nStepCycles.\n     */\n    var data = this.popWord();\n    this.nSnapCycles = this.nStepCycles;\n    this.updateNZVFlags(data);\n    this.writeWordToPrevSpace(opCode, PDP11.ACCESS.ISPACE, data);\n    this.nStepCycles = this.nSnapCycles - PDP11.MTP_CYCLES[this.dstMode];\n};\n\n/**\n * opMTPS(opCode)\n *\n *      1064XX  MTPS - Move Byte To PSW\n *\n *      The 8 bits of the effective operand replace the current contents of the PS <0:7>.  The source operand\n *      address is treated as a byte address.  Note that PS bit 4 cannot be set with this instruction.  The\n *      src operand remains unchanged.  11/34A only.\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opMTPS = function(opCode)\n{\n    PDP11.opUndefined.call(this, opCode);\n};\n\n/**\n * opMUL(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opMUL = function(opCode)\n{\n    var src = this.readDstWord(opCode);\n    var reg = (opCode >> 6) & 7;\n    var dst = this.regsGen[reg];\n    var result = ((src << 16) >> 16) * ((dst << 16) >> 16);\n    this.regsGen[reg] = (result >> 16) & 0xffff;\n    this.regsGen[reg | 1] = result & 0xffff;\n    this.updateMulFlags(result|0);\n    this.nStepCycles -= (22 + 1);\n};\n\n/**\n * opNEG(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opNEG = function(opCode)\n{\n    this.updateDstWord(opCode, 0, PDP11.fnNEG);\n    this.nStepCycles -= (this.dstMode? (10 + 1) : (5 + 1));\n};\n\n/**\n * opNEGB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opNEGB = function(opCode)\n{\n    this.updateDstByte(opCode, 0, PDP11.fnNEGB);\n    this.nStepCycles -= (this.dstMode? (10 + 1) : (5 + 1));\n};\n\n/**\n * opNOP(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opNOP = function(opCode)\n{\n    this.nStepCycles -= (4 + 1);        // TODO: Review (this is just a guess based on CLC)\n};\n\n/**\n * opRESET(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opRESET = function(opCode)\n{\n    if (!(this.regPSW & PDP11.PSW.CMODE)) {\n        this.resetCPU();\n\n        if (this.panel) {\n            /*\n             * The PDP-11/70 XXDP test \"EKBBF0\" reports the following, with PANEL messages on (\"m panel on\"):\n             *\n             *      CNSW.writeWord(177570,000101) @033502\n             *      CNSW.readWord(177570): 000000 @032114\n             *      LOOK AT THE CONSOLE LIGHTS\n             *      THE DATA LIGHTS SHOULD READ 166667\n             *      THE ADDRESS LIGHTS SHOULD READ  CNSW.readWord(177570): 000000 @032150\n             *      032236\n             *      CHANGE SWITCH 7 TO CONTINUE\n             *      CNSW.readWord(177570): 000000 @032236\n             *      stopped (31518011 instructions, 358048873 cycles, 58644 ms, 6105465 hz)\n             *      R0=166667 R1=002362 R2=000000 R3=000000 R4=000000 R5=026642\n             *      SP=001074 PC=032236 PS=000344 SR=00000000 T0 N0 Z1 V0 C0\n             *      032236: 032737 000200 177570   BIT   #200,@#177570\n             *      >> tr\n             *      CNSW.readWord(177570): 000000 @032236 (cpu halted)\n             *      R0=166667 R1=002362 R2=000000 R3=000000 R4=000000 R5=026642\n             *      SP=001074 PC=032244 PS=000344 SR=00000000 T0 N0 Z1 V0 C0\n             *      032244: 001773                 BEQ   032234                 ;cycles=0\n             *      >> tr\n             *      R0=166667 R1=002362 R2=000000 R3=000000 R4=000000 R5=026642\n             *      SP=001074 PC=032234 PS=000344 SR=00000000 T0 N0 Z1 V0 C0\n             *      032234: 000005                 RESET                        ;cycles=5\n             *\n             * It's a little hard to see why the DATA lights should read 166667, since the PANEL messages indicate\n             * that the last CNSW.writeWord(177570) was for 000101, not 166667.  So I'm guessing that the RESET\n             * instruction is supposed to propagate R0 to the console's DISPLAY register.\n             *\n             * This is similar to what we do for the HALT instruction (but only if this.model == PDP11.MODEL_1120).\n             * These Console features do not seem to be very well documented, assuming they exist.\n             *\n             * UPDATE: This behavior appears to be confirmed by remarks in the PDP-11/20 Processor Handbook (1971),\n             * p. 141:\n             *\n             *      HALT - displays processor register R0 when bus control is transferred to console during a HALT\n             *      instruction.\n             *\n             *      RESET - displays register R0 for during [duration?] of RESET (70 msec).\n             *\n             * I haven't found similar remarks in the PDP-11/70 Processor Handbooks, so I'm not sure if that's an\n             * oversight or if 11/70 panels are slightly different in this regard.  It's also not clear what they meant\n             * by \"for duration of RESET\".  Is something supposed to happen to the DATA lights after the RESET is done?\n             */\n            this.panel.setData(this.regsGen[0], true);\n        }\n    }\n    this.nStepCycles -= 667;            // TODO: Review (but it's definitely a big number)\n};\n\n/**\n * opROL(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opROL = function(opCode)\n{\n    this.updateDstWord(opCode, 0, PDP11.fnROL);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opROLB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opROLB = function(opCode)\n{\n    this.updateDstByte(opCode, 0, PDP11.fnROLB);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opROR(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opROR = function(opCode)\n{\n    this.updateDstWord(opCode, 0, PDP11.fnROR);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opRORB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opRORB = function(opCode)\n{\n    this.updateDstByte(opCode, 0, PDP11.fnRORB);\n    this.nStepCycles -= (this.dstMode? (8 + 1) + (this.dstAddr & 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opRTI(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opRTI = function(opCode)\n{\n    this.trapReturn();\n    /*\n     * Unlike RTT, RTI permits an immediate trace, which we resolve by propagating PSW.TF to OPFLAG.TRAP_TF\n     * (which, as written below, requires that both flags have the same bit value; see defines.js).\n     *\n     * NOTE: This RTI trace behavior is NEW for machines that have both RTI and RTT.  Early models didn't have RTT,\n     * so the old RTI behaved exactly like the new RTT.  Which is why the 11/20 jump table below calls opRTT() instead\n     * of opRTI() for RTI.\n     */\n    this.opFlags |= (this.regPSW & PDP11.PSW.TF);\n    this.nStepCycles -= (10 + 3);\n};\n\n/**\n * opRTS(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opRTS = function(opCode)\n{\n    if (opCode & 0x08) {\n        PDP11.opUndefined.call(this, opCode);\n        return;\n    }\n    var src = this.popWord();\n    var reg = opCode & PDP11.OPREG.MASK;\n    /*\n     * When the popular \"RTS PC\" form is used, we might as well eliminate the useless setting of PC...\n     */\n    if (reg == PDP11.REG.PC) {\n        this.setPC(src);\n    } else {\n        this.setPC(this.regsGen[reg]);\n        this.regsGen[reg] = src;\n    }\n    this.nStepCycles -= (7 + 2);\n};\n\n/**\n * opRTT(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opRTT = function(opCode)\n{\n    this.trapReturn();\n    this.nStepCycles -= (10 + 3);\n};\n\n/**\n * opSBC(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opSBC = function(opCode)\n{\n    this.updateDstWord(opCode, this.getCF()? 1 : 0, PDP11.fnSUB);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opSBCB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opSBCB = function(opCode)\n{\n    this.updateDstByte(opCode, this.getCF()? 1 : 0, PDP11.fnSUBB);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opSEC(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opSEC = function(opCode)\n{\n    this.setCF();\n    this.nStepCycles -= (4 + 1);\n};\n\n/**\n * opSEN(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opSEN = function(opCode)\n{\n    this.setNF();\n    this.nStepCycles -= (4 + 1);\n};\n\n/**\n * opSEV(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opSEV = function(opCode)\n{\n    this.setVF();\n    this.nStepCycles -= (4 + 1);\n};\n\n/**\n * opSEZ(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opSEZ = function(opCode)\n{\n    this.setZF();\n    this.nStepCycles -= (4 + 1);\n};\n\n/**\n * opSEx(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opSEx = function(opCode)\n{\n    if (opCode & 0x1) this.setCF();\n    if (opCode & 0x2) this.setVF();\n    if (opCode & 0x4) this.setZF();\n    if (opCode & 0x8) this.setNF();\n    /*\n     * TODO: Review whether this class of undocumented instructions really has a constant cycle time.\n     */\n    this.nStepCycles -= (4 + 1);\n};\n\n/**\n * opSOB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode (077Rnn)\n */\nPDP11.opSOB = function(opCode)\n{\n    var reg = (opCode & PDP11.SRCMODE.REG) >> PDP11.SRCMODE.SHIFT;\n    if ((this.regsGen[reg] = ((this.regsGen[reg] - 1) & 0xffff))) {\n        this.setPC(this.getPC() - ((opCode & PDP11.DSTMODE.MASK) << 1));\n        this.nStepCycles += 1;          // unlike normal branches, taking this branch is actually 1 cycle faster\n    }\n    this.nStepCycles -= (5 + 1);\n};\n\n/**\n * opSPL(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opSPL = function(opCode)\n{\n    if (!(opCode & 0x08) || this.model < PDP11.MODEL_1145) {\n        PDP11.opUndefined.call(this, opCode);\n        return;\n    }\n    if (!(this.regPSW & PDP11.PSW.CMODE)) {\n        this.regPSW = (this.regPSW & ~PDP11.PSW.PRI) | ((opCode & 0x7) << PDP11.PSW.SHIFT.PRI);\n        this.opFlags |= PDP11.OPFLAG.IRQ_DELAY;\n        this.opFlags &= ~PDP11.OPFLAG.IRQ;\n    }\n    this.nStepCycles -= (4 + 1);\n};\n\n/**\n * opSUB(opCode)\n *\n * From the PDP-11/20 Processor HandBook (1971), p. 62:\n *\n *     Subtract src,dst (16SSDD)\n *\n *     Operation:\n *          (dst) = (dst) - (src) [in detail, (dst) + ~(src) + 1 (dst)]\n *\n *     Condition Codes:\n *          N: set if result < 0; cleared otherwise\n *          Z: set if result = 0; cleared otherwise\n *          V: set if there was arithmetic overflow as a result of the operation, that is if operands were of\n *             opposite signs and the sign of the source was the same as the sign of the result; cleared otherwise\n *          C: cleared if there was a carry from the most significant bit of the result; set otherwise\n *\n *     Description:\n *          Subtracts the source operand from the destination operand and leaves the result at the destination address.\n *          The orignial [sic] contents of the destination are lost. The contents of the source are not affected.\n *          In double-precision arithmetic the C-bit, when set, indicates a \"borrow\".\n *\n *     Example:\n *                  SUB R1,R2\n *\n *              BEFORE          AFTER\n *          (R1) = 011111   (R2) = 012345\n *          (R1) = 011111   (R2) = 001234\n *\n *              NZVC            NZVC\n *              1111            0001\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opSUB = function(opCode)\n{\n    this.updateDstWord(opCode, this.readSrcWord(opCode), PDP11.fnSUB);\n    this.nStepCycles -= (this.dstMode? (8 + 1) + (this.srcReg && this.dstReg >= 6? 1 : 0) : (this.srcMode? (3 + 2) : (2 + 1)) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opSWAB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opSWAB = function(opCode)\n{\n    this.updateDstWord(opCode, 0, PDP11.fnSWAB);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opSXT(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opSXT = function(opCode)\n{\n    this.writeDstWord(opCode, this.getNF()? 0xffff : 0, this.updateNZVFlags);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opTRAP(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opTRAP = function(opCode)\n{\n    this.trap(PDP11.TRAP.TRAP, 0, PDP11.REASON.OPCODE);\n};\n\n/**\n * opTST(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opTST = function(opCode)\n{\n    var result = this.readDstWord(opCode);\n\n    this.updateAllFlags(result);\n    this.nStepCycles -= (this.dstMode? (3 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opTSTB(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opTSTB = function(opCode)\n{\n    var result = this.readDstByte(opCode);\n\n    this.updateAllFlags(result << 8);\n    this.nStepCycles -= (this.dstMode? (3 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opWAIT(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opWAIT = function(opCode)\n{\n    /*\n     * The original PDP-11 emulation code would actually stop emulating instructions now, relying on assorted\n     * setTimeout() callbacks, setInterval() callbacks, device XHR (XMLHttpRequest) callbacks, etc, to eventually\n     * call interrupt(), which would then transition the CPU out of its \"wait\" state and kickstart emulate() again.\n     *\n     * That approach isn't compatible with PCjs emulators, which prefer to rely on the simulated CPU clock to\n     * drive all simulated device updates.  This means components should call the CPU's setTimer() function, which\n     * invokes the provided callback when the number of CPU cycles that correspond to the requested number of\n     * milliseconds have elapsed.  This also gives us the ability to scale device response times as needed if the\n     * user decides to crank up CPU speed, and to freeze them along with the CPU whenever the user halts the machine.\n     *\n     * However, the PCjs approach requires the CPU to continue running.  One simple solution to this dilemma:\n     *\n     *      1) opWAIT() sets a new opFlags bit (OPFLAG.WAIT)\n     *      2) Rewind the PC back to the WAIT instruction\n     *      3) Whenever stepCPU() detects OPFLAG.WAIT, call checkInterrupts()\n     *      4) If checkInterrupts() detects an interrupt, advance PC past the WAIT and then dispatch the interrupt\n     *\n     * Technically, the PC is already exactly where it's supposed to be, so why are we wasting time with steps\n     * 2 and 4?  It's largely for the Debugger's sake, so that as long as execution is \"blocked\" by a WAIT, that's\n     * what you'll see in the Debugger.  I could make those steps conditioned on the presence of the Debugger,\n     * but I feel it's better to keep all code paths the same.\n     *\n     * NOTE: It's almost always a bad idea to add more checks to the inner stepCPU() loop, because every additional\n     * check can have a measurable (negative) impact on performance.  Which is why it's important to use opFlags bits\n     * whenever possible, since we can test for multiple (up to 32) exceptional conditions with a single check.\n     *\n     * We also used to update the machine's display(s) whenever transitioning to the WAIT state.  However, that\n     * caused this instruction to generate enormous overhead, and it's no longer necessary, since we now rely on\n     * a timer (the PDP-11's own KW11 60Hz Line Clock timer, to be precise) to generate periodic display updates.\n     *\n     *      if (!(this.opFlags & PDP11.OPFLAG.WAIT) && this.cmp) this.cmp.updateDisplays();\n     *\n     * Finally, it's been noted several places online that the WAIT instruction puts the contents of R0 into the\n     * Front Panel's \"DATA PATH\" (and possibly even directly into the \"DISPLAY REGISTER\", making the DATASEL switch\n     * setting irrelevant).  I can't find any supporting DEC documentation regarding this, but for now, we'll go\n     * with popular lore and propagate R0 to the panel's \"active\" data register.\n     */\n    if (this.panel) {\n        this.panel.setAddr(this.regsGen[7], true);\n        this.panel.setData(this.regsGen[0], true);\n    }\n    this.opFlags |= PDP11.OPFLAG.WAIT;\n    this.advancePC(-2);\n    this.nStepCycles -= 3;\n};\n\n/**\n * opXOR(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opXOR = function(opCode)\n{\n    var reg = (opCode >> PDP11.SRCMODE.SHIFT) & PDP11.OPREG.MASK;\n    this.updateDstWord(opCode, this.regsGen[reg + this.offRegSrc], PDP11.fnXOR);\n    this.nStepCycles -= (this.dstMode? (8 + 1) : (2 + 1) + (this.dstReg == 7? 2 : 0));\n};\n\n/**\n * opUndefined(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.opUndefined = function(opCode)\n{\n    if (DEBUGGER && this.dbg) {\n        if (this.dbg.undefinedInstruction(opCode)) return;\n    }\n    this.trap(PDP11.TRAP.RESERVED, 0, PDP11.REASON.OPCODE);\n};\n\n/**\n * op1120(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op1120 = function(opCode)\n{\n    PDP11.aOpXnnn_1120[opCode >> 12].call(this, opCode);\n};\n\n/**\n * op0Xnn_1120(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op0Xnn_1120 = function(opCode)\n{\n    PDP11.aOp0Xnn_1120[(opCode >> 8) & 0xf].call(this, opCode);\n};\n\n/**\n * op0AXn_1120(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op0AXn_1120 = function(opCode)\n{\n    PDP11.aOp0AXn_1120[(opCode >> 6) & 0x3].call(this, opCode);\n};\n\n/**\n * op0BXn_1120(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op0BXn_1120 = function(opCode)\n{\n    PDP11.aOp0BXn_1120[(opCode >> 6) & 0x3].call(this, opCode);\n};\n\n/**\n * op0CXn_1120(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op0CXn_1120 = function(opCode)\n{\n    PDP11.aOp0CXn_1120[(opCode >> 6) & 0x3].call(this, opCode);\n};\n\n/**\n * op00Xn_1120(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op00Xn_1120 = function(opCode)\n{\n    PDP11.aOp00Xn_1120[(opCode >> 4) & 0xf].call(this, opCode);\n};\n\n/**\n * op00AX_1120(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op00AX_1120 = function(opCode)\n{\n    PDP11.aOp00AX_1120[opCode & 0xf].call(this, opCode);\n};\n\n/**\n * op00BX_1120(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op00BX_1120 = function(opCode)\n{\n    PDP11.aOp00BX_1120[opCode & 0xf].call(this, opCode);\n};\n\n/**\n * op000X_1120(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op000X_1120 = function(opCode)\n{\n    PDP11.aOp000X_1120[opCode & 0xf].call(this, opCode);\n};\n\n/**\n * op8Xnn_1120(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op8Xnn_1120 = function(opCode)\n{\n    PDP11.aOp8Xnn_1120[(opCode >> 8) & 0xf].call(this, opCode);\n};\n\n/**\n * op8AXn_1120(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op8AXn_1120 = function(opCode)\n{\n    PDP11.aOp8AXn_1120[(opCode >> 6) & 0x3].call(this, opCode);\n};\n\n/**\n * op8BXn_1120(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op8BXn_1120 = function(opCode)\n{\n    PDP11.aOp8BXn_1120[(opCode >> 6) & 0x3].call(this, opCode);\n};\n\n/**\n * op8CXn_1120(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op8CXn_1120 = function(opCode)\n{\n    PDP11.aOp8CXn_1120[(opCode >> 6) & 0x3].call(this, opCode);\n};\n\nPDP11.aOpXnnn_1120 = [\n    PDP11.op0Xnn_1120,          // 0x0nnn\n    PDP11.opMOV,                // 0x1nnn   01SSDD          11/20+  2.3\n    PDP11.opCMP,                // 0x2nnn   02SSDD          11/20+  2.3*\n    PDP11.opBIT,                // 0x3nnn   03SSDD          11/20+  2.9*\n    PDP11.opBIC,                // 0x4nnn   04SSDD          11/20+  2.9\n    PDP11.opBIS,                // 0x5nnn   05SSDD          11/20+  2.3\n    PDP11.opADD,                // 0x6nnn   06SSDD          11/20+  2.3\n    PDP11.opUndefined,          // 0x7nnn\n    PDP11.op8Xnn_1120,          // 0x8nnn\n    PDP11.opMOVB,               // 0x9nnn   11SSDD          11/20+  2.3\n    PDP11.opCMPB,               // 0xAnnn   12SSDD          11/20+  2.3\n    PDP11.opBITB,               // 0xBnnn   13SSDD          11/20+  2.9\n    PDP11.opBICB,               // 0xCnnn   14SSDD          11/20+  2.9\n    PDP11.opBISB,               // 0xDnnn   15SSDD          11/20+  2.3\n    PDP11.opSUB,                // 0xEnnn   16SSDD          11/20+  2.3\n    PDP11.opUndefined           // 0xFnnn\n];\n\nPDP11.aOp0Xnn_1120 = [\n    PDP11.op00Xn_1120,          // 0x00nn\n    PDP11.opBR,                 // 0x01nn   0004XX          11/20+  2.6\n    PDP11.opBNE,                // 0x02nn   0010XX          11/20+  2.6**\n    PDP11.opBEQ,                // 0x03nn   0014XX          11/20+  2.6**\n    PDP11.opBGE,                // 0x04nn   0020XX          11/20+  2.6**\n    PDP11.opBLT,                // 0x05nn   0024XX          11/20+  2.6**\n    PDP11.opBGT,                // 0x06nn   0030XX          11/20+  2.6**\n    PDP11.opBLE,                // 0x07nn   0034XX          11/20+  2.6**\n    PDP11.opJSR,                // 0x08nn   004RDD          11/20+  4.4\n    PDP11.opJSR,                // 0x09nn   004RDD          11/20+  4.4\n    PDP11.op0AXn_1120,          // 0x0Ann\n    PDP11.op0BXn_1120,          // 0x0Bnn\n    PDP11.op0CXn_1120,          // 0x0Cnn\n    PDP11.opUndefined,          // 0x0Dnn\n    PDP11.opUndefined,          // 0x0Enn\n    PDP11.opUndefined           // 0x0Fnn\n];\n\nPDP11.aOp0AXn_1120 = [\n    PDP11.opCLR,                // 0x0A0n   0050DD          11/20+  2.3\n    PDP11.opCOM,                // 0x0A4n   0051DD          11/20+  2.3\n    PDP11.opINC,                // 0x0A8n   0052DD          11/20+  2.3\n    PDP11.opDEC                 // 0x0ACn   0053DD          11/20+  2.3\n];\n\nPDP11.aOp0BXn_1120 = [\n    PDP11.opNEG,                // 0x0B0n   0054DD          11/20+  2.3\n    PDP11.opADC,                // 0x0B4n   0055DD          11/20+  2.3\n    PDP11.opSBC,                // 0x0B8n   0056DD          11/20+  2.3\n    PDP11.opTST                 // 0x0BCn   0057DD          11/20+  2.3*\n];\n\nPDP11.aOp0CXn_1120 = [\n    PDP11.opROR,                // 0x0C0n   0060DD          11/20+  2.3*\n    PDP11.opROL,                // 0x0C4n   0061DD          11/20+  2.3*\n    PDP11.opASR,                // 0x0C8n   0062DD          11/20+  2.3*\n    PDP11.opASL                 // 0x0CCn   0063DD          11/20+  2.3*\n];\n\nPDP11.aOp00Xn_1120 = [\n    PDP11.op000X_1120,          // 0x000n   000000-000017\n    PDP11.opUndefined,          // 0x001n   000020-000037\n    PDP11.opUndefined,          // 0x002n   000040-000057\n    PDP11.opUndefined,          // 0x003n   000060-000077\n    PDP11.opJMP,                // 0x004n   0001DD          11/20+  1.2\n    PDP11.opJMP,                // 0x005n   0001DD          11/20+  1.2\n    PDP11.opJMP,                // 0x006n   0001DD          11/20+  1.2\n    PDP11.opJMP,                // 0x007n   0001DD          11/20+  1.2\n    PDP11.opRTS,                // 0x008n   00020R          11/20+  3.5 (opRTS() will also confirm that bit 3 is clear)\n    PDP11.opUndefined,          // 0x009n   00023N\n    PDP11.op00AX_1120,          // 0x00An   000240-000257\n    PDP11.op00BX_1120,          // 0x00Bn   000260-000277\n    PDP11.opSWAB,               // 0x00Cn   0003DD          11/20+  2.3\n    PDP11.opSWAB,               // 0x00Dn   0003DD          11/20+  2.3\n    PDP11.opSWAB,               // 0x00En   0003DD          11/20+  2.3\n    PDP11.opSWAB                // 0x00Fn   0003DD          11/20+  2.3\n];\n\nPDP11.aOp000X_1120 = [\n    PDP11.opHALT,               // 0x0000   000000          11/20+  1.8\n    PDP11.opWAIT,               // 0x0001   000001          11/20+  1.8\n    PDP11.opRTT,                // 0x0002   000002          11/20+  4.8 (this is really RTI, but on the 11/20, it behaves like RTT)\n    PDP11.opBPT,                // 0x0003\n    PDP11.opIOT,                // 0x0004   000004          11/20+  9.3\n    PDP11.opRESET,              // 0x0005   000005          11/20+  20ms\n    PDP11.opUndefined,          // 0x0006\n    PDP11.opUndefined,          // 0x0007\n    PDP11.opUndefined,          // 0x0008\n    PDP11.opUndefined,          // 0x0009\n    PDP11.opUndefined,          // 0x000A\n    PDP11.opUndefined,          // 0x000B\n    PDP11.opUndefined,          // 0x000C\n    PDP11.opUndefined,          // 0x000D\n    PDP11.opUndefined,          // 0x000E\n    PDP11.opUndefined           // 0x000F\n];\n\nPDP11.aOp00AX_1120 = [\n    PDP11.opNOP,                // 0x00A0   000240          11/20+  1.5\n    PDP11.opCLC,                // 0x00A1   000241          11/20+  1.5\n    PDP11.opCLV,                // 0x00A2   000242          11/20+  1.5\n    PDP11.opCLx,                // 0x00A3   000243          11/20+  1.5\n    PDP11.opCLZ,                // 0x00A4   000244          11/20+  1.5\n    PDP11.opCLx,                // 0x00A5   000245          11/20+  1.5\n    PDP11.opCLx,                // 0x00A6   000246          11/20+  1.5\n    PDP11.opCLx,                // 0x00A7   000247          11/20+  1.5\n    PDP11.opCLN,                // 0x00A8   000250          11/20+  1.5\n    PDP11.opCLx,                // 0x00A9   000251          11/20+  1.5\n    PDP11.opCLx,                // 0x00AA   000252          11/20+  1.5\n    PDP11.opCLx,                // 0x00AB   000253          11/20+  1.5\n    PDP11.opCLx,                // 0x00AC   000254          11/20+  1.5\n    PDP11.opCLx,                // 0x00AD   000255          11/20+  1.5\n    PDP11.opCLx,                // 0x00AE   000256          11/20+  1.5\n    PDP11.opCLx                 // 0x00AF   000257          11/20+  1.5\n];\n\nPDP11.aOp00BX_1120 = [\n    PDP11.opNOP,                // 0x00B0   000260          11/20+  1.5\n    PDP11.opSEC,                // 0x00B1   000261          11/20+  1.5\n    PDP11.opSEV,                // 0x00B2   000262          11/20+  1.5\n    PDP11.opSEx,                // 0x00B3   000263          11/20+  1.5\n    PDP11.opSEZ,                // 0x00B4   000264          11/20+  1.5\n    PDP11.opSEx,                // 0x00B5   000265          11/20+  1.5\n    PDP11.opSEx,                // 0x00B6   000266          11/20+  1.5\n    PDP11.opSEx,                // 0x00B7   000267          11/20+  1.5\n    PDP11.opSEN,                // 0x00B8   000270          11/20+  1.5\n    PDP11.opSEx,                // 0x00B9   000271          11/20+  1.5\n    PDP11.opSEx,                // 0x00BA   000272          11/20+  1.5\n    PDP11.opSEx,                // 0x00BB   000273          11/20+  1.5\n    PDP11.opSEx,                // 0x00BC   000274          11/20+  1.5\n    PDP11.opSEx,                // 0x00BD   000275          11/20+  1.5\n    PDP11.opSEx,                // 0x00BE   000276          11/20+  1.5\n    PDP11.opSEx                 // 0x00BF   000277          11/20+  1.5\n];\n\nPDP11.aOp8Xnn_1120 = [\n    PDP11.opBPL,                // 0x80nn   1000XX          11/20+  2.6**\n    PDP11.opBMI,                // 0x81nn   1004XX          11/20+  2.6**\n    PDP11.opBHI,                // 0x82nn   1010XX          11/20+  2.6**\n    PDP11.opBLOS,               // 0x83nn   1014XX          11/20+  2.6**\n    PDP11.opBVC,                // 0x84nn   1020XX          11/20+  2.6**\n    PDP11.opBVS,                // 0x85nn   1024XX          11/20+  2.6**\n    PDP11.opBCC,                // 0x86nn   1030XX          11/20+  2.6**\n    PDP11.opBCS,                // 0x87nn   1034XX          11/20+  2.6**\n    PDP11.opEMT,                // 0x88nn   104000-104377   11/20+  9.3\n    PDP11.opTRAP,               // 0x89nn   104400-104777   11/20+  9.3\n    PDP11.op8AXn_1120,          // 0x8Ann\n    PDP11.op8BXn_1120,          // 0x8Bnn\n    PDP11.op8CXn_1120,          // 0x8Cnn\n    PDP11.opUndefined,          // 0x8Dnn\n    PDP11.opUndefined,          // 0x8Enn\n    PDP11.opUndefined           // 0x8Fnn\n];\n\nPDP11.aOp8AXn_1120 = [\n    PDP11.opCLRB,               // 0x8A0n   1050DD          11/20+  2.3\n    PDP11.opCOMB,               // 0x8A4n   1051DD          11/20+  2.3\n    PDP11.opINCB,               // 0x8A8n   1052DD          11/20+  2.3\n    PDP11.opDECB                // 0x8ACn   1053DD          11/20+  2.3\n];\n\nPDP11.aOp8BXn_1120 = [\n    PDP11.opNEGB,               // 0x8B0n   1054DD          11/20+  2.3\n    PDP11.opADCB,               // 0x8B4n   1055DD          11/20+  2.3\n    PDP11.opSBCB,               // 0x8B8n   1056DD          11/20+  2.3\n    PDP11.opTSTB                // 0x8BCn   1057DD          11/20+  2.3*\n];\n\nPDP11.aOp8CXn_1120 = [\n    PDP11.opRORB,               // 0x8C0n   1060DD          11/20+  2.3*\n    PDP11.opROLB,               // 0x8C4n   1061DD          11/20+  2.3*\n    PDP11.opASRB,               // 0x8C8n   1062DD          11/20+  2.3*\n    PDP11.opASLB                // 0x8CCn   1063DD          11/20+  2.3*\n];\n\n/**\n * op1140(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op1140 = function(opCode)\n{\n    PDP11.aOpXnnn_1140[opCode >> 12].call(this, opCode);\n};\n\n/**\n * op0Xnn_1140(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op0Xnn_1140 = function(opCode)\n{\n    PDP11.aOp0Xnn_1140[(opCode >> 8) & 0xf].call(this, opCode);\n};\n\n/**\n * op0DXn_1140(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op0DXn_1140 = function(opCode)\n{\n    PDP11.aOp0DXn_1140[(opCode >> 6) & 0x3].call(this, opCode);\n};\n\n/**\n * op00Xn_1140(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op00Xn_1140 = function(opCode)\n{\n    PDP11.aOp00Xn_1140[(opCode >> 4) & 0xf].call(this, opCode);\n};\n\n/**\n * op000X_1140(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op000X_1140 = function(opCode)\n{\n    PDP11.aOp000X_1140[opCode & 0xf].call(this, opCode);\n};\n\n/**\n * op7Xnn_1140(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op7Xnn_1140 = function(opCode)\n{\n    PDP11.aOp7Xnn_1140[(opCode >> 8) & 0xf].call(this, opCode);\n};\n\n/**\n * op8Xnn_1140(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op8Xnn_1140 = function(opCode)\n{\n    PDP11.aOp8Xnn_1140[(opCode >> 8) & 0xf].call(this, opCode);\n};\n\n/**\n * op8DXn_1140(opCode)\n *\n * @this {CPUStatePDP11}\n * @param {number} opCode\n */\nPDP11.op8DXn_1140 = function(opCode)\n{\n    if (this.model < PDP11.MODEL_1145) {\n        PDP11.opUndefined.call(this, opCode);\n        return;\n    }\n    PDP11.aOp8DXn_1140[(opCode >> 6) & 0x3].call(this, opCode);\n};\n\nPDP11.aOpXnnn_1140 = [\n    PDP11.op0Xnn_1140,          // 0x0nnn\n    PDP11.opMOV,                // 0x1nnn   01SSDD          11/20+  2.3\n    PDP11.opCMP,                // 0x2nnn   02SSDD          11/20+  2.3*\n    PDP11.opBIT,                // 0x3nnn   03SSDD          11/20+  2.9*\n    PDP11.opBIC,                // 0x4nnn   04SSDD          11/20+  2.9\n    PDP11.opBIS,                // 0x5nnn   05SSDD          11/20+  2.3\n    PDP11.opADD,                // 0x6nnn   06SSDD          11/20+  2.3\n    PDP11.op7Xnn_1140,          // 0x7nnn\n    PDP11.op8Xnn_1140,          // 0x8nnn\n    PDP11.opMOVB,               // 0x9nnn   11SSDD          11/20+  2.3\n    PDP11.opCMPB,               // 0xAnnn   12SSDD          11/20+  2.3\n    PDP11.opBITB,               // 0xBnnn   13SSDD          11/20+  2.9\n    PDP11.opBICB,               // 0xCnnn   14SSDD          11/20+  2.9\n    PDP11.opBISB,               // 0xDnnn   15SSDD          11/20+  2.3\n    PDP11.opSUB,                // 0xEnnn   16SSDD          11/20+  2.3\n    PDP11.opUndefined           // 0xFnnn\n];\n\nPDP11.aOp0Xnn_1140 = [\n    PDP11.op00Xn_1140,          // 0x00nn\n    PDP11.opBR,                 // 0x01nn   0004XX          11/20+  2.6\n    PDP11.opBNE,                // 0x02nn   0010XX          11/20+  2.6**\n    PDP11.opBEQ,                // 0x03nn   0014XX          11/20+  2.6**\n    PDP11.opBGE,                // 0x04nn   0020XX          11/20+  2.6**\n    PDP11.opBLT,                // 0x05nn   0024XX          11/20+  2.6**\n    PDP11.opBGT,                // 0x06nn   0030XX          11/20+  2.6**\n    PDP11.opBLE,                // 0x07nn   0034XX          11/20+  2.6**\n    PDP11.opJSR,                // 0x08nn   004RDD          11/20+  4.4\n    PDP11.opJSR,                // 0x09nn   004RDD          11/20+  4.4\n    PDP11.op0AXn_1120,          // 0x0Ann\n    PDP11.op0BXn_1120,          // 0x0Bnn\n    PDP11.op0CXn_1120,          // 0x0Cnn\n    PDP11.op0DXn_1140,          // 0x0Dnn\n    PDP11.opUndefined,          // 0x0Enn\n    PDP11.opUndefined           // 0x0Fnn\n];\n\nPDP11.aOp0DXn_1140 = [\n    PDP11.opMARK,               // 0x0D0n                   11/40+          LEIS\n    PDP11.opMFPI,               // 0x0D4n                   11/40+\n    PDP11.opMTPI,               // 0x0D8n                   11/40+\n    PDP11.opSXT                 // 0x0DCn                   11/40+          LEIS\n];\n\nPDP11.aOp00Xn_1140 = [\n    PDP11.op000X_1140,          // 0x000n   000000-000017\n    PDP11.opUndefined,          // 0x001n   000020-000037\n    PDP11.opUndefined,          // 0x002n   000040-000057\n    PDP11.opUndefined,          // 0x003n   000060-000077\n    PDP11.opJMP,                // 0x004n   0001DD          11/20+  1.2\n    PDP11.opJMP,                // 0x005n   0001DD          11/20+  1.2\n    PDP11.opJMP,                // 0x006n   0001DD          11/20+  1.2\n    PDP11.opJMP,                // 0x007n   0001DD          11/20+  1.2\n    PDP11.opRTS,                // 0x008n   00020R          11/20+  3.5 (opRTS() will also confirm that bit 3 is clear)\n    PDP11.opSPL,                // 0x009n   00023N          11/45+      (opSPL() will also confirm that bit 3 is set)\n    PDP11.op00AX_1120,          // 0x00An   000240-000257\n    PDP11.op00BX_1120,          // 0x00Bn   000260-000277\n    PDP11.opSWAB,               // 0x00Cn   0003DD          11/20+  2.3\n    PDP11.opSWAB,               // 0x00Dn   0003DD          11/20+  2.3\n    PDP11.opSWAB,               // 0x00En   0003DD          11/20+  2.3\n    PDP11.opSWAB                // 0x00Fn   0003DD          11/20+  2.3\n];\n\nPDP11.aOp000X_1140 = [\n    PDP11.opHALT,               // 0x0000   000000          11/20+  1.8\n    PDP11.opWAIT,               // 0x0001   000001          11/20+  1.8\n    PDP11.opRTI,                // 0x0002   000002          11/20+  4.8\n    PDP11.opBPT,                // 0x0003   000003\n    PDP11.opIOT,                // 0x0004   000004          11/20+  9.3\n    PDP11.opRESET,              // 0x0005   000005          11/20+  20ms\n    PDP11.opRTT,                // 0x0006   000006          11/40+          LEIS\n    PDP11.opMFPT,               // 0x0007   000007          11/44+\n    PDP11.opUndefined,          // 0x0008\n    PDP11.opUndefined,          // 0x0009\n    PDP11.opUndefined,          // 0x000A\n    PDP11.opUndefined,          // 0x000B\n    PDP11.opUndefined,          // 0x000C\n    PDP11.opUndefined,          // 0x000D\n    PDP11.opUndefined,          // 0x000E\n    PDP11.opUndefined           // 0x000F\n];\n\nPDP11.aOp7Xnn_1140 = [\n    PDP11.opMUL,                // 0x70nn                   11/40+          EIS\n    PDP11.opMUL,                // 0x71nn                   11/40+          EIS\n    PDP11.opDIV,                // 0x72nn                   11/40+          EIS\n    PDP11.opDIV,                // 0x73nn                   11/40+          EIS\n    PDP11.opASH,                // 0x74nn                   11/40+          EIS\n    PDP11.opASH,                // 0x75nn                   11/40+          EIS\n    PDP11.opASHC,               // 0x76nn                   11/40+          EIS\n    PDP11.opASHC,               // 0x77nn                   11/40+          EIS\n    PDP11.opXOR,                // 0x78nn                   11/40+          LEIS\n    PDP11.opXOR,                // 0x79nn                   11/40+          LEIS\n    PDP11.opUndefined,          // 0x7Ann\n    PDP11.opUndefined,          // 0x7Bnn\n    PDP11.opUndefined,          // 0x7Cnn\n    PDP11.opUndefined,          // 0x7Dnn\n    PDP11.opSOB,                // 0x7Enn                   11/40+          LEIS\n    PDP11.opSOB                 // 0x7Fnn                   11/40+          LEIS\n];\n\nPDP11.aOp8Xnn_1140 = [\n    PDP11.opBPL,                // 0x80nn   1000XX          11/20+  2.6**\n    PDP11.opBMI,                // 0x81nn   1004XX          11/20+  2.6**\n    PDP11.opBHI,                // 0x82nn   1010XX          11/20+  2.6**\n    PDP11.opBLOS,               // 0x83nn   1014XX          11/20+  2.6**\n    PDP11.opBVC,                // 0x84nn   1020XX          11/20+  2.6**\n    PDP11.opBVS,                // 0x85nn   1024XX          11/20+  2.6**\n    PDP11.opBCC,                // 0x86nn   1030XX          11/20+  2.6**\n    PDP11.opBCS,                // 0x87nn   1034XX          11/20+  2.6**\n    PDP11.opEMT,                // 0x88nn   104000-104377   11/20+  9.3\n    PDP11.opTRAP,               // 0x89nn   104400-104777   11/20+  9.3\n    PDP11.op8AXn_1120,          // 0x8Ann   1050XX\n    PDP11.op8BXn_1120,          // 0x8Bnn   1054XX\n    PDP11.op8CXn_1120,          // 0x8Cnn   1060XX\n    PDP11.op8DXn_1140,          // 0x8Dnn   106400-106777\n    PDP11.opUndefined,          // 0x8Enn   1070XX\n    PDP11.opUndefined           // 0x8Fnn   1074XX\n];\n\nPDP11.aOp8DXn_1140 = [\n    PDP11.opMTPS,               // 0x8D0n   1064XX          11/34A only\n    PDP11.opMFPD,               // 0x8D4n   1065XX          11/45+\n    PDP11.opMTPD,               // 0x8D8n   1066XX          11/45+\n    PDP11.opMFPS                // 0x8DCn   1067XX          11/34A only\n];\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/rom.js (C) Jeff Parsons 2012-2018\n */\n\n\nclass ROMPDP11 extends Component {\n    /**\n     * ROMPDP11(parmsROM)\n     *\n     * The ROMPDP11 component expects the following (parmsROM) properties:\n     *\n     *      addr: physical address of ROM\n     *      size: amount of ROM, in bytes\n     *      alias: physical alias address (null if none)\n     *      file: name of ROM data file\n     *\n     * NOTE: The ROM data will not be copied into place until the Bus is ready (see initBus()) AND\n     * the ROM data file has finished loading (see finishLoad()).\n     *\n     * Also, while the size parameter may seem redundant, I consider it useful to confirm that the ROM\n     * you received is the ROM you expected.\n     *\n     * @param {Object} parmsROM\n     */\n    constructor(parmsROM)\n    {\n        super(\"ROM\", parmsROM, MessagesPDP11.ROM);\n\n        this.abInit = null;\n        this.aSymbols = null;\n\n        this.addrROM = +parmsROM['addr'];\n        this.sizeROM = +parmsROM['size'];\n        this.fRetainROM = false;\n\n        /*\n         * The new 'alias' property can now be EITHER a single physical address (like 'addr') OR an array of\n         * physical addresses; eg:\n         *\n         *      [0xf0000,0xffff0000,0xffff8000]\n         *\n         * We could have overloaded 'addr' to accomplish the same thing, but I think it's better to have any\n         * aliased locations listed under a separate property.\n         *\n         * Most ROMs are not aliased, in which case the 'alias' property should have the default value of null.\n         */\n        this.addrAlias = parmsROM['alias'];\n        if (typeof this.addrAlias == \"string\") {\n            this.addrAlias = eval(this.addrAlias);\n        }\n\n        this.sFilePath = parmsROM['file'];\n        this.sFileName = Str.getBaseName(this.sFilePath);\n\n        if (this.sFilePath) {\n            var sFileURL = this.sFilePath;\n            if (DEBUG) this.log('load(\"' + sFileURL + '\")');\n            /*\n             * If the selected ROM file has a \".json\" extension, then we assume it's pre-converted\n             * JSON-encoded ROM data, so we load it as-is; ditto for ROM files with a \".hex\" extension.\n             * Otherwise, we ask our server-side ROM converter to return the file in a JSON-compatible format.\n             */\n            var sFileExt = Str.getExtension(this.sFileName);\n            if (sFileExt != DumpAPI.FORMAT.JSON && sFileExt != DumpAPI.FORMAT.HEX) {\n                sFileURL = Web.getHost() + DumpAPI.ENDPOINT + '?' + DumpAPI.QUERY.FILE + '=' + this.sFilePath + '&' + DumpAPI.QUERY.FORMAT + '=' + DumpAPI.FORMAT.BYTES + '&' + DumpAPI.QUERY.DECIMAL + '=true';\n            }\n            var rom = this;\n            Web.getResource(sFileURL, null, true, function doneLoad(sURL, sResponse, nErrorCode) {\n                rom.finishLoad(sURL, sResponse, nErrorCode);\n            });\n        }\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * @this {ROMPDP11}\n     * @param {ComputerPDP11} cmp\n     * @param {BusPDP11} bus\n     * @param {CPUStatePDP11} cpu\n     * @param {DebuggerPDP11} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.bus = bus;\n        this.cpu = cpu;\n        this.dbg = dbg;\n        this.initROM();\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {ROMPDP11}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        if (this.aSymbols) {\n            if (this.dbg) {\n                this.dbg.addSymbols(this.id, this.addrROM, this.sizeROM, this.aSymbols);\n            }\n            /*\n             * Our only role in the handling of symbols is to hand them off to the Debugger at our\n             * first opportunity. Now that we've done that, our copy of the symbols, if any, are toast.\n             */\n            delete this.aSymbols;\n        }\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * Since we have nothing to do on powerDown(), and no state to return, we could simply omit\n     * this function.  But it doesn't hurt anything, and maybe we'll use our state to save something\n     * useful down the road, like user-defined symbols (ie, symbols that the Debugger may have\n     * created, above and beyond those symbols we automatically loaded, if any, along with the ROM).\n     *\n     * @this {ROMPDP11}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        return true;\n    }\n\n    /**\n     * finishLoad(sURL, sData, nErrorCode)\n     *\n     * @this {ROMPDP11}\n     * @param {string} sURL\n     * @param {string} sData\n     * @param {number} nErrorCode (response from server if anything other than 200)\n     */\n    finishLoad(sURL, sData, nErrorCode)\n    {\n        if (nErrorCode) {\n            this.notice(\"Unable to load ROM resource (error \" + nErrorCode + \": \" + sURL + \")\");\n            this.sFilePath = null;\n        }\n        else {\n            Component.addMachineResource(this.idMachine, sURL, sData);\n            var resource = Web.parseMemoryResource(sURL, sData);\n            if (resource) {\n                this.abInit = resource.aBytes;\n                this.aSymbols = resource.aSymbols;\n            } else {\n                this.sFilePath = null;\n            }\n        }\n        this.initROM();\n    }\n\n    /**\n     * initROM()\n     *\n     * This function is called by both initBus() and finishLoad(), but it cannot copy the initial data into place\n     * until after initBus() has received the Bus component AND finishLoad() has received the data.  When both those\n     * criteria are satisfied, the component becomes \"ready\".\n     *\n     * @this {ROMPDP11}\n     */\n    initROM()\n    {\n        if (!this.isReady()) {\n            if (this.sFilePath) {\n                /*\n                 * Too early...\n                 */\n                if (!this.abInit || !this.bus) return;\n\n                /*\n                 * If no explicit size was specified, then use whatever the actual size is.\n                 */\n                if (!this.sizeROM) {\n                    this.sizeROM = this.abInit.length;\n                }\n                if (this.abInit.length != this.sizeROM) {\n                    /*\n                     * Note that setError() sets the component's fError flag, which in turn prevents setReady() from\n                     * marking the component ready.  TODO: Revisit this decision.  On the one hand, it sounds like a\n                     * good idea to stop the machine in its tracks whenever a setError() occurs, but there may also be\n                     * times when we'd like to forge ahead anyway.\n                     */\n                    this.setError(\"ROM size (\" + Str.toHexLong(this.abInit.length) + \") does not match specified size (\" + Str.toHexLong(this.sizeROM) + \")\");\n                }\n                else if (this.addROM(this.addrROM)) {\n\n                    var aliases = [];\n                    if (typeof this.addrAlias == \"number\") {\n                        aliases.push(this.addrAlias);\n                    } else if (this.addrAlias != null && this.addrAlias.length) {\n                        aliases = this.addrAlias;\n                    }\n                    for (var i = 0; i < aliases.length; i++) {\n                        this.cloneROM(aliases[i]);\n                    }\n                    /*\n                     * We used to hang onto the initial ROM data so that we could restore any bytes the CPU overwrote,\n                     * using memory write-notification handlers, but with the introduction of read-only memory blocks, that's\n                     * no longer necessary.\n                     *\n                     * TODO: Consider an option to retain the ROM data, and give the user some way of restoring ROMs.\n                     * That may be useful for \"resumable\" machines that save/restore all dirty block of memory, regardless\n                     * whether they're ROM or RAM.  However, the only way to modify a machine's ROM is with the Debugger,\n                     * and Debugger users should know better.\n                     */\n                    if (!this.fRetainROM) {\n                        delete this.abInit;\n                    }\n                }\n            }\n            this.setReady();\n        }\n    }\n\n    /**\n     * addROM(addr)\n     *\n     * @this {ROMPDP11}\n     * @param {number} addr\n     * @return {boolean}\n     */\n    addROM(addr)\n    {\n        if (addr >= BusPDP11.IOPAGE_16BIT && addr < BusPDP11.IOPAGE_16BIT + BusPDP11.IOPAGE_LENGTH) {\n            /*\n             * This code has been added as a work-around to effectively allow us to install small ROMs into portions\n             * of the IOPAGE address space, by installing I/O handlers for the entire range that return the corresponding\n             * bytes of the current ROM image on reads, and ignore any writes (which I'm only assuming is how a typical\n             * ROM \"device\" deals with writes; we could remove the write handler, but then writes would fault).\n             *\n             * TODO: It would be more efficient if we parsed ROM data as words rather than bytes, and then installed\n             * only word handlers instead of only byte handlers.  It was done this way purely for historical reasons (ie,\n             * because that's how other PCjs machines parse their ROMs).  For now, all this means is that executing code\n             * out of ROM will be slower than out of RAM -- although that's often true in the real world as well.\n             */\n            var IOTable = {\n                [addr]: [ROMPDP11.prototype.readROMByte, ROMPDP11.prototype.writeROMByte, null, null, null, this.sizeROM >> 1]\n            };\n            if (this.bus.addIOTable(this, IOTable)) {\n                this.status(\"Added \" + this.sizeROM + \"-byte ROM at \" + Str.toOct(addr));\n                this.fRetainROM = true;\n                return true;\n            }\n        }\n        else if (this.bus.addMemory(addr, this.sizeROM, MemoryPDP11.TYPE.ROM)) {\n            if (DEBUG) this.log(\"addROM(): copying ROM to \" + Str.toHexLong(addr) + \" (\" + Str.toHexLong(this.abInit.length) + \" bytes)\");\n            var i;\n            for (i = 0; i < this.abInit.length; i++) {\n                this.bus.setByteDirect(addr + i, this.abInit[i]);\n            }\n            return true;\n        }\n\n        /*\n         * We don't need to report an error here, because addMemory() already takes care of that.\n         */\n        return false;\n    }\n\n    /**\n     * cloneROM(addr)\n     *\n     * For ROMs with one or more alias addresses, we used to call addROM() for each address.  However,\n     * that obviously wasted memory, since each alias was an independent copy, and if you used the\n     * Debugger to edit the ROM in one location, the changes would not appear in the other location(s).\n     *\n     * Now that the Bus component provides low-level getMemoryBlocks() and setMemoryBlocks() methods\n     * to manually get and set the blocks of any memory range, it is now possible to create true aliases.\n     *\n     * @this {ROMPDP11}\n     * @param {number} addr\n     */\n    cloneROM(addr)\n    {\n        var aBlocks = this.bus.getMemoryBlocks(this.addrROM, this.sizeROM);\n        this.bus.setMemoryBlocks(addr, this.sizeROM, aBlocks);\n    }\n\n    /**\n     * readROMByte(addr)\n     *\n     * @this {ROMPDP11}\n     * @param {number} addr\n     * @return {number}\n     */\n    readROMByte(addr)\n    {\n        var i = (addr - this.addrROM);\n        return this.abInit[i];\n    }\n\n    /**\n     * writeROMByte(data, addr)\n     *\n     * This handler exists simply to ignore any writes, so that they don't cause faults.\n     *\n     * TODO: Another possible use for this would be to allow the Debugger to alter ROM contents,\n     * if the Debugger were to provide an interface indicating whether or not it was responsible\n     * for this write.\n     *\n     * @this {ROMPDP11}\n     * @param {number} data\n     * @param {number} addr\n     */\n    writeROMByte(data, addr)\n    {\n    }\n\n    /**\n     * ROMPDP11.init()\n     *\n     * This function operates on every HTML element of class \"rom\", extracting the\n     * JSON-encoded parameters for the ROMPDP11 constructor from the element's \"data-value\"\n     * attribute, invoking the constructor to create a ROMPDP11 component, and then binding\n     * any associated HTML controls to the new component.\n     */\n    static init()\n    {\n        var aeROM = Component.getElementsByClass(document, PDP11.APPCLASS, \"rom\");\n        for (var iROM = 0; iROM < aeROM.length; iROM++) {\n            var eROM = aeROM[iROM];\n            var parmsROM = Component.getComponentParms(eROM);\n            var rom = new ROMPDP11(parmsROM);\n            Component.bindComponentControls(rom, eROM, PDP11.APPCLASS);\n        }\n    }\n}\n\n/*\n * NOTE: There's currently no need for this component to have a reset() function, since\n * once the ROM data is loaded, it can't be changed, so there's nothing to reinitialize.\n *\n * OK, well, I take that back, because the Debugger, if installed, has the ability to modify\n * ROM contents, so in that case, having a reset() function that restores the original ROM data\n * might be useful; then again, it might not, depending on what you're trying to debug.\n *\n * If we do add reset(), then we'll want to change initROM() to hang onto the original\n * ROM data; currently, we release it after copying it into the read-only memory allocated\n * via bus.addMemory().\n */\n\n/*\n * Initialize all the ROMPDP11 modules on the page.\n */\nWeb.onInit(ROMPDP11.init);\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/ram.js (C) Jeff Parsons 2012-2018\n */\n\n\nclass RAMPDP11 extends Component {\n    /**\n     * RAMPDP11(parmsRAM)\n     *\n     * The RAMPDP11 component expects the following (parmsRAM) properties:\n     *\n     *      addr: starting physical address of RAM (default is 0)\n     *      size: amount of RAM, in bytes (default is 0, which means defer to motherboard switch settings)\n     *      file: name of optional data file to load into RAM (default is \"\")\n     *      load: optional file load address (overrides any load address specified in the data file; default is null)\n     *      exec: optional file exec address (overrides any exec address specified in the data file; default is null)\n     *\n     * NOTE: We make a note of the specified size, but no memory is initially allocated for the RAM until the\n     * Computer component calls powerUp().\n     *\n     * TODO: I seem to recall a PDP-11 diagnostic that failed if total RAM wasn't a multiple of 16Kb; our Bus\n     * component defaults to a block size that matches BusPDP11.IOPAGE_LENGTH (ie, 8Kb), and we even allow partial\n     * block allocations, so internally, we don't have that requirement, but for better compatibility, perhaps we\n     * should display a non-fatal warning if addr or size don't fall on 16Kb boundaries.\n     *\n     * @param {Object} parmsRAM\n     */\n    constructor(parmsRAM)\n    {\n        super(\"RAM\", parmsRAM);\n\n        this.abInit = null;\n        this.aSymbols = null;\n\n        this.addrRAM = +parmsRAM['addr'];\n        this.sizeRAM = +parmsRAM['size'];\n\n        this.addrLoad = parmsRAM['load'];\n        this.addrExec = parmsRAM['exec'];\n        if (this.addrLoad != null) this.addrLoad = +this.addrLoad;\n        if (this.addrExec != null) this.addrExec = +this.addrExec;\n\n        this.fInstalled = (!!this.sizeRAM); // 0 is the default value for 'size' when none is specified\n        this.fAllocated = this.fReset = false;\n\n        this.sFilePath = parmsRAM['file'];\n        this.sFileName = Str.getBaseName(this.sFilePath);\n\n        if (this.sFilePath) {\n            var sFileURL = this.sFilePath;\n            if (DEBUG) this.log('load(\"' + sFileURL + '\")');\n            /*\n             * If the selected data file has a \".json\" extension, then we assume it's pre-converted\n             * JSON-encoded data, so we load it as-is; ditto for ROM files with a \".hex\" extension.\n             * Otherwise, we ask our server-side converter to return the file in a JSON-compatible format.\n             */\n            var sFileExt = Str.getExtension(this.sFileName);\n            if (sFileExt != DumpAPI.FORMAT.JSON && sFileExt != DumpAPI.FORMAT.HEX) {\n                sFileURL = Web.getHost() + DumpAPI.ENDPOINT + '?' + DumpAPI.QUERY.FILE + '=' + this.sFilePath + '&' + DumpAPI.QUERY.FORMAT + '=' + DumpAPI.FORMAT.BYTES + '&' + DumpAPI.QUERY.DECIMAL + '=true';\n            }\n            var ram = this;\n            Web.getResource(sFileURL, null, true, function doneLoad(sURL, sResponse, nErrorCode) {\n                ram.finishLoad(sURL, sResponse, nErrorCode);\n            });\n        }\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * @this {RAMPDP11}\n     * @param {ComputerPDP11} cmp\n     * @param {BusPDP11} bus\n     * @param {CPUStatePDP11} cpu\n     * @param {DebuggerPDP11} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.bus = bus;\n        this.cpu = cpu;\n        this.dbg = dbg;\n        this.initRAM();\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {RAMPDP11}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        if (this.aSymbols) {\n            if (this.dbg) {\n                this.dbg.addSymbols(this.id, this.addrRAM, this.sizeRAM, this.aSymbols);\n            }\n            /*\n             * Our only role in the handling of symbols is to hand them off to the Debugger at our\n             * first opportunity. Now that we've done that, our copy of the symbols, if any, are toast.\n             */\n            delete this.aSymbols;\n        }\n        if (!fRepower) {\n            /*\n             * Since we use the Bus to allocate all our memory, memory contents are already restored for us,\n             * so we don't save any state, and therefore no state should be restored.  Just do a reset().\n             */\n\n            this.reset();\n        }\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {RAMPDP11}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        /*\n         * The Computer powers down the CPU first, at which point CPUState state is saved,\n         * which includes the Bus state, and since we use the Bus component to allocate all\n         * our memory, memory contents are already saved for us, so we don't need the usual\n         * save logic.\n         */\n        return true;\n    }\n\n    /**\n     * finishLoad(sURL, sData, nErrorCode)\n     *\n     * @this {RAMPDP11}\n     * @param {string} sURL\n     * @param {string} sData\n     * @param {number} nErrorCode (response from server if anything other than 200)\n     */\n    finishLoad(sURL, sData, nErrorCode)\n    {\n        if (nErrorCode) {\n            this.notice(\"Unable to load RAM resource (error \" + nErrorCode + \": \" + sURL + \")\");\n            this.sFilePath = null;\n        }\n        else {\n            Component.addMachineResource(this.idMachine, sURL, sData);\n            var resource = Web.parseMemoryResource(sURL, sData);\n            if (resource) {\n                this.abInit = resource.aBytes;\n                this.aSymbols = resource.aSymbols;\n                if (this.addrLoad == null) this.addrLoad = resource.addrLoad;\n                if (this.addrExec == null) this.addrExec = resource.addrExec;\n            } else {\n                this.sFilePath = null;\n            }\n        }\n        this.initRAM();\n    }\n\n    /**\n     * initRAM()\n     *\n     * This function is called by both initBus() and finishLoad(), but it cannot copy the initial data into place\n     * until after initBus() has received the Bus component AND finishLoad() has received the data.  When both those\n     * criteria are satisfied, the component becomes \"ready\".\n     *\n     * @this {RAMPDP11}\n     */\n    initRAM()\n    {\n        if (!this.bus) return;\n\n        if (!this.fAllocated && this.sizeRAM) {\n            if (this.bus.addMemory(this.addrRAM, this.sizeRAM, MemoryPDP11.TYPE.RAM)) {\n                this.fAllocated = true;\n            } else {\n                this.sizeRAM = 0;           // don't bother trying again (it just results in redundant error messages)\n            }\n        }\n        if (!this.isReady()) {\n            if (!this.fAllocated) {\n                Component.error(\"No RAM allocated\");\n            }\n            else if (this.sFilePath) {\n                /*\n                 * Too early...\n                 */\n                if (!this.abInit) return;\n\n                if (this.loadImage(this.abInit, this.addrLoad, this.addrExec, this.addrRAM)) {\n                    this.status('Loaded image \"' + this.sFileName + '\"');\n                } else {\n                    this.notice('Error loading image \"' + this.sFileName + '\"');\n                }\n\n                /*\n                 * NOTE: We now retain this data, so that reset() can return the RAM to its predefined state.\n                 *\n                 *      delete this.abInit;\n                 */\n            }\n            this.fReset = true;\n            this.setReady();\n        }\n    }\n\n    /**\n     * reset()\n     *\n     * @this {RAMPDP11}\n     */\n    reset()\n    {\n        if (this.fAllocated && !this.fReset) {\n            /*\n             * TODO: Add a configuration parameter for selecting the byte pattern on reset?\n             * Note that when memory blocks are originally created, they are currently always\n             * zero-initialized, so this would only affect resets.\n             */\n            this.bus.zeroMemory(this.addrRAM, this.sizeRAM, 0);\n            if (this.abInit) {\n                this.loadImage(this.abInit, this.addrLoad, this.addrExec, this.addrRAM, !this.dbg);\n            }\n        }\n        this.fReset = false;\n    }\n\n    /**\n     * loadImage(aBytes, addrLoad, addrExec, addrInit, fStart)\n     *\n     * If the array contains a PAPER tape image in the \"Absolute Format,\" load it as specified\n     * by the format; otherwise, load it as-is using the address(es) supplied.\n     *\n     * @this {RAMPDP11}\n     * @param {Array|Uint8Array} aBytes\n     * @param {number|null} [addrLoad]\n     * @param {number|null} [addrExec] (this CAN override any starting address INSIDE the image)\n     * @param {number|null} [addrInit]\n     * @param {boolean} [fStart]\n     * @return {boolean} (true if loaded, false if not)\n     */\n    loadImage(aBytes, addrLoad, addrExec, addrInit, fStart)\n    {\n        var fStop = false;\n        var fLoaded = false;\n        /*\n         * Data on tapes in the \"Absolute Format\" is organized into blocks; each block begins with\n         * a 6-byte header:\n         *\n         *      2-byte signature (0x0001)\n         *      2-byte block length (N + 6, because it includes the 6-byte header)\n         *      2-byte load address\n         *\n         * followed by N data bytes.  If N is zero, then the 2-byte load address is the exec address,\n         * unless the address is odd (usually 1).  DEC's Absolute Loader jumps to the exec address\n         * in former case, halts in the latter.\n         *\n         * All values are stored \"little endian\" (low byte followed by high byte), just like the\n         * PDP-11's memory architecture.\n         *\n         * After the data bytes, there is a single checksum byte.  The 8-bit sum of all the bytes in\n         * the block (including the header bytes and checksum byte) should be zero.\n         *\n         * ANOMALIES: Tape files don't always begin with a signature word, so I allow any number of\n         * leading zeros before the first signature.  Tape files don't always end cleanly either, so as\n         * soon as I see an invalid signature, I break out of the loop without signalling an error, as\n         * long as at least ONE block was successfully processed.  In fact, it's possible that as\n         * soon as a block with ZERO data bytes is encountered, processing is supposed to stop, but\n         * I haven't examined enough tapes (or the Absolute Loader code) to know for sure.\n         */\n        if (addrLoad == null) {\n            var off = 0, fError = false;\n            while (off < aBytes.length - 1) {\n                var w = (aBytes[off] & 0xff) | ((aBytes[off+1] & 0xff) << 8);\n                if (!w) {           // ignore pairs of leading zeros\n                    off += 2;\n                    continue;\n                }\n                if (!(w & 0xff)) {  // as well as single bytes of zero\n                    off++;\n                    continue;\n                }\n                var offBlock = off;\n                if (w != 0x0001) {\n                    this.printMessage(\"invalid signature (\" + Str.toHexWord(w) + \") at offset \" + Str.toHexWord(offBlock), MessagesPDP11.PAPER);\n                    break;\n                }\n                if (off + 6 >= aBytes.length) {\n                    this.printMessage(\"invalid block at offset \" + Str.toHexWord(offBlock), MessagesPDP11.PAPER);\n                    break;\n                }\n                off += 2;\n                var checksum = w;\n                var len = (aBytes[off++] & 0xff) | ((aBytes[off++] & 0xff) << 8);\n                var addr = (aBytes[off++] & 0xff) | ((aBytes[off++] & 0xff) << 8);\n                checksum += (len & 0xff) + (len >> 8) + (addr & 0xff) + (addr >> 8);\n                var offData = off, cbData = len -= 6;\n                while (len > 0 && off < aBytes.length) {\n                    checksum += aBytes[off++] & 0xff;\n                    len--;\n                }\n                if (len != 0 || off >= aBytes.length) {\n                    this.printMessage(\"insufficient data for block at offset \" + Str.toHexWord(offBlock), MessagesPDP11.PAPER);\n                    break;\n                }\n                checksum += aBytes[off++] & 0xff;\n                if (checksum & 0xff) {\n                    this.printMessage(\"invalid checksum (\" + Str.toHexByte(checksum) + \") for block at offset \" + Str.toHexWord(offBlock), MessagesPDP11.PAPER);\n                    break;\n                }\n                if (!cbData) {\n                    if (addr & 0x1) {\n                        fStop = true;\n                    } else {\n                        if (addrExec == null) addrExec = addr;\n                    }\n                    if (addrExec != null) this.printMessage(\"starting address: \" + Str.toHexWord(addrExec), MessagesPDP11.PAPER);\n                } else {\n                    this.printMessage(\"loading \" + Str.toHexWord(cbData) + \" bytes at \" + Str.toHexWord(addr) + \"-\" + Str.toHexWord(addr + cbData), MessagesPDP11.PAPER);\n                    while (cbData--) {\n                        this.bus.setByteDirect(addr++, aBytes[offData++] & 0xff);\n                    }\n                }\n                fLoaded = true;\n            }\n        }\n        if (!fLoaded) {\n            if (addrLoad == null) addrLoad = addrInit;\n            if (addrLoad != null) {\n                for (var i = 0; i < aBytes.length; i++) {\n                    this.bus.setByteDirect(addrLoad + i, aBytes[i]);\n                }\n                fLoaded = true;\n            }\n        }\n        if (fLoaded) {\n            /*\n             * Set the start address to whatever the caller provided, or failing that, whatever start\n             * address was specified inside the image.\n             *\n             * For example, the diagnostic \"MAINDEC-11-D0AA-PB\" doesn't include a start address inside the\n             * image, but we know that the directions for that diagnostic say to \"Start and Restart at 200\",\n             * so we have manually inserted an \"exec\":128 in the JSON containing the image.\n             */\n            if (addrExec == null || fStop) {\n                this.cpu.stopCPU();\n                fStart = false;\n            }\n            if (addrExec != null) {\n                this.cpu.setReset(addrExec, fStart);\n            }\n        }\n        return fLoaded;\n    }\n\n    /**\n     * RAMPDP11.init()\n     *\n     * This function operates on every HTML element of class \"ram\", extracting the\n     * JSON-encoded parameters for the RAMPDP11 constructor from the element's \"data-value\"\n     * attribute, invoking the constructor to create a RAMPDP11 component, and then binding\n     * any associated HTML controls to the new component.\n     */\n    static init()\n    {\n        var aeRAM = Component.getElementsByClass(document, PDP11.APPCLASS, \"ram\");\n        for (var iRAM = 0; iRAM < aeRAM.length; iRAM++) {\n            var eRAM = aeRAM[iRAM];\n            var parmsRAM = Component.getComponentParms(eRAM);\n            var ram = new RAMPDP11(parmsRAM);\n            Component.bindComponentControls(ram, eRAM, PDP11.APPCLASS);\n        }\n    }\n}\n\n/*\n * Initialize all the RAMPDP11 modules on the page.\n */\nWeb.onInit(RAMPDP11.init);\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/keyboard.js (C) Jeff Parsons 2012-2018\n */\n\n\nclass KeyboardPDP11 extends Component {\n    /**\n     * KeyboardPDP11(parmsKbd)\n     *\n     * @param {Object} parmsKbd\n     */\n    constructor(parmsKbd)\n    {\n        super(\"Keyboard\", parmsKbd, MessagesPDP11.KEYBOARD);\n\n        this.setReady();\n    }\n\n    /**\n     * setBinding(sType, sBinding, control, sValue)\n     *\n     * @this {KeyboardPDP11}\n     * @param {string|null} sType is the type of the HTML control (eg, \"button\", \"textarea\", \"register\", \"flag\", \"rled\", etc)\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"esc\")\n     * @param {Object} control is the HTML control DOM object (eg, HTMLButtonElement)\n     * @param {string} [sValue] optional data value\n     * @return {boolean} true if binding was successful, false if unrecognized binding request\n     */\n    setBinding(sType, sBinding, control, sValue)\n    {\n        return false;\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * @this {KeyboardPDP11}\n     * @param {ComputerPDP11} cmp\n     * @param {BusPDP11} bus\n     * @param {CPUStatePDP11} cpu\n     * @param {DebuggerPDP11} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.cmp = cmp;\n        this.cpu = cpu;\n        this.dbg = dbg;         // NOTE: The \"dbg\" property must be set for the message functions to work\n    }\n\n    /**\n     * KeyboardPDP11.init()\n     *\n     * This function operates on every HTML element of class \"keyboard\", extracting the\n     * JSON-encoded parameters for the Keyboard constructor from the element's \"data-value\"\n     * attribute, invoking the constructor to create a Keyboard component, and then binding\n     * any associated HTML controls to the new component.\n     */\n    static init()\n    {\n        var aeKbd = Component.getElementsByClass(document, PDP11.APPCLASS, \"keyboard\");\n        for (var iKbd = 0; iKbd < aeKbd.length; iKbd++) {\n            var eKbd = aeKbd[iKbd];\n            var parmsKbd = Component.getComponentParms(eKbd);\n            var kbd = new KeyboardPDP11(parmsKbd);\n            Component.bindComponentControls(kbd, eKbd, PDP11.APPCLASS);\n        }\n    }\n}\n\nKeyboardPDP11.MINPRESSTIME = 100;            // 100ms\n\n/*\n * Initialize every Keyboard module on the page.\n */\nWeb.onInit(KeyboardPDP11.init);\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/serial.js (C) Jeff Parsons 2012-2018\n */\n\n\n/**\n * Since the Closure Compiler treats ES6 classes as @struct rather than @dict by default,\n * it deters us from defining named properties on our components; eg:\n *\n *      this['exports'] = {...}\n *\n * results in an error:\n *\n *      Cannot do '[]' access on a struct\n *\n * So, in order to define 'exports', we must override the @struct assumption by annotating\n * the class as @unrestricted (or @dict).  Note that this must be done both here and in the\n * Component class, because otherwise the Compiler won't allow us to *reference* the named\n * property either.\n *\n * TODO: Consider marking ALL our classes unrestricted, because otherwise it forces us to\n * define every single property the class uses in its constructor, which results in a fair\n * bit of redundant initialization, since many properties aren't (and don't need to be) fully\n * initialized until the appropriate init(), reset(), restore(), etc. function is called.\n *\n * The upside, however, may be that since the structure of the class is completely defined by\n * the constructor, JavaScript engines may be able to optimize and run more efficiently.\n *\n * @unrestricted\n */\nclass SerialPortPDP11 extends Component {\n    /**\n     * SerialPortPDP11(parmsSerial)\n     *\n     * The SerialPort component has the following component-specific (parmsSerial) properties:\n     *\n     *      adapter: adapter number; 0 if not defined (the PCx86 SerialPort component uses this\n     *      value to set the device's internal COM number, which in turn determines other properties,\n     *      such as I/O ports and IRQ; for the PDP-11, this currently has no defined use)\n     *\n     *      baudReceive: the default number of bits/second that the device should receive data at;\n     *      0 means use the device default (PDP11.DL11.RCSR.BAUD)\n     *\n     *      baudTransmit: the default number of bits/second that the device should transmit data at;\n     *      0 means use the device default (PDP11.DL11.XCSR.BAUD)\n     *\n     *      binding: name of a control (based on its \"binding\" attribute) to bind to this port's I/O\n     *\n     *      tabSize: set to a non-zero number to convert tabs to spaces (applies only to output to\n     *      the above binding); default is 0 (no conversion)\n     *\n     *      upperCase: if true, all received input is upper-cased; it is normally the responsibility\n     *      of the sending device to ensure this, but sometimes it's more convenient to enforce\n     *      on the receiving end.\n     *\n     * NOTE: Since the XSL file defines the 'adapter' and 'baud' properties as numbers, not strings,\n     * there's no need to use parseInt(), and as an added benefit, we don't need to worry about whether\n     * a hex or decimal format was used.\n     *\n     * @param {Object} parmsSerial\n     */\n    constructor(parmsSerial)\n    {\n        super(\"SerialPort\", parmsSerial, MessagesPDP11.SERIAL);\n\n        this.iAdapter = +parmsSerial['adapter'];\n        this.nBaudReceive = +parmsSerial['baudReceive'] || PDP11.DL11.RCSR.BAUD;\n        this.nBaudTransmit = +parmsSerial['baudTransmit'] || PDP11.DL11.XCSR.BAUD;\n        this.fUpperCase = parmsSerial['upperCase'];\n        if (typeof this.fUpperCase == \"string\") this.fUpperCase = (this.fUpperCase == \"true\");\n        /**\n         * consoleOutput becomes a string that records serial port output if the 'binding' property is set to the\n         * reserved name \"console\".  Nothing is written to the console, however, until a linefeed (0x0A) is output\n         * or the string length reaches a threshold (currently, 1024 characters).\n         *\n         * @type {string|null}\n         */\n        this.consoleOutput = null;\n\n        /**\n         * controlIOBuffer is a DOM element bound to the port (currently used for output only; see transmitByte()).\n         *\n         * Example: CTTY COM2\n         *\n         * The CTTY DOS command redirects all CON I/O to the specified serial port (eg, COM2), which it assumes is\n         * connected to a serial terminal, and therefore anything it *transmits* via COM2 will be displayed by the\n         * terminal.  It further assumes that anything typed on such a terminal is NOT displayed, so as DOS *receives*\n         * serial input, DOS *transmits* the appropriate characters back to the terminal via COM2.\n         *\n         * As a result, controlIOBuffer only needs to be updated by the transmitByte() function.\n         *\n         * @type {Object}\n         */\n        this.controlIOBuffer = null;\n\n        /*\n         * If controlIOBuffer is being used AND 'tabSize' is set, then we make an attempt to monitor the characters\n         * being echoed via transmitByte(), maintain a logical column position, and convert any tabs into the appropriate\n         * number of spaces.\n         *\n         * charBOL, if nonzero, is a character to automatically output at the beginning of every line.  This probably\n         * isn't generally useful; I use it internally to preformat serial output.\n         */\n        this.tabSize = +parmsSerial['tabSize'];\n        this.charBOL = +parmsSerial['charBOL'];\n        this.iLogicalCol = 0;\n        this.fNullModem = true;\n\n        this.irqReceiver = this.irqTransmitter = null;\n        this.timerReceiveInterrupt = this.timerTransmitInterrupt = -1;\n\n        this.regRBUF = this.regRCSR = this.regXCSR = 0;\n        this.abReceive = [];\n\n        var sBinding = parmsSerial['binding'];\n        if (sBinding == \"console\") {\n            this.consoleOutput = \"\";\n        } else {\n            /*\n             * NOTE: If sBinding is not the name of a valid Control Panel DOM element, this call does nothing.\n             */\n            Component.bindExternalControl(this, sBinding, SerialPortPDP11.sIOBuffer);\n        }\n\n        /*\n         * No connection until initConnection() is called.\n         */\n        this.sDataReceived = \"\";\n        this.connection = this.sendData = this.updateStatus = null;\n\n        /*\n         * Export all functions required by initConnection().\n         */\n        this['exports'] = {\n            'connect': this.initConnection,\n            'receiveData': this.receiveData,\n            'receiveStatus': this.receiveStatus,\n            'setConnection': this.setConnection\n        };\n    }\n\n    /**\n     * setBinding(sType, sBinding, control, sValue)\n     *\n     * @this {SerialPortPDP11}\n     * @param {string|null} sType is the type of the HTML control (eg, \"button\", \"textarea\", \"register\", \"flag\", \"rled\", etc)\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"buffer\")\n     * @param {Object} control is the HTML control DOM object (eg, HTMLButtonElement)\n     * @param {string} [sValue] optional data value\n     * @return {boolean} true if binding was successful, false if unrecognized binding request\n     */\n    setBinding(sType, sBinding, control, sValue)\n    {\n        var serial = this;\n\n        switch (sBinding) {\n        case SerialPortPDP11.sIOBuffer:\n            this.bindings[sBinding] = this.controlIOBuffer = control;\n\n            /*\n             * An onkeydown handler is required for certain keys that browsers tend to consume themselves;\n             * for example, BACKSPACE is often defined as going back to the previous web page, and certain\n             * CTRL keys are often used for browser shortcuts (usually on Windows-based browsers).\n             *\n             * NOTE: We don't bother with a keyUp handler, because for the most part, we're only intercepting\n             * keys that require special treatment; in general, we're content with keyPress events.\n             */\n            control.onkeydown = function onKeyDown(event) {\n                event = event || window.event;\n                var bASCII = 0;\n                var keyCode = event.keyCode;\n                /*\n                 * Perform the same remapping of BACKSPACE and DELETE that our VT100 emulation performs,\n                 * for PCjs-wide consistency; see the KEYMAP table in /modules/pc8080/lib/keyboard.js for\n                 * the rationale.  Ditto for ALT-DELETE; see onKeyDown() in /modules/pc8080/lib/keyboard.js\n                 * for details.\n                 *\n                 * NOTE: keyDown (and keyUp) events supply us with KEYCODE values, which are NOT the same as\n                 * ASCII values, which is why we are comparing with KEYCODE values but assigning ASCII values,\n                 * because receiveData() requires ASCII values.\n                 */\n                if (keyCode == Keys.KEYCODE.BS) {\n                    bASCII = event.altKey? Keys.ASCII.CTRL_H : Keys.ASCII.DEL;\n                }\n                else if (keyCode == Keys.KEYCODE.DEL) {\n                    bASCII = Keys.ASCII.CTRL_H;\n                }\n                else if (event.ctrlKey && keyCode >= Keys.ASCII.A && keyCode <= Keys.ASCII.Z) {\n                    bASCII = keyCode - (Keys.ASCII.A - Keys.ASCII.CTRL_A);\n                }\n                if (bASCII) {\n                    if (event.preventDefault) event.preventDefault();\n                    serial.receiveData(bASCII);\n                }\n                return true;\n            };\n\n            control.onkeypress = function onKeyPress(event) {\n                /*\n                 * NOTE: Unlike keyDown events, keyPress events generally supply us with ASCII values,\n                 * despite the fact that, as above, they come to us via the keyCode property.  Yes, it's\n                 * brilliant (or rather, the opposite of brilliant), but that's life.\n                 */\n                event = event || window.event;\n                /*\n                 * Not sure why COMMAND-key combinations are coming through here (on Safari at least),\n                 * but in any case, let's make sure we don't act on them.\n                 */\n                if (!event.metaKey) {\n                    var bASCII = event.which || event.keyCode;\n                    /*\n                     * Perform the same remapping of ALT-ENTER (to LINE-FEED) that our VT100 emulation performs,\n                     * for PCjs-wide consistency; see onKeyDown() in /modules/pc8080/lib/keyboard.js for details.\n                     */\n                    if (event.altKey) {\n                        if (bASCII == Keys.ASCII.CTRL_M) {\n                            bASCII = Keys.ASCII.CTRL_J;\n                        }\n                    }\n                    serial.receiveData(bASCII);\n                    /*\n                     * Since we're going to remove the \"readonly\" attribute from the <textarea> control\n                     * (so that the soft keyboard activates on iOS), instead of calling preventDefault() for\n                     * selected keys (eg, the SPACE key, whose default behavior is to scroll the page), we must\n                     * now call it for *all* keys, so that the keyCode isn't added to the control immediately,\n                     * on top of whatever the machine is echoing back, resulting in double characters.\n                     */\n                    if (event.preventDefault) event.preventDefault();\n                }\n                return true;\n            };\n\n            control.onpaste = function onKeyPress(event) {\n                if (event.stopPropagation) event.stopPropagation();\n                if (event.preventDefault) event.preventDefault();\n                var clipboardData = event.clipboardData || window.clipboardData;\n                if (clipboardData) {\n                    /*\n                     * NOTE: Multiple lines of pasted text will (at least on macOS) contain LFs instead of CRs;\n                     * this is dealt with in receiveData() whenever it receives a string of characters.\n                     */\n                    serial.receiveData(clipboardData.getData('Text'));\n                }\n            };\n\n            /*\n             * Now that we've added an onkeypress handler that calls preventDefault() for ALL keys, the control\n             * itself no longer needs the \"readonly\" attribute; we primarily need to remove it for iOS browsers,\n             * so that the soft keyboard will activate, but it shouldn't hurt to remove the attribute for all browsers.\n             */\n            control.removeAttribute(\"readonly\");\n\n            return true;\n\n        default:\n            break;\n        }\n        return false;\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * @this {SerialPortPDP11}\n     * @param {ComputerPDP11} cmp\n     * @param {BusPDP11} bus\n     * @param {CPUStatePDP11} cpu\n     * @param {DebuggerPDP11} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.cmp = cmp;\n        this.bus = bus;\n        this.cpu = cpu;\n        this.dbg = dbg;\n\n        var serial = this;\n\n        this.irqReceiver = this.cpu.addIRQ(this.iAdapter? -1 : PDP11.DL11.RVEC, PDP11.DL11.PRI, MessagesPDP11.DL11);\n\n        this.timerReceiveInterrupt = this.cpu.addTimer(function readyReceiver() {\n            var b = serial.receiveByte();\n            if (b >= 0) {\n                serial.regRBUF = b;\n                if (!(serial.regRCSR & PDP11.DL11.RCSR.RD)) {\n                    serial.regRCSR |= PDP11.DL11.RCSR.RD;\n                } else {\n                    serial.regRBUF |= PDP11.DL11.RBUF.OE | PDP11.DL11.RBUF.ERROR;\n                }\n                if (serial.regRCSR & PDP11.DL11.RCSR.RIE) {\n                    cpu.setIRQ(serial.irqReceiver);\n                }\n            }\n        });\n\n        this.irqTransmitter = this.cpu.addIRQ(this.iAdapter? -1 : PDP11.DL11.XVEC, PDP11.DL11.PRI, MessagesPDP11.DL11);\n\n        this.timerTransmitInterrupt = this.cpu.addTimer(function readyTransmitter() {\n            serial.regXCSR |= PDP11.DL11.XCSR.READY;\n            if (serial.regXCSR & PDP11.DL11.XCSR.TIE) {\n                cpu.setIRQ(serial.irqTransmitter);\n            }\n        });\n\n        bus.addIOTable(this, SerialPortPDP11.UNIBUS_IOTABLE, this.iAdapter? ((PDP11.UNIBUS.DL11 + (this.iAdapter - 1) * 8) - PDP11.UNIBUS.RCSR) : 0);\n        bus.addResetHandler(this.reset.bind(this));\n\n        this.setReady();\n    }\n\n    /**\n     * initConnection(fNullModem)\n     *\n     * If a machine 'connection' parameter exists of the form \"{sourcePort}->{targetMachine}.{targetPort}\",\n     * and \"{sourcePort}\" matches our idComponent, then look for a component with id \"{targetMachine}.{targetPort}\".\n     *\n     * If the target component is found, then verify that it has exported functions with the following names:\n     *\n     *      receiveData(data): called when we have data to transmit; aliased internally to sendData(data)\n     *      receiveStatus(pins): called when our control signals have changed; aliased internally to updateStatus(pins)\n     *\n     * For now, we're not going to worry about communication in the other direction, because when the target component\n     * performs its own initConnection(), it will find our receiveData() and receiveStatus() functions, at which point\n     * communication in both directions should be established, and the circle of life complete.\n     *\n     * For added robustness, if the target machine initializes much more slowly than we do, and our connection attempt\n     * fails, that's OK, because when it finally initializes, its initConnection() will call our initConnection();\n     * if we've already initialized, no harm done.\n     *\n     * @this {SerialPortPDP11}\n     * @param {boolean} [fNullModem] (caller's null-modem setting, to ensure our settings are in agreement)\n     */\n    initConnection(fNullModem)\n    {\n        if (!this.connection) {\n            var sConnection = this.cmp.getMachineParm(\"connection\");\n            if (sConnection) {\n                var asParts = sConnection.split('->');\n                if (asParts.length == 2) {\n                    var sSourceID = Str.trim(asParts[0]);\n                    if (sSourceID != this.idComponent) return;  // this connection string is intended for another instance\n                    var sTargetID = Str.trim(asParts[1]);\n                    this.connection = Component.getComponentByID(sTargetID);\n                    if (this.connection) {\n                        var exports = this.connection['exports'];\n                        if (exports) {\n                            var fnConnect = exports['connect'];\n                            if (fnConnect) fnConnect.call(this.connection, this.fNullModem);\n                            this.sendData = exports['receiveData'];\n                            if (this.sendData) {\n                                this.fNullModem = fNullModem;\n                                this.updateStatus = exports['receiveStatus'];\n                                this.status(\"Connected \" + this.idMachine + '.' + sSourceID + \" to \" + sTargetID);\n                                return;\n                            }\n                        }\n                    }\n                }\n                /*\n                 * Changed from notice() to status() because sometimes a connection fails simply because one of us is a laggard.\n                 */\n                this.status(\"Unable to establish connection: \" + sConnection);\n            }\n        }\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {SerialPortPDP11}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        if (!fRepower) {\n\n            /*\n             * This is as late as we can currently wait to make our first inter-machine connection attempt;\n             * even so, the target machine's initialization process may still be ongoing, so any connection\n             * may be not fully resolved until the target machine performs its own initConnection(), which will\n             * in turn invoke our initConnection() again.\n             */\n            this.initConnection(this.fNullModem);\n\n            if (!data) {\n                this.reset();\n            } else {\n                if (!this.restore(data)) return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {SerialPortPDP11}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        return fSave? this.save() : true;\n    }\n\n    /**\n     * reset()\n     *\n     * @this {SerialPortPDP11}\n     */\n    reset()\n    {\n        this.initState();\n    }\n\n    /**\n     * save()\n     *\n     * This implements save support for the SerialPort component.\n     *\n     * @this {SerialPortPDP11}\n     * @return {Object}\n     */\n    save()\n    {\n        var state = new State(this);\n        state.set(0, this.saveRegisters());\n        return state.data();\n    }\n\n    /**\n     * restore(data)\n     *\n     * This implements restore support for the SerialPort component.\n     *\n     * @this {SerialPortPDP11}\n     * @param {Object} data\n     * @return {boolean} true if successful, false if failure\n     */\n    restore(data)\n    {\n        return this.initState(data[0]);\n    }\n\n    /**\n     * initState(a)\n     *\n     * @this {SerialPortPDP11}\n     * @param {Array} [a]\n     * @return {boolean} true if successful, false if failure\n     */\n    initState(a)\n    {\n        if (!a) {\n            a = [0, PDP11.DL11.RCSR.CTS, PDP11.DL11.XCSR.READY, this.abReceive];\n        }\n\n        /*\n         * ES6 ALERT: A handy destructuring assignment, which makes it easy to perform the inverse\n         * of what saveRegisters() does when it collects a bunch of object properties into an array.\n         */\n        [\n            this.regRBUF,\n            this.regRCSR,\n            this.regXCSR,\n            this.abReceive\n        ] = a;\n\n        return true;\n    }\n\n    /**\n     * saveRegisters()\n     *\n     * Basically, the inverse of initState().\n     *\n     * @this {SerialPortPDP11}\n     * @return {Array}\n     */\n    saveRegisters()\n    {\n        return [\n            this.regRBUF,\n            this.regRCSR,\n            this.regXCSR,\n            this.abReceive\n        ];\n    }\n\n    /**\n     * getBaudTimeout(nBaud)\n     *\n     * Based on the selected baud rate (nBaud), convert that rate into a millisecond delay.\n     *\n     * @this {SerialPortPDP11}\n     * @param {number} nBaud\n     * @return {number} (number of milliseconds per byte)\n     */\n    getBaudTimeout(nBaud)\n    {\n        /*\n         * TODO: Do a better job computing this, based on actual numbers of start, stop and parity bits,\n         * instead of hard-coding the total number of bits per byte to 10.\n         */\n        var nBytesPerSecond = Math.round(nBaud / 10);\n        return 1000 / nBytesPerSecond;\n    }\n\n    /**\n     * receiveData(data)\n     *\n     * This replaces the old sendRBR() function, which expected an Array of bytes.  We still support that,\n     * but in order to support connections with other SerialPort components (ie, the PC8080 SerialPort), we\n     * have added support for numbers and strings as well.\n     *\n     * @this {SerialPortPDP11}\n     * @param {number|string|Array} data\n     * @return {boolean} true if received, false if not\n     */\n    receiveData(data)\n    {\n        if (typeof data == \"number\") {\n            this.abReceive.push(data);\n        }\n        else if (typeof data == \"string\") {\n            var bASCII = 0, bASCIIPrev;\n            for (var i = 0; i < data.length; i++) {\n                bASCIIPrev = bASCII;\n                bASCII = data.charCodeAt(i);\n                /*\n                 * NOTE: Multiple lines of pasted text will (at least on macOS) contain LFs instead of CRs;\n                 * we convert them to CRs below.  Windows may do something different, but in the worst case,\n                 * even if we receive CR/LF pairs, this code should keep the CRs and lose the LFs.\n                 */\n                if (bASCII == Str.ASCII.LF) {\n                    if (bASCIIPrev == Str.ASCII.CR) continue;\n                    bASCII = Str.ASCII.CR;\n                }\n                this.abReceive.push(bASCII);\n            }\n        }\n        else {\n            this.abReceive = this.abReceive.concat(data);\n        }\n\n        this.cpu.setTimer(this.timerReceiveInterrupt, this.getBaudTimeout(this.nBaudReceive));\n\n        return true;                // for now, return true regardless, since we're buffering everything anyway\n    }\n\n    /**\n     * receiveByte()\n     *\n     * @this {SerialPortPDP11}\n     * @return {number} (0x00-0xff if byte available, -1 if not)\n     */\n    receiveByte()\n    {\n        var b = -1;\n        if (this.abReceive.length) {\n            /*\n             * Here, as elsewhere (eg, the PC11 component), even if I trusted all incoming data\n             * to be byte values (which I don't), there's also the risk that it could be signed data\n             * (eg, -128 to 127, instead of 0 to 255).  Both risks are good reasons to always mask\n             * the data assigned to RBUF with 0xff.\n             */\n            b = this.abReceive.shift() & 0xff;\n            this.printMessage(\"receiveByte(\" + Str.toHexByte(b) + \")\");\n            if (this.fUpperCase) {\n                /*\n                 * Automatically transform lower-case ASCII codes to upper-case; fUpperCase should\n                 * only be set when a terminal or some sort of pseudo-display is being used and we don't\n                 * trust it to have its CAPS-LOCK setting correct.\n                 */\n                if (b >= 0x61 && b < 0x7A) b -= 0x20;\n            }\n            this.cpu.setTimer(this.timerReceiveInterrupt, this.getBaudTimeout(this.nBaudReceive));\n        }\n        return b;\n    }\n\n    /**\n     * receiveStatus(pins)\n     *\n     * @this {SerialPortPDP11}\n     * @param {number} pins\n     */\n    receiveStatus(pins)\n    {\n        var oldRCSR = this.regRCSR;\n        this.regRCSR &= ~(PDP11.DL11.RCSR.CTS | PDP11.DL11.RCSR.CD);\n        if (pins & RS232.CTS.MASK) {\n            this.regRCSR |= PDP11.DL11.RCSR.CTS;\n        }\n        if (pins & RS232.CD.MASK) {\n            this.regRCSR |= PDP11.DL11.RCSR.CD;\n        }\n        if (oldRCSR != this.regRCSR) {\n            this.regRCSR |= PDP11.DL11.RCSR.DSC;\n            if (this.regRCSR & PDP11.DL11.RCSR.DIE) {\n                this.cpu.setIRQ(this.irqReceiver);\n            }\n        }\n    }\n\n    /**\n     * setConnection(component, fn)\n     *\n     * @this {SerialPortPDP11}\n     * @param {Object|null} component\n     * @param {function(number)} fn\n     * @return {boolean}\n     */\n    setConnection(component, fn)\n    {\n        if (!this.connection) {\n            this.connection = component;\n            this.sendData = fn;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * transmitByte(b)\n     *\n     * @this {SerialPortPDP11}\n     * @param {number} b\n     * @return {boolean} true if transmitted, false if not\n     */\n    transmitByte(b)\n    {\n        var fTransmitted = false;\n\n        if (MAXDEBUG) this.printMessage(\"transmitByte(\" + Str.toHexByte(b) + \")\");\n\n        if (this.sendData) {\n            if (this.sendData.call(this.connection, b)) {\n                fTransmitted = true;\n            }\n        }\n\n        /*\n         * TODO: Why do DEC diagnostics like to output bytes with bit 7 set?\n         */\n        b &= 0x7F;\n\n        if (this.controlIOBuffer) {\n            if (b == 0x0D) {\n                this.iLogicalCol = 0;\n            }\n            else if (b == 0x08) {\n                this.controlIOBuffer.value = this.controlIOBuffer.value.slice(0, -1);\n                /*\n                 * TODO: Back up the correct number of columns if the character erased was a tab.\n                 */\n                if (this.iLogicalCol > 0) this.iLogicalCol--;\n            }\n            else if (b) {\n                /*\n                 * RT-11 outputs lots of NULL characters, at least after a \"D 56=5015\" (0x0A0D) command has\n                 * been issued, hence the \"if (b)\" check above.\n                 *\n                 * TODO: Also consider a check for Keys.ASCII.CTRL_C, because by default, RT-11 outputs \"raw\"\n                 * CTRL_C characters, which we capture below and render as <ETX>.  RT-11 does this for other keys\n                 * as well, such as CTRL_K (<VT>) and CTRL_L (<FF>).\n                 */\n                var s = Str.toASCIICode(b); // formerly: String.fromCharCode(b);\n                var nChars = s.length;      // formerly: (b >= 0x20? 1 : 0);\n                if (b < 0x20 && nChars == 1) nChars = 0;\n                if (b == 0x09) {\n                    var tabSize = this.tabSize || 8;\n                    nChars = tabSize - (this.iLogicalCol % tabSize);\n                    if (this.tabSize) s = Str.pad(\"\", nChars);\n                }\n                if (this.charBOL && !this.iLogicalCol && nChars) s = String.fromCharCode(this.charBOL) + s;\n                this.controlIOBuffer.value += s;\n                this.controlIOBuffer.scrollTop = this.controlIOBuffer.scrollHeight;\n                this.iLogicalCol += nChars;\n            }\n            fTransmitted = true;\n        }\n        else if (this.consoleOutput != null) {\n            if (b == 0x0A || this.consoleOutput.length >= 1024) {\n                this.println(this.consoleOutput);\n                this.consoleOutput = \"\";\n            }\n            if (b != 0x0A) {\n                this.consoleOutput += String.fromCharCode(b);\n            }\n            fTransmitted = true;\n        }\n\n        /*\n         * NOTE: When debugging issues involving the SerialPort, such as debugging code between a pair of\n         * transmitted bytes, you can pass 0 instead of getBaudTimeout() to setTimer() to minimize the amount\n         * of time spent waiting for XCSR.READY to be set again.\n         */\n        this.cpu.setTimer(this.timerTransmitInterrupt, this.getBaudTimeout(this.nBaudTransmit));\n\n        return fTransmitted;\n    }\n\n    /**\n     * readRCSR(addr)\n     *\n     * @this {SerialPortPDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.RCSR or 177560)\n     * @return {number}\n     */\n    readRCSR(addr)\n    {\n        var data = this.regRCSR & PDP11.DL11.RCSR.RMASK;\n        this.regRCSR &= ~PDP11.DL11.RCSR.DSC;\n        return data;\n    }\n\n    /**\n     * writeRCSR(data, addr)\n     *\n     * @this {SerialPortPDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.RCSR or 177560)\n     */\n    writeRCSR(data, addr)\n    {\n        var delta = (data ^ this.regRCSR);\n        this.regRCSR = (this.regRCSR & ~PDP11.DL11.RCSR.WMASK) | (data & PDP11.DL11.RCSR.WMASK);\n        /*\n         * Whenever DTR or RTS changes, we also want to notify any connected machine, via updateStatus().\n         */\n        if (this.updateStatus) {\n            if (delta & PDP11.DL11.RCSR.RS232) {\n                var pins = 0;\n                if (this.fNullModem) {\n                    pins |= (data & PDP11.DL11.RCSR.RTS)? RS232.CTS.MASK : 0;\n                    pins |= (data & PDP11.DL11.RCSR.DTR)? (RS232.DSR.MASK | RS232.CD.MASK): 0;\n                } else {\n                    pins |= (data & PDP11.DL11.RCSR.RTS)? RS232.RTS.MASK : 0;\n                    pins |= (data & PDP11.DL11.RCSR.DTR)? RS232.DTR.MASK : 0;\n                }\n                this.updateStatus.call(this.connection, pins);\n            }\n        }\n    }\n\n    /**\n     * readRBUF(addr)\n     *\n     * @this {SerialPortPDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.RBUF or 177562)\n     * @return {number}\n     */\n    readRBUF(addr)\n    {\n        this.regRCSR &= ~PDP11.DL11.RCSR.RD;\n        return this.regRBUF;\n    }\n\n    /**\n     * writeRBUF(data, addr)\n     *\n     * @this {SerialPortPDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.RBUF or 177562)\n     */\n    writeRBUF(data, addr)\n    {\n    }\n\n    /**\n     * readXCSR(addr)\n     *\n     * @this {SerialPortPDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.XCSR or 177564)\n     * @return {number}\n     */\n    readXCSR(addr)\n    {\n        return this.regXCSR;\n    }\n\n    /**\n     * writeXCSR(data, addr)\n     *\n     * @this {SerialPortPDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.XCSR or 177564)\n     */\n    writeXCSR(data, addr)\n    {\n        /*\n         * If the device is READY, and TIE is being set, then request a hardware interrupt.\n         *\n         * Conversely, if TIE is being cleared, remove the request; this resolves a problem within\n         * MAINDEC TEST 15, where the Transmitter Interrupt Enable (TIE) bit is cleared, set, and cleared\n         * in rapid succession, with the expectation that NO interrupt will be generated.  Note that\n         * this fix also requires a complementary change in setIRQ(), to request hardware interrupts with\n         * IRQ_DELAY rather than IRQ.\n         */\n        if (this.regXCSR & PDP11.DL11.XCSR.READY) {\n            if (data & PDP11.DL11.XCSR.TIE) {\n                this.cpu.setIRQ(this.irqTransmitter);\n            } else {\n                this.cpu.clearIRQ(this.irqTransmitter);\n            }\n        }\n        this.regXCSR = (this.regXCSR & ~PDP11.DL11.XCSR.WMASK) | (data & PDP11.DL11.XCSR.WMASK);\n    }\n\n    /**\n     * readXBUF(addr)\n     *\n     * @this {SerialPortPDP11}\n     * @param {number} addr (eg, PDP11.UNIBUS.XBUF or 177566)\n     * @return {number}\n     */\n    readXBUF(addr)\n    {\n        return 0;\n    }\n\n    /**\n     * writeXBUF(data, addr)\n     *\n     * @this {SerialPortPDP11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.XBUF or 177566)\n     */\n    writeXBUF(data, addr)\n    {\n        this.transmitByte(data & PDP11.DL11.XBUF.DATA);\n        this.regXCSR &= ~PDP11.DL11.XCSR.READY;\n    }\n\n    /**\n     * SerialPortPDP11.init()\n     *\n     * This function operates on every HTML element of class \"serial\", extracting the\n     * JSON-encoded parameters for the SerialPort constructor from the element's \"data-value\"\n     * attribute, invoking the constructor to create a SerialPort component, and then binding\n     * any associated HTML controls to the new component.\n     */\n    static init()\n    {\n        var aeSerial = Component.getElementsByClass(document, PDP11.APPCLASS, \"serial\");\n        for (var iSerial = 0; iSerial < aeSerial.length; iSerial++) {\n            var eSerial = aeSerial[iSerial];\n            var parmsSerial = Component.getComponentParms(eSerial);\n            var serial = new SerialPortPDP11(parmsSerial);\n            Component.bindComponentControls(serial, eSerial, PDP11.APPCLASS);\n        }\n    }\n}\n\n/*\n * Internal name used for the I/O buffer control, if any, that we bind to the SerialPort.\n *\n * Alternatively, if SerialPort wants to use another component's control (eg, the Panel's\n * \"print\" control), it can specify the name of that control with the 'binding' property.\n *\n * For that binding to succeed, we also need to know the target component; for now, that's\n * been hard-coded to \"Panel\", in part because that's one of the few components we can rely\n * upon initializing before we do, but it would be a simple matter to include a component type\n * or ID as part of the 'binding' property as well, if we need more flexibility later.\n */\nSerialPortPDP11.sIOBuffer = \"buffer\";\n\n/*\n * ES6 ALERT: As you can see below, I've finally started using computed property names.\n */\nSerialPortPDP11.UNIBUS_IOTABLE = {\n    [PDP11.UNIBUS.RCSR]:    /* 177560 */    [null, null, SerialPortPDP11.prototype.readRCSR,    SerialPortPDP11.prototype.writeRCSR,    \"RCSR\"],\n    [PDP11.UNIBUS.RBUF]:    /* 177562 */    [null, null, SerialPortPDP11.prototype.readRBUF,    SerialPortPDP11.prototype.writeRBUF,    \"RBUF\"],\n    [PDP11.UNIBUS.XCSR]:    /* 177564 */    [null, null, SerialPortPDP11.prototype.readXCSR,    SerialPortPDP11.prototype.writeXCSR,    \"XCSR\"],\n    [PDP11.UNIBUS.XBUF]:    /* 177566 */    [null, null, SerialPortPDP11.prototype.readXBUF,    SerialPortPDP11.prototype.writeXBUF,    \"XBUF\"]\n};\n\n/*\n * Initialize every SerialPort module on the page.\n */\nWeb.onInit(SerialPortPDP11.init);\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/pc11.js (C) Jeff Parsons 2012-2018\n */\n\n\nclass PC11 extends Component {\n    /**\n     * PC11(parms)\n     *\n     * The PC11 component has the following component-specific (parms) properties:\n     *\n     *      autoMount: a JSON-encoded object containing 'name' and 'path' properties, describing a\n     *      tape resource to automatically load at startup (only the \"load\" operation is supported\n     *      for autoMount; if you want to \"read\" a tape image directly into RAM at startup, you must\n     *      ask the RAM component to do that).\n     *\n     *      baudReceive: the default number of bits/second that the device should receive data at;\n     *      0 means use the device default (PDP11.PC11.PRS.BAUD)\n     *\n     *      baudTransmit: the default number of bits/second that the device should transmit data at;\n     *      0 means use the device default (PDP11.PC11.PPS.BAUD); currently ignored, since punch\n     *      support isn't implemented yet.\n     *\n     * NOTE: Since the XSL file defines the 'baud' properties as numbers, not strings, there's no need to\n     * use parseInt(), and as an added benefit, we don't need to worry about whether a hex or decimal format\n     * was used.\n     *\n     * @param {Object} parms\n     */\n    constructor(parms)\n    {\n        super(\"PC11\", parms, MessagesPDP11.PC11);\n\n        this.sDevice = \"PTR\";                   // TODO: Make the device name configurable\n\n        /*\n         * We preliminarily parse and record any 'autoMount' object now, but we no longer process it\n         * until initBus(), because the Computer's getMachineParm() service may have an override for us.\n         */\n        this.configMount = this.parseConfig(parms['autoMount']);\n        this.cAutoMount = 0;\n        this.nBaudReceive = +parms['baudReceive'] || PDP11.PC11.PRS.BAUD;\n\n        this.regPRS = 0;                        // PRS register\n        this.regPRB = 0;                        // PRB register\n        this.regPPS = PDP11.PC11.PPS.ERROR;     // PPS register (TODO: Stop signaling error once punch is implemented)\n        this.regPPB = 0;                        // PPB register\n        this.iTapeData = 0;                     // buffer index\n        this.aTapeData = [];                    // buffer for the PRB register\n        this.sTapeSource = PC11.SOURCE.NONE;\n        this.nTapeTarget = PC11.TARGET.NONE;\n        this.sTapeName = this.sTapePath = \"\";\n\n        /*\n         * These next few variables simply keep track of the previous parameters to parseTape(),\n         * so that we can easily reparse the previous tape as needed.\n         */\n        this.aBytes = this.addrLoad = this.addrExec = null;\n\n        this.nLastPercent = -1;     // ensure the first displayProgress() displays something\n\n        /*\n         * Support for local tape images is currently limited to desktop browsers with FileReader support;\n         * when this flag is set, setBinding() allows local tape bindings and informs initBus() to update the\n         * \"listTapes\" binding accordingly.\n         */\n        this.fLocalTapes = (!Web.isMobile() && window && 'FileReader' in window);\n\n        this.irqReader = null;\n        this.timerReader = -1;\n        this.ram = null;\n    }\n\n    /**\n     * parseConfig(config)\n     *\n     * @this {PC11}\n     * @param {*} config\n     * @return {*}\n     */\n    parseConfig(config)\n    {\n        if (config && typeof config == \"string\") {\n            try {\n                /*\n                 * The most likely source of any exception will be right here, where we're parsing\n                 * this JSON-encoded data.\n                 */\n                config = eval(\"(\" + config + \")\");\n            } catch (e) {\n                Component.error(this.type + \" auto-mount error: \" + e.message + \" (\" + config + \")\");\n                config = null;\n            }\n        }\n        return config || {};\n    }\n\n    /**\n     * setBinding(sType, sBinding, control, sValue)\n     *\n     * @this {PC11}\n     * @param {string|null} sType is the type of the HTML control (eg, \"button\", \"list\", \"text\", etc)\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"listTapes\")\n     * @param {Object} control is the HTML control DOM object (eg, HTMLButtonElement)\n     * @param {string} [sValue] optional data value\n     * @return {boolean} true if binding was successful, false if unrecognized binding request\n     */\n    setBinding(sType, sBinding, control, sValue)\n    {\n        var pc11 = this;\n        var nTapeTarget = PC11.TARGET.NONE;\n\n        switch (sBinding) {\n\n        case \"listTapes\":\n            this.bindings[sBinding] = control;\n            control.onchange = function onChangeListTapes(event) {\n                var controlDesc = pc11.bindings[\"descTape\"];\n                var controlOption = control.options[control.selectedIndex];\n                if (controlDesc && controlOption) {\n                    var dataValue = {};\n                    var sValue = controlOption.getAttribute(\"data-value\");\n                    if (sValue) {\n                        try {\n                            dataValue = eval(\"(\" + sValue + \")\");\n                        } catch (e) {\n                            Component.error(\"PC11 option error: \" + e.message);\n                        }\n                    }\n                    var sHTML = dataValue['desc'];\n                    if (sHTML === undefined) sHTML = \"\";\n                    var sHRef = dataValue['href'];\n                    if (sHRef !== undefined) sHTML = \"<a href=\\\"\" + sHRef + \"\\\" target=\\\"_blank\\\">\" + sHTML + \"</a>\";\n                    controlDesc.innerHTML = sHTML;\n                }\n            };\n            return true;\n\n        case \"descTape\":\n            this.bindings[sBinding] = control;\n            return true;\n\n        /*\n         * \"readTape\" operation must do pretty much everything that the \"loadTape\" does, but whereas the load\n         * operation records the bytes in aTapeData, the read operation stuffs them directly into the machine's memory;\n         * the former sets nTapeTarget to TARGET.READER, while the latter sets it to TARGET.MEMORY.\n         */\n        case \"readTape\":\n            nTapeTarget = PC11.TARGET.MEMORY;\n            /* falls through */\n\n        case \"loadTape\":\n            if (!nTapeTarget) nTapeTarget = PC11.TARGET.READER;\n            this.bindings[sBinding] = control;\n            control.onclick = function onClickReadTape(event) {\n                var controlTapes = pc11.bindings[\"listTapes\"];\n                if (controlTapes) {\n                    var sTapeName = controlTapes.options[controlTapes.selectedIndex].text;\n                    var sTapePath = controlTapes.value;\n                    pc11.loadSelectedTape(sTapeName, sTapePath, nTapeTarget);\n                }\n            };\n            return true;\n\n        case \"mountTape\":\n            if (!this.fLocalTapes) {\n                if (DEBUG) this.log(\"Local tape support not available\");\n                /*\n                 * We could also simply hide the control; eg:\n                 *\n                 *      control.style.display = \"none\";\n                 *\n                 * but removing the control altogether seems better.\n                 */\n                control.parentNode.removeChild(/** @type {Node} */ (control));\n                return false;\n            }\n\n            this.bindings[sBinding] = control;\n\n            /*\n             * Enable \"Mount\" button only if a file is actually selected\n             */\n            control.addEventListener('change', function() {\n                var fieldset = control.children[0];\n                var files = fieldset.children[0].files;\n                var submit = fieldset.children[1];\n                submit.disabled = !files.length;\n            });\n\n            control.onsubmit = function(event) {\n                var file = event.currentTarget[1].files[0];\n                if (file) {\n                    var sTapePath = file.name;\n                    var sTapeName = Str.getBaseName(sTapePath, true);\n                    /*\n                     * TODO: Provide a way to mount tapes into MEMORY as well as READER.\n                     */\n                    pc11.loadSelectedTape(sTapeName, sTapePath, PC11.TARGET.READER, file);\n                }\n                /*\n                 * Prevent reloading of web page after form submission\n                 */\n                return false;\n            };\n            return true;\n\n        case PC11.BINDING.READ_PROGRESS:\n            this.bindings[sBinding] = control;\n            return true;\n\n        default:\n            break;\n        }\n        return false;\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * @this {PC11}\n     * @param {ComputerPDP11} cmp\n     * @param {BusPDP11} bus\n     * @param {CPUStatePDP11} cpu\n     * @param {DebuggerPDP11} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.cmp = cmp;\n        this.bus = bus;\n        this.cpu = cpu;\n        this.dbg = dbg;\n        this.ram = /** @type {RAMPDP11} */ (cmp.getMachineComponent(\"RAM\"));\n\n        var pc11 = this;\n\n        var configMount = this.parseConfig(this.cmp.getMachineParm('autoMount'));\n\n        /*\n         * Add only devices from the machine-wide autoMount configuration that match devices managed by this component.\n         */\n        if (configMount) {\n            for (var sDevice in configMount) {\n                if (sDevice != this.sDevice) continue;\n                this.configMount[sDevice] = configMount[sDevice];\n            }\n        }\n\n        this.irqReader = this.cpu.addIRQ(PDP11.PC11.RVEC, PDP11.PC11.PRI, MessagesPDP11.PC11);\n\n        this.timerReader = this.cpu.addTimer(function readyReader() {\n            pc11.advanceReader();\n        });\n\n        bus.addIOTable(this, PC11.UNIBUS_IOTABLE);\n        bus.addResetHandler(this.reset.bind(this));\n\n        this.addTape(\"None\", PC11.SOURCE.NONE, true);\n        if (this.fLocalTapes) this.addTape(\"Local Tape\", PC11.SOURCE.LOCAL);\n        this.addTape(\"Remote Tape\", PC11.SOURCE.REMOTE);\n\n        if (!this.autoMount()) this.setReady();\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {PC11}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        if (!fRepower) {\n            if (!data) {\n                this.reset();\n            } else {\n                if (!this.restore(data)) return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {PC11}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        return fSave? this.save() : true;\n    }\n\n    /**\n     * reset()\n     *\n     * TODO: Consider making our reset() handler ALSO restore the original loaded tape, in much the same\n     * way the RAM component now restores the original predefined memory or tape image after resetting the RAM.\n     *\n     * @this {PC11}\n     */\n    reset()\n    {\n        this.regPRS &= ~PDP11.PC11.PRS.CLEAR;\n        this.regPRB = 0;\n    }\n\n    /**\n     * autoMount(fRemount)\n     *\n     * @this {PC11}\n     * @param {boolean} [fRemount] is true if we're remounting all auto-mounted tapes\n     * @return {boolean} true if one or more tape images are being auto-mounted, false if none\n     */\n    autoMount(fRemount)\n    {\n        if (!fRemount) this.cAutoMount = 0;\n        var configMount = this.configMount[this.sDevice];\n        if (configMount) {\n            var sTapePath = configMount['path'] || \"\";\n            var sTapeName = configMount['name'] || this.findTape(sTapePath);\n            if (sTapePath && sTapeName) {\n                /*\n                 * TODO: Provide a way to autoMount tapes into MEMORY as well as READER.\n                 */\n                if (!this.loadTape(sTapeName, sTapePath, PC11.TARGET.READER, true) && fRemount) {\n                    this.setReady(false);\n                }\n            } else {\n                /*\n                 * This likely happened because there was no autoMount setting (or it was overridden with an empty value),\n                 * so just make sure the current selection is set to \"None\".\n                 */\n                this.displayTape();\n            }\n        }\n        return !!this.cAutoMount;\n    }\n\n    /**\n     * loadSelectedTape(sTapeName, sTapePath, nTapeTarget, file)\n     *\n     * @this {PC11}\n     * @param {string} sTapeName\n     * @param {string} sTapePath\n     * @param {number} nTapeTarget\n     * @param {File} [file] is set if there's an associated File object\n     */\n    loadSelectedTape(sTapeName, sTapePath, nTapeTarget, file)\n    {\n        if (!sTapePath) {\n            this.unloadTape(false);\n            return;\n        }\n\n        if (sTapePath == PC11.SOURCE.LOCAL) {\n            this.notice('Use \"Choose File\" and \"Mount\" to select and load a local tape.');\n            return;\n        }\n\n        /*\n         * If the special PC11.SOURCE.REMOTE path is selected, then we want to prompt the user for a URL.\n         * Oh, and make sure we pass an empty string as the 2nd parameter to prompt(), so that IE won't display\n         * \"undefined\" -- because after all, undefined and \"undefined\" are EXACTLY the same thing, right?\n         *\n         * TODO: This is literally all I've done to support remote tape images. There's probably more\n         * I should do, like dynamically updating \"listTapes\" to include new entries, and adding new entries\n         * to the save/restore data.\n         */\n        if (sTapePath == PC11.SOURCE.REMOTE) {\n            sTapePath = window.prompt(\"Enter the URL of a remote tape image.\", \"\") || \"\";\n            if (!sTapePath) return;\n            sTapeName = Str.getBaseName(sTapePath);\n            this.status(\"Attempting to load \" + sTapePath + \" as \\\"\" + sTapeName + \"\\\"\");\n            this.sTapeSource = PC11.SOURCE.REMOTE;\n        }\n        else {\n            this.sTapeSource = sTapePath;\n        }\n\n        this.loadTape(sTapeName, sTapePath, nTapeTarget, false, file);\n    }\n\n    /**\n     * loadTape(sTapeName, sTapePath, nTapeTarget, fAutoMount, file)\n     *\n     * NOTE: If sTapePath is already loaded, nothing needs to be done.\n     *\n     * @this {PC11}\n     * @param {string} sTapeName\n     * @param {string} sTapePath\n     * @param {number} nTapeTarget\n     * @param {boolean} [fAutoMount]\n     * @param {File} [file] is set if there's an associated File object\n     * @return {number} 1 if tape loaded, 0 if queued up (or busy), -1 if already loaded\n     */\n    loadTape(sTapeName, sTapePath, nTapeTarget, fAutoMount, file)\n    {\n        var nResult = -1;\n\n        if (this.sTapePath.toLowerCase() != sTapePath.toLowerCase() || this.nTapeTarget != nTapeTarget) {\n\n            nResult++;\n            this.unloadTape(true);\n\n            if (this.flags.busy) {\n                this.notice(\"PC11 busy\");\n            }\n            else {\n                // this.status(\"tape queued: \" + sTapeName);\n                if (fAutoMount) {\n                    this.cAutoMount++;\n                    if (this.messageEnabled()) this.printMessage(\"auto-loading tape: \" + sTapeName);\n                }\n                if (this.load(sTapeName, sTapePath, nTapeTarget, file)) {\n                    nResult++;\n                } else {\n                    this.flags.busy = true;\n                }\n            }\n        }\n        if (nResult) {\n            /*\n             * Now that we're calling parseTape() again (so that the current tape can either be restarted on\n             * the reader or reloaded into RAM), we can also rely on it to display an appropriate status message, too.\n             *\n             *      this.status(this.nTapeTarget == PC11.TARGET.READER? \"tape loaded\" : \"tape read\");\n             */\n            this.parseTape(this.sTapeName, this.sTapePath, this.nTapeTarget, this.aBytes, this.addrLoad, this.addrExec);\n        }\n        return nResult;\n    }\n\n    /**\n     * load(sTapeName, sTapePath, nTapeTarget, file)\n     *\n     * @this {PC11}\n     * @param {string} sTapeName\n     * @param {string} sTapePath\n     * @param {number} nTapeTarget\n     * @param {File} [file] is set if there's an associated File object\n     * @return {boolean} true if load completed (successfully or not), false if queued\n     */\n    load(sTapeName, sTapePath, nTapeTarget, file)\n    {\n        var pc11 = this;\n        var sTapeURL = sTapePath;\n\n        if (DEBUG) {\n            var sMessage = 'load(\"' + sTapeName + '\",\"' + sTapePath + '\")';\n            this.printMessage(sMessage);\n        }\n\n        if (file) {\n            var reader = new FileReader();\n            reader.onload = function doneRead() {\n                pc11.finishRead(sTapeName, sTapePath, nTapeTarget, reader.result);\n            };\n            reader.readAsArrayBuffer(file);\n            return false;\n        }\n\n        /*\n         * If there's an occurrence of API_ENDPOINT anywhere in the path, we assume we can use it as-is;\n         * ie, that the user has already formed a URL of the type we use ourselves for unconverted tape images.\n         */\n        if (sTapePath.indexOf(DumpAPI.ENDPOINT) < 0) {\n            /*\n             * If the selected tape image has a \"json\" extension, then we assume it's a pre-converted\n             * JSON-encoded tape image, so we load it as-is; otherwise, we ask our server-side tape image\n             * converter to return the corresponding JSON-encoded data.\n             */\n            var sTapeExt = Str.getExtension(sTapePath);\n            if (sTapeExt == DumpAPI.FORMAT.JSON || sTapeExt == DumpAPI.FORMAT.JSON_GZ) {\n                sTapeURL = encodeURI(sTapePath);\n            } else {\n                var sTapeParm = DumpAPI.QUERY.PATH;\n                sTapeURL = Web.getHost() + DumpAPI.ENDPOINT + '?' + sTapeParm + '=' + encodeURIComponent(sTapePath) + \"&\" + DumpAPI.QUERY.FORMAT + \"=\" + DumpAPI.FORMAT.JSON;\n            }\n        }\n\n        return !!Web.getResource(sTapeURL, null, true, function doneLoad(sURL, sResponse, nErrorCode) {\n            pc11.finishLoad(sTapeName, sTapePath, nTapeTarget, sResponse, sURL, nErrorCode);\n        });\n    }\n\n    /**\n     * finishLoad(sTapeName, sTapePath, sTapeData, nTapeTarget, sURL, nErrorCode)\n     *\n     * @this {PC11}\n     * @param {string} sTapeName\n     * @param {string} sTapePath\n     * @param {string} sTapeData\n     * @param {number} nTapeTarget\n     * @param {string} sURL\n     * @param {number} nErrorCode (response from server if anything other than 200)\n     */\n    finishLoad(sTapeName, sTapePath, nTapeTarget, sTapeData, sURL, nErrorCode)\n    {\n        var fPrintOnly = (nErrorCode < 0 && !!this.cmp && !this.cmp.flags.powered);\n\n        if (nErrorCode) {\n            /*\n             * This can happen for innocuous reasons, such as the user switching away too quickly, forcing\n             * the request to be cancelled.  And unfortunately, the browser cancels XMLHttpRequest requests\n             * BEFORE it notifies any page event handlers, so if the Computer's being powered down, we won't know\n             * that yet.  For now, we rely on the lack of a specific error (nErrorCode < 0), and suppress the\n             * notify() alert if there's no specific error AND the computer is not powered up yet.\n             */\n            this.notice(\"Unable to load tape \\\"\" + sTapeName + \"\\\" (error \" + nErrorCode + \": \" + sURL + \")\", fPrintOnly);\n        }\n        else {\n            if (DEBUG && this.messageEnabled()) {\n                this.printMessage('finishLoad(\"' + sTapePath + '\")');\n            }\n            Component.addMachineResource(this.idMachine, sURL, sTapeData);\n            var resource = Web.parseMemoryResource(sURL, sTapeData);\n            if (resource) {\n                this.parseTape(sTapeName, sTapePath, nTapeTarget, resource.aBytes, resource.addrLoad, resource.addrExec);\n            }\n        }\n        this.flags.busy = false;\n        if (this.cAutoMount) {\n            this.cAutoMount--;\n            if (!this.cAutoMount) this.setReady();\n        }\n        this.displayTape();\n    }\n\n    /**\n     * finishRead(sTapeName, sTapePath, nTapeTarget, buffer)\n     *\n     * @this {PC11}\n     * @param {string} sTapeName\n     * @param {string} sTapePath\n     * @param {number} nTapeTarget\n     * @param {?} buffer (we KNOW this is an ArrayBuffer, but we can't seem to convince the Closure Compiler)\n     */\n    finishRead(sTapeName, sTapePath, nTapeTarget, buffer)\n    {\n        if (buffer) {\n            var aBytes = new Uint8Array(buffer, 0, buffer.byteLength);\n            this.parseTape(sTapeName, sTapePath, nTapeTarget, aBytes);\n            this.sTapeSource = PC11.SOURCE.LOCAL;\n        }\n        this.flags.busy = false;\n        this.displayTape();\n    }\n\n    /**\n     * addTape(sName, sPath, fTop)\n     *\n     * @this {PC11}\n     * @param {string} sName\n     * @param {string} sPath\n     * @param {boolean} [fTop] (default is bottom)\n     */\n    addTape(sName, sPath, fTop)\n    {\n        var controlTapes = this.bindings[\"listTapes\"];\n        if (controlTapes && controlTapes.options) {\n            for (var i = 0; i < controlTapes.options.length; i++) {\n                if (controlTapes.options[i].value == sPath) return;\n            }\n            var controlOption = document.createElement(\"option\");\n            controlOption.text = sName;\n            controlOption.value = sPath;\n            if (fTop && controlTapes.childNodes[0]) {\n                controlTapes.insertBefore(controlOption, controlTapes.childNodes[0]);\n            } else {\n                controlTapes.appendChild(controlOption);\n            }\n        }\n    }\n\n    /**\n     * findTape(sPath)\n     *\n     * This is used to deal with mount requests (eg, autoMount) that supply a path without a name;\n     * if we can find the path in the \"listTapes\" control, then we return the associated tape name.\n     *\n     * @this {PC11}\n     * @param {string} sPath\n     * @return {string|null}\n     */\n    findTape(sPath)\n    {\n        var controlTapes = this.bindings[\"listTapes\"];\n        if (controlTapes && controlTapes.options) {\n            for (var i = 0; i < controlTapes.options.length; i++) {\n                var control = controlTapes.options[i];\n                if (control.value == sPath) return control.text;\n            }\n        }\n        return Str.getBaseName(sPath, true);\n    }\n\n    /**\n     * displayTape()\n     *\n     * @this {PC11}\n     */\n    displayTape()\n    {\n        var controlTapes = this.bindings[\"listTapes\"];\n        if (controlTapes && controlTapes.options) {\n            var sTargetPath = this.sTapeSource || this.sTapePath;\n            for (var i = 0; i < controlTapes.options.length; i++) {\n                if (controlTapes.options[i].value == sTargetPath) {\n                    if (controlTapes.selectedIndex != i) {\n                        controlTapes.selectedIndex = i;\n                    }\n                    break;\n                }\n            }\n            if (i == controlTapes.options.length) controlTapes.selectedIndex = 0;\n        }\n    }\n\n    /**\n     * displayProgress(nPercent)\n     *\n     * @this {PC11}\n     * @param {number} nPercent\n     */\n    displayProgress(nPercent)\n    {\n        nPercent |= 0;\n        if (nPercent !== this.nLastPercent) {\n            var control = this.bindings[PC11.BINDING.READ_PROGRESS];\n            if (control) {\n                var aeControls = Component.getElementsByClass(control, PC11.CSSCLASS.PROGRESS_BAR);\n                var controlBar = aeControls && aeControls[0];\n                if (controlBar && controlBar.style) {\n                    controlBar.style.width = nPercent + \"%\";\n                }\n            }\n            this.nLastPercent = nPercent;\n        }\n    }\n\n    /**\n     * parseTape(sTapeName, sTapePath, nTapeTarget, aBytes, addrLoad, addrExec)\n     *\n     * @this {PC11}\n     * @param {string} sTapeName\n     * @param {string} sTapePath\n     * @param {number} nTapeTarget\n     * @param {Array|Uint8Array} aBytes\n     * @param {number|null} [addrLoad]\n     * @param {number|null} [addrExec]\n     */\n    parseTape(sTapeName, sTapePath, nTapeTarget, aBytes, addrLoad, addrExec)\n    {\n        this.sTapeName = sTapeName;\n        this.sTapePath = sTapePath;\n        this.nTapeTarget = nTapeTarget;\n        this.aBytes = aBytes;\n        this.addrLoad = addrLoad;\n        this.addrExec = addrExec;\n\n        if (nTapeTarget == PC11.TARGET.MEMORY) {\n            /*\n             * Use the RAM component's loadImage() service to do our dirty work.  If the load succeeds, then\n             * depending on whether there was also exec address, either the CPU will be stopped or the PC wil be\n             * reset.\n             *\n             * NOTE: Some tapes are not in the Absolute Loader format, so if the JSON-encoded tape resource file\n             * we downloaded didn't ALSO include a load address, the load will fail.\n             *\n             * For example, the \"Absolute Loader\" tape is NOT itself in the Absolute Loader format.  You just have\n             * to know that in order to load that tape, you must first load the appropriate \"Bootstrap Loader\" (which\n             * DOES include its own hard-coded load address), load the \"Absolute Loader\" tape, and then run the\n             * \"Bootstrap Loader\".\n             */\n            if (!this.ram || !this.ram.loadImage(aBytes, addrLoad, addrExec, null, false)) {\n                /*\n                 * This doesn't seem to serve any purpose, other than to be annoying, because perhaps you accidentally\n                 * clicked \"Read\" instead of \"Load\"....\n                 *\n                 *      this.sTapeName = \"\";\n                 *      this.sTapePath = \"\";\n                 *      this.sTapeSource = PC11.SOURCE.NONE;\n                 *      this.nTapeTarget = PC11.TARGET.NONE;\n                 */\n                this.notice('No valid memory address for tape \"' + sTapeName + '\"');\n                return;\n            }\n            this.status('Read tape \"' + sTapeName + '\"');\n            return;\n        }\n\n        this.iTapeData = 0;\n        this.aTapeData = aBytes;\n        this.regPRS &= ~PDP11.PC11.PRS.ERROR;\n\n        this.status('Loaded tape \"' + sTapeName + '\" (' + aBytes.length + \" bytes)\");\n        this.displayProgress(0);\n    }\n\n    /**\n     * unloadTape(fLoading)\n     *\n     * @this {PC11}\n     * @param {boolean} [fLoading]\n     */\n    unloadTape(fLoading)\n    {\n        if (this.sTapePath || fLoading === false) {\n            this.sTapeName = \"\";\n            this.sTapePath = \"\";\n            /*\n             * Avoid any unnecessary hysteresis regarding the display if this unload is merely a prelude to another load.\n             */\n            if (!fLoading) {\n                if (this.nTapeTarget) this.status(this.nTapeTarget == PC11.TARGET.READER? \"tape detached\" : \"tape unloaded\");\n                this.sTapeSource = PC11.SOURCE.NONE;\n                this.nTapeTarget = PC11.TARGET.NONE;\n                this.displayTape();\n            }\n        }\n    }\n\n    /**\n     * save()\n     *\n     * This implements save support for the PC11 component.\n     *\n     * @this {PC11}\n     * @return {Object}\n     */\n    save()\n    {\n        var state = new State(this);\n        return state.data();\n    }\n\n    /**\n     * restore(data)\n     *\n     * This implements restore support for the PC11 component.\n     *\n     * @this {PC11}\n     * @param {Object} data\n     * @return {boolean} true if successful, false if failure\n     */\n    restore(data)\n    {\n        return true;\n    }\n\n    /**\n     * getBaudTimeout(nBaud)\n     *\n     * Based on the selected baud rate (nBaud), convert that rate into a millisecond delay.\n     *\n     * @this {PC11}\n     * @param {number} nBaud\n     * @return {number} (number of milliseconds per byte)\n     */\n    getBaudTimeout(nBaud)\n    {\n        /*\n         * TODO: Do a better job computing this, based on actual numbers of start, stop and parity bits,\n         * instead of hard-coding the total number of bits per byte to 10.\n         */\n        var nBytesPerSecond = Math.round(nBaud / 10);\n        return 1000 / nBytesPerSecond;\n    }\n\n    /**\n     * advanceReader()\n     *\n     * If the reader is enabled (RE is set) and there is no exceptional condition (ie, ERROR is set),\n     * and if the buffer register is empty (DONE is clear), then if we have more data in our internal buffer,\n     * store it in the buffer register, and optionally trigger an interrupt if device interrupts are enabled.\n     *\n     * @this {PC11}\n     */\n    advanceReader()\n    {\n        if ((this.regPRS & (PDP11.PC11.PRS.RE | PDP11.PC11.PRS.ERROR)) == PDP11.PC11.PRS.RE) {\n            if (!(this.regPRS & PDP11.PC11.PRS.DONE)) {\n                if (this.iTapeData < this.aTapeData.length) {\n                    /*\n                     * Here, as elsewhere (eg, the DL11 component), even if I trusted all incoming data\n                     * to be byte values (which I don't), there's also the risk that it could be signed data\n                     * (eg, -128 to 127, instead of 0 to 255).  Both risks are good reasons to always mask\n                     * the data assigned to PRB with 0xff.\n                     */\n                    this.regPRB = this.aTapeData[this.iTapeData] & 0xff;\n                    if (this.messageEnabled()) this.printMessage(this.type + \".advanceReader(\" + this.iTapeData + \"): \" + Str.toHexByte(this.regPRB), true);\n                    this.iTapeData++;\n                    this.displayProgress(this.iTapeData / this.aTapeData.length * 100);\n                }\n                else {\n                    this.regPRS |= PDP11.PC11.PRS.ERROR;\n                }\n                this.regPRS |= PDP11.PC11.PRS.DONE;\n                this.regPRS &= ~PDP11.PC11.PRS.BUSY;\n                if (this.regPRS & PDP11.PC11.PRS.IE) {\n                    this.cpu.setIRQ(this.irqReader);\n                }\n            }\n        }\n    }\n\n    /**\n     * readPRS(addr)\n     *\n     * NOTE: We use the PRS RMASK to honor the \"write-only\" behavior of bit 0, the reader enable bit (RE), because\n     * DEC's tiny Bootstrap Loader (/apps/pdp11/boot/bootstrap/BOOTSTRAP-16KB.lst) repeatedly enables the reader using\n     * the INC instruction, which causes the PRS to be read, incremented, and written, so if bit 0 isn't always read\n     * as zero, the INC instruction would clear RE instead of setting it.\n     *\n     * @this {PC11}\n     * @param {number} addr (eg, PDP11.UNIBUS.PRS or 177550)\n     * @return {number}\n     */\n    readPRS(addr)\n    {\n        return this.regPRS & PDP11.PC11.PRS.RMASK;     // RMASK honors the \"write-only\" nature of the RE bit by returning zero on reads\n    }\n\n    /**\n     * writePRS(data, addr)\n     *\n     * @this {PC11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.PRS or 177550)\n     */\n    writePRS(data, addr)\n    {\n        if (data & PDP11.PC11.PRS.RE) {\n            /*\n             * From the 1976 Peripherals Handbook, p. 4-378:\n             *\n             *      Set [RE] to allow the Reader to fetch one character. The setting of this bit clears Done,\n             *      sets Busy, and clears the Reader Buffer (PRB). Operation of this bit is disabled if Error = 1;\n             *      attempting to set it when Error = 1 will cause an immediate interrupt if Interrupt Enable = 1.\n             */\n            if (this.regPRS & PDP11.PC11.PRS.ERROR) {\n                data &= ~PDP11.PC11.PRS.RE;\n                if (this.regPRS & PDP11.PC11.PRS.IE) {\n                    this.cpu.setIRQ(this.irqReader);\n                }\n            } else {\n                this.regPRS &= ~PDP11.PC11.PRS.DONE;\n                this.regPRS |= PDP11.PC11.PRS.BUSY;\n                this.regPRB = 0;\n                /*\n                 * The PC11, by virtue of its \"high speed\", is supposed to deliver characters at 300 CPS, so\n                 * that's the rate we'll choose as well (ie, 1000ms / 300).  As an aside, the original \"low speed\"\n                 * version of the reader ran at 10 CPS.\n                 */\n                this.cpu.setTimer(this.timerReader, this.getBaudTimeout(this.nBaudReceive));\n            }\n        }\n        this.regPRS = (this.regPRS & ~PDP11.PC11.PRS.WMASK) | (data & PDP11.PC11.PRS.WMASK);\n    }\n\n    /**\n     * readPRB(addr)\n     *\n     * @this {PC11}\n     * @param {number} addr (eg, PDP11.UNIBUS.PRB or 177552)\n     * @return {number}\n     */\n    readPRB(addr)\n    {\n        /*\n         * I'm guessing that the DONE and BUSY bits always remain more-or-less inverses of each other.  They definitely\n         * start out that way when writePRS() sets the reader enable (RE) bit, and so that's how we treat them elsewhere, too.\n         */\n        this.regPRS &= ~PDP11.PC11.PRS.DONE;\n        this.regPRS |= PDP11.PC11.PRS.BUSY;\n        return this.regPRB;\n    }\n\n    /**\n     * writePRB(data, addr)\n     *\n     * @this {PC11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.PRB or 177552)\n     */\n    writePRB(data, addr)\n    {\n    }\n\n    /**\n     * readPPS(addr)\n     *\n     * @this {PC11}\n     * @param {number} addr (eg, PDP11.UNIBUS.PPS or 177554)\n     * @return {number}\n     */\n    readPPS(addr)\n    {\n        return this.regPPS;\n    }\n\n    /**\n     * writePPS(data, addr)\n     *\n     * NOTE: This was originally added ONLY because when RT-11 v4.0 copies from device \"PC:\" (the paper tape reader),\n     * it executes the following code:\n     *\n     *      016010: 005037 177550          CLR   @#177550               ;history=2 PRS\n     *      016014: 005037 177554          CLR   @#177554               ;history=1\n     *\n     * and as you can see, without this PPS handler, a TRAP to 4 would normally occur.  I guess since we claim to be\n     * a PC11, that makes sense.  But what about PDP-11 machines with only a PR11 (ie, a reader-only unit)?\n     *\n     * @this {PC11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.PPS or 177554)\n     */\n    writePPS(data, addr)\n    {\n        this.regPPS = (this.regPPS & ~PDP11.PC11.PPS.WMASK) | (data & PDP11.PC11.PPS.WMASK);\n    }\n\n    /**\n     * readPPB(addr)\n     *\n     * @this {PC11}\n     * @param {number} addr (eg, PDP11.UNIBUS.PPB or 177556)\n     * @return {number}\n     */\n    readPPB(addr)\n    {\n        return this.regPPB;\n    }\n\n    /**\n     * writePPB(data, addr)\n     *\n     * @this {PC11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.PPB or 177556)\n     */\n    writePPB(data, addr)\n    {\n        this.regPPB = (data & PDP11.PC11.PPB.MASK);\n    }\n}\n\n/*\n * There's nothing super special about these values, except that NONE should be falsey and the others should not.\n */\nPC11.SOURCE = {\n    NONE:   \"\",\n    LOCAL:  \"?\",\n    REMOTE: \"??\"\n};\n\nPC11.TARGET = {\n    NONE:   0,\n    READER: 1,\n    MEMORY: 2\n};\n\nPC11.BINDING = {\n    READ_PROGRESS:  \"readProgress\"\n};\n\nPC11.CSSCLASS = {\n    PROGRESS_BAR:   PDP11.CSSCLASS + \"-progress-bar\"\n};\n\n/*\n * ES6 ALERT: As you can see below, I've finally started using computed property names.\n */\nPC11.UNIBUS_IOTABLE = {\n    [PDP11.UNIBUS.PRS]:     /* 177550 */    [null, null, PC11.prototype.readPRS,    PC11.prototype.writePRS,    \"PRS\"],\n    [PDP11.UNIBUS.PRB]:     /* 177552 */    [null, null, PC11.prototype.readPRB,    PC11.prototype.writePRB,    \"PRB\"],\n    [PDP11.UNIBUS.PPS]:     /* 177554 */    [null, null, PC11.prototype.readPPS,    PC11.prototype.writePPS,    \"PPS\"],\n    [PDP11.UNIBUS.PPB]:     /* 177556 */    [null, null, PC11.prototype.readPPB,    PC11.prototype.writePPB,    \"PPB\"]\n};\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/disk.js (C) Jeff Parsons 2012-2018\n */\n\n/*\n *  The DiskPDP11 component provides methods for:\n *\n *      1) creating an empty disk: create()\n *      2) loading a disk image: load()\n *      3) getting disk information: info()\n *      4) seeking a disk sector: seek()\n *      5) reading data from a sector: read()\n *      6) writing data to a sector: write()\n *      7) save disk deltas: save()\n *      8) restore disk deltas: restore()\n *      9) converting disk contents: convertToJSON()\n *\n *  More functionality may be factored out of the disk controller components later and moved here,\n *  to further reduce some of the duplication between them, but the above functionality is a good start.\n */\n\n\n/**\n * Every Sector object (once loaded, parsed, and \"normalized\") should have ALL of the following named properties:\n *\n *      'sector':   sector number\n *      'length':   size of the sector, in bytes\n *      'data':     array of dwords\n *      'pattern':  dword pattern to use for empty or partial sectors (or null if sector still needs to be loaded)\n *\n * initSector() also sets the following properties, to help us quickly identify its location within aDiskData:\n *\n *      iCylinder\n *      iHead\n *\n * In addition, we will maintain the following information on a per-sector basis, as sectors are modified:\n *\n *      iModify:    index of first modified dword in sector\n *      cModify:    number of modified dwords in sector\n *      fDirty:     true if sector is dirty, false if clean (or cleaning in progress)\n *\n * @typedef {{\n *  sector:     number,\n *  length:     number,\n *  data:       Array.<number>,\n *  pattern:    (number|null),\n *  iCylinder:  number,\n *  iHead:      number,\n *  iModify:    number,\n *  cModify:    number\n * }}\n */\nvar SectorInfo;\n\nclass DiskPDP11 extends Component {\n    /**\n     * DiskPDP11(controller, drive, mode)\n     *\n     * Disk contents are stored as an array (aDiskData) of cylinders, each of which is an array of\n     * heads, each of which is an array of sector objects; the latter contain sector numbers and\n     * sector data, where sector data is an array of dwords.  The format does not impose any\n     * limitations on number of cylinders, number of heads, sectors per track, or bytes per sector.\n     *\n     * WARNING: All accesses to disk sector properties must be via their string names, not their\n     * \"dot\" names, otherwise code will break after it's been processed by the Closure Compiler,\n     * and any dumped disks may be unmountable.  This is a side-effect of how we mount and dump\n     * disk images (ie, as JSON-encoded streams).\n     *\n     * This means, for example, that all references to \"track[iSector].data\" must actually appear as\n     * \"track[iSector]['data']\".\n     *\n     * @param {DriveController|RK11|RL11} controller\n     * @param {Object} drive\n     * @param {string} mode\n     */\n    constructor(controller, drive, mode)\n    {\n        super(\"Disk\", {'id': controller.idMachine + \".disk\" + Str.toHex(++DiskPDP11.nDisks, 4)}, MessagesPDP11.DISK);\n\n        /*\n         * Route all non-Debugger messages (eg, notice() and println() calls) through\n         * this.controller (eg, controller.notice() and controller.println()), because\n         * the Computer component is unaware of any Disk objects and therefore will not\n         * set up the usual overrides when a Control Panel is installed.\n         */\n        this.controller = controller;\n        this.cmp = controller.cmp;\n        this.dbg = controller.dbg;\n        this.drive = drive;\n\n        /*\n         * We pull out a number of drive properties that we may or may not need as defaults.\n         */\n        this.sDiskName = drive.name;\n        this.sDiskPath = this.sDiskFile = \"\";\n        this.fRemovable = drive.fRemovable;\n\n        /*\n         * Initialize the disk contents\n         */\n        this.mode = 0;\n        this.nCylinders = this.nHeads = this.nSectors = this.cbSector = 0;\n        this.aDiskData = [];\n        this.dwChecksum = null;\n        this.fWriteProtected = false;\n        this.create(mode, drive.nCylinders, drive.nHeads, drive.nSectors, drive.cbSector);\n\n        this.fnNotify = this.controllerNotify = null;\n\n        this.setReady();\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * We have no real interest in this notification, other than to obtain a reference to the Debugger\n     * for every disk loaded BEFORE the initBus() phase; any disk loaded AFTER that point will get its Debugger\n     * reference, if any, from the disk controller passed to the DiskPDP11() constructor.\n     *\n     * @this {DiskPDP11}\n     * @param {ComputerPDP11} cmp\n     * @param {BusPDP11} bus\n     * @param {CPUStatePDP11} cpu\n     * @param {DebuggerPDP11} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.dbg = dbg;\n    }\n\n    /**\n     * create()\n     *\n     * @this {DiskPDP11}\n     * @param {string} mode\n     * @param {number} nCylinders\n     * @param {number} nHeads\n     * @param {number} nSectors (per track)\n     * @param {number} cbSector\n     *\n     * Initializes the disk contents according to the current drive mode and parameters.\n     */\n    create(mode, nCylinders, nHeads, nSectors, cbSector)\n    {\n        this.mode = mode;\n        this.nCylinders = nCylinders;\n        this.nHeads = nHeads;\n        this.nSectors = nSectors;\n        this.cbSector = cbSector;\n        this.aDiskData = [];\n        /*\n         * If the drive is using PRELOAD mode, then it will use the load()/mount() process to initialize the disk contents;\n         * it wouldn't hurt to let create() do its thing, too, but it's a waste of time.\n         */\n        if (this.mode != DiskAPI.MODE.PRELOAD) {\n            if (DEBUG && this.messageEnabled()) {\n                this.printMessage(\"blank disk for \\\"\" + this.sDiskName + \"\\\": \" + this.nCylinders + \" cylinders, \" + this.nHeads + \" head(s)\");\n            }\n            var aCylinders = new Array(this.nCylinders);\n            for (var iCylinder = 0; iCylinder < aCylinders.length; iCylinder++) {\n                var aHeads = new Array(this.nHeads);\n                for (var iHead = 0; iHead < aHeads.length; iHead++) {\n                    var aSectors = new Array(this.nSectors);\n                    for (var iSector = 1; iSector <= aSectors.length; iSector++) {\n                        /*\n                         * Now that our read() and write() functions can deal with unallocated data\n                         * arrays, and can read/write the specified pattern on-the-fly, we no longer need\n                         * to pre-allocate and pre-initialize the 'data' array.\n                         */\n                        aSectors[iSector - 1] = this.initSector(null, iCylinder, iHead, iSector, this.cbSector, 0);\n                    }\n                    aHeads[iHead] = aSectors;\n                }\n                aCylinders[iCylinder] = aHeads;\n            }\n            this.aDiskData = aCylinders;\n        }\n        this.dwChecksum = null;\n    }\n\n    /**\n     * load(sDiskName, sDiskPath, file, fnNotify)\n     *\n     * TODO: Figure out how we can strongly type fnNotify, because the Closure Compiler has issues with:\n     *\n     *      param {function(Component,Object,Disk,string,string)} fnNotify\n     *\n     * for:\n     *\n     *     this.fnNotify.call(this.controller, this.drive, disk, this.sDiskName, this.sDiskPath);\n     *\n     * Also, while we're at it, learn if there are ways to:\n     *\n     *      1) declare a function taking NO parameters (ie, generate a warning if any parameters are specified)\n     *      2) declare a type for a function's return value\n     *\n     * @this {DiskPDP11}\n     * @param {string} sDiskName\n     * @param {string} sDiskPath\n     * @param {File} [file] is set if there's an associated File object\n     * @param {function(...)} [fnNotify]\n     * @param {Component} [controller]\n     * @return {boolean} true if load completed (successfully or not), false if queued\n     */\n    load(sDiskName, sDiskPath, file, fnNotify, controller)\n    {\n        var sDiskURL = sDiskPath;\n\n        /*\n         * We could use this.log() as well, but it wouldn't display which component initiated the load.\n         */\n        if (DEBUG) {\n            var sMessage = 'load(\"' + sDiskName + '\",\"' + sDiskPath + '\")';\n            this.controller.log(sMessage);\n            this.printMessage(sMessage);\n        }\n\n        if (this.fnNotify) {\n            if (DEBUG) this.controller.log('too many load requests for \"' + sDiskName + '\" (' + sDiskPath + ')');\n            return true;\n        }\n\n        this.sDiskName = sDiskName;\n        this.sDiskPath = sDiskPath;\n        this.sDiskFile = Str.getBaseName(sDiskPath);\n\n        var disk = this;\n        this.fnNotify = fnNotify;\n        this.controllerNotify = controller || this.controller;\n\n        if (file) {\n            var reader = new FileReader();\n            reader.onload = function() {\n                disk.build(reader.result, true);\n            };\n            reader.readAsArrayBuffer(file);\n            return true;\n        }\n\n        /*\n         * If there's an occurrence of API_ENDPOINT anywhere in the path, we assume we can use it as-is;\n         * ie, that the user has already formed a URL of the type we use ourselves for unconverted disk images.\n         */\n        if (sDiskPath.indexOf(DumpAPI.ENDPOINT) < 0) {\n            /*\n             * If the selected disk image has a \"json\" extension, then we assume it's a pre-converted\n             * JSON-encoded disk image, so we load it as-is; otherwise, we ask our server-side disk image\n             * converter to return the corresponding JSON-encoded data.\n             */\n            var sDiskExt = Str.getExtension(sDiskPath);\n            if (sDiskExt == DumpAPI.FORMAT.JSON || sDiskExt == DumpAPI.FORMAT.JSON_GZ) {\n                sDiskURL = encodeURI(sDiskPath);\n            } else {\n                var sDiskParm = DumpAPI.QUERY.PATH;\n                var sSizeParm = '&' + DumpAPI.QUERY.MBHD + \"=10\";\n                /*\n                 * 'mbhd' is a new parm added for hard drive support.  In the case of 'file' or 'dir' requests,\n                 * 'mbhd' informs DumpAPI.ENDPOINT that it should create a hard disk image, and one not larger than\n                 * the specified size (eg, 10mb).  In fact, until DumpAPI.ENDPOINT is changed to create custom hard\n                 * disk BPBs, you'll always get a standard PC XT 10mb disk image, so if the 'file' or 'dir' contains\n                 * more than 10mb of data, the request will fail.  Ultimately, I want to honor the controller's\n                 * driveConfig 'size' parm, or to match the capacity required by the driveConfig 'type' parameter.\n                 *\n                 * If a 'disk' is specified, we pass mbhd=0, because the actual size will depend on the image.\n                 * However, I don't currently have any \"dsk\" or \"img\" files containing hard disk images; those formats\n                 * were really intended for floppy disk images.  If I never create any hard disk image files, then\n                 * we can simply eliminate sSizeParm in the 'disk' case.\n                 *\n                 * Added more extensions to the list of paths-treated-as-disk-images, so that URLs to files located here:\n                 *\n                 *      ftp://ftp.oldskool.org/pub/TOPBENCH/dskimage/\n                 *\n                 * can be used as-is.  TODO: There's a TODO in netlib.getFile() regarding remote support that needs\n                 * to be resolved first; DiskDump relies on that function for its remote requests, and it currently\n                 * supports only HTTP.\n                 */\n                if (!sDiskPath.indexOf(\"http:\") || !sDiskPath.indexOf(\"ftp:\") || [\"dsk\", \"ima\", \"img\", \"360\", \"720\", \"12\", \"144\"].indexOf(sDiskExt) >= 0) {\n                    sDiskParm = DumpAPI.QUERY.DISK;\n                    sSizeParm = '&' + DumpAPI.QUERY.MBHD + \"=0\";\n                } else if (Str.endsWith(sDiskPath, '/')) {\n                    sDiskParm = DumpAPI.QUERY.DIR;\n                }\n                sDiskURL = Web.getHost() + DumpAPI.ENDPOINT + '?' + sDiskParm + '=' + encodeURIComponent(sDiskPath) + (this.fRemovable ? \"\" : sSizeParm) + \"&\" + DumpAPI.QUERY.FORMAT + \"=\" + DumpAPI.FORMAT.JSON;\n            }\n        }\n        return !!Web.getResource(sDiskURL, null, true, function(sURL, sResponse, nErrorCode) {\n            disk.doneLoad(sURL, sResponse, nErrorCode);\n        });\n    }\n\n    /**\n     * build(buffer, fModified)\n     *\n     * Builds a disk image from an ArrayBuffer (eg, from a FileReader object), rather than from JSON-encoded data.\n     *\n     * @this {DiskPDP11}\n     * @param {?} buffer (we KNOW this is an ArrayBuffer, but we can't seem to convince the Closure Compiler)\n     * @param {boolean} [fModified] is true if we should mark the entire disk modified (to ensure that we save/restore it)\n     */\n    build(buffer, fModified)\n    {\n        var disk;\n        var cbDiskData = buffer? buffer.byteLength : 0;\n        var diskFormat = DiskAPI.GEOMETRIES[cbDiskData];\n\n        if (diskFormat) {\n            this.nCylinders = diskFormat[0];\n            this.nHeads = diskFormat[1];\n            this.nSectors = diskFormat[2];\n            this.cbSector = (diskFormat[3] || 512);\n\n            var cdw = this.cbSector >> 2, dwPattern = 0, dwChecksum = 0;\n            var ib = 0;\n            var dv = new DataView(buffer, 0, cbDiskData);\n\n            this.aDiskData = new Array(this.nCylinders);\n            for (var iCylinder = 0; iCylinder < this.aDiskData.length; iCylinder++) {\n                var cylinder = this.aDiskData[iCylinder] = new Array(this.nHeads);\n                for (var iHead = 0; iHead < cylinder.length; iHead++) {\n                    var head = cylinder[iHead] = new Array(this.nSectors);\n                    for (var iSector = 0; iSector < head.length; iSector++) {\n                        var sector = this.initSector(null, iCylinder, iHead, iSector + 1, this.cbSector, dwPattern);\n                        var adw = sector['data'];\n                        for (var idw = 0; idw < cdw; idw++, ib += 4) {\n                            var dw = adw[idw] = dv.getInt32(ib, true);\n                            dwChecksum = (dwChecksum + dw) & (0xffffffff|0);\n                        }\n                        if (fModified) sector.cModify = cdw;\n                        head[iSector] = sector;\n                    }\n                }\n            }\n            this.dwChecksum = dwChecksum;\n            disk = this;\n        } else {\n            this.notice(\"Unrecognized disk format (\" + cbDiskData + \" bytes)\");\n        }\n\n        if (this.fnNotify) {\n            this.fnNotify.call(this.controller, this.drive, disk, this.sDiskName, this.sDiskPath);\n            this.fnNotify = null;\n        }\n    }\n\n    /**\n     * doneLoad(sURL, sDiskData, nErrorCode)\n     *\n     * This function was originally called mount().  If the mount is successful, we pass the Disk object to the\n     * caller's fnNotify handler; otherwise, we pass null.\n     *\n     * @this {DiskPDP11}\n     * @param {string} sURL\n     * @param {string|null} sDiskData\n     * @param {number} nErrorCode (response from server if anything other than 200)\n     */\n    doneLoad(sURL, sDiskData, nErrorCode)\n    {\n        var disk = null;\n        var fPrintOnly = (nErrorCode < 0 && !!this.cmp && !this.cmp.flags.powered);\n\n        this.fWriteProtected = false;\n\n        if (nErrorCode) {\n            /*\n             * This can happen for innocuous reasons, such as the user switching away too quickly, forcing\n             * the request to be cancelled.  And unfortunately, the browser cancels XMLHttpRequest requests\n             * BEFORE it notifies any page event handlers, so if the Computer's being powered down, we won't know\n             * that yet.  For now, we rely on the lack of a specific error (nErrorCode < 0), and suppress the\n             * notify() alert if there's no specific error AND the computer is not powered up yet.\n             */\n            this.controller.notice(\"Unable to load disk \\\"\" + this.sDiskName + \"\\\" (error \" + nErrorCode + \": \" + sURL + \")\", fPrintOnly);\n        } else {\n            if (DEBUG && this.messageEnabled()) {\n                this.printMessage('doneLoad(\"' + this.sDiskPath + '\")');\n            }\n\n            Component.addMachineResource(this.controller.idMachine, sURL, sDiskData);\n\n            try {\n                /*\n                 * The following code was a hack to turn on write-protection for a disk image if there was\n                 * an initial comment line containing the string \"write-protected\".  However, since comments\n                 * are technically not allowed in JSON, I needed an alternative solution.  So, if the basename\n                 * contains the suffix \"-readonly\", then I'll turn on write-protection for that disk as well.\n                 *\n                 * TODO: Provide some UI for turning write-protection on/off for disks at will, and provide\n                 * an XML-based solution (ie, a per-disk XML configuration option) for controlling it as well.\n                 */\n                var sBaseName = Str.getBaseName(this.sDiskFile, true).toLowerCase();\n                if (sBaseName.indexOf(\"-readonly\") > 0) {\n                    this.fWriteProtected = true;\n                } else {\n                    var iEOL = sDiskData.indexOf(\"\\n\");\n                    if (iEOL > 0 && iEOL < 1024) {\n                        var sConfig = sDiskData.substring(0, iEOL);\n                        if (sConfig.indexOf(\"write-protected\") > 0) {\n                            this.fWriteProtected = true;\n                        }\n                    }\n                }\n                /*\n                 * The most likely source of any exception will be here, where we're parsing the disk data.\n                 */\n                var aDiskData;\n                if (sDiskData.substr(0, 1) == \"<\") {        // if the \"data\" begins with a \"<\"...\n                    /*\n                     * Early server configs reported an error (via the nErrorCode parameter) if a disk URL was invalid,\n                     * but more recent server configs now display a somewhat friendlier HTML error page.  The downside,\n                     * however, is that the original error has been buried, and we've received \"data\" that isn't actually\n                     * disk data.\n                     *\n                     * So, if the data we've received appears to be \"HTML-like\", all we can really do is assume that the\n                     * disk image is missing.  And so we pretend we received an error message to that effect.\n                     */\n                    aDiskData = [\"Missing disk image: \" + this.sDiskName];\n                } else {\n                    /*\n                     * TODO: IE9 is rather unfriendly and restrictive with regard to how much data it's willing to\n                     * eval().  In particular, the 10Mb disk image we use for the Windows 1.01 demo config fails in\n                     * IE9 with an \"Out of memory\" exception.  One work-around would be to chop the data into chunks\n                     * (perhaps one track per chunk, using regular expressions) and then manually re-assemble it.\n                     *\n                     * However, it turns out that using JSON.parse(sDiskData) instead of eval(\"(\" + sDiskData + \")\")\n                     * is a much easier fix. The only drawback is that we must first quote any unquoted property names\n                     * and remove any comments, because while eval() was cool with them, JSON.parse() is more particular;\n                     * the following RegExp replacements take care of those requirements.\n                     *\n                     * The use of hex values is something else that eval() was OK with, but JSON.parse() is not, and\n                     * while I've stopped using hex values in DumpAPI responses (at least when \"format=json\" is specified),\n                     * I can't guarantee they won't show up in \"legacy\" images, and there's no simple RegExp replacement\n                     * for transforming hex values into decimal values, so I cop out and fall back to eval() if I detect\n                     * any hex prefixes (\"0x\") in the sequence.  Ditto for error messages, which appear like so:\n                     *\n                     *      [\"unrecognized disk path: test.img\"]\n                     */\n                    if (sDiskData.indexOf(\"0x\") < 0 && sDiskData.substr(0, 2) != \"[\\\"\") {\n                        aDiskData = JSON.parse(sDiskData.replace(/([a-z]+):/gm, \"\\\"$1\\\":\").replace(/\\/\\/[^\\n]*/gm, \"\"));\n                    } else {\n                        aDiskData = eval(\"(\" + sDiskData + \")\");\n                    }\n                }\n\n                if (!aDiskData.length) {\n                    Component.error(\"Empty disk image: \" + this.sDiskName);\n                }\n                else if (aDiskData.length == 1) {\n                    Component.error(aDiskData[0]);\n                }\n                /*\n                 * aDiskData is an array of cylinders, each of which is an array of heads, each of which\n                 * is an array of sector objects.  The format does not impose any limitations on number of\n                 * cylinders, number of heads, or number of bytes in any of the sector object byte-arrays.\n                 *\n                 * WARNING: All accesses to sector object properties must be via their string names, not their\n                 * \"dot\" names, otherwise code will break after it's been processed by the Closure Compiler.\n                 *\n                 * Sector object properties include:\n                 *\n                 *      'sector'    the sector number (1-based, not required to be sequential)\n                 *      'length'    the byte-length (ie, formatted length) of the sector\n                 *      'data'      the dword-array containing the sector data\n                 *      'pattern'   if the dword-array length is less than 'length'/4, this value must be used\n                 *                  to pad out the sector; if no 'pattern' is specified, it's assumed to be zero\n                 *\n                 * We still support the older JSON encoding, where sector data was encoded as an array of 'bytes'\n                 * rather than a dword 'data' array.  However, our support is strictly limited to an on-the-fly\n                 * conversion to a forward-compatible 'data' array.\n                 */\n                else {\n                    if (DEBUG && this.messageEnabled(MessagesPDP11.DISK | MessagesPDP11.BUFFER)) {\n                        var sCylinders = aDiskData.length + \" track\" + (aDiskData.length > 1 ? \"s\" : \"\");\n                        var nHeads = aDiskData[0].length;\n                        var sHeads = nHeads + \" head\" + (nHeads > 1 ? \"s\" : \"\");\n                        var nSectorsPerTrack = aDiskData[0][0].length;\n                        var sSectorsPerTrack = nSectorsPerTrack + \" sector\" + (nSectorsPerTrack > 1 ? \"s\" : \"\") + \"/track\";\n                        this.printMessage(sCylinders + \", \" + sHeads + \", \" + sSectorsPerTrack);\n                    }\n                    /*\n                     * Before the image is usable, we must \"normalize\" all the sectors.  In the past, this meant\n                     * \"inflating\" them all.  However, that's no longer strictly necessary.  Mainly, it just means\n                     * setting 'length', 'data', and 'pattern' properties, so that all the sectors are well-defined.\n                     * This includes detecting sector data in older formats (eg, the old array of 'bytes' instead\n                     * of the new 'data' array of dwords) and converting them on-the-fly to the current format.\n                     */\n                    this.nCylinders = aDiskData.length;\n                    this.nHeads = aDiskData[0].length;\n                    this.nSectors = aDiskData[0][0].length;\n                    var sector = aDiskData[0][0][0];\n                    this.cbSector = (sector && sector['length']) || 512;\n\n                    var dwChecksum = 0;\n                    for (var iCylinder = 0; iCylinder < this.nCylinders; iCylinder++) {\n                        for (var iHead = 0; iHead < this.nHeads; iHead++) {\n                            for (var iSector = 0; iSector < this.nSectors; iSector++) {\n                                sector = aDiskData[iCylinder][iHead][iSector];\n                                if (!sector) continue;          // non-standard (eg, XDF) disk images may have \"unused\" (null) sectors\n                                var length = sector['length'];\n                                if (length === undefined) {     // provide backward-compatibility with older JSON...\n                                    length = sector['length'] = 512;\n                                }\n                                length >>= 2;                   // convert length from a byte-length to a dword-length\n                                var dwPattern = sector['pattern'];\n                                if (dwPattern === undefined) {\n                                    dwPattern = sector['pattern'] = 0;\n                                }\n                                var adw = sector['data'];\n                                if (adw === undefined) {\n                                    var ab = sector['bytes'];\n                                    if (ab === undefined || !ab.length) {\n                                        /*\n                                         * It would be odd if there was neither a 'bytes' nor 'data' array; I'm just\n                                         * being paranoid.  It's more likely that the 'bytes' array is simply empty,\n                                         * in which case we need only create an empty 'data' array and turn the byte\n                                         * pattern, if any, into a dword pattern.\n                                         */\n                                        adw = [];\n\n                                        dwPattern = sector['pattern'] = (dwPattern | (dwPattern << 8) | (dwPattern << 16) | (dwPattern << 24));\n                                        sector['data'] = adw;\n                                    } else {\n                                        /*\n                                         * To keep the conversion code simple, we'll do any necessary pattern-filling first,\n                                         * to fully \"inflate\" the sector, eliminating the possibility of partial dwords and\n                                         * saving any code downstream from dealing with byte-size patterns.\n                                         */\n                                        var cb = length << 2;\n                                        for (var ib = ab.length; ib < cb; ib++) {\n                                            ab[ib] = dwPattern; // the pattern for byte-arrays was only a byte\n                                        }\n                                        this.fill(sector, ab, 0);\n                                    }\n                                    delete sector['bytes'];\n                                }\n                                this.initSector(sector, iCylinder, iHead);\n                                /*\n                                 * For the disk as a whole, we maintain a checksum of the original unmodified data:\n                                 *\n                                 *      dwChecksum: summation of all dwords in all non-empty sectors\n                                 *\n                                 * Pattern-filling of sectors is deferred until absolutely necessary (eg, when a sector is\n                                 * being written).  So all we need to do at this point is checksum all the initial sector data.\n                                 */\n                                for (var idw = 0; idw < adw.length; idw++) {\n                                    dwChecksum = (dwChecksum + adw[idw]) & (0xffffffff|0);\n                                }\n                            }\n                        }\n                    }\n                    this.aDiskData = aDiskData;\n                    this.dwChecksum = dwChecksum;\n                    disk = this;\n                }\n            } catch (e) {\n                Component.error(\"Disk image error (\" + sURL + \"): \" + e.message);\n            }\n        }\n\n        if (this.fnNotify) {\n            this.fnNotify.call(this.controllerNotify, this.drive, disk, this.sDiskName, this.sDiskPath);\n            this.fnNotify = null;\n        }\n    }\n\n    /**\n     * getSectorString(sector, off, len)\n     *\n     * WARNING: This function is restricted to reading a string contained ENTIRELY within the specified sector.\n     *\n     * @this {DiskPDP11}\n     * @param {Object} sector\n     * @param {number} off (byte offset)\n     * @param {number} len (use -1 to read a null-terminated string)\n     * @return {string}\n     */\n    getSectorString(sector, off, len)\n    {\n        var s = \"\";\n        while (len--) {\n            var b = this.read(sector, off++);\n            if (b <= 0) break;\n            s += String.fromCharCode(b);\n        }\n        return s;\n    }\n\n    /**\n     * initSector(sector, iCylinder, iHead, iSector, cbSector, dwPattern)\n     *\n     * Ensures every sector has ALL the properties of a proper Sector object; ie:\n     *\n     *      'sector':   sector number\n     *      'length':   size of the sector, in bytes\n     *      'data':     array of dwords\n     *      'pattern':  dword pattern to use for empty or partial sectors\n     *\n     * In addition, we will maintain the following information on a per-sector basis,\n     * as sectors are modified:\n     *\n     *      iModify:    index of first modified dword in sector\n     *      cModify:    number of modified dwords in sector\n     *      fDirty:     true if sector is dirty, false if clean (or cleaning in progress)\n     *\n     * @this {DiskPDP11}\n     * @param {Object} sector\n     * @param {number} iCylinder\n     * @param {number} iHead\n     * @param {number} [iSector]\n     * @param {number} [cbSector]\n     * @param {number|null} [dwPattern]\n     * @return {Object}\n     */\n    initSector(sector, iCylinder, iHead, iSector, cbSector, dwPattern)\n    {\n        if (!sector) {\n            sector = {'sector': iSector, 'length': cbSector, 'data': [], 'pattern': dwPattern};\n        }\n        sector.iCylinder = iCylinder;\n        sector.iHead = iHead;\n        sector.iModify = sector.cModify = 0;\n        sector.fDirty = false;\n        return sector;\n    }\n\n    /**\n     * info()\n     *\n     * TODO: Decide whether deprecate this in favor of accessing the nCylinders, nHeads, nSectors, and cbSector\n     * properties of the Disk object directly.\n     *\n     * @this {DiskPDP11}\n     * @return {Array} containing: [nCylinders, nHeads, nSectorsPerTrack, nBytesPerSector]\n     */\n    info()\n    {\n        if (!this.aDiskData.length) {\n            return [0, 0, 0, 0];\n        }\n        return [this.aDiskData.length, this.aDiskData[0].length, this.aDiskData[0][0].length, this.aDiskData[0][0][0]['length']];\n    }\n\n    /**\n     * seek(iCylinder, iHead, iSector, fWrite, done)\n     *\n     * TODO: There's some dodgy code in seek() that allows floppy images to be dynamically\n     * reconfigured with more heads and/or sectors/track, and it does so by peeking at more drive\n     * properties.  That code used to be in the FDC component, where it was perfectly reasonable\n     * to access those properties.  We need a cleaner interface back to the drive, similar to the\n     * info() interface we provide to the controller.\n     *\n     * Whether or not the \"dynamic reconfiguration\" feature itself is perfectly reasonable is,\n     * of course, a separate question.\n     *\n     * @this {DiskPDP11}\n     * @param {number} iCylinder\n     * @param {number} iHead\n     * @param {number} iSector\n     * @param {boolean} [fWrite]\n     * @param {function(Object,boolean)} [done]\n     * @return {Object|null} is the requested sector, or null if not found (or not available yet)\n     */\n    seek(iCylinder, iHead, iSector, fWrite, done)\n    {\n        var sector = null;\n        var drive = this.drive;\n        var cylinder = this.aDiskData[iCylinder];\n        if (cylinder) {\n            var i;\n            var track = cylinder[iHead];\n            /*\n             * The following code allows a single-sided diskette image to be reformatted (ie, \"expanded\")\n             * as a double-sided image, provided the drive has more than one head (see drive.nHeads).\n             */\n            if (!track && drive.bFormatting && iHead < drive.nHeads) {\n                track = cylinder[iHead] = new Array(drive.bSectorEnd);\n                for (i = 0; i < track.length; i++) {\n                    track[i] = this.initSector(null, iCylinder, iHead, i + 1, drive.nBytes, 0);\n                }\n            }\n            if (track) {\n                for (i = 0; i < track.length; i++) {\n                    if (track[i] && track[i]['sector'] == iSector) {\n                        /*\n                         * If the sector's pattern is null, then this sector's true contents have not yet\n                         * been fetched from the server.\n                         */\n                        sector = track[i];\n                        break;\n                    }\n                }\n                /*\n                 * The following code allows an 8-sector track to be reformatted (ie, \"expanded\") as a 9-sector track.\n                 */\n                if (!sector && drive.bFormatting && drive.bSector == 9) {\n                    sector = track[i] = this.initSector(null, iCylinder, iHead, drive.bSector, drive.nBytes, 0);\n                }\n            }\n        }\n        if (done) done(sector, false);\n        return sector;\n    }\n\n    /**\n     * fill(sector, ab, off)\n     *\n     * @this {DiskPDP11}\n     * @param {Object} sector\n     * @param {*} ab (technically, this should be typed as Array.<number> but I'm having trouble coercing JSON.parse() to that)\n     * @param {number} off\n     */\n    fill(sector, ab, off)\n    {\n        var cdw = sector['length'] >> 2;\n        var adw = new Array(cdw);\n        for (var idw = 0; idw < cdw; idw++) {\n            adw[idw] = ab[off] | (ab[off + 1] << 8) | (ab[off + 2] << 16) | (ab[off + 3] << 24);\n            off += 4;\n        }\n        sector['data'] = adw;\n        /*\n         * TODO: Consider taking this opportunity to shrink 'data' down by the number of dwords at the end of the buffer that\n         * contain the same pattern, and setting 'pattern' accordingly.\n         */\n    }\n\n    /**\n     * toBytes(sector)\n     *\n     * @this {DiskPDP11}\n     * @param {Object} sector\n     * @return {Array.<number>} is an array of bytes\n     */\n    toBytes(sector)\n    {\n        var cb = sector['length'];\n        var ab = new Array(cb);\n        var ib = 0;\n        var cdw = cb >> 2;\n        var adw = sector['data'];\n        var dwPattern = sector['pattern'];\n        for (var idw = 0; idw < cdw; idw++) {\n            var dw = (idw < adw.length? adw[idw] : dwPattern);\n            ab[ib++] = dw & 0xff;\n            ab[ib++] = (dw >> 8) & 0xff;\n            ab[ib++] = (dw >> 16) & 0xff;\n            ab[ib++] = (dw >> 24) & 0xff;\n        }\n        return ab;\n    }\n\n    /**\n     * read(sector, ibSector, fCompare)\n     *\n     * @this {DiskPDP11}\n     * @param {Object} sector (returned from a previous seek)\n     * @param {number} ibSector a byte index within the given sector\n     * @param {boolean} [fCompare] is true if this write-compare read\n     * @return {number} the specified (unsigned) byte, or -1 if no more data in the sector\n     */\n    read(sector, ibSector, fCompare)\n    {\n        var b = -1;\n        if (sector) {\n            if (ibSector < sector['length']) {\n                var adw = sector['data'];\n                var idw = ibSector >> 2;\n                var dw = (idw < adw.length ? adw[idw] : sector['pattern']);\n                b = ((dw >> ((ibSector & 0x3) << 3)) & 0xff);\n            }\n            if (DEBUG && !fCompare && this.messageEnabled()) {\n                this.printMessage('read(\"' + this.sDiskFile + '\",CHS=' + sector.iCylinder + ':' + sector.iHead + ':' + sector['sector'] + ',index=' + ibSector + ',value=' + Str.toHexByte(b) + ')');\n            }\n        }\n        return b;\n    }\n\n    /**\n     * write(sector, ibSector, b)\n     *\n     * @this {DiskPDP11}\n     * @param {Object} sector (returned from a previous seek)\n     * @param {number} ibSector a byte index within the given sector\n     * @param {number} b the byte value to write\n     * @return {boolean|null} true if write successful, false if write-protected, null if out of bounds\n     */\n    write(sector, ibSector, b)\n    {\n        if (this.fWriteProtected)\n            return false;\n\n        if (DEBUG && this.messageEnabled()) {\n            this.printMessage('write(\"' + this.sDiskFile + '\",CHS=' + sector.iCylinder + ':' + sector.iHead + ':' + sector['sector'] + ',index=' + ibSector + ',value=' + Str.toHexByte(b) + ')');\n        }\n\n        if (ibSector < sector['length']) {\n            if (b != this.read(sector, ibSector, true)) {\n                var adw = sector['data'];\n                var dwPattern = sector['pattern'];\n                var idw = ibSector >> 2;\n                var nShift = (ibSector & 0x3) << 3;\n\n                /*\n                 * Ensure every byte up to the specified byte is properly initialized.\n                 */\n                for (var i = adw.length; i <= idw; i++) adw[i] = dwPattern;\n\n                if (!sector.cModify) {\n                    sector.iModify = idw;\n                    sector.cModify = 1;\n                } else if (idw < sector.iModify) {\n                    sector.cModify += sector.iModify - idw;\n                    sector.iModify = idw;\n                } else if (idw >= sector.iModify + sector.cModify) {\n                    sector.cModify += idw - (sector.iModify + sector.cModify) + 1;\n                }\n                adw[idw] = (adw[idw] & ~(0xff << nShift)) | (b << nShift);\n            }\n            return true;\n        }\n        return null;\n    }\n\n    /**\n     * getSector(pba)\n     *\n     * @this {DiskPDP11}\n     * @param {number} pba (physical block address)\n     * @return {Object|null} sector\n     */\n    getSector(pba)\n    {\n        var nSectorsPerCylinder = this.nHeads * this.nSectors;\n        var iCylinder = (pba / nSectorsPerCylinder) | 0;\n        if (iCylinder < this.nCylinders) {\n            var nSectorsRemaining = (pba % nSectorsPerCylinder);\n            var iHead = (nSectorsRemaining / this.nSectors) | 0;\n            /*\n             * PBA numbers are 0-based, but the sector numbers in CHS addressing are 1-based, so add one to iSector\n             */\n            var iSector = (nSectorsRemaining % this.nSectors) + 1;\n            return this.seek(iCylinder, iHead, iSector);\n        }\n        return null;\n    }\n\n    /**\n     * getSectorData(sector, off, len)\n     *\n     * WARNING: This function is restricted to reading data contained ENTIRELY within the specified sector.\n     *\n     * NOTE: Yes, this function is not the most efficient way to read a byte/word/dword value from within a sector,\n     * but given the different states a sector may be in, it's certainly the simplest and safest, and since this is\n     * only used by buildFileTable() and its progeny, it's not clear that we need to be superfast anyway.\n     *\n     * @this {DiskPDP11}\n     * @param {Object} sector\n     * @param {number} off (byte offset)\n     * @param {number} len (1 to 4 bytes)\n     * @return {number}\n     */\n    getSectorData(sector, off, len)\n    {\n        var dw = 0;\n        var nShift = 0;\n\n        while (len--) {\n\n            var b = this.read(sector, off++);\n\n            if (b < 0) break;\n            dw |= (b << nShift);\n            nShift += 8;\n        }\n        return dw;\n    }\n\n    /**\n     * encodeAsBase64()\n     *\n     * @this {DiskPDP11}\n     * @return {string}\n     */\n    encodeAsBase64()\n    {\n        /*\n         * Gross, but simple; more importantly, it works -- at least for disks of typical floppy magnitude.\n         */\n        var s = \"\", pba = 0, sector;\n        while ((sector = this.getSector(pba++))) {\n            for (var off = 0, len = sector['length']; off < len; off++) {\n                s += String.fromCharCode(this.getSectorData(sector, off, 1));\n            }\n        }\n        return btoa(s);\n    }\n\n    /**\n     * save()\n     *\n     * The first array entry contains some disk information:\n     *\n     *      [sDiskPath, dwChecksum, nCylinders, nHeads, nSectors, cbSector]\n     *\n     * Each subsequent entry in the returned array contains the following:\n     *\n     *      [iCylinder, iHead, iSector, iModify, [...]]\n     *\n     * where [...] is an array of modified dword(s) in the corresponding sector.\n     *\n     * @this {DiskPDP11}\n     * @return {Array} of modified sectors\n     */\n    save()\n    {\n        var i = 0;\n        var deltas = [];\n        deltas[i++] = [this.sDiskPath, this.dwChecksum, this.nCylinders, this.nHeads, this.nSectors, this.cbSector];\n        if (!this.fWriteProtected) {\n            var aDiskData = this.aDiskData;\n            for (var iCylinder = 0; iCylinder < aDiskData.length; iCylinder++) {\n                for (var iHead = 0; iHead < aDiskData[iCylinder].length; iHead++) {\n                    for (var iSector = 0; iSector < aDiskData[iCylinder][iHead].length; iSector++) {\n                        var sector = aDiskData[iCylinder][iHead][iSector];\n                        if (sector && sector.cModify) {\n                            var mods = [], n = 0;\n                            var iModify = sector.iModify, iModifyLimit = sector.iModify + sector.cModify;\n                            while (iModify < iModifyLimit) {\n                                mods[n++] = sector['data'][iModify++];\n                            }\n                            deltas[i++] = [iCylinder, iHead, iSector, sector.iModify, mods];\n                        }\n                    }\n                }\n            }\n        }\n        if (DEBUG && this.messageEnabled()) {\n            this.printMessage('save(\"' + this.sDiskName + '\"): saved ' + (deltas.length - 1) + ' change(s)');\n        }\n        return deltas;\n    }\n\n    /**\n     * restore(deltas)\n     *\n     * The first array entry contains some disk information:\n     *\n     *      [sDiskPath, dwChecksum, nCylinders, nHeads, nSectors, cbSector]\n     *\n     * Each subsequent entry in the supplied array contains the following:\n     *\n     *      [iCylinder, iHead, iSector, iModify, [...]]\n     *\n     * where [...] is an array of modified dword(s) in the corresponding sector.\n     *\n     * @this {DiskPDP11}\n     * @param {Array} deltas\n     * @return {number} 0 if no changes applied, -1 if an error occurred, otherwise the number of sectors modified\n     */\n    restore(deltas)\n    {\n        /*\n         * If deltas is undefined, that's not necessarily an error;  the controller may simply be (re)initializing\n         * itself (although neither controller should be calling restore() under those conditions anymore).\n         */\n        var nChanges = 0;\n        var sReason = \"unsupported restore format\";\n        /*\n         * I originally added a check for aDiskData here on the assumption that if there was an error loading\n         * a disk image, we will have already notified the user, so any additional errors about differing checksums,\n         * failure to restore the disk state, etc, would just be annoying.  HOWEVER, HDC will create an empty disk\n         * image if its initialization code discovers that no disk was loaded earlier (see verifyDrive).  So while\n         * checking aDiskData is still a good idea, be aware that it won't necessarily avoid redundant error messages\n         * (at least in the case of HDC).\n         */\n        if (deltas && deltas.length > 0) {\n\n            var i = 0;\n            var aDiskInfo = deltas[i++];\n\n            if (aDiskInfo && aDiskInfo.length >= 2) {\n                /*\n                 * Before getting to the checksum, we have to deal with a new situation: restoring an uninitialized\n                 * disk image from a complete set of deltas.  And that is only possible if the disk was saved with the\n                 * original disk geometry.\n                 */\n                if (!this.aDiskData.length && aDiskInfo.length >= 6) {\n                    this.create(DiskAPI.MODE.LOCAL, aDiskInfo[2], aDiskInfo[3], aDiskInfo[4], aDiskInfo[5]);\n                    /*\n                     * TODO: Consider setting a flag here that we can check at the end of the restore() function\n                     * that indicates we should recalculate dwChecksum, because we currently have an inconsistency\n                     * between local disks that are mounted via build() and the same disks that are \"remounted\"\n                     * later by this code; the former has the correct checksum, while the latter has a null checksum.\n                     *\n                     * As you can see below, we currently deal with this by simply ignoring null checksums....\n                     */\n                }\n                /*\n                 * v1.01 failed to indicate an error if either one of these failure conditions occurred.  Although maybe that's\n                 * just as well, since v1.01 also failed to properly deal with situations where the user mounted different diskette(s)\n                 * prior to exiting (hopefully fixed in v1.02).\n                 */\n                else if (aDiskInfo[1] != null && this.dwChecksum != null && aDiskInfo[1] != this.dwChecksum) {\n                    sReason = \"original checksum (\" + aDiskInfo[1] + \") differs from current checksum (\" + this.dwChecksum + \")\";\n                    nChanges = -2;\n                }\n                /*\n                 * Checksum is more important than disk path, and for now, I want the flexibility to move disk images.\n                 *\n                else if (aDiskInfo[0] != this.sDiskPath) {\n                    sReason = \"original path '\" + aDiskInfo[0] + \"' differs from current path '\" + this.sDiskPath + \"'\";\n                    nChanges = -1;\n                }\n                 */\n            }\n\n            if (!this.aDiskData.length) nChanges = -1;\n\n            while (i < deltas.length && nChanges >= 0) {\n                var m = 0;\n                var mod = deltas[i++];\n                var iCylinder = mod[m++];\n                var iHead = mod[m++];\n                var iSector = mod[m++];\n                /*\n                 * Note the buried test for write-protection.  Yes, an invariant condition should be tested\n                 * outside the loop, not inside, but (a) it's a trivial test, (b) the test should never fail\n                 * because save() should never generate any mods for a write-protected disk, and (c) it\n                 * centralizes all the failure conditions we're currently checking (which, admittedly, ain't much).\n                 */\n                if (iCylinder >= this.aDiskData.length || iHead >= this.aDiskData[iCylinder].length || iSector >= this.aDiskData[iCylinder][iHead].length) {\n                    sReason = \"sector (CHS=\" + iCylinder + ':' + iHead + ':' + iSector + \") out of range (\" + nChanges + \" changes applied)\";\n                    nChanges = -1;\n                    break;\n                }\n                if (this.fWriteProtected) {\n                    sReason = \"unable to modify write-protected disk\";\n                    nChanges = -1;\n                    break;\n                }\n                var iModify = mod[m++];\n                var mods = mod[m++];\n                var iModifyLimit = iModify + mods.length;\n                var sector = this.aDiskData[iCylinder][iHead][iSector];\n                if (!sector) continue;\n                /*\n                 * Since write() now deals with empty/partial sectors, we no longer need to completely \"inflate\"\n                 * the sector prior to applying modifications.  So let's just make sure that the sector is \"inflated\"\n                 * up to iModify.\n                 */\n                var idw = sector['data'].length;\n                while (idw < iModify) {\n                    sector['data'][idw++] = sector['pattern'];\n                }\n                var n = 0;\n                sector.iModify = iModify;\n                sector.cModify = mods.length;\n                while (iModify < iModifyLimit) {\n                    sector['data'][iModify++] = mods[n++];\n                }\n                nChanges++;\n            }\n        }\n\n        if (nChanges < 0) {\n            /*\n             * We're suppressing checksum messages for the general public for now....\n             */\n            if (DEBUG || nChanges != -2) {\n                this.controller.notice(\"Unable to restore disk '\" + this.sDiskName + \": \" + sReason);\n            }\n        } else {\n            if (DEBUG && this.messageEnabled()) {\n                this.printMessage('restore(\"' + this.sDiskName + '\"): restored ' + nChanges + ' change(s)');\n            }\n        }\n        return nChanges;\n    }\n\n    /**\n     * convertToJSON(fFormatted)\n     *\n     * We perform some RegExp massaging on the JSON data to eliminate unnecessary properties\n     * (eg, 'length' values of 512, 'pattern' values of 0, since those are defaults).\n     *\n     * In addition, we first check every sector to see if it can be \"deflated\".  Sectors that were\n     * initially \"deflated\" should remain that way unless/until they were modified, so technically,\n     * we could call deflateSector() just for modified sectors, but this isn't a common operation,\n     * so it doesn't hurt to check every sector.\n     *\n     * @this {DiskPDP11}\n     * @param {boolean} [fFormatted]\n     * @return {string} containing the entire disk image as JSON-encoded data\n     */\n    convertToJSON(fFormatted)\n    {\n        var s, pba = 0, sector, sectorLast;\n\n        while ((sector = this.getSector(pba++))) {\n            this.deflateSector(sector);\n        }\n\n        s = JSON.stringify(this.aDiskData, function(key, value) {\n            /*\n             * If BACKTRACK support is enabled, we have to filter out any 'file' properties that may\n             * be attached to the sector objects, lest we risk blowing the stack due to circular references.\n             */\n            if (key == 'file') {\n                return undefined;\n            }\n            return value;\n        });\n\n        /*\n         * Eliminate unnecessary default properties (eg, 'length' values of 512, 'pattern' values of 0).\n         */\n        s = s.replace(/,\"length\":512/g, \"\").replace(/,\"pattern\":0/g, \"\");\n\n        /*\n         * I don't really want to strip quotes from disk image property names, since I would have to put them\n         * back again during mount() -- or whenever JSON.parse() is used instead of eval().  But I still remove\n         * them temporarily, so that any remaining property names (eg, \"iModify\", \"cModify\", \"fDirty\") can\n         * easily be stripped out, by virtue of their being the only quoted properties left.  We then \"requote\"\n         * all the property names that remain.\n         */\n        s = s.replace(/\"(sector|length|data|pattern)\":/g, \"$1:\");\n\n        /*\n         * The next line will remove any other numeric or boolean properties that were added at runtime, although\n         * they may have completely different (\"minified\") names if the code has been compiled.\n         */\n        s = s.replace(/,\"[^\"]*\":([0-9]+|true|false)/g, \"\");\n        s = s.replace(/(sector|length|data|pattern):/g, \"\\\"$1\\\":\");\n\n        /*\n         * Last but not least, insert line breaks after every object definition, to improve human readability\n         * (but only if the caller asks for it).\n         */\n        if (fFormatted) s = s.replace(/([\\]}]),/g, \"$1,\\n\");\n        return s;\n    }\n\n    /**\n     * deflateSector(sector)\n     *\n     * This is just the first revision: it currently looks only at fully inflated sectors.\n     *\n     * @this {DiskPDP11}\n     * @param {Object} sector\n     */\n    deflateSector(sector)\n    {\n        var adw = sector['data'];\n        var cdw = adw.length;\n        if ((cdw << 2) == sector['length']) {\n            var idw = cdw - 1;\n            var dwPattern = adw[idw], cDupes = 0;\n            while (idw--) {\n                if (adw[idw] !== dwPattern) break;\n                cDupes++;\n            }\n            if (cDupes++) {\n                adw.length = cdw - cDupes;\n                sector['pattern'] = dwPattern;\n            }\n        }\n    }\n\n    /**\n     * dumpSector(sector, pba, sDesc)\n     *\n     * @this {DiskPDP11}\n     * @param {Object} sector (returned from a previous seek)\n     * @param {number} [pba]\n     * @param {string} [sDesc]\n     * @return {string}\n     */\n    dumpSector(sector, pba, sDesc)\n    {\n        var sDump = \"\";\n        if (DEBUG && sector) {\n            if (pba != null) sDump += \"sector \" + pba + (sDesc? (\" for \" + sDesc) : \"\") + ':';\n            var sBytes = \"\", sChars = \"\";\n            var cbSector = sector['length'];\n            var cdwData = sector['data'].length;\n            var dw = 0;\n            for (var i = 0; i < cbSector; i++) {\n                if ((i % 16) === 0) {\n                    if (sDump) sDump += sBytes + ' ' + sChars + '\\n';\n                    sDump += Str.toHex(i, 4) + \": \";\n                    sBytes = sChars = \"\";\n                }\n                if ((i % 4) === 0) {\n                    var idw = i >> 2;\n                    dw = (idw < cdwData? sector['data'][idw] : sector['pattern']);\n                }\n                var b = dw & 0xff;\n                dw >>>= 8;\n                sBytes += Str.toHex(b, 2) + (i % 16 == 7? \"-\" : \" \");\n                sChars += (b >= 32 && b < 128? String.fromCharCode(b) : \".\");\n            }\n            if (sBytes) sDump += sBytes + ' ' + sChars;\n        }\n        return sDump;\n    }\n}\n\n/*\n * A global disk count, used to form unique Disk component IDs (totally optional; for debugging purposes only)\n */\nDiskPDP11.nDisks = 0;\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/drive.js (C) Jeff Parsons 2012-2018\n */\n\n\n/**\n * @typedef {{\n *  PRI:        number,\n *  VEC:        number,\n *  DRIVES:     number\n * }}\n */\nvar Config;\n\n/**\n * Since the Closure Compiler treats ES6 classes as @struct rather than @dict by default,\n * it deters us from defining named properties on our components; eg:\n *\n *      this['exports'] = {...}\n *\n * results in an error:\n *\n *      Cannot do '[]' access on a struct\n *\n * So, in order to define 'exports', we must override the @struct assumption by annotating\n * the class as @unrestricted (or @dict).  Note that this must be done both here and in the\n * Component class, because otherwise the Compiler won't allow us to *reference* the named\n * property either.\n *\n * TODO: Consider marking ALL our classes unrestricted, because otherwise it forces us to\n * define every single property the class uses in its constructor, which results in a fair\n * bit of redundant initialization, since many properties aren't (and don't need to be) fully\n * initialized until the appropriate init(), reset(), restore(), etc. function is called.\n *\n * The upside, however, may be that since the structure of the class is completely defined by\n * the constructor, JavaScript engines may be able to optimize and run more efficiently.\n *\n * @unrestricted\n */\nclass DriveController extends Component {\n    /**\n     * DriveController(type, parms, bitsMessage, configDC, configDrive, configIO)\n     *\n     * The DriveController component has the following component-specific (parms) properties:\n     *\n     *      autoMount: one or more JSON-encoded objects, each containing 'name' and 'path' properties\n     *\n     * @this {DriveController}\n     * @param {string} type\n     * @param {Object} parms\n     * @param {number} bitsMessage\n     * @param {Config} configDC\n     * @param {Array} configDrive\n     * @param {Object} configIO\n     */\n    constructor(type, parms, bitsMessage, configDC, configDrive, configIO)\n    {\n        super(type, parms, bitsMessage);\n\n        /*\n         * We preliminarily parse and record any 'autoMount' object now, but we no longer process it\n         * until initBus(), because the Computer's getMachineParm() service may have an override for us.\n         */\n        this.configMount = this.parseConfig(parms['autoMount']);\n        this.cAutoMount = 0;\n\n        this.configDC = configDC;\n        this.configDrive = configDrive;\n        this.configIO = configIO;\n\n        this.nDrives = configDC.DRIVES;\n        this.aDrives = new Array(this.nDrives);\n        this.fLocalDisks = (!Web.isMobile() && window && 'FileReader' in window);\n        this.sDiskSource = DriveController.SOURCE.NONE;\n\n        /*\n         * The following array keeps track of every disk image we've ever mounted.  Each entry in the\n         * array is another array whose elements are:\n         *\n         *      [0]: name of disk\n         *      [1]: path of disk\n         *      [2]: array of deltas, uninitialized until the disk is unmounted and/or all state is saved\n         *\n         * See functions addDiskHistory() and updateDiskHistory().\n         */\n        this.aDiskHistory = [];\n\n        this.irq = null;\n\n        this['exports'] = {\n            'bootDisk':     this.bootSelectedDisk,\n            'loadDisk':     this.loadSelectedDisk,\n            'selectDrive':  this.selectDrive,\n            'wait':         this.waitDrives\n        };\n    }\n\n    /**\n     * parseConfig(config)\n     *\n     * @this {DriveController}\n     * @param {*} config\n     * @return {*}\n     */\n    parseConfig(config)\n    {\n        if (config && typeof config == \"string\") {\n            try {\n                /*\n                 * The most likely source of any exception will be right here, where we're parsing\n                 * this JSON-encoded data.\n                 */\n                config = eval(\"(\" + config + \")\");\n            } catch (e) {\n                Component.error(this.type + \" auto-mount error: \" + e.message + \" (\" + config + \")\");\n                config = null;\n            }\n        }\n        return config || {};\n    }\n\n    /**\n     * setBinding(sType, sBinding, control, sValue)\n     *\n     * @this {DriveController}\n     * @param {string|null} sType is the type of the HTML control (eg, \"button\", \"list\", \"text\", etc)\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"listDisks\")\n     * @param {Object} control is the HTML control DOM object (eg, HTMLButtonElement)\n     * @param {string} [sValue] optional data value\n     * @return {boolean} true if binding was successful, false if unrecognized binding request\n     */\n    setBinding(sType, sBinding, control, sValue)\n    {\n        var dc = this;\n\n        switch (sBinding) {\n\n        case \"listDisks\":\n            this.bindings[sBinding] = control;\n            control.onchange = function onChangeListDisks(event) {\n                dc.updateSelectedDisk();\n            };\n            return true;\n\n        case \"descDisk\":\n        case \"listDrives\":\n            this.bindings[sBinding] = control;\n            /*\n             * I tried going with onclick instead of onchange, so that if you wanted to confirm what's\n             * loaded in a particular drive, you could click the drive control without having to change it.\n             * However, that doesn't seem to work for all browsers, so I've reverted to onchange.\n             */\n            control.onchange = function onChangeListDrives(event) {\n                var iDrive = Str.parseInt(control.value, 10);\n                if (iDrive != null) dc.displayDisk(iDrive);\n            };\n            return true;\n\n        case \"loadDisk\":\n            this.bindings[sBinding] = control;\n            control.onclick = function onClickLoadDrive(event) {\n                dc.loadSelectedDisk();\n            };\n            return true;\n\n        case \"bootDisk\":\n            this.bindings[sBinding] = control;\n            control.onclick = function onClickBootDisk(event) {\n                dc.bootSelectedDisk();\n            };\n            return true;\n\n        case \"saveDisk\":\n            /*\n             * Yes, technically, this feature does not require \"Local disk support\" (which is really a reference\n             * to FileReader support), but since fLocalDisks is also false for all mobile devices, and since there\n             * is an \"orthogonality\" to disabling both features in tandem, let's just let it slide, OK?\n             */\n            if (!this.fLocalDisks) {\n                if (DEBUG) this.log(\"Local disk support not available\");\n                /*\n                 * We could also simply hide the control; eg:\n                 *\n                 *      control.style.display = \"none\";\n                 *\n                 * but removing the control altogether seems better.\n                 */\n                control.parentNode.removeChild(/** @type {Node} */ (control));\n                return false;\n            }\n\n            this.bindings[sBinding] = control;\n\n            control.onclick = function onClickSaveDrive(event) {\n                var controlDrives = dc.bindings[\"listDrives\"];\n                if (controlDrives && controlDrives.options && dc.aDrives) {\n                    var iDriveSelected = Str.parseInt(controlDrives.value, 10) || 0;\n                    var drive = dc.aDrives[iDriveSelected];\n                    if (drive) {\n                        /*\n                         * Note the similarity (and hence factoring opportunity) between this code and the HDC's \"saveHD*\" binding.\n                         */\n                        var disk = drive.disk;\n                        if (disk) {\n                            if (DEBUG) dc.println(\"saving disk \" + disk.sDiskPath + \"...\");\n                            var sAlert = Web.downloadFile(disk.encodeAsBase64(), \"octet-stream\", true, disk.sDiskFile.replace(\".json\", \".img\"));\n                            Component.alertUser(sAlert);\n                        } else {\n                            dc.notice(\"No disk loaded in drive.\");\n                        }\n                    } else {\n                        dc.notice(\"No disk drive selected.\");\n                    }\n                }\n            };\n            return true;\n\n        case \"mountDisk\":\n            if (!this.fLocalDisks) {\n                if (DEBUG) this.log(\"Local disk support not available\");\n                /*\n                 * We could also simply hide the control; eg:\n                 *\n                 *      control.style.display = \"none\";\n                 *\n                 * but removing the control altogether seems better.\n                 */\n                control.parentNode.removeChild(/** @type {Node} */ (control));\n                return false;\n            }\n\n            this.bindings[sBinding] = control;\n\n            /*\n             * Enable \"Mount\" button only if a file is actually selected\n             */\n            control.addEventListener('change', function() {\n                var fieldset = control.children[0];\n                var files = fieldset.children[0].files;\n                var submit = fieldset.children[1];\n                submit.disabled = !files.length;\n            });\n\n            control.onsubmit = function(event) {\n                var file = event.currentTarget[1].files[0];\n                if (file) {\n                    var sDiskPath = file.name;\n                    var sDiskName = Str.getBaseName(sDiskPath, true);\n                    dc.loadSelectedDisk(sDiskName, sDiskPath, file);\n                }\n                /*\n                 * Prevent reloading of web page after form submission\n                 */\n                return false;\n            };\n            return true;\n\n        default:\n            break;\n        }\n        return false;\n    }\n\n    /**\n     * initBus(cmp, bus, cpu, dbg)\n     *\n     * @this {DriveController}\n     * @param {ComputerPDP11} cmp\n     * @param {BusPDP11} bus\n     * @param {CPUStatePDP11} cpu\n     * @param {DebuggerPDP11} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.cmp = cmp;\n        this.bus = bus;\n        this.cpu = cpu;\n        this.dbg = dbg;\n\n        var configMount = this.parseConfig(this.cmp.getMachineParm('autoMount'));\n\n        /*\n         * Add only drives from the machine-wide autoMount configuration that match drives managed by this component.\n         */\n        if (configMount) {\n            for (var sDrive in configMount) {\n                if (sDrive.substr(0, 2) != this.type.substr(0, 2)) continue;\n                this.configMount[sDrive] = configMount[sDrive];\n            }\n        }\n\n        /*\n         * If we didn't need auto-mount support, we could defer controller and drive initialization until we received\n         * a powerUp() notification, at which point reset() would call initController(), or restore() would restore the\n         * controller.\n         */\n        this.reset();\n\n        this.irq = this.cpu.addIRQ(this.configDC.VEC, this.configDC.PRI, this.bitsMessage);\n\n        bus.addIOTable(this, this.configIO);\n        bus.addResetHandler(this.reset.bind(this));\n\n        this.addDisk(\"None\", DriveController.SOURCE.NONE, true);\n        if (this.fLocalDisks) this.addDisk(\"Local Disk\", DriveController.SOURCE.LOCAL);\n        this.addDisk(\"Remote Disk\", DriveController.SOURCE.REMOTE);\n\n        if (!this.autoMount()) this.setReady();\n    }\n\n    /**\n     * getDriveName(iDrive)\n     *\n     * Form a drive name using the two-letter controller type prefix and the drive number.\n     *\n     * @this {DriveController}\n     * @param {number} iDrive\n     * @return {string}\n     */\n    getDriveName(iDrive)\n    {\n        var drive = this.aDrives[iDrive];\n        return drive.sName || \"---\";\n    }\n\n    /**\n     * getDriveNumber(sDrive)\n     *\n     * @this {DriveController}\n     * @param {string} sDrive\n     * @return {number} (0-3, or -1 if error)\n     */\n    getDriveNumber(sDrive)\n    {\n        var iDrive = -1;\n        if (sDrive) {\n            iDrive = sDrive.charCodeAt(sDrive.length - 1) - 0x30;\n            if (iDrive < 0 || iDrive > 9) iDrive = -1;\n        }\n        return iDrive;\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {DriveController}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        if (!fRepower) {\n            if (!data) {\n                this.reset();\n                if (this.cmp.fReload) {\n                    /*\n                     * If the computer's fReload flag is set, we're required to toss all currently\n                     * loaded disks and remount all disks specified in the auto-mount configuration.\n                     */\n                    this.unloadAllDrives(true);\n                    this.autoMount(true);\n                }\n            } else {\n                if (!this.restore(data)) return false;\n            }\n            /*\n             * Populate the HTML controls to match the actual (well, um, specified) number of floppy drives.\n             */\n            var controlDrives;\n            if ((controlDrives = this.bindings['listDrives'])) {\n                while (controlDrives.firstChild) {\n                    controlDrives.removeChild(controlDrives.firstChild);\n                }\n                controlDrives.value = \"\";\n                for (var iDrive = 0; iDrive < this.nDrives; iDrive++) {\n                    var controlOption = document.createElement(\"option\");\n                    controlOption.value = iDrive;\n                    controlOption.text = this.getDriveName(iDrive);\n                    controlDrives.appendChild(controlOption);\n                }\n                if (this.nDrives > 0) {\n                    controlDrives.value = \"0\";\n                    this.displayDisk(0);\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {DriveController}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\n     */\n    powerDown(fSave, fShutdown)\n    {\n        return fSave? this.save() : true;\n    }\n\n    /**\n     * reset()\n     *\n     * @this {DriveController}\n     */\n    reset()\n    {\n        this.initController();\n        this.initDrives();\n    }\n\n    /**\n     * save()\n     *\n     * This implements save support for the DriveController component.\n     *\n     * @this {DriveController}\n     * @return {Object}\n     */\n    save()\n    {\n        var state = new State(this);\n        state.set(0, this.saveController());\n        state.set(1, this.saveHistory());\n        state.set(2, this.saveDrives());\n        return state.data();\n    }\n\n    /**\n     * restore(data)\n     *\n     * This implements restore support for the DriveController component.\n     *\n     * @this {DriveController}\n     * @param {Object} data\n     * @return {boolean} true if successful, false if failure\n     */\n    restore(data)\n    {\n        var fSuccess = true;\n        if (!this.initController(data[0])) fSuccess = false;\n        if (!this.initHistory(data[1])) fSuccess = false;\n        if (!this.initDrives(data[2])) fSuccess = false;\n        return fSuccess;\n    }\n\n    /**\n     * initController(aRegs)\n     *\n     * Placeholder for subclasses.\n     *\n     * @this {DriveController}\n     * @param {Array} [aRegs]\n     * @return {boolean} true if successful, false if failure\n     */\n    initController(aRegs)\n    {\n        return true;\n    }\n\n    /**\n     * saveController()\n     *\n     * Placeholder for subclasses.\n     *\n     * @this {DriveController}\n     * @return {Array}\n     */\n    saveController()\n    {\n        return [];\n    }\n\n    /**\n     * initDrive(drive, iDrive, configDrive, configDisk)\n     *\n     * @this {DriveController}\n     * @param {Object} drive\n     * @param {number} iDrive\n     * @param {Array} configDrive\n     * @param {Array} [configDisk]\n     * @return {boolean} true if successful, false if failure\n     */\n    initDrive(drive, iDrive, configDrive, configDisk)\n    {\n        var i = 0;\n        var fSuccess = true;\n\n        drive.iDrive = iDrive;\n        drive.name = this.idComponent;\n        drive.fBusy = drive.fLocal = false;\n        drive.fnCallReady = null;\n        drive.fRemovable = true;\n\n        /*\n         * NOTE: We initialize the following drive properties to their MAXIMUMs; disks may have\n         * these or SMALLER values (subject to the limits of what the controller supports, of course).\n         */\n        drive.sName = configDrive[i++] + iDrive;\n        drive.nCylinders = configDrive[i++];\n        drive.nHeads = configDrive[i++];\n        drive.nSectors = configDrive[i++];\n        drive.cbSector = configDrive[i++];\n        drive.iCylinderBoot = configDrive[i++];\n        drive.iHeadBoot = configDrive[i++];\n        drive.iSectorBoot = configDrive[i++];\n        drive.cbSectorBoot = configDrive[i++];\n        drive.status = configDrive[i];\n\n        /*\n         * The next group of properties are set by various controller command sequences.\n         */\n        drive.bHead = 0;\n        drive.bCylinder = 0;\n        drive.bSector = 1;\n        drive.bSectorEnd = drive.nSectors;      // aka EOT\n        drive.nBytes = drive.cbSector;\n\n        /*\n         * The next group of properties are managed by worker functions (eg, doRead()) to maintain state across DMA requests.\n         */\n        drive.ibSector = 0;\n        drive.sector = null;\n\n        if (!drive.disk) {\n            drive.sDiskPath = \"\";               // ensure this is initialized to a default that displayDisk() can deal with\n        }\n\n        if (configDisk) {\n            var fLocal = configDisk[0];\n            var sDiskName = configDisk[1];\n            var sDiskPath = configDisk[2];\n            /*\n             * If we're restoring a local disk image, then the entire disk contents should be captured in aDiskHistory,\n             * so all we have to do is mount a blank disk and let disk.restore() do the rest; ie, there's nothing to\n             * \"load\" (it's a purely synchronous operation).\n             *\n             * Otherwise, we must call loadDrive(); in the common case, loadDrive() will have already \"auto-mounted\"\n             * the disk, so it will return true, and then we restore any deltas to the current image.\n             *\n             * However, if loadDrive() returns false, then it has initiated the load for a *different* disk image,\n             * so we must mark ourselves as \"not ready\" again, and add another \"wait for ready\" test in Computer before\n             * finally powering the CPU.\n             */\n            if (fLocal) {\n                this.mountDrive(iDrive, sDiskName, sDiskPath);\n            }\n            else if (this.loadDrive(iDrive, sDiskName, sDiskPath, true)) {\n                if (drive.disk) {\n                    if (sDiskPath) {\n                        this.addDiskHistory(sDiskName, sDiskPath, drive.disk);\n                    } else {\n                        if (MAXDEBUG) Component.warning(\"Disk '\" + (drive.disk.sDiskName || sDiskName) + \"' not recorded properly in drive \" + iDrive);\n                    }\n                }\n            } else {\n                this.setReady(false);\n            }\n        }\n        return fSuccess;\n    }\n\n    /**\n     * initDrives(aConfigDisks)\n     *\n     * @this {DriveController}\n     * @param {Array} [aConfigDisks]\n     * @return {boolean} true if successful, false if failure\n     */\n    initDrives(aConfigDisks)\n    {\n        var fSuccess = true;\n        for (var iDrive = 0; iDrive < this.aDrives.length; iDrive++) {\n            var drive = this.aDrives[iDrive];\n            if (drive === undefined) {\n                drive = this.aDrives[iDrive] = {};\n            }\n            var configDisk = aConfigDisks && aConfigDisks[iDrive];\n            if (!this.initDrive(drive, iDrive, this.configDrive, configDisk)) {\n                fSuccess = false;\n            }\n        }\n        return fSuccess;\n    }\n\n    /**\n     * saveDrive(drive)\n     *\n     * @this {DriveController}\n     * @param {Object} drive\n     * @return {Array}\n     */\n    saveDrive(drive)\n    {\n        return [\n            drive.fLocal,\n            drive.sDiskName,\n            drive.sDiskPath\n        ]\n    }\n\n    /**\n     * saveDrives()\n     *\n     * @this {DriveController}\n     * @return {Array}\n     */\n    saveDrives()\n    {\n        var data = [];\n        for (var iDrive = 0; iDrive < this.aDrives.length; iDrive++) {\n            data.push(this.saveDrive(this.aDrives[iDrive]));\n        }\n        return data;\n    }\n\n    /**\n     * initHistory(aHistory)\n     *\n     * @this {DriveController}\n     * @param {Array} [aHistory]\n     * @return {boolean} true if successful, false if failure\n     */\n    initHistory(aHistory)\n    {\n        /*\n         * Initialize the disk history (if available) before initializing the drives, so that any disk deltas can be\n         * applied to disk images that are already loaded.\n         */\n        if (aHistory) this.aDiskHistory = aHistory;\n\n        return true;\n    }\n\n    /**\n     * saveHistory()\n     *\n     * This returns an array of entries, one for each disk image we've ever mounted, including any deltas; ie:\n     *\n     *      [name, path, deltas]\n     *\n     * aDiskHistory contains exactly that, except that deltas may not be up-to-date for any currently mounted\n     * disk image(s), so we call updateHistory() for all those disks, and then aDiskHistory is ready to be saved.\n     *\n     * @this {DriveController}\n     * @return {Array}\n     */\n    saveHistory()\n    {\n        for (var iDrive = 0; iDrive < this.aDrives.length; iDrive++) {\n            var drive = this.aDrives[iDrive];\n            if (drive.disk) {\n                this.updateDiskHistory(drive.sDiskName, drive.sDiskPath, drive.disk);\n            }\n        }\n        return this.aDiskHistory;\n    }\n\n    /**\n     * autoMount(fRemount)\n     *\n     * @this {DriveController}\n     * @param {boolean} [fRemount] is true if we're remounting all auto-mounted disks\n     * @return {boolean} true if one or more disk images are being auto-mounted, false if none\n     */\n    autoMount(fRemount)\n    {\n        if (!fRemount) this.cAutoMount = 0;\n        for (var sDrive in this.configMount) {\n            var configDisk = this.configMount[sDrive];\n            var sDiskPath = configDisk['path'] || \"\";\n            var sDiskName = configDisk['name'] || this.findDisk(sDiskPath);\n            if (sDiskPath && sDiskName) {\n                var iDrive = this.getDriveNumber(sDrive);\n                if (iDrive >= 0 && iDrive < this.aDrives.length) {\n                    if (!this.loadDrive(iDrive, sDiskName, sDiskPath, true) && fRemount) {\n                        this.setReady(false);\n                    }\n                    continue;\n                }\n            }\n            this.notice(\"Incorrect auto-mount settings for drive \" + sDrive + \" (\" + JSON.stringify(configDisk) + \")\");\n        }\n        return !!this.cAutoMount;\n    }\n\n    /**\n     * loadSelectedDisk(sDiskName, sDiskPath, file)\n     *\n     * @this {DriveController}\n     * @param {string} [sDiskName]\n     * @param {string} [sDiskPath]\n     * @param {File} [file] is set if there's an associated File object\n     * @return {boolean}\n     */\n    loadSelectedDisk(sDiskName, sDiskPath, file)\n    {\n        if (!sDiskName && !sDiskPath) {\n            var controlDisks = this.bindings[\"listDisks\"];\n            if (controlDisks && controlDisks.options) {\n                sDiskName = controlDisks.options[controlDisks.selectedIndex].text;\n                sDiskPath = controlDisks.value;\n            }\n        }\n\n        var controlDrives = this.bindings[\"listDrives\"];\n        var iDrive = controlDrives && Str.parseInt(controlDrives.value, 10);\n\n        if (iDrive === undefined || iDrive < 0 || iDrive >= this.aDrives.length) {\n            this.notice(\"Unable to load the selected drive\");\n            return false;\n        }\n\n        if (!sDiskPath) {\n            this.unloadDrive(iDrive);\n            return true;\n        }\n\n        if (sDiskPath == DriveController.SOURCE.LOCAL) {\n            this.notice('Use \"Choose File\" and \"Mount\" to select and load a local disk.');\n            return false;\n        }\n\n        /*\n         * If the special DriveController.SOURCE.REMOTE path is selected, then we want to prompt the user for a URL.\n         * Oh, and make sure we pass an empty string as the 2nd parameter to prompt(), so that IE won't display\n         * \"undefined\" -- because after all, undefined and \"undefined\" are EXACTLY the same thing, right?\n         *\n         * TODO: This is literally all I've done to support remote disk images. There's probably more\n         * I should do, like dynamically updating \"listDisks\" to include new entries, and adding new entries\n         * to the save/restore data.\n         */\n        if (sDiskPath == DriveController.SOURCE.REMOTE) {\n            sDiskPath = window.prompt(\"Enter the URL of a remote disk image.\", \"\") || \"\";\n            if (!sDiskPath) return false;\n            sDiskName = Str.getBaseName(sDiskPath);\n            this.status(\"Attempting to load \" + sDiskPath + \" as \\\"\" + sDiskName + \"\\\"\");\n            this.sDiskSource = DriveController.SOURCE.REMOTE;\n        }\n        else {\n            this.sDiskSource = sDiskPath;\n        }\n\n        this.loadDrive(iDrive, sDiskName, sDiskPath, false, file);\n        return true;\n    }\n\n    /**\n     * bootSelectedDisk()\n     *\n     * @this {DriveController}\n     * @return {boolean}\n     */\n    bootSelectedDisk()\n    {\n        var drive;\n        var controlDrives = this.bindings[\"listDrives\"];\n        var iDrive = controlDrives && Str.parseInt(controlDrives.value, 10);\n\n        if (iDrive == null || iDrive < 0 || iDrive >= this.aDrives.length || !(drive = this.aDrives[iDrive])) {\n            this.notice(\"Unable to boot the selected drive\");\n            return false;\n        }\n\n        if (!drive.disk) {\n            this.notice(\"Load a disk into the drive first\");\n            return false;\n        }\n\n        /*\n         * NOTE: We're calling setReset() BEFORE reading the boot code in order to eliminate any side-effects\n         * of the previous state of either the controller OR the CPU; for example, we don't want any previous MMU\n         * or UNIBUS Map registers affecting the simulated readData() call.  Also, some boot code (eg, RSTS/E)\n         * expects the controller to be in a READY state; since setReset() triggers a call to our reset() handler,\n         * a READY state is assured, and the readData() call shouldn't do anything to change that.\n         */\n        this.cpu.setReset(0, true, iDrive);\n\n        var err = this.readData(drive, drive.iCylinderBoot, drive.iHeadBoot, drive.iSectorBoot, drive.cbSectorBoot, 0x0000, 2);\n        if (err) {\n            this.notice(\"Unable to read the boot sector (\" + err + \")\");\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * mountDrive(iDrive, sDiskName, sDiskPath)\n     *\n     * @this {DriveController}\n     * @param {number} iDrive\n     * @param {string} sDiskName\n     * @param {string} sDiskPath\n     */\n    mountDrive(iDrive, sDiskName, sDiskPath)\n    {\n        var drive = this.aDrives[iDrive];\n        this.unloadDrive(iDrive, true);\n        drive.fLocal = true;\n        var disk = new DiskPDP11(this, drive, DiskAPI.MODE.PRELOAD);\n        this.doneLoadDrive(drive, disk, sDiskName, sDiskPath, true);\n    }\n\n    /**\n     * loadDrive(iDrive, sDiskName, sDiskPath, fAutoMount, file)\n     *\n     * NOTE: If sDiskPath is already loaded, nothing needs to be done.\n     *\n     * @this {DriveController}\n     * @param {number} iDrive\n     * @param {string} sDiskName\n     * @param {string} sDiskPath\n     * @param {boolean} [fAutoMount]\n     * @param {File} [file] is set if there's an associated File object\n     * @return {number} 1 if disk loaded, 0 if queued up (or busy), -1 if already loaded\n     */\n    loadDrive(iDrive, sDiskName, sDiskPath, fAutoMount, file)\n    {\n        var nResult = -1;\n        var drive = this.aDrives[iDrive];\n\n        if (drive.sDiskPath.toLowerCase() != sDiskPath.toLowerCase()) {\n\n            nResult++;\n            this.unloadDrive(iDrive, true);\n\n            if (drive.fBusy) {\n                this.notice(this.type + \" busy\");\n            }\n            else {\n                // this.status(\"disk queued: \" + sDiskName);\n                drive.fBusy = true;\n                if (fAutoMount) {\n                    drive.fAutoMount = true;\n                    this.cAutoMount++;\n                    if (this.messageEnabled()) this.printMessage(\"auto-loading disk: \" + sDiskName);\n                }\n                drive.fLocal = !!file;\n                var disk = new DiskPDP11(this, drive, DiskAPI.MODE.PRELOAD);\n                if (disk.load(sDiskName, sDiskPath, file, this.doneLoadDrive)) {\n                    nResult++;\n                }\n            }\n        }\n        return nResult;\n    }\n\n    /**\n     * doneLoadDrive(drive, disk, sDiskName, sDiskPath, fAutoMount)\n     *\n     * The disk parameter is set if the disk was successfully loaded, null if not.\n     *\n     * @this {DriveController}\n     * @param {Object} drive\n     * @param {DiskPDP11} disk\n     * @param {string} sDiskName\n     * @param {string} sDiskPath\n     * @param {boolean} [fAutoMount]\n     */\n    doneLoadDrive(drive, disk, sDiskName, sDiskPath, fAutoMount)\n    {\n        drive.fBusy = false;\n\n        if (disk) {\n            /*\n             * TODO: While this is a perfectly reasonable thing to do, one wonders if the Disk object shouldn't\n             * have done this itself, since we passed our Drive object to it (it already knows the drive's limits).\n             */\n            if (disk.nCylinders > drive.nCylinders || disk.nHeads > drive.nHeads /* || disk.nSectors > drive.nSectors */) {\n                this.notice(\"Disk \\\"\" + sDiskName + \"\\\" too large for drive \" + this.getDriveName(drive.iDrive));\n                disk = null;\n            }\n        }\n\n        if (disk) {\n            drive.disk = disk;\n            drive.sDiskName = sDiskName;\n            drive.sDiskPath = sDiskPath;\n\n            /*\n             * Inform the controller implementation (eg, RX11) of the disk change.\n             */\n            this.notifyLoad(drive.iDrive);\n\n            /*\n             * Adding local disk image names to the disk list seems like a nice idea, but it's too confusing,\n             * because then it looks like the \"Mount\" button should be able to (re)load them, and that can NEVER\n             * happen, for security reasons; local disk images can ONLY be loaded via the \"Mount\" button after\n             * the user has selected them via the \"Choose File\" button.\n             *\n             *      this.addDisk(sDiskName, sDiskPath);\n             *\n             * So we're going to take a different approach: when displayDisk() is asked to display the name\n             * of a local disk image, it will map all such disks to \"Local Disk\", and any attempt to \"Mount\" such\n             * a disk, will essentially result in a \"Disk not found\" error.\n             */\n            this.addDiskHistory(sDiskName, sDiskPath, disk);\n\n            /*\n             * With the addition of notify(), users are now \"alerted\" whenever a disk has finished loading;\n             * notify() is selective about its output, using print() if a print window is open, alert() otherwise.\n             */\n            this.notice(\"Loaded disk \\\"\" + sDiskName + \"\\\" in drive \" + this.getDriveName(drive.iDrive), drive.fAutoMount || fAutoMount);\n\n            /*\n             * Since you usually want the Computer to have focus again after loading a new disk, let's try automatically\n             * updating the focus after a successful load.\n             */\n            if (this.cmp) this.cmp.setFocus();\n        }\n        else {\n            drive.fLocal = false;\n        }\n\n        if (drive.fAutoMount) {\n            drive.fAutoMount = false;\n            if (!--this.cAutoMount) this.setReady();\n        }\n\n        this.displayDisk(drive.iDrive);\n\n        if (drive.fnCallReady) {\n            drive.fnCallReady();\n            drive.fnCallReady = null;\n        }\n    }\n\n    /**\n     * addDisk(sName, sPath, fTop)\n     *\n     * @this {DriveController}\n     * @param {string} sName\n     * @param {string} sPath\n     * @param {boolean} [fTop] (default is bottom)\n     */\n    addDisk(sName, sPath, fTop)\n    {\n        var controlDisks = this.bindings[\"listDisks\"];\n        if (controlDisks && controlDisks.options) {\n            for (var i = 0; i < controlDisks.options.length; i++) {\n                if (controlDisks.options[i].value == sPath) return;\n            }\n            var controlOption = document.createElement(\"option\");\n            controlOption.text = sName;\n            controlOption.value = sPath;\n            if (fTop && controlDisks.childNodes[0]) {\n                controlDisks.insertBefore(controlOption, controlDisks.childNodes[0]);\n            } else {\n                controlDisks.appendChild(controlOption);\n            }\n        }\n    }\n\n    /**\n     * findDisk(sPath)\n     *\n     * This is used to deal with mount requests (eg, autoMount) that supply a path without a name;\n     * if we can find the path in the \"listDisks\" control, then we return the associated disk name.\n     *\n     * @this {DriveController}\n     * @param {string} sPath\n     * @return {string|null}\n     */\n    findDisk(sPath)\n    {\n        var controlDisks = this.bindings[\"listDisks\"];\n        if (controlDisks && controlDisks.options) {\n            for (var i = 0; i < controlDisks.options.length; i++) {\n                var control = controlDisks.options[i];\n                if (control.value == sPath) return control.text;\n            }\n        }\n        return Str.getBaseName(sPath, true);\n    }\n\n    /**\n     * displayDisk(iDrive, fUpdateDrive)\n     *\n     * This ensures that the selected disk matches the drive's sDiskPath property, and if fUpdateDrive is set,\n     * it also ensures that the selected drive matches the specified drive number.\n     *\n     * @this {DriveController}\n     * @param {number} iDrive (unvalidated)\n     * @param {boolean} [fUpdateDrive] is true to update the drive list to match the specified drive (eg, the auto-mount case)\n     * @return {boolean} true if successful, false if not\n     */\n    displayDisk(iDrive, fUpdateDrive)\n    {\n        /*\n         * First things first: validate iDrive.\n         */\n        var fSuccess = false;\n        if (iDrive >= 0 && iDrive < this.aDrives.length) {\n            var drive = this.aDrives[iDrive];\n            var controlDisks = this.bindings[\"listDisks\"];\n            var controlDrives = this.bindings[\"listDrives\"];\n            /*\n             * Next, make sure controls for both drives and disks exist.\n             */\n            if (controlDisks && controlDrives && controlDisks.options && controlDrives.options) {\n                /*\n                 * Next, update the drive if the caller has requested it.\n                 */\n                var i;\n                if (fUpdateDrive) {\n\n                    for (i = 0; i < controlDrives.options.length; i++) {\n                        if (Str.parseInt(controlDrives.options[i].value, 10) == drive.iDrive) {\n                            if (controlDrives.selectedIndex != i) {\n                                controlDrives.selectedIndex = i;\n                            }\n                            fSuccess = true;\n                            break;\n                        }\n                    }\n                }\n                /*\n                 * Next, make sure the drive whose disk we're updating is the currently selected drive.\n                 */\n                var iDriveSelected = Str.parseInt(controlDrives.value, 10);\n                var sTargetPath = (drive.fLocal? DriveController.SOURCE.LOCAL : drive.sDiskPath);\n                if (!isNaN(iDriveSelected) && iDriveSelected == iDrive) {\n                    for (i = 0; i < controlDisks.options.length; i++) {\n                        if (controlDisks.options[i].value == sTargetPath) {\n                            if (controlDisks.selectedIndex != i) {\n                                controlDisks.selectedIndex = i;\n                            }\n                            fSuccess = true;\n                            break;\n                        }\n                    }\n                    if (i == controlDisks.options.length) controlDisks.selectedIndex = 0;\n                }\n            }\n        }\n        return fSuccess;\n    }\n\n    /**\n     * selectDrive(sDrive)\n     *\n     * Used to select a drive by name.\n     *\n     * @this {DriveController}\n     * @param {number} sDrive\n     * @return {boolean} true if successful, false if not\n     */\n    selectDrive(sDrive)\n    {\n        var controlDrives = this.bindings[\"listDrives\"];\n        if (controlDrives && controlDrives.options) {\n            var nDrives = controlDrives.options.length;\n            for (var i = 0; i < nDrives; i++) {\n                if (controlDrives.options[i].textContent == sDrive) {\n                    var iDrive = Str.parseInt(controlDrives.options[i].value, 10);\n                    if (iDrive >= 0) {\n                        return this.displayDisk(iDrive, true);\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * updateSelectedDisk()\n     *\n     * @this {DriveController}\n     */\n    updateSelectedDisk()\n    {\n        var control = this.bindings[\"listDisks\"];\n        var controlDesc = this.bindings[\"descDisk\"];\n        var controlOption = control.options && control.options[control.selectedIndex];\n        if (controlDesc && controlOption) {\n            var dataValue = {};\n            var sValue = controlOption.getAttribute(\"data-value\");\n            if (sValue) {\n                try {\n                    dataValue = eval(\"(\" + sValue + \")\");\n                } catch (e) {\n                    Component.error(this.type + \" option error: \" + e.message);\n                }\n            }\n            var sHTML = dataValue['desc'];\n            if (sHTML === undefined) sHTML = \"\";\n            var sHRef = dataValue['href'];\n            if (sHRef !== undefined) sHTML = \"<a href=\\\"\" + sHRef + \"\\\" target=\\\"_blank\\\">\" + sHTML + \"</a>\";\n            controlDesc.innerHTML = sHTML;\n        }\n    }\n\n    /**\n     * waitDrives(fnCallReady)\n     *\n     * @this {DriveController}\n     * @param {function()|null} fnCallReady\n     * @return {boolean} false if wait required, true otherwise\n     */\n    waitDrives(fnCallReady)\n    {\n        for (var iDrive = 0; iDrive < this.aDrives.length; iDrive++) {\n            var drive = this.aDrives[iDrive];\n            if (drive && drive.fBusy) {\n                if (!drive.fnCallReady) drive.fnCallReady = fnCallReady;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * unloadDrive(iDrive, fLoading)\n     *\n     * @this {DriveController}\n     * @param {number} iDrive\n     * @param {boolean} [fLoading]\n     */\n    unloadDrive(iDrive, fLoading)\n    {\n        var drive = this.aDrives[iDrive];\n\n        if (drive.disk || fLoading === false) {\n\n            /*\n             * Before we toss the disk's information, capture any deltas that may have occurred.\n             */\n            this.updateDiskHistory(drive.sDiskName, drive.sDiskPath, drive.disk);\n\n            drive.sDiskName = \"\";\n            drive.sDiskPath = \"\";\n            drive.disk = null;\n            drive.fLocal = false;\n\n            if (!fLoading) {\n                this.notice(\"Drive \" + this.getDriveName(iDrive) + \" unloaded\", fLoading);\n                this.sDiskSource = DriveController.SOURCE.NONE;\n                this.displayDisk(iDrive);\n            }\n\n            /*\n             * Inform the controller implementation (eg, RX11) of the disk removal.\n             */\n            this.notifyUnload(iDrive);\n        }\n    }\n\n    /**\n     * unloadAllDrives(fDiscard)\n     *\n     * @this {DriveController}\n     * @param {boolean} fDiscard to discard all disk history before unloading\n     */\n    unloadAllDrives(fDiscard)\n    {\n        if (fDiscard) this.aDiskHistory = [];\n\n        for (var iDrive = 0; iDrive < this.aDrives.length; iDrive++) {\n            this.unloadDrive(iDrive, true);\n        }\n    }\n\n    /**\n     * addDiskHistory(sDiskName, sDiskPath, disk)\n     *\n     * @this {DriveController}\n     * @param {string} sDiskName\n     * @param {string} sDiskPath\n     * @param {DiskPDP11} disk containing corresponding disk image\n     */\n    addDiskHistory(sDiskName, sDiskPath, disk)\n    {\n        var i;\n\n        for (i = 0; i < this.aDiskHistory.length; i++) {\n            if (this.aDiskHistory[i][1] == sDiskPath) {\n                var nChanges = disk.restore(this.aDiskHistory[i][2]);\n                if (DEBUG && this.messageEnabled()) {\n                    this.printMessage(\"disk '\" + sDiskName + \"' restored from history (\" + nChanges + \" changes)\");\n                }\n                return;\n            }\n        }\n        if (DEBUG && this.messageEnabled()) {\n            this.printMessage(\"disk '\" + sDiskName + \"' added to history (nothing to restore)\");\n        }\n        this.aDiskHistory[i] = [sDiskName, sDiskPath, []];\n    }\n\n    /**\n     * removeDiskHistory(sDiskName, sDiskPath)\n     *\n     * @this {DriveController}\n     * @param {string} sDiskName\n     * @param {string} sDiskPath\n     */\n    removeDiskHistory(sDiskName, sDiskPath)\n    {\n        var i;\n        for (i = 0; i < this.aDiskHistory.length; i++) {\n            if (this.aDiskHistory[i][1] == sDiskPath) {\n                this.aDiskHistory.splice(i, 1);\n                if (DEBUG && this.messageEnabled()) {\n                    this.printMessage(\"disk '\" + sDiskName + \"' removed from history\");\n                }\n                return;\n            }\n        }\n        if (DEBUG && this.messageEnabled()) {\n            this.printMessage(\"unable to remove disk '\" + sDiskName + \"' from history (\" + sDiskPath + \")\");\n        }\n    }\n\n    /**\n     * updateDiskHistory(sDiskName, sDiskPath, disk)\n     *\n     * @this {DriveController}\n     * @param {string} sDiskName\n     * @param {string} sDiskPath\n     * @param {DiskPDP11} disk containing corresponding disk image, with possible deltas\n     */\n    updateDiskHistory(sDiskName, sDiskPath, disk)\n    {\n        var i;\n        for (i = 0; i < this.aDiskHistory.length; i++) {\n            if (this.aDiskHistory[i][1] == sDiskPath) {\n                this.aDiskHistory[i][2] = disk.save();\n                if (DEBUG && this.messageEnabled()) {\n                    this.printMessage(\"disk '\" + sDiskName + \"' updated in history\");\n                }\n                return;\n            }\n        }\n        /*\n         * I used to report this as an error (at least in the DEBUG release), but it's no longer really\n         * an error, because if we're trying to re-mount a clean copy of a disk, we toss its history, then\n         * unload, and then reload/remount.  And since unloadDrive's normal behavior is to call updateDiskHistory()\n         * before unloading, the fact that the disk is no longer listed here can't be treated as an error.\n         */\n        if (DEBUG && this.messageEnabled()) {\n            this.printMessage(\"unable to update disk '\" + sDiskName + \"' in history (\" + sDiskPath + \")\");\n        }\n    }\n\n    /**\n     * notifyLoad(iDrive)\n     *\n     * Placeholder for subclasses.  Called whenever DriveController has loaded a new disk into the specified drive.\n     *\n     * @this {RX11}\n     * @param {number} iDrive\n     */\n    notifyLoad(iDrive)\n    {\n    }\n\n    /**\n     * notifyUnload(iDrive)\n     *\n     * Placeholder for subclasses.  Called whenever DriveController has unloaded a disk from the specified drive.\n     *\n     * @this {RX11}\n     * @param {number} iDrive\n     */\n    notifyUnload(iDrive)\n    {\n    }\n\n    /**\n     * readData(drive, iCylinder, iHead, iSector, nWords, addr, inc, fCheck, done)\n     *\n     * Placeholder for subclasses.  Implementation is optional, but the automatic BOOT feature will be unavailable.\n     *\n     * @this {DriveController}\n     * @param {Object} drive\n     * @param {number} iCylinder\n     * @param {number} iHead\n     * @param {number} iSector\n     * @param {number} nWords\n     * @param {number} addr\n     * @param {number} inc (normally 2, unless inhibited, in which case it's 0)\n     * @param {boolean} [fCheck]\n     * @param {function(...)} [done]\n     * @return {boolean|number} true if complete, false if queued (or if no done() is supplied, the error code, if any)\n     */\n    readData(drive, iCylinder, iHead, iSector, nWords, addr, inc, fCheck, done)\n    {\n        return -1;\n    }\n\n    /**\n     * writeData(drive, iCylinder, iHead, iSector, nWords, addr, inc, fCheck, done)\n     *\n     * Placeholder for subclasses.  Implementation is optional.\n     *\n     * @this {DriveController}\n     * @param {Object} drive\n     * @param {number} iCylinder\n     * @param {number} iHead\n     * @param {number} iSector\n     * @param {number} nWords\n     * @param {number} addr\n     * @param {number} inc (normally 2, unless inhibited, in which case it's 0)\n     * @param {boolean} [fCheck]\n     * @param {function(...)} [done]\n     * @return {boolean|number} true if complete, false if queued (or if no done() is supplied, the error code, if any)\n     */\n    writeData(drive, iCylinder, iHead, iSector, nWords, addr, inc, fCheck, done)\n    {\n        return -1;\n    }\n}\n\n/*\n * There's nothing super special about these values, except that NONE should be falsey and the others should not.\n */\nDriveController.SOURCE = {\n    NONE:   \"\",\n    LOCAL:  \"?\",\n    REMOTE: \"??\"\n};\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/rk11.js (C) Jeff Parsons 2012-2018\n */\n\n\nclass RK11 extends DriveController {\n    /**\n     * RK11(parms)\n     *\n     * The RK11 component has the following component-specific (parms) properties:\n     *\n     *      autoMount: one or more JSON-encoded objects, each containing 'name' and 'path' properties\n     *\n     * The RK11 Disk Controller controls up to eight RK05 disk drives, which in turn read/write RK03-KA\n     * disk cartridges.  See [RK11 Disk Controller Configuration Files](/devices/pdp11/rk11/).\n     *\n     * RK03 (or more precisely, RK03-KA) disks are single-platter cartridges with 203 tracks per side,\n     * 12 sectors per track, and a sector size of 256 words (512 bytes), for a total capacity of 2.38Mb\n     * (2,494,464 bytes).  See [RK03-KA Disk Images](/disks/dec/rk03/).\n     *\n     * @param {Object} parms\n     */\n    constructor(parms)\n    {\n        super(\"RK11\", parms, MessagesPDP11.RK11, PDP11.RK11, PDP11.RK11.RK05, RK11.UNIBUS_IOTABLE);\n\n        /*\n         * Define all the registers required for this controller.\n         *\n         * TODO: Determine what we should really be doing with the RKDB register.\n         */\n        this.regRKDS = this.regRKER = this.regRKCS = this.regRKWC = this.regRKBA = this.regRKDA = this.regRKDB = 0;\n    }\n\n    /**\n     * initController(aRegs)\n     *\n     * @this {RK11}\n     * @param {Array} [aRegs]\n     * @return {boolean} true if successful, false if failure\n     */\n    initController(aRegs)\n    {\n        if (!aRegs) {\n            aRegs = [(RK11.RKDS.RK05 | RK11.RKDS.SOK | RK11.RKDS.RRDY), 0, (RK11.RKCS.CRDY), 0, 0, 0, 0];\n        }\n\n        /*\n         * ES6 ALERT: A handy destructuring assignment, which makes it easy to perform the inverse\n         * of what saveController() does when it collects a bunch of object properties into an array.\n         */\n        [\n            this.regRKDS,\n            this.regRKER,\n            this.regRKCS,\n            this.regRKWC,\n            this.regRKBA,\n            this.regRKDA,\n            this.regRKDB\n        ] = aRegs;\n\n        return true;\n    }\n\n    /**\n     * saveController()\n     *\n     * Basically, the inverse of initController().\n     *\n     * @this {RK11}\n     * @return {Array}\n     */\n    saveController()\n    {\n        return [\n            this.regRKDS,\n            this.regRKER,\n            this.regRKCS,\n            this.regRKWC,\n            this.regRKBA,\n            this.regRKDA,\n            this.regRKDB\n        ];\n    }\n\n    /**\n     * processCommand()\n     *\n     * @this {RK11}\n     */\n    processCommand()\n    {\n        var fInterrupt = true;\n        var fnReadWrite, func, sFunc = \"\";\n        var iDrive = (this.regRKDA & RK11.RKDA.DS) >> RK11.RKDA.SHIFT.DS;\n        var drive = this.aDrives[iDrive];\n        var iCylinder, iHead, iSector, nWords, addr, inc;\n\n        this.regRKCS &= ~(RK11.RKCS.CRDY | RK11.RKCS.SCP);\n        this.regRKER &= ~(RK11.RKER.SE);\n\n        switch(func = this.regRKCS & RK11.RKCS.FUNC) {\n\n        case RK11.FUNC.CRESET:\n            if (this.messageEnabled()) this.printMessage(this.type + \": CRESET(\" + iDrive + \")\", true);\n            this.regRKER = this.regRKDA = 0;\n            this.regRKCS = RK11.RKCS.CRDY;\n            break;\n\n        case RK11.FUNC.RCHK:\n            sFunc = \"RCHK\";\n            /* falls through */\n\n        case RK11.FUNC.READ:\n            if (!sFunc) sFunc = \"READ\";\n            fnReadWrite = this.readData;\n            /* falls through */\n\n        case RK11.FUNC.WCHK:\n            if (!sFunc) sFunc = \"WCHK\";\n            /* falls through */\n\n        case RK11.FUNC.WRITE:\n            if (!sFunc) sFunc = \"WRITE\";\n            if (!fnReadWrite) fnReadWrite = this.writeData;\n\n            iCylinder = (this.regRKDA & RK11.RKDA.CA) >> RK11.RKDA.SHIFT.CA;\n            iHead = (this.regRKDA & RK11.RKDA.HS) >> RK11.RKDA.SHIFT.HS;\n            iSector = this.regRKDA & RK11.RKDA.SA;\n            nWords = (0x10000 - this.regRKWC) & 0xffff;\n            addr = (((this.regRKCS & RK11.RKCS.MEX)) << (16 - RK11.RKCS.SHIFT.MEX)) | this.regRKBA;\n            inc = (this.regRKCS & RK11.RKCS.IBA)? 0 : 2;\n\n            if (this.messageEnabled()) this.printMessage(this.type + \": \" + sFunc + \"(\" + iCylinder + \":\" + iHead + \":\" + iSector + \") \" + Str.toOct(addr) + \"--\" + Str.toOct(addr + (nWords << 1)), true, true);\n\n            if (iCylinder >= drive.nCylinders) {\n                this.regRKER |= RK11.RKER.NXC;\n                break;\n            }\n            if (iSector >= drive.nSectors) {\n                this.regRKER |= RK11.RKER.NXS;\n                break;\n            }\n\n            fInterrupt = fnReadWrite.call(this, drive, iCylinder, iHead, iSector, nWords, addr, inc, (func >= RK11.FUNC.WCHK), this.doneReadWrite.bind(this));\n            break;\n\n        case RK11.FUNC.SEEK:\n            iCylinder = (this.regRKDA & RK11.RKDA.CA) >> RK11.RKDA.SHIFT.CA;\n            if (this.messageEnabled()) this.printMessage(this.type + \": SEEK(\" + iCylinder + \")\", true);\n            if (iCylinder < drive.nCylinders) {\n                this.regRKCS |= RK11.RKCS.SCP;\n            } else {\n                this.regRKER |= RK11.RKER.NXC;\n            }\n            break;\n\n        case RK11.FUNC.DRESET:\n            if (this.messageEnabled()) this.printMessage(this.type + \": DRESET(\" + iDrive + \")\");\n            this.regRKER = this.regRKDA = 0;\n            this.regRKCS = RK11.RKCS.CRDY | RK11.RKCS.SCP;\n            break;\n\n        default:\n            if (this.messageEnabled()) this.printMessage(this.type + \": UNSUPPORTED(\" + func + \")\");\n            break;\n        }\n\n        this.regRKDS = drive.status | (drive.disk? RK11.RKDS.DRDY : 0) | (iDrive << RK11.RKDS.SHIFT.ID) | (this.regRKDA & RK11.RKDS.SC);\n\n        this.updateErrors();\n\n        if (fInterrupt) {\n            this.regRKCS &= ~RK11.RKCS.GO;\n            this.regRKCS |= RK11.RKCS.CRDY;\n            if (this.regRKCS & RK11.RKCS.IE) this.cpu.setIRQ(this.irq);\n        }\n    }\n\n    /**\n     * readData(drive, iCylinder, iHead, iSector, nWords, addr, inc, fCheck, done)\n     *\n     * @this {RK11}\n     * @param {Object} drive\n     * @param {number} iCylinder\n     * @param {number} iHead\n     * @param {number} iSector\n     * @param {number} nWords\n     * @param {number} addr\n     * @param {number} inc (normally 2, unless inhibited, in which case it's 0)\n     * @param {boolean} [fCheck]\n     * @param {function(...)} [done]\n     * @return {boolean|number} true if complete, false if queued (or if no done() is supplied, the error code, if any)\n     */\n    readData(drive, iCylinder, iHead, iSector, nWords, addr, inc, fCheck, done)\n    {\n        var nError = 0;\n        var disk = drive.disk;\n        var sector = null, ibSector;\n\n        if (!disk) {\n            nError = RK11.RKER.NXD;\n            nWords = 0;\n        }\n\n        var sWords = \"\";\n        while (nWords) {\n            if (!sector) {\n                if (iCylinder >= disk.nCylinders) {\n                    nError = RK11.RKER.NXC;\n                    break;\n                }\n                sector = disk.seek(iCylinder, iHead, iSector + 1);\n                if (!sector) {\n                    nError = RK11.RKER.SKE;\n                    break;\n                }\n                ibSector = 0;\n                if (++iSector >= disk.nSectors) {\n                    iSector = 0;\n                    if (++iHead >= disk.nHeads) {\n                        iHead = 0;\n                        ++iCylinder;\n                    }\n                }\n            }\n            var b0, b1;\n            if ((b0 = disk.read(sector, ibSector++)) < 0 || (b1 = disk.read(sector, ibSector++)) < 0) {\n                nError = RK11.RKER.NXS;\n                break;\n            }\n            if (!fCheck) {\n                var data = b0 | (b1 << 8);\n                this.bus.setWordDirect(this.cpu.mapUnibus(addr), data);\n                if (DEBUG && this.messageEnabled(MessagesPDP11.READ)) {\n                    if (!sWords) sWords = Str.toOct(addr) + \": \";\n                    sWords += Str.toOct(data) + ' ';\n                    if (sWords.length >= 64) {\n                        console.log(sWords);\n                        sWords = \"\";\n                    }\n                }\n                if (this.bus.checkFault()) {\n                    nError = RK11.RKER.NXM;\n                    break;\n                }\n            }\n            if (ibSector >= disk.cbSector) sector = null;\n            addr += inc;\n            nWords--;\n        }\n        return done? done(nError, iCylinder, iHead, iSector, nWords, addr) : nError;\n    }\n\n    /**\n     * writeData(drive, iCylinder, iHead, iSector, nWords, addr, inc, fCheck, done)\n     *\n     * @this {RK11}\n     * @param {Object} drive\n     * @param {number} iCylinder\n     * @param {number} iHead\n     * @param {number} iSector\n     * @param {number} nWords\n     * @param {number} addr\n     * @param {number} inc (normally 2, unless inhibited, in which case it's 0)\n     * @param {boolean} [fCheck]\n     * @param {function(...)} [done]\n     * @return {boolean|number} true if complete, false if queued (or if no done() is supplied, the error code, if any)\n     */\n    writeData(drive, iCylinder, iHead, iSector, nWords, addr, inc, fCheck, done)\n    {\n        var nError = 0;\n        var disk = drive.disk;\n        var sector = null, ibSector;\n\n        if (!disk) {\n            nError = RK11.RKER.NXD;\n            nWords = 0;\n        }\n\n        while (nWords) {\n            var data = this.bus.getWordDirect(this.cpu.mapUnibus(addr));\n            if (this.bus.checkFault()) {\n                nError = RK11.RKER.NXM;\n                break;\n            }\n            if (!sector) {\n                if (iCylinder >= disk.nCylinders) {\n                    nError = RK11.RKER.NXC;\n                    break;\n                }\n                sector = disk.seek(iCylinder, iHead, iSector + 1, true);\n                if (!sector) {\n                    nError = RK11.RKER.SKE;\n                    break;\n                }\n                ibSector = 0;\n                if (++iSector >= disk.nSectors) {\n                    iSector = 0;\n                    if (++iHead >= disk.nHeads) {\n                        iHead = 0;\n                        ++iCylinder;\n                    }\n                }\n            }\n            if (fCheck) {\n                var b0, b1;\n                if ((b0 = disk.read(sector, ibSector++)) < 0 || (b1 = disk.read(sector, ibSector++)) < 0) {\n                    nError = RK11.RKER.NXS;\n                    break;\n                }\n                /*\n                 * NOTE: During the 11/70 CPU EXERCISER diagnostic, a number of WCHK requests will fail\n                 * when the test starts reading/writing with physical addresses > 177777.  I'm pretty sure all\n                 * the UNIBUS address calculations are fine, and therefore those failures are expected.\n                 *\n                 * Originally, those failures were causing me some grief because I was treating a WCE error like\n                 * any other error; ie, as a HARD error.  That was wrong.  Two errors (WCE and CSE) are soft\n                 * errors, so while they should still trigger the general-purpose RKCS ERR bit, they should NOT\n                 * trigger the RKCS HE (Hard Error) bit.  This is all taken care of in updateErrors() now.\n                 */\n                if (data != (b0 | (b1 << 8))) {\n                    nError = RK11.RKER.WCE;\n                    break;\n                }\n            } else {\n                if (!disk.write(sector, ibSector++, data & 0xff) || !disk.write(sector, ibSector++, data >> 8)) {\n                    nError = RK11.RKER.NXS;\n                    break;\n                }\n            }\n            if (ibSector >= disk.cbSector) sector = null;\n            addr += inc;\n            nWords--;\n        }\n        return done? done(nError, iCylinder, iHead, iSector, nWords, addr) : nError;\n    }\n\n    /**\n     * doneReadWrite(nError, iCylinder, iHead, iSector, nWords, addr)\n     *\n     * @this {RK11}\n     * @param {number} nError\n     * @param {number} iCylinder\n     * @param {number} iHead\n     * @param {number} iSector\n     * @param {number} nWords\n     * @param {number} addr\n     * @return {boolean}\n     */\n    doneReadWrite(nError, iCylinder, iHead, iSector, nWords, addr)\n    {\n        this.regRKBA = addr & 0xffff;\n        this.regRKCS = (this.regRKCS & ~RK11.RKCS.MEX) | ((addr >> (16 - RK11.RKCS.SHIFT.MEX)) & RK11.RKCS.MEX);\n        this.regRKWC = (0x10000 - nWords) & 0xffff;\n        this.regRKDA = (this.regRKDA & ~RK11.RKDA.SA) | (iSector & RK11.RKDA.SA);\n        this.regRKER |= nError;\n        this.updateErrors();\n        return true;\n    }\n\n    /**\n     * updateErrors()\n     *\n     * @this {RK11}\n     */\n    updateErrors()\n    {\n        /*\n         * Reflect RKER bits to RKCS bits as appropriate.\n         *\n         * TODO: I'm not entirely sure about the handling of the DRE bit here.  DEC's RK11 documentation says:\n         *\n         *      Sets if one of the drives in the system senses a loss of either AC or DC power and a function is\n         *      either initiated or in process while the selected drive is not ready or in some error condition.\n         *\n         * I'm not sure how to parse all the \"ands\" and \"ors\" in that sentence.  For now, we're treating the DRE bit\n         * much like the high error bit found in other hardware registers: we always set it if any lower error bits\n         * are also set.\n         */\n        this.regRKCS &= ~RK11.RKCS.ERR;\n        if (this.regRKER) {\n            this.regRKER |= RK11.RKER.DRE;\n            this.regRKCS |= RK11.RKCS.ERR;\n            if (this.regRKER & RK11.RKER.HE) this.regRKCS |= RK11.RKCS.HE;\n            if (this.messageEnabled()) this.printMessage(this.type + \": ERROR: \" + Str.toOct(this.regRKER));\n        }\n    }\n\n    /**\n     * readRKDS(addr)\n     *\n     * @this {RK11}\n     * @param {number} addr (eg, PDP11.UNIBUS.RKDS or 177400)\n     * @return {number}\n     */\n    readRKDS(addr)\n    {\n        return this.regRKDS;\n    }\n\n    /**\n     * writeRKDS(data, addr)\n     *\n     * @this {RK11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.RKDS or 177400)\n     */\n    writeRKDS(data, addr)\n    {\n        /*\n         * This is a read-only register\n         */\n    }\n\n    /**\n     * readRKER(addr)\n     *\n     * @this {RK11}\n     * @param {number} addr (eg, PDP11.UNIBUS.RKER or 177402)\n     * @return {number}\n     */\n    readRKER(addr)\n    {\n        return this.regRKER;\n    }\n\n    /**\n     * writeRKER(data, addr)\n     *\n     * @this {RK11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.RKER or 177402)\n     */\n    writeRKER(data, addr)\n    {\n        /*\n         * This is a read-only register\n         */\n    }\n\n    /**\n     * readRKCS(addr)\n     *\n     * @this {RK11}\n     * @param {number} addr (eg, PDP11.UNIBUS.RKCS or 177404)\n     * @return {number}\n     */\n    readRKCS(addr)\n    {\n        return this.regRKCS & RK11.RKCS.RMASK;\n    }\n\n    /**\n     * writeRKCS(data, addr)\n     *\n     * @this {RK11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.RKCS or 177404)\n     */\n    writeRKCS(data, addr)\n    {\n        this.regRKCS = (this.regRKCS & ~RK11.RKCS.WMASK) | (data & RK11.RKCS.WMASK);\n\n        if (this.regRKCS & RK11.RKCS.GO) this.processCommand();\n    }\n\n    /**\n     * readRKWC(addr)\n     *\n     * @this {RK11}\n     * @param {number} addr (eg, PDP11.UNIBUS.RKWC or 177406)\n     * @return {number}\n     */\n    readRKWC(addr)\n    {\n        return this.regRKWC;\n    }\n\n    /**\n     * writeRKWC(data, addr)\n     *\n     * @this {RK11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.RKWC or 177406)\n     */\n    writeRKWC(data, addr)\n    {\n        this.regRKWC = data;\n    }\n\n    /**\n     * readRKBA(addr)\n     *\n     * @this {RK11}\n     * @param {number} addr (eg, PDP11.UNIBUS.RKBA or 177410)\n     * @return {number}\n     */\n    readRKBA(addr)\n    {\n        return this.regRKBA;\n    }\n\n    /**\n     * writeRKBA(data, addr)\n     *\n     * @this {RK11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.RKBA or 177410)\n     */\n    writeRKBA(data, addr)\n    {\n        this.regRKBA = data;\n    }\n\n    /**\n     * readRKDA(addr)\n     *\n     * @this {RK11}\n     * @param {number} addr (eg, PDP11.UNIBUS.RKDA or 177412)\n     * @return {number}\n     */\n    readRKDA(addr)\n    {\n        return this.regRKDA;\n    }\n\n    /**\n     * writeRKDA(data, addr)\n     *\n     * @this {RK11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.RKDA or 177412)\n     */\n    writeRKDA(data, addr)\n    {\n        this.regRKDA = data;\n    }\n\n    /**\n     * readRKDB(addr)\n     *\n     * @this {RK11}\n     * @param {number} addr (eg, PDP11.UNIBUS.RKDB or 177416)\n     * @return {number}\n     */\n    readRKDB(addr)\n    {\n        return this.regRKDB;\n    }\n\n    /**\n     * writeRKDB(data, addr)\n     *\n     * @this {RK11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.RKDB or 177416)\n     */\n    writeRKDB(data, addr)\n    {\n        this.regRKDB = data;\n    }\n}\n\n/*\n * Alias RK11 definitions as class constants\n */\nRK11.RKDS   =   PDP11.RK11.RKDS;        // 177400: Drive Status Register\nRK11.RKER   =   PDP11.RK11.RKER;        // 177402: Error Register\nRK11.RKCS   =   PDP11.RK11.RKCS;        // 177404: Control Status Register\nRK11.RKDA   =   PDP11.RK11.RKDA;        // 177412: Disk Address Register\nRK11.FUNC   =   PDP11.RK11.FUNC;\n\n/*\n * ES6 ALERT: As you can see below, I've finally started using computed property names.\n */\nRK11.UNIBUS_IOTABLE = {\n    [PDP11.UNIBUS.RKDS]:     /* 177400 */    [null, null, RK11.prototype.readRKDS,  RK11.prototype.writeRKDS,   \"RKDS\"],\n    [PDP11.UNIBUS.RKER]:     /* 177402 */    [null, null, RK11.prototype.readRKER,  RK11.prototype.writeRKER,   \"RKER\"],\n    [PDP11.UNIBUS.RKCS]:     /* 177404 */    [null, null, RK11.prototype.readRKCS,  RK11.prototype.writeRKCS,   \"RKCS\"],\n    [PDP11.UNIBUS.RKWC]:     /* 177406 */    [null, null, RK11.prototype.readRKWC,  RK11.prototype.writeRKWC,   \"RKWC\"],\n    [PDP11.UNIBUS.RKBA]:     /* 177410 */    [null, null, RK11.prototype.readRKBA,  RK11.prototype.writeRKBA,   \"RKBA\"],\n    [PDP11.UNIBUS.RKDA]:     /* 177412 */    [null, null, RK11.prototype.readRKDA,  RK11.prototype.writeRKDA,   \"RKDA\"],\n    [PDP11.UNIBUS.RKDB]:     /* 177416 */    [null, null, RK11.prototype.readRKDB,  RK11.prototype.writeRKDB,   \"RKDB\"]\n};\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/rl11.js (C) Jeff Parsons 2012-2018\n */\n\n\nclass RL11 extends DriveController {\n    /**\n     * RL11(parms)\n     *\n     * The RL11 component has the following component-specific (parms) properties:\n     *\n     *      autoMount: one or more JSON-encoded objects, each containing 'name' and 'path' properties\n     *\n     * The RL11 Disk Controller controls up to four RL01 or RL02 disk drives, which in turn read/write RL01K or\n     * RL02K disk cartridges.  See [RL11 Disk Controller Configuration Files](/devices/pdp11/rl11/).\n     *\n     * RL01K disks are single-platter cartridges with 256 tracks per side, 40 sectors per track, and a sector size\n     * of 256 bytes, for a total capacity of 5Mb (5,242,880 bytes).  See [RL01K Disk Images](/disks/dec/rl01k/).\n     *\n     * RL02K disks are single-platter cartridges with 512 tracks per side, 40 sectors per track, and a sector size\n     * of 256 bytes, for a total capacity of 10Mb (10,485,760 bytes).  See [RL02K Disk Images](/disks/dec/rl02k/).\n     *\n     * @param {Object} parms\n     */\n    constructor(parms)\n    {\n        super(\"RL11\", parms, MessagesPDP11.RL11, PDP11.RL11, PDP11.RL11.RL02K, RL11.UNIBUS_IOTABLE);\n\n        /*\n         * Define all the registers required for this controller.\n         */\n        this.regRLCS = this.regRLBA = this.regRLDA = this.tmpRLDA = this.regRLMP = this.regRLBE = 0;\n    }\n\n    /**\n     * initController(aRegs)\n     *\n     * @this {RL11}\n     * @param {Array} [aRegs]\n     * @return {boolean} true if successful, false if failure\n     */\n    initController(aRegs)\n    {\n        if (!aRegs) {\n            aRegs = [(RL11.RLCS.DRDY | RL11.RLCS.CRDY), 0, 0, 0, 0, 0];\n        }\n\n        /*\n         * ES6 ALERT: A handy destructuring assignment, which makes it easy to perform the inverse\n         * of what saveController() does when it collects a bunch of object properties into an array.\n         */\n        [\n            this.regRLCS,\n            this.regRLBA,\n            this.regRLDA,\n            this.tmpRLDA,\n            this.regRLMP,\n            this.regRLBE\n        ] = aRegs;\n\n        return true;\n    }\n\n    /**\n     * saveController()\n     *\n     * Basically, the inverse of initController().\n     *\n     * @this {RL11}\n     * @return {Array}\n     */\n    saveController()\n    {\n        return [\n            this.regRLCS,\n            this.regRLBA,\n            this.regRLDA,\n            this.tmpRLDA,\n            this.regRLMP,\n            this.regRLBE\n        ];\n    }\n\n    /**\n     * processCommand()\n     *\n     * @this {RL11}\n     */\n    processCommand()\n    {\n        var fInterrupt = true;\n        var fnReadWrite, sFunc = \"\";\n        var iDrive = (this.regRLCS & RL11.RLCS.DS) >> RL11.RLCS.SHIFT.DS;\n        var drive = this.aDrives[iDrive];\n        var disk = drive.disk;\n        var iCylinder, iHead, iSector, nWords, addr;\n\n        /*\n         * The typical pattern of DRDY and CRDY:\n         *\n         *  1) Normally both set\n         *  2) CRDY is cleared to process a command\n         *  3) DRDY is cleared to indicate a command in process\n         */\n        this.regRLCS &= ~RL11.RLCS.DRDY;\n\n        switch(this.regRLCS & RL11.RLCS.FUNC) {\n\n        case RL11.FUNC.NOP:\n        case RL11.FUNC.WCHK:\n        case RL11.FUNC.RDNC:\n            break;\n\n        case RL11.FUNC.STATUS:\n            if (this.regRLMP & RL11.RLMP.GS_BH) {\n                this.regRLCS &= (RL11.RLCS.DRDY | RL11.RLCS.FUNC | RL11.RLCS.BAE);    // TODO: Review\n            }\n            /*\n             * The bit indicating whether or not the disk contains 256 or 512 cylinders is critical;\n             * for example, the first RSTS/E disk image we tried was an RL01K, which has only 256 cylinders,\n             * and the operating system would crash mysteriously if we didn't report the correct geometry.\n             */\n            this.regRLMP = drive.status | (this.tmpRLDA & RL11.RLDA.RW_HS) | (disk && disk.nCylinders == 512? RL11.RLMP.GS_DT : 0);\n            break;\n\n        case RL11.FUNC.SEEK:\n            if ((this.regRLDA & RL11.RLDA.GS_CMD) == RL11.RLDA.SEEK_CMD) {\n                var darCA = (this.regRLDA & RL11.RLDA.RW_CA);\n                var darHS = (this.regRLDA & RL11.RLDA.SEEK_HS) << 2;\n                if (this.regRLDA & RL11.RLDA.SEEK_DIR) {\n                    this.tmpRLDA += darCA;\n                } else {\n                    this.tmpRLDA -= darCA;\n                }\n                this.regRLDA = this.tmpRLDA = (this.tmpRLDA & RL11.RLDA.RW_CA) | darHS;\n            }\n            break;\n\n        case RL11.FUNC.RHDR:\n            this.regRLMP = this.tmpRLDA;\n            break;\n\n        case RL11.FUNC.RDATA:\n            sFunc = \"READ\";\n            fnReadWrite = this.readData;\n            /* falls through */\n\n        case RL11.FUNC.WDATA:\n            if (!sFunc) sFunc = \"WRITE\";\n            if (!fnReadWrite) fnReadWrite = this.writeData;\n\n            iCylinder = this.regRLDA >> RL11.RLDA.SHIFT.RW_CA;\n            iHead = (this.regRLDA & RL11.RLDA.RW_HS)? 1 : 0;\n            iSector = this.regRLDA & RL11.RLDA.RW_SA;\n            if (!disk || iCylinder >= disk.nCylinders || iSector >= disk.nSectors) {\n                this.regRLCS |= RL11.ERRC.HNF | RL11.RLCS.ERR;\n                break;\n            }\n            nWords = (0x10000 - this.regRLMP) & 0xffff;\n            addr = (((this.regRLBE & RL11.RLBE.MASK)) << 16) | this.regRLBA;   // 22 bit mode\n\n            if (this.messageEnabled()) this.printMessage(this.type + \": \" + sFunc + \"(\" + iCylinder + \":\" + iHead + \":\" + iSector + \") \" + Str.toOct(addr) + \"--\" + Str.toOct(addr + (nWords << 1)), true, true);\n\n            fInterrupt = fnReadWrite.call(this, drive, iCylinder, iHead, iSector, nWords, addr, 2, false, this.doneReadWrite.bind(this));\n            break;\n\n        default:\n            break;\n        }\n\n        if (fInterrupt) {\n            this.regRLCS |= RL11.RLCS.DRDY | RL11.RLCS.CRDY;\n            if (this.regRLCS & RL11.RLCS.IE) this.cpu.setIRQ(this.irq);\n        }\n    }\n\n    /**\n     * readData(drive, iCylinder, iHead, iSector, nWords, addr, inc, fCheck, done)\n     *\n     * @this {RL11}\n     * @param {Object} drive\n     * @param {number} iCylinder\n     * @param {number} iHead\n     * @param {number} iSector\n     * @param {number} nWords\n     * @param {number} addr\n     * @param {number} inc (normally 2, unless inhibited, in which case it's 0)\n     * @param {boolean} [fCheck]\n     * @param {function(...)} [done]\n     * @return {boolean|number} true if complete, false if queued (or if no done() is supplied, the error code, if any)\n     */\n    readData(drive, iCylinder, iHead, iSector, nWords, addr, inc, fCheck, done)\n    {\n        var nError = 0;\n        var checksum = 0;\n        var disk = drive.disk;\n        var sector = null, ibSector;\n\n        if (!disk) {\n            nError = RL11.ERRC.HNF;      // TODO: Review\n            nWords = 0;\n        }\n\n        var sWords = \"\";\n        while (nWords) {\n            if (!sector) {\n                sector = disk.seek(iCylinder, iHead, iSector + 1);\n                if (!sector) {\n                    nError = RL11.ERRC.HNF;\n                    break;\n                }\n                ibSector = 0;\n            }\n            var b0, b1, data;\n            if ((b0 = disk.read(sector, ibSector++)) < 0 || (b1 = disk.read(sector, ibSector++)) < 0) {\n                nError = RL11.ERRC.HNF;\n                break;\n            }\n            /*\n             * Apparently, this controller honors the UNIBUS Map registers, which means we must call mapUnibus()\n             * on the address REGARDLESS whether it is actually >= BusPDP11.UNIBUS_22BIT.  TODO: This is inherited\n             * code, so let's review the documentation on this.\n             */\n            this.bus.setWordDirect(this.cpu.mapUnibus(addr), data = b0 | (b1 << 8));\n            if (DEBUG && this.messageEnabled(MessagesPDP11.READ)) {\n                if (!sWords) sWords = Str.toOct(addr) + \": \";\n                sWords += Str.toOct(data) + ' ';\n                if (sWords.length >= 64) {\n                    console.log(sWords);\n                    sWords = \"\";\n                }\n            }\n            if (this.bus.checkFault()) {\n                nError = RL11.ERRC.NXM;\n                break;\n            }\n            addr += 2;\n            nWords--;\n            checksum += data;\n            if (ibSector >= disk.cbSector) {\n                sector = null;\n                if (++iSector >= disk.nSectors) {\n                    iSector = 0;\n                    if (++iHead >= disk.nHeads) {\n                        iHead = 0;\n                        if (++iCylinder >= disk.nCylinders) {\n                            nError = RL11.ERRC.HNF;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (DEBUG && this.messageEnabled(MessagesPDP11.READ)) {\n            console.log(\"checksum: \" + (checksum|0));\n        }\n\n        return done? done(nError, iCylinder, iHead, iSector, nWords, addr) : nError;\n    }\n\n    /**\n     * writeData(drive, iCylinder, iHead, iSector, nWords, addr, inc, fCheck, done)\n     *\n     * @this {RL11}\n     * @param {Object} drive\n     * @param {number} iCylinder\n     * @param {number} iHead\n     * @param {number} iSector\n     * @param {number} nWords\n     * @param {number} addr\n     * @param {number} inc (normally 2, unless inhibited, in which case it's 0)\n     * @param {boolean} [fCheck]\n     * @param {function(...)} [done]\n     * @return {boolean|number} true if complete, false if queued (or if no done() is supplied, the error code, if any)\n     */\n    writeData(drive, iCylinder, iHead, iSector, nWords, addr, inc, fCheck, done)\n    {\n        var nError = 0;\n        var checksum = 0;\n        var disk = drive.disk;\n        var sector = null, ibSector;\n\n        if (!disk) {\n            nError = RL11.ERRC.HNF;      // TODO: Review\n            nWords = 0;\n        }\n\n        var sWords = \"\";\n        while (nWords) {\n            /*\n             * Apparently, this controller honors the UNIBUS Map registers, which means we must call mapUnibus()\n             * on the address REGARDLESS whether it is actually >= BusPDP11.UNIBUS_22BIT.  TODO: This is inherited\n             * code, so let's review the documentation on this.\n             */\n            var data = this.bus.getWordDirect(this.cpu.mapUnibus(addr));\n            if (this.bus.checkFault()) {\n                nError = RL11.ERRC.NXM;\n                break;\n            }\n            if (DEBUG && this.messageEnabled(MessagesPDP11.WRITE)) {\n                if (!sWords) sWords = Str.toOct(addr) + \": \";\n                sWords += Str.toOct(data) + ' ';\n                if (sWords.length >= 64) {\n                    console.log(sWords);\n                    sWords = \"\";\n                }\n            }\n            addr += 2;\n            nWords--;\n            checksum += data;\n            if (!sector) {\n                sector = disk.seek(iCylinder, iHead, iSector + 1, true);\n                if (!sector) {\n                    nError = RL11.ERRC.HNF;\n                    break;\n                }\n                ibSector = 0;\n            }\n            if (!disk.write(sector, ibSector++, data & 0xff) || !disk.write(sector, ibSector++, data >> 8)) {\n                nError = RL11.ERRC.HNF;\n                break;\n            }\n            if (ibSector >= disk.cbSector) {\n                sector = null;\n                if (++iSector >= disk.nSectors) {\n                    iSector = 0;\n                    if (++iHead >= disk.nHeads) {\n                        iHead = 0;\n                        if (++iCylinder >= disk.nCylinders) {\n                            nError = RL11.ERRC.HNF;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (DEBUG && this.messageEnabled(MessagesPDP11.WRITE)) {\n            console.log(\"checksum: \" + (checksum|0));\n        }\n\n        return done? done(nError, iCylinder, iHead, iSector, nWords, addr) : nError;\n    }\n\n    /**\n     * doneReadWrite(nError, iCylinder, iHead, iSector, nWords, addr)\n     *\n     * @this {RL11}\n     * @param {number} nError\n     * @param {number} iCylinder\n     * @param {number} iHead\n     * @param {number} iSector\n     * @param {number} nWords\n     * @param {number} addr\n     * @return {boolean}\n     */\n    doneReadWrite(nError, iCylinder, iHead, iSector, nWords, addr)\n    {\n        this.regRLBA = addr & 0xffff;\n        this.regRLCS = (this.regRLCS & ~RL11.RLCS.BAE) | ((addr >> (16 - RL11.RLCS.SHIFT.BAE)) & RL11.RLCS.BAE);\n        this.regRLBE = (addr >> 16) & RL11.RLBE.MASK;         // 22 bit mode\n        this.regRLDA = (iCylinder << RL11.RLDA.SHIFT.RW_CA) | (iHead? RL11.RLDA.RW_HS : 0) | (iSector & RL11.RLDA.RW_SA);\n        this.tmpRLDA = this.regRLDA;\n        this.regRLMP = (0x10000 - nWords) & 0xffff;\n        if (nError) {\n            this.regRLCS |= nError | RL11.RLCS.ERR;\n        }\n        return true;\n    }\n\n    /**\n     * readRLCS(addr)\n     *\n     * @this {RL11}\n     * @param {number} addr (eg, PDP11.UNIBUS.RLCS or 174400)\n     * @return {number}\n     */\n    readRLCS(addr)\n    {\n        return this.regRLCS & RL11.RLCS.RMASK;\n    }\n\n    /**\n     * writeRLCS(data, addr)\n     *\n     * @this {RL11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.RLCS or 174400)\n     */\n    writeRLCS(data, addr)\n    {\n        this.regRLCS = (this.regRLCS & ~RL11.RLCS.WMASK) | (data & RL11.RLCS.WMASK);\n        this.regRLBE = (this.regRLBE & 0x3C) | ((data & RL11.RLCS.BAE) >> RL11.RLCS.SHIFT.BAE);\n        if (!(this.regRLCS & RL11.RLCS.CRDY)) this.processCommand();\n    }\n\n    /**\n     * readRLBA(addr)\n     *\n     * @this {RL11}\n     * @param {number} addr (eg, PDP11.UNIBUS.RLBA or 174402)\n     * @return {number}\n     */\n    readRLBA(addr)\n    {\n        return this.regRLBA;\n    }\n\n    /**\n     * writeRLBA(data, addr)\n     *\n     * @this {RL11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.RLBA or 174402)\n     */\n    writeRLBA(data, addr)\n    {\n        this.regRLBA = data & RL11.RLBA.WMASK;\n    }\n\n    /**\n     * readRLDA(addr)\n     *\n     * @this {RL11}\n     * @param {number} addr (eg, PDP11.UNIBUS.RLDA or 174404)\n     * @return {number}\n     */\n    readRLDA(addr)\n    {\n        return this.regRLDA;\n    }\n\n    /**\n     * writeRLDA(data, addr)\n     *\n     * @this {RL11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.RLDA or 174404)\n     */\n    writeRLDA(data, addr)\n    {\n        this.regRLDA = data;\n    }\n\n    /**\n     * readRLMP(addr)\n     *\n     * @this {RL11}\n     * @param {number} addr (eg, PDP11.UNIBUS.RLMP or 174406)\n     * @return {number}\n     */\n    readRLMP(addr)\n    {\n        return this.regRLMP;\n    }\n\n    /**\n     * writeRLMP(data, addr)\n     *\n     * @this {RL11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.RLMP or 174406)\n     */\n    writeRLMP(data, addr)\n    {\n        this.regRLMP = data;\n    }\n\n    /**\n     * readRLBE(addr)\n     *\n     * @this {RL11}\n     * @param {number} addr (eg, PDP11.UNIBUS.RLBE or 174410)\n     * @return {number}\n     */\n    readRLBE(addr)\n    {\n        return this.regRLBE;\n    }\n\n    /**\n     * writeRLBE(data, addr)\n     *\n     * Curiously, we see RSTS/E v7.0 writing RLBE bits that aren't documented:\n     *\n     *      R0=000000 R1=000000 R2=174410 R3=000000 R4=102076 R5=045166\n     *      SP=052662 PC=067624 PS=034344 IR=000000 SL=000377 T0 N0 Z1 V0 C0\n     *      067624: 012712 000300          MOV   #300,@R2\n     *\n     * @this {RL11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.RLBE or 174410)\n     */\n    writeRLBE(data, addr)\n    {\n        this.regRLBE = data & RL11.RLBE.MASK;\n        this.regRLCS = (this.regRLCS & ~RL11.RLCS.BAE) | ((this.regRLBE & 0x3) << RL11.RLCS.SHIFT.BAE);\n    }\n}\n\n/*\n * Alias RL11 definitions as class constants\n */\nRL11.RLCS   =   PDP11.RL11.RLCS;        // 174400: Control Status Register\nRL11.RLBA   =   PDP11.RL11.RLBA;        // 174402: Bus Address Register\nRL11.RLDA   =   PDP11.RL11.RLDA;        // 174404: Disk Address Register\nRL11.RLMP   =   PDP11.RL11.RLMP;        // 177406: Multi-Purpose Register\nRL11.RLBE   =   PDP11.RL11.RLBE;        // 174410: Bus (Address) Extension Register\nRL11.ERRC   =   PDP11.RL11.ERRC;        // NOTE: These error codes are pre-shifted to read/write directly from/to RLCS.ERRC\nRL11.FUNC   =   PDP11.RL11.FUNC;        // NOTE: These function codes are pre-shifted to read/write directly from/to RLCS.FUNC\n\n/*\n * ES6 ALERT: As you can see below, I've finally started using computed property names.\n */\nRL11.UNIBUS_IOTABLE = {\n    [PDP11.UNIBUS.RLCS]:     /* 174400 */    [null, null, RL11.prototype.readRLCS,  RL11.prototype.writeRLCS,   \"RLCS\"],\n    [PDP11.UNIBUS.RLBA]:     /* 174402 */    [null, null, RL11.prototype.readRLBA,  RL11.prototype.writeRLBA,   \"RLBA\"],\n    [PDP11.UNIBUS.RLDA]:     /* 174404 */    [null, null, RL11.prototype.readRLDA,  RL11.prototype.writeRLDA,   \"RLDA\"],\n    [PDP11.UNIBUS.RLMP]:     /* 174406 */    [null, null, RL11.prototype.readRLMP,  RL11.prototype.writeRLMP,   \"RLMP\"],\n    [PDP11.UNIBUS.RLBE]:     /* 174410 */    [null, null, RL11.prototype.readRLBE,  RL11.prototype.writeRLBE,   \"RLBE\"]\n};\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/rx11.js (C) Jeff Parsons 2012-2018\n */\n\n\nclass RX11 extends DriveController {\n    /**\n     * RX11(parms)\n     *\n     * The RX11 component has the following component-specific (parms) properties:\n     *\n     *      autoMount: one or more JSON-encoded objects, each containing 'name' and 'path' properties\n     *\n     * The RX11 Disk Controller controls up to two RX01 disk drives, which in turn read/write\n     * disk cartridges.  See [RX11 Disk Controller Configuration Files](/devices/pdp11/rx11/).\n     *\n     * RX01 diskettes are single-sided, with 77 tracks per side, 26 sectors per track, and a sector size\n     * of 128 bytes, for a total capacity of 250Kb (256,256 bytes).  See [RX01 Disk Images](/disks/dec/rx01/).\n     *\n     * @param {Object} parms\n     */\n    constructor(parms)\n    {\n        super(\"RX11\", parms, MessagesPDP11.RX11, PDP11.RX11, PDP11.RX11.RX01, RX11.UNIBUS_IOTABLE);\n\n        /*\n         * Define all the registers required for this controller.\n         */\n        this.regRXCS = this.regRXDB = 0;\n        this.regRXTA = this.regRXSA = this.regRXES = this.regError = 0;\n\n        /*\n         * Whenever a command is issued, we record the function code internally here, and when the command\n         * is completed, we set the internal function code back to UNUSED.\n         */\n        this.funCode = RX11.FUNC.UNUSED;        // no function in progress (device is idle)\n\n        this.iBuffer = 0;\n        /*\n         * We use the new ES6 fill() method to ensure that the buffer returns something reasonable if, for some\n         * strange reason, the first command we receive is an Empty Buffer command.\n         */\n        this.abBuffer = new Array(128).fill(0);\n    }\n\n    /**\n     * initController(aRegs)\n     *\n     * @this {RX11}\n     * @param {Array} [aRegs]\n     * @return {boolean} true if successful, false if failure\n     */\n    initController(aRegs)\n    {\n        if (!aRegs) {\n            this.regRXCS = 0;\n            this.regRXDB = 0;\n            this.regRXTA = 1;\n            this.regRXSA = 1;\n            this.regRXES = 0;\n            this.regError = 0;\n            this.funCode = RX11.FUNC.READ;\n            this.iBuffer = 0;\n            this.cpu.clearIRQ(this.irq);\n            this.readSector();\n        }\n        else {\n            /*\n             * ES6 ALERT: A handy destructuring assignment, which makes it easy to perform the inverse\n             * of what saveController() does when it collects a bunch of object properties into an array.\n             */\n            [\n                this.regRXCS,\n                this.regRXDB,\n                this.regRXTA,\n                this.regRXSA,\n                this.regRXES,\n                this.regError,\n                this.funCode,\n                this.iBuffer,\n                this.abBuffer\n            ] = aRegs;\n        }\n        return true;\n    }\n\n    /**\n     * saveController()\n     *\n     * Basically, the inverse of initController().\n     *\n     * @this {RX11}\n     * @return {Array}\n     */\n    saveController()\n    {\n        return [\n            this.regRXCS,\n            this.regRXDB,\n            this.regRXTA,\n            this.regRXSA,\n            this.regRXES,\n            this.regError,\n            this.funCode,\n            this.iBuffer,\n            this.abBuffer\n        ];\n    }\n\n    /**\n     * notifyLoad(iDrive)\n     *\n     * Called whenever DriveController has loaded a new disk into the specified drive.\n     *\n     * We're interested in this so that whenever a disk change occurs for drive 0, we can automatically\n     * refill the sector buffer with the data from sector 1 from track 1.\n     *\n     * @this {RX11}\n     * @param {number} iDrive\n     */\n    notifyLoad(iDrive)\n    {\n        if (iDrive == 0) this.initController();\n    }\n\n    /**\n     * notifyUnload(iDrive)\n     *\n     * Called whenever DriveController has unloaded a disk from the specified drive.\n     *\n     * @this {RX11}\n     * @param {number} iDrive\n     */\n    notifyUnload(iDrive)\n    {\n    }\n\n    /**\n     * processCommand()\n     *\n     * @this {RX11}\n     */\n    processCommand()\n    {\n        this.funCode = this.regRXCS & RX11.RXCS.FUNC;\n        this.regRXCS &= ~(RX11.RXCS.GO | RX11.RXCS.TR | RX11.RXCS.DONE | RX11.RXCS.ERR);\n        this.cpu.clearIRQ(this.irq);\n\n        if (this.messageEnabled()) this.printMessage(this.type + \".processCommand(\" + RX11.FUNCS[this.funCode >> 1]+ \")\", true, true);\n\n        switch(this.funCode) {\n\n        case RX11.FUNC.FILL:\n        case RX11.FUNC.EMPTY:\n        case RX11.FUNC.READ:\n        case RX11.FUNC.WRITE:\n        case RX11.FUNC.WRDEL:\n            this.initCommand();\n            break;\n\n        case RX11.FUNC.RDSTAT:\n            this.readStatus();\n            break;\n\n        case RX11.FUNC.RDERR:\n            this.readError();\n            break;\n\n        default:\n\n            break;\n        }\n    }\n\n    /**\n     * initCommand()\n     *\n     * @this {RX11}\n     */\n    initCommand()\n    {\n        this.iBuffer = 0;\n    }\n\n    /**\n     * doneCommand(nError)\n     *\n     * @this {RX11}\n     * @param {number} [nError]\n     */\n    doneCommand(nError)\n    {\n        if (nError) {\n            this.regError = nError;\n            this.regRXDB = this.regRXES;\n            this.regRXCS |= RX11.RXCS.ERR;\n        }\n        this.funCode = RX11.FUNC.UNUSED;\n        this.regRXCS |= RX11.RXCS.DONE;\n        if (this.regRXCS & RX11.RXCS.IE) this.cpu.setIRQ(this.irq);\n    }\n\n    /**\n     * readData(drive, iCylinder, iHead, iSector, nWords, addr, inc, fCheck, done)\n     *\n     * This function is required ONLY if we want to support DriveController's bootSelectedDisk() function (and we do).\n     *\n     * @this {RX11}\n     * @param {Object} drive\n     * @param {number} iCylinder\n     * @param {number} iHead\n     * @param {number} iSector\n     * @param {number} nWords\n     * @param {number} addr\n     * @param {number} inc (normally 2, unless inhibited, in which case it's 0)\n     * @param {boolean} [fCheck]\n     * @param {function(...)} [done]\n     * @return {boolean|number} true if complete, false if queued (or if no done() is supplied, the error code, if any)\n     */\n    readData(drive, iCylinder, iHead, iSector, nWords, addr, inc, fCheck, done)\n    {\n        var nError = 0;\n        var disk = drive.disk;\n        var sector = null, ibSector;\n\n        if (this.messageEnabled()) this.printMessage(this.type + \".readData(\" + iCylinder + \":\" + iHead + \":\" + iSector + \") \" + Str.toOct(addr) + \"--\" + Str.toOct(addr + (nWords << 1)), true, true);\n\n        if (!disk) {\n            nError = drive.iDrive?  RX11.ERROR.HOME1 : RX11.ERROR.HOME0;\n            nWords = 0;\n        }\n\n        var sWords = \"\";\n        while (nWords) {\n            if (!sector) {\n                if (iCylinder >= disk.nCylinders) {\n                    nError = RX11.ERROR.NO_TRACK;\n                    break;\n                }\n                sector = disk.seek(iCylinder, iHead, iSector + 1);\n                if (!sector) {\n                    nError = RX11.ERROR.NO_SECTOR;\n                    break;\n                }\n                ibSector = 0;\n                if (++iSector >= disk.nSectors) {\n                    iSector = 0;\n                    if (++iHead >= disk.nHeads) {\n                        iHead = 0;\n                        ++iCylinder;\n                    }\n                }\n            }\n            var b0, b1;\n            if ((b0 = disk.read(sector, ibSector++)) < 0 || (b1 = disk.read(sector, ibSector++)) < 0) {\n                nError = RX11.ERROR.NO_DATA;\n                break;\n            }\n            var data = b0 | (b1 << 8);\n            this.bus.setWordDirect(this.cpu.mapUnibus(addr), data);\n            if (DEBUG && this.messageEnabled(MessagesPDP11.READ)) {\n                if (!sWords) sWords = Str.toOct(addr) + \": \";\n                sWords += Str.toOct(data) + ' ';\n                if (sWords.length >= 64) {\n                    console.log(sWords);\n                    sWords = \"\";\n                }\n            }\n            if (ibSector >= disk.cbSector) sector = null;\n            addr += inc;\n            nWords--;\n        }\n\n        return done? done(nError, iCylinder, iHead, iSector, nWords, addr) : nError;\n    }\n\n    /**\n     * readSector()\n     *\n     * @this {RX11}\n     */\n    readSector()\n    {\n        var nError = 0;\n        var iDrive = (this.regRXCS & RX11.RXCS.UNIT)? 1 : 0;\n        var drive = this.aDrives[iDrive];\n        var disk = drive && drive.disk;\n        var iCylinder = this.regRXTA & RX11.RXTA.MASK, iHead = 0, nSector = this.regRXSA & RX11.RXSA.MASK;\n\n        this.regRXES &= ~(RX11.RXES.CRC | RX11.RXES.PARITY | RX11.RXES.DEL | RX11.RXES.DRDY);\n\n        if (disk) {\n            this.regRXES |= RX11.RXES.DRDY;\n            if (this.messageEnabled()) this.printMessage(this.type + \".readSector(\" + iCylinder + \":\" + iHead + \":\" + nSector + \")\", true, true);\n\n            var sector = disk.seek(iCylinder, iHead, nSector, true);\n            if (sector) {\n                var i = 0, nBytes = this.abBuffer.length;\n                while (i < nBytes) {\n                    var b = disk.read(sector, i);\n                    if (b < 0) {\n                        nError = RX11.ERROR.NO_DATA;\n                        break;\n                    }\n                    this.abBuffer[i++] = b;\n                }\n                if (sector.deleted) this.regRXES |= RX11.RXES.DEL;\n            } else {\n                nError = RX11.ERROR.NO_SECTOR;\n            }\n        } else {\n            nError = iDrive? RX11.ERROR.HOME1 : RX11.ERROR.HOME0;\n        }\n        this.doneCommand(nError);\n    }\n\n    /**\n     * writeSector(fDeleted)\n     *\n     * @this {RX11}\n     * @param {boolean} fDeleted\n     */\n    writeSector(fDeleted)\n    {\n        var nError = 0;\n        var iDrive = (this.regRXCS & RX11.RXCS.UNIT)? 1 : 0;\n        var drive = this.aDrives[iDrive];\n        var disk = drive && drive.disk;\n        var iCylinder = this.regRXTA & RX11.RXTA.MASK, iHead = 0, nSector = this.regRXSA & RX11.RXSA.MASK;\n\n        this.regRXES &= ~(RX11.RXES.CRC | RX11.RXES.PARITY | RX11.RXES.DEL | RX11.RXES.DRDY);\n\n        if (disk) {\n            this.regRXES |= RX11.RXES.DRDY;\n            if (this.messageEnabled()) this.printMessage(this.type + \".writeSector(\" + iCylinder + \":\" + iHead + \":\" + nSector + \")\", true, true);\n\n            var sector = disk.seek(iCylinder, iHead, nSector, true);\n            if (sector) {\n                if (fDeleted) sector.deleted = true;\n                var i = 0, nBytes = this.abBuffer.length;\n                while (i < nBytes) {\n                    var data = this.abBuffer[i];\n                    if (!disk.write(sector, i, data & 0xff)) {\n                        nError = RX11.ERROR.NO_DATA;\n                        break;\n                    }\n                    i++;\n                }\n            } else {\n                nError = RX11.ERROR.NO_SECTOR;\n            }\n        } else {\n            nError = iDrive? RX11.ERROR.HOME1 : RX11.ERROR.HOME0;\n        }\n        this.doneCommand(nError);\n    }\n\n    /**\n     * readStatus()\n     *\n     * @this {RX11}\n     */\n    readStatus()\n    {\n        var iDrive = (this.regRXCS & RX11.RXCS.UNIT)? 1 : 0;\n        var drive = this.aDrives[iDrive];\n\n        this.regRXES &= ~RX11.RXES.DRDY;\n        if (drive && drive.disk) this.regRXES |= RX11.RXES.DRDY;\n\n        this.regRXDB = this.regRXES;\n        this.doneCommand();\n    }\n\n    /**\n     * readError()\n     *\n     * @this {RX11}\n     */\n    readError()\n    {\n        this.regRXDB = this.regError;\n        this.doneCommand();\n    }\n\n    /**\n     * readRXCS(addr)\n     *\n     * @this {RX11}\n     * @param {number} addr (eg, PDP11.UNIBUS.RXCS or 177170)\n     * @param {boolean} [fPreWrite]\n     * @return {number}\n     */\n    readRXCS(addr, fPreWrite)\n    {\n        var w = this.regRXCS;\n\n        if (!fPreWrite) {\n            w &= RX11.RXCS.RMASK;\n\n            switch (this.funCode) {\n\n            case RX11.FUNC.FILL:\n            case RX11.FUNC.EMPTY:\n                if (this.iBuffer < this.abBuffer.length) {\n                    this.regRXCS |= RX11.RXCS.TR;\n                }\n                break;\n\n            case RX11.FUNC.READ:\n            case RX11.FUNC.WRITE:\n            case RX11.FUNC.WRDEL:\n                if (this.iBuffer < 2) {\n                    this.regRXCS |= RX11.RXCS.TR;\n                }\n                break;\n            }\n        }\n        return w;\n    }\n\n    /**\n     * writeRXCS(data, addr)\n     *\n     * @this {RX11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.RXCS or 177170)\n     */\n    writeRXCS(data, addr)\n    {\n        this.regRXCS = (this.regRXCS & ~RX11.RXCS.WMASK) | (data & RX11.RXCS.WMASK);\n\n        if (this.regRXCS & RX11.RXCS.INIT) {\n            this.initController();\n            return;\n        }\n\n        if ((this.regRXCS & RX11.RXCS.GO) && this.funCode == RX11.FUNC.UNUSED) {\n            this.processCommand();\n            return;\n        }\n\n        if (!(this.regRXCS & RX11.RXCS.IE)) {\n            this.cpu.clearIRQ(this.irq);\n        }\n        else if (this.regRXCS & RX11.RXCS.DONE) {\n            this.cpu.setIRQ(this.irq);\n        }\n    }\n\n    /**\n     * readRXDB(addr)\n     *\n     * @this {RX11}\n     * @param {number} addr (eg, PDP11.UNIBUS.RXDB or 177172)\n     * @param {boolean} [fPreWrite]\n     * @return {number}\n     */\n    readRXDB(addr, fPreWrite)\n    {\n        if (!fPreWrite) {\n            switch (this.funCode) {\n\n            case RX11.FUNC.EMPTY:\n                if (this.regRXCS & RX11.RXCS.TR) {\n                    this.regRXCS &= ~RX11.RXCS.TR;\n\n                    this.regRXDB = this.abBuffer[this.iBuffer] & 0xff;\n                    if (this.messageEnabled()) this.printMessage(this.type + \".readByte(\" + this.iBuffer + \"): \" + Str.toHexByte(this.regRXDB), true, true);\n                    if (++this.iBuffer >= this.abBuffer.length) {\n                        this.doneCommand();\n                    }\n                }\n                break;\n            }\n        }\n        return this.regRXDB;\n    }\n\n    /**\n     * writeRXDB(data, addr)\n     *\n     * @this {RX11}\n     * @param {number} data\n     * @param {number} addr (eg, PDP11.UNIBUS.RXDB or 177172)\n     */\n    writeRXDB(data, addr)\n    {\n        switch(this.funCode) {\n\n        case RX11.FUNC.FILL:\n            if (this.regRXCS & RX11.RXCS.TR) {\n                this.regRXCS &= ~RX11.RXCS.TR;\n\n                this.abBuffer[this.iBuffer] = data & 0xff;\n                if (this.messageEnabled()) this.printMessage(this.type + \".writeByte(\" + this.iBuffer + \",\" + Str.toHexByte(data) + \")\", true, true);\n                if (++this.iBuffer >= this.abBuffer.length) {\n                    this.doneCommand();\n                }\n            }\n            break;\n\n        case RX11.FUNC.READ:\n        case RX11.FUNC.WRITE:\n        case RX11.FUNC.WRDEL:\n            if (this.regRXCS & RX11.RXCS.TR) {\n                this.regRXCS &= ~RX11.RXCS.TR;\n\n                switch(this.iBuffer++) {\n                case 0:\n                    this.regRXSA = data;\n                    break;\n\n                case 1:\n                    this.regRXTA = data;\n                    if (this.funCode == RX11.FUNC.READ) {\n                        this.readSector();\n                    } else {\n                        this.writeSector(this.funCode == RX11.FUNC.WRDEL);\n                    }\n                    break;\n\n                default:\n\n                    break;\n                }\n            }\n            break;\n        }\n        this.regRXDB = data;\n    }\n}\n\n/*\n * Alias RX11 definitions as class constants\n */\nRX11.RXCS   =   PDP11.RX11.RXCS;        // 177170: Command and Status Register\nRX11.RXDB   =   PDP11.RX11.RXDB;        // 177172: Data Buffer Register\nRX11.RXTA   =   PDP11.RX11.RXTA;\nRX11.RXSA   =   PDP11.RX11.RXSA;\nRX11.RXES   =   PDP11.RX11.RXES;\nRX11.FUNC   =   PDP11.RX11.FUNC;\nRX11.ERROR  =   PDP11.RX11.ERROR;\n\nRX11.FUNCS  = [\n    \"FILL\", \"EMPTY\", \"WRITE\", \"READ\", \"UNUSED\", \"RDSTAT\", \"WRDEL\", \"RDERR\"\n];\n\n/*\n * ES6 ALERT: As you can see below, I've finally started using computed property names.\n */\nRX11.UNIBUS_IOTABLE = {\n    [PDP11.UNIBUS.RXCS]:     /* 177170 */    [null, null, RX11.prototype.readRXCS,  RX11.prototype.writeRXCS,   \"RXCS\"],\n    [PDP11.UNIBUS.RXDB]:     /* 177172 */    [null, null, RX11.prototype.readRXDB,  RX11.prototype.writeRXDB,   \"RXDB\"]\n};\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/debugger.js (C) Jeff Parsons 2012-2018\n */\n\n\n/**\n * Debugger Address Object\n *\n * This is the basic structure; other debuggers may extend it.\n *\n *      addr            address\n *      fTemporary      true if this is a temporary breakpoint address\n *      sCmd            set for breakpoint addresses if there's an associated command string\n *      aCmds           preprocessed commands (from sCmd)\n *\n * @typedef {{\n *      addr:(number|undefined),\n *      fTemporary:(boolean|undefined),\n *      sCmd:(string|undefined),\n *      aCmds:(Array.<string>|undefined)\n * }}\n */\nvar DbgAddr;\n\n/**\n * Since the Closure Compiler treats ES6 classes as @struct rather than @dict by default,\n * it deters us from defining named properties on our components; eg:\n *\n *      this['exports'] = {...}\n *\n * results in an error:\n *\n *      Cannot do '[]' access on a struct\n *\n * So, in order to define 'exports', we must override the @struct assumption by annotating\n * the class as @unrestricted (or @dict).  Note that this must be done both here and in the\n * subclass (eg, SerialPort), because otherwise the Compiler won't allow us to *reference*\n * the named property either.\n *\n * TODO: Consider marking ALL our classes unrestricted, because otherwise it forces us to\n * define every single property the class uses in its constructor, which results in a fair\n * bit of redundant initialization, since many properties aren't (and don't need to be) fully\n * initialized until the appropriate init(), reset(), restore(), etc. function is called.\n *\n * The upside, however, may be that since the structure of the class is completely defined by\n * the constructor, JavaScript engines may be able to optimize and run more efficiently.\n *\n * @unrestricted\n */\nclass Debugger extends Component\n{\n    /**\n     * Debugger(parmsDbg)\n     *\n     * The Debugger component supports the following optional (parmsDbg) properties:\n     *\n     *      base: the base to use for most numeric input/output (default is 16)\n     *\n     * The Debugger component is a shared component containing a subset of functionality used by\n     * the other CPU-specific Debuggers (eg, DebuggerX86).  Over time, the goal is to factor out as\n     * much common debugging support as possible from those components into this one.\n     *\n     * @param {Object} parmsDbg\n     */\n    constructor(parmsDbg)\n    {\n        if (DEBUGGER) {\n\n            super(\"Debugger\", parmsDbg);\n\n            /*\n             * Default base used to display all values; modified with the \"s base\" command.\n             */\n            this.nBase = +parmsDbg['base'] || 16;\n\n            /*\n             * Default number of bits of integer precision; it can be overridden by the Debugger\n             * but there is no command to adjust it.\n             */\n            this.nBits = 32;\n\n            this.achGroup = ['{','}'];\n            this.achAddress = ['[',']'];\n\n            /*\n             * These keep track of instruction activity, but only when tracing or when Debugger checks\n             * have been enabled (eg, one or more breakpoints have been set).\n             *\n             * They are zeroed by the reset() notification handler.  cInstructions is advanced by\n             * stepCPU() and checkInstruction() calls.  nCycles is updated by every stepCPU() or stop()\n             * call and simply represents the number of cycles performed by the last run of instructions.\n             */\n            this.nCycles = 0;\n            this.cOpcodes = this.cOpcodesStart = 0;\n\n            /*\n             * fAssemble is true when \"assemble mode\" is active, false when not.\n             */\n            this.fAssemble = false;\n\n            /*\n             * This maintains command history.  New commands are inserted at index 0 of the array.\n             * When Enter is pressed on an empty input buffer, we default to the command at aPrevCmds[0].\n             */\n            this.iPrevCmd = -1;\n            this.aPrevCmds = [];\n\n            /*\n             * aVariables is an object with properties that grow as setVariable() assigns more variables;\n             * each property corresponds to one variable, where the property name is the variable name (ie,\n             * a string beginning with a non-digit, followed by zero or more symbol characters and/or digits)\n             * and the property value is the variable's numeric value.  See doVar() and setVariable() for\n             * details.\n             *\n             * Note that parseValue() parses variables before numbers, so any variable that looks like a\n             * unprefixed hex value (eg, \"a5\" as opposed to \"0xa5\") will trump the numeric value.  Unprefixed\n             * hex values are a convenience of parseValue(), which always calls Str.parseInt() with a default\n             * base of 16; however, that default be overridden with a variety of explicit prefixes or suffixes\n             * (eg, a leading \"0o\" to indicate octal, a trailing period to indicate decimal, etc.)\n             *\n             * See Str.parseInt() for more details about supported numbers.\n             */\n            this.aVariables = {};\n\n        }   // endif DEBUGGER\n    }\n\n    /**\n     * getRegIndex(sReg, off)\n     *\n     * NOTE: This must be implemented by the individual debuggers.\n     *\n     * @this {Debugger}\n     * @param {string} sReg\n     * @param {number} [off] optional offset into sReg\n     * @return {number} register index, or -1 if not found\n     */\n    getRegIndex(sReg, off)\n    {\n        return -1;\n    }\n\n    /**\n     * getRegValue(iReg)\n     *\n     * NOTE: This must be implemented by the individual debuggers.\n     *\n     * @this {Debugger}\n     * @param {number} iReg\n     * @return {number|undefined}\n     */\n    getRegValue(iReg)\n    {\n        return undefined;\n    }\n\n    /**\n     * parseAddrReference(s, sAddr)\n     *\n     * Returns the given string with the given address reference replaced with the contents of that address.\n     *\n     * NOTE: This must be implemented by the individual debuggers.\n     *\n     * @this {Debugger}\n     * @param {string} s\n     * @param {string} sAddr\n     * @return {string}\n     */\n    parseAddrReference(s, sAddr)\n    {\n        return s.replace('[' + sAddr + ']', \"unimplemented\");\n    }\n\n    /**\n     * getNextCommand()\n     *\n     * @this {Debugger}\n     * @return {string}\n     */\n    getNextCommand()\n    {\n        var sCmd;\n        if (this.iPrevCmd > 0) {\n            sCmd = this.aPrevCmds[--this.iPrevCmd];\n        } else {\n            sCmd = \"\";\n            this.iPrevCmd = -1;\n        }\n        return sCmd;\n    }\n\n    /**\n     * getPrevCommand()\n     *\n     * @this {Debugger}\n     * @return {string|null}\n     */\n    getPrevCommand()\n    {\n        var sCmd = null;\n        if (this.iPrevCmd < this.aPrevCmds.length - 1) {\n            sCmd = this.aPrevCmds[++this.iPrevCmd];\n        }\n        return sCmd;\n    }\n\n    /**\n     * parseCommand(sCmd, fSave, chSep)\n     *\n     * @this {Debugger}\n     * @param {string|undefined} sCmd\n     * @param {boolean} [fSave] is true to save the command, false if not\n     * @param {string} [chSep] is the command separator character (default is ';')\n     * @return {Array.<string>}\n     */\n    parseCommand(sCmd, fSave, chSep)\n    {\n        if (fSave) {\n            if (!sCmd) {\n                if (this.fAssemble) {\n                    sCmd = \"end\";\n                } else {\n                    sCmd = this.aPrevCmds[this.iPrevCmd+1];\n                }\n            } else {\n                if (this.iPrevCmd < 0 && this.aPrevCmds.length) {\n                    this.iPrevCmd = 0;\n                }\n                if (this.iPrevCmd < 0 || sCmd != this.aPrevCmds[this.iPrevCmd]) {\n                    this.aPrevCmds.splice(0, 0, sCmd);\n                    this.iPrevCmd = 0;\n                }\n                this.iPrevCmd--;\n            }\n        }\n        var a = [];\n        if (sCmd) {\n            /*\n             * With the introduction of breakpoint commands (ie, quoted command sequences\n             * associated with a breakpoint), we can no longer perform simplistic splitting.\n             *\n             *      a = sCmd.split(chSep || ';');\n             *      for (var i = 0; i < a.length; i++) a[i] = Str.trim(a[i]);\n             *\n             * We may now split on semi-colons ONLY if they are outside a quoted sequence.\n             *\n             * Also, to allow quoted strings *inside* breakpoint commands, we first replace all\n             * DOUBLE double-quotes with single quotes.\n             */\n            sCmd = sCmd.replace(/\"\"/g, \"'\");\n\n            var iPrev = 0;\n            var chQuote = null;\n            chSep = chSep || ';';\n            /*\n             * NOTE: Processing charAt() up to and INCLUDING length is not a typo; we're taking\n             * advantage of the fact that charAt() with an invalid index returns an empty string,\n             * allowing us to use the same substring() call to capture the final portion of sCmd.\n             *\n             * In a sense, it allows us to pretend that the string ends with a zero terminator.\n             */\n            for (var i = 0; i <= sCmd.length; i++) {\n                var ch = sCmd.charAt(i);\n                if (ch == '\"' || ch == \"'\") {\n                    if (!chQuote) {\n                        chQuote = ch;\n                    } else if (ch == chQuote) {\n                        chQuote = null;\n                    }\n                }\n                else if (ch == chSep && !chQuote || !ch) {\n                    /*\n                     * Recall that substring() accepts starting (inclusive) and ending (exclusive)\n                     * indexes, whereas substr() accepts a starting index and a length.  We need the former.\n                     */\n                    a.push(Str.trim(sCmd.substring(iPrev, i)));\n                    iPrev = i + 1;\n                }\n            }\n        }\n        return a;\n    }\n\n    /**\n     * evalAND(dst, src)\n     *\n     * Adapted from /modules/pdp10/lib/cpuops.js:PDP10.AND().\n     *\n     * Performs the bitwise \"and\" (AND) of two operands > 32 bits.\n     *\n     * @this {Debugger}\n     * @param {number} dst\n     * @param {number} src\n     * @return {number} (dst & src)\n     */\n    evalAND(dst, src)\n    {\n        /*\n         * We AND the low 32 bits separately from the higher bits, and then combine them with addition.\n         * Since all bits above 32 will be zero, and since 0 AND 0 is 0, no special masking for the higher\n         * bits is required.\n         *\n         * WARNING: When using JavaScript's 32-bit operators with values that could set bit 31 and produce a\n         * negative value, it's critical to perform a final right-shift of 0, ensuring that the final result is\n         * positive.\n         */\n        if (this.nBits <= 32) {\n            return dst & src;\n        }\n        /*\n         * Negative values don't yield correct results when dividing, so pass them through an unsigned truncate().\n         */\n        dst = this.truncate(dst, 0, true);\n        src = this.truncate(src, 0, true);\n        return ((((dst / Debugger.TWO_POW32)|0) & ((src / Debugger.TWO_POW32)|0)) * Debugger.TWO_POW32) + ((dst & src) >>> 0);\n    }\n\n    /**\n     * evalIOR(dst, src)\n     *\n     * Adapted from /modules/pdp10/lib/cpuops.js:PDP10.IOR().\n     *\n     * Performs the logical \"inclusive-or\" (OR) of two operands > 32 bits.\n     *\n     * @this {Debugger}\n     * @param {number} dst\n     * @param {number} src\n     * @return {number} (dst | src)\n     */\n    evalIOR(dst, src)\n    {\n        /*\n         * We OR the low 32 bits separately from the higher bits, and then combine them with addition.\n         * Since all bits above 32 will be zero, and since 0 OR 0 is 0, no special masking for the higher\n         * bits is required.\n         *\n         * WARNING: When using JavaScript's 32-bit operators with values that could set bit 31 and produce a\n         * negative value, it's critical to perform a final right-shift of 0, ensuring that the final result is\n         * positive.\n         */\n        if (this.nBits <= 32) {\n            return dst | src;\n        }\n        /*\n         * Negative values don't yield correct results when dividing, so pass them through an unsigned truncate().\n         */\n        dst = this.truncate(dst, 0, true);\n        src = this.truncate(src, 0, true);\n        return ((((dst / Debugger.TWO_POW32)|0) | ((src / Debugger.TWO_POW32)|0)) * Debugger.TWO_POW32) + ((dst | src) >>> 0);\n    }\n\n    /**\n     * evalXOR(dst, src)\n     *\n     * Adapted from /modules/pdp10/lib/cpuops.js:PDP10.XOR().\n     *\n     * Performs the logical \"exclusive-or\" (XOR) of two operands > 32 bits.\n     *\n     * @this {Debugger}\n     * @param {number} dst\n     * @param {number} src\n     * @return {number} (dst ^ src)\n     */\n    evalXOR(dst, src)\n    {\n        /*\n         * We XOR the low 32 bits separately from the higher bits, and then combine them with addition.\n         * Since all bits above 32 will be zero, and since 0 XOR 0 is 0, no special masking for the higher\n         * bits is required.\n         *\n         * WARNING: When using JavaScript's 32-bit operators with values that could set bit 31 and produce a\n         * negative value, it's critical to perform a final right-shift of 0, ensuring that the final result is\n         * positive.\n         */\n        if (this.nBits <= 32) {\n            return dst | src;\n        }\n        /*\n         * Negative values don't yield correct results when dividing, so pass them through an unsigned truncate().\n         */\n        dst = this.truncate(dst, 0, true);\n        src = this.truncate(src, 0, true);\n        return ((((dst / Debugger.TWO_POW32)|0) ^ ((src / Debugger.TWO_POW32)|0)) * Debugger.TWO_POW32) + ((dst ^ src) >>> 0);\n    }\n\n    /**\n     * evalMUL(dst, src)\n     *\n     * I could have adapted the code from /modules/pdp10/lib/cpuops.js:PDP10.doMUL(), but it was simpler to\n     * write this base method and let the PDP-10 Debugger override it with a call to the *actual* doMUL() method.\n     *\n     * @this {Debugger}\n     * @param {number} dst\n     * @param {number} src\n     * @return {number} (dst * src)\n     */\n    evalMUL(dst, src)\n    {\n        return dst * src;\n    }\n\n    /**\n     * truncate(v, nBits, fUnsigned)\n     *\n     * @this {Debugger}\n     * @param {number} v\n     * @param {number} [nBits]\n     * @param {boolean} [fUnsigned]\n     * @return {number}\n     */\n    truncate(v, nBits, fUnsigned)\n    {\n        var limit, vNew = v;\n        nBits = nBits || this.nBits;\n\n        if (fUnsigned) {\n            if (nBits == 32) {\n                vNew = v >>> 0;\n            }\n            else if (nBits < 32) {\n                vNew = v & ((1 << nBits) - 1);\n            }\n            else {\n                limit = Math.pow(2, nBits);\n                if (v < 0 || v >= limit) {\n                    vNew = v % limit;\n                    if (vNew < 0) vNew += limit;\n                }\n            }\n        }\n        else {\n            if (nBits <= 32) {\n                vNew = (v << (32 - nBits)) >> (32 - nBits);\n            }\n            else {\n                limit = Math.pow(2, nBits - 1);\n                if (v >= limit) {\n                    vNew = (v % limit);\n                    if (((v / limit)|0) & 1) vNew -= limit;\n                } else if (v < -limit) {\n                    vNew = (v % limit);\n                    if ((((-v - 1) / limit) | 0) & 1) {\n                        if (vNew) vNew += limit;\n                    }\n                    else {\n                        if (!vNew) vNew -= limit;\n                    }\n                }\n            }\n        }\n        if (v != vNew) {\n            if (MAXDEBUG) this.println(\"warning: value \" + v + \" truncated to \" + vNew);\n            v = vNew;\n        }\n        return v;\n    }\n\n    /**\n     * evalOps(aVals, aOps, cOps)\n     *\n     * Some of our clients want a specific number of bits of integer precision.  If that precision is\n     * greater than 32, some of the operations below will fail; for example, JavaScript bitwise operators\n     * always truncate the result to 32 bits, so beware when using shift operations.  Similarly, it would\n     * be wrong to always \"|0\" the final result, which is why we rely on truncate() now.\n     *\n     * Note that JavaScript integer precision is limited to 52 bits.  For example, in Node, if you set a\n     * variable to 0x80000001:\n     *\n     *      foo=0x80000001|0\n     *\n     * then calculate foo*foo and display the result in binary using \"(foo*foo).toString(2)\":\n     *\n     *      '11111111111111111111111111111100000000000000000000000000000000'\n     *\n     * which is slightly incorrect because it has overflowed JavaScript's floating-point precision.\n     *\n     * 0x80000001 in decimal is -2147483647, so the product is 4611686014132420609, which is 0x3FFFFFFF00000001.\n     *\n     * @this {Debugger}\n     * @param {Array.<number>} aVals\n     * @param {Array.<string>} aOps\n     * @param {number} [cOps] (default is -1 for all)\n     * @return {boolean} true if successful, false if error\n     */\n    evalOps(aVals, aOps, cOps = -1)\n    {\n        while (cOps-- && aOps.length) {\n            var chOp = aOps.pop();\n            if (aVals.length < 2) return false;\n            var valNew;\n            var val2 = aVals.pop();\n            var val1 = aVals.pop();\n            switch(chOp) {\n            case '*':\n                valNew = this.evalMUL(val1, val2);\n                break;\n            case '/':\n                if (!val2) return false;\n                valNew = Math.trunc(val1 / val2);\n                break;\n            case '^/':\n                if (!val2) return false;\n                valNew = val1 % val2;\n                break;\n            case '+':\n                valNew = val1 + val2;\n                break;\n            case '-':\n                valNew = val1 - val2;\n                break;\n            case '<<':\n                valNew = val1 << val2;\n                break;\n            case '>>':\n                valNew = val1 >> val2;\n                break;\n            case '>>>':\n                valNew = val1 >>> val2;\n                break;\n            case '<':\n                valNew = (val1 < val2? 1 : 0);\n                break;\n            case '<=':\n                valNew = (val1 <= val2? 1 : 0);\n                break;\n            case '>':\n                valNew = (val1 > val2? 1 : 0);\n                break;\n            case '>=':\n                valNew = (val1 >= val2? 1 : 0);\n                break;\n            case '==':\n                valNew = (val1 == val2? 1 : 0);\n                break;\n            case '!=':\n                valNew = (val1 != val2? 1 : 0);\n                break;\n            case '&':\n                valNew = this.evalAND(val1, val2);\n                break;\n            case '!':           // alias for MACRO-10 to perform a bitwise inclusive-or (OR)\n            case '|':\n                valNew = this.evalIOR(val1, val2);\n                break;\n            case '^!':          // since MACRO-10 uses '^' for base overrides, '^!' is used for bitwise exclusive-or (XOR)\n                valNew = this.evalXOR(val1, val2);\n                break;\n            case '&&':\n                valNew = (val1 && val2? 1 : 0);\n                break;\n            case '||':\n                valNew = (val1 || val2? 1 : 0);\n                break;\n            case ',,':\n                valNew = this.truncate(val1, 18, true) * Math.pow(2, 18) + this.truncate(val2, 18, true);\n                break;\n            case '_':\n            case '^_':\n                valNew = val1;\n                /*\n                 * While we always try to avoid assuming any particular number of bits of precision, the 'B' shift\n                 * operator (which we've converted to '^_') is unique to the MACRO-10 environment, which imposes the\n                 * following restrictions on the shift count.\n                 */\n                if (chOp == '^_') val2 = 35 - (val2 & 0xff);\n                if (val2) {\n                    /*\n                     * Since binary shifting is a logical (not arithmetic) operation, and since shifting by division only\n                     * works properly with positive numbers, we call truncate() to produce an unsigned value.\n                     */\n                    valNew = this.truncate(valNew, 0, true);\n                    if (val2 > 0) {\n                        valNew *= Math.pow(2, val2);\n                    } else {\n                        valNew = Math.trunc(valNew / Math.pow(2, -val2));\n                    }\n                }\n                break;\n            default:\n                return false;\n            }\n            aVals.push(this.truncate(valNew));\n        }\n        return true;\n    }\n\n    /**\n     * parseArray(asValues, iValue, iLimit, nBase, aUndefined)\n     *\n     * parseExpression() takes a complete expression and divides it into array elements, where even elements\n     * are values (which may be empty if two or more operators appear consecutively) and odd elements are operators.\n     *\n     * For example, if the original expression was \"2*{3+{4/2}}\", parseExpression() would call parseArray() with:\n     *\n     *      0   1   2   3   4   5   6   7   8   9  10  11  12  13  14\n     *      -   -   -   -   -   -   -   -   -   -  --  --  --  --  --\n     *      2   *       {   3   +       {   4   /   2   }       }\n     *\n     * This function takes care of recursively processing grouped expressions, by processing subsets of the array,\n     * as well as handling certain base overrides (eg, temporarily switching to base-10 for binary shift suffixes).\n     *\n     * @param {Array.<string>} asValues\n     * @param {number} iValue\n     * @param {number} iLimit\n     * @param {number} nBase\n     * @param {Array|undefined} [aUndefined]\n     * @return {number|undefined}\n     */\n    parseArray(asValues, iValue, iLimit, nBase, aUndefined)\n    {\n        var value;\n        var sValue, sOp;\n        var fError = false;\n        var nUnary = 0;\n        var aVals = [], aOps = [];\n\n        var nBasePrev = this.nBase;\n        this.nBase = nBase;\n\n        while (iValue < iLimit) {\n            var v;\n            sValue = asValues[iValue++].trim();\n            sOp = (iValue < iLimit? asValues[iValue++] : \"\");\n\n            if (sValue) {\n                v = this.parseValue(sValue, null, aUndefined, nUnary);\n            } else {\n                if (sOp == '{') {\n                    var cOpen = 1;\n                    var iStart = iValue;\n                    while (iValue < iLimit) {\n                        sValue = asValues[iValue++].trim();\n                        sOp = (iValue < asValues.length? asValues[iValue++] : \"\");\n                        if (sOp == '{') {\n                            cOpen++;\n                        } else if (sOp == '}') {\n                            if (!--cOpen) break;\n                        }\n                    }\n                    v = this.parseArray(asValues, iStart, iValue-1, this.nBase, aUndefined);\n                    if (v != null && nUnary) {\n                        v = this.parseUnary(v, nUnary);\n                    }\n                    sValue = (iValue < iLimit? asValues[iValue++].trim() : \"\");\n                    sOp = (iValue < iLimit? asValues[iValue++] : \"\");\n                }\n                else {\n                    /*\n                     * When parseExpression() calls us, it has collapsed all runs of whitespace into single spaces,\n                     * and although it allows single spaces to divide the elements of the expression, a space is neither\n                     * a unary nor binary operator.  It's essentially a no-op.  If we encounter it here, then it followed\n                     * another operator and is easily ignored (although perhaps it should still trigger a reset of nBase\n                     * and nUnary -- TBD).\n                     */\n                    if (sOp == ' ') {\n                        continue;\n                    }\n                    if (sOp == '^B') {\n                        this.nBase = 2;\n                        continue;\n                    }\n                    if (sOp == '^O') {\n                        this.nBase = 8;\n                        continue;\n                    }\n                    if (sOp == '^D') {\n                        this.nBase = 10;\n                        continue;\n                    }\n                    if (!(nUnary & (0xC0000000|0))) {\n                        if (sOp == '+') {\n                            continue;\n                        }\n                        if (sOp == '-') {\n                            nUnary = (nUnary << 2) | 1;\n                            continue;\n                        }\n                        if (sOp == '~' || sOp == '^-') {\n                            nUnary = (nUnary << 2) | 2;\n                            continue;\n                        }\n                        if (sOp == '^L') {\n                            nUnary = (nUnary << 2) | 3;\n                            continue;\n                        }\n                    }\n                    fError = true;\n                    break;\n                }\n            }\n\n            if (v === undefined) {\n                if (aUndefined) {\n                    aUndefined.push(sValue);\n                    v = 0;\n                } else {\n                    fError = true;\n                    aUndefined = [];\n                    break;\n                }\n            }\n\n            aVals.push(this.truncate(v));\n\n            /*\n             * When parseExpression() calls us, it has collapsed all runs of whitespace into single spaces,\n             * and although it allows single spaces to divide the elements of the expression, a space is neither\n             * a unary nor binary operator.  It's essentially a no-op.  If we encounter it here, then it followed\n             * a value, and since we don't want to misinterpret the next operator as a unary operator, we look\n             * ahead and grab the next operator if it's not preceded by a value.\n             */\n            if (sOp == ' ') {\n                if (iValue < asValues.length - 1 && !asValues[iValue]) {\n                    iValue++;\n                    sOp = asValues[iValue++]\n                } else {\n                    fError = true;\n                    break;\n                }\n            }\n\n            if (!sOp) break;\n\n            var aBinOp = (this.achGroup[0] == '<'? Debugger.aDECOpPrecedence : Debugger.aBinOpPrecedence);\n            if (!aBinOp[sOp]) {\n                fError = true;\n                break;\n            }\n            if (aOps.length && aBinOp[sOp] <= aBinOp[aOps[aOps.length - 1]]) {\n                this.evalOps(aVals, aOps, 1);\n            }\n            aOps.push(sOp);\n\n            /*\n             * The MACRO-10 binary shifting operator assumes a base-10 shift count, regardless of the current\n             * base, so we must override the current base to ensure the count is parsed correctly.\n             */\n            this.nBase = (sOp == '^_')? 10 : nBase;\n            nUnary = 0;\n        }\n\n        if (fError || !this.evalOps(aVals, aOps) || aVals.length != 1) {\n            fError = true;\n        }\n\n        if (!fError) {\n            value = aVals.pop();\n\n        } else if (!aUndefined) {\n            this.println(\"parse error (\" + (sValue || sOp) + \")\");\n        }\n\n        this.nBase = nBasePrev;\n        return value;\n    }\n\n    /**\n     * parseASCII(sExp, chDelim, nBits, cchMax)\n     *\n     * @this {Debugger}\n     * @param {string} sExp\n     * @param {string} chDelim\n     * @param {number} nBits\n     * @param {number} cchMax\n     * @return {string|undefined}\n     */\n    parseASCII(sExp, chDelim, nBits, cchMax)\n    {\n        var i;\n        while ((i = sExp.indexOf(chDelim)) >= 0) {\n            var v = 0;\n            var j = i + 1;\n            var cch = cchMax;\n            while (j < sExp.length) {\n                var ch = sExp[j++];\n                if (ch == chDelim) {\n                    cch = -1;\n                    break;\n                }\n                if (!cch) break;\n                cch--;\n                var c = ch.charCodeAt(0);\n                if (nBits == 7) {\n                    c &= 0x7F;\n                } else {\n                    c = (c - 0x20) & 0x3F;\n                }\n                v = this.truncate(v * Math.pow(2, nBits) + c, nBits * cchMax, true);\n            }\n            if (cch >= 0) {\n                this.println(\"parse error (\" + chDelim + sExp + chDelim + \")\");\n                return undefined;\n            } else {\n                sExp = sExp.substr(0, i) + this.toStrBase(v, -1) + sExp.substr(j);\n            }\n        }\n        return sExp;\n    }\n\n    /**\n     * parseExpression(sExp, fQuiet)\n     *\n     * A quick-and-dirty expression parser.  It takes an expression like:\n     *\n     *      EDX+EDX*4+12345678\n     *\n     * and builds a value stack in aVals and a \"binop\" (binary operator) stack in aOps:\n     *\n     *      aVals       aOps\n     *      -----       ----\n     *      EDX         +\n     *      EDX         *\n     *      4           +\n     *      ...\n     *\n     * We pop 1 \"binop\" from aOps and 2 values from aVals whenever a \"binop\" of lower priority than its\n     * predecessor is encountered, evaluate, and push the result back onto aVals.  Only selected unary\n     * operators are supported (eg, negate and complement); no ternary operators like '?:' are supported.\n     *\n     * fQuiet can be used to pass an array that collects any undefined variables that parseExpression()\n     * encounters; the value of an undefined variable is zero.  This mode was added for components that need\n     * to support expressions containing \"fixups\" (ie, values that must be determined later).\n     *\n     * @this {Debugger}\n     * @param {string|undefined} sExp\n     * @param {Array|undefined|boolean} [fQuiet]\n     * @return {number|undefined} numeric value, or undefined if sExp contains any undefined or invalid values\n     */\n    parseExpression(sExp, fQuiet)\n    {\n        var value = undefined;\n        var fPrint = (fQuiet === false);\n        var aUndefined = Array.isArray(fQuiet)? fQuiet : undefined;\n\n        if (sExp) {\n\n            /*\n             * The default delimiting characters for grouped expressions are braces; they can be changed by altering\n             * achGroup, but when that happens, instead of changing our regular expressions and operator tables,\n             * we simply replace all achGroup characters with braces in the given expression.\n             *\n             * Why not use parentheses for grouped expressions?  Because some debuggers use parseReference() to perform\n             * parenthetical value replacements in message strings, and they don't want parentheses taking on a different\n             * meaning.  And for some machines, like the PDP-10, the convention is to use parentheses for other things,\n             * like indexed addressing, and to use angle brackets for grouped expressions.\n             */\n            if (this.achGroup[0] != '{') {\n                sExp = sExp.split(this.achGroup[0]).join('{').split(this.achGroup[1]).join('}');\n            }\n\n            /*\n             * Quoted ASCII characters can have a numeric value, too, which must be converted now, to avoid any\n             * conflicts with the operators below.\n             */\n            sExp = this.parseASCII(sExp, '\"', 7, 5);    // MACRO-10 packs up to 5 7-bit ASCII codes into a value\n            if (!sExp) return value;\n            sExp = this.parseASCII(sExp, \"'\", 6, 6);    // MACRO-10 packs up to 6 6-bit ASCII (SIXBIT) codes into a value\n            if (!sExp) return value;\n\n            /*\n             * All browsers (including, I believe, IE9 and up) support the following idiosyncrasy of a RegExp split():\n             * when the RegExp uses a capturing pattern, the resulting array will include entries for all the pattern\n             * matches along with the non-matches.  This effectively means that, in the set of expressions that we\n             * support, all even entries in asValues will contain \"values\" and all odd entries will contain \"operators\".\n             *\n             * Although I started listing the operators in the RegExp in \"precedential\" order, that's not important;\n             * what IS important is listing operators than contain shorter operators first.  For example, bitwise\n             * shift operators must be listed BEFORE the logical less-than or greater-than operators.  The aBinOp tables\n             * (aBinOpPrecedence and aDECOpPrecedence) are what determine precedence, not the RegExp.\n             *\n             * Also, to better accommodate MACRO-10 syntax, I've replaced the single '^' for XOR with '^!', and I've\n             * added '!' as an alias for '|' (bitwise inclusive-or), '^-' as an alias for '~' (one's complement operator),\n             * and '_' as a shift operator (+/- values specify a left/right shift, and the count is not limited to 32).\n             *\n             * And to avoid conflicts with MACRO-10 syntax, I've replaced the original mod operator ('%') with '^/'.\n             *\n             * The MACRO-10 binary shifting suffix ('B') is a bit more problematic, since a capital B can also appear\n             * inside symbols, or inside hex values.  So if the default base is NOT 16, then I pre-scan for that suffix\n             * and replace all non-symbolic occurrences with an internal shift operator ('^_').\n             *\n             * Note that Str.parseInt(), which parseValue() relies on, supports both the MACRO-10 base prefix overrides\n             * and the binary shifting suffix ('B'), but since that suffix can also be a bracketed expression, we have to\n             * support it here as well.\n             *\n             * MACRO-10 supports only a subset of all the PCjs operators; for example, MACRO-10 doesn't support any of\n             * the boolean logical/compare operators.  But unless we run into conflicts, I prefer sticking with this\n             * common set of operators.\n             *\n             * All whitespace in the expression is collapsed to single spaces, and space has been added to the list\n             * of \"operators\", but its sole function is as a separator, not as an operator.  parseArray() will ignore\n             * single spaces as long as they are preceded and/or followed by a \"real\" operator.  It would be dangerous\n             * to remove spaces entirely, because if an operator-less expression like \"A B\" was passed in, we would want\n             * that to generate an error; if we converted it to \"AB\", evaluation might inadvertently succeed.\n             */\n            var regExp = /({|}|\\|\\||&&|\\||\\^!|\\^B|\\^O|\\^D|\\^L|\\^-|~|\\^_|_|&|!=|!|==|>=|>>>|>>|>|<=|<<|<|-|\\+|\\^\\/|\\/|\\*|,,| )/;\n            if (this.nBase != 16) {\n                sExp = sExp.replace(/(^|[^A-Z0-9$%.])([0-9]+)B/, \"$1$2^_\").replace(/\\s+/g, ' ');\n            }\n            var asValues = sExp.split(regExp);\n            value = this.parseArray(asValues, 0, asValues.length, this.nBase, aUndefined);\n            if (value !== undefined && fPrint) {\n                this.printValue(null, value);\n            }\n        }\n        return value;\n    }\n\n    /**\n     * parseReference(s)\n     *\n     * Returns the given string with any \"{expression}\" sequences replaced with the value of the expression,\n     * and any \"[address]\" references replaced with the contents of the address.  Expressions are parsed BEFORE\n     * addresses.\n     *\n     * @this {Debugger}\n     * @param {string} s\n     * @return {string|undefined}\n     */\n    parseReference(s)\n    {\n        var a;\n        var chOpen = this.achGroup[0];\n        var chClose = this.achGroup[1];\n        var chEscape = (chOpen == '(' || chOpen == '{' || chOpen == '[')? '\\\\' : '';\n        var chInnerEscape = (chOpen == '['? '\\\\' : '');\n        var reSubExp = new RegExp(chEscape + chOpen + \"([^\" + chInnerEscape + chOpen + chInnerEscape + chClose + \"]+)\" + chEscape + chClose);\n        while (a = s.match(reSubExp)) {\n            var value = this.parseExpression(a[1]);\n            if (value === undefined) return undefined;\n            var sSearch = chOpen + a[1] + chClose;\n            var sReplace = value != null? this.toStrBase(value) : \"undefined\";\n            /*\n             * Note that by default, the String replace() method only replaces the FIRST occurrence,\n             * and there MIGHT be more than one occurrence of the expression we just parsed, so we could\n             * do this instead:\n             *\n             *      s = s.split(sSearch).join(sReplace);\n             *\n             * However, that's knd of an expensive (slow) solution, and it's not strictly necessary, since\n             * any additional identical expressions will be picked up on a subsequent iteration through this loop.\n             */\n            s = s.replace(sSearch, sReplace);\n        }\n        if (this.achAddress.length) {\n            chOpen = this.achAddress[0];\n            chClose = this.achAddress[1];\n            chEscape = (chOpen == '(' || chOpen == '{' || chOpen == '[')? '\\\\' : '';\n            chInnerEscape = (chOpen == '['? '\\\\' : '');\n            reSubExp = new RegExp(chEscape + chOpen + \"([^\" + chInnerEscape + chOpen + chInnerEscape + chClose + \"]+)\" + chEscape + chClose);\n            while (a = s.match(reSubExp)) {\n                s = this.parseAddrReference(s, a[1]);\n            }\n        }\n        return this.parseSysVars(s);\n    }\n\n    /**\n     * parseSysVars(s)\n     *\n     * Returns the given string with any recognized \"$var\" replaced with its value; eg:\n     *\n     *      $ops: the number of opcodes executed since the last time it was displayed (or reset)\n     *\n     * @this {Debugger}\n     * @param {string} s\n     * @return {string}\n     */\n    parseSysVars(s)\n    {\n        var a;\n        while (a = s.match(/\\$([a-z]+)/i)) {\n            var v = null;\n            switch(a[1].toLowerCase()) {\n            case \"ops\":\n                v = this.cOpcodes - this.cOpcodesStart;\n                break;\n            }\n            if (v == null) break;\n            s = s.replace(a[0], v.toString());\n        }\n        return s;\n    }\n\n    /**\n     * parseUnary(value, nUnary)\n     *\n     * nUnary is actually a small \"stack\" of unary operations encoded in successive pairs of bits.\n     * As parseExpression() encounters each unary operator, nUnary is shifted left 2 bits, and the\n     * new unary operator is encoded in bits 0 and 1 (0b00 is none, 0b01 is negate, 0b10 is complement,\n     * and 0b11 is reserved).  Here, we process the bits in reverse order (hence the stack-like nature),\n     * ensuring that we process the unary operators associated with this value right-to-left.\n     *\n     * Since bitwise operators see only 32 bits, more than 16 unary operators cannot be supported\n     * using this method.  We'll let parseExpression() worry about that; if it ever happens in practice,\n     * then we'll have to switch to a more \"expensive\" approach (eg, an actual array of unary operators).\n     *\n     * @this {Debugger}\n     * @param {number} value\n     * @param {number} nUnary\n     * @return {number}\n     */\n    parseUnary(value, nUnary)\n    {\n        while (nUnary) {\n            switch(nUnary & 0o3) {\n            case 1:\n                value = -this.truncate(value);\n                break;\n            case 2:\n                value = this.evalXOR(value, -1);        // this is easier than adding an evalNOT()...\n                break;\n            case 3:\n                var bit = 35;                           // simple left-to-right zero-bit-counting loop...\n                while (bit >= 0 && !this.evalAND(value, Math.pow(2, bit))) bit--;\n                value = 35 - bit;\n                break;\n            }\n            nUnary >>>= 2;\n        }\n        return value;\n    }\n\n    /**\n     * parseValue(sValue, sName, fQuiet, nUnary)\n     *\n     * @this {Debugger}\n     * @param {string|undefined} sValue\n     * @param {string|null} [sName] is the name of the value, if any\n     * @param {Array|undefined|boolean} [fQuiet]\n     * @param {number} [nUnary] (0 for none, 1 for negate, 2 for complement, 3 for leading zeros)\n     * @return {number|undefined} numeric value, or undefined if sValue is either undefined or invalid\n     */\n    parseValue(sValue, sName, fQuiet, nUnary = 0)\n    {\n        var value;\n        var aUndefined = Array.isArray(fQuiet)? fQuiet : undefined;\n\n        if (sValue != null) {\n            var iReg = this.getRegIndex(sValue);\n            if (iReg >= 0) {\n                value = this.getRegValue(iReg);\n            } else {\n                value = this.getVariable(sValue);\n                if (value != null) {\n                    var sUndefined = this.getVariableFixup(sValue);\n                    if (sUndefined) {\n                        if (aUndefined) {\n                            aUndefined.push(sUndefined);\n                        } else {\n                            var valueUndefined = this.parseExpression(sUndefined, fQuiet);\n                            if (valueUndefined !== undefined) {\n                                value += valueUndefined;\n                            } else {\n                                if (!fQuiet) {\n                                    this.println(\"undefined \" + (sName || \"value\") + \": \" + sValue + \" (\" + sUndefined + \")\");\n                                }\n                                value = undefined;\n                            }\n                        }\n                    }\n                } else {\n                    /*\n                     * A feature of MACRO-10 is that any single-digit number is automatically interpreted as base-10.\n                     */\n                    value = Str.parseInt(sValue, sValue.length > 1 || this.nBase > 10? this.nBase : 10);\n                }\n            }\n            if (value != null) {\n                value = this.truncate(this.parseUnary(value, nUnary));\n            } else {\n                if (!fQuiet) {\n                    this.println(\"invalid \" + (sName || \"value\") + \": \" + sValue);\n                }\n            }\n        } else {\n            if (!fQuiet) {\n                this.println(\"missing \" + (sName || \"value\"));\n            }\n        }\n        return value;\n    }\n\n    /**\n     * printValue(sVar, value)\n     *\n     * @this {Debugger}\n     * @param {string|null} sVar\n     * @param {number|undefined} value\n     * @return {boolean} true if value defined, false if not\n     */\n    printValue(sVar, value)\n    {\n        var sValue;\n        var fDefined = false;\n        if (value !== undefined) {\n            fDefined = true;\n            if (this.nBase == 8) {\n                sValue = this.toStrBase(value, this.nBits, 8, 1) + \"  \" + value + '.';\n            } else {\n                sValue = this.toStrBase(value, this.nBits, 16, 1) + \"  \" + this.toStrBase(value, this.nBits, 8, 1) + \"  \" + this.toStrBase(value, this.nBits, 2, this.nBits <= 32? 8 : 6) + \"  \" + value + '.';\n            }\n            if (value >= 0x20 && value < 0x7F) {\n                sValue += \" '\" + String.fromCharCode(value) + \"'\";\n            }\n        }\n        sVar = (sVar != null? (sVar + \": \") : \"\");\n        this.println(sVar + sValue);\n        return fDefined;\n    }\n\n    /**\n     * resetVariables()\n     *\n     * @this {Debugger}\n     * @return {Object}\n     */\n    resetVariables()\n    {\n        var a = this.aVariables;\n        this.aVariables = {};\n        return a;\n    }\n\n    /**\n     * restoreVariables(a)\n     *\n     * @this {Debugger}\n     * @param {Object} a (from previous resetVariables() call)\n     */\n    restoreVariables(a)\n    {\n        this.aVariables = a;\n    }\n\n    /**\n     * printVariable(sVar)\n     *\n     * @this {Debugger}\n     * @param {string} [sVar]\n     * @return {boolean} true if all value(s) defined, false if not\n     */\n    printVariable(sVar)\n    {\n        var cVariables = 0;\n        if (this.aVariables) {\n            if (sVar) {\n                return this.printValue(sVar, this.aVariables[sVar] && this.aVariables[sVar].value);\n            }\n            var aVars = Object.keys(this.aVariables);\n            aVars.sort();\n            for (var i = 0; i < aVars.length; i++) {\n                this.printValue(aVars[i], this.aVariables[aVars[i]].value);\n                cVariables++;\n            }\n        }\n        return cVariables > 0;\n    }\n\n    /**\n     * delVariable(sVar)\n     *\n     * @this {Debugger}\n     * @param {string} sVar\n     */\n    delVariable(sVar)\n    {\n        delete this.aVariables[sVar];\n    }\n\n    /**\n     * getVariable(sVar)\n     *\n     * @this {Debugger}\n     * @param {string} sVar\n     * @return {number|undefined}\n     */\n    getVariable(sVar)\n    {\n        if (this.aVariables[sVar]) {\n            return this.aVariables[sVar].value;\n        }\n        sVar = sVar.substr(0, 6);\n        return this.aVariables[sVar] && this.aVariables[sVar].value;\n    }\n\n    /**\n     * getVariableFixup(sVar)\n     *\n     * @this {Debugger}\n     * @param {string} sVar\n     * @return {string|undefined}\n     */\n    getVariableFixup(sVar)\n    {\n        return this.aVariables[sVar] && this.aVariables[sVar].sUndefined;\n    }\n\n    /**\n     * isVariable(sVar)\n     *\n     * @this {Debugger}\n     * @param {string} sVar\n     * @return {boolean}\n     */\n    isVariable(sVar)\n    {\n        return this.aVariables[sVar] !== undefined;\n    }\n\n    /**\n     * setVariable(sVar, value, sUndefined)\n     *\n     * @this {Debugger}\n     * @param {string} sVar\n     * @param {number} value\n     * @param {string|undefined} [sUndefined]\n     */\n    setVariable(sVar, value, sUndefined)\n    {\n        this.aVariables[sVar] = {value, sUndefined};\n    }\n\n    /**\n     * toStrBase(n, nBits, nBase, nGrouping)\n     *\n     * Use this instead of Str's toOct()/toDec()/toHex() to convert numbers to the Debugger's default base.\n     *\n     * @this {Debugger}\n     * @param {number|null|undefined} n\n     * @param {number} [nBits] (-1 to strip leading zeros, 0 to allow a variable number of digits)\n     * @param {number} [nBase]\n     * @param {number} [nGrouping] (if nBase is 2, this is a grouping; otherwise, it's a prefix condition)\n     * @return {string}\n     */\n    toStrBase(n, nBits = 0, nBase = 0, nGrouping = 0)\n    {\n        var s;\n        switch(nBase || this.nBase) {\n        case 2:\n            s = Str.toBin(n, nBits > 0? nBits : 0, nGrouping);\n            break;\n        case 8:\n            s = Str.toOct(n, nBits > 0? ((nBits + 2)/3)|0 : 0, !!nGrouping);\n            break;\n        case 10:\n            /*\n             * The multiplier is actually Math.log(2)/Math.log(10), but an approximation is more than adequate.\n             */\n            s = Str.toDec(n, nBits > 0? Math.ceil(nBits * 0.3) : 0);\n            break;\n        case 16:\n        default:\n            s = Str.toHex(n, nBits > 0? ((nBits + 3) >> 2) : 0, !!nGrouping);\n            break;\n        }\n        return (nBits < 0? Str.stripLeadingZeros(s) : s);\n    }\n}\n\nif (DEBUGGER) {\n\n    /*\n     * These are our operator precedence tables.  Operators toward the bottom (with higher values) have\n     * higher precedence.  aBinOpPrecedence was our original table; we had to add aDECOpPrecedence because\n     * the precedence of operators in DEC's MACRO-10 expressions differ.  Having separate tables also allows\n     * us to remove operators that shouldn't be supported, but unless some operator creates a problem,\n     * I prefer to keep as much commonality between the tables as possible.\n     *\n     * Missing from these tables are the (limited) set of unary operators we support (negate and complement),\n     * since this is only a BINARY operator precedence, not a general-purpose precedence table.  Assume that\n     * all unary operators take precedence over all binary operators.\n     */\n    Debugger.aBinOpPrecedence = {\n        '||':   5,      // logical OR\n        '&&':   6,      // logical AND\n        '!':    7,      // bitwise OR (conflicts with logical NOT, but we never supported that)\n        '|':    7,      // bitwise OR\n        '^!':   8,      // bitwise XOR (added by MACRO-10 sometime between the 1972 and 1978 versions)\n        '&':    9,      // bitwise AND\n        '!=':   10,     // inequality\n        '==':   10,     // equality\n        '>=':   11,     // greater than or equal to\n        '>':    11,     // greater than\n        '<=':   11,     // less than or equal to\n        '<':    11,     // less than\n        '>>>':  12,     // unsigned bitwise right shift\n        '>>':   12,     // bitwise right shift\n        '<<':   12,     // bitwise left shift\n        '-':    13,     // subtraction\n        '+':    13,     // addition\n        '^/':   14,     // remainder\n        '/':    14,     // division\n        '*':    14,     // multiplication\n        '_':    19,     // MACRO-10 shift operator\n        '^_':   19,     // MACRO-10 internal shift operator (converted from 'B' suffix form that MACRO-10 uses)\n        '{':    20,     // open grouped expression (converted from achGroup[0])\n        '}':    20      // close grouped expression (converted from achGroup[1])\n    };\n    Debugger.aDECOpPrecedence = {\n        ',,':   1,      // high-word,,low-word\n        '||':   5,      // logical OR\n        '&&':   6,      // logical AND\n        '!=':   10,     // inequality\n        '==':   10,     // equality\n        '>=':   11,     // greater than or equal to\n        '>':    11,     // greater than\n        '<=':   11,     // less than or equal to\n        '<':    11,     // less than\n        '>>>':  12,     // unsigned bitwise right shift\n        '>>':   12,     // bitwise right shift\n        '<<':   12,     // bitwise left shift\n        '-':    13,     // subtraction\n        '+':    13,     // addition\n        '^/':   14,     // remainder\n        '/':    14,     // division\n        '*':    14,     // multiplication\n        '!':    15,     // bitwise OR (conflicts with logical NOT, but we never supported that)\n        '|':    15,     // bitwise OR\n        '^!':   15,     // bitwise XOR (added by MACRO-10 sometime between the 1972 and 1978 versions)\n        '&':    15,     // bitwise AND\n        '_':    19,     // MACRO-10 shift operator\n        '^_':   19,     // MACRO-10 internal shift operator (converted from 'B' suffix form that MACRO-10 uses)\n        '{':    20,     // open grouped expression (converted from achGroup[0])\n        '}':    20      // close grouped expression (converted from achGroup[1])\n    };\n\n    /*\n     * Assorted constants\n     */\n    Debugger.TWO_POW32 = Math.pow(2, 32);\n\n}   // endif DEBUGGER\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/debugger.js (C) Jeff Parsons 2012-2018\n */\n\n\n/**\n * DebuggerPDP11 Address Object\n *\n *      addr            address\n *      fPhysical       true if this is a physical address\n *      fTemporary      true if this is a temporary breakpoint address\n *      nBase           set if the address contained an explicit base (eg, 16, 10, 8, etc)\n *      sCmd            set for breakpoint addresses if there's an associated command string\n *      aCmds           preprocessed commands (from sCmd)\n *\n * @typedef {{\n *      addr:(number|null),\n *      fPhysical:(boolean),\n *      fTemporary:(boolean),\n *      nBase:(number|undefined),\n *      sCmd:(string|undefined),\n *      aCmds:(Array.<string>|undefined)\n * }}\n */\nvar DbgAddrPDP11;\n\nclass DebuggerPDP11 extends Debugger {\n    /**\n     * DebuggerPDP11(parmsDbg)\n     *\n     * The DebuggerPDP11 component supports the following optional (parmsDbg) properties:\n     *\n     *      commands: string containing zero or more commands, separated by ';'\n     *\n     *      messages: string containing zero or more message categories to enable;\n     *      multiple categories must be separated by '|' or ';'.  Parsed by messageInit().\n     *\n     * The DebuggerPDP11 component is an optional component that implements a variety of user\n     * commands for controlling the CPU, dumping and editing memory, etc.\n     *\n     * @param {Object} parmsDbg\n     */\n    constructor(parmsDbg)\n    {\n        if (DEBUGGER) {\n\n            super(parmsDbg);\n\n            /*\n             * Since this Debugger doesn't use replaceRegs(), we can use parentheses instead of braces.\n             */\n            this.fInit = false;\n\n            this.achGroup = ['(',')'];\n            this.achAddress = [];\n\n            /*\n             * Most commands that require an address call parseAddr(), which defaults to dbgAddrNextCode\n             * or dbgAddrNextData when no address has been given.  doDump() and doUnassemble(), in turn,\n             * update dbgAddrNextData and dbgAddrNextCode, respectively, when they're done.\n             *\n             * For TEMPORARY breakpoint addresses, we set fTemporary to true, so that they can be automatically\n             * cleared when they're hit.\n             */\n            this.dbgAddrNextCode = this.newAddr();\n            this.dbgAddrNextData = this.newAddr();\n            this.dbgAddrAssemble = this.newAddr();\n\n            /*\n             * aSymbolTable is an array of SymbolTable objects, one per ROM or other chunk of address space,\n             * where each object contains the following properties:\n             *\n             *      sModule\n             *      addr (physical address, if any; eg, symbols for a ROM)\n             *      len\n             *      aSymbols\n             *      aOffsets\n             *\n             * See addSymbols() for more details, since that's how callers add sets of symbols to the table.\n             */\n            this.aSymbolTable = [];\n\n            /*\n             * clearBreakpoints() initializes the breakpoints lists: aBreakExec is a list of addresses\n             * to halt on whenever attempting to execute an instruction at the corresponding address,\n             * and aBreakRead and aBreakWrite are lists of addresses to halt on whenever a read or write,\n             * respectively, occurs at the corresponding address.\n             *\n             * NOTE: Curiously, after upgrading the Google Closure Compiler from v20141215 to v20150609,\n             * the resulting compiled code would crash in clearBreakpoints(), because the (renamed) aBreakRead\n             * property was already defined.  To eliminate whatever was confusing the Closure Compiler, I've\n             * explicitly initialized all the properties that clearBreakpoints() (re)initializes.\n             */\n            this.aBreakExec = this.aBreakRead = this.aBreakWrite = [];\n            this.clearBreakpoints();\n\n            /*\n             * The new \"bn\" command allows you to specify a number of instructions to execute and then stop;\n             * \"bn 0\" disables any outstanding count.\n             */\n            this.nBreakInstructions = 0;\n\n            /*\n             * Execution history is allocated by historyInit() whenever checksEnabled() conditions change.\n             * Execution history is updated whenever the CPU calls checkInstruction(), which will happen\n             * only when checksEnabled() returns true (eg, whenever one or more breakpoints have been set).\n             * This ensures that, by default, the CPU runs as fast as possible.\n             */\n            this.iInstructionHistory = 0;\n            this.aInstructionHistory = [];\n            this.nextHistory = undefined;\n            this.historyInit();\n\n            /*\n             * Initialize DebuggerPDP11 message support.\n             */\n            this.dbg = this;\n            this.afnDumpers = {};\n            this.bitsMessage = this.bitsWarning = 0;\n            this.sMessagePrev = null;\n            this.aMessageBuffer = [];\n            this.messageInit(parmsDbg['messages']);\n            this.sInitCommands = parmsDbg['commands'];\n\n            /*\n             * Define remaining miscellaneous DebuggerPDP11 properties.\n             */\n            this.opTable = DebuggerPDP11.OPTABLE;\n            this.aOpReserved = [];\n            this.nStep = 0;\n            this.sCmdTracePrev = null;\n            this.sCmdDumpPrev = null;\n            this.fIgnoreNextCheckFault = false;     // TODO: Does this serve any purpose on a PDP-11?\n            this.nSuppressBreaks = 0;\n            this.cInstructions = this.cInstructionsStart = 0;\n            this.nCycles = this.nCyclesStart = this.msStart = 0;\n            this.controlDebug = null;\n            this.panel = null;\n\n            /*\n             * Make it easier to access DebuggerPDP11 commands from an external REPL (eg, the WebStorm\n             * \"live\" console window); eg:\n             *\n             *      pdp11('r')\n             *      pdp11('dw 0:0')\n             *      pdp11('h')\n             *      ...\n             */\n            var dbg = this;\n            if (window) {\n                if (window[PDP11.APPCLASS] === undefined) {\n                    window[PDP11.APPCLASS] = function(s) { return dbg.doCommands(s); };\n                }\n            } else {\n                if (global[PDP11.APPCLASS] === undefined) {\n                    global[PDP11.APPCLASS] = function(s) { return dbg.doCommands(s); };\n                }\n            }\n\n        }   // endif DEBUGGER\n    }\n\n    /**\n     * getAddr(dbgAddr, fWrite, nb)\n     *\n     * @this {DebuggerPDP11}\n     * @param {DbgAddrPDP11|null} [dbgAddr]\n     * @param {boolean} [fWrite]\n     * @param {number} [nb] number of bytes to check (1 or 2); default is 1\n     * @return {number} is the corresponding linear address, or PDP11.ADDR_INVALID\n     */\n    getAddr(dbgAddr, fWrite, nb)\n    {\n        var addr = dbgAddr && dbgAddr.addr;\n        if (addr == null) addr = PDP11.ADDR_INVALID;\n        return addr;\n    }\n\n    /**\n     * newAddr(addr, fPhysical, nBase)\n     *\n     * Returns a NEW DbgAddrPDP11 object, initialized with specified values and/or defaults.\n     *\n     * @this {DebuggerPDP11}\n     * @param {number|null} [addr]\n     * @param {boolean} [fPhysical]\n     * @param {number} [nBase]\n     * @return {DbgAddrPDP11}\n     */\n    newAddr(addr = null, fPhysical = false, nBase)\n    {\n        return {addr: addr, fPhysical: fPhysical, fTemporary: false, nBase: nBase};\n    }\n\n    /**\n     * setAddr(dbgAddr, addr)\n     *\n     * Updates an EXISTING DbgAddrPDP11 object, initialized with specified values and/or defaults.\n     *\n     * @this {DebuggerPDP11}\n     * @param {DbgAddrPDP11} dbgAddr\n     * @param {number} addr\n     * @return {DbgAddrPDP11}\n     */\n    setAddr(dbgAddr, addr)\n    {\n        dbgAddr.addr = addr;\n        dbgAddr.fTemporary = false;\n        dbgAddr.nBase = undefined;\n        return dbgAddr;\n    }\n\n    /**\n     * packAddr(dbgAddr)\n     *\n     * Packs a DbgAddrPDP11 object into an Array suitable for saving in a machine state object.\n     *\n     * @this {DebuggerPDP11}\n     * @param {DbgAddrPDP11} dbgAddr\n     * @return {Array}\n     */\n    packAddr(dbgAddr)\n    {\n        return [dbgAddr.addr, dbgAddr.fPhysical, dbgAddr.nBase, dbgAddr.fTemporary, dbgAddr.sCmd];\n    }\n\n    /**\n     * unpackAddr(aAddr)\n     *\n     * Unpacks a DbgAddrPDP11 object from an Array created by packAddr() and restored from a saved machine state.\n     *\n     * @this {DebuggerPDP11}\n     * @param {Array} aAddr\n     * @return {DbgAddrPDP11}\n     */\n    unpackAddr(aAddr)\n    {\n        var dbgAddr = this.newAddr(aAddr[0], aAddr[1], aAddr[2]);\n        dbgAddr.fTemporary = aAddr[3];\n        if (aAddr[4]) {\n            dbgAddr.aCmds = this.parseCommand(dbgAddr.sCmd = aAddr[4]);\n        }\n        return dbgAddr;\n    }\n\n    /**\n     * initBus(bus, cpu, dbg)\n     *\n     * @this {DebuggerPDP11}\n     * @param {ComputerPDP11} cmp\n     * @param {BusPDP11} bus\n     * @param {CPUStatePDP11} cpu\n     * @param {DebuggerPDP11} dbg\n     */\n    initBus(cmp, bus, cpu, dbg)\n    {\n        this.bus = bus;\n        this.cmp = cmp;\n        this.cpu = cpu;\n        this.panel = cmp.panel;\n\n        /*\n         * Re-initialize Debugger message support if necessary\n         */\n        var sMessages = /** @type {string|undefined} */ (cmp.getMachineParm('messages'));\n        if (sMessages) this.messageInit(sMessages);\n\n        if (this.cpu.model < PDP11.MODEL_1140) {\n            this.aOpReserved = this.aOpReserved.concat(DebuggerPDP11.OP1140);\n        }\n        if (this.cpu.model < PDP11.MODEL_1145) {\n            this.aOpReserved = this.aOpReserved.concat(DebuggerPDP11.OP1145);\n        }\n\n        this.messageDump(MessagesPDP11.BUS,  function onDumpBus(asArgs) { dbg.dumpBus(asArgs); });\n\n        this.setReady();\n    }\n\n    /**\n     * setBinding(sType, sBinding, control, sValue)\n     *\n     * @this {DebuggerPDP11}\n     * @param {string|null} sType is the type of the HTML control (eg, \"button\", \"textarea\", \"register\", \"flag\", \"rled\", etc)\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"debugInput\")\n     * @param {HTMLElement} control is the HTML control DOM object (eg, HTMLButtonElement)\n     * @param {string} [sValue] optional data value\n     * @return {boolean} true if binding was successful, false if unrecognized binding request\n     */\n    setBinding(sType, sBinding, control, sValue)\n    {\n        var dbg = this;\n        switch (sBinding) {\n\n        case \"debugInput\":\n            this.bindings[sBinding] = control;\n            this.controlDebug = control;\n            /*\n             * For halted machines, this is fine, but for auto-start machines, it can be annoying.\n             *\n             *      control.focus();\n             */\n            control.onkeydown = function onKeyDownDebugInput(event) {\n                var sCmd;\n                if (event.keyCode == Keys.KEYCODE.CR) {\n                    sCmd = control.value;\n                    control.value = \"\";\n                    dbg.doCommands(sCmd, true);\n                }\n                else if (event.keyCode == Keys.KEYCODE.ESC) {\n                    control.value = sCmd = \"\";\n                }\n                else {\n                    if (event.keyCode == Keys.KEYCODE.UP) {\n                        sCmd = dbg.getPrevCommand();\n                    }\n                    else if (event.keyCode == Keys.KEYCODE.DOWN) {\n                        sCmd = dbg.getNextCommand();\n                    }\n                    if (sCmd != null) {\n                        var cch = sCmd.length;\n                        control.value = sCmd;\n                        control.setSelectionRange(cch, cch);\n                    }\n                }\n                if (sCmd != null && event.preventDefault) event.preventDefault();\n            };\n            return true;\n\n        case \"debugEnter\":\n            this.bindings[sBinding] = control;\n            Web.onClickRepeat(\n                control,\n                500, 100,\n                function onClickDebugEnter(fRepeat) {\n                    if (dbg.controlDebug) {\n                        var sCmd = dbg.controlDebug.value;\n                        dbg.controlDebug.value = \"\";\n                        dbg.doCommands(sCmd, true);\n                        return true;\n                    }\n                    if (DEBUG) dbg.log(\"no debugger input buffer\");\n                    return false;\n                }\n            );\n            return true;\n\n        case \"step\":\n            this.bindings[sBinding] = control;\n            Web.onClickRepeat(\n                control,\n                500, 100,\n                function onClickStep(fRepeat) {\n                    var fCompleted = false;\n                    if (!dbg.isBusy(true)) {\n                        dbg.setBusy(true);\n                        fCompleted = dbg.stepCPU(fRepeat? 1 : 0, null);\n                        dbg.setBusy(false);\n                    }\n                    return fCompleted;\n                }\n            );\n            return true;\n\n        default:\n            break;\n        }\n        return false;\n    }\n\n    /**\n     * setFocus(fScroll)\n     *\n     * @this {DebuggerPDP11}\n     * @param {boolean} [fScroll] (true if you really want the control scrolled into view)\n     */\n    setFocus(fScroll)\n    {\n        if (this.controlDebug) {\n            /*\n             * This is the recommended work-around to prevent the browser from scrolling the focused element\n             * into view.  The CPU is not a visual component, so when the CPU wants to set focus, the primary intent\n             * is to ensure that keyboard input is fielded properly.\n             */\n            var x = 0, y = 0;\n            if (!fScroll && window) {\n                x = window.scrollX;\n                y = window.scrollY;\n            }\n\n            this.controlDebug.focus();\n\n            if (!fScroll && window) {\n                window.scrollTo(x, y);\n            }\n        }\n    }\n\n    /**\n     * mapUnibus(addr)\n     *\n     * @this {DebuggerPDP11}\n     * @param {number} addr\n     * @return {number}\n     */\n    mapUnibus(addr)\n    {\n        return this.cpu.mapUnibus(addr);\n    }\n\n    /**\n     * getByte(dbgAddr, inc)\n     *\n     * We must route all our memory requests through the CPU now, in case paging is enabled.\n     *\n     * @this {DebuggerPDP11}\n     * @param {DbgAddrPDP11} dbgAddr\n     * @param {number} [inc]\n     * @return {number}\n     */\n    getByte(dbgAddr, inc)\n    {\n        var b = 0xff;\n        var addr = this.getAddr(dbgAddr, false, 1);\n        if (addr !== PDP11.ADDR_INVALID) {\n            b = (dbgAddr.fPhysical || addr > 0xffff)? this.bus.getByteDirect(this.mapUnibus(addr)) : this.cpu.getByteSafe(addr);\n            if (inc) this.incAddr(dbgAddr, inc);\n        }\n        return b;\n    }\n\n    /**\n     * getWord(dbgAddr, inc)\n     *\n     * @this {DebuggerPDP11}\n     * @param {DbgAddrPDP11} dbgAddr\n     * @param {number} [inc]\n     * @return {number}\n     */\n    getWord(dbgAddr, inc)\n    {\n        var w = 0xffff;\n        var addr = this.getAddr(dbgAddr, false, 2);\n        if (addr !== PDP11.ADDR_INVALID) {\n            w = (dbgAddr.fPhysical || addr > 0xffff)? this.bus.getWordDirect(this.mapUnibus(addr)) : this.cpu.getWordSafe(addr);\n            if (inc) this.incAddr(dbgAddr, inc);\n        }\n        return w;\n    }\n\n    /**\n     * setByte(dbgAddr, b, inc)\n     *\n     * @this {DebuggerPDP11}\n     * @param {DbgAddrPDP11} dbgAddr\n     * @param {number} b\n     * @param {number} [inc]\n     */\n    setByte(dbgAddr, b, inc)\n    {\n        var addr = this.getAddr(dbgAddr, true, 1);\n        if (addr !== PDP11.ADDR_INVALID) {\n            if (dbgAddr.fPhysical || addr > 0xffff) {\n                this.bus.setByteDirect(this.mapUnibus(addr), b);\n            } else {\n                this.cpu.setByteSafe(addr, b);\n            }\n            if (inc) this.incAddr(dbgAddr, inc);\n            this.cmp.updateDisplays(-1);\n        }\n    }\n\n    /**\n     * setWord(dbgAddr, w, inc)\n     *\n     * @this {DebuggerPDP11}\n     * @param {DbgAddrPDP11} dbgAddr\n     * @param {number} w\n     * @param {number} [inc]\n     */\n    setWord(dbgAddr, w, inc)\n    {\n        var addr = this.getAddr(dbgAddr, true, 2);\n        if (addr !== PDP11.ADDR_INVALID) {\n            if (dbgAddr.fPhysical || addr > 0xffff) {\n                this.bus.setWordDirect(this.mapUnibus(addr), w);\n            } else {\n                this.cpu.setWordSafe(addr, w);\n            }\n            if (inc) this.incAddr(dbgAddr, inc);\n            this.cmp.updateDisplays(-1);\n        }\n    }\n\n    /**\n     * parseAddr(sAddr, fCode, fNoChecks)\n     *\n     * Address evaluation and validation (eg, range checks) are no longer performed at this stage.  That's\n     * done later, by getAddr(), which returns PDP11.ADDR_INVALID for invalid segments, out-of-range offsets,\n     * etc.  The Debugger's low-level get/set memory functions verify all getAddr() results, but even if an\n     * invalid address is passed through to the Bus memory interfaces, the address will simply be masked with\n     * bus.nBusMask; in the case of PDP11.ADDR_INVALID, that will generally refer to the top of the physical\n     * address space.\n     *\n     * @this {DebuggerPDP11}\n     * @param {string|undefined} sAddr\n     * @param {boolean} [fCode] (true if target is code, false if target is data)\n     * @param {boolean} [fNoChecks] (true when setting breakpoints that may not be valid now, but will be later)\n     * @return {DbgAddrPDP11|null|undefined}\n     */\n    parseAddr(sAddr, fCode, fNoChecks)\n    {\n        var dbgAddr;\n        var dbgAddrNext = (fCode? this.dbgAddrNextCode : this.dbgAddrNextData);\n        var addr = dbgAddrNext.addr;\n        var fPhysical, nBase;\n        if (sAddr !== undefined) {\n            sAddr = this.parseReference(sAddr);\n            var ch = sAddr.charAt(0);\n            if (ch == '%') {\n                fPhysical = true;\n                sAddr = sAddr.substr(1);\n            }\n            dbgAddr = this.findSymbolAddr(sAddr);\n            if (dbgAddr) return dbgAddr;\n            if (sAddr.indexOf(\"0x\") >= 0) {\n                nBase = 16\n            } else if (sAddr.indexOf(\"0o\") >= 0) {\n                nBase = 8;\n            } else if (sAddr.indexOf('.') >= 0) {\n                nBase = 10;\n            }\n            addr = this.parseExpression(sAddr);\n        }\n        if (addr != null) {\n            dbgAddr = this.newAddr(addr, fPhysical, nBase);\n        }\n        return dbgAddr;\n    }\n\n    /**\n     * parseAddrOptions(dbdAddr, sOptions)\n     *\n     * @this {DebuggerPDP11}\n     * @param {DbgAddrPDP11} dbgAddr\n     * @param {string} [sOptions]\n     */\n    parseAddrOptions(dbgAddr, sOptions)\n    {\n        if (sOptions) {\n            var a = sOptions.match(/(['\"])(.*?)\\1/);\n            if (a) {\n                dbgAddr.aCmds = this.parseCommand(dbgAddr.sCmd = a[2]);\n            }\n        }\n    }\n\n    /**\n     * incAddr(dbgAddr, inc)\n     *\n     * @this {DebuggerPDP11}\n     * @param {DbgAddrPDP11} dbgAddr\n     * @param {number} [inc] contains value to increment dbgAddr by (default is 1)\n     */\n    incAddr(dbgAddr, inc)\n    {\n        if (dbgAddr.addr != null) {\n            dbgAddr.addr += (inc || 1);\n        }\n    }\n\n    /**\n     * toStrOffset(off)\n     *\n     * @this {DebuggerPDP11}\n     * @param {number|null|undefined} [off]\n     * @return {string} the hex representation of off\n     */\n    toStrOffset(off)\n    {\n        return this.toStrBase(off);\n    }\n\n    /**\n     * toStrAddr(dbgAddr)\n     *\n     * @this {DebuggerPDP11}\n     * @param {DbgAddrPDP11} dbgAddr\n     * @return {string} the hex representation of the address\n     */\n    toStrAddr(dbgAddr)\n    {\n        return (dbgAddr.fPhysical? '%' : '') + this.toStrOffset(dbgAddr.addr);\n    }\n\n    /**\n     * getSZ(dbgAddr, cchMax)\n     *\n     * Gets zero-terminated (aka \"ASCIIZ\") string from dbgAddr.  It also stops at the first '$', in case this is\n     * a '$'-terminated string -- mainly because I'm lazy and didn't feel like writing a separate get() function.\n     * Yes, a zero-terminated string containing a '$' will be prematurely terminated, and no, I don't care.\n     *\n     * @this {DebuggerPDP11}\n     * @param {DbgAddrPDP11} dbgAddr\n     * @param {number} [cchMax] (default is 256)\n     * @return {string} (and dbgAddr advanced past the terminating zero)\n     */\n    getSZ(dbgAddr, cchMax)\n    {\n        var s = \"\";\n        cchMax = cchMax || 256;\n        while (s.length < cchMax) {\n            var b = this.getByte(dbgAddr, 1);\n            if (!b || b == 0x24 || b >= 127) break;\n            s += (b >= 32? String.fromCharCode(b) : '.');\n        }\n        return s;\n    }\n\n    /**\n     * dumpBlocks(aBlocks, sAddr)\n     *\n     * @this {DebuggerPDP11}\n     * @param {Array} aBlocks\n     * @param {string} [sAddr] (optional block address)\n     */\n    dumpBlocks(aBlocks, sAddr)\n    {\n        var addr = 0, i = 0, n = aBlocks.length;\n\n        if (sAddr) {\n            addr = this.getAddr(this.parseAddr(sAddr));\n            if (addr === PDP11.ADDR_INVALID) {\n                this.println(\"invalid address: \" + sAddr);\n                return;\n            }\n            i = addr >>> this.bus.nBlockShift;\n            n = 1;\n        }\n\n        this.println(\"blockid   physical   blockaddr  used    size    type\");\n        this.println(\"--------  ---------  ---------  ------  ------  ----\");\n\n        var typePrev = -1, cPrev = 0;\n        while (n--) {\n            var block = aBlocks[i];\n            if (block.type == typePrev) {\n                if (!cPrev++) this.println(\"...\");\n            } else {\n                typePrev = block.type;\n                var sType = MemoryPDP11.TYPE_NAMES[typePrev];\n                if (block) {\n                    this.println(Str.toHex(block.id, 8) + \"  %\" + Str.toHex(i << this.bus.nBlockShift, 8) + \"  %\" + Str.toHex(block.addr, 8) + \"  \" + Str.toHexWord(block.used) + \"  \" + Str.toHexWord(block.size) + \"  \" + sType);\n                }\n                if (typePrev != MemoryPDP11.TYPE.NONE) typePrev = -1;\n                cPrev = 0;\n            }\n            addr += this.bus.nBlockSize;\n            i++;\n        }\n    }\n\n    /**\n     * dumpBus(asArgs)\n     *\n     * Dumps Bus allocations.\n     *\n     * @this {DebuggerPDP11}\n     * @param {Array.<string>} asArgs (asArgs[0] is an optional block address)\n     */\n    dumpBus(asArgs)\n    {\n        this.dumpBlocks(this.bus.aBusBlocks, asArgs[0]);\n    }\n\n    /**\n     * dumpHistory(sPrev, sLines)\n     *\n     * If sLines is not a number, it can be a instruction filter.  However, for the moment, the only\n     * supported filter is \"call\", which filters the history buffer for all CALL and RET instructions\n     * from the specified previous point forward.\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} [sPrev] is a (decimal) number of instructions to rewind to (default is 10)\n     * @param {string} [sLines] is a (decimal) number of instructions to print (default is, again, 10)\n     */\n    dumpHistory(sPrev, sLines)\n    {\n        var sMore = \"\";\n        var cHistory = 0;\n        var iHistory = this.iInstructionHistory;\n        var aHistory = this.aInstructionHistory;\n\n        if (aHistory.length) {\n            var nPrev = +sPrev || this.nextHistory;\n            var nLines = +sLines || 10;\n\n            if (isNaN(nPrev)) {\n                nPrev = nLines;\n            } else {\n                sMore = \"more \";\n            }\n\n            if (nPrev > aHistory.length) {\n                this.println(\"note: only \" + aHistory.length + \" available\");\n                nPrev = aHistory.length;\n            }\n\n            iHistory -= nPrev;\n            if (iHistory < 0) {\n                /*\n                 * If the dbgAddr of the last aHistory element contains a valid selector, wrap around.\n                 */\n                if (aHistory[aHistory.length - 1].addr == null) {\n                    nPrev = iHistory + nPrev;\n                    iHistory = 0;\n                } else {\n                    iHistory += aHistory.length;\n                }\n            }\n\n            var aFilters = [];\n            if (sLines == \"call\") {\n                nLines = 100000;\n                aFilters = [\"CALL\"];\n            }\n\n            if (sPrev !== undefined) {\n                this.println(nPrev + \" instructions earlier:\");\n            }\n\n            /*\n             * TODO: The following is necessary to prevent dumpHistory() from causing additional (or worse, recursive)\n             * faults due to segmented addresses that are no longer valid, but the only alternative is to dramatically\n             * increase the amount of memory used to store instruction history (eg, storing copies of all the instruction\n             * bytes alongside the execution addresses).\n             *\n             * For now, we're living dangerously, so that our history dumps actually work.\n             *\n             *      this.nSuppressBreaks++;\n             *\n             * If you re-enable this protection, be sure to re-enable the decrement below, too.\n             */\n            while (nLines > 0 && iHistory != this.iInstructionHistory) {\n\n                var dbgAddr = aHistory[iHistory++];\n                if (dbgAddr.addr == null) break;\n\n                /*\n                 * We must create a new dbgAddr from the address in aHistory, because dbgAddr was\n                 * a reference, not a copy, and we don't want getInstruction() modifying the original.\n                 */\n                var dbgAddrNew = this.newAddr(dbgAddr.addr);\n\n                var sComment = \"history\";\n                var nSequence = nPrev--;\n\n                /*\n                 * TODO: Need to some UI to control whether cycle counts are displayed as part of the history.\n                 * It's currently disabled in checkInstruction(), so it's disable here, too.\n                 *\n                if (DEBUG && dbgAddr.cycleCount != null) {\n                    sComment = \"cycles\";\n                    nSequence = dbgAddr.cycleCount;\n                }\n                 */\n\n                var sInstruction = this.getInstruction(dbgAddrNew, sComment, nSequence);\n\n                if (!aFilters.length || sInstruction.indexOf(aFilters[0]) >= 0) {\n                    this.println(sInstruction);\n                }\n\n                /*\n                 * If there were OPERAND or ADDRESS overrides on the previous instruction, getInstruction()\n                 * will have automatically disassembled additional bytes, so skip additional history entries.\n                 */\n                if (dbgAddrNew.cOverrides) {\n                    iHistory += dbgAddrNew.cOverrides; nLines -= dbgAddrNew.cOverrides; nPrev -= dbgAddrNew.cOverrides;\n                }\n\n                if (iHistory >= aHistory.length) iHistory = 0;\n                this.nextHistory = nPrev;\n                cHistory++;\n                nLines--;\n            }\n            /*\n             * See comments above.\n             *\n             *      this.nSuppressBreaks--;\n             */\n        }\n\n        if (!cHistory) {\n            this.println(\"no \" + sMore + \"history available\");\n            this.nextHistory = undefined;\n        }\n    }\n\n    /**\n     * messageInit(sEnable)\n     *\n     * @this {DebuggerPDP11}\n     * @param {string|undefined} sEnable contains zero or more message categories to enable, separated by '|'\n     */\n    messageInit(sEnable)\n    {\n        this.dbg = this;\n        this.bitsMessage = this.bitsWarning = MessagesPDP11.WARN;\n        this.sMessagePrev = null;\n        this.aMessageBuffer = [];\n        /*\n         * Internally, we use \"key\" instead of \"keys\", since the latter is a method on JavasScript objects,\n         * but externally, we allow the user to specify \"keys\"; \"kbd\" is also allowed as shorthand for \"keyboard\".\n         */\n        var aEnable = this.parseCommand(sEnable.replace(\"keys\",\"key\").replace(\"kbd\",\"keyboard\"), false, '|');\n        if (aEnable.length) {\n            for (var m in MessagesPDP11.CATEGORIES) {\n                if (Usr.indexOf(aEnable, m) >= 0) {\n                    this.bitsMessage |= MessagesPDP11.CATEGORIES[m];\n                    this.println(m + \" messages enabled\");\n                }\n            }\n        }\n    }\n\n    /**\n     * messageDump(bitMessage, fnDumper)\n     *\n     * @this {DebuggerPDP11}\n     * @param {number} bitMessage is one Messages category flag\n     * @param {function(Array.<string>)} fnDumper is a function the Debugger can use to dump data for that category\n     * @return {boolean} true if successfully registered, false if not\n     */\n    messageDump(bitMessage, fnDumper)\n    {\n        for (var m in MessagesPDP11.CATEGORIES) {\n            if (bitMessage == MessagesPDP11.CATEGORIES[m]) {\n                this.afnDumpers[m] = fnDumper;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * getRegIndex(sReg, off)\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} sReg\n     * @param {number} [off] optional offset into sReg\n     * @return {number} register index, or -1 if not found\n     */\n    getRegIndex(sReg, off)\n    {\n        sReg = sReg.toUpperCase();\n        var iReg = DebuggerPDP11.REGS[sReg];\n        if (iReg == null) {\n            iReg = -1;\n            if (sReg.charAt(0) == \"R\") {\n                iReg = +sReg.charAt(1);\n                if (iReg < 0 || iReg > 7) iReg = -1;\n            }\n        }\n        return iReg;\n    }\n\n    /**\n     * getRegName(iReg)\n     *\n     * @this {DebuggerPDP11}\n     * @param {number} iReg (0-7; not used for other registers)\n     * @return {string}\n     */\n    getRegName(iReg)\n    {\n        var sReg;\n        if (iReg < DebuggerPDP11.REG_AR || this.panel) sReg = DebuggerPDP11.REGNAMES[iReg];\n        return sReg || \"\";\n    }\n\n    /**\n     * getRegValue(iReg)\n     *\n     * Register numbers 0-7 are reserved for cpu.regsGen, 8-15 are reserved for cpu.regsAlt,\n     * 16-19 for cpu.regsAltStack, 20 for regPSW, etc.\n     *\n     * @this {DebuggerPDP11}\n     * @param {number} iReg\n     * @return {number|undefined}\n     */\n    getRegValue(iReg)\n    {\n        var value;\n        if (iReg >= 0) {\n            if (iReg < 8) {\n                value = this.cpu.regsGen[iReg];\n            }\n            else if (iReg < 16) {\n                value = this.cpu.regsAlt[iReg-8];\n            }\n            else if (iReg < 20) {\n                value = this.cpu.regsAltStack[iReg-16];\n            }\n            else {\n                var cpu = this.cpu;\n                var panel = this.panel;\n                switch(iReg) {\n                case DebuggerPDP11.REG_PS:\n                    value = this.cpu.getPSW();\n                    break;\n                case DebuggerPDP11.REG_PI:\n                    value = cpu.getPIR();\n                    break;\n                case DebuggerPDP11.REG_ER:\n                    value = cpu.regErr;\n                    break;\n                case DebuggerPDP11.REG_SL:\n                    value = cpu.getSLR();\n                    break;\n                case DebuggerPDP11.REG_M0:\n                    value = cpu.getMMR0();\n                    break;\n                case DebuggerPDP11.REG_M1:\n                    value = cpu.getMMR1();\n                    break;\n                case DebuggerPDP11.REG_M2:\n                    value = cpu.getMMR2();\n                    break;\n                case DebuggerPDP11.REG_M3:\n                    value = cpu.getMMR3();\n                    break;\n                case DebuggerPDP11.REG_AR:\n                    if (panel) value = panel.getAR();\n                    break;\n                case DebuggerPDP11.REG_DR:\n                    if (panel) value = panel.getDR();\n                    break;\n                case DebuggerPDP11.REG_SR:\n                    if (panel) value = panel.getSR();\n                    break;\n                }\n            }\n        }\n        return value;\n    }\n\n    /**\n     * replaceRegs(s)\n     *\n     * TODO: Implement or eliminate.\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} s\n     * @return {string}\n     */\n    replaceRegs(s)\n    {\n        return s;\n    }\n\n    /**\n     * message(sMessage, fAddress)\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} sMessage is any caller-defined message string\n     * @param {boolean} [fAddress] is true to display the current address\n     */\n    message(sMessage, fAddress)\n    {\n        if (fAddress) {\n            sMessage += \" @\" + this.toStrAddr(this.newAddr(this.cpu.getLastPC()));\n        }\n\n        if (this.sMessagePrev && sMessage == this.sMessagePrev) return;\n        this.sMessagePrev = sMessage;\n\n        if (this.bitsMessage & MessagesPDP11.BUFFER) {\n            this.aMessageBuffer.push(sMessage);\n            return;\n        }\n\n        var fRunning;\n        if ((this.bitsMessage & MessagesPDP11.HALT) && this.cpu && (fRunning = this.cpu.isRunning()) || this.isBusy(true)) {\n            this.stopCPU();\n            if (fRunning) sMessage += \" (cpu halted)\";\n        }\n\n        this.println(sMessage); // + \" (\" + this.cpu.getCycles() + \" cycles)\"\n\n        /*\n         * We have no idea what the frequency of println() calls might be; all we know is that they easily\n         * screw up the CPU's careful assumptions about cycles per burst.  So we call yieldCPU() after every\n         * message, to effectively end the current burst and start fresh.\n         *\n         * TODO: See CPUPDP11.calcStartTime() for a discussion of why we might want to call yieldCPU() *before*\n         * we display the message.\n         */\n        if (this.cpu) this.cpu.yieldCPU();\n    }\n\n    /**\n     * init()\n     *\n     * @this {DebuggerPDP11}\n     * @param {boolean} [fAutoStart]\n     */\n    init(fAutoStart)\n    {\n        this.fInit = true;\n        this.println(\"Type ? for help with PDPjs Debugger commands\");\n        this.updateStatus();\n        if (!fAutoStart) this.setFocus();\n        if (this.sInitCommands) {\n            var sCmds = this.sInitCommands;\n            this.sInitCommands = null;\n            this.doCommands(sCmds);\n        }\n    }\n\n    /**\n     * historyInit(fQuiet)\n     *\n     * This function is intended to be called by the constructor, reset(), addBreakpoint(), findBreakpoint()\n     * and any other function that changes the checksEnabled() criteria used to decide whether checkInstruction()\n     * should be called.\n     *\n     * That is, if the history arrays need to be allocated and haven't already been allocated, then allocate them,\n     * and if the arrays are no longer needed, then deallocate them.\n     *\n     * @this {DebuggerPDP11}\n     * @param {boolean} [fQuiet]\n     */\n    historyInit(fQuiet)\n    {\n        var i;\n        if (!this.checksEnabled()) {\n            if (this.aInstructionHistory && this.aInstructionHistory.length && !fQuiet) {\n                this.println(\"instruction history buffer freed\");\n            }\n            this.iInstructionHistory = 0;\n            this.aInstructionHistory = [];\n            return;\n        }\n        if (!this.aInstructionHistory || !this.aInstructionHistory.length) {\n            this.aInstructionHistory = new Array(DebuggerPDP11.HISTORY_LIMIT);\n            for (i = 0; i < this.aInstructionHistory.length; i++) {\n                /*\n                 * Preallocate dummy Addr (Array) objects in every history slot, so that\n                 * checkInstruction() doesn't need to call newAddr() on every slot update.\n                 */\n                this.aInstructionHistory[i] = this.newAddr();\n            }\n            this.iInstructionHistory = 0;\n            if (!fQuiet) {\n                this.println(\"instruction history buffer allocated\");\n            }\n        }\n    }\n\n    /**\n     * startCPU(fUpdateFocus, fQuiet)\n     *\n     * @this {DebuggerPDP11}\n     * @param {boolean} [fUpdateFocus] is true to update focus\n     * @param {boolean} [fQuiet]\n     * @return {boolean} true if run request successful, false if not\n     */\n    startCPU(fUpdateFocus, fQuiet)\n    {\n        if (!this.checkCPU(fQuiet)) return false;\n        this.cpu.startCPU(fUpdateFocus);\n        return true;\n    }\n\n    /**\n     * stepCPU(nCycles, fRegs, fUpdateDisplays)\n     *\n     * @this {DebuggerPDP11}\n     * @param {number} nCycles (0 for one instruction without checking breakpoints)\n     * @param {boolean|null} [fRegs] is true to display registers after step (default is false; use null for previous setting)\n     * @param {boolean} [fUpdateDisplays] is false to disable Computer display updates (default is true)\n     * @return {boolean}\n     */\n    stepCPU(nCycles, fRegs, fUpdateDisplays)\n    {\n        if (!this.checkCPU()) return false;\n\n        var sCmd = \"\";\n        if (fRegs === null) {\n            fRegs = (!this.sCmdTracePrev || this.sCmdTracePrev == \"tr\");\n            sCmd = fRegs? \"tr\" : \"t\";\n        }\n\n        this.nCycles = 0;\n\n        if (!nCycles) {\n            /*\n             * When single-stepping, the CPU won't call checkInstruction(), which is good for\n             * avoiding breakpoints, but bad for instruction data collection if checks are enabled.\n             * So we call checkInstruction() ourselves.\n             */\n            if (this.checksEnabled()) this.checkInstruction(this.cpu.getPC(), 0);\n        }\n        /*\n         * For our typically tiny bursts (usually single instructions), mimic what runCPU() does.\n         */\n        try {\n            nCycles = this.cpu.getBurstCycles(nCycles);\n            var nCyclesStep = this.cpu.stepCPU(nCycles);\n            if (nCyclesStep > 0) {\n                this.cpu.updateTimers(nCyclesStep);\n                this.nCycles += nCyclesStep;\n                this.cpu.addCycles(nCyclesStep, true);\n                this.cpu.updateChecksum(nCyclesStep);\n                this.cInstructions++;\n            }\n        }\n        catch(exception) {\n            /*\n             * We assume that any numeric exception was explicitly thrown by the CPU to interrupt the\n             * current instruction.  For all other exceptions, we attempt a stack dump.\n             */\n            if (typeof exception != \"number\") {\n                var e = exception;\n                this.nCycles = 0;\n                this.cpu.setError(e.stack || e.message);\n            }\n        }\n\n        /*\n         * Because we called cpu.stepCPU() and not cpu.startCPU(), we must nudge the Computer's update code,\n         * and then update our own state.  Normally, the only time fUpdateDisplays will be false is when doTrace()\n         * is calling us in a loop, in which case it will perform its own updateDisplays() when it's done.\n         */\n        if (fUpdateDisplays !== false) {\n            if (this.panel) this.panel.stop();\n            this.cmp.updateDisplays(-1);\n        }\n\n        this.updateStatus(fRegs || false, sCmd);\n        return (this.nCycles > 0);\n    }\n\n    /**\n     * stopCPU()\n     *\n     * @this {DebuggerPDP11}\n     * @param {boolean} [fComplete]\n     */\n    stopCPU(fComplete)\n    {\n        if (this.cpu) this.cpu.stopCPU(fComplete);\n    }\n\n    /**\n     * updateStatus(fRegs, sCmd)\n     *\n     * @this {DebuggerPDP11}\n     * @param {boolean} [fRegs] (default is true)\n     * @param {string} [sCmd]\n     */\n    updateStatus(fRegs, sCmd)\n    {\n        if (!this.fInit) return;\n\n        if (fRegs === undefined) fRegs = true;\n\n        if (sCmd) {\n            this.println(DebuggerPDP11.PROMPT + sCmd);\n        }\n\n        var trapStatus = this.cpu.getTrapStatus();\n        if (trapStatus) {\n            var reason = trapStatus >> 8;\n            var sReason = reason < 0? PDP11.REASONS[-reason] : this.toStrBase(reason);\n            this.println(\"trapped to \" + this.toStrBase(trapStatus & 0xff, 8) + \" (\" + sReason + \")\");\n        }\n\n        this.dbgAddrNextCode = this.newAddr(this.cpu.getPC());\n        /*\n         * this.nStep used to be a simple boolean, but now it's 0 (or undefined)\n         * if inactive, 1 if stepping over an instruction without a register dump, or 2\n         * if stepping over an instruction with a register dump.\n         */\n        if (!fRegs || this.nStep == 1) {\n            this.doUnassemble();\n        } else {\n            this.doRegisters();\n        }\n    }\n\n    /**\n     * checkCPU(fQuiet)\n     *\n     * Make sure the CPU is ready (finished initializing), powered, not already running, and not in an error state.\n     *\n     * @this {DebuggerPDP11}\n     * @param {boolean} [fQuiet]\n     * @return {boolean}\n     */\n    checkCPU(fQuiet)\n    {\n        if (!this.cpu || !this.cpu.isReady() || !this.cpu.isPowered() || this.cpu.isRunning()) {\n            if (!fQuiet) this.println(\"cpu busy or unavailable, command ignored\");\n            return false;\n        }\n        return !this.cpu.isError();\n    }\n\n    /**\n     * powerUp(data, fRepower)\n     *\n     * @this {DebuggerPDP11}\n     * @param {Object|null} data\n     * @param {boolean} [fRepower]\n     * @return {boolean} true if successful, false if failure\n     */\n    powerUp(data, fRepower)\n    {\n        if (!fRepower) {\n            /*\n             * Because Debugger save/restore support is somewhat limited (and didn't always exist),\n             * we deviate from the typical save/restore design pattern: instead of reset OR restore,\n             * we always reset and then perform a (potentially limited) restore.\n             */\n            this.reset(true);\n\n            // this.println(data? \"resuming\" : \"powering up\");\n\n            if (data) {\n                return this.restore(data);\n            }\n        }\n        return true;\n    }\n\n    /**\n     * powerDown(fSave, fShutdown)\n     *\n     * @this {DebuggerPDP11}\n     * @param {boolean} [fSave]\n     * @param {boolean} [fShutdown]\n     * @return {Object|boolean}\n     */\n    powerDown(fSave, fShutdown)\n    {\n        if (fShutdown) this.println(fSave? \"suspending\" : \"shutting down\");\n        return fSave? this.save() : true;\n    }\n\n    /**\n     * reset(fQuiet)\n     *\n     * This is a notification handler, called by the Computer, to inform us of a reset.\n     *\n     * @this {DebuggerPDP11}\n     * @param {boolean} fQuiet (true only when called from our own powerUp handler)\n     */\n    reset(fQuiet)\n    {\n        this.historyInit();\n        this.cInstructions = this.cInstructionsStart = 0;\n        this.sMessagePrev = null;\n        this.nCycles = 0;\n        this.dbgAddrNextCode = this.newAddr(this.cpu.getPC());\n        /*\n         * fRunning is set by start() and cleared by stop().  In addition, we clear\n         * it here, so that if the CPU is reset while running, we can prevent stop()\n         * from unnecessarily dumping the CPU state.\n         */\n        this.flags.running = false;\n        this.clearTempBreakpoint();\n        if (!fQuiet) this.updateStatus();\n    }\n\n    /**\n     * save()\n     *\n     * This implements (very rudimentary) save support for the Debugger component.\n     *\n     * @this {DebuggerPDP11}\n     * @return {Object}\n     */\n    save()\n    {\n        var state = new State(this);\n        state.set(0, this.packAddr(this.dbgAddrNextCode));\n        state.set(1, this.packAddr(this.dbgAddrAssemble));\n        state.set(2, [this.aPrevCmds, this.fAssemble, this.bitsMessage]);\n        state.set(3, this.aSymbolTable);\n        return state.data();\n    }\n\n    /**\n     * restore(data)\n     *\n     * This implements (very rudimentary) restore support for the Debugger component.\n     *\n     * @this {DebuggerPDP11}\n     * @param {Object} data\n     * @return {boolean} true if successful, false if failure\n     */\n    restore(data)\n    {\n        var i = 0;\n        if (data[2] !== undefined) {\n            this.dbgAddrNextCode = this.unpackAddr(data[i++]);\n            this.dbgAddrAssemble = this.unpackAddr(data[i++]);\n            this.aPrevCmds = data[i][0];\n            if (typeof this.aPrevCmds == \"string\") this.aPrevCmds = [this.aPrevCmds];\n            this.fAssemble = data[i][1];\n            this.bitsMessage |= data[i][2];     // keep our current message bits set, and simply \"add\" any extra bits defined by the saved state\n        }\n        if (data[3]) this.aSymbolTable = data[3];\n        return true;\n    }\n\n    /**\n     * start(ms, nCycles)\n     *\n     * This is a notification handler, called by the Computer, to inform us the CPU has started.\n     *\n     * @this {DebuggerPDP11}\n     * @param {number} ms\n     * @param {number} nCycles\n     */\n    start(ms, nCycles)\n    {\n        if (!this.nStep) this.println(\"running\");\n        this.flags.running = true;\n        this.msStart = ms;\n        this.nCyclesStart = nCycles;\n    }\n\n    /**\n     * stop(ms, nCycles)\n     *\n     * This is a notification handler, called by the Computer, to inform us the CPU has now stopped.\n     *\n     * @this {DebuggerPDP11}\n     * @param {number} ms\n     * @param {number} nCycles\n     */\n    stop(ms, nCycles)\n    {\n        if (this.flags.running) {\n            this.flags.running = false;\n            this.nCycles = nCycles - this.nCyclesStart;\n            if (!this.nStep) {\n                var sStopped = \"stopped\";\n                if (this.nCycles) {\n                    var msTotal = ms - this.msStart;\n                    var nCyclesPerSecond = (msTotal > 0? Math.round(this.nCycles * 1000 / msTotal) : 0);\n                    sStopped += \" (\";\n                    if (this.checksEnabled()) {\n                        sStopped += this.cInstructions + \" instructions, \";\n                        /*\n                         * $ops displays progress by calculating cInstructions - cInstructionsStart, so before\n                         * zeroing cInstructions, we should subtract cInstructions from cInstructionsStart (since\n                         * we're effectively subtracting cInstructions from cInstructions as well).\n                         */\n                        this.cInstructionsStart -= this.cInstructions;\n                        this.cInstructions = 0;\n                    }\n                    sStopped += this.nCycles + \" cycles, \" + msTotal + \" ms, \" + nCyclesPerSecond + \" hz)\";\n                } else {\n                    if (this.messageEnabled(MessagesPDP11.HALT)) {\n                        /*\n                         * It's possible the user is trying to 'g' past a fault that was blocked by helpCheckFault()\n                         * for the Debugger's benefit; if so, it will continue to be blocked, so try displaying a helpful\n                         * message (another helpful tip would be to simply turn off the \"halt\" message category).\n                         */\n                        sStopped += \" (use the 't' command to execute blocked faults)\";\n                    }\n                }\n                this.println(sStopped);\n            }\n            this.updateStatus(true);\n            this.setFocus();\n            this.clearTempBreakpoint(this.cpu.getPC());\n            this.sMessagePrev = null;\n        }\n    }\n\n    /**\n     * checksEnabled(fRelease)\n     *\n     * This \"check\" function is called by the CPU; we indicate whether or not every instruction needs to be checked.\n     *\n     * Originally, this returned true even when there were only read and/or write breakpoints, but those breakpoints\n     * no longer require the intervention of checkInstruction(); the Bus component automatically swaps in/out appropriate\n     * \"checked\" Memory access functions to deal with those breakpoints in the corresponding Memory blocks.  So I've\n     * simplified the test below.\n     *\n     * @this {DebuggerPDP11}\n     * @param {boolean} [fRelease] is true for release criteria only; default is false (any criteria)\n     * @return {boolean} true if every instruction needs to pass through checkInstruction(), false if not\n     */\n    checksEnabled(fRelease)\n    {\n        return ((DEBUG && !fRelease)? true : (this.aBreakExec.length > 1 || !!this.nBreakInstructions));\n    }\n\n    /**\n     * checkInstruction(addr, nState)\n     *\n     * This \"check\" function is called by the CPU to inform us about the next instruction to be executed,\n     * giving us an opportunity to look for \"exec\" breakpoints and update opcode instruction history.\n     *\n     * @this {DebuggerPDP11}\n     * @param {number} addr\n     * @param {number} nState is < 0 if stepping, 0 if starting, or > 0 if running\n     * @return {boolean} true if breakpoint hit, false if not\n     */\n    checkInstruction(addr, nState)\n    {\n        var opCode = -1;\n        var cpu = this.cpu;\n\n        /*\n         * If opHalt() calls our stopInstruction() function, it will effectively rewind the PC back to the HALT,\n         * purely for our debugging benefit, so we must compensate for that here by advancing the PC past the HALT\n         * when the machine starts up again.\n         */\n        if (!nState) {\n            opCode = this.cpu.getWordSafe(addr);\n            /*\n             * We have to be careful about this HALT-skipping code, because as fate would have it, I inadvertently\n             * stopped the following diagnostic with a breakpoint *on* a HALT instruction:\n             *\n             *      .R EKBEE1\n             *      EKBEE1.BIC\n             *\n             *      CEKBEE0 11/70 MEM MGMT\n             *\n             *      CPU UNDER TEST FOUND TO BE A KB11-CM\n             *      bp 033330 hit\n             *      stopped (28339757 instructions, 123994176 cycles, 19177 ms, 6465775 hz)\n             *      R0=140000 R1=033330 R2=100143 R3=133260 R4=000000 R5=177700\n             *      SP=000600 PC=033330 PS=140000 IR=000000 SL=000377 T0 N0 Z0 V0 C0\n             *      033330: 000000                 HALT\n             *\n             * Since we haven't executed the HALT yet, it would be wrong (and would cause a diagnostic failure) to\n             * skip over it.  In this particular case, the PDR for the address of the HALT instruction was invalid,\n             * so the HALT gets fetched but not executed.\n             *\n             * My first thought was that maybe we need to probe the address more thoroughly (getWordSafe() does\n             * not), but it should be sufficient to simply confirm that the PC of the last opcode executed matches\n             * the addr of this HALT.\n             *\n             * Yes, I could save myself this grief by eliminating these PC hacks, both here and in stopInstruction(),\n             * but I still think it's a useful debugging aid.\n             */\n            if (opCode == PDP11.OPCODE.HALT && this.cpu.getLastPC() == addr) {\n                addr = this.cpu.advancePC(2);\n            }\n        }\n\n        /*\n         * If the CPU stopped on a breakpoint, we're not interested in stopping again if the machine is starting.\n         */\n        if (nState > 0) {\n            if (this.nBreakInstructions) {\n                if (!--this.nBreakInstructions) return true;\n            }\n            if (this.checkBreakpoint(addr, 1, this.aBreakExec)) {\n                return true;\n            }\n        }\n\n        /*\n         * The rest of the instruction tracking logic can only be performed if historyInit() has allocated the\n         * necessary data structures.  Note that there is no explicit UI for enabling/disabling history, other than\n         * adding/removing breakpoints, simply because it's breakpoints that trigger the call to checkInstruction();\n         * well, OK, and a few other things now, like enabling MessagesPDP11.INT messages.\n         */\n        if (nState >= 0 && this.aInstructionHistory.length) {\n            this.cInstructions++;\n            if (opCode < 0) {\n                opCode = this.cpu.getWordSafe(addr);\n            }\n            if ((opCode & 0xffff) != PDP11.OPCODE.INVALID) {\n                var dbgAddr = this.aInstructionHistory[this.iInstructionHistory];\n                this.setAddr(dbgAddr, addr);\n                // if (DEBUG) dbgAddr.cycleCount = cpu.getCycles();\n                if (++this.iInstructionHistory == this.aInstructionHistory.length) this.iInstructionHistory = 0;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * stopInstruction(sMessage)\n     *\n     * TODO: Currently, the only way to prevent this call from stopping the CPU is when you're single-stepping.\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} [sMessage]\n     * @return {boolean} true if stopping is enabled, false if not\n     */\n    stopInstruction(sMessage)\n    {\n        var cpu = this.cpu;\n        if (cpu.isRunning()) {\n            cpu.setPC(this.cpu.getLastPC());\n            if (sMessage) this.println(sMessage);\n            this.stopCPU();\n            /*\n             * TODO: Review the appropriate-ness of throwing a bogus vector number in order to immediately stop\n             * the instruction.  It's handy, but it also means that we no longer actually return true, so callers\n             * of either stopInstruction() or undefinedInstruction() may have unreachable code paths.\n             */\n            throw -1;\n        }\n        return false;\n    }\n\n    /**\n     * undefinedInstruction(opCode)\n     *\n     * @this {DebuggerPDP11}\n     * @param {number} opCode\n     * @return {boolean} true if stopping is enabled, false if not\n     */\n    undefinedInstruction(opCode)\n    {\n        if (this.messageEnabled(MessagesPDP11.CPU)) {\n            this.printMessage(\"undefined opcode \" + this.toStrBase(opCode), true, true);\n            return this.stopInstruction();  // allow the caller to step over it if they really want a trap generated\n        }\n        return false;\n    }\n\n    /**\n     * checkMemoryRead(addr, nb)\n     *\n     * This \"check\" function is called by a Memory block to inform us that a memory read occurred, giving us an\n     * opportunity to track the read if we want, and look for a matching \"read\" breakpoint, if any.\n     *\n     * In the \"old days\", it would be an error for this call to fail to find a matching Debugger breakpoint, but now\n     * Memory blocks have no idea whether the Debugger or the machine's Debug register(s) triggered this \"checked\" read.\n     *\n     * If we return true, we \"trump\" the machine's Debug register(s); false allows normal Debug register processing.\n     *\n     * @this {DebuggerPDP11}\n     * @param {number} addr\n     * @param {number} [nb] (# of bytes; default is 1)\n     * @return {boolean} true if breakpoint hit, false if not\n     */\n    checkMemoryRead(addr, nb)\n    {\n        if (this.checkBreakpoint(addr, nb || 1, this.aBreakRead)) {\n            this.stopCPU(false);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * checkMemoryWrite(addr, nb)\n     *\n     * This \"check\" function is called by a Memory block to inform us that a memory write occurred, giving us an\n     * opportunity to track the write if we want, and look for a matching \"write\" breakpoint, if any.\n     *\n     * In the \"old days\", it would be an error for this call to fail to find a matching Debugger breakpoint, but now\n     * Memory blocks have no idea whether the Debugger or the machine's Debug register(s) triggered this \"checked\" write.\n     *\n     * If we return true, we \"trump\" the machine's Debug register(s); false allows normal Debug register processing.\n     *\n     * @this {DebuggerPDP11}\n     * @param {number} addr\n     * @param {number} [nb] (# of bytes; default is 1)\n     * @return {boolean} true if breakpoint hit, false if not\n     */\n    checkMemoryWrite(addr, nb)\n    {\n        if (this.checkBreakpoint(addr, nb || 1, this.aBreakWrite)) {\n            this.stopCPU(false);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * clearBreakpoints()\n     *\n     * @this {DebuggerPDP11}\n     */\n    clearBreakpoints()\n    {\n        var i, dbgAddr, addr;\n        this.aBreakExec = [\"bp\"];\n        if (this.aBreakRead !== undefined) {\n            for (i = 1; i < this.aBreakRead.length; i++) {\n                dbgAddr = this.aBreakRead[i];\n                addr = this.getAddr(dbgAddr);\n                if (!dbgAddr.fPhysical) {\n                    this.cpu.removeMemBreak(addr, false);\n                } else {\n                    this.bus.removeMemBreak(addr, false);\n                }\n            }\n        }\n        this.aBreakRead = [\"br\"];\n        if (this.aBreakWrite !== undefined) {\n            for (i = 1; i < this.aBreakWrite.length; i++) {\n                dbgAddr = this.aBreakWrite[i];\n                addr = this.getAddr(dbgAddr);\n                if (!dbgAddr.fPhysical) {\n                    this.cpu.removeMemBreak(addr, true);\n                } else {\n                    this.bus.removeMemBreak(addr, true);\n                }\n            }\n        }\n        this.aBreakWrite = [\"bw\"];\n        /*\n         * nSuppressBreaks ensures we can't get into an infinite loop where a breakpoint lookup\n         * requires reading memory that triggers more memory reads, which triggers more breakpoint checks.\n         */\n        this.nSuppressBreaks = 0;\n        this.nBreakInstructions = 0;\n    }\n\n    /**\n     * addBreakpoint(aBreak, dbgAddr, fTemporary)\n     *\n     * In case you haven't already figured this out, all our breakpoint commands use the address\n     * to identify a breakpoint, not an incrementally assigned breakpoint index like other debuggers;\n     * see doBreak() for details.\n     *\n     * This has a few implications, one being that you CANNOT set more than one kind of breakpoint\n     * on a single address.  In practice, that's rarely a problem, because you can almost always set\n     * a different breakpoint on a neighboring address.\n     *\n     * Also, there is one exception to the \"one address, one breakpoint\" rule, and that involves\n     * temporary breakpoints (ie, one-time execution breakpoints that either a \"p\" or \"g\" command\n     * may create to step over a chunk of code).  Those breakpoints automatically clear themselves,\n     * so there usually isn't any need to refer to them using breakpoint commands.\n     *\n     * TODO: Consider supporting the more \"traditional\" breakpoint index syntax; the current\n     * address-based syntax was implemented solely for expediency and consistency.  At the same time,\n     * also consider a more WDEB386-like syntax, where \"br\" is used to set a variety of access-specific\n     * breakpoints, using modifiers like \"r1\", \"r2\", \"w1\", \"w2, etc.\n     *\n     * @this {DebuggerPDP11}\n     * @param {Array} aBreak\n     * @param {DbgAddrPDP11} dbgAddr\n     * @param {boolean} [fTemporary]\n     * @return {boolean} true if breakpoint added, false if already exists\n     */\n    addBreakpoint(aBreak, dbgAddr, fTemporary)\n    {\n        var fSuccess = true;\n\n        // this.nSuppressBreaks++;\n\n        /*\n         * Instead of complaining that a breakpoint already exists (as we used to do), we now\n         * allow breakpoints to be re-set; this makes it easier to update any commands that may\n         * be associated with the breakpoint.\n         *\n         * The only exception: we DO allow a temporary breakpoint at an address where there may\n         * already be a breakpoint, so that you can easily step (\"p\" or \"g\") over such addresses.\n         */\n        if (!fTemporary) {\n            this.findBreakpoint(aBreak, dbgAddr, true, false, true);\n        }\n\n        if (aBreak != this.aBreakExec) {\n            var addr = this.getAddr(dbgAddr);\n            if (addr === PDP11.ADDR_INVALID) {\n                this.println(\"invalid address: \" + this.toStrAddr(dbgAddr));\n                fSuccess = false;\n            } else {\n                var fWrite = (aBreak == this.aBreakWrite);\n                /*\n                 * We automatically promote any read/write breakpoint address to fPhysical if it's\n                 * outside the 16-bit virtual address range.\n                 */\n                if (addr > 0xffff) dbgAddr.fPhysical = true;\n                if (!dbgAddr.fPhysical) {\n                    this.cpu.addMemBreak(addr, fWrite);\n                } else {\n                    this.bus.addMemBreak(addr, fWrite);\n                }\n            }\n        }\n\n        if (fSuccess) {\n            aBreak.push(dbgAddr);\n            if (fTemporary) {\n                dbgAddr.fTemporary = true;\n            }\n            else {\n                this.printBreakpoint(aBreak, aBreak.length-1, \"set\");\n                this.historyInit();\n            }\n        }\n\n        // this.nSuppressBreaks--;\n\n        return fSuccess;\n    }\n\n    /**\n     * findBreakpoint(aBreak, dbgAddr, fRemove, fTemporary, fQuiet)\n     *\n     * @this {DebuggerPDP11}\n     * @param {Array} aBreak\n     * @param {DbgAddrPDP11} dbgAddr\n     * @param {boolean} [fRemove]\n     * @param {boolean} [fTemporary]\n     * @param {boolean} [fQuiet]\n     * @return {boolean} true if found, false if not\n     */\n    findBreakpoint(aBreak, dbgAddr, fRemove, fTemporary, fQuiet)\n    {\n        var fFound = false;\n        var addr = this.getAddr(dbgAddr);\n        for (var i = 1; i < aBreak.length; i++) {\n            var dbgAddrBreak = aBreak[i];\n            if (addr == this.getAddr(dbgAddrBreak)) {\n                if (!fTemporary || dbgAddrBreak.fTemporary) {\n                    fFound = true;\n                    if (fRemove) {\n                        if (!dbgAddrBreak.fTemporary && !fQuiet) {\n                            this.printBreakpoint(aBreak, i, \"cleared\");\n                        }\n                        aBreak.splice(i, 1);\n                        if (aBreak != this.aBreakExec) {\n                            var fWrite = (aBreak == this.aBreakWrite);\n                            if (!dbgAddrBreak.fPhysical) {\n                                this.cpu.removeMemBreak(addr, fWrite);\n                            } else {\n                                this.bus.removeMemBreak(addr, fWrite);\n                            }\n                        }\n                        /*\n                         * We'll mirror the logic in addBreakpoint() and leave the history buffer alone if this\n                         * was a temporary breakpoint.\n                         */\n                        if (!dbgAddrBreak.fTemporary) {\n                            this.historyInit();\n                        }\n                        break;\n                    }\n                    if (!fQuiet) this.printBreakpoint(aBreak, i, \"exists\");\n                    break;\n                }\n            }\n        }\n        return fFound;\n    }\n\n    /**\n     * listBreakpoints(aBreak)\n     *\n     * @this {DebuggerPDP11}\n     * @param {Array} aBreak\n     * @return {number} of breakpoints listed, 0 if none\n     */\n    listBreakpoints(aBreak)\n    {\n        for (var i = 1; i < aBreak.length; i++) {\n            this.printBreakpoint(aBreak, i);\n        }\n        return aBreak.length - 1;\n    }\n\n    /**\n     * printBreakpoint(aBreak, i, sAction)\n     *\n     * @this {DebuggerPDP11}\n     * @param {Array} aBreak\n     * @param {number} i\n     * @param {string} [sAction]\n     */\n    printBreakpoint(aBreak, i, sAction)\n    {\n        var dbgAddr = aBreak[i];\n        this.println(aBreak[0] + ' ' + this.toStrAddr(dbgAddr) + (sAction? (' ' + sAction) : (dbgAddr.sCmd? (' \"' + dbgAddr.sCmd + '\"') : '')));\n    }\n\n    /**\n     * setTempBreakpoint(dbgAddr)\n     *\n     * @this {DebuggerPDP11}\n     * @param {DbgAddrPDP11} dbgAddr of new temp breakpoint\n     */\n    setTempBreakpoint(dbgAddr)\n    {\n        this.addBreakpoint(this.aBreakExec, dbgAddr, true);\n    }\n\n    /**\n     * clearTempBreakpoint(addr)\n     *\n     * @this {DebuggerPDP11}\n     * @param {number|undefined} [addr] clear all temp breakpoints if no address specified\n     */\n    clearTempBreakpoint(addr)\n    {\n        if (addr !== undefined) {\n            this.checkBreakpoint(addr, 1, this.aBreakExec, true);\n            this.nStep = 0;\n        } else {\n            for (var i = 1; i < this.aBreakExec.length; i++) {\n                var dbgAddrBreak = this.aBreakExec[i];\n                if (dbgAddrBreak.fTemporary) {\n                    if (!this.findBreakpoint(this.aBreakExec, dbgAddrBreak, true, true)) break;\n                    i = 0;\n                }\n            }\n        }\n    }\n\n    /**\n     * checkBreakpoint(addr, nb, aBreak, fTemporary)\n     *\n     * @this {DebuggerPDP11}\n     * @param {number} addr\n     * @param {number} nb (# of bytes)\n     * @param {Array} aBreak\n     * @param {boolean} [fTemporary]\n     * @return {boolean} true if breakpoint has been hit, false if not\n     */\n    checkBreakpoint(addr, nb, aBreak, fTemporary)\n    {\n        /*\n         * Time to check for breakpoints; note that this should be done BEFORE updating history data\n         * (see checkInstruction), since we might not actually execute the current instruction.\n         */\n        var fBreak = false;\n\n        if (!this.nSuppressBreaks++) {\n\n            for (var i = 1; !fBreak && i < aBreak.length; i++) {\n\n                var dbgAddrBreak = aBreak[i];\n\n                if (fTemporary && !dbgAddrBreak.fTemporary) continue;\n\n                /*\n                 * If we're checking an execution address, which is always virtual, and virtual\n                 * addresses are always restricted to 16 bits, let's mask the breakpoint address to match\n                 * (the user should know better, but we'll be nice).\n                 */\n                var addrBreak = this.getAddr(dbgAddrBreak) & (aBreak == this.aBreakExec? 0xffff : -1);\n                for (var n = 0; n < nb; n++) {\n\n                    if ((addr + n) != addrBreak) continue;\n\n                    var a;\n                    fBreak = true;\n                    if (dbgAddrBreak.fTemporary) {\n                        this.findBreakpoint(aBreak, dbgAddrBreak, true, true);\n                        fTemporary = true;\n                    }\n                    if (a = dbgAddrBreak.aCmds) {\n                        /*\n                         * When one or more commands are attached to a breakpoint, we don't halt by default.\n                         * Instead, we set fBreak to true only if, at the completion of all the commands, the\n                         * CPU is halted; in other words, you should include \"h\" as one of the breakpoint commands\n                         * if you want the breakpoint to stop execution.\n                         *\n                         * Another useful command is \"if\", which will return false if the expression is false,\n                         * at which point we'll jump ahead to the next \"else\" command, and if there isn't an \"else\",\n                         * we abort.\n                         */\n                        fBreak = false;\n                        for (var j = 0; j < a.length; j++) {\n                            if (!this.doCommand(a[j], true)) {\n                                if (a[j].indexOf(\"if\")) {\n                                    fBreak = true;          // the failed command wasn't \"if\", so abort\n                                    break;\n                                }\n                                var k = j + 1;\n                                for (; k < a.length; k++) {\n                                    if (!a[k].indexOf(\"else\")) break;\n                                    j++;\n                                }\n                                if (k == a.length) {        // couldn't find an \"else\" after the \"if\", so abort\n                                    fBreak = true;\n                                    break;\n                                }\n                                /*\n                                 * If we're still here, we'll execute the \"else\" command (which is just a no-op),\n                                 * followed by any remaining commands.\n                                 */\n                            }\n                        }\n                        if (!this.cpu.isRunning()) fBreak = true;\n                    }\n                    if (fBreak) {\n                        if (!fTemporary) this.printBreakpoint(aBreak, i, \"hit\");\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.nSuppressBreaks--;\n\n        return fBreak;\n    }\n\n    /**\n     * getInstruction(dbgAddr, sComment, nSequence)\n     *\n     * Get the next instruction, by decoding the opcode and any operands.\n     *\n     * @this {DebuggerPDP11}\n     * @param {DbgAddrPDP11} dbgAddr\n     * @param {string} [sComment] is an associated comment\n     * @param {number|null} [nSequence] is an associated sequence number, undefined if none\n     * @return {string} (and dbgAddr is updated to the next instruction)\n     */\n    getInstruction(dbgAddr, sComment, nSequence)\n    {\n        var opNames = DebuggerPDP11.OPNAMES;\n        var dbgAddrOp = this.newAddr(dbgAddr.addr);\n        var opCode = this.getWord(dbgAddr, 2);\n\n        var opDesc;\n        for (var mask in this.opTable) {\n            var opMasks = this.opTable[mask];\n            opDesc = opMasks[opCode & mask];\n            if (opDesc) break;\n        }\n\n        if (!opDesc) {\n            opDesc = DebuggerPDP11.OPNONE;\n        }\n\n        var opNum = opDesc[0];\n        if (this.aOpReserved.indexOf(opNum) >= 0) {\n            opDesc = DebuggerPDP11.OPNONE;\n            opNum = opDesc[0];\n        }\n\n        var sOperands = \"\", sTarget = \"\";\n        var sOpName = opNames[opNum];\n        var cOperands = opDesc.length - 1;\n\n        if (!opNum && !cOperands) {\n            sOperands = this.toStrBase(opCode);\n        }\n\n        for (var iOperand = 1; iOperand <= cOperands; iOperand++) {\n\n            var opType = opDesc[iOperand];\n            if (opType === undefined) continue;\n\n            var sOperand = this.getOperand(opCode, opType, dbgAddr);\n\n            if (!sOperand || !sOperand.length) {\n                sOperands = \"INVALID\";\n                break;\n            }\n\n            /*\n             * If getOperand() returns an Array rather than a string, then the first element is the original\n             * operand, and the second element contains additional information (eg, the target) of the operand.\n             */\n            if (typeof sOperand != \"string\") {\n                sTarget = sOperand[1];\n                sOperand = sOperand[0];\n            }\n\n            if (sOperands.length > 0) sOperands += ',';\n            sOperands += (sOperand || \"???\");\n        }\n\n        var sOpCodes = \"\";\n        var sLine = this.toStrAddr(dbgAddrOp) + \":\";\n        if (dbgAddrOp.addr !== PDP11.ADDR_INVALID && dbgAddr.addr !== PDP11.ADDR_INVALID) {\n            do {\n                sOpCodes += ' ' + this.toStrBase(this.getWord(dbgAddrOp, 2));\n                if (dbgAddrOp.addr == null) break;\n            } while (dbgAddrOp.addr != dbgAddr.addr);\n        }\n\n        sLine += Str.pad(sOpCodes, 24);\n        sLine += Str.pad(sOpName, 5);\n        if (sOperands) sLine += ' ' + sOperands;\n\n        if (sComment || sTarget) {\n            sLine = Str.pad(sLine, 60) + ';' + (sComment || \"\");\n            if (!this.cpu.flags.checksum) {\n                sLine += (nSequence != null? '=' + nSequence.toString() : \"\");\n            } else {\n                var nCycles = this.cpu.getCycles();\n                sLine += \"cycles=\" + nCycles.toString() + \" cs=\" + Str.toHex(this.cpu.nChecksum);\n            }\n            if (sTarget) {\n                if (sLine.slice(-1) != ';') sLine += ' ';\n                sLine += sTarget;\n            }\n        }\n        return sLine;\n    }\n\n    /**\n     * getOperand(opCode, opType, dbgAddr)\n     *\n     * If getOperand() returns an Array rather than a string, then the first element is the original\n     * operand, and the second element is a comment containing additional information (eg, the target)\n     * of the operand.\n     *\n     * @this {DebuggerPDP11}\n     * @param {number} opCode\n     * @param {number} opType\n     * @param {DbgAddrPDP11} dbgAddr\n     * @return {string|Array.<string>}\n     */\n    getOperand(opCode, opType, dbgAddr)\n    {\n        var sOperand = \"\", disp, addr;\n        /*\n         * Take care of OP_OTHER opcodes first; then all we'll have to worry about\n         * next are OP_SRC or OP_DST opcodes.\n         */\n        var opTypeOther = opType & DebuggerPDP11.OP_OTHER;\n        if (opTypeOther == DebuggerPDP11.OP_BRANCH) {\n            disp = ((opCode & 0xff) << 24) >> 23;\n            addr = (dbgAddr.addr + disp) & 0xffff;\n            sOperand = this.toStrBase(addr);\n        }\n        else if (opTypeOther == DebuggerPDP11.OP_DSTOFF) {\n            disp = (opCode & 0x3f) << 1;\n            addr = (dbgAddr.addr - disp) & 0xffff;\n            sOperand = this.toStrBase(addr);\n        }\n        else if (opTypeOther == DebuggerPDP11.OP_DSTNUM3) {\n            disp = (opCode & 0x07);\n            sOperand = this.toStrBase(disp, 3);\n        }\n        else if (opTypeOther == DebuggerPDP11.OP_DSTNUM6) {\n            disp = (opCode & 0x3f);\n            sOperand = this.toStrBase(disp, 6);\n        }\n        else if (opTypeOther == DebuggerPDP11.OP_DSTNUM8) {\n            disp = (opCode & 0xff);\n            sOperand = this.toStrBase(disp, 8);\n        }\n        else {\n            /*\n             * Isolate all OP_SRC or OP_DST bits from opcode in the opMode variable.\n             */\n            var opMode = opCode & opType;\n\n            /*\n             * Convert OP_SRC bits into OP_DST bits, since they use the same format.\n             */\n            if (opType & DebuggerPDP11.OP_SRC) {\n                opMode >>= 6;\n                opType >>= 6;\n            }\n            if (opType & DebuggerPDP11.OP_DST) {\n                var wIndex;\n                var sTarget = null;\n                var reg = opMode & DebuggerPDP11.OP_DSTREG;\n                /*\n                 * Note that opcodes that specify only REG bits in the opType mask (ie, no MOD bits)\n                 * will automatically default to OPMODE_REG below.\n                 */\n                switch((opMode & DebuggerPDP11.OP_DSTMODE)) {\n\n                case PDP11.OPMODE.REG:                  // 0x0: REGISTER\n                    sOperand = this.getRegName(reg);\n                    break;\n\n                case PDP11.OPMODE.REGD:                 // 0x1: REGISTER DEFERRED\n                    sOperand = '@' + this.getRegName(reg);\n                    sTarget = this.getTarget(this.cpu.regsGen[reg]);\n                    break;\n\n                case PDP11.OPMODE.POSTINC:              // 0x2: POST-INCREMENT\n                    if (reg < 7) {\n                        sOperand = '(' + this.getRegName(reg) + \")+\";\n                    } else {\n                        /*\n                         * When using R7 (aka PC), POST-INCREMENT is known as IMMEDIATE\n                         */\n                        wIndex = this.getWord(dbgAddr, 2);\n                        sOperand = '#' + this.toStrBase(wIndex, -1);\n                    }\n                    break;\n\n                case PDP11.OPMODE.POSTINCD:             // 0x3: POST-INCREMENT DEFERRED\n                    if (reg < 7) {\n                        sOperand = \"@(\" + this.getRegName(reg) + \")+\";\n                    } else {\n                        /*\n                         * When using R7 (aka PC), POST-INCREMENT DEFERRED is known as ABSOLUTE\n                         */\n                        wIndex = this.getWord(dbgAddr, 2);\n                        sOperand = \"@#\" + this.toStrBase(wIndex, -1);\n                        sTarget = this.getTarget(wIndex);\n                    }\n                    break;\n\n                case PDP11.OPMODE.PREDEC:               // 0x4: PRE-DECREMENT\n                    sOperand = \"-(\" + this.getRegName(reg) + \")\";\n                    break;\n\n                case PDP11.OPMODE.PREDECD:              // 0x5: PRE-DECREMENT DEFERRED\n                    sOperand = \"@-(\" + this.getRegName(reg) + \")\";\n                    break;\n\n                case PDP11.OPMODE.INDEX:                // 0x6: INDEX\n                    wIndex = this.getWord(dbgAddr, 2);\n                    sOperand = this.toStrBase(wIndex, -1) + '(' + this.getRegName(reg) + ')';\n                    if (reg == 7) {\n                        /*\n                         * When using R7 (aka PC), INDEX is known as RELATIVE.  However, instead of displaying\n                         * such an instruction like this:\n                         *\n                         *  016156: 010167 001300          MOV   R1,1300(PC)            ; @017462\n                         *\n                         * with the effective address display to the far right, let's display it like this instead:\n                         *\n                         *  016156: 010167 001300          MOV   R1,017462\n                         *\n                         * because you can still clearly see PC-relative offset (eg, 001300) as part of the disassembly.\n                         *\n                         *      sOperand = [sOperand, this.toStrBase((wIndex + dbgAddr.addr) & 0xffff)];\n                         */\n                        sOperand = this.toStrBase(wIndex = (wIndex + dbgAddr.addr) & 0xffff);\n                        sTarget = this.getTarget(wIndex);\n                    }\n                    break;\n\n                case PDP11.OPMODE.INDEXD:               // 0x7: INDEX DEFERRED\n                    wIndex = this.getWord(dbgAddr, 2);\n                    sOperand = '@' + this.toStrBase(wIndex) + '(' + this.getRegName(reg) + ')';\n                    if (reg == 7) {\n                        /*\n                         * When using R7 (aka PC), INDEX DEFERRED is known as RELATIVE DEFERRED.  And for the same\n                         * reasons articulated above, we now display the effective address inline.\n                         *\n                         *      sOperand = [sOperand, this.toStrBase((wIndex + dbgAddr.addr) & 0xffff)];\n                         */\n                        sOperand = '@' + this.toStrBase(wIndex = (wIndex + dbgAddr.addr) & 0xffff);\n                        sTarget = this.getTarget(this.cpu.getWordSafe(wIndex));\n                    }\n                    break;\n\n                default:\n\n                    break;\n                }\n\n                if (sTarget) sOperand = [sOperand, sTarget];\n            }\n            else {\n\n            }\n        }\n        return sOperand;\n    }\n\n    /**\n     * getTarget(addr)\n     *\n     * @this {DebuggerPDP11}\n     * @param {number} addr\n     * @return {string|null}\n     */\n    getTarget(addr)\n    {\n        var sTarget = null;\n        var a = this.cpu.getAddrInfo(addr);\n        var addrPhysical = a[0];\n        if (addrPhysical >= this.cpu.addrIOPage && addrPhysical < this.bus.addrIOPage) {\n            addrPhysical = (addrPhysical - this.cpu.addrIOPage) + this.bus.addrIOPage;\n        }\n        return this.bus.getAddrInfo(addrPhysical);\n    }\n\n    /**\n     * parseInstruction(sOp, sOperand, addr)\n     *\n     * TODO: Unimplemented.  See parseInstruction() in modules/c1pjs/lib/debugger.js for a sample implementation.\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} sOp\n     * @param {string|undefined} sOperand\n     * @param {DbgAddrPDP11} dbgAddr of memory where this instruction is being assembled\n     * @return {Array.<number>} of opcode bytes; if the instruction can't be parsed, the array will be empty\n     */\n    parseInstruction(sOp, sOperand, dbgAddr)\n    {\n        var aOpBytes = [];\n        this.println(\"not supported yet\");\n        return aOpBytes;\n    }\n\n    /**\n     * getFlagOutput(sFlag)\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} sFlag\n     * @return {string} value of flag\n     */\n    getFlagOutput(sFlag)\n    {\n        var b;\n        switch (sFlag) {\n        case 'N':\n            b = this.cpu.getNF();\n            break;\n        case 'Z':\n            b = this.cpu.getZF();\n            break;\n        case 'V':\n            b = this.cpu.getVF();\n            break;\n        case 'C':\n            b = this.cpu.getCF();\n            break;\n        default:\n            b = 0;\n            break;\n        }\n        return sFlag.charAt(0) + (b? '1' : '0') + ' ';\n    }\n\n    /**\n     * getRegOutput(iReg)\n     *\n     * @this {DebuggerPDP11}\n     * @param {number} iReg\n     * @return {string}\n     */\n    getRegOutput(iReg)\n    {\n        var sReg = this.getRegName(iReg);\n        if (sReg) {\n            sReg += '=' + this.toStrBase(this.getRegValue(iReg)) + ' ';\n        }\n        return sReg;\n    }\n\n    /**\n     * getMiscDump()\n     *\n     * Sample register dump:\n     *\n     *      M0=xxxxxx M1=xxxxxx M2=xxxxxx M3=xxxxxx ER=xxxxxx\n     *\n     * @this {DebuggerPDP11}\n     * @return {string}\n     */\n    getMiscDump()\n    {\n        var sDump = \"\";\n        sDump += this.getRegOutput(DebuggerPDP11.REG_M0) + this.getRegOutput(DebuggerPDP11.REG_M1);\n        sDump += this.getRegOutput(DebuggerPDP11.REG_M2) + this.getRegOutput(DebuggerPDP11.REG_M3) + this.getRegOutput(DebuggerPDP11.REG_ER);\n        sDump += '\\n';\n        sDump += this.getRegOutput(DebuggerPDP11.REG_SR) + this.getRegOutput(DebuggerPDP11.REG_AR) + this.getRegOutput(DebuggerPDP11.REG_DR);\n        return sDump;\n    }\n\n    /**\n     * getRegDump(fMisc)\n     *\n     * Sample register dump:\n     *\n     *      R0=xxxxxx R1=xxxxxx R2=xxxxxx R3=xxxxxx R4=xxxxxx R5=xxxxxx\n     *      SP=xxxxxx PC=xxxxxx PS=xxxxxx PI=xxxxxx SL=xxxxxx T0 N0 Z0 V0 C0\n     *\n     * @this {DebuggerPDP11}\n     * @param {boolean} [fMisc] (true to include misc registers)\n     * @return {string}\n     */\n    getRegDump(fMisc)\n    {\n        var i;\n        var sDump = \"\";\n        for (i = 0; i < PDP11.REG.SP; i++) {\n            sDump += this.getRegOutput(i);\n        }\n        sDump += '\\n';\n        sDump += this.getRegOutput(PDP11.REG.SP) + this.getRegOutput(PDP11.REG.PC);\n        sDump += this.getRegOutput(DebuggerPDP11.REG_PS) + this.getRegOutput(DebuggerPDP11.REG_PI) + this.getRegOutput(DebuggerPDP11.REG_SL);\n        sDump += this.getFlagOutput('T') + this.getFlagOutput('N') + this.getFlagOutput('Z') + this.getFlagOutput('V') + this.getFlagOutput('C');\n        if (fMisc) sDump += '\\n' + this.getMiscDump();\n        return sDump;\n    }\n\n    /**\n     * comparePairs(p1, p2)\n     *\n     * @this {DebuggerPDP11}\n     * @param {number|string|Array|Object} p1\n     * @param {number|string|Array|Object} p2\n     * @return {number}\n     */\n    comparePairs(p1, p2)\n    {\n        return p1[0] > p2[0]? 1 : p1[0] < p2[0]? -1 : 0;\n    }\n\n    /**\n     * addSymbols(sModule, addr, len, aSymbols)\n     *\n     * As filedump.js (formerly convrom.php) explains, aSymbols is a JSON-encoded object whose properties consist\n     * of all the symbols (in upper-case), and the values of those properties are objects containing any or all of\n     * the following properties:\n     *\n     *      'v': the value of an absolute (unsized) value\n     *      'b': either 1, 2, 4 or undefined if an unsized value\n     *      's': either a hard-coded segment or undefined\n     *      'o': the offset of the symbol within the associated address space\n     *      'l': the original-case version of the symbol, present only if it wasn't originally upper-case\n     *      'a': annotation for the specified offset; eg, the original assembly language, with optional comment\n     *\n     * To that list of properties, we also add:\n     *\n     *      'p': the physical address (calculated whenever both 's' and 'o' properties are defined)\n     *\n     * Note that values for any 'v', 'b', 's' and 'o' properties are unquoted decimal values, and the values\n     * for any 'l' or 'a' properties are quoted strings. Also, if double-quotes were used in any of the original\n     * annotation ('a') values, they will have been converted to two single-quotes, so we're responsible for\n     * converting them back to individual double-quotes.\n     *\n     * For example:\n     *      {\n     *          'HF_PORT': {\n     *              'v':800\n     *          },\n     *          'HDISK_INT': {\n     *              'b':4, 's':0, 'o':52\n     *          },\n     *          'ORG_VECTOR': {\n     *              'b':4, 's':0, 'o':76\n     *          },\n     *          'CMD_BLOCK': {\n     *              'b':1, 's':64, 'o':66\n     *          },\n     *          'DISK_SETUP': {\n     *              'o':3\n     *          },\n     *          '.40': {\n     *              'o':40, 'a':\"MOV AX,WORD PTR ORG_VECTOR ;GET DISKETTE VECTOR\"\n     *          }\n     *      }\n     *\n     * If a symbol only has an offset, then that offset value can be assigned to the symbol property directly:\n     *\n     *          'DISK_SETUP': 3\n     *\n     * The last property is an example of an \"anonymous\" entry, for offsets where there is no associated symbol.\n     * Such entries are identified by a period followed by a unique number (usually the offset of the entry), and\n     * they usually only contain offset ('o') and annotation ('a') properties.  I could eliminate the leading\n     * period, but it offers a very convenient way of quickly discriminating among genuine vs. anonymous symbols.\n     *\n     * We add all these entries to our internal symbol table, which is an array of 4-element arrays, each of which\n     * look like:\n     *\n     *      [addr, len, aSymbols, aOffsets]\n     *\n     * There are two basic symbol operations: findSymbol(), which takes an address and finds the symbol, if any,\n     * at that address, and findSymbolAddr(), which takes a string and attempts to match it to a non-anonymous\n     * symbol with a matching offset ('o') property.\n     *\n     * To implement findSymbol() efficiently, addSymbols() creates an array of [offset, sSymbol] pairs\n     * (aOffsets), one pair for each symbol that corresponds to an offset within the specified address space.\n     *\n     * We guarantee the elements of aOffsets are in offset order, because we build it using binaryInsert();\n     * it's quite likely that the MAP file already ordered all its symbols in offset order, but since they're\n     * hand-edited files, we can't assume that, and we need to ensure that findSymbol()'s binarySearch() operates\n     * properly.\n     *\n     * @this {DebuggerPDP11}\n     * @param {string|null} sModule\n     * @param {number|null} addr (physical address where the symbols are located, if the memory is physical; eg, ROM)\n     * @param {number} len (the size of the region, in bytes)\n     * @param {Object} aSymbols (collection of symbols in this group; the format of this collection is described below)\n     */\n    addSymbols(sModule, addr, len, aSymbols)\n    {\n        var dbgAddr = {};\n        var aOffsets = [];\n        for (var sSymbol in aSymbols) {\n            var symbol = aSymbols[sSymbol];\n            if (typeof symbol == \"number\") {\n                aSymbols[sSymbol] = symbol = {'o': symbol};\n            }\n            var offSymbol = symbol['o'];\n            var sAnnotation = symbol['a'];\n            if (offSymbol !== undefined) {\n                Usr.binaryInsert(aOffsets, [offSymbol >>> 0, sSymbol], this.comparePairs);\n            }\n            if (sAnnotation) symbol['a'] = sAnnotation.replace(/''/g, \"\\\"\");\n        }\n        var symbolTable = {\n            sModule: sModule,\n            addr: addr,\n            len: len,\n            aSymbols: aSymbols,\n            aOffsets: aOffsets\n        };\n        this.aSymbolTable.push(symbolTable);\n    }\n\n    /**\n     * dumpSymbols()\n     *\n     * TODO: Add \"numerical\" and \"alphabetical\" dump options. This is simply dumping them in whatever\n     * order they appeared in the original MAP file.\n     *\n     * @this {DebuggerPDP11}\n     */\n    dumpSymbols()\n    {\n        for (var iTable = 0; iTable < this.aSymbolTable.length; iTable++) {\n            var symbolTable = this.aSymbolTable[iTable];\n            for (var sSymbol in symbolTable.aSymbols) {\n                if (sSymbol.charAt(0) == '.') continue;\n                var symbol = symbolTable.aSymbols[sSymbol];\n                var offSymbol = symbol['o'];\n                if (offSymbol === undefined) continue;\n                var sSymbolOrig = symbolTable.aSymbols[sSymbol]['l'];\n                if (sSymbolOrig) sSymbol = sSymbolOrig;\n                this.println(this.toStrOffset(offSymbol) + ' ' + sSymbol);\n            }\n        }\n    }\n\n    /**\n     * findSymbol(dbgAddr, fNearest)\n     *\n     * Search aSymbolTable for dbgAddr, and return an Array for the corresponding symbol (empty if not found).\n     *\n     * If fNearest is true, and no exact match was found, then the Array returned will contain TWO sets of\n     * entries: [0]-[3] will refer to closest preceding symbol, and [4]-[7] will refer to the closest subsequent symbol.\n     *\n     * @this {DebuggerPDP11}\n     * @param {DbgAddrPDP11} dbgAddr\n     * @param {boolean} [fNearest]\n     * @return {Array} where [0] == symbol name, [1] == symbol value, [2] == any annotation, and [3] == any associated comment\n     */\n    findSymbol(dbgAddr, fNearest)\n    {\n        var aSymbol = [];\n        var addrSymbol = this.getAddr(dbgAddr) >>> 0;\n        for (var iTable = 0; iTable < this.aSymbolTable.length; iTable++) {\n            var symbolTable = this.aSymbolTable[iTable];\n            var addr = symbolTable.addr >>> 0;\n            var len = symbolTable.len;\n            if (addrSymbol >= addr && addrSymbol < addr + len) {\n                var offSymbol = addrSymbol - addr;\n                var result = Usr.binarySearch(symbolTable.aOffsets, [offSymbol], this.comparePairs);\n                if (result >= 0) {\n                    this.returnSymbol(iTable, result, aSymbol);\n                }\n                else if (fNearest) {\n                    result = ~result;\n                    this.returnSymbol(iTable, result-1, aSymbol);\n                    this.returnSymbol(iTable, result, aSymbol);\n                }\n                break;\n            }\n        }\n        return aSymbol;\n    }\n\n    /**\n     * findSymbolAddr(sSymbol)\n     *\n     * Search our symbol tables for sSymbol, and if found, return a dbgAddr (same as parseAddr()).\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} sSymbol\n     * @return {DbgAddrPDP11|undefined}\n     */\n    findSymbolAddr(sSymbol)\n    {\n        var dbgAddr;\n        var offSymbol = this.bus.getAddrByName(sSymbol);\n\n        if (offSymbol == null && sSymbol.match(/^[a-z_][a-z0-9_]*$/i)) {\n            var sUpperCase = sSymbol.toUpperCase();\n            for (var iTable = 0; iTable < this.aSymbolTable.length; iTable++) {\n                var symbolTable = this.aSymbolTable[iTable];\n                var symbol = symbolTable.aSymbols[sUpperCase];\n                if (symbol != null) {\n                    offSymbol = symbol['o'];\n                    /*\n                     * If the symbol matched but there's no 'o' offset (ie, it wasn't for an address), there's\n                     * no point looking any farther, since each symbol appears only once.\n                     *\n                     * NOTE: We assume that every ROM is ORG'ed at 0x0000, and therefore unless the symbol has an\n                     * explicitly-defined segment, we return the segment associated with the entire group; for a ROM,\n                     * that segment is normally \"addrROM >>> 4\".  Down the road, we may want/need to support a special\n                     * symbol entry (eg, \".ORG\") that defines an alternate origin.\n                     */\n                    break;\n                }\n            }\n        }\n        if (offSymbol != null) {\n            dbgAddr = this.newAddr(offSymbol);\n        }\n        return dbgAddr;\n    }\n\n    /**\n     * returnSymbol(iTable, iOffset, aSymbol)\n     *\n     * Helper function for findSymbol().\n     *\n     * @param {number} iTable\n     * @param {number} iOffset\n     * @param {Array} aSymbol is updated with the specified symbol, if it exists\n     */\n    returnSymbol(iTable, iOffset, aSymbol)\n    {\n        var symbol = {};\n        var aOffsets = this.aSymbolTable[iTable].aOffsets;\n        var offset = 0, sSymbol = null;\n        if (iOffset >= 0 && iOffset < aOffsets.length) {\n            offset = aOffsets[iOffset][0];\n            sSymbol = aOffsets[iOffset][1];\n        }\n        if (sSymbol) {\n            symbol = this.aSymbolTable[iTable].aSymbols[sSymbol];\n            sSymbol = (sSymbol.charAt(0) == '.'? null : (symbol['l'] || sSymbol));\n        }\n        aSymbol.push(sSymbol);\n        aSymbol.push(offset);\n        aSymbol.push(symbol['a']);\n        aSymbol.push(symbol['c']);\n    }\n\n    /**\n     * doHelp()\n     *\n     * @this {DebuggerPDP11}\n     */\n    doHelp()\n    {\n        var s = \"commands:\";\n        for (var sCommand in DebuggerPDP11.COMMANDS) {\n            s += '\\n' + Str.pad(sCommand, 9) + DebuggerPDP11.COMMANDS[sCommand];\n        }\n        if (!this.checksEnabled()) s += \"\\nnote: history disabled if no exec breakpoints\";\n        this.println(s);\n    }\n\n    /**\n     * doAssemble(asArgs)\n     *\n     * This always receives the complete argument array, where the order of the arguments is:\n     *\n     *      [0]: the assemble command (assumed to be \"a\")\n     *      [1]: the target address (eg, \"200\")\n     *      [2]: the operation code, aka instruction name (eg, \"adc\")\n     *      [3]: the operation mode operand, if any (eg, \"14\", \"[1234]\", etc)\n     *\n     * The Debugger enters \"assemble mode\" whenever only the first (or first and second) arguments are present.\n     * As long as \"assemble mode is active, the user can omit the first two arguments on all later assemble commands\n     * until \"assemble mode\" is cancelled with an empty command line; the command processor automatically prepends \"a\"\n     * and the next available target address to the argument array.\n     *\n     * Entering \"assemble mode\" is optional; one could enter a series of fully-qualified assemble commands; eg:\n     *\n     *      a ff00 cld\n     *      a ff01 ldx 28\n     *      ...\n     *\n     * without ever entering \"assemble mode\", but of course, that requires more typing and doesn't take advantage\n     * of automatic target address advancement (see dbgAddrAssemble).\n     *\n     * NOTE: As the previous example implies, you can even assemble new instructions into ROM address space;\n     * as our setByte() function explains, the ROM write-notification handlers only refuse writes from the CPU.\n     *\n     * @this {DebuggerPDP11}\n     * @param {Array.<string>} asArgs is the complete argument array, beginning with the \"a\" command in asArgs[0]\n     */\n    doAssemble(asArgs)\n    {\n        var dbgAddr = this.parseAddr(asArgs[1], true);\n        if (!dbgAddr) return;\n\n        this.dbgAddrAssemble = dbgAddr;\n        if (asArgs[2] === undefined) {\n            this.println(\"begin assemble at \" + this.toStrAddr(dbgAddr));\n            this.fAssemble = true;\n            this.cmp.updateDisplays();\n            return;\n        }\n\n        var aOpBytes = this.parseInstruction(asArgs[2], asArgs[3], dbgAddr);\n        if (aOpBytes.length) {\n            for (var i = 0; i < aOpBytes.length; i++) {\n                this.setByte(dbgAddr, aOpBytes[i], 1);\n            }\n            /*\n             * Since getInstruction() also updates the specified address, dbgAddrAssemble is automatically advanced.\n             */\n            this.println(this.getInstruction(this.dbgAddrAssemble));\n        }\n    }\n\n    /**\n     * doBreak(sCmd, sAddr, sOptions)\n     *\n     * As the \"help\" output below indicates, the following breakpoint commands are supported:\n     *\n     *      bp #    set exec breakpoint\n     *      br #    set read breakpoint\n     *      bw #    set write breakpoint\n     *      bc #    clear breakpoint (* to clear all)\n     *      bl      list all breakpoints\n     *      bn [#]  break after # instruction(s)\n     *\n     * The \"bn\" command, like the \"dh\" command and all other commands that use an instruction count,\n     * assumes a decimal value, regardless of the current base.  Use \"bn\" without an argument to display\n     * the break count, and use \"bn 0\" to clear the break count.\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} sCmd\n     * @param {string|undefined} [sAddr]\n     * @param {string} [sOptions] (the rest of the breakpoint command-line)\n     */\n    doBreak(sCmd, sAddr, sOptions)\n    {\n        if (sAddr == '?') {\n            this.println(\"breakpoint commands:\");\n            this.println(\"\\tbp #\\tset exec breakpoint\");\n            this.println(\"\\tbr #\\tset read breakpoint\");\n            this.println(\"\\tbw #\\tset write breakpoint\");\n            this.println(\"\\tbc #\\tclear breakpoint (* to clear all)\");\n            this.println(\"\\tbl\\tlist all breakpoints\");\n            this.println(\"\\tbn [#]\\tbreak after # instruction(s)\");\n            return;\n        }\n\n        var sParm = sCmd.charAt(1);\n        if (sParm == 'l') {\n            var cBreaks = 0;\n            cBreaks += this.listBreakpoints(this.aBreakExec);\n            cBreaks += this.listBreakpoints(this.aBreakRead);\n            cBreaks += this.listBreakpoints(this.aBreakWrite);\n            if (!cBreaks) this.println(\"no breakpoints\");\n            return;\n        }\n\n        if (sParm == 'n') {\n            var n = +sAddr || 0;\n            if (sAddr) this.nBreakInstructions = n;\n            this.println(\"break after \" + n + \" instruction(s)\");\n            return;\n        }\n\n        if (sAddr === undefined) {\n            this.println(\"missing breakpoint address\");\n            return;\n        }\n\n        var dbgAddr = this.newAddr();\n        if (sAddr != '*') {\n            dbgAddr = this.parseAddr(sAddr, true, true);\n            if (!dbgAddr) return;\n        }\n\n        if (sParm == 'c') {\n            if (dbgAddr.addr == null) {\n                this.clearBreakpoints();\n                this.println(\"all breakpoints cleared\");\n                return;\n            }\n            if (this.findBreakpoint(this.aBreakExec, dbgAddr, true))\n                return;\n            if (this.findBreakpoint(this.aBreakRead, dbgAddr, true))\n                return;\n            if (this.findBreakpoint(this.aBreakWrite, dbgAddr, true))\n                return;\n            this.println(\"breakpoint missing: \" + this.toStrAddr(dbgAddr));\n            return;\n        }\n\n        if (dbgAddr.addr == null) return;\n\n        this.parseAddrOptions(dbgAddr, sOptions);\n\n        if (sParm == 'p') {\n            this.addBreakpoint(this.aBreakExec, dbgAddr);\n            return;\n        }\n        if (sParm == 'r') {\n            this.addBreakpoint(this.aBreakRead, dbgAddr);\n            return;\n        }\n        if (sParm == 'w') {\n            this.addBreakpoint(this.aBreakWrite, dbgAddr);\n            return;\n        }\n        this.println(\"unknown breakpoint command: \" + sParm);\n    }\n\n    /**\n     * doClear(sCmd)\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} [sCmd] (eg, \"cls\" or \"clear\")\n     */\n    doClear(sCmd)\n    {\n        this.cmp.clearPanel();\n    }\n\n    /**\n     * doDump(asArgs)\n     *\n     * The length parameter is interpreted as a number of bytes (or words, or dwords) to dump,\n     * and it is interpreted using the current base.\n     *\n     * @this {DebuggerPDP11}\n     * @param {Array.<string>} asArgs (formerly sCmd, [sAddr], [sLen] and [sBytes])\n     */\n    doDump(asArgs)\n    {\n        var m;\n        var sCmd = asArgs[0];\n        var sAddr = asArgs[1];\n        var sLen = asArgs[2];\n        var sBytes = asArgs[3];\n\n        if (sAddr == '?') {\n            var sDumpers = \"\";\n            for (m in MessagesPDP11.CATEGORIES) {\n                if (this.afnDumpers[m]) {\n                    if (sDumpers) sDumpers += ',';\n                    sDumpers += m;\n                }\n            }\n            sDumpers += \",state,symbols\";\n            this.println(\"dump memory commands:\");\n            this.println(\"\\tda [a]        dump info for address a\");\n            this.println(\"\\tdb [a] [n]    dump n bytes at address a\");\n            this.println(\"\\tdw [a] [n]    dump n words at address a\");\n            this.println(\"\\tdd [a] [n]    dump n dwords at address a\");\n            this.println(\"\\tds [a] [n]    dump n words at address a as JSON\");\n            this.println(\"\\tdh [p] [n]    dump n instructions from history position p\");\n            if (sDumpers.length) this.println(\"dump extension commands:\\n\\t\" + sDumpers);\n            return;\n        }\n\n        if (sAddr == \"state\") {\n            var sState = this.cmp.powerOff(true);\n            if (sLen == \"console\") {\n                /*\n                 * Console buffers are notoriously small, and even the following code, which breaks the\n                 * data into parts (eg, \"d state console 1\", \"d state console 2\", etc) just isn't that helpful.\n                 *\n                 *      var nPart = +sBytes;\n                 *      if (nPart) sState = sState.substr(1000000 * (nPart-1), 1000000);\n                 *\n                 * So, the best way to capture a large machine state is to use the new \"Save Machine\" link\n                 * that downloads a machine's entire state.  Alternatively, run your own local server and use\n                 * server-side storage.  Take a look at the \"Save\" binding in computer.js, which binds an HTML\n                 * control to the computer.powerOff() and computer.saveServerState() functions.\n                 */\n                console.log(sState);\n            } else {\n                this.doClear();\n                if (sState) this.println(sState);\n            }\n            return;\n        }\n\n        if (sAddr == \"symbols\") {\n            this.dumpSymbols();\n            return;\n        }\n\n        if (sCmd == \"d\") {\n            for (m in MessagesPDP11.CATEGORIES) {\n                if (asArgs[1] == m) {\n                    var fnDumper = this.afnDumpers[m];\n                    if (fnDumper) {\n                        asArgs.shift();\n                        asArgs.shift();\n                        fnDumper(asArgs);\n                    } else {\n                        this.println(\"no dump registered for \" + sAddr);\n                    }\n                    return;\n                }\n            }\n            if (!sAddr) sCmd = this.sCmdDumpPrev || \"dw\";\n        } else {\n            this.sCmdDumpPrev = sCmd;\n        }\n\n        if (sCmd == \"dh\") {\n            this.dumpHistory(sAddr, sLen);\n            return;\n        }\n\n        var dbgAddr = this.parseAddr(sAddr);\n        if (!dbgAddr) return;\n\n        if (sCmd == \"da\") {\n            /*\n             * Sample output for a virtual address (\"da 23042\"):\n             *\n             *                      00,010,011,000,100,010  00023042\n             *       OFFSET:             0,011,000,100,010  00003042\n             *   +   KIPAR1: 0,000,001,101,111,010,000,000  00157200\n             *   &  MMUMASK: 1,111,111,111,111,111,111,111  17777777\n             *   = PHYSICAL: 0,000,001,110,010,010,100,010  00162242\n             *\n             * and sample output for a physical address (eg, \"da %37772\"; note the % prefix):\n             *\n             *               0,000,000,011,111,111,111,010  00037772\n             *       OFFSET:             1,111,111,111,010  00017772\n             *   UNIMAP[01]: 1,111,100,001,110,111,000,000  17416700\n             *     PHYSICAL: 1,111,100,011,110,110,111,010  17436672\n             *\n             * TODO: Tweak this output to accommodate 18-bit machines as well as 22-bit machines.\n             */\n            var fPhysical = (dbgAddr.fPhysical || dbgAddr.addr > 0xffff);\n            var a = this.cpu.getAddrInfo(dbgAddr.addr || 0, fPhysical);\n            this.println(Str.pad(\"\", fPhysical? 12: 19) + Str.toBin(dbgAddr.addr, fPhysical? 22 : 17, 3) + \"  \" + Str.toOct(dbgAddr.addr, 8));\n            if (a.length < 6) {\n                if (a.length > 2) {\n                    this.println(\"    OFFSET:             \" + Str.toBin(a[3], 13, 3) + \"  \" + Str.toOct(a[3], 8));\n                    this.println(\"UNIMAP[\" + Str.toDec(a[1], 2) + \"]: \" + Str.toBin(a[2], 22, 3) + \"  \" + Str.toOct(a[2], 8));\n                }\n                this.println(\"  PHYSICAL: \" + Str.toBin(a[0], 22, 3) + \"  \" + Str.toOct(a[0], 8))\n            } else {\n                this.println(\"    OFFSET:             \" + Str.toBin(a[1], 13, 3) + \"  \" + Str.toOct(a[1], 8));\n                this.println(\"+   \" + DebuggerPDP11.MODES[a[2]] + \"PAR\" + a[3] + \": \" + Str.toBin(a[4], 22, 3) + \"  \" + Str.toOct(a[4], 8));\n                this.println(\"&  MMUMASK: \" + Str.toBin(a[5], 22, 3) + \"  \" + Str.toOct(a[5], 8));\n                this.println(\"= PHYSICAL: \" + Str.toBin(a[0], 22, 3) + \"  \" + Str.toOct(a[0], 8))\n            }\n            return;\n        }\n\n        var len = 0;\n        var fJSON = (sCmd == \"ds\");\n\n        if (sLen) {\n            if (sLen.charAt(0) == 'l') {\n                sLen = sLen.substr(1) || sBytes;\n                len = this.parseValue(sLen);\n            }\n            else {\n                var dbgAddrEnd = this.parseAddr(sLen);\n                if (dbgAddrEnd) len = dbgAddrEnd.addr - dbgAddr.addr;\n            }\n            if (len < 0) len = 0;\n            if (len > 0x10000) len = 0x10000;\n        }\n\n        var nBase = this.nBase;\n        if (dbgAddr.nBase) this.nBase = dbgAddr.nBase;\n\n        /*\n         * I've changed the code below to effectively make \"dw\" the default if only \"d\" is specified,\n         * since this is primarily a word-oriented machine.\n         */\n        var size = (sCmd == \"dd\"? 4 : (sCmd == \"db\"? 1 : 2));\n        var nBytes = (size * len) || 128;\n        var nBytesPerLine = fJSON? 16 : this.nBase;\n        var nLines = (((nBytes + nBytesPerLine - 1) / nBytesPerLine)|0) || 1;\n\n        var sDump = \"\";\n        while (nLines-- && nBytes > 0) {\n            var sData = \"\", sChars = \"\";\n            sAddr = this.toStrAddr(dbgAddr);\n            /*\n             * Dump 8 bytes per line when using base 8, and dump 16 bytes when using base 16.\n             *\n             * And while we used to always call getByte() and assemble them into words or dwords as appropriate, I've\n             * changed the logic below to honor \"dw\" by calling getWord(), since the Bus interfaces have been updated\n             * to prevent generating traps due to to Debugger access of unaligned memory and/or undefined IOPAGE addresses.\n             *\n             * Besides, it's nice for \"db\" and \"dw\" to generate the same Bus activity that typical byte and word reads do.\n             */\n            var i = nBytesPerLine;\n            var data = 0, shift = 0;\n            while (i > 0 && nBytes > 0) {\n                var n = 1;\n                var v = size == 1? this.getByte(dbgAddr, n) : this.getWord(dbgAddr, (n = 2));\n                data |= (v << (shift << 3));\n                shift += n;\n                if (shift == size) {\n                    if (fJSON) {\n                        if (sData) sData += \",\";\n                        sData += \"0x\"+ Str.toHex(data, size << 1);\n                    } else {\n                        sData += this.toStrBase(data, size << 3);\n                        sData += (size == 1? (i == 9? '-' : ' ') : \"  \");\n                    }\n                    data = shift = 0;\n                }\n                i -= n; nBytes -= n;\n                while (size == 1 && n--) {\n                    var c = v & 0xff;\n                    sChars += (c >= 32 && c < 127? String.fromCharCode(c) : '.');\n                    v >>= 8;\n                }\n            }\n            if (sDump) sDump += \"\\n\";\n            if (fJSON) {\n                sDump += sData + \",\";\n            } else {\n                sDump += sAddr + \":  \" + sData + ((i == 0)? (' ' + sChars) : \"\");\n            }\n        }\n\n        if (sDump) this.println(sDump);\n\n        this.dbgAddrNextData = dbgAddr;\n        this.nBase = nBase;\n    }\n\n    /**\n     * doEdit(asArgs)\n     *\n     * @this {DebuggerPDP11}\n     * @param {Array.<string>} asArgs\n     */\n    doEdit(asArgs)\n    {\n        var size, mask;\n        var fnGet, fnSet;\n        var sCmd = asArgs[0];\n        var sAddr = asArgs[1];\n        if (sCmd == \"eb\") {\n            size = 1;\n            mask = 0xff;\n            fnGet = this.getByte;\n            fnSet = this.setByte;\n        }\n        else if (sCmd == \"e\" || sCmd == \"ew\") {\n            size = 2;\n            mask = 0xffff;\n            fnGet = this.getWord;\n            fnSet = this.setWord;\n        } else {\n            sAddr = null;\n        }\n        if (sAddr == null) {\n            this.println(\"edit memory commands:\");\n            this.println(\"\\teb [a] [...]  edit bytes at address a\");\n            this.println(\"\\tew [a] [...]  edit words at address a\");\n            return;\n        }\n        var dbgAddr = this.parseAddr(sAddr);\n        if (!dbgAddr) return;\n        for (var i = 2; i < asArgs.length; i++) {\n            var vNew = this.parseExpression(asArgs[i]);\n            if (vNew === undefined) {\n                this.println(\"unrecognized value: \" + asArgs[i]);\n                break;\n            }\n            if (vNew & ~mask) {\n                this.println(\"warning: \" + Str.toHex(vNew) + \" exceeds \" + size + \"-byte value\");\n            }\n            this.println(\"changing \" + this.toStrAddr(dbgAddr) + (this.messageEnabled(MessagesPDP11.BUS)? \"\" : (\" from \" + this.toStrBase(fnGet.call(this, dbgAddr), size << 3))) + \" to \" + this.toStrBase(vNew, size << 3));\n            fnSet.call(this, dbgAddr, vNew, size);\n        }\n    }\n\n    /**\n     * doHalt(fQuiet)\n     *\n     * @this {DebuggerPDP11}\n     * @param {boolean} [fQuiet]\n     */\n    doHalt(fQuiet)\n    {\n        var sMsg;\n        if (this.flags.running) {\n            if (!fQuiet) this.println(\"halting\");\n            this.stopCPU();\n        } else {\n            if (this.isBusy(true)) return;\n            if (!fQuiet) this.println(\"already halted\");\n        }\n    }\n\n    /**\n     * doIf(sCmd, fQuiet)\n     *\n     * NOTE: Don't forget that the default base for all numeric constants is 16 (hex), so when you evaluate\n     * an expression like \"a==10\", it will compare the value of the variable \"a\" to 0x10; use a trailing period\n     * (eg, \"10.\") if you really intend decimal.\n     *\n     * Also, if no variable named \"a\" exists, \"a\" will evaluate to 0x0A, so the expression \"a==10\" becomes\n     * \"0x0A==0x10\" (false), whereas the expression \"a==10.\" becomes \"0x0A==0x0A\" (true).\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} sCmd\n     * @param {boolean} [fQuiet]\n     * @return {boolean} true if expression is non-zero, false if zero (or undefined due to a parse error)\n     */\n    doIf(sCmd, fQuiet)\n    {\n        sCmd = Str.trim(sCmd);\n        if (!this.parseExpression(sCmd)) {\n            if (!fQuiet) this.println(\"false: \" + sCmd);\n            return false;\n        }\n        if (!fQuiet) this.println(\"true: \" + sCmd);\n        return true;\n    }\n\n    /**\n     * doInfo(asArgs)\n     *\n     * @this {DebuggerPDP11}\n     * @param {Array.<string>} asArgs\n     * @return {boolean} true only if the instruction info command (\"n\") is supported\n     */\n    doInfo(asArgs)\n    {\n        if (DEBUG) {\n            this.println(\"msPerYield: \" + this.cpu.msPerYield);\n            this.println(\"nCyclesPerYield: \" + this.cpu.nCyclesPerYield);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * doVar(sCmd)\n     *\n     * The command must be of the form \"{variable} = [{expression}]\", where expression may contain constants,\n     * operators, registers, symbols, other variables, or nothing at all; in the latter case, the variable, if\n     * any, is deleted.\n     *\n     * Other supported shorthand: \"var\" with no parameters prints the values of all variables, and \"var {variable}\"\n     * prints the value of the specified variable.\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} sCmd\n     * @return {boolean} true if valid \"var\" assignment, false if not\n     */\n    doVar(sCmd)\n    {\n        var a = sCmd.match(/^\\s*([A-Z_]?[A-Z0-9_]*)\\s*(=?)\\s*(.*)$/i);\n        if (a) {\n            if (!a[1]) {\n                if (!this.printVariable()) this.println(\"no variables\");\n                return true;    // it's not considered an error to print an empty list of variables\n            }\n            if (!a[2]) {\n                return this.printVariable(a[1]);\n            }\n            if (!a[3]) {\n                this.delVariable(a[1]);\n                return true;    // it's not considered an error to delete a variable that didn't exist\n            }\n            var v = this.parseExpression(a[3]);\n            if (v !== undefined) {\n                this.setVariable(a[1], v);\n                return true;\n            }\n            return false;\n        }\n        this.println(\"invalid assignment:\" + sCmd);\n        return false;\n    }\n\n    /**\n     * doList(sAddr, fPrint)\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} sAddr\n     * @param {boolean} [fPrint]\n     * @return {string|null}\n     */\n    doList(sAddr, fPrint)\n    {\n        var sSymbol = null;\n\n        var dbgAddr = this.parseAddr(sAddr, true);\n        if (dbgAddr) {\n            var addr = this.getAddr(dbgAddr);\n            var aSymbol = this.findSymbol(dbgAddr, true);\n            if (aSymbol.length) {\n                var nDelta, sDelta, s;\n                if (aSymbol[0]) {\n                    sDelta = \"\";\n                    nDelta = dbgAddr.addr - aSymbol[1];\n                    if (nDelta) sDelta = \" + \" + Str.toHexWord(nDelta);\n                    s = aSymbol[0] + \" (\" + this.toStrOffset(aSymbol[1]) + ')' + sDelta;\n                    if (fPrint) this.println(s);\n                    sSymbol = s;\n                }\n                if (aSymbol.length > 4 && aSymbol[4]) {\n                    sDelta = \"\";\n                    nDelta = aSymbol[5] - dbgAddr.addr;\n                    if (nDelta) sDelta = \" - \" + Str.toHexWord(nDelta);\n                    s = aSymbol[4] + \" (\" + this.toStrOffset(aSymbol[5]) + ')' + sDelta;\n                    if (fPrint) this.println(s);\n                    if (!sSymbol) sSymbol = s;\n                }\n            } else {\n                if (fPrint) this.println(\"no symbols\");\n            }\n        }\n        return sSymbol;\n    }\n\n    /**\n     * doMessages(asArgs)\n     *\n     * @this {DebuggerPDP11}\n     * @param {Array.<string>} asArgs\n     */\n    doMessages(asArgs)\n    {\n        var m;\n        var fCriteria = null;\n        var sCategory = asArgs[1];\n        if (sCategory == '?') sCategory = undefined;\n\n        if (sCategory !== undefined) {\n            var bitsMessage = 0;\n            if (sCategory == \"all\") {\n                bitsMessage = (0xffffffff|0) & ~(MessagesPDP11.HALT | MessagesPDP11.KEYS | MessagesPDP11.BUFFER);\n                sCategory = null;\n            } else if (sCategory == \"on\") {\n                fCriteria = true;\n                sCategory = null;\n            } else if (sCategory == \"off\") {\n                fCriteria = false;\n                sCategory = null;\n            } else {\n                /*\n                 * Internally, we use \"key\" instead of \"keys\", since the latter is a method on JavasScript objects,\n                 * but externally, we allow the user to specify \"keys\"; \"kbd\" is also allowed as shorthand for \"keyboard\".\n                 */\n                if (sCategory == \"keys\") sCategory = \"key\";\n                if (sCategory == \"kbd\") sCategory = \"keyboard\";\n                for (m in MessagesPDP11.CATEGORIES) {\n                    if (sCategory == m) {\n                        bitsMessage = MessagesPDP11.CATEGORIES[m];\n                        fCriteria = !!(this.bitsMessage & bitsMessage);\n                        break;\n                    }\n                }\n                if (!bitsMessage) {\n                    this.println(\"unknown message category: \" + sCategory);\n                    return;\n                }\n            }\n            if (bitsMessage) {\n                if (asArgs[2] == \"on\") {\n                    this.bitsMessage |= bitsMessage;\n                    fCriteria = true;\n                }\n                else if (asArgs[2] == \"off\") {\n                    this.bitsMessage &= ~bitsMessage;\n                    fCriteria = false;\n                    if (bitsMessage == MessagesPDP11.BUFFER) {\n                        var i = this.aMessageBuffer.length >= 1000? this.aMessageBuffer.length - 1000 : 0;\n                        while (i < this.aMessageBuffer.length) {\n                            this.println(this.aMessageBuffer[i++]);\n                        }\n                        this.aMessageBuffer = [];\n                    }\n                }\n            }\n        }\n\n        /*\n         * Display those message categories that match the current criteria (on or off)\n         */\n        var n = 0;\n        var sCategories = \"\";\n        for (m in MessagesPDP11.CATEGORIES) {\n            if (!sCategory || sCategory == m) {\n                var bitMessage = MessagesPDP11.CATEGORIES[m];\n                var fEnabled = !!(this.bitsMessage & bitMessage);\n                if (fCriteria !== null && fCriteria != fEnabled) continue;\n                if (sCategories) sCategories += ',';\n                if (!(++n % 10)) sCategories += \"\\n\\t\";     // jshint ignore:line\n                /*\n                 * Internally, we use \"key\" instead of \"keys\", since the latter is a method on JavasScript objects,\n                 * but externally, we allow the user to specify \"keys\".\n                 */\n                if (m == \"key\") m = \"keys\";\n                sCategories += m;\n            }\n        }\n\n        if (sCategory === undefined) {\n            this.println(\"message commands:\\n\\tm [category] [on|off]\\tturn categories on/off\");\n        }\n\n        this.println((fCriteria !== null? (fCriteria? \"messages on:  \" : \"messages off: \") : \"message categories:\\n\\t\") + (sCategories || \"none\"));\n\n        this.historyInit();     // call this just in case MessagesPDP11.INT was turned on\n    }\n\n    /**\n     * doOptions(asArgs)\n     *\n     * @this {DebuggerPDP11}\n     * @param {Array.<string>} asArgs\n     */\n    doOptions(asArgs)\n    {\n        switch (asArgs[1]) {\n\n        case \"base\":\n            if (asArgs[2]) {\n                var nBase = +asArgs[2];\n                if (nBase == 8 || nBase == 10 || nBase == 16) {\n                    this.nBase = nBase;\n                } else {\n                    this.println(\"invalid base: \" + nBase);\n                    break;\n                }\n            }\n            this.println(\"default base: \" + this.nBase);\n            break;\n\n        case \"cs\":\n            var nCycles;\n            if (asArgs[3] !== undefined) nCycles = +asArgs[3];          // warning: decimal instead of hex conversion\n            switch (asArgs[2]) {\n                case \"int\":\n                    this.cpu.nCyclesChecksumInterval = nCycles;\n                    break;\n                case \"start\":\n                    this.cpu.nCyclesChecksumStart = nCycles;\n                    break;\n                case \"stop\":\n                    this.cpu.nCyclesChecksumStop = nCycles;\n                    break;\n                default:\n                    this.println(\"unknown cs option\");\n                    return;\n            }\n            if (nCycles !== undefined) {\n                this.cpu.resetChecksum();\n            }\n            this.println(\"checksums \" + (this.cpu.flags.checksum? \"enabled\" : \"disabled\"));\n            return;\n\n        case \"sp\":\n            if (asArgs[2] !== undefined) {\n                if (!this.cpu.setSpeed(+asArgs[2])) {\n                    this.println(\"warning: using 1x multiplier, previous target not reached\");\n                }\n            }\n            this.println(\"target speed: \" + this.cpu.getSpeedTarget() + \" (\" + this.cpu.getSpeed() + \"x)\");\n            return;\n\n        default:\n            if (asArgs[1]) {\n                this.println(\"unknown option: \" + asArgs[1]);\n                return;\n            }\n            /* falls through */\n\n        case \"?\":\n            this.println(\"debugger options:\");\n            this.println(\"\\tbase #\\t\\tset default base to #\");\n            this.println(\"\\tcs int #\\tset checksum cycle interval to #\");\n            this.println(\"\\tcs start #\\tset checksum cycle start count to #\");\n            this.println(\"\\tcs stop #\\tset checksum cycle stop count to #\");\n            this.println(\"\\tsp #\\t\\tset speed multiplier to #\");\n            break;\n        }\n    }\n\n    /**\n     * doRegisters(asArgs, fInstruction)\n     *\n     * @this {DebuggerPDP11}\n     * @param {Array.<string>} [asArgs]\n     * @param {boolean} [fInstruction] (true to include the current instruction; default is true)\n     */\n    doRegisters(asArgs, fInstruction)\n    {\n        if (asArgs && asArgs[1] == '?') {\n            this.println(\"register commands:\");\n            this.println(\"\\tr\\tdump registers\");\n            this.println(\"\\trm\\tdump misc registers\");\n            this.println(\"\\trx [#]\\tset flag or register x to [#]\");\n            return;\n        }\n\n        var fMisc = false;\n        var cpu = this.cpu;\n        if (fInstruction == null) fInstruction = true;\n\n        if (asArgs != null && asArgs.length > 1) {\n            var sReg = asArgs[1];\n\n            if (sReg == 'm') {\n                fMisc = true;\n            }\n            else {\n                var sValue = null;\n                var i = sReg.indexOf('=');\n                if (i > 0) {\n                    sValue = sReg.substr(i + 1);\n                    sReg = sReg.substr(0, i);\n                }\n                else if (asArgs.length > 2) {\n                    sValue = asArgs[2];\n                }\n                else {\n                    this.println(\"missing value for \" + asArgs[1]);\n                    return;\n                }\n\n                var w = this.parseExpression(sValue);\n                if (w === undefined) return;\n\n                var sRegMatch = sReg.toUpperCase();\n                switch (sRegMatch) {\n                case \"SP\":\n                case \"R6\":\n                    cpu.setSP(w);\n                    break;\n                case \"PC\":\n                case \"R7\":\n                    cpu.setPC(w);\n                    this.dbgAddrNextCode = this.newAddr(cpu.getPC());\n                    break;\n                case \"N\":\n                    if (w) cpu.setNF(); else cpu.clearNF();\n                    break;\n                case \"Z\":\n                    if (w) cpu.setZF(); else cpu.clearZF();\n                    break;\n                case \"V\":\n                    if (w) cpu.setVF(); else cpu.clearVF();\n                    break;\n                case \"C\":\n                    if (w) cpu.setCF(); else cpu.clearCF();\n                    break;\n                case \"PS\":\n                    cpu.setPSW(w);\n                    break;\n                case \"PI\":\n                    cpu.setPIR(w);\n                    break;\n                case \"ER\":\n                    cpu.regErr = w;\n                    fMisc = true;\n                    break;\n                case \"SL\":\n                    cpu.setSLR(w);\n                    break;\n                case \"M0\":\n                    cpu.setMMR0(w);\n                    fMisc = true;\n                    break;\n                case \"M3\":\n                    cpu.setMMR3(w);\n                    fMisc = true;\n                    break;\n                case \"AR\":\n                    if (this.panel) this.panel.setAR(w);\n                    fMisc = true;\n                    break;\n                case \"DR\":\n                    if (this.panel) this.panel.setDR(w);\n                    fMisc = true;\n                    break;\n                case \"SR\":\n                    if (this.panel) this.panel.setSR(w);\n                    fMisc = true;\n                    break;\n                default:\n                    if (sRegMatch.charAt(0) == 'R') {\n                        var iReg = +sRegMatch.charAt(1);\n                        if (iReg >= 0 && iReg < 6) {\n                            cpu.regsGen[iReg] = w & 0xffff;\n                            break;\n                        }\n                    }\n                    this.println(\"unknown register: \" + sReg);\n                    return;\n                }\n                this.cmp.updateDisplays();\n                this.println(\"updated registers:\");\n            }\n        }\n\n        this.println(this.getRegDump(fMisc));\n\n        if (fInstruction) {\n            this.dbgAddrNextCode = this.newAddr(cpu.getPC());\n            this.doUnassemble(this.toStrAddr(this.dbgAddrNextCode));\n        }\n    }\n\n    /**\n     * doRun(sCmd, sAddr, sOptions, fQuiet)\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} sCmd\n     * @param {string|undefined} [sAddr]\n     * @param {string} [sOptions] (the rest of the breakpoint command-line)\n     * @param {boolean} [fQuiet]\n     */\n    doRun(sCmd, sAddr, sOptions, fQuiet)\n    {\n        if (sCmd == \"gt\") {\n            this.fIgnoreNextCheckFault = true;\n        }\n        if (sAddr !== undefined) {\n            var dbgAddr = this.parseAddr(sAddr, true);\n            if (!dbgAddr) return;\n            this.parseAddrOptions(dbgAddr, sOptions);\n            this.setTempBreakpoint(dbgAddr);\n        }\n        this.startCPU(true, fQuiet);\n    }\n\n    /**\n     * doPrint(sCmd)\n     *\n     * NOTE: If the string to print is a quoted string, then we run it through replaceRegs(), so that\n     * you can take advantage of all the special replacement options used for software interrupt logging.\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} sCmd\n     */\n    doPrint(sCmd)\n    {\n        sCmd = Str.trim(sCmd);\n        var a = sCmd.match(/^(['\"])(.*?)\\1$/);\n        if (!a) {\n            this.parseExpression(sCmd, false);\n        } else {\n            if (a[2].length > 1) {\n                this.println(this.replaceRegs(a[2]));\n            } else {\n                this.printValue(null, a[2].charCodeAt(0));\n            }\n        }\n    }\n\n    /**\n     * doStep(sCmd, sOption)\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} [sCmd] \"p\" or \"pr\"\n     * @param {string} [sOption]\n     */\n    doStep(sCmd, sOption)\n    {\n        if (sOption == '?') {\n            this.println(\"step commands:\");\n            this.println(\"\\tp\\tstep over instruction\");\n            this.println(\"\\tpr\\tstep over instruction with register update\");\n            return;\n        }\n\n        var fCallStep = true;\n        var nRegs = (sCmd == \"pr\"? 1 : 0);\n        /*\n         * Set up the value for this.nStep (ie, 1 or 2) depending on whether the user wants\n         * a subsequent register dump (\"pr\") or not (\"p\").\n         */\n        var nStep = 1 + nRegs;\n\n        if (!this.nStep) {\n            var dbgAddr = this.newAddr(this.cpu.getPC());\n            var opCode = this.getWord(dbgAddr);\n\n            if (opCode == PDP11.OPCODE.BPT || opCode == PDP11.OPCODE.IOT ||\n                (opCode & PDP11.OPCODE.EMT_MASK) == PDP11.OPCODE.EMT_OP ||\n                (opCode & PDP11.OPCODE.SOB_MASK) == PDP11.OPCODE.SOB_OP ||\n                (opCode & PDP11.OPCODE.TRAP_MASK) == PDP11.OPCODE.TRAP_OP) {\n                if (fCallStep) {\n                    this.nStep = nStep;\n                    this.incAddr(dbgAddr, 2);\n                }\n            } else if ((opCode & PDP11.OPCODE.JSR_MASK) == PDP11.OPCODE.JSR_OP) {\n                var s = this.getInstruction(dbgAddr);\n\n                if (fCallStep) {\n                    this.nStep = nStep;\n                }\n            }\n\n            if (this.nStep) {\n                this.setTempBreakpoint(dbgAddr);\n                if (!this.startCPU()) {\n                    if (this.cmp) this.cmp.setFocus();\n                    this.nStep = 0;\n                }\n                /*\n                 * A successful run will ultimately call stop(), which will in turn call clearTempBreakpoint(),\n                 * which will clear nStep, so there's your assurance that nStep will be reset.  Now we may have\n                 * stopped for reasons unrelated to the temporary breakpoint, but that's OK.\n                 */\n            } else {\n                this.doTrace(nRegs? \"tr\" : \"t\");\n            }\n        } else {\n            this.println(\"step in progress\");\n        }\n    }\n\n    /**\n     * getCall(dbgAddr)\n     *\n     * Given a possible return address (typically from the stack), look for a matching CALL (or INT) that\n     * immediately precedes that address.\n     *\n     * @this {DebuggerPDP11}\n     * @param {DbgAddrPDP11} dbgAddr\n     * @return {string|null} CALL instruction at or near dbgAddr, or null if none\n     */\n    getCall(dbgAddr)\n    {\n        var sCall = null;\n        var addr = dbgAddr.addr;\n        var addrOrig = addr;\n        for (var n = 1; n <= 6 && !!addr; n++) {\n            if (n > 2) {\n                dbgAddr.addr = addr;\n                var s = this.getInstruction(dbgAddr);\n                if (s.indexOf(\"JSR\") >= 0) {\n                    /*\n                     * Verify that the length of this call, when added to the address of the call, matches\n                     * the original return address.  We do this by getting the string index of the opcode bytes,\n                     * subtracting that from the string index of the next space, and dividing that difference\n                     * by two, to yield the length of the CALL (or INT) instruction, in bytes.\n                     */\n                    var i = s.indexOf(' ');\n                    var j = s.indexOf(' ', i+1);\n                    if (addr + (j - i - 1)/2 == addrOrig) {\n                        sCall = s;\n                        break;\n                    }\n                }\n            }\n            addr -= 2;\n        }\n        dbgAddr.addr = addrOrig;\n        return sCall;\n    }\n\n    /**\n     * doStackTrace(sCmd, sAddr)\n     *\n     * Use \"k\" for a normal stack trace and \"ks\" for a stack trace with symbolic info.\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} [sCmd]\n     * @param {string} [sAddr] (not used yet)\n     */\n    doStackTrace(sCmd, sAddr)\n    {\n        if (sAddr == '?') {\n            this.println(\"stack trace commands:\");\n            this.println(\"\\tk\\tshow frame addresses\");\n            this.println(\"\\tks\\tshow symbol information\");\n            return;\n        }\n\n        var nFrames = 10, cFrames = 0;\n        var dbgAddrCall = this.newAddr();\n        var dbgAddrStack = this.newAddr(this.cpu.getSP());\n        this.println(\"stack trace for \" + this.toStrAddr(dbgAddrStack));\n\n        while (cFrames < nFrames) {\n            var sCall = null, sCallPrev = null, cTests = 256;\n            while ((dbgAddrStack.addr >>> 0) < 0x10000) {\n                dbgAddrCall.addr = this.getWord(dbgAddrStack, 2);\n                /*\n                 * Because we're using the auto-increment feature of getWord(), and because that will automatically\n                 * wrap the offset around the end of the segment, we must also check the addr property to detect the wrap.\n                 */\n                if (dbgAddrStack.addr == null || !cTests--) break;\n                if (dbgAddrCall.addr & 0x1) continue;           // an odd address on the PDP-11 is not a valid instruction boundary\n                sCall = this.getCall(dbgAddrCall);\n                if (sCall) break;\n            }\n            /*\n             * The sCallPrev check eliminates duplicate sequential calls, which are usually (but not always)\n             * indicative of a false positive, in which case the previous call is probably bogus as well, but\n             * at least we won't duplicate that mistake.  Of course, there are always exceptions, recursion\n             * being one of them, but it's rare that we're debugging recursive code.\n             */\n            if (!sCall || sCall == sCallPrev) break;\n            var sSymbol = null;\n            if (sCmd == \"ks\") {\n                var a = sCall.match(/[0-9A-F]+$/);\n                if (a) sSymbol = this.doList(a[0]);\n            }\n            sCall = Str.pad(sCall, 50) + \"  ;\" + (sSymbol || \"stack=\" + this.toStrAddr(dbgAddrStack)); // + \" return=\" + this.toStrAddr(dbgAddrCall));\n            this.println(sCall);\n            sCallPrev = sCall;\n            cFrames++;\n        }\n        if (!cFrames) this.println(\"no return addresses found\");\n    }\n\n    /**\n     * doTrace(sCmd, sCount)\n     *\n     * The \"t\" and \"tr\" commands interpret the count as a number of instructions, and since\n     * we call the Debugger's stepCPU() for each iteration, a single instruction includes\n     * any/all prefixes; the CPU's stepCPU() treats prefixes as discrete operations.  The only\n     * difference between \"t\" and \"tr\": the former displays only the next instruction, while\n     * the latter also displays the (updated) registers.\n     *\n     * The \"tc\" command interprets the count as a number of cycles rather than instructions,\n     * allowing you to quickly execute large chunks of instructions with a single command; it\n     * doesn't display anything until the the chunk has finished.  \"tc 1\" is also a useful\n     * command in that it doesn't inhibit interrupts like \"t\" or \"tr\" does.\n     *\n     * However, generally a more useful command is \"bn\", which allows you to break after some\n     * number of instructions have been executed (as opposed to some number of cycles).\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} [sCmd] (\"t\", \"tc\", or \"tr\")\n     * @param {string} [sCount] # of instructions to step\n     */\n    doTrace(sCmd, sCount)\n    {\n        if (sCount == '?') {\n            this.println(\"trace commands:\");\n            this.println(\"\\tt  [#]\\ttrace # instructions\");\n            this.println(\"\\ttr [#]\\ttrace # instructions with register updates\");\n            this.println(\"\\ttc [#]\\ttrace # cycles\");\n            this.println(\"note: bn [#] breaks after # instructions without updates\");\n            return;\n        }\n\n        var dbg = this;\n        var fRegs = (sCmd != \"t\");\n        var nCount = this.parseValue(sCount, null, true) || 1;\n\n        /*\n         * We used to set nCycles to 1 when a count > 1 was specified, because nCycles set\n         * to 0 used to mean \"execute the next instruction without checking for interrupts\".\n         * Well, this machine's stepCPU() doesn't do that; it ALWAYS checks for interrupts,\n         * so we should leave nCycles set to 0, so that if an interrupt is dispatched, we will\n         * get to see the first instruction of the interrupt handler.\n         */\n        var nCycles = 0;    // (nCount == 1? 0 : 1);\n\n        if (sCmd == \"tc\") {\n            nCycles = nCount;\n            nCount = 1;\n        }\n        this.sCmdTracePrev = sCmd;\n\n        Web.onCountRepeat(\n            nCount,\n            function onCountStep() {\n                return dbg.setBusy(true) && dbg.stepCPU(nCycles, fRegs, false);\n            },\n            function onCountStepComplete() {\n                /*\n                 * We explicitly called stepCPU() with fUpdateDisplays set to false, because repeatedly\n                 * calling updateDisplays() can be very slow, especially if a Control Panel is present with\n                 * displayLiveRegs enabled, so once the repeat count has been exhausted, we must perform\n                 * a final updateDisplays().\n                 */\n                if (dbg.panel) dbg.panel.stop();\n                dbg.cmp.updateDisplays(-1);\n                dbg.setBusy(false);\n            }\n        );\n    }\n\n    /**\n     * doUnassemble(sAddr, sAddrEnd, nLines)\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} [sAddr]\n     * @param {string} [sAddrEnd]\n     * @param {number} [nLines]\n     */\n    doUnassemble(sAddr, sAddrEnd, nLines)\n    {\n        var dbgAddr = this.parseAddr(sAddr, true);\n        if (!dbgAddr) return;\n\n        if (nLines === undefined) nLines = 1;\n\n        var nBytes = 0x100;\n        if (sAddrEnd !== undefined) {\n\n            if (sAddrEnd.charAt(0) == 'l') {\n                var n = this.parseValue(sAddrEnd.substr(1));\n                if (n != null) nLines = n;\n            }\n            else {\n                var dbgAddrEnd = this.parseAddr(sAddrEnd, true);\n                if (!dbgAddrEnd || dbgAddrEnd.addr < dbgAddr.addr) return;\n\n                nBytes = dbgAddrEnd.addr - dbgAddr.addr;\n                if (!DEBUG && nBytes > 0x100) {\n                    /*\n                     * Limiting the amount of disassembled code to 256 bytes in non-DEBUG builds is partly to\n                     * prevent the user from wedging the browser by dumping too many lines, but also a recognition\n                     * that, in non-DEBUG builds, this.println() keeps print output buffer truncated to 8Kb anyway.\n                     */\n                    this.println(\"range too large\");\n                    return;\n                }\n                nLines = -1;\n            }\n        }\n\n        var nPrinted = 0;\n        var sInstruction;\n\n        while (nBytes > 0 && nLines--) {\n\n            var nSequence = (this.isBusy(false) || this.nStep)? this.nCycles : null;\n            var sComment = (nSequence != null? \"cycles\" : null);\n            var aSymbol = this.findSymbol(dbgAddr);\n\n            var addr = dbgAddr.addr;    // we snap dbgAddr.addr *after* calling findSymbol(), which re-evaluates it\n\n            if (aSymbol[0] && nLines) {\n                if (!nPrinted && nLines || aSymbol[0].indexOf('+') < 0) {\n                    var sLabel = aSymbol[0] + ':';\n                    if (aSymbol[2]) sLabel += ' ' + aSymbol[2];\n                    this.println(sLabel);\n                }\n            }\n\n            if (aSymbol[3]) {\n                sComment = aSymbol[3];\n                nSequence = null;\n            }\n\n            sInstruction = this.getInstruction(dbgAddr, sComment, nSequence);\n\n            this.println(sInstruction);\n            this.dbgAddrNextCode = dbgAddr;\n            nBytes -= dbgAddr.addr - addr;\n            nPrinted++;\n        }\n    }\n\n    /**\n     * splitArgs(sCmd)\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} sCmd\n     * @return {Array.<string>}\n     */\n    splitArgs(sCmd)\n    {\n        var asArgs = sCmd.replace(/ +/g, ' ').split(' ');\n        asArgs[0] = asArgs[0].toLowerCase();\n        if (asArgs && asArgs.length) {\n            var s0 = asArgs[0];\n            var ch0 = s0.charAt(0);\n            for (var i = 1; i < s0.length; i++) {\n                var ch = s0.charAt(i);\n                if (ch0 == '?' || ch0 == 'r' || ch < 'a' || ch > 'z') {\n                    asArgs[0] = s0.substr(i);\n                    asArgs.unshift(s0.substr(0, i));\n                    break;\n                }\n            }\n        }\n        return asArgs;\n    }\n\n    /**\n     * doCommand(sCmd, fQuiet)\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} sCmd\n     * @param {boolean} [fQuiet]\n     * @return {boolean} true if command processed, false if unrecognized\n     */\n    doCommand(sCmd, fQuiet)\n    {\n        var result = true;\n\n        try {\n            if (!sCmd.length || sCmd == \"end\") {\n                if (this.fAssemble) {\n                    this.println(\"ended assemble at \" + this.toStrAddr(this.dbgAddrAssemble));\n                    this.dbgAddrNextCode = this.dbgAddrAssemble;\n                    this.fAssemble = false;\n                }\n                sCmd = \"\";\n            }\n            else if (!fQuiet) {\n                this.println(DebuggerPDP11.PROMPT + sCmd);\n            }\n\n            var ch = sCmd.charAt(0);\n            if (ch == '\"' || ch == \"'\") return true;\n\n            /*\n             * Zap the previous message buffer to ensure the new command's output is not tossed out as a repeat.\n             */\n            this.sMessagePrev = null;\n\n            /*\n             * I've relaxed the !isBusy() requirement, to maximize our ability to issue Debugger commands externally.\n             */\n            if (this.isReady() /* && !this.isBusy(true) */ && sCmd.length > 0) {\n\n                if (this.fAssemble) {\n                    sCmd = \"a \" + this.toStrAddr(this.dbgAddrAssemble) + ' ' + sCmd;\n                }\n\n                var fError = false;\n                var asArgs = this.splitArgs(sCmd);\n\n                switch (asArgs[0].charAt(0)) {\n                case 'a':\n                    this.doAssemble(asArgs);\n                    break;\n                case 'b':\n                    this.doBreak(asArgs[0], asArgs[1], sCmd);\n                    break;\n                case 'c':\n                    this.doClear(asArgs[0]);\n                    break;\n                case 'd':\n                    if (!COMPILED && sCmd == \"debug\") {\n                        window.DEBUG = true;\n                        this.println(\"DEBUG checks on\");\n                        break;\n                    }\n                    this.doDump(asArgs);\n                    break;\n                case 'e':\n                    if (asArgs[0] == \"else\") break;\n                    this.doEdit(asArgs);\n                    break;\n                case 'g':\n                    this.doRun(asArgs[0], asArgs[1], sCmd, fQuiet);\n                    break;\n                case 'h':\n                    this.doHalt(fQuiet);\n                    break;\n                case 'i':\n                    if (asArgs[0] == \"if\") {\n                        if (!this.doIf(sCmd.substr(2), fQuiet)) {\n                            result = false;\n                        }\n                        break;\n                    }\n                    fError = true;\n                    break;\n                case 'k':\n                    this.doStackTrace(asArgs[0], asArgs[1]);\n                    break;\n                case 'l':\n                    if (asArgs[0] == \"ln\") {\n                        this.doList(asArgs[1], true);\n                        break;\n                    }\n                    fError = true;\n                    break;\n                case 'm':\n                    this.doMessages(asArgs);\n                    break;\n                case 'p':\n                    if (asArgs[0] == \"print\") {\n                        this.doPrint(sCmd.substr(5));\n                        break;\n                    }\n                    this.doStep(asArgs[0], asArgs[1]);\n                    break;\n                case 'r':\n                    if (sCmd == \"reset\") {\n                        if (this.cmp) this.cmp.reset();\n                        break;\n                    }\n                    this.doRegisters(asArgs);\n                    break;\n                case 's':\n                    this.doOptions(asArgs);\n                    break;\n                case 't':\n                    this.doTrace(asArgs[0], asArgs[1]);\n                    break;\n                case 'u':\n                    this.doUnassemble(asArgs[1], asArgs[2], 8);\n                    break;\n                case 'v':\n                    if (asArgs[0] == \"var\") {\n                        if (!this.doVar(sCmd.substr(3))) {\n                            result = false;\n                        }\n                        break;\n                    }\n                    if (asArgs[0] == \"ver\") {\n                        this.println((PDP11.APPNAME || \"PDP11\") + \" version \" + (XMLVERSION || PDP11.APPVERSION) + \" (\" + this.cpu.model + (PDP11.COMPILED? \",RELEASE\" : (PDP11.DEBUG? \",DEBUG\" : \",NODEBUG\")) + (PDP11.TYPEDARRAYS? \",TYPEDARRAYS\" : (PDP11.BYTEARRAYS? \",BYTEARRAYS\" : \",LONGARRAYS\")) + ')');\n                        this.println(Web.getUserAgent());\n                        break;\n                    }\n                    fError = true;\n                    break;\n                case '?':\n                    if (asArgs[1]) {\n                        this.doPrint(sCmd.substr(1));\n                        break;\n                    }\n                    this.doHelp();\n                    break;\n                case 'n':\n                    if (!COMPILED && sCmd == \"nodebug\") {\n                        window.DEBUG = false;\n                        this.println(\"DEBUG checks off\");\n                        break;\n                    }\n                    if (this.doInfo(asArgs)) break;\n                    /* falls through */\n                default:\n                    fError = true;\n                    break;\n                }\n                if (fError) {\n                    this.println(\"unknown command: \" + sCmd);\n                    result = false;\n                }\n            }\n        } catch(e) {\n            this.println(\"debugger error: \" + (e.stack || e.message));\n            result = false;\n        }\n        return result;\n    }\n\n    /**\n     * doCommands(sCmds, fSave)\n     *\n     * @this {DebuggerPDP11}\n     * @param {string} sCmds\n     * @param {boolean} [fSave]\n     * @return {boolean} true if all commands processed, false if not\n     */\n    doCommands(sCmds, fSave)\n    {\n        var a = this.parseCommand(sCmds, fSave);\n        for (var s in a) {\n            if (!this.doCommand(a[+s])) return false;\n        }\n        return true;\n    }\n\n    /**\n     * DebuggerPDP11.init()\n     *\n     * This function operates on every HTML element of class \"debugger\", extracting the\n     * JSON-encoded parameters for the Debugger constructor from the element's \"data-value\"\n     * attribute, invoking the constructor to create a Debugger component, and then binding\n     * any associated HTML controls to the new component.\n     */\n    static init()\n    {\n        var aeDbg = Component.getElementsByClass(document, PDP11.APPCLASS, \"debugger\");\n        for (var iDbg = 0; iDbg < aeDbg.length; iDbg++) {\n            var eDbg = aeDbg[iDbg];\n            var parmsDbg = Component.getComponentParms(eDbg);\n            var dbg = new DebuggerPDP11(parmsDbg);\n            Component.bindComponentControls(dbg, eDbg, PDP11.APPCLASS);\n        }\n    }\n}\n\nif (DEBUGGER) {\n\n    /*\n     * NOTE: Every DebuggerPDP11 property from here to the first prototype function definition (initBus()) is\n     * considered a \"class constant\"; most of them use our \"all-caps\" convention (and all of them SHOULD, but\n     * that wouldn't help us catch any bugs).\n     *\n     * Technically, all of them should ALSO be preceded by a \"@const\" annotation, but that's a lot of work and it\n     * really clutters the code.  I wish the Closure Compiler had a way to annotate every definition with a given\n     * section with a single annotation....\n     */\n\n    DebuggerPDP11.COMMANDS = {\n        '?':        \"help/print\",\n        'a [#]':    \"assemble\",             // TODO: Implement this command someday\n        'b [#]':    \"breakpoint\",           // multiple variations (use b? to list them)\n        'c':        \"clear output\",\n        'd [#]':    \"dump memory\",          // additional syntax: d [#] [l#], where l# is a number of bytes to dump\n        'e [#]':    \"edit memory\",\n        'g [#]':    \"go [to #]\",\n        'h':        \"halt\",\n        'if':       \"eval expression\",\n        'int [#]':  \"request interrupt\",\n        'k':        \"stack trace\",\n        \"ln\":       \"list nearest symbol(s)\",\n        'm':        \"messages\",\n        'p':        \"step over\",            // other variations: pr (step and dump registers)\n        'print':    \"print expression\",\n        'r':        \"dump/set registers\",\n        'reset':    \"reset machine\",\n        's':        \"set options\",\n        't [#]':    \"trace\",                // other variations: tr (trace and dump registers)\n        'u [#]':    \"unassemble\",\n        'var':      \"assign variable\",\n        'ver':      \"print version\"\n    };\n\n    /*\n     * CPU opcode IDs\n     *\n     * Not listed: BLO (same as BCS) and BHIS (same as BCC).\n     */\n    DebuggerPDP11.OPS = {\n        NONE:   0,      ADC:    1,      ADCB:   2,      ADD:    3,      ASL:    4,      ASLB:   5,      ASR:    6,      ASRB:   7,\n        BCC:    8,      BCS:    9,      BEQ:    10,     BGE:    11,     BGT:    12,     BHI:    13,     BIC:    14,     BICB:   15,\n        BIS:    16,     BISB:   17,     BIT:    18,     BITB:   19,     BLE:    20,     BLOS:   21,     BLT:    22,     BMI:    23,\n        BNE:    24,     BPL:    25,     BPT:    26,     BR:     27,     BVC:    28,     BVS:    29,     CCC:    30,     CLC:    31,\n        CLCN:   32,     CLCV:   33,     CLCVN:  34,     CLCVZ:  35,     CLCZ:   36,     CLCZN:  37,     CLN:    38,     CLR:    39,\n        CLRB:   40,     CLV:    41,     CLVN:   42,     CLVZ:   43,     CLVZN:  44,     CLZ:    45,     CLZN:   46,     CMP:    47,\n        CMPB:   48,     COM:    49,     COMB:   50,     DEC:    51,     DECB:   52,     INC:    53,     INCB:   54,     HALT:   55,\n        JMP:    56,     JSR:    57,     MARK:   58,     MFPD:   59,     MFPI:   60,     MFPS:   61,     MOV:    62,     MOVB:   63,\n        MTPD:   64,     MTPI:   65,     MTPS:   66,     NEG:    67,     NEGB:   68,     NOP:    69,     RESET:  70,     ROL:    71,\n        ROLB:   72,     ROR:    73,     RORB:   74,     RTI:    75,     RTS:    76,     SBC:    77,     SBCB:   78,     SCC:    79,\n        SEC:    80,     SECN:   81,     SECV:   82,     SECVN:  83,     SECVZ:  84,     SECZ:   85,     SECZN:  86,     SEN:    87,\n        SEV:    88,     SEVN:   89,     SEVZ:   90,     SEVZN:  91,     SEZ:    92,     SEZN:   93,     SUB:    94,     SWAB:   95,\n        SXT:    96,     TST:    97,     TSTB:   98,     WAIT:   99,     MUL:    100,    DIV:    101,    ASH:    102,    ASHC:   103,\n        XOR:    104,    SOB:    105,    EMT:    106,    TRAP:   107,    SPL:    108,    IOT:    109,    RTT:    110,    MFPT:   111\n    };\n\n    /*\n     * CPU opcode names, indexed by CPU opcode ordinal (above)\n     */\n    DebuggerPDP11.OPNAMES = [\n        \".WORD\",        \"ADC\",          \"ADCB\",         \"ADD\",          \"ASL\",          \"ASLB\",         \"ASR\",          \"ASRB\",\n        \"BCC\",          \"BCS\",          \"BEQ\",          \"BGE\",          \"BGT\",          \"BHI\",          \"BIC\",          \"BICB\",\n        \"BIS\",          \"BISB\",         \"BIT\",          \"BITB\",         \"BLE\",          \"BLOS\",         \"BLT\",          \"BMI\",\n        \"BNE\",          \"BPL\",          \"BPT\",          \"BR\",           \"BVC\",          \"BVS\",          \"CCC\",          \"CLC\",\n        \"CLCN\",         \"CLCV\",         \"CLCVN\",        \"CLCVZ\",        \"CLCZ\",         \"CLCZN\",        \"CLN\",          \"CLR\",\n        \"CLRB\",         \"CLV\",          \"CLVN\",         \"CLVZ\",         \"CLVZN\",        \"CLZ\",          \"CLZN\",         \"CMP\",\n        \"CMPB\",         \"COM\",          \"COMB\",         \"DEC\",          \"DECB\",         \"INC\",          \"INCB\",         \"HALT\",\n        \"JMP\",          \"JSR\",          \"MARK\",         \"MFPD\",         \"MFPI\",         \"MFPS\",         \"MOV\",          \"MOVB\",\n        \"MTPD\",         \"MTPI\",         \"MTPS\",         \"NEG\",          \"NEGB\",         \"NOP\",          \"RESET\",        \"ROL\",\n        \"ROLB\",         \"ROR\",          \"RORB\",         \"RTI\",          \"RTS\",          \"SBC\",          \"SBCB\",         \"SCC\",\n        \"SEC\",          \"SECN\",         \"SECV\",         \"SECVN\",        \"SECVZ\",        \"SECZ\",         \"SECZN\",        \"SEN\",\n        \"SEV\",          \"SEVN\",         \"SEVZ\",         \"SEVZN\",        \"SEZ\",          \"SEZN\",         \"SUB\",          \"SWAB\",\n        \"SXT\",          \"TST\",          \"TSTB\",         \"WAIT\",         \"MUL\",          \"DIV\",          \"ASH\",          \"ASHC\",\n        \"XOR\",          \"SOB\",          \"EMT\",          \"TRAP\",         \"SPL\",          \"IOT\",          \"RTT\",          \"MFPT\"\n    ];\n\n    /*\n     * Register numbers 0-7 are reserved for cpu.regsGen, 8-15 are reserved for cpu.regsAlt, and 16-19 for cpu.regsStack.\n     */\n    DebuggerPDP11.REG_PS        = 20;\n    DebuggerPDP11.REG_PI        = 21;\n    DebuggerPDP11.REG_ER        = 22;\n    DebuggerPDP11.REG_SL        = 23;\n    DebuggerPDP11.REG_M0        = 24;\n    DebuggerPDP11.REG_M1        = 25;\n    DebuggerPDP11.REG_M2        = 26;\n    DebuggerPDP11.REG_M3        = 27;\n    DebuggerPDP11.REG_AR        = 28;           // ADDRESS register; see Panel's getAR() and setAR()\n    DebuggerPDP11.REG_DR        = 29;           // DISPLAY/DATA register; see Panel's getDR() and setDR()\n    DebuggerPDP11.REG_SR        = 30;           // SWITCH register; see Panel's getSR() and setSR()\n\n    DebuggerPDP11.REGS = {\n        \"SP\":   6,\n        \"PC\":   7,\n        \"PS\":   DebuggerPDP11.REG_PS,\n        \"PI\":   DebuggerPDP11.REG_PI,\n        \"ER\":   DebuggerPDP11.REG_ER,\n        \"SL\":   DebuggerPDP11.REG_SL,\n        \"M0\":   DebuggerPDP11.REG_M0,\n        \"M1\":   DebuggerPDP11.REG_M1,\n        \"M2\":   DebuggerPDP11.REG_M2,\n        \"M3\":   DebuggerPDP11.REG_M3,\n        \"AR\":   DebuggerPDP11.REG_AR,\n        \"DR\":   DebuggerPDP11.REG_DR,\n        \"SR\":   DebuggerPDP11.REG_SR\n    };\n\n    DebuggerPDP11.REGNAMES = [\n        \"R0\", \"R1\", \"R2\", \"R3\", \"R4\", \"R5\", \"SP\", \"PC\",\n        \"A0\", \"A1\", \"A2\", \"A3\", \"A4\", \"A5\", \"A6\", \"A7\",\n        \"S0\", \"S1\", \"S2\", \"S3\",\n        \"PS\", \"PI\", \"ER\", \"SL\", \"M0\", \"M1\", \"M2\", \"M3\",\n        \"AR\", \"DR\", \"SR\"\n    ];\n\n    DebuggerPDP11.MODES = [\"KI\",\"KD\",\"SI\",\"SD\",\"??\",\"??\",\"UI\",\"UD\"];\n\n    /*\n     * Operand type masks; anything that's not covered by OP_SRC or OP_DST must be a OP_OTHER value.\n     */\n    DebuggerPDP11.OP_DSTREG   = PDP11.OPREG.MASK;\n    DebuggerPDP11.OP_DSTMODE  = PDP11.OPMODE.MASK;\n    DebuggerPDP11.OP_DST      = (DebuggerPDP11.OP_DSTMODE | DebuggerPDP11.OP_DSTREG);\n    DebuggerPDP11.OP_SRCREG   = PDP11.OPREG.MASK << 6;\n    DebuggerPDP11.OP_SRCMODE  = PDP11.OPMODE.MASK << 6;\n    DebuggerPDP11.OP_SRC      = (DebuggerPDP11.OP_SRCMODE | DebuggerPDP11.OP_SRCREG);\n    DebuggerPDP11.OP_BRANCH   = 0x1000;\n    DebuggerPDP11.OP_DSTOFF   = 0x2000;\n    DebuggerPDP11.OP_DSTNUM3  = 0x3000;       // DST 3-bit number (ie, just the DSTREG field)\n    DebuggerPDP11.OP_DSTNUM6  = 0x6000;       // DST 6-bit number (ie, both the DSTREG and DSTMODE fields)\n    DebuggerPDP11.OP_DSTNUM8  = 0x8000;       // DST 8-bit number\n    DebuggerPDP11.OP_OTHER    = 0xF000;\n\n    /*\n     * The OPTABLE contains opcode masks, and each mask refers to table of possible values, and each\n     * value refers to an array that contains:\n     *\n     *      [0]: {number} of the opcode name (see OP.*)\n     *      [1]: {number} containing the first operand type bit(s), if any\n     *      [2]: {number} containing the second operand type bit(s), if any\n     *\n     * Note that, by convention, opcodes that require two operands list the SRC operand first and DST operand\n     * second (ie, the OPPOSITE of the Intel convention).\n     *\n     * Also note that, for some of the newer PDP-11 opcodes (eg, MUL, DIV, ASH, ASHC), the location of the\n     * opcode's SRC and DST bits are reversed.  This is why, for example, you'll see the MUL instruction defined\n     * below as having OP_DST for the first operand and OP_SRCREG for the second operand.  This does NOT mean\n     * that the opcode's destination operand is being listed first, but rather that the bits describing the source\n     * operand are in the opcode's OP_DST field.\n     */\n    DebuggerPDP11.OPTABLE = {\n        0xF000: {\n            0x1000: [DebuggerPDP11.OPS.MOV,     DebuggerPDP11.OP_SRC,         DebuggerPDP11.OP_DST],        // 01SSDD\n            0x2000: [DebuggerPDP11.OPS.CMP,     DebuggerPDP11.OP_SRC,         DebuggerPDP11.OP_DST],        // 02SSDD\n            0x3000: [DebuggerPDP11.OPS.BIT,     DebuggerPDP11.OP_SRC,         DebuggerPDP11.OP_DST],        // 03SSDD\n            0x4000: [DebuggerPDP11.OPS.BIC,     DebuggerPDP11.OP_SRC,         DebuggerPDP11.OP_DST],        // 04SSDD\n            0x5000: [DebuggerPDP11.OPS.BIS,     DebuggerPDP11.OP_SRC,         DebuggerPDP11.OP_DST],        // 05SSDD\n            0x6000: [DebuggerPDP11.OPS.ADD,     DebuggerPDP11.OP_SRC,         DebuggerPDP11.OP_DST],        // 06SSDD\n            0x9000: [DebuggerPDP11.OPS.MOVB,    DebuggerPDP11.OP_SRC,         DebuggerPDP11.OP_DST],        // 11SSDD\n            0xA000: [DebuggerPDP11.OPS.CMPB,    DebuggerPDP11.OP_SRC,         DebuggerPDP11.OP_DST],        // 12SSDD\n            0xB000: [DebuggerPDP11.OPS.BITB,    DebuggerPDP11.OP_SRC,         DebuggerPDP11.OP_DST],        // 13SSDD\n            0xC000: [DebuggerPDP11.OPS.BICB,    DebuggerPDP11.OP_SRC,         DebuggerPDP11.OP_DST],        // 14SSDD\n            0xD000: [DebuggerPDP11.OPS.BISB,    DebuggerPDP11.OP_SRC,         DebuggerPDP11.OP_DST],        // 15SSDD\n            0xE000: [DebuggerPDP11.OPS.SUB,     DebuggerPDP11.OP_SRC,         DebuggerPDP11.OP_DST]         // 16SSDD\n        },\n        0xFE00: {\n            0x0800: [DebuggerPDP11.OPS.JSR,     DebuggerPDP11.OP_SRCREG,      DebuggerPDP11.OP_DST],        // 004RDD\n            0x7000: [DebuggerPDP11.OPS.MUL,     DebuggerPDP11.OP_DST,         DebuggerPDP11.OP_SRCREG],     // 070RSS\n            0x7200: [DebuggerPDP11.OPS.DIV,     DebuggerPDP11.OP_DST,         DebuggerPDP11.OP_SRCREG],     // 071RSS\n            0x7400: [DebuggerPDP11.OPS.ASH,     DebuggerPDP11.OP_DST,         DebuggerPDP11.OP_SRCREG],     // 072RSS\n            0x7600: [DebuggerPDP11.OPS.ASHC,    DebuggerPDP11.OP_DST,         DebuggerPDP11.OP_SRCREG],     // 073RSS\n            0x7800: [DebuggerPDP11.OPS.XOR,     DebuggerPDP11.OP_SRCREG,      DebuggerPDP11.OP_DST],        // 074RDD\n            0x7E00: [DebuggerPDP11.OPS.SOB,     DebuggerPDP11.OP_SRCREG,      DebuggerPDP11.OP_DSTOFF]      // 077Rnn\n        },\n        0xFF00: {\n            0x0100: [DebuggerPDP11.OPS.BR,      DebuggerPDP11.OP_BRANCH],\n            0x0200: [DebuggerPDP11.OPS.BNE,     DebuggerPDP11.OP_BRANCH],\n            0x0300: [DebuggerPDP11.OPS.BEQ,     DebuggerPDP11.OP_BRANCH],\n            0x0400: [DebuggerPDP11.OPS.BGE,     DebuggerPDP11.OP_BRANCH],\n            0x0500: [DebuggerPDP11.OPS.BLT,     DebuggerPDP11.OP_BRANCH],\n            0x0600: [DebuggerPDP11.OPS.BGT,     DebuggerPDP11.OP_BRANCH],\n            0x0700: [DebuggerPDP11.OPS.BLE,     DebuggerPDP11.OP_BRANCH],\n            0x8000: [DebuggerPDP11.OPS.BPL,     DebuggerPDP11.OP_BRANCH],\n            0x8100: [DebuggerPDP11.OPS.BMI,     DebuggerPDP11.OP_BRANCH],\n            0x8200: [DebuggerPDP11.OPS.BHI,     DebuggerPDP11.OP_BRANCH],\n            0x8300: [DebuggerPDP11.OPS.BLOS,    DebuggerPDP11.OP_BRANCH],\n            0x8400: [DebuggerPDP11.OPS.BVC,     DebuggerPDP11.OP_BRANCH],\n            0x8500: [DebuggerPDP11.OPS.BVS,     DebuggerPDP11.OP_BRANCH],\n            0x8600: [DebuggerPDP11.OPS.BCC,     DebuggerPDP11.OP_BRANCH],\n            0x8700: [DebuggerPDP11.OPS.BCS,     DebuggerPDP11.OP_BRANCH],\n            0x8800: [DebuggerPDP11.OPS.EMT,     DebuggerPDP11.OP_DSTNUM8],      // 104000..104377\n            0x8900: [DebuggerPDP11.OPS.TRAP,    DebuggerPDP11.OP_DSTNUM8]       // 104400..104777\n        },\n        0xFFC0: {\n            0x0040: [DebuggerPDP11.OPS.JMP,     DebuggerPDP11.OP_DST],          // 0001DD\n            0x00C0: [DebuggerPDP11.OPS.SWAB,    DebuggerPDP11.OP_DST],          // 0003DD\n            0x0A00: [DebuggerPDP11.OPS.CLR,     DebuggerPDP11.OP_DST],          // 0050DD\n            0x0A40: [DebuggerPDP11.OPS.COM,     DebuggerPDP11.OP_DST],          // 0051DD\n            0x0A80: [DebuggerPDP11.OPS.INC,     DebuggerPDP11.OP_DST],          // 0052DD\n            0x0AC0: [DebuggerPDP11.OPS.DEC,     DebuggerPDP11.OP_DST],          // 0053DD\n            0x0B00: [DebuggerPDP11.OPS.NEG,     DebuggerPDP11.OP_DST],          // 0054DD\n            0x0B40: [DebuggerPDP11.OPS.ADC,     DebuggerPDP11.OP_DST],          // 0055DD\n            0x0B80: [DebuggerPDP11.OPS.SBC,     DebuggerPDP11.OP_DST],          // 0056DD\n            0x0BC0: [DebuggerPDP11.OPS.TST,     DebuggerPDP11.OP_DST],          // 0057DD\n            0x0C00: [DebuggerPDP11.OPS.ROR,     DebuggerPDP11.OP_DST],          // 0060DD\n            0x0C40: [DebuggerPDP11.OPS.ROL,     DebuggerPDP11.OP_DST],          // 0061DD\n            0x0C80: [DebuggerPDP11.OPS.ASR,     DebuggerPDP11.OP_DST],          // 0062DD\n            0x0CC0: [DebuggerPDP11.OPS.ASL,     DebuggerPDP11.OP_DST],          // 0063DD\n            0x0D00: [DebuggerPDP11.OPS.MARK,    DebuggerPDP11.OP_DSTNUM6],      // 0064nn\n            0x0D40: [DebuggerPDP11.OPS.MFPI,    DebuggerPDP11.OP_DST],          // 0065SS\n            0x0D80: [DebuggerPDP11.OPS.MTPI,    DebuggerPDP11.OP_DST],          // 0066DD\n            0x0DC0: [DebuggerPDP11.OPS.SXT,     DebuggerPDP11.OP_DST],          // 0067DD\n            0x8A00: [DebuggerPDP11.OPS.CLRB,    DebuggerPDP11.OP_DST],          // 1050DD\n            0x8A40: [DebuggerPDP11.OPS.COMB,    DebuggerPDP11.OP_DST],          // 1051DD\n            0x8A80: [DebuggerPDP11.OPS.INCB,    DebuggerPDP11.OP_DST],          // 1052DD\n            0x8AC0: [DebuggerPDP11.OPS.DECB,    DebuggerPDP11.OP_DST],          // 1053DD\n            0x8B00: [DebuggerPDP11.OPS.NEGB,    DebuggerPDP11.OP_DST],          // 1054DD\n            0x8B40: [DebuggerPDP11.OPS.ADCB,    DebuggerPDP11.OP_DST],          // 1055DD\n            0x8B80: [DebuggerPDP11.OPS.SBCB,    DebuggerPDP11.OP_DST],          // 1056DD\n            0x8BC0: [DebuggerPDP11.OPS.TSTB,    DebuggerPDP11.OP_DST],          // 1057DD\n            0x8C00: [DebuggerPDP11.OPS.RORB,    DebuggerPDP11.OP_DST],          // 1060DD\n            0x8C40: [DebuggerPDP11.OPS.ROLB,    DebuggerPDP11.OP_DST],          // 1061DD\n            0x8C80: [DebuggerPDP11.OPS.ASRB,    DebuggerPDP11.OP_DST],          // 1062DD\n            0x8CC0: [DebuggerPDP11.OPS.ASLB,    DebuggerPDP11.OP_DST],          // 1063DD\n            0x8D00: [DebuggerPDP11.OPS.MTPS,    DebuggerPDP11.OP_DST],          // 1064SS (only on LSI-11)\n            0x8D40: [DebuggerPDP11.OPS.MFPD,    DebuggerPDP11.OP_DST],          // 1065DD (same as MFPI if no separate instruction/data spaces)\n            0x8D80: [DebuggerPDP11.OPS.MTPD,    DebuggerPDP11.OP_DST],          // 1066DD (same as MTPI if no separate instruction/data spaces)\n            0x8DC0: [DebuggerPDP11.OPS.MFPS,    DebuggerPDP11.OP_DST]           // 1067SS (only on LSI-11)\n        },\n        0xFFF8: {\n            0x0080: [DebuggerPDP11.OPS.RTS,     DebuggerPDP11.OP_DSTREG],       // 00020R\n            0x0098: [DebuggerPDP11.OPS.SPL,     DebuggerPDP11.OP_DSTNUM3]       // 00023N\n        },\n        0xFFFF: {\n            0x0000: [DebuggerPDP11.OPS.HALT],                                   // 000000\n            0x0001: [DebuggerPDP11.OPS.WAIT],                                   // 000001\n            0x0002: [DebuggerPDP11.OPS.RTI],                                    // 000002\n            0x0003: [DebuggerPDP11.OPS.BPT],                                    // 000003\n            0x0004: [DebuggerPDP11.OPS.IOT],                                    // 000004\n            0x0005: [DebuggerPDP11.OPS.RESET],                                  // 000005\n            0x0006: [DebuggerPDP11.OPS.RTT],                                    // 000006\n            0x0007: [DebuggerPDP11.OPS.MFPT],                                   // 000007 (only on PDP-11/44 & KB11-EM?)\n            0x00A0: [DebuggerPDP11.OPS.NOP],\n            0x00A1: [DebuggerPDP11.OPS.CLC],\n            0x00A2: [DebuggerPDP11.OPS.CLV],\n            0x00A3: [DebuggerPDP11.OPS.CLCV],\n            0x00A4: [DebuggerPDP11.OPS.CLZ],\n            0x00A5: [DebuggerPDP11.OPS.CLCZ],\n            0x00A6: [DebuggerPDP11.OPS.CLVZ],\n            0x00A7: [DebuggerPDP11.OPS.CLCVZ],\n            0x00A8: [DebuggerPDP11.OPS.CLN],\n            0x00A9: [DebuggerPDP11.OPS.CLCN],\n            0x00AA: [DebuggerPDP11.OPS.CLVN],\n            0x00AB: [DebuggerPDP11.OPS.CLCVN],\n            0x00AC: [DebuggerPDP11.OPS.CLZN],\n            0x00AD: [DebuggerPDP11.OPS.CLCZN],\n            0x00AE: [DebuggerPDP11.OPS.CLVZN],\n            0x00AF: [DebuggerPDP11.OPS.CCC],                                    // aka CLCVZN\n            0x00B0: [DebuggerPDP11.OPS.NOP],\n            0x00B1: [DebuggerPDP11.OPS.SEC],\n            0x00B2: [DebuggerPDP11.OPS.SEV],\n            0x00B3: [DebuggerPDP11.OPS.SECV],\n            0x00B4: [DebuggerPDP11.OPS.SEZ],\n            0x00B5: [DebuggerPDP11.OPS.SECZ],\n            0x00B6: [DebuggerPDP11.OPS.SEVZ],\n            0x00B7: [DebuggerPDP11.OPS.SECVZ],\n            0x00B8: [DebuggerPDP11.OPS.SEN],\n            0x00B9: [DebuggerPDP11.OPS.SECN],\n            0x00BA: [DebuggerPDP11.OPS.SEVN],\n            0x00BB: [DebuggerPDP11.OPS.SECVN],\n            0x00BC: [DebuggerPDP11.OPS.SEZN],\n            0x00BD: [DebuggerPDP11.OPS.SECZN],\n            0x00BE: [DebuggerPDP11.OPS.SEVZN],\n            0x00BF: [DebuggerPDP11.OPS.SCC]                                     // aka SECVZN\n        }\n    };\n\n    DebuggerPDP11.OPNONE = [DebuggerPDP11.OPS.NONE];\n\n    /*\n     * Table of opcodes added to the 11/40 and newer\n     */\n    DebuggerPDP11.OP1140 = [\n        DebuggerPDP11.OPS.MARK,\n        DebuggerPDP11.OPS.MFPI,\n        DebuggerPDP11.OPS.MTPI,\n        DebuggerPDP11.OPS.SXT,\n        DebuggerPDP11.OPS.RTT,\n        DebuggerPDP11.OPS.MUL,\n        DebuggerPDP11.OPS.DIV,\n        DebuggerPDP11.OPS.ASH,\n        DebuggerPDP11.OPS.ASHC,\n        DebuggerPDP11.OPS.XOR,\n        DebuggerPDP11.OPS.SOB\n    ];\n\n    /*\n     * Table of opcodes added to the 11/45 and newer\n     */\n    DebuggerPDP11.OP1145 = [\n        DebuggerPDP11.OPS.SPL,\n        DebuggerPDP11.OPS.MFPD,\n        DebuggerPDP11.OPS.MTPD\n    ];\n\n    DebuggerPDP11.HISTORY_LIMIT = DEBUG? 100000 : 1000;\n\n    DebuggerPDP11.PROMPT = \">> \";\n\n    /*\n     * Initialize every Debugger module on the page (as IF there's ever going to be more than one ;-))\n     */\n    Web.onInit(DebuggerPDP11.init);\n\n}   // endif DEBUGGER\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/pdp11/lib/computer.js (C) Jeff Parsons 2012-2018\n */\n\n\nclass ComputerPDP11 extends Component {\n    /**\n     * ComputerPDP11(parmsComputer, parmsMachine, fSuspended)\n     *\n     * The ComputerPDP11 component has no required (parmsComputer) properties, but it does\n     * support the following:\n     *\n     *      autoPower: true to automatically power the computer (default), false to wait;\n     *      false is honored only if a \"power\" button binding exists.\n     *\n     *      busWidth: number of memory address lines (address bits) on the computer's \"bus\";\n     *      20 is the minimum (and the default), which implies 8086/8088 real-mode addressing,\n     *      while 24 is required for 80286 protected-mode addressing.  This value is passed\n     *      directly through to the Bus component; see that component for more details.\n     *\n     *      resume: one of the ComputerPDP11.RESUME constants, which are as follows:\n     *          '0' if resume disabled (default)\n     *          '1' if enabled without prompting\n     *          '2' if enabled with prompting\n     *          '3' if enabled with prompting and auto-delete\n     *          or a string containing the path of a predefined JSON-encoded state\n     *\n     *      state: the path to JSON-encoded state file (see details regarding 'state' below)\n     *\n     * The parmsMachine object, if provided, may contain any of:\n     *\n     *      autoMount: if set, this should override any 'autoMount' property in the FDC's\n     *      parmsFDC object.\n     *\n     *      autoPower: if set, this should override any 'autoPower' property in the ComputerPDP11's\n     *      parmsComputer object.\n     *\n     *      messages: if set, this should override any 'messages' property in the Debugger's\n     *      parmsDbg object.\n     *\n     *      state: if set, this should override any 'state' property in the ComputerPDP11's\n     *      parmsComputer object.\n     *\n     *      url: the location of the machine XML file\n     *\n     * If a predefined state is supplied AND it's successfully loaded, then resume behavior\n     * defaults to '1' (ie, resume enabled without prompting).\n     *\n     * This component insures that all components are ready before \"powering\" them.\n     *\n     * Different components become ready at different times, and initialization order (ie,\n     * the order the scripts are combined on the page) only partially determines readiness.\n     * This is because components like ROM and Video must finish loading their resource files\n     * before they are ready.  Other components become ready after we call their initBus()\n     * function, because they have a Bus or CPU dependency, such as access to memory management\n     * functions.  And other components, like CPU and Panel, are ready as soon as their\n     * constructor finishes.\n     *\n     * Once a component has indicated it's ready, we call its powerUp() notification\n     * function (if it has one--it's optional).  We call the CPU's powerUp() function last,\n     * so that the CPU is assured that all other components are ready and \"powered\".\n     *\n     * @this {ComputerPDP11}\n     * @param {Object} parmsComputer\n     * @param {Object} [parmsMachine]\n     * @param {boolean} [fSuspended]\n     */\n    constructor(parmsComputer, parmsMachine, fSuspended)\n    {\n        super(\"Computer\", parmsComputer, MessagesPDP11.COMPUTER);\n\n        this.flags.powered = false;\n\n        this.parmsMachine = null;\n        this.setMachineParms(parmsMachine);\n\n        this.fAutoPower = this.getMachineParm('autoPower', parmsComputer, Str.TYPES.BOOLEAN);\n\n        /*\n         * nPowerChange is 0 while the power state is stable, 1 while power is transitioning\n         * to \"on\", and -1 while power is transitioning to \"off\".\n         */\n        this.nPowerChange = 0;\n\n        /*\n         * TODO: Deprecate 'buswidth' (it should have always used camelCase)\n         */\n        this.nBusWidth = +parmsComputer['busWidth'] || +parmsComputer['buswidth'];\n\n        this.sResumePath = this.sStatePath = null;\n        this.sStateData = null;\n        this.fStateData = false;            // remembers if sStateData was loaded\n        this.fServerState = false;\n        this.stateComputer = this.stateFailSafe = null;\n        this.fInitialized = this.fReload = this.fRestoreError = false;\n\n        this.url = /** @type {string} */ (this.getMachineParm('url') || \"\");\n\n        /*\n         * Generate a random number x (where 0 <= x < 1), add 0.1 so that it's guaranteed to be\n         * non-zero, convert to base 36, and chop off the leading digit and \"decimal\" point.\n         */\n        this.sMachineID = (Math.random() + 0.1).toString(36).substr(2,12);\n        this.sUserID = this.queryUserID();\n\n        /*\n         * Find the appropriate CPU (and Debugger and Control Panel, if any).\n         *\n         * CLOSURE COMPILER TIP: To override the type of a right-hand expression (as we need to do here,\n         * where we know getComponentByType() will only return an CPUState object or null), wrap the expression\n         * in parentheses.  I never knew this until I stumbled across it in \"Closure: The Definitive Guide\".\n         */\n        this.cpu = /** @type {CPUStatePDP11} */ (Component.getComponentByType(\"CPU\", this.id));\n        if (!this.cpu) {\n            Component.error(\"Unable to find CPU component\");\n            return;\n        }\n        this.dbg = /** @type {DebuggerPDP11} */ (Component.getComponentByType(\"Debugger\", this.id));\n\n        /*\n         * Initialize the Bus component\n         */\n        this.bus = new BusPDP11({'id': this.idMachine + '.bus', 'busWidth': this.nBusWidth}, this.cpu, this.dbg);\n\n        /*\n         * Iterate through all the components and connect them to the Control Panel, if any\n         */\n        var iComponent, component;\n        var aComponents = Component.getComponents(this.id);\n\n        this.panel = /** @type {PanelPDP11} */ (Component.getComponentByType(\"Panel\", this.id));\n        this.controlPrint = this.panel && this.panel.bindings['print'];\n\n        if (this.controlPrint) {\n            for (iComponent = 0; iComponent < aComponents.length; iComponent++) {\n                component = aComponents[iComponent];\n                /*\n                 * I can think of many \"cleaner\" ways for the Control Panel component to pass its\n                 * notice(), println(), etc, overrides on to all the other components, but it's just\n                 * too darn convenient to slam those overrides into the components directly.\n                 */\n                component.notice = this.panel.notice;\n                component.print = this.panel.print;\n                component.println = this.panel.println;\n            }\n        }\n\n        this.println(PDP11.APPNAME + \" v\" + PDP11.APPVERSION + \"\\n\" + COPYRIGHT + \"\\n\" + LICENSE);\n\n        this.println(\"Portions adapted from the PDP-11/70 Emulator by Paul Nankervis <http://skn.noip.me/pdp11/pdp11.html>\");\n\n        if (DEBUG && this.messageEnabled()) this.printMessage(\"TYPEDARRAYS: \" + TYPEDARRAYS);\n\n        /*\n         * Iterate through all the components again and call their initBus() handler, if any\n         */\n        for (iComponent = 0; iComponent < aComponents.length; iComponent++) {\n            component = aComponents[iComponent];\n            if (component.initBus) component.initBus(this, this.bus, this.cpu, this.dbg);\n        }\n\n        var sStatePath = null;\n        var sResume = /** @type {string} */ (this.getMachineParm('resume', parmsComputer));\n        if (sResume !== undefined) {\n            /*\n             * Decide whether the 'resume' property is a number or the path of a state file to resume.\n             */\n            if (sResume.length > 1) {\n                sStatePath = this.sResumePath = sResume;\n            } else {\n                this.resume = parseInt(sResume, 10);\n            }\n        }\n\n        /*\n         * The Computer 'state' property allows a state file to be specified independent of the 'resume' feature;\n         * previously, you could only use 'resume' to load a state file -- which we still support, but loading a state\n         * file that way prevents the machine's state from being saved, since we always resume from the 'resume' file.\n         *\n         * The other wrinkle is on the restore side: we need to IGNORE the 'state' property if a saved state now exists.\n         * So we have to peek at localStorage, and unfortunately, the only way to \"peek\" is to actually load the data,\n         * but we're not ready to use it yet, so powerUp() has been changed to use any existing stateComputer that we've\n         * already loaded.\n         *\n         * However, there's now a wrinkle to the wrinkle: if a 'state' parameter has been passed via the URL, then that\n         * OVERRIDES everything; it overrides any 'state' Computer parameter AND it disables resume of any saved state in\n         * localStorage (in other words, it prevents fAllowResume from being true, and forcing resume off).\n         */\n        var fAllowResume;\n        var sState = this.getMachineParm('state') || (fAllowResume = true) && parmsComputer['state'];\n\n        if (sState) {\n            this.sStatePath = sStatePath = sState;\n            if (!fAllowResume) {\n                this.fServerState = true;\n                this.resume = ComputerPDP11.RESUME_NONE;\n            }\n            if (this.resume) {\n                this.stateComputer = new State(this, PDP11.APPVERSION);\n                if (this.stateComputer.load()) {\n                    sStatePath = null;\n                } else {\n                    delete this.stateComputer;\n                }\n            }\n        }\n\n        /*\n         * If sStatePath is set, we must use it.  But if there's no sStatePath AND resume is set,\n         * then we have the option of resuming from a server-side state, assuming a valid USERID.\n         */\n        if (!sStatePath && this.resume) {\n            sStatePath = this.getServerStatePath();\n            if (sStatePath) this.fServerState = true;\n        }\n\n        if (!sStatePath) {\n            this.setReady();\n        } else {\n            var cmp = this;\n            Web.getResource(sStatePath, null, true, function doneStateLoad(sURL, sResource, nErrorCode) {\n                cmp.finishStateLoad(sURL, sResource, nErrorCode);\n            });\n        }\n\n        if (!this.bindings[\"power\"]) this.fAutoPower = true;\n\n        /*\n         * Power on the computer, giving every component the opportunity to reset or restore itself.\n         */\n        if (!fSuspended && this.fAutoPower) this.wait(this.powerOn);\n    }\n\n    /**\n     * clearPanel()\n     *\n     * @this {ComputerPDP11}\n     */\n    clearPanel()\n    {\n        if (this.controlPrint) {\n            this.controlPrint.value = \"\";\n        }\n    }\n\n    /**\n     * getMachineID()\n     *\n     * @this {ComputerPDP11}\n     * @return {string}\n     */\n    getMachineID()\n    {\n        return this.sMachineID;\n    }\n\n    /**\n     * setMachineParms(parmsMachine)\n     *\n     * If no explicit machine parms were provided, then we check for 'parms' in the bundled resources (if any).\n     *\n     * @this {ComputerPDP11}\n     * @param {Object} [parmsMachine]\n     */\n    setMachineParms(parmsMachine)\n    {\n        if (!parmsMachine) {\n            var sParms;\n            if (typeof resources == 'object' && (sParms = resources['parms'])) {\n                try {\n                    parmsMachine = /** @type {Object} */ (eval(\"(\" + sParms + \")\"));\n                } catch(e) {\n                    Component.error(e.message + \" (\" + sParms + \")\");\n                }\n            }\n        }\n        this.parmsMachine = parmsMachine;\n    }\n\n    /**\n     * getMachineParm(sParm, parmsComponent, type, defaultValue)\n     *\n     * If the machine parameter doesn't exist, we check for a matching component parameter\n     * (if parmsComponent is provided), and failing that, we check the bundled resources (if any).\n     *\n     * At the moment, the only bundled resource request we expect to encounter is 'state'; if it exists,\n     * then we return 'state' back to the caller (ie, the name of the resource), so that the caller will\n     * then attempt to load the 'state' resource to obtain the actual state.\n     *\n     * TODO: It would be nice if we could tell the Closure Compiler that when a specific type parameter\n     * (eg, Str.TYPES.NUMBER) is used, the return value will be that type; unfortunately, every caller\n     * must coerce their own return value.\n     *\n     * @this {ComputerPDP11}\n     * @param {string} sParm\n     * @param {Object|null} [parmsComponent]\n     * @param {number} [type] (from Str.TYPES)\n     * @param {*} [defaultValue]\n     * @return {*}\n     */\n    getMachineParm(sParm, parmsComponent, type, defaultValue)\n    {\n        /*\n         * When checking parmsURL, the check is allowed be a bit looser, because URL parameters are\n         * user-supplied, whereas most other parameters are developer-supplied.  Granted, a developer\n         * may also be sloppy and neglect to use correct case (eg, 'automount' instead of 'autoMount'),\n         * but there are limits to my paranoia.\n         */\n        var sParmLC = sParm.toLowerCase();\n        var value = Web.getURLParm(sParm) || Web.getURLParm(sParmLC);\n        if (value === undefined && this.parmsMachine) value = this.parmsMachine[sParm];\n        if (value === undefined && parmsComponent) value = parmsComponent[sParm];\n        if (value === undefined && typeof resources == 'object' && resources[sParm]) value = sParm;\n        if (value === undefined) value = defaultValue;\n        if (typeof value == \"string\" && type) {\n            switch(type) {\n            case Str.TYPES.NUMBER:\n                value = +value;\n                if (isNaN(/** @type {number} */(value))) value = defaultValue || 0;\n                break;\n            case Str.TYPES.BOOLEAN:\n                value = (value == \"true\");\n                break;\n            }\n        }\n        return value;\n    }\n\n    /**\n     * saveMachineParms()\n     *\n     * @this {ComputerPDP11}\n     * @return {string|null}\n     */\n    saveMachineParms()\n    {\n        return this.parmsMachine? JSON.stringify(this.parmsMachine) : null;\n    }\n\n    /**\n     * getUserID()\n     *\n     * @this {ComputerPDP11}\n     * @return {string}\n     */\n    getUserID()\n    {\n        return this.sUserID || \"\";\n    }\n\n    /**\n     * finishStateLoad(sURL, sStateData, nErrorCode)\n     *\n     * @this {ComputerPDP11}\n     * @param {string} sURL\n     * @param {string} sStateData\n     * @param {number} nErrorCode\n     */\n    finishStateLoad(sURL, sStateData, nErrorCode)\n    {\n        if (!nErrorCode) {\n            this.sStateData = sStateData;\n            this.fStateData = true;\n            if (DEBUG && this.messageEnabled()) {\n                this.printMessage(\"loaded state file \" + sURL.replace(this.sUserID || \"xxx\", \"xxx\"));\n            }\n        } else {\n            this.sResumePath = null;\n            this.fServerState = false;\n            this.notice('Unable to load machine state from server (error ' + nErrorCode + (sStateData? ': ' + Str.trim(sStateData) : '') + ')');\n        }\n        this.setReady();\n    }\n\n    /**\n     * wait(fn, parms)\n     *\n     * wait() waits until every component is ready (including ourselves, the last component we check), then calls the\n     * specified Computer method.\n     *\n     * TODO: The Closure Compiler makes it difficult for us to define a function type for \"fn\" that works in all cases;\n     * sometimes we want to pass a function that takes only a \"number\", and other times we want to pass a function that\n     * takes only an \"Array\" (the type will mirror that of the \"parms\" parameter).  However, the Closure Compiler insists\n     * that both functions must be declared as accepting both types of parameters.  So once again, we must use an untyped\n     * function declaration, instead of something stricter like:\n     *\n     *      param {function(this:Computer, (number|Array|undefined)): undefined} fn\n     *\n     * @this {ComputerPDP11}\n     * @param {function(...)} fn\n     * @param {number|Array} [parms] optional parameters\n     */\n    wait(fn, parms)\n    {\n        var computer = this;\n        var aComponents = Component.getComponents(this.id);\n        for (var iComponent = 0; iComponent <= aComponents.length; iComponent++) {\n            var component = (iComponent < aComponents.length ? aComponents[iComponent] : this);\n            if (!component.isReady()) {\n                component.isReady(function onComponentReady() {\n                    computer.wait(fn, parms);\n                });\n                return;\n            }\n        }\n        if (DEBUG && this.messageEnabled()) this.printMessage(\"ComputerPDP11.wait(ready)\");\n        fn.call(this, parms);\n    }\n\n    /**\n     * validateState(stateComputer)\n     *\n     * NOTE: We clear() stateValidate only when there's no stateComputer.\n     *\n     * @this {ComputerPDP11}\n     * @param {State|null} [stateComputer]\n     * @return {boolean} true if state passes validation, false if not\n     */\n    validateState(stateComputer)\n    {\n        var fValid = true;\n        var stateValidate = new State(this, PDP11.APPVERSION, ComputerPDP11.STATE_VALIDATE);\n        if (stateValidate.load() && stateValidate.parse()) {\n            var sTimestampValidate = stateValidate.get(ComputerPDP11.STATE_TIMESTAMP);\n            var sTimestampComputer = stateComputer? stateComputer.get(ComputerPDP11.STATE_TIMESTAMP) : \"unknown\";\n            if (sTimestampValidate != sTimestampComputer) {\n                this.notice(\"Machine state may be out-of-date\\n(\" + sTimestampValidate + \" vs. \" + sTimestampComputer + \")\\nCheck your browser's local storage limits\");\n                fValid = false;\n                if (!stateComputer) stateValidate.clear();\n            } else {\n                if (DEBUG && this.messageEnabled()) {\n                    this.printMessage(\"Last state: \" + sTimestampComputer + \" (validate: \" + sTimestampValidate + \")\");\n                }\n            }\n        }\n        return fValid;\n    }\n\n    /**\n     * powerOn(resume)\n     *\n     * Power every component \"up\", applying any previously available state information.\n     *\n     * @this {ComputerPDP11}\n     * @param {number} [resume] is a valid RESUME value; default is this.resume\n     */\n    powerOn(resume)\n    {\n        if (resume === undefined) {\n            resume = this.resume || (this.sStateData? ComputerPDP11.RESUME_AUTO : ComputerPDP11.RESUME_NONE);\n        }\n\n        if (DEBUG && this.messageEnabled()) {\n            this.printMessage(\"ComputerPDP11.powerOn(\" + (resume == ComputerPDP11.RESUME_REPOWER ? \"repower\" : (resume ? \"resume\" : \"\")) + \")\");\n        }\n\n        if (this.nPowerChange) {\n            return;\n        }\n        this.nPowerChange++;\n\n        var fRepower = false;\n        var fRestore = false;\n        this.fRestoreError = false;\n        var stateComputer = this.stateComputer || new State(this, PDP11.APPVERSION);\n\n        if (resume == ComputerPDP11.RESUME_REPOWER) {\n            fRepower = true;\n        }\n        else if (resume > ComputerPDP11.RESUME_NONE) {\n            if (stateComputer.load(this.sStateData)) {\n                /*\n                 * Since we're resuming something (either a predefined state or a state from localStorage), let's\n                 * create a \"failsafe\" checkpoint in localStorage, and destroy it at the end of a successful powerOn().\n                 * Which means, of course, that if a previous \"failsafe\" checkpoint already exists, something bad\n                 * may have happened the last time around.\n                 */\n                this.stateFailSafe = new State(this, PDP11.APPVERSION, ComputerPDP11.STATE_FAILSAFE);\n                if (this.stateFailSafe.load()) {\n                    this.powerReport(stateComputer);\n                    /*\n                     * We already know resume is something other than RESUME_NONE, so we'll go ahead and bump it\n                     * all the way to RESUME_PROMPT, so that the user will be prompted, and if the user declines to\n                     * restore, the state will be removed.\n                     */\n                    resume = ComputerPDP11.RESUME_PROMPT;\n                    /*\n                     * To ensure that the set() below succeeds, we need to call unload(), otherwise it may fail\n                     * with a \"read only\" error (eg, \"TypeError: Cannot assign to read only property 'timestamp'\").\n                     */\n                    this.stateFailSafe.unload();\n                }\n\n                this.stateFailSafe.set(ComputerPDP11.STATE_TIMESTAMP, Usr.getTimestamp());\n                this.stateFailSafe.store();\n\n                var fValidate = this.resume && !this.fServerState;\n                if (resume == ComputerPDP11.RESUME_AUTO || Component.confirmUser(\"Click OK to restore the previous \" + PDP11.APPNAME + \" machine state, or CANCEL to reset the machine.\")) {\n                    fRestore = stateComputer.parse();\n                    if (fRestore) {\n                        var sCode = /** @type {string} */ (stateComputer.get(UserAPI.RES.CODE));\n                        var sData = /** @type {string} */ (stateComputer.get(UserAPI.RES.DATA));\n                        if (sCode) {\n                            if (sCode == UserAPI.CODE.OK) {\n                                stateComputer.load(sData);\n                            } else {\n                                /*\n                                 * A missing (or not yet created) state file is no cause for alarm, but other errors might be\n                                 */\n                                if (sCode == UserAPI.CODE.FAIL && sData != UserAPI.FAIL.NOSTATE) {\n                                    this.notice(\"Error: \" + sData);\n                                    if (sData == UserAPI.FAIL.VERIFY) this.resetUserID();\n                                } else {\n                                    this.println(sCode + \": \" + sData);\n                                }\n                                /*\n                                 * Try falling back to the state that we should have saved in localStorage, as a backup to the\n                                 * server-side state.\n                                 */\n                                stateComputer.unload();     // discard the invalid server-side state first\n                                if (stateComputer.load()) {\n                                    fRestore = stateComputer.parse();\n                                    fValidate = true;\n                                } else {\n                                    fRestore = false;       // hmmm, there was nothing in localStorage either\n                                }\n                            }\n                        }\n                    }\n                    /*\n                     * If the load/parse was successful, and it was from localStorage (not sStateData),\n                     * then we should to try verify that localStorage snapshot is current.  One reason it may\n                     * NOT be current is if localStorage was full and we got a quota error during the last\n                     * powerOff().\n                     */\n                    if (fValidate) this.validateState(fRestore? stateComputer : null);\n                } else {\n                    /*\n                     * RESUME_PROMPT indicates we should delete the state if they clicked Cancel to confirm() above.\n                     */\n                    if (resume == ComputerPDP11.RESUME_PROMPT) stateComputer.clear();\n                }\n            } else {\n                /*\n                 * If there's no state, then there should also be no validation timestamp; if there is, then once again,\n                 * we're probably dealing with a quota error.\n                 */\n                this.validateState();\n            }\n            delete this.sStateData;\n            delete this.stateComputer;\n        }\n\n        /*\n         * Start powering all components, including any data they may need to restore their state;\n         * we restore power to the CPU last.\n         */\n        var aComponents = Component.getComponents(this.id);\n        for (var iComponent = 0; iComponent < aComponents.length; iComponent++) {\n            var component = aComponents[iComponent];\n            if (component !== this && component != this.cpu) {\n                fRestore = this.powerRestore(component, stateComputer, fRepower, fRestore);\n            }\n        }\n\n        /*\n         * Assuming this is not a repower, we must perform another wait, because some components may\n         * have marked themselves as \"not ready\" again (eg, the FDC component, if the restore forced it\n         * to mount one or more additional disk images).\n         */\n        var aParms = [stateComputer, resume, fRestore];\n\n        if (resume != ComputerPDP11.RESUME_REPOWER) {\n            this.wait(this.donePowerOn, aParms);\n            return;\n        }\n        this.donePowerOn(aParms);\n    }\n\n    /**\n     * powerRestore(component, stateComputer, fRepower, fRestore)\n     *\n     * @this {ComputerPDP11}\n     * @param {Component} component\n     * @param {State} stateComputer\n     * @param {boolean} fRepower\n     * @param {boolean} fRestore\n     * @return {boolean} true if restore should continue, false if not\n     */\n    powerRestore(component, stateComputer, fRepower, fRestore)\n    {\n        if (!component.flags.powered) {\n\n            /*\n             * TODO: If all components called super.powerUp(), the powered flag would be set automatically.\n             */\n\n            component.flags.powered = true;\n\n            var data = null;\n\n            try {\n                if (fRestore) {\n                    data = stateComputer.get(component.id);\n                    if (!data) {\n                        /*\n                         * This is a hack that makes it possible for a machine whose ID has been\n                         * supplemented with a hyphenated numeric suffix to find object IDs in states\n                         * created from a machine without such a suffix.\n                         *\n                         * For example, if a state file was created from a machine with ID \"ibm5160\"\n                         * but the current machine is \"ibm5160-1\", this attempts a second lookup with\n                         * \"ibm5160\", enabling us to find objects that match the original machine ID\n                         * (eg, \"ibm5160.romEGA\").\n                         *\n                         * See /devices/pcx86/machine/5160/ega/640kb/array/ for examples of this.\n                         */\n                        data = stateComputer.get(component.id.replace(/-[0-9]+\\./i, '.'));\n                    }\n                }\n\n                /*\n                 * State.get() will return whatever was originally passed to State.set() (eg, an\n                 * Object or a string), but components are supposed to store only Objects, so if a\n                 * string comes back, something went wrong.  By explicitly eliminating \"string\" data,\n                 * the Closure Compiler stops complaining that we might be passing strings to our\n                 * powerUp() functions (even though we know we're not).\n                 *\n                 * TODO: Determine if there's some way to coerce the Closure Compiler into treating\n                 * data as Object or null, without having to include this runtime check.  An assert\n                 * would be a good idea, but this is overkill.\n                 */\n                if (typeof data === \"string\") data = null;\n\n                /*\n                 * If computer is null, this is simply a repower notification, which most components\n                 * don't do anything with.  Exceptions include: CPU (since it may be halted) and Video\n                 * (since its screen may be \"turned off\").\n                 */\n                if (!component.powerUp(data, fRepower) && data) {\n\n                    Component.error(\"Unable to restore state for \" + component.type);\n                    /*\n                     * If this is a resume error for a machine that also has a predefined state\n                     * AND we're not restoring from that state, then throw away the current state,\n                     * prevent any new state from being created, and then force a reload, which will\n                     * hopefully restore us to the functioning predefined state.\n                     *\n                     * TODO: Considering doing this in ALL cases, not just in situations where a\n                     * 'state' exists but we're not actually resuming from it.\n                     */\n                    if (this.sStatePath && !this.fStateData) {\n                        stateComputer.clear();\n                        this.resume = ComputerPDP11.RESUME_NONE;\n                        Web.reloadPage();\n                    } else {\n                        /*\n                         * In all other cases, we set fRestoreError, which should trigger a call to\n                         * powerReport() and then delete the offending state.\n                         */\n                        this.fRestoreError = true;\n                    }\n                    /*\n                     * Any failure triggers an automatic to call powerUp() again, without any state,\n                     * in the hopes that the component can recover by performing a reset.\n                     */\n                    component.powerUp(null);\n                    /*\n                     * We also disable the rest of the restore operation, because it's not clear\n                     * the remaining state information can be trusted;  the machine is already in an\n                     * inconsistent state, so we're not likely to make things worse, and the only\n                     * alternative (starting over and performing a state-less reset) isn't likely to make\n                     * the user any happier.  But, we'll see... we need some experience with the code.\n                     */\n                    fRestore = false;\n                }\n\n                if (!fRepower && component.comment) {\n                    var asComments = component.comment.split(\"|\");\n                    for (var i = 0; i < asComments.length; i++) {\n                        component.status(asComments[i]);\n                    }\n                }\n            }\n            catch (err) {\n                Component.error(\"Error restoring state for \" + component.type + \" (\" + err.message + \")\");\n            }\n        }\n        return fRestore;\n    }\n\n    /**\n     * donePowerOn(aParms)\n     *\n     * This is nothing more than a continuation of powerOn(), giving us the option of calling wait() one more time.\n     *\n     * @this {ComputerPDP11}\n     * @param {Array} aParms containing [stateComputer, resume, fRestore]\n     */\n    donePowerOn(aParms)\n    {\n        var stateComputer = aParms[0];\n        var fRepower = (aParms[1] < 0);\n        var fRestore = aParms[2];\n\n        if (DEBUG && this.flags.powered && this.messageEnabled()) {\n            this.printMessage(\"ComputerPDP11.donePowerOn(): redundant\");\n        }\n\n        this.fInitialized = true;\n        this.flags.powered = true;\n        var controlPower = this.bindings[\"power\"];\n        if (controlPower) controlPower.textContent = \"Shutdown\";\n\n        /*\n         * Once we get to this point, we're guaranteed that all components are ready, so it's safe to power the CPU;\n         * the CPU should begin executing immediately, unless a debugger is attached.\n         */\n        if (this.cpu) {\n            /*\n             * TODO: Do we not care about the return value here? (ie, is checking fRestoreError sufficient)?\n             */\n            this.powerRestore(this.cpu, stateComputer, fRepower, fRestore);\n            this.updateDisplays(-2);\n            this.cpu.autoStart();\n        }\n\n        /*\n         * If the state was bad, offer to report it and then delete it.  Deleting may be moot, since invariably a new\n         * state will be created on powerOff() before the next powerOn(), but it seems like good paranoia all the same.\n         */\n        if (this.fRestoreError) {\n            this.powerReport(stateComputer);\n            stateComputer.clear();\n        }\n\n        if (!fRepower && this.stateFailSafe) {\n            this.stateFailSafe.clear();\n            delete this.stateFailSafe;\n        }\n\n        this.nPowerChange = 0;\n    }\n\n    /**\n     * checkPower()\n     *\n     * @this {ComputerPDP11}\n     * @return {boolean} true if the computer is fully powered, false otherwise\n     */\n    checkPower()\n    {\n        if (this.flags.powered) return true;\n\n        var component = null, iComponent;\n        var aComponents = Component.getComponents(this.id);\n        for (iComponent = 0; iComponent < aComponents.length; iComponent++) {\n            component = aComponents[iComponent];\n            if (component !== this && !component.flags.ready) break;\n        }\n        if (iComponent == aComponents.length) {\n            for (iComponent = 0; iComponent < aComponents.length; iComponent++) {\n                component = aComponents[iComponent];\n                if (component !== this && !component.flags.powered) break;\n            }\n        }\n        if (iComponent == aComponents.length) component = this;\n        var s = \"The \" + component.type + \" component (\" + component.id + \") is not \" + (!component.flags.ready? \"ready yet\" + (component.fnReady? \" (waiting for notification)\" : \"\") : \"powered yet\") + \".\";\n        Component.alertUser(s);\n        return false;\n    }\n\n    /**\n     * powerReport(stateComputer)\n     *\n     * @this {ComputerPDP11}\n     * @param {State} stateComputer\n     */\n    powerReport(stateComputer)\n    {\n        if (Component.confirmUser(\"There may be a problem with your \" + PDP11.APPNAME + \" machine.\\n\\nTo help us diagnose it, click OK to send this \" + PDP11.APPNAME + \" machine state to http://\" + SITEHOST + \".\")) {\n            Web.sendReport(PDP11.APPNAME, PDP11.APPVERSION, this.url, this.getUserID(), ReportAPI.TYPE.BUG, stateComputer.toString());\n        }\n    }\n\n    /**\n     * powerOff(fSave, fShutdown)\n     *\n     * Power every component \"down\" and optionally save the machine state.\n     *\n     * There's one scenario that powerOff() isn't currently able to deal with very effectively: what to do when\n     * the user switches away while it's still being restored, causing Disk getResource() calls to fail.  The\n     * Disk component calls notify() when that happens -- see Disk.mount() -- but the FDC and HDC controllers don't\n     * notify *us* of those problems, so Computer assumes that the restore was completely successful, when in fact\n     * it was only partially successful.\n     *\n     * Then we immediately arrive here to perform a save, following that incomplete restore.  It would be wrong to\n     * deal with that incomplete restore by setting fRestoreError, because we don't want to trigger a powerReport()\n     * and the deletion of the previous state, because the state itself was presumably OK.  Unfortunately, the new\n     * state we now save will no longer include manually mounted disk images whose remounts were interrupted, so future\n     * restores won't remount them either.\n     *\n     * We could perhaps solve this by having the Disk component notify us in those situations, set a new flag\n     * (fRestoreIncomplete?), and set fSave to false if that's ever set.  Be careful though: when fSave is false,\n     * that means MORE than not saving; it also means deleting any previous state, which is NOT what you'd want to\n     * do in a \"fRestoreIncomplete\" situation.  Also, we have to worry about Disk operations that fail for other reasons,\n     * making sure those failures don't interfere with the save process in the same way.\n     *\n     * As it stands, the worst that happens is any manually mounted disk images might have to be manually remounted,\n     * which doesn't seem like a huge problem.\n     *\n     * @this {ComputerPDP11}\n     * @param {boolean} [fSave] is true to request a saved state\n     * @param {boolean} [fShutdown] is true if the machine is being shut down\n     * @return {string|null} string representing the saved state (or null if error)\n     */\n    powerOff(fSave, fShutdown)\n    {\n        var data;\n        var sState = \"none\";\n\n        if (DEBUG && this.messageEnabled()) {\n            this.printMessage(\"ComputerPDP11.powerOff(\" + (fSave ? \"save\" : \"nosave\") + (fShutdown ? \",shutdown\" : \"\") + \")\");\n        }\n\n        if (this.nPowerChange) {\n            return null;\n        }\n        this.nPowerChange--;\n\n        var stateComputer = new State(this, PDP11.APPVERSION);\n        var stateValidate = new State(this, PDP11.APPVERSION, ComputerPDP11.STATE_VALIDATE);\n\n        var sTimestamp = Usr.getTimestamp();\n        stateValidate.set(ComputerPDP11.STATE_TIMESTAMP, sTimestamp);\n        stateComputer.set(ComputerPDP11.STATE_TIMESTAMP, sTimestamp);\n        stateComputer.set(ComputerPDP11.STATE_VERSION, APPVERSION);\n        stateComputer.set(ComputerPDP11.STATE_HOSTURL, Web.getHostURL());\n        stateComputer.set(ComputerPDP11.STATE_BROWSER, Web.getUserAgent());\n\n        /*\n         * Always power the CPU \"down\" first, just to help insure it doesn't ask other components to do anything\n         * after they're no longer ready.\n         */\n        if (this.cpu && this.cpu.powerDown) {\n            if (fShutdown) {\n                if (fSave) this.cpu.flags.autoStart = this.cpu.flags.running;\n                this.cpu.stopCPU();\n            }\n            data = this.cpu.powerDown(fSave, fShutdown);\n            if (typeof data === \"object\") stateComputer.set(this.cpu.id, data);\n            if (fShutdown) {\n                this.cpu.flags.powered = false;\n                if (data === false) sState = null;\n            }\n        }\n\n        var aComponents = Component.getComponents(this.id);\n        for (var iComponent = 0; iComponent < aComponents.length; iComponent++) {\n            var component = aComponents[iComponent];\n            if (component.flags.powered) {\n                if (component.powerDown) {\n                    data = component.powerDown(fSave, fShutdown);\n                    if (typeof data === \"object\") stateComputer.set(component.id, data);\n                }\n                if (fShutdown) {\n                    component.flags.powered = false;\n                    if (data === false) sState = null;\n                }\n            }\n        }\n\n        if (sState) {\n            if (fShutdown) {\n                var fClear = false;\n                var fClearAll = false;\n                if (fSave) {\n                    if (this.sUserID) {\n                        this.saveServerState(this.sUserID, stateComputer.toString());\n                    }\n                    if (!stateValidate.store() || !stateComputer.store()) {\n                        sState = null;\n                        /*\n                         * New behavior as of v1.13.2:  if it appears that localStorage is full, we blow it ALL away.\n                         * Dedicated server-side storage is the only way we'll ever be able to reliably preserve a\n                         * particular machine's state.  Historically, attempting to limp along with whatever localStorage\n                         * is left just generates the same useless and annoying warnings over and over.\n                         */\n                        fClear = fClearAll = true;\n                    }\n                }\n                else {\n                    /*\n                     * I used to ALWAYS clear (ie, delete) any associated computer state, but now I do this only if the\n                     * current machine is \"resumable\", because there are situations where I have two configurations\n                     * for the same machine -- one resumable and one not -- and I don't want the latter throwing away the\n                     * state of the former.\n                     *\n                     * So this code is here now strictly for callers to delete the state of a \"resumable\" machine, not as\n                     * some paranoid clean-up operation.\n                     *\n                     * An undocumented feature of this operation is that if your configuration uses the special 'resume=\"3\"'\n                     * value, and you click the \"Reset\" button, and then you click OK to reset the everything, this will\n                     * actually reset EVERYTHING (ie, all localStorage for ALL configs will be reclaimed).\n                     */\n                    if (this.resume) {\n                        fClear = true;\n                        fClearAll = (this.resume == ComputerPDP11.RESUME_DELETE);\n                    }\n                }\n                if (fClear) {\n                    stateComputer.clear(fClearAll);\n                }\n            } else {\n                sState = stateComputer.toString();\n            }\n        }\n\n        if (fShutdown) {\n            this.flags.powered = false;\n            var controlPower = this.bindings[\"power\"];\n            if (controlPower) controlPower.textContent = \"Power\";\n        }\n\n        this.nPowerChange = 0;\n\n        return sState;\n    }\n\n    /**\n     * reset()\n     *\n     * Notify all (other) components with a reset() method that the Computer is being reset.\n     *\n     * NOTE: We'd like to reset the Bus first (due to the importance of the A20 line), but since we\n     * allocated the Bus object ourselves, after all the other components were allocated, it ends\n     * up near the end of Component's list of components.  Hence the special case for this.bus below.\n     *\n     * Ditto for the CPU, in part because if the Front Panel resets before the CPU, it will end up\n     * snapping/displaying the PC as of the last instruction executed, before the CPU resets the PC,\n     * causing the Front Panel to display a stale address when we call updateDisplays() at the end.\n     *\n     * @this {ComputerPDP11}\n     */\n    reset()\n    {\n        this.flags.reset = true;\n        if (this.bus && this.bus.reset) {\n            this.printMessage(\"Resetting \" + this.bus.type);\n            this.bus.reset();\n        }\n        if (this.cpu && this.cpu.reset) {\n            this.printMessage(\"Resetting \" + this.cpu.type);\n            this.cpu.reset();\n        }\n        var aComponents = Component.getComponents(this.id);\n        for (var iComponent = 0; iComponent < aComponents.length; iComponent++) {\n            var component = aComponents[iComponent];\n            if (component !== this && component !== this.bus && component !== this.cpu && component.reset) {\n                this.printMessage(\"Resetting \" + component.type);\n                component.reset();\n            }\n        }\n        this.flags.reset = false;\n        this.updateDisplays(-1);\n    }\n\n    /**\n     * start(ms, nCycles)\n     *\n     * Notify all (other) components with a start() method that the CPU has started.\n     *\n     * Note that we're called by startCPU(), which is why we exclude the CPU component,\n     * as well as ourselves.\n     *\n     * @this {ComputerPDP11}\n     * @param {number} ms\n     * @param {number} nCycles\n     */\n    start(ms, nCycles)\n    {\n        var aComponents = Component.getComponents(this.id);\n        for (var iComponent = 0; iComponent < aComponents.length; iComponent++) {\n            var component = aComponents[iComponent];\n            if (component.type == \"CPU\" || component === this) continue;\n            if (component.start) {\n                component.start(ms, nCycles);\n            }\n        }\n        this.updateDisplays(-1);\n    }\n\n    /**\n     * stop(ms, nCycles)\n     *\n     * Notify all (other) components with a stop() method that the CPU has stopped.\n     *\n     * Note that we're called by stopCPU(), which is why we exclude the CPU component,\n     * as well as ourselves.\n     *\n     * @this {ComputerPDP11}\n     * @param {number} ms\n     * @param {number} nCycles\n     */\n    stop(ms, nCycles)\n    {\n        var aComponents = Component.getComponents(this.id);\n        for (var iComponent = 0; iComponent < aComponents.length; iComponent++) {\n            var component = aComponents[iComponent];\n            if (component.type == \"CPU\" || component === this) continue;\n            if (component.stop) {\n                component.stop(ms, nCycles);\n            }\n        }\n        this.updateDisplays(-1);\n    }\n\n    /**\n     * updateDisplays(nUpdate)\n     *\n     * TODO: Notify all components with an updateDisplay() method that the computer's state has changed (not\n     * just the hard-coded ones below).\n     *\n     * If any DOM controls were bound to the CPU, then we need to call its updateDisplay() handler; if there are no\n     * such bindings, then cpu.updateDisplay() does nothing.\n     *\n     * Similarly, if there's a Panel, then we need to call its updateDisplay() handler, in case it created its own canvas\n     * and implemented its own register display (eg, dumpRegisters()); if not, then panel.updateDisplay() also does nothing.\n     *\n     * In practice, there will *either* be a Panel with a custom canvas *or* a set of DOM controls bound to the CPU *or*\n     * neither.  In theory, there could be BOTH, but that would be unusual.\n     *\n     * TODO: Consider alternate approaches to these largely register-oriented display updates.  Ordinarily, we like to\n     * separate logic from presentation, and currently the CPUState contains both, since it's the component that intimately\n     * knows the names, number, sizes, etc, of all the active registers.  The Panel component is the logical candidate,\n     * but Panel is an optional component; it's often the case that only machines that include the Debugger also include\n     * Panel.\n     *\n     * @this {ComputerPDP11}\n     * @param {number} [nUpdate] (1 for periodic, -1 for forced, 0 or undefined otherwise)\n     */\n    updateDisplays(nUpdate)\n    {\n        /*\n         * nUpdate is generally set to -1 whenever the CPU is transitioning to/from a running state, in which case\n         * cpu.updateDisplay() will definitely want to hide/show register contents; however, at other times, when the\n         * CPU is running, constantly updating the DOM controls too frequently can adversely impact overall performance.\n         *\n         * nUpdate will also be -1 whenever the Debugger has modified the state of the machine, implying that we're\n         * not sure what, if anything, actually changed.\n         */\n        if (this.cpu) this.cpu.updateDisplay(nUpdate || 0);\n        if (this.panel) this.panel.updateDisplay(nUpdate || 0);\n    }\n\n    /**\n     * setBinding(sType, sBinding, control, sValue)\n     *\n     * @this {ComputerPDP11}\n     * @param {string|null} sType is the type of the HTML control (eg, \"button\", \"textarea\", \"register\", \"flag\", \"rled\", etc)\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"reset\")\n     * @param {Object} control is the HTML control DOM object (eg, HTMLButtonElement)\n     * @param {string} [sValue] optional data value\n     * @return {boolean} true if binding was successful, false if unrecognized binding request\n     */\n    setBinding(sType, sBinding, control, sValue)\n    {\n        var computer = this;\n\n        switch (sBinding) {\n        case \"power\":\n            this.bindings[sBinding] = control;\n            control.onclick = function onClickPower() {\n                computer.onPower();\n            };\n            return true;\n\n        case \"reset\":\n            this.bindings[sBinding] = control;\n            control.onclick = function onClickReset() {\n                computer.onReset();\n            };\n            return true;\n\n        /*\n         * Technically, this binding should now be called \"saveState\", to clearly distinguish it from\n         * the \"Save Machine\" control that's normally bound to the savePC() function in save.js.  Saving\n         * an entire machine includes everything needed to start/restore the machine; eg, the machine\n         * XML configuration file(s) *and* the JSON-encoded machine state.\n         */\n        case \"save\":\n            /*\n             * Since this feature depends on the server supporting the PCjs User API (see userapi.js),\n             * and since pcjs.org is no longer running a Node web server, we disable the feature for that\n             * particular host.\n             */\n            if (Str.endsWith(Web.getHost(), \"pcjs.org\")) {\n                if (DEBUG) this.log(\"Remote user API not available\");\n                /*\n                 * We could also simply hide the control; eg:\n                 *\n                 *      control.style.display = \"none\";\n                 *\n                 * but removing the control altogether seems better.\n                 */\n                control.parentNode.removeChild(/** @type {Node} */ (control));\n                return false;\n            }\n            this.bindings[sBinding] = control;\n            control.onclick = function onClickSave() {\n                var sUserID = computer.queryUserID(true);\n                if (sUserID) {\n                    /*\n                     * I modified the test to include a check for sStatePath so that I could save new states\n                     * for machines with existing states; otherwise, I'd have no (easy) way of capturing and\n                     * updating their state.  Making the machine (even temporarily) resumable would have been\n                     * one work-around, but it's not appropriate for some machines, as their state is simply\n                     * too large (for localStorage anyway, which is the default storage solution).\n                     */\n                    var fSave = !!(computer.resume && !computer.sResumePath || computer.sStatePath);\n                    var sState = computer.powerOff(fSave);\n                    if (fSave) {\n                        computer.saveServerState(sUserID, sState);\n                    } else {\n                        computer.notice(\"Resume disabled, machine state not saved\");\n                    }\n                }\n                /*\n                 * This seemed like a handy alternative, but it turned out to be a no-go, at least for large states:\n                 *\n                 *      var sState = computer.powerOff(true);\n                 *      if (sState) {\n                 *          sState = \"data:text/json;charset=utf-8,\" + encodeURIComponent(sState);\n                 *          window.open(sState);\n                 *      }\n                 *\n                 * Perhaps if I embedded the data in a link on the current page instead; eg:\n                 *\n                 *      $('<a href=\"' + sState + '\" download=\"state.json\">Download</a>').appendTo('#container');\n                 */\n            };\n            return true;\n\n        default:\n            break;\n        }\n        return false;\n    }\n\n    /**\n     * resetUserID()\n     *\n     * @this {ComputerPDP11}\n     */\n    resetUserID()\n    {\n        Web.setLocalStorageItem(ComputerPDP11.STATE_USERID, \"\");\n        this.sUserID = null;\n    }\n\n    /**\n     * queryUserID(fPrompt)\n     *\n     * @this {ComputerPDP11}\n     * @param {boolean} [fPrompt]\n     * @returns {string|null|undefined}\n     */\n    queryUserID(fPrompt)\n    {\n        var sUserID = this.sUserID;\n        if (!sUserID) {\n            sUserID = Web.getLocalStorageItem(ComputerPDP11.STATE_USERID);\n            if (sUserID !== undefined) {\n                if (!sUserID && fPrompt) {\n                    /*\n                     * NOTE: Warning the user here that \"Save\" operations are not currently supported by pcjs.org is\n                     * merely a precaution, because ordinarily, setBinding() should have already determined if we are\n                     * running from pcjs.org and disabled any \"Save\" button.\n                     */\n                    sUserID = Component.promptUser(\"Saving machine states on the pcjs.org server is currently unsupported.\\n\\nIf you're running your own server, enter your user ID below.\");\n                    if (sUserID) {\n                        sUserID = this.verifyUserID(sUserID);\n                        if (!sUserID) this.notice(\"The user ID is invalid.\");\n                    }\n                }\n            } else if (fPrompt) {\n                this.notice(\"Browser local storage is not available\");\n            }\n        }\n        return sUserID;\n    }\n\n    /**\n     * verifyUserID(sUserID)\n     *\n     * @this {ComputerPDP11}\n     * @param {string} sUserID\n     * @return {string} validated user ID, or null if error\n     */\n    verifyUserID(sUserID)\n    {\n        this.sUserID = null;\n        var fMessages = DEBUG && this.messageEnabled();\n        if (fMessages) this.printMessage(\"verifyUserID(\" + sUserID + \")\");\n        var sRequest = Web.getHost() + UserAPI.ENDPOINT + '?' + UserAPI.QUERY.REQ + '=' + UserAPI.REQ.VERIFY + '&' + UserAPI.QUERY.USER + '=' + sUserID;\n        var response = Web.getResource(sRequest);\n        var nErrorCode = response[0];\n        var sResponse = response[1];\n        if (!nErrorCode && sResponse) {\n            try {\n                response = eval(\"(\" + sResponse + \")\");\n                if (response.code && response.code == UserAPI.CODE.OK) {\n                    Web.setLocalStorageItem(ComputerPDP11.STATE_USERID, response.data);\n                    if (fMessages) this.printMessage(ComputerPDP11.STATE_USERID + \" updated: \" + response.data);\n                    this.sUserID = response.data;\n                } else {\n                    if (fMessages) this.printMessage(response.code + \": \" + response.data);\n                }\n            } catch (e) {\n                Component.error(e.message + \" (\" + sResponse + \")\");\n            }\n        } else {\n            if (fMessages) this.printMessage(\"invalid response (error \" + nErrorCode + \")\");\n        }\n        return this.sUserID;\n    }\n\n    /**\n     * getServerStatePath()\n     *\n     * @this {ComputerPDP11}\n     * @return {string|null} sStatePath (null if no localStorage or no USERID stored in localStorage)\n     */\n    getServerStatePath()\n    {\n        var sStatePath = null;\n        if (this.sUserID) {\n            if (DEBUG && this.messageEnabled()) {\n                this.printMessage(ComputerPDP11.STATE_USERID + \" for load: \" + this.sUserID);\n            }\n            sStatePath = Web.getHost() + UserAPI.ENDPOINT + '?' + UserAPI.QUERY.REQ + '=' + UserAPI.REQ.LOAD + '&' + UserAPI.QUERY.USER + '=' + this.sUserID + '&' + UserAPI.QUERY.STATE + '=' + State.key(this, PDP11.APPVERSION);\n        } else {\n            if (DEBUG && this.messageEnabled()) {\n                this.printMessage(ComputerPDP11.STATE_USERID + \" unavailable\");\n            }\n        }\n        return sStatePath;\n    }\n\n    /**\n     * saveServerState(sUserID, sState)\n     *\n     * @this {ComputerPDP11}\n     * @param {string} sUserID\n     * @param {string|null} sState\n     */\n    saveServerState(sUserID, sState)\n    {\n        /*\n         * We must pass fSync == true, because (as I understand it) browsers will blow off any async\n         * requests when a page is being closed.  Since our request is synchronous, storeServerState()\n         * should also return a result, but there's not much we can do with it, since browsers ALSO\n         * tend to blow off alerts() and the like when closing down.\n         */\n        if (sState) {\n            if (DEBUG && this.messageEnabled()) {\n                this.printMessage(\"size of server state: \" + sState.length + \" bytes\");\n            }\n            var response = this.storeServerState(sUserID, sState, true);\n            if (response && response[UserAPI.RES.CODE] == UserAPI.CODE.OK) {\n                this.notice(\"Machine state saved to server\");\n            } else if (sState) {\n                var sError = (response && response[UserAPI.RES.DATA]) || UserAPI.FAIL.BADSTORE;\n                if (response[UserAPI.RES.CODE] == UserAPI.CODE.FAIL) {\n                    sError = \"Error: \" + sError;\n                } else {\n                    sError = \"Error \" + response[UserAPI.RES.CODE] + \": \" + sError;\n                }\n                this.notice(sError);\n                this.resetUserID();\n            }\n        } else {\n            if (DEBUG && this.messageEnabled()) {\n                this.printMessage(\"no state to store\");\n            }\n        }\n    }\n\n    /**\n     * storeServerState(sUserID, sState, fSync)\n     *\n     * @this {ComputerPDP11}\n     * @param {string} sUserID\n     * @param {string} sState\n     * @param {boolean} [fSync] is true if we're powering down and should perform a synchronous request (default is async)\n     * @return {*} server response if fSync is true and a response was received; otherwise null\n     */\n    storeServerState(sUserID, sState, fSync)\n    {\n        if (DEBUG && this.messageEnabled()) {\n            this.printMessage(ComputerPDP11.STATE_USERID + \" for store: \" + sUserID);\n        }\n        /*\n         * TODO: Determine whether or not any browsers cancel our request if we're called during a browser \"shutdown\" event,\n         * and whether or not it matters if we do an async request (currently, we're not, to try to ensure the request goes through).\n         */\n        var dataPost = {};\n        dataPost[UserAPI.QUERY.REQ] = UserAPI.REQ.STORE;\n        dataPost[UserAPI.QUERY.USER] = sUserID;\n        dataPost[UserAPI.QUERY.STATE] = State.key(this, PDP11.APPVERSION);\n        dataPost[UserAPI.QUERY.DATA] = sState;\n        var sRequest = Web.getHost() + UserAPI.ENDPOINT;\n        if (!fSync) {\n            Web.getResource(sRequest, dataPost, true);\n        } else {\n            var response = Web.getResource(sRequest, dataPost);\n            var sResponse = response[0];\n            if (response[1]) {\n                if (sResponse) {\n                    var i = sResponse.indexOf('\\n');\n                    if (i > 0) sResponse = sResponse.substr(0, i);\n                    if (!sResponse.indexOf(\"Error: \")) sResponse = sResponse.substr(7);\n                }\n                sResponse = '{\"' + UserAPI.RES.CODE + '\":' + response[1] + ',\"' + UserAPI.RES.DATA + '\":\"' + sResponse + '\"}';\n            }\n            if (DEBUG && this.messageEnabled()) this.printMessage(sResponse);\n            return JSON.parse(sResponse);\n        }\n        return null;\n    }\n\n    /**\n     * onPower()\n     *\n     * This handles UI requests to toggle the computer's power (eg, see the \"power\" button binding).\n     *\n     * @this {ComputerPDP11}\n     */\n    onPower()\n    {\n        if (!this.nPowerChange) {\n            if (!this.flags.powered) {\n                this.wait(this.powerOn);\n            } else {\n                this.powerOff(false, true);\n            }\n        }\n    }\n\n    /**\n     * onReset()\n     *\n     * This handles UI requests to reset the computer's state (eg, see the \"reset\" button binding).\n     *\n     * @this {ComputerPDP11}\n     */\n    onReset()\n    {\n        /*\n         * I'm going to start with the presumption that it makes little sense for an \"unpowered\" computer to be \"reset\";\n         * ditto if the power state is currently being changed.\n         */\n        if (!this.flags.powered || this.nPowerChange) return;\n\n        /*\n         * If this is a \"resumable\" machine (and it's not using a predefined state), then we overload the reset\n         * operation to offer an explicit \"save or discard\" option first.  This is currently the only UI we offer to\n         * discard a machine's state, including any disk changes.  The traditional \"reset\" operation is still available\n         * for non-resumable machines.\n         *\n         * TODO: Break this behavior out into a separate \"discard\" operation, in case the designer of the machine really\n         * wants to clutter the UI with confusing options. ;-)\n         */\n        if (this.resume && !this.sResumePath) {\n            /*\n             * I used to bypass the prompt if this.resume == ComputerPDP11.RESUME_AUTO, setting fSave to true automatically,\n             * but that gives the user no means of resetting a resumable machine that contains errors in its resume state.\n             */\n            var fSave = (/* this.resume == ComputerPDP11.RESUME_AUTO || */ Component.confirmUser(\"Click OK to save changes to this \" + PDP11.APPNAME + \" machine.\\n\\nWARNING: If you CANCEL, all disk changes will be discarded.\"));\n            this.powerOff(fSave, true);\n            /*\n             * Forcing the page to reload is an expedient option, but ugly. It's preferable to call powerOn()\n             * and rely on all the components to reset themselves to their default state.  The components with\n             * the greatest burden here are FDC and HDC, which must rely on the fReload flag to determine whether\n             * or not to unload/reload all their original auto-mounted disk images.\n             *\n             * However, if we started with a predefined state (ie, sStatePath is set), we take this shortcut, because\n             * we don't (yet) have code in place to gracefully reload the initial state (requires calling getResource()\n             * again); alternatively, we could avoid throwing that state away, but it seems better to save the memory.\n             *\n             * TODO: Make this more graceful, so that we can stop using the reloadPage() sledgehammer.\n             */\n            if (!fSave && this.sStatePath) {\n                Web.reloadPage();\n                return;\n            }\n            if (!fSave) this.fReload = true;\n            this.powerOn(ComputerPDP11.RESUME_NONE);\n            this.fReload = false;\n        } else {\n            this.reset();\n            if (this.cpu && !this.dbg) this.cpu.autoStart();\n        }\n    }\n\n    /**\n     * getMachineComponent(sType, componentPrev)\n     *\n     * @this {ComputerPDP11}\n     * @param {string} sType\n     * @param {Component|null} [componentPrev] of previously returned component, if any\n     * @return {Component|null}\n     */\n    getMachineComponent(sType, componentPrev)\n    {\n        var componentLast = componentPrev;\n        var aComponents = Component.getComponents(this.id);\n        for (var iComponent = 0; iComponent < aComponents.length; iComponent++) {\n            var component = aComponents[iComponent];\n            if (componentPrev) {\n                if (componentPrev == component) componentPrev = null;\n                continue;\n            }\n            if (component.type == sType) return component;\n        }\n        if (!componentLast) Component.log(\"Machine component type '\" + sType + \"' not found\", \"warning\");\n        return null;\n    }\n\n    /**\n     * setFocus(fScroll)\n     *\n     * NOTE: When soft keyboard buttons call us to return focus to the machine (and away from the button),\n     * the browser's default behavior is to scroll the element into view, which can be annoying, especially on iOS,\n     * where the display is more constrained, so we no longer do it by default (fScroll must be true).\n     *\n     * @this {ComputerPDP11}\n     * @param {boolean} [fScroll] (true if you really want the control scrolled into view)\n     */\n    setFocus(fScroll)\n    {\n        if (this.controlPrint) {\n            /*\n             * This seems to be recommended work-around to prevent the browser from scrolling the focused element\n             * into view.  The CPU is not a visual component, so when the CPU wants to set focus, the primary intent\n             * is to ensure that keyboard input is fielded properly.\n             */\n            var x = 0, y = 0;\n            if (!fScroll && window) {\n                x = window.scrollX;\n                y = window.scrollY;\n            }\n\n            this.controlPrint.focus();\n\n            if (!fScroll && window) {\n                window.scrollTo(x, y);\n            }\n        }\n    }\n\n    /**\n     * ComputerPDP11.init()\n     *\n     * For every machine represented by an HTML element of class \"pdp11-machine\", this function\n     * locates the HTML element of class \"computer\", extracting the JSON-encoded parameters for the\n     * Computer constructor from the element's \"data-value\" attribute, invoking the constructor to\n     * create a Computer component, and then binding any associated HTML controls to the new component.\n     */\n    static init()\n    {\n        /*\n         * In non-COMPILED builds, embedMachine() may have set XMLVERSION.\n         */\n        if (!COMPILED && XMLVERSION) PDP11.APPVERSION = XMLVERSION;\n\n        var aeMachines = Component.getElementsByClass(document, PDP11.APPCLASS + \"-machine\");\n\n        for (var iMachine = 0; iMachine < aeMachines.length; iMachine++) {\n\n            var eMachine = aeMachines[iMachine];\n            var parmsMachine = Component.getComponentParms(eMachine);\n\n            var aeComputers = Component.getElementsByClass(eMachine, PDP11.APPCLASS, \"computer\");\n\n            for (var iComputer = 0; iComputer < aeComputers.length; iComputer++) {\n\n                var eComputer = aeComputers[iComputer];\n                var parmsComputer = Component.getComponentParms(eComputer);\n\n                /*\n                 * We set fSuspended in the Computer constructor because we want to \"power up\" the\n                 * computer ourselves, after any/all bindings are in place.\n                 */\n                var computer = new ComputerPDP11(parmsComputer, parmsMachine, true);\n\n                if (DEBUG && computer.messageEnabled()) {\n                    computer.printMessage(\"onInit(\" + computer.flags.powered + \")\");\n                }\n\n                /*\n                 * Bind any \"power\", \"reset\" and \"save\" buttons.  An \"erase\" button was also considered,\n                 * but \"reset\" now provides a way to force the machine to start from scratch again, so \"erase\"\n                 * may be redundant now.\n                 */\n                Component.bindComponentControls(computer, eComputer, PDP11.APPCLASS);\n\n                /*\n                 * Power on the computer, giving every component the opportunity to reset or restore itself.\n                 */\n                if (computer.fAutoPower) computer.wait(computer.powerOn);\n            }\n        }\n    }\n\n    /**\n     * ComputerPDP11.show()\n     *\n     * When exit() is using an \"onbeforeunload\" handler, this \"onpageshow\" handler allows us to repower everything,\n     * without either resetting or restoring.  We call powerOn() with a special resume value (RESUME_REPOWER) if the\n     * computer is already marked as \"ready\", meaning the browser didn't change anything.  This \"repower\" process\n     * should be very quick, essentially just marking all components as powered again (so that, for example, the Video\n     * component will start drawing again) and firing the CPU up again.\n     */\n    static show()\n    {\n        var aeComputers = Component.getElementsByClass(document, PDP11.APPCLASS, \"computer\");\n        for (var iComputer = 0; iComputer < aeComputers.length; iComputer++) {\n            var eComputer = aeComputers[iComputer];\n            var parmsComputer = Component.getComponentParms(eComputer);\n            var computer = /** @type {ComputerPDP11} */ (Component.getComponentByType(\"Computer\", parmsComputer['id']));\n            if (computer) {\n\n                computer.flags.unloading = false;\n\n                if (DEBUG && computer.messageEnabled()) {\n                    computer.printMessage(\"onShow(\" + computer.fInitialized + \",\" + computer.flags.powered + \")\");\n                }\n\n                /*\n                 * Note that the FIRST 'onpageshow' event, and therefore the first show() callback, occurs\n                 * AFTER the the initial 'onload' event, and at that point in time, fInitialized will not be set yet.\n                 * So, practically speaking, the first show() callback isn't all that useful.\n                 */\n                if (computer.fInitialized && !computer.flags.powered) {\n                    /**\n                     * Repower the computer, notifying every component to continue running as-is.\n                     */\n                    computer.powerOn(ComputerPDP11.RESUME_REPOWER);\n                }\n            }\n        }\n    }\n\n    /**\n     * ComputerPDP11.exit()\n     *\n     * The Computer is currently the only component that uses an \"exit\" handler, which Web.onExit() defines as\n     * either an \"unload\" or \"onbeforeunload\" handler.  This gives us the opportunity to save the machine state,\n     * using our powerOff() function, before the page goes away.\n     *\n     * It's worth noting that \"onbeforeunload\" offers one nice feature when used instead of \"onload\": the entire\n     * page (and therefore this entire application) is retained in its current state by the browser (well, some\n     * browsers), so that if you go to a new URL, either by entering a new URL in the same window/tab, or by pressing\n     * the FORWARD button, and then you press the BACK button, the page is immediately restored to its previous state.\n     *\n     * In fact, that's how some browsers operate whether you have an \"onbeforeunload\" handler or not; in other words,\n     * an \"onbeforeunload\" handler doesn't change the page retention behavior of the browser.  By contrast, the mere\n     * presence of an \"onunload\" handler generally causes a browser to throw the page away once the handler returns.\n     *\n     * However, in order to safely use \"onbeforeunload\", we must add yet another handler (\"onpageshow\") to repower\n     * everything, without either resetting or restoring.  Hence, the ComputerPDP11.show() function, which calls powerOn()\n     * with a special resume value (RESUME_REPOWER) if the computer is already marked as \"ready\", meaning the browser\n     * didn't change anything.  This \"repower\" process should be very quick, essentially just marking all components as\n     * powered again (so that, for example, the Video component will start drawing again) and firing the CPU up again.\n     *\n     * Reportedly, some browsers (eg, Opera) don't support \"onbeforeunload\", in which case Component will have to use\n     * \"unload\" instead.  But even when the page must be rebuilt from scratch, the combination of browser cache and\n     * localStorage means the simulation should be restored and become operational almost immediately.\n     */\n    static exit()\n    {\n        var aeComputers = Component.getElementsByClass(document, PDP11.APPCLASS, \"computer\");\n        for (var iComputer = 0; iComputer < aeComputers.length; iComputer++) {\n            var eComputer = aeComputers[iComputer];\n            var parmsComputer = Component.getComponentParms(eComputer);\n            var computer = /** @type {ComputerPDP11} */ (Component.getComponentByType(\"Computer\", parmsComputer['id']));\n            if (computer) {\n\n                /*\n                 * Added a new flag that Component functions (eg, notice()) should check before alerting the user.\n                 */\n                computer.flags.unloading = true;\n\n                if (DEBUG && computer.messageEnabled()) {\n                    computer.printMessage(\"onExit(\" + computer.flags.powered + \")\");\n                }\n\n                if (computer.flags.powered) {\n                    /**\n                     * Power off the computer, giving every component an opportunity to save its state,\n                     * but only if 'resume' has been set AND there is no valid resume path (because if a valid resume\n                     * path exists, we'll always load our state from there, and not from whatever we save here).\n                     */\n                    computer.powerOff(!!(computer.resume && !computer.sResumePath), true);\n                }\n            }\n        }\n    }\n}\n\nComputerPDP11.STATE_FAILSAFE  = \"failsafe\";\nComputerPDP11.STATE_VALIDATE  = \"validate\";\nComputerPDP11.STATE_TIMESTAMP = \"timestamp\";\nComputerPDP11.STATE_VERSION   = \"version\";\nComputerPDP11.STATE_HOSTURL   = \"url\";\nComputerPDP11.STATE_BROWSER   = \"browser\";\nComputerPDP11.STATE_USERID    = \"user\";\n\n/*\n * The following constants define all the resume options.  Negative values (eg, RESUME_REPOWER) are for\n * internal use only, and RESUME_DELETE is not documented (it provides a way of deleting ALL saved states\n * whenever a resume is declined).  As a result, the only \"end-user\" values are 0, 1 and 2.\n */\nComputerPDP11.RESUME_REPOWER  = -1;  // resume without changing any state (for internal use only)\nComputerPDP11.RESUME_NONE     =  0;  // default (no resume)\nComputerPDP11.RESUME_AUTO     =  1;  // automatically save/restore state\nComputerPDP11.RESUME_PROMPT   =  2;  // automatically save but conditionally restore (WARNING: if restore is declined, any state is discarded)\nComputerPDP11.RESUME_DELETE   =  3;  // same as RESUME_PROMPT but discards ALL machines states whenever ANY machine restore is declined (undocumented)\n\n/*\n * Initialize every Computer on the page.\n */\nWeb.onInit(ComputerPDP11.init);\nWeb.onShow(ComputerPDP11.show);\nWeb.onExit(ComputerPDP11.exit);\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/state.js (C) Jeff Parsons 2012-2018\n */\n\n\nclass State {\n    /**\n     * State(component, sVersion, sSuffix)\n     *\n     * State objects are used by components to save/restore their state.\n     *\n     * During a save operation, components add data to a State object via set(), and then return\n     * the resulting data using data().\n     *\n     * During a restore operation, the Computer component passes the results of each data() call\n     * back to the originating component.\n     *\n     * WARNING: Since State objects are low-level objects that have no UI requirements, they do not\n     * inherit from the Component class, so you should only use class methods of Component, such as\n     * Component.assert() (or Debugger methods if the Debugger is available).\n     *\n     * NOTE: 1.01 is the first version to provide limited save/restore support using localStorage.\n     * From that point on, care must be taken to insure that any new version that's incompatible with\n     * previous localStorage data be released with a version number that is at least 1 greater,\n     * since we're tagging the localStorage data with the integer portion of the version string.\n     *\n     * @param {Component} component\n     * @param {string} [sVersion] is used to append a major version number to the key\n     * @param {string} [sSuffix] is used to append any additional suffixes to the key\n     */\n    constructor(component, sVersion, sSuffix)\n    {\n        this.id = component.id;\n        this.dbg = component.dbg;\n        this.json = \"\";\n        this.state = {};\n        this.fLoaded = this.fParsed = false;\n        this.key = State.key(component, sVersion, sSuffix);\n        this.unload(component.parms);\n    }\n\n    /**\n     * set(id, data)\n     *\n     * @this {State}\n     * @param {number|string} id\n     * @param {Object|string} data\n     */\n    set(id, data)\n    {\n        try {\n            this.state[id] = data;\n        } catch(e) {\n            Component.log(e.message);\n        }\n    }\n\n    /**\n     * get(id)\n     *\n     * @this {State}\n     * @param {number|string} id\n     * @return {Object|string|null}\n     */\n    get(id)\n    {\n        return this.state[id] || null;\n    }\n\n    /**\n     * data()\n     *\n     * @this {State}\n     * @return {Object}\n     */\n    data()\n    {\n        return this.state;\n    }\n\n    /**\n     * load(json)\n     *\n     * WARNING: Make sure you follow this call with either a call to parse() or unload(),\n     * because any stringified data that we've loaded isn't usable until it's been parsed.\n     *\n     * @this {State}\n     * @param {string|null} [json]\n     * @return {boolean} true if state exists in localStorage, false if not\n     */\n    load(json)\n    {\n        if (json) {\n            this.json = json;\n            this.fLoaded = true;\n            this.fParsed = false;\n            return true;\n        }\n        if (this.fLoaded) {\n            /*\n             * This is assumed to be a redundant load().\n             */\n            return true;\n        }\n        if (Web.hasLocalStorage()) {\n            var s = Web.getLocalStorageItem(this.key);\n            if (s) {\n                this.json = s;\n                this.fLoaded = true;\n                if (DEBUG) Component.log(\"localStorage(\" + this.key + \"): \" + s.length + \" bytes loaded\");\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * parse()\n     *\n     * This completes the load() operation, by parsing what was loaded, on the assumption there\n     * might be some benefit to deferring parsing until we've given the user a chance to confirm.\n     * Otherwise, load() could have just as easily done this, too.\n     *\n     * @this {State}\n     * @return {boolean} true if successful, false if error\n     */\n    parse()\n    {\n        var fSuccess = true;\n        if (!this.fParsed) {\n            try {\n                this.state = JSON.parse(this.json);\n                this.fParsed = true;\n            } catch (e) {\n                Component.error(e.message || e);\n                fSuccess = false;\n            }\n        }\n        return fSuccess;\n    }\n\n    /**\n     * store()\n     *\n     * @this {State}\n     * @return {boolean} true if successful, false if error\n     */\n    store()\n    {\n        var fSuccess = true;\n        if (Web.hasLocalStorage()) {\n            var s = JSON.stringify(this.state);\n            if (Web.setLocalStorageItem(this.key, s)) {\n                if (DEBUG) Component.log(\"localStorage(\" + this.key + \"): \" + s.length + \" bytes stored\");\n            } else {\n                /*\n                 * WARNING: Because browsers tend to disable all alerts() during an \"unload\" operation,\n                 * it's unlikely anyone will ever see the \"quota\" errors that occur at this point.  Need to\n                 * think of some way to notify the user that there's a problem, and offer a way of cleaning\n                 * up old states.\n                 */\n                Component.error(\"Unable to store \" + s.length + \" bytes in browser local storage\");\n                fSuccess = false;\n            }\n        }\n        return fSuccess;\n    }\n\n    /**\n     * toString()\n     *\n     * @this {State}\n     * @return {string} JSON-encoded state\n     */\n    toString()\n    {\n        return this.state? JSON.stringify(this.state) : this.json;\n    }\n\n    /**\n     * unload(parms)\n     *\n     * This discards any data saved via set() or loaded via load(), creating an empty State object.\n     * Note that you have to follow this call with an explicit call to store() if you want to remove\n     * the state from localStorage as well.\n     *\n     * @this {State}\n     * @param {Object} [parms]\n     */\n    unload(parms)\n    {\n        this.json = \"\";\n        this.state = {};\n        this.fLoaded = this.fParsed = false;\n        if (parms) this.set(\"parms\", parms);\n    }\n\n    /**\n     * clear(fAll)\n     *\n     * This unloads the current state, and then clears ALL localStorage for the current machine,\n     * independent of version, to reduce the chance of orphaned states wasting part of our limited allocation.\n     *\n     * @this {State}\n     * @param {boolean} [fAll] true to unconditionally clear ALL localStorage for the current domain\n     */\n    clear(fAll)\n    {\n        this.unload();\n        var aKeys = Web.getLocalStorageKeys();\n        for (var i = 0; i < aKeys.length; i++) {\n            var sKey = aKeys[i];\n            if (sKey && (fAll || sKey.substr(0, this.key.length) == this.key)) {\n                Web.removeLocalStorageItem(sKey);\n                if (DEBUG) Component.log(\"localStorage(\" + sKey + \") removed\");\n                aKeys.splice(i, 1);\n                i = 0;\n            }\n        }\n    }\n\n    /**\n     * State.key(component, sVersion, sSuffix)\n     *\n     * This encapsulates the key generation code.\n     *\n     * @param {Component} component\n     * @param {string} [sVersion] is used to append a major version number to the key\n     * @param {string} [sSuffix] is used to append any additional suffixes to the key\n     * @return {string} key\n     */\n    static key(component, sVersion, sSuffix)\n    {\n        var key = component.id;\n        if (sVersion) {\n            var i = sVersion.indexOf('.');\n            if (i > 0) key += \".v\" + sVersion.substr(0, i);\n        }\n        if (sSuffix) {\n            key += \".\" + sSuffix;\n        }\n        return key;\n    }\n\n    /**\n     * State.compress(aSrc)\n     *\n     * @param {Array.<number>|null} aSrc\n     * @return {Array.<number>|null} is either the original array (aSrc), or a smaller array of \"count, value\" pairs (aComp)\n     */\n    static compress(aSrc)\n    {\n        if (aSrc) {\n            var iSrc = 0;\n            var iComp = 0;\n            var aComp = [];\n            while (iSrc < aSrc.length) {\n                var n = aSrc[iSrc];\n\n                var iCompare = iSrc + 1;\n                while (iCompare < aSrc.length && aSrc[iCompare] === n) iCompare++;\n                aComp[iComp++] = iCompare - iSrc;\n                aComp[iComp++] = n;\n                iSrc = iCompare;\n            }\n            if (aComp.length < aSrc.length) return aComp;\n        }\n        return aSrc;\n    }\n\n    /**\n     * State.decompress(aComp)\n     *\n     * @param {Array.<number>} aComp\n     * @param {number} nLength is expected length of decompressed data\n     * @return {Array.<number>}\n     */\n    static decompress(aComp, nLength)\n    {\n        var iDst = 0;\n        var aDst = new Array(nLength);\n        var iComp = 0;\n        while (iComp < aComp.length - 1) {\n            var c = aComp[iComp++];\n            var n = aComp[iComp++];\n            while (c--) {\n                aDst[iDst++] = n;\n            }\n        }\n\n        return aDst;\n    }\n\n    /**\n     * State.compressEvenOdd(aSrc)\n     *\n     * This is a very simple variation on compress() that compresses all the EVEN elements of aSrc first,\n     * followed by all the ODD elements.  This tends to work better on EGA video memory, because when odd/even\n     * addressing is enabled (eg, for text modes), the DWORD values tend to alternate, which is the worst case\n     * for compress(), but the best case for compressEvenOdd().\n     *\n     * One wrinkle we support: if the first element is uninitialized, then we assume the entire array is undefined,\n     * and return an empty compressed array.  Conversely, decompressEvenOdd() will take an empty compressed array\n     * and return an uninitialized array.\n     *\n     * @param {Array.<number>|null} aSrc\n     * @return {Array.<number>|null} is either the original array (aSrc), or a smaller array of \"count, value\" pairs (aComp)\n     */\n    static compressEvenOdd(aSrc)\n    {\n        if (aSrc) {\n            var iComp = 0, aComp = [];\n            if (aSrc[0] !== undefined) {\n                for (var off = 0; off < 2; off++) {\n                    var iSrc = off;\n                    while (iSrc < aSrc.length) {\n                        var n = aSrc[iSrc];\n                        var iCompare = iSrc + 2;\n                        while (iCompare < aSrc.length && aSrc[iCompare] === n) iCompare += 2;\n                        aComp[iComp++] = (iCompare - iSrc) >> 1;\n                        aComp[iComp++] = n;\n                        iSrc = iCompare;\n                    }\n                }\n            }\n            if (aComp.length < aSrc.length) return aComp;\n        }\n        return aSrc;\n    }\n\n    /**\n     * State.decompressEvenOdd(aComp, nLength)\n     *\n     * This is the counterpart to compressEvenOdd().  Note that because there's nothing in the compressed sequence\n     * that differentiates a compress() sequence from a compressEvenOdd() sequence, you simply have to be consistent:\n     * if you used even/odd compression, then you must use even/odd decompression.\n     *\n     * @param {Array.<number>} aComp\n     * @param {number} nLength is expected length of decompressed data\n     * @return {Array.<number>}\n     */\n    static decompressEvenOdd(aComp, nLength)\n    {\n        var iDst = 0;\n        var aDst = new Array(nLength);\n        var iComp = 0;\n        while (iComp < aComp.length - 1) {\n            var c = aComp[iComp++];\n            var n = aComp[iComp++];\n            while (c--) {\n                aDst[iDst] = n;\n                iDst += 2;\n            }\n            /*\n             * The output of a \"count,value\" pair will never exceed the end of the output array, so as soon as we reach it\n             * the first time, we know it's time to switch to ODD elements, and as soon as we reach it again, we should be\n             * done.\n             */\n\n            if (iDst == nLength) iDst = 1;\n        }\n\n        return aDst;\n    }\n}\n\n\n\n/**\n * @copyright https://www.pcjs.org/modules/shared/lib/embed.js (C) Jeff Parsons 2012-2018\n */\n\n\n/*\n * We now support asynchronous XML and XSL file loads; simply set fAsync (below) to true.\n *\n * NOTE: For that support to work, we have to keep track of the number of machines on the page\n * (ie, how many embedMachine() calls were issued), reduce the count as each machine XML file\n * is fully transformed into HTML, and when the count finally returns to zero, notify all the\n * machine component init() handlers.\n *\n * Also, to prevent those init() handlers from running prematurely, we must disable all page\n * notification events at the start of the embedding process (Web.enablePageEvents(false)) and\n * re-enable them at the end (Web.enablePageEvents(true)).\n */\nvar fAsync = true;\nvar cAsyncMachines = 0;\n\n/**\n * loadXML(sFile, idMachine, sAppName, sAppClass, sParms, fResolve, display, done)\n *\n * This is the preferred way to load all XML and XSL files. It uses getResource()\n * to load them as strings, which parseXML() can massage before parsing/transforming them.\n *\n * For example, since I've been unable to get the XSLT document() function to work inside any\n * XSL document loaded by JavaScript's XSLT processor, that has prevented me from dynamically\n * loading any XML machine file that uses the \"ref\" attribute to refer to and incorporate\n * another XML document.\n *\n * To solve that, I've added an fResolve parameter that tells parseXML() to fetch any\n * referenced documents ITSELF and insert them into the XML string prior to parsing, instead\n * of relying on the XSLT template to pull them in.  That fetching is handled by resolveXML(),\n * which iterates over the XML until all \"refs\" have been resolved (including any nested\n * references).\n *\n * Also, XSL files with a <!DOCTYPE [...]> cause MSIE's Microsoft.XMLDOM.loadXML() function\n * to choke, so I strip that out prior to parsing as well.\n *\n * TODO: Figure out why the XSLT document() function works great when the web browser loads an\n * XML file (and the associated XSL file) itself, but does not work when loading documents via\n * JavaScript XSLT support. Is it broken, is it a security issue, or am I just calling it wrong?\n *\n * @param {string} sXMLFile\n * @param {string|null|undefined} idMachine\n * @param {string|null|undefined} sAppName\n * @param {string|null|undefined} sAppClass\n * @param {string|null|undefined} sParms\n * @param {boolean} fResolve is true to resolve any \"ref\" attributes\n * @param {function(string)} display\n * @param {function(string,Object)} done (string contains the unparsed XML string data, and Object contains a parsed XML object)\n */\nfunction loadXML(sXMLFile, idMachine, sAppName, sAppClass, sParms, fResolve, display, done)\n{\n    var doneLoadXML = function(sURLName, sXML, nErrorCode) {\n        if (nErrorCode) {\n            if (!sXML) sXML = \"unable to load \" + sXMLFile + \" (\" + nErrorCode + \")\";\n            done(sXML, null);\n            return;\n        }\n        parseXML(sXML, sXMLFile, idMachine, sAppName, sAppClass, sParms, fResolve, display, done);\n    };\n    display(\"Loading \" + sXMLFile + \"...\");\n    Web.getResource(sXMLFile, null, fAsync, doneLoadXML);\n}\n\n/**\n * parseXML(sXML, sXMLFile, idMachine, sAppName, sAppClass, sParms, fResolve, display, done)\n *\n * Generates an XML document from an XML string. This function also provides a work-around for XSLT's\n * lack of support for the document() function (at least on some browsers), by replacing every reference\n * tag (ie, a tag with a \"ref\" attribute) with the contents of the referenced file.\n *\n * @param {string} sXML\n * @param {string|null} sXMLFile\n * @param {string|null|undefined} idMachine\n * @param {string|null|undefined} sAppName\n * @param {string|null|undefined} sAppClass\n * @param {string|null|undefined} sParms\n * @param {boolean} fResolve is true to resolve any \"ref\" attributes; default is false\n * @param {function(string)} display\n * @param {function(string,Object)} done (string contains the unparsed XML string data, and Object contains a parsed XML object)\n */\nfunction parseXML(sXML, sXMLFile, idMachine, sAppName, sAppClass, sParms, fResolve, display, done)\n{\n    var buildXML = function(sXML, sError) {\n        if (sError) {\n            done(sError, null);\n            return;\n        }\n        if (idMachine) {\n\n            /*\n             * A more sensible place to record the machine XML would be embedMachine(), like we do for the\n             * XSL file, but since we're about to modify the original machine XML, it's best to record it now.\n             */\n            Component.addMachineResource(idMachine, sXMLFile, sXML);\n\n            var sURL = sXMLFile;\n            if (sURL && sURL.indexOf('/') < 0 && window.location.pathname.slice(-1) == '/') {\n                sURL = window.location.pathname + sURL;\n            }\n            /*\n             * We embed the URL of the XML file both as a separate \"xml\" attribute for easy access from the\n             * XSL file, and as part of the \"parms\" attribute for easy access from machines (see getMachineParm()).\n             */\n            if (!sParms) {\n                sParms = '{';\n            } else if (sParms.slice(-1) == '}') {\n                sParms = sParms.slice(0, -1);\n                if (sParms.length > 1) sParms += ',';\n            } else {            // sParms must just be a \"state\" file, so encode it as a \"state\" property\n                sParms = '{state:\"' + sParms + '\",';\n            }\n            sParms += 'url:\"' + sURL + '\"}';\n            /*\n             * Note that while we no longer generate a machine XML file with a \"state\" attribute (because it's\n             * encoded inside the \"parms\" attribute), the XSL file must still cope with \"state\" attributes inside\n             * other XML files; for example, manifest XML files like /apps/pc/1981/visicalc/manifest.xml contain\n             * machine elements with \"state\" attributes that must still be passed down to the computer element\n             * \"the old fashioned way\".\n             *\n             * Until/unless that changes, components.xsl cannot be simplified as much as I might have hoped.\n             */\n            if (typeof resources == 'object') sURL = null;      // turn off URL inclusion if we have embedded resources\n            sParms = sParms.replace(/\\$/g, \"$$$$\");\n            sXML = sXML.replace(/(<machine[^>]*\\sid=)(['\"]).*?\\2/, \"$1$2\" + idMachine + \"$2\" + (sParms? \" parms='\" + sParms + \"'\" : \"\") + (sURL? ' url=\"' + sURL + '\"' : ''));\n        }\n\n        if (!fResolve) {\n            /*\n             * I'm trying to switch to a shared components.xsl (at least for all PC-class machines),\n             * but in the interim, that means hacking the XSL file on the fly to reflect the actual class.\n             */\n            sXML = sXML.replace(/(<xsl:variable name=\"APPNAME\">).*?(<\\/xsl:variable>)/, \"$1\" + sAppName + \"$2\");\n            sXML = sXML.replace(/(<xsl:variable name=\"APPCLASS\">).*?(<\\/xsl:variable>)/, \"$1\" + sAppClass + \"$2\");\n\n            /*\n             * Non-COMPILED kludge to replace the version number template in the XSL file (which we assume we're reading,\n             * since fResolve is false) with whatever XMLVERSION we extracted from the XML file (see corresponding kludge below).\n             *\n             * ES6 ALERT: Template strings.\n             */\n            if (!COMPILED && XMLVERSION) {\n                sXML = sXML.replace(/<xsl:variable name=\"APPVERSION\">1.x.x<\\/xsl:variable>/, `<xsl:variable name=\"APPVERSION\">${XMLVERSION}</xsl:variable>`);\n            }\n        }\n\n        /*\n         * If the resource we requested is not really an XML file (or the file didn't exist and the server simply returned\n         * a message like \"Cannot GET /devices/pc/machine/5150/cga/64kb/donkey/machine.xml\"), we'd like to display a more\n         * meaningful message, because the XML DOM parsers will blithely return a document that contains nothing useful; eg:\n         *\n         *      This page contains the following errors:error on line 1 at column 1:\n         *      Document is empty Below is a rendering of the page up to the first error.\n         *\n         * Supposedly, the IE XML DOM parser will throw an exception, but I haven't tested that, and unless all other\n         * browsers do that, that's not helpful.\n         *\n         * The best I can do at this stage (assuming Web.getResource() didn't drop any error information on the floor)\n         * is verify that the requested resource \"looks like\" valid XML (in other words, it begins with a '<').\n         */\n        var xmlDoc = null;\n        if (sXML.charAt(0) == '<') {\n            try {\n                /*\n                 * Another hack for MSIE, which fails to load XSL documents containing a <!DOCTYPE [...]> tag.\n                 *\n                 * This is also why the XSLTProcessor 'transformToFragment' method in Microsoft Edge silently failed,\n                 * so I had pull this hack out of the \"ActiveXObject\" code.  And rather than add yet-another Microsoft\n                 * browser check, I'm going to try doing this across the board, and hope that none of the other XSLT\n                 * processors fail *without* the DOCTYPE tag.\n                 */\n                if (!fResolve) {\n                    sXML = sXML.replace(/<!DOCTYPE(.|[\\r\\n])*]>\\s*/g, \"\");\n                }\n                /*\n                 * Beginning with Microsoft Edge and the corresponding release of Windows 10, all the\n                 * 'ActiveXObject' crud has gone away; but of course, this code must remain in place if\n                 * we want to continue supporting older Internet Explorer browsers (ie, back to IE9).\n                 */\n                /** @namespace window.ActiveXObject */\n                if (window.ActiveXObject || 'ActiveXObject' in window) {        // second test is required for IE11 on Windows 8.1\n                    xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n                    xmlDoc.async = false;\n                    xmlDoc['loadXML'](sXML);\n                } else {\n                    /** @namespace window.DOMParser */\n                    xmlDoc = (new window.DOMParser()).parseFromString(sXML, \"text/xml\");\n                }\n            } catch(e) {\n                xmlDoc = null;\n                sXML = e.message;\n            }\n        } else {\n            sXML = \"unrecognized XML: \" + (sXML.length > 255? sXML.substr(0, 255) + \"...\" : sXML);\n        }\n        done(sXML, xmlDoc);\n    };\n    if (sXML) {\n        if (PRIVATE) sXML = sXML.replace(/\\/library.xml/, \"/private/library.xml\");\n        if (fResolve) {\n            resolveXML(sXML, display, buildXML);\n            return;\n        }\n        buildXML(sXML, null);\n        return;\n    }\n    done(\"no data\" + (sXMLFile? \" for file: \" + sXMLFile : \"\"), null);\n}\n\n/**\n * resolveXML(sXML, display, done)\n *\n * Replaces every tag with a \"ref\" attribute with the contents of the corresponding file.\n *\n * TODO: Fix some of the limitations of this code, such as: 1) requiring the \"ref\" attribute\n * to appear as the tag's first attribute, 2) requiring the \"ref\" attribute to be double-quoted,\n * and 3) requiring the \"ref\" tag to be self-closing.\n *\n * @param {string} sXML\n * @param {function(string)} display\n * @param {function(string,(string|null))} done (the first string contains the resolved XML data, the second is for any error message)\n */\nfunction resolveXML(sXML, display, done)\n{\n    var matchRef;\n    var reRef = /<([a-z]+)\\s+ref=\"(.*?)\"(.*?)\\/>/g;\n\n    if ((matchRef = reRef.exec(sXML))) {\n\n        var sRefFile = matchRef[2];\n\n        var doneReadXML = function(sURLName, sXMLRef, nErrorCode) {\n            if (nErrorCode || !sXMLRef) {\n                done(sXML, \"unable to resolve XML reference: \" + matchRef[0] + \" (\" + nErrorCode + \")\");\n                return;\n            }\n            /*\n             * If there are additional attributes in the \"referring\" XML tag, we want to insert them\n             * into the \"referred\" XML tag; attributes that don't exist in the referred tag should be\n             * appended, and attributes that DO exist should be overwritten.\n             */\n            var sRefAttrs = matchRef[3];\n            if (sRefAttrs) {\n                var aXMLRefTag = sXMLRef.match(new RegExp(\"<\" + matchRef[1] + \"[^>]*>\"));\n                if (aXMLRefTag) {\n                    var sXMLNewTag = aXMLRefTag[0];\n                    /*\n                     * Iterate over all the attributes in the \"referring\" XML tag (sRefAttrs)\n                     */\n                    var matchAttr;\n                    var reAttr = /( [a-z]+=)(['\"])(.*?)\\2/gi;\n                    while ((matchAttr = reAttr.exec(sRefAttrs))) {\n                        if (sXMLNewTag.toLowerCase().indexOf(matchAttr[1].toLowerCase()) < 0) {\n                            /*\n                             * This is the append case....\n                             */\n                            sXMLNewTag = sXMLNewTag.replace(\">\", matchAttr[0] + \">\");\n                        } else {\n                            /*\n                             * This is the overwrite case....\n                             */\n                            sXMLNewTag = sXMLNewTag.replace(new RegExp(matchAttr[1] + \"(['\\\"])(.*?)\\\\1\"), matchAttr[0]);\n                        }\n                    }\n                    if (aXMLRefTag[0] != sXMLNewTag) {\n                        sXMLRef = sXMLRef.replace(aXMLRefTag[0], sXMLNewTag);\n                    }\n                } else {\n                    done(sXML, \"missing <\" + matchRef[1] + \"> in \" + sRefFile);\n                    return;\n                }\n            }\n\n            /*\n             * Apparently when a Windows Azure server delivers one of my XML files, it may modify the first line:\n             *\n             *      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n\n             *\n             * I didn't determine exactly what it was doing at this point (probably just changing the \\n to \\r\\n),\n             * but in any case, relaxing the following replace() solved it.\n             */\n            sXMLRef = sXMLRef.replace(/<\\?xml[^>]*>[\\r\\n]*/, \"\");\n\n            sXML = sXML.replace(matchRef[0], sXMLRef);\n\n            resolveXML(sXML, display, done);\n        };\n\n        display(\"Loading \" + sRefFile + \"...\");\n        Web.getResource(sRefFile, null, fAsync, doneReadXML);\n        return;\n    }\n    done(sXML, null);\n}\n\n/**\n * embedMachine(sAppName, sAppClass, sVersion, idMachine, sXMLFile, sXSLFile, sParms)\n *\n * This allows to you embed a machine on a web page, by transforming the machine XML into HTML.\n *\n * @param {string} sAppName is the app name (eg, \"PCx86\")\n * @param {string} sAppClass is the app class (eg, \"pcx86\"); also known as the machine class\n * @param {string} sVersion is the app version (eg, \"1.15.7\")\n * @param {string} idMachine\n * @param {string} [sXMLFile]\n * @param {string} [sXSLFile]\n * @param {string} [sParms]\n * @return {boolean} true if successful, false if error\n */\nfunction embedMachine(sAppName, sAppClass, sVersion, idMachine, sXMLFile, sXSLFile, sParms)\n{\n    var eMachine, eWarning, fSuccess = true;\n\n    if (!sXMLFile) {\n        sXMLFile = \"machine.xml\";\n        if (!sXSLFile) sXSLFile = \"components.xsl\";\n    }\n    \n    cAsyncMachines++;\n    Component.addMachine(idMachine);\n\n    var doneMachine = function() {\n\n        if (!--cAsyncMachines) {\n            if (fAsync) Web.enablePageEvents(true);\n        }\n    };\n\n    var displayError = function(sError) {\n        Component.log(sError);\n        displayMessage(\"Error: \" + sError);\n        if (fSuccess) doneMachine();\n        fSuccess = false;\n    };\n\n    var displayMessage = function(sMessage) {\n        if (eWarning === undefined) {\n            /*\n             * Our MarkOut module (in convertMDMachineLinks()) creates machine containers that look like:\n             *\n             *      <div id=\"' + sMachineID + '\" class=\"machine-placeholder\"><p>Embedded PC</p><p class=\"machine-warning\">...</p></div>\n             *\n             * with the \"machine-warning\" paragraph pre-populated with a warning message that the user will\n             * see if nothing at all happens.  But hopefully, in the normal case (and especially the error case),\n             * *something* will have happened.\n             *\n             * Note that it is the HTMLOut module (in processMachines()) that ultimately decides which scripts to\n             * include and then generates the embedXXX() call.\n             */\n            var aeWarning = (eMachine && Component.getElementsByClass(eMachine, \"machine-warning\"));\n            eWarning = (aeWarning && aeWarning[0]) || eMachine;\n        }\n        if (eWarning) eWarning.innerHTML = Str.escapeHTML(sMessage);\n    };\n\n    try {\n        eMachine = document.getElementById(idMachine);\n        if (eMachine) {\n\n            /*\n             * If we have a 'css' resource, add it to the page first.\n             */\n            var css;\n            if (typeof resources == \"object\" && (css = resources['css'])) {\n                var head = document.head || document.getElementsByTagName('head')[0];\n                var style = document.createElement('style');\n                style.type = 'text/css';\n                // noinspection JSDeprecatedSymbols\n                if (style.styleSheet) {\n                    // noinspection JSDeprecatedSymbols\n                    style.styleSheet.cssText = css;\n                } else {\n                    style.appendChild(document.createTextNode(css));\n                }\n                head.appendChild(style);\n            }\n\n            if (!sXSLFile) {\n                /*\n                 * Now that PCjs is an open-source project, we can make the following test more flexible,\n                 * and revert to the internal template if DEBUG *or* internal version (instead of *and*).\n                 *\n                 * Third-party sites that don't use the PCjs server will ALWAYS want to specify a fully-qualified\n                 * path to the XSL file, unless they choose to mirror our folder structure.\n                 */\n                var sAppFolder = sAppClass;\n                if (DEBUG || sVersion == \"1.x.x\") {\n                    if (sAppClass != \"c1pjs\") sAppFolder = \"shared\";\n                    sXSLFile = \"/modules/\" + sAppFolder + \"/templates/components.xsl\";\n                } else {\n                    if (sAppClass.substr(0, 3) == \"pdp\") sAppFolder = \"pdpjs\";\n                    sXSLFile = \"/versions/\" + sAppFolder + \"/\" + sVersion + \"/components.xsl\";\n                }\n            }\n\n            var processXML = function(sXML, xml) {\n                if (!xml) {\n                    displayError(sXML);\n                    return;\n                }\n\n                /*\n                 * Non-COMPILED kludge to extract the version number from the stylesheet path in the machine XML file;\n                 * we don't need this code in COMPILED (non-DEBUG) releases, because APPVERSION is hard-coded into them.\n                 */\n                if (!COMPILED) {\n                    var aMatch = sXML.match(/<\\?xml-stylesheet[^>]* href=(['\"])[^'\"]*?\\/([0-9.]*)\\/([^'\"]*)\\1/);\n                    if (aMatch) XMLVERSION = aMatch[2];\n                }\n\n                var transformXML = function(sXSL, xsl) {\n                    if (!xsl) {\n                        displayError(sXSL);\n                        return;\n                    }\n\n                    /*\n                     * Record the XSL file, in case someone wants to save the entire machine later.\n                     * \n                     * NOTE: sXSLFile will never be undefined by this point, but apparently the Closure Compiler doesn't realize that.  \n                     */\n                    Component.addMachineResource(idMachine, sXSLFile || \"\", sXSL);\n\n                    /*\n                     * The <machine> template in components.xsl now generates a \"machine div\" that makes\n                     * the div we required the caller of embedMachine() to provide redundant, so instead\n                     * of appending this fragment to the caller's node, we REPLACE the caller's node.\n                     * This works only because because we ALSO inject the caller's \"machine div\" ID into\n                     * the fragment's ID during parseXML().\n                     *\n                     *      eMachine.innerHTML = sFragment;\n                     *\n                     * Also, if the transform function fails, make sure you're using the appropriate\n                     * \"components.xsl\" and not a \"machine.xsl\", because the latter will not produce valid\n                     * embeddable HTML (and is the most common cause of failure at this final stage).\n                     */\n                    displayMessage(\"Processing \" + sXMLFile + \"...\");\n\n                    /*\n                     * Beginning with Microsoft Edge and the corresponding release of Windows 10, all the\n                     * 'ActiveXObject' crud has gone away; but of course, this code must remain in place if\n                     * we want to continue supporting older Internet Explorer browsers (ie, back to IE9).\n                     */\n                    if (window.ActiveXObject || 'ActiveXObject' in window) {        // second test is required for IE11 on Windows 8.1\n                        var sFragment = xml['transformNode'](xsl);\n                        if (sFragment) {\n                            eMachine.outerHTML = sFragment;\n                            doneMachine();\n                        } else {\n                            displayError(\"transformNodeToObject failed\");\n                        }\n                    }\n                    else if (document.implementation && document.implementation.createDocument) {\n                        var xsltProcessor = new XSLTProcessor();\n                        xsltProcessor['importStylesheet'](xsl);\n                        var eFragment = xsltProcessor['transformToFragment'](xml, document);\n                        if (eFragment) {\n                            /*\n                             * This fails in Microsoft Edge...\n                             *\n                            var machine = eFragment.getElementById(idMachine);\n                            if (!machine) {\n                                displayError(\"machine generation failed: \" + idMachine);\n                            } else\n                            */\n                            if (eMachine.parentNode) {\n                                eMachine.parentNode.replaceChild(eFragment, eMachine);\n                                doneMachine();\n                            } else {\n                                /*\n                                 * NOTE: This error can occur if our Node web server, when processing a folder with\n                                 * both a manifest.xml with a machine.xml reference AND a README.md containing a\n                                 * machine link, generates duplicate embedXXX() calls for the same machine; if the\n                                 * first embedXXX() call finds its target, subsequent calls for the same target will\n                                 * fail.\n                                 *\n                                 * Technically, such a folder is in a misconfigured state, but it happens, in part\n                                 * because when we switched to the Jekyll web server, we had to add machine links to\n                                 * all README.md files where we had previously relied on manifest.xml or machine.xml\n                                 * processing.  This is because the Jekyll web server currently doesn't process XML\n                                 * files, nor is support for that likely to be added any time soon; it was a nice\n                                 * feature of the Node web server, but it's not clear that it's worth doing for Jekyll.\n                                 */\n                                displayError(\"invalid machine element: \" + idMachine);\n                            }\n                        } else {\n                            displayError(\"transformToFragment failed\");\n                        }\n                    } else {\n                        /*\n                         * Perhaps I should have performed this test at the outset; on the other hand, I'm\n                         * not aware of any browsers don't support one or both of the above XSLT transformation\n                         * methods, so treat this as a bug.\n                         */\n                        displayError(\"unable to transform XML: unsupported browser\");\n                    }\n                };\n                /*\n                 * NOTE: sXSLFile will never be undefined by this point, but apparently the Closure Compiler doesn't realize that.  \n                 */\n                loadXML(sXSLFile || \"\", null, sAppName, sAppClass, null, false, displayMessage, transformXML);\n            };\n\n            if (sXMLFile.charAt(0) != '<') {\n                loadXML(sXMLFile, idMachine, sAppName, sAppClass, sParms, true, displayMessage, processXML);\n            } else {\n                parseXML(sXMLFile, null, idMachine, sAppName, sAppClass, sParms, false, displayMessage, processXML);\n            }\n        } else {\n            displayError(\"missing machine element: \" + idMachine);\n        }\n    } catch(e) {\n        displayError(e.message);\n    }\n    return fSuccess;\n}\n\n/**\n * embedC1P(idMachine, sXMLFile, sXSLFile)\n *\n * @param {string} idMachine\n * @param {string} [sXMLFile]\n * @param {string} [sXSLFile]\n * @return {boolean} true if successful, false if error\n */\nfunction embedC1P(idMachine, sXMLFile, sXSLFile)\n{\n    if (fAsync) Web.enablePageEvents(false);\n    return embedMachine(\"C1Pjs\", \"c1pjs\", APPVERSION, idMachine, sXMLFile, sXSLFile);\n}\n\n/**\n * embedPCx86(idMachine, sXMLFile, sXSLFile, sParms)\n *\n * @param {string} idMachine\n * @param {string} [sXMLFile]\n * @param {string} [sXSLFile]\n * @param {string} [sParms]\n * @return {boolean} true if successful, false if error\n */\nfunction embedPCx86(idMachine, sXMLFile, sXSLFile, sParms)\n{\n    if (fAsync) Web.enablePageEvents(false);\n    return embedMachine(\"PCx86\", \"pcx86\", APPVERSION, idMachine, sXMLFile, sXSLFile, sParms);\n}\n\n/**\n * embedPC8080(idMachine, sXMLFile, sXSLFile, sParms)\n *\n * @param {string} idMachine\n * @param {string} [sXMLFile]\n * @param {string} [sXSLFile]\n * @param {string} [sParms]\n * @return {boolean} true if successful, false if error\n */\nfunction embedPC8080(idMachine, sXMLFile, sXSLFile, sParms)\n{\n    if (fAsync) Web.enablePageEvents(false);\n    return embedMachine(\"PC8080\", \"pc8080\", APPVERSION, idMachine, sXMLFile, sXSLFile, sParms);\n}\n\n/**\n * embedPDP10(idMachine, sXMLFile, sXSLFile, sParms)\n *\n * @param {string} idMachine\n * @param {string} [sXMLFile]\n * @param {string} [sXSLFile]\n * @param {string} [sParms]\n * @return {boolean} true if successful, false if error\n */\nfunction embedPDP10(idMachine, sXMLFile, sXSLFile, sParms)\n{\n    if (fAsync) Web.enablePageEvents(false);\n    return embedMachine(\"PDPjs\", \"pdp10\", APPVERSION, idMachine, sXMLFile, sXSLFile, sParms);\n}\n\n/**\n * embedPDP11(idMachine, sXMLFile, sXSLFile, sParms)\n *\n * @param {string} idMachine\n * @param {string} [sXMLFile]\n * @param {string} [sXSLFile]\n * @param {string} [sParms]\n * @return {boolean} true if successful, false if error\n */\nfunction embedPDP11(idMachine, sXMLFile, sXSLFile, sParms)\n{\n    if (fAsync) Web.enablePageEvents(false);\n    return embedMachine(\"PDPjs\", \"pdp11\", APPVERSION, idMachine, sXMLFile, sXSLFile, sParms);\n}\n\n/**\n * findMachineComponent(idMachine, sType)\n *\n * @param {string} idMachine\n * @param {string} sType\n * @return {Component|null}\n */\nfunction findMachineComponent(idMachine, sType)\n{\n    return Component.getComponentByType(sType, idMachine + \".machine\");\n}\n\n/**\n * commandMachine(control, fSingle, idMachine, sComponent, sCommand, sValue)\n *\n * Use Component methods to find the requested component for a specific machine, and if the component is found,\n * then check its 'exports' table for an entry matching the specified command string, and if an entry is found, then\n * the corresponding function is called with the specified data.\n *\n * @param {Object} control\n * @param {boolean} fSingle\n * @param {string} idMachine\n * @param {string} sComponent\n * @param {string} sCommand\n * @param {string} [sValue]\n * @return {boolean}\n */\nfunction commandMachine(control, fSingle, idMachine, sComponent, sCommand, sValue)\n{\n    if (sCommand == \"script\") {\n        if (Component.processScript(idMachine, sValue)) {\n            if (fSingle) control.disabled = true;\n            return true;\n        }\n        return false;\n    }\n    if (sComponent) {\n        var component = Component.getComponentByType(sComponent, idMachine + \".machine\");\n        if (component) {\n            var exports = component['exports'];\n            if (exports) {\n                var fnCommand = exports[sCommand];\n                if (fnCommand) {\n                    if (fnCommand.call(component, sValue)) {\n                        if (fSingle) control.disabled = true;\n                        return true;\n                    }\n                    return false;\n                }\n            }\n        }\n    }\n    console.log(\"unimplemented: commandMachine('\" + idMachine + \"','\" + sComponent + \"','\" + sCommand + \"','\" + sValue + \"')\");\n    return false;\n}\n\n/**\n * Prevent the Closure Compiler from renaming functions we want to export, by adding them as global properties.\n *\n * TODO: Consider making all these functions properties on a single global object (eg, 'PCjs'), to minimize global\n * pollution and risk of name collision.\n */\nif (APPNAME == \"C1Pjs\") {\n    window['embedC1P']    = embedC1P;\n}\nif (APPNAME == \"PCx86\") {\n    window['embedPC']     = embedPCx86;         // WARNING: embedPC() deprecated as of v1.23.0\n    window['embedPCx86']  = embedPCx86;\n}\nif (APPNAME == \"PC8080\") {\n    window['embedPC8080'] = embedPC8080;\n}\nif (APPNAME == \"PDPjs\") {\n    window['embedPDP10']  = embedPDP10;\n    window['embedPDP11']  = embedPDP11;\n}\n\nwindow['commandMachine'] = commandMachine;\n\nwindow['enableEvents'] = Web.enablePageEvents;\nwindow['sendEvent']    = Web.sendPageEvent;\n"]}